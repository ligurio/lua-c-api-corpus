luaL_findtable:
   84|     49|{
   85|     49|  const char *e;
   86|     49|  lua_pushvalue(L, idx);
   87|     49|  do {
   88|     49|    e = strchr(fname, '.');
   89|     49|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 49, False: 0]
  ------------------
   90|     49|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|     49|    lua_rawget(L, -2);
   92|     49|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|     49|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|     49|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 49, False: 0]
  |  |  ------------------
  ------------------
   93|     49|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|     49|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|     49|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 49]
  ------------------
   95|     49|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|     49|      lua_pushvalue(L, -2);
   97|     49|      lua_settable(L, -4);  /* set new table into field */
   98|     49|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|      0|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      0|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 0]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|     49|    lua_remove(L, -2);  /* remove previous table */
  103|     49|    fname = e + 1;
  104|     49|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 0, False: 49]
  ------------------
  105|     49|  return NULL;
  106|     49|}
luaL_newstate:
  371|     49|{
  372|     49|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|     49|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|     49|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|     49|#endif
  378|     49|  if (L) {
  ------------------
  |  Branch (378:7): [True: 49, False: 0]
  ------------------
  379|     49|    G(L)->panic = panic;
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|     49|#ifndef LUAJIT_DISABLE_VMEVENT
  381|     49|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|     49|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|     49|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|     49|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|     49|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|     49|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|     49|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|     49|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|     49|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|     49|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|     49|    L->top--;
  386|     49|#endif
  387|     49|  }
  388|     49|  return L;
  389|     49|}

lj_alloc_create:
 1227|     49|{
 1228|     49|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|     49|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1229|     49|  char *tbase;
 1230|     49|  INIT_MMAP();
  ------------------
  |  |  379|     49|#define INIT_MMAP()		((void)0)
  ------------------
 1231|     49|  UNUSED(rs);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1232|     49|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  321|     49|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1233|     49|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|     49|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|     49|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|     49|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1233:7): [True: 49, False: 0]
  ------------------
 1234|     49|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  433|     49|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|     49|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|     49|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1235|     49|    mchunkptr mn;
 1236|     49|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  425|     49|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|     49| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|     49|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1237|     49|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  422|     49|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|     49|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|     49|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1238|     49|    memset(m, 0, msize);
 1239|     49|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  441|     49|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  442|     49|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|     49|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1240|     49|    m->seg.base = tbase;
 1241|     49|    m->seg.size = tsize;
 1242|     49|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|     49|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1243|     49|    init_bins(m);
 1244|     49|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  461|     49|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  443|     49|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|     49|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|     49|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|     49|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1245|     49|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  600|     49|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|     49| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|     49|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|     49|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|     49|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|     49|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|     49|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|     49|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1246|     49|    return m;
 1247|     49|  }
 1248|      0|  return NULL;
 1249|     49|}
lj_alloc_setprng:
 1252|     49|{
 1253|     49|  mstate ms = (mstate)msp;
 1254|     49|  ms->prng = rs;
 1255|     49|}
lj_alloc_destroy:
 1258|     49|{
 1259|     49|  mstate ms = (mstate)msp;
 1260|     49|  msegmentptr sp = &ms->seg;
 1261|     98|  while (sp != 0) {
  ------------------
  |  Branch (1261:10): [True: 49, False: 49]
  ------------------
 1262|     49|    char *base = sp->base;
 1263|     49|    size_t size = sp->size;
 1264|     49|    sp = sp->next;
 1265|     49|    CALL_MUNMAP(base, size);
 1266|     49|  }
 1267|     49|}
lj_alloc_f:
 1474|  6.08k|{
 1475|  6.08k|  (void)osize;
 1476|  6.08k|  if (nsize == 0) {
  ------------------
  |  Branch (1476:7): [True: 3.13k, False: 2.95k]
  ------------------
 1477|  3.13k|    return lj_alloc_free(msp, ptr);
 1478|  3.13k|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1478:14): [True: 2.94k, False: 10]
  ------------------
 1479|  2.94k|    return lj_alloc_malloc(msp, nsize);
 1480|  2.94k|  } else {
 1481|     10|    return lj_alloc_realloc(msp, ptr, nsize);
 1482|     10|  }
 1483|  6.08k|}
lj_alloc.c:mmap_probe:
  234|     49|{
  235|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  236|     49|  static uintptr_t hint_addr = 0;
  237|     49|  int olderr = errno;
  238|     49|  int retry;
  239|     49|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|     49|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (239:19): [True: 49, False: 0]
  ------------------
  240|     49|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|     49|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|     49|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|     49|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  241|     49|    uintptr_t addr = (uintptr_t)p;
  242|     49|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|     49|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|     98|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (242:9): [True: 49, False: 0]
  |  Branch (242:42): [True: 49, False: 0]
  ------------------
  243|     49|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|     49|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (243:2): [True: 49, False: 0]
  ------------------
  244|       |      /* We got a suitable address. Bump the hint address. */
  245|     49|      hint_addr = addr + size;
  246|     49|      errno = olderr;
  247|     49|      return p;
  248|     49|    }
  249|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (249:9): [True: 0, False: 0]
  ------------------
  250|      0|      munmap(p, size);
  251|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (251:16): [True: 0, False: 0]
  ------------------
  252|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  253|      0|    }
  254|      0|    if (hint_addr) {
  ------------------
  |  Branch (254:9): [True: 0, False: 0]
  ------------------
  255|       |      /* First, try linear probing. */
  256|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|	hint_addr += 0x1000000;
  258|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (258:6): [True: 0, False: 0]
  ------------------
  259|      0|	  hint_addr = 0;
  260|      0|	continue;
  261|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (261:18): [True: 0, False: 0]
  ------------------
  262|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  263|      0|	hint_addr = 0;
  264|      0|	continue;
  265|      0|      }
  266|      0|    }
  267|       |    /* Finally, try pseudo-random probing. */
  268|      0|    do {
  269|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  270|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (270:14): [True: 0, False: 0]
  ------------------
  271|      0|  }
  272|      0|  errno = olderr;
  273|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  274|     49|}
lj_alloc.c:init_bins:
  892|     49|{
  893|       |  /* Establish circular links for smallbins */
  894|     49|  bindex_t i;
  895|  1.61k|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  521|  1.61k|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (895:15): [True: 1.56k, False: 49]
  ------------------
  896|  1.56k|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  610|  1.56k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
  897|  1.56k|    bin->fd = bin->bk = bin;
  898|  1.56k|  }
  899|     49|}
lj_alloc.c:init_top:
  876|     49|{
  877|       |  /* Ensure alignment */
  878|     49|  size_t offset = align_offset(chunk2mem(p));
  ------------------
  |  |   66|     49| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 49, False: 0]
  |  |  ------------------
  |  |   67|     49|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  879|     49|  p = (mchunkptr)((char *)p + offset);
  880|     49|  psize -= offset;
  881|       |
  882|     49|  m->top = p;
  883|     49|  m->topsize = psize;
  884|     49|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  441|     49|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  885|       |  /* set size of fake trailing chunk holding overhead space only once */
  886|     49|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  457|     49|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  600|     49|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|     49| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|     49|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|     49|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|     49|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|     49|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|     49|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|     49|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     49|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     49|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     49|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  887|     49|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|     49|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
  888|     49|}
lj_alloc.c:CALL_MUNMAP:
  348|     49|{
  349|     49|  int olderr = errno;
  350|     49|  int ret = munmap(ptr, size);
  351|     49|  errno = olderr;
  352|     49|  return ret;
  353|     49|}
lj_alloc.c:lj_alloc_free:
 1353|  3.14k|{
 1354|  3.14k|  if (ptr != 0) {
  ------------------
  |  Branch (1354:7): [True: 2.89k, False: 245]
  ------------------
 1355|  2.89k|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  423|  2.89k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.89k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.89k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1356|  2.89k|    mstate fm = (mstate)msp;
 1357|  2.89k|    size_t psize = chunksize(p);
  ------------------
  |  |  451|  2.89k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  2.89k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.89k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.89k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  2.89k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.89k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1358|  2.89k|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  457|  2.89k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1359|  2.89k|    if (!pinuse(p)) {
  ------------------
  |  |  450|  2.89k|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  2.89k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.89k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1359:9): [True: 1.27k, False: 1.62k]
  ------------------
 1360|  1.27k|      size_t prevsize = p->prev_foot;
 1361|  1.27k|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|  1.27k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.27k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1361:11): [True: 0, False: 1.27k]
  ------------------
 1362|      0|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1363|      0|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  415|      0|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|      0|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1364|      0|	CALL_MUNMAP((char *)p - prevsize, psize);
 1365|      0|	return NULL;
 1366|  1.27k|      } else {
 1367|  1.27k|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  458|  1.27k|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1368|  1.27k|	psize += prevsize;
 1369|  1.27k|	p = prev;
 1370|       |	/* consolidate backward */
 1371|  1.27k|	if (p != fm->dv) {
  ------------------
  |  Branch (1371:6): [True: 1.27k, False: 0]
  ------------------
 1372|  1.27k|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  820|  1.27k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  1.27k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  1.27k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  1.27k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 935, False: 344]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|    935|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|    935|  mchunkptr F = P->fd;\
  |  |  |  |  692|    935|  mchunkptr B = P->bk;\
  |  |  |  |  693|    935|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|    935|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|    935|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|    935|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 418, False: 517]
  |  |  |  |  ------------------
  |  |  |  |  695|    418|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|    418|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    418|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|    517|  } else {\
  |  |  |  |  697|    517|    F->bk = B;\
  |  |  |  |  698|    517|    B->fd = F;\
  |  |  |  |  699|    517|  }\
  |  |  |  |  700|    935|}
  |  |  ------------------
  |  |  821|    935|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|    344|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|    344|  tchunkptr XP = X->parent;\
  |  |  |  |  769|    344|  tchunkptr R;\
  |  |  |  |  770|    344|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 3, False: 341]
  |  |  |  |  ------------------
  |  |  |  |  771|      3|    tchunkptr F = X->fd;\
  |  |  |  |  772|      3|    R = X->bk;\
  |  |  |  |  773|      3|    F->bk = R;\
  |  |  |  |  774|      3|    R->fd = F;\
  |  |  |  |  775|    341|  } else {\
  |  |  |  |  776|    341|    tchunkptr *RP;\
  |  |  |  |  777|    341|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 21, False: 320]
  |  |  |  |  ------------------
  |  |  |  |  778|    341|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 15, False: 305]
  |  |  |  |  ------------------
  |  |  |  |  779|     36|      tchunkptr *CP;\
  |  |  |  |  780|     37|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 1, False: 36]
  |  |  |  |  ------------------
  |  |  |  |  781|     37|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 0, False: 36]
  |  |  |  |  ------------------
  |  |  |  |  782|      1|	R = *(RP = CP);\
  |  |  |  |  783|      1|      }\
  |  |  |  |  784|     36|      *RP = 0;\
  |  |  |  |  785|     36|    }\
  |  |  |  |  786|    341|  }\
  |  |  |  |  787|    344|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 344, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  788|    344|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|    344|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|    344|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 291, False: 53]
  |  |  |  |  ------------------
  |  |  |  |  790|    291|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 258, False: 33]
  |  |  |  |  ------------------
  |  |  |  |  791|    291|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|    258|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    258|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|    291|    } else {\
  |  |  |  |  793|     53|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 30, False: 23]
  |  |  |  |  ------------------
  |  |  |  |  794|     53|	XP->child[0] = R;\
  |  |  |  |  795|     53|      else \
  |  |  |  |  796|     53|	XP->child[1] = R;\
  |  |  |  |  797|     53|    }\
  |  |  |  |  798|    344|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 39, False: 305]
  |  |  |  |  ------------------
  |  |  |  |  799|     39|      tchunkptr C0, C1;\
  |  |  |  |  800|     39|      R->parent = XP;\
  |  |  |  |  801|     39|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 7, False: 32]
  |  |  |  |  ------------------
  |  |  |  |  802|      7|	R->child[0] = C0;\
  |  |  |  |  803|      7|	C0->parent = R;\
  |  |  |  |  804|      7|      }\
  |  |  |  |  805|     39|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 0, False: 39]
  |  |  |  |  ------------------
  |  |  |  |  806|      0|	R->child[1] = C1;\
  |  |  |  |  807|      0|	C1->parent = R;\
  |  |  |  |  808|      0|      }\
  |  |  |  |  809|     39|    }\
  |  |  |  |  810|    344|  }\
  |  |  |  |  811|    344|}
  |  |  ------------------
  ------------------
 1373|  1.27k|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1373:13): [True: 0, False: 0]
  ------------------
 1374|      0|	  fm->dvsize = psize;
 1375|      0|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|      0|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|      0|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1376|      0|	  return NULL;
 1377|      0|	}
 1378|  1.27k|      }
 1379|  1.27k|    }
 1380|  2.89k|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  449|  2.89k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  2.89k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.89k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1380:9): [True: 1.62k, False: 1.27k]
  ------------------
 1381|  1.62k|      if (next == fm->top) {
  ------------------
  |  Branch (1381:11): [True: 184, False: 1.43k]
  ------------------
 1382|    184|	size_t tsize = fm->topsize += psize;
 1383|    184|	fm->top = p;
 1384|    184|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|    184|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|    184|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1385|    184|	if (p == fm->dv) {
  ------------------
  |  Branch (1385:6): [True: 0, False: 184]
  ------------------
 1386|      0|	  fm->dv = 0;
 1387|      0|	  fm->dvsize = 0;
 1388|      0|	}
 1389|    184|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1389:6): [True: 0, False: 184]
  ------------------
 1390|      0|	  alloc_trim(fm, 0);
 1391|    184|	return NULL;
 1392|  1.43k|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1392:18): [True: 0, False: 1.43k]
  ------------------
 1393|      0|	size_t dsize = fm->dvsize += psize;
 1394|      0|	fm->dv = p;
 1395|      0|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1396|      0|	return NULL;
 1397|  1.43k|      } else {
 1398|  1.43k|	size_t nsize = chunksize(next);
  ------------------
  |  |  451|  1.43k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  1.43k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  1.43k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.43k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  1.43k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.43k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1399|  1.43k|	psize += nsize;
 1400|  1.43k|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  820|  1.43k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  1.43k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  1.43k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  1.43k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 976, False: 460]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|    976|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|    976|  mchunkptr F = P->fd;\
  |  |  |  |  692|    976|  mchunkptr B = P->bk;\
  |  |  |  |  693|    976|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|    976|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|    976|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|    976|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 547, False: 429]
  |  |  |  |  ------------------
  |  |  |  |  695|    547|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|    547|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    547|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|    547|  } else {\
  |  |  |  |  697|    429|    F->bk = B;\
  |  |  |  |  698|    429|    B->fd = F;\
  |  |  |  |  699|    429|  }\
  |  |  |  |  700|    976|}
  |  |  ------------------
  |  |  821|    976|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|    460|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|    460|  tchunkptr XP = X->parent;\
  |  |  |  |  769|    460|  tchunkptr R;\
  |  |  |  |  770|    460|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 3, False: 457]
  |  |  |  |  ------------------
  |  |  |  |  771|      3|    tchunkptr F = X->fd;\
  |  |  |  |  772|      3|    R = X->bk;\
  |  |  |  |  773|      3|    F->bk = R;\
  |  |  |  |  774|      3|    R->fd = F;\
  |  |  |  |  775|    457|  } else {\
  |  |  |  |  776|    457|    tchunkptr *RP;\
  |  |  |  |  777|    457|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 28, False: 429]
  |  |  |  |  ------------------
  |  |  |  |  778|    457|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 24, False: 405]
  |  |  |  |  ------------------
  |  |  |  |  779|     52|      tchunkptr *CP;\
  |  |  |  |  780|     54|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 0, False: 54]
  |  |  |  |  ------------------
  |  |  |  |  781|     54|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 2, False: 52]
  |  |  |  |  ------------------
  |  |  |  |  782|      2|	R = *(RP = CP);\
  |  |  |  |  783|      2|      }\
  |  |  |  |  784|     52|      *RP = 0;\
  |  |  |  |  785|     52|    }\
  |  |  |  |  786|    457|  }\
  |  |  |  |  787|    460|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 459, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  788|    459|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|    459|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|    459|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 388, False: 71]
  |  |  |  |  ------------------
  |  |  |  |  790|    388|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 337, False: 51]
  |  |  |  |  ------------------
  |  |  |  |  791|    388|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|    337|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    337|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|    388|    } else {\
  |  |  |  |  793|     71|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 44, False: 27]
  |  |  |  |  ------------------
  |  |  |  |  794|     71|	XP->child[0] = R;\
  |  |  |  |  795|     71|      else \
  |  |  |  |  796|     71|	XP->child[1] = R;\
  |  |  |  |  797|     71|    }\
  |  |  |  |  798|    459|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 54, False: 405]
  |  |  |  |  ------------------
  |  |  |  |  799|     54|      tchunkptr C0, C1;\
  |  |  |  |  800|     54|      R->parent = XP;\
  |  |  |  |  801|     54|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 2, False: 52]
  |  |  |  |  ------------------
  |  |  |  |  802|      2|	R->child[0] = C0;\
  |  |  |  |  803|      2|	C0->parent = R;\
  |  |  |  |  804|      2|      }\
  |  |  |  |  805|     54|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 2, False: 52]
  |  |  |  |  ------------------
  |  |  |  |  806|      2|	R->child[1] = C1;\
  |  |  |  |  807|      2|	C1->parent = R;\
  |  |  |  |  808|      2|      }\
  |  |  |  |  809|     54|    }\
  |  |  |  |  810|    459|  }\
  |  |  |  |  811|    460|}
  |  |  ------------------
  ------------------
 1401|  1.43k|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  473|  1.43k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  1.43k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.43k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  1.43k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1402|  1.43k|	if (p == fm->dv) {
  ------------------
  |  Branch (1402:6): [True: 0, False: 1.43k]
  ------------------
 1403|      0|	  fm->dvsize = psize;
 1404|      0|	  return NULL;
 1405|      0|	}
 1406|  1.43k|      }
 1407|  1.62k|    } else {
 1408|  1.27k|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|  1.27k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  1.27k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  1.27k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.27k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  1.27k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  1.27k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.27k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  1.27k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  1.27k|    }
 1410|       |
 1411|  2.71k|    if (is_small(psize)) {
  ------------------
  |  |  604|  2.71k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  523|  2.71k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  521|  2.71k|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (604:22): [True: 1.91k, False: 804]
  |  |  ------------------
  ------------------
 1412|  1.91k|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  675|  1.91k|#define insert_small_chunk(M, P, S) {\
  |  |  676|  1.91k|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  605|  1.91k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  1.91k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  677|  1.91k|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  610|  1.91k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  678|  1.91k|  mchunkptr F = B;\
  |  |  679|  1.91k|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  649|  1.91k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  1.91k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (679:7): [True: 965, False: 946]
  |  |  ------------------
  |  |  680|  1.91k|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  647|    965|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    965|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  681|  1.91k|  else\
  |  |  682|  1.91k|    F = B->fd;\
  |  |  683|  1.91k|  B->fd = P;\
  |  |  684|  1.91k|  F->bk = P;\
  |  |  685|  1.91k|  P->fd = F;\
  |  |  686|  1.91k|  P->bk = B;\
  |  |  687|  1.91k|}
  ------------------
 1413|  1.91k|    } else {
 1414|    804|      tchunkptr tp = (tchunkptr)p;
 1415|    804|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  728|    804|#define insert_large_chunk(M, X, S) {\
  |  |  729|    804|  tbinptr *H;\
  |  |  730|    804|  bindex_t I;\
  |  |  731|    804|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|    804|#define compute_tree_index(S, I)\
  |  |  |  |  615|    804|{\
  |  |  |  |  616|    804|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|    804|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|    804|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 804]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|    804|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 804]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|    804|  } else {\
  |  |  |  |  622|    804|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|    804|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|    804|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|    804|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|    804|  }\
  |  |  |  |  625|    804|}
  |  |  ------------------
  |  |  732|    804|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|    804|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|    804|  X->index = I;\
  |  |  734|    804|  X->child[0] = X->child[1] = 0;\
  |  |  735|    804|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|    804|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    804|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 595, False: 209]
  |  |  ------------------
  |  |  736|    595|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|    595|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    595|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|    595|    *H = X;\
  |  |  738|    595|    X->parent = (tchunkptr)H;\
  |  |  739|    595|    X->fd = X->bk = X;\
  |  |  740|    595|  } else {\
  |  |  741|    209|    tchunkptr T = *H;\
  |  |  742|    209|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|    209|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|    209|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 209]
  |  |  |  |  ------------------
  |  |  |  |  634|    209|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|    209|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    209|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|    209|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|    227|    for (;;) {\
  |  |  744|    227|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|    227|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|    227|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|    227|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|    227|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|    227|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|    227|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 221, False: 6]
  |  |  ------------------
  |  |  745|    221|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|    221|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|    221|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|    221|	K <<= 1;\
  |  |  747|    221|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 18, False: 203]
  |  |  ------------------
  |  |  748|     18|	  T = *C;\
  |  |  749|    203|	} else {\
  |  |  750|    203|	  *C = X;\
  |  |  751|    203|	  X->parent = T;\
  |  |  752|    203|	  X->fd = X->bk = X;\
  |  |  753|    203|	  break;\
  |  |  754|    203|	}\
  |  |  755|    221|      } else {\
  |  |  756|      6|	tchunkptr F = T->fd;\
  |  |  757|      6|	T->fd = F->bk = X;\
  |  |  758|      6|	X->fd = F;\
  |  |  759|      6|	X->bk = T;\
  |  |  760|      6|	X->parent = 0;\
  |  |  761|      6|	break;\
  |  |  762|      6|      }\
  |  |  763|    227|    }\
  |  |  764|    209|  }\
  |  |  765|    804|}
  ------------------
 1416|    804|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1416:11): [True: 0, False: 804]
  ------------------
 1417|      0|	release_unused_segments(fm);
 1418|    804|    }
 1419|  2.71k|  }
 1420|  2.96k|  return NULL;
 1421|  3.14k|}
lj_alloc.c:lj_alloc_malloc:
 1270|  2.94k|{
 1271|  2.94k|  mstate ms = (mstate)msp;
 1272|  2.94k|  void *mem;
 1273|  2.94k|  size_t nb;
 1274|  2.94k|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  528|  2.94k|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  527|  2.94k|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  526|  2.94k|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.94k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  2.94k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.94k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  2.94k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.94k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.94k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|  2.94k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.94k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1274:7): [True: 2.73k, False: 212]
  ------------------
 1275|  2.73k|    bindex_t idx;
 1276|  2.73k|    binmap_t smallbits;
 1277|  2.73k|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  429|  2.73k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  419|  2.73k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  2.73k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.73k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.73k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.73k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.73k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.73k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.73k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  410|  2.73k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.73k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.73k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  433|  5.47k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  2.73k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.73k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.73k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.73k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.73k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.73k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.73k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.73k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1277:10): [True: 0, False: 2.73k]
  ------------------
 1278|  2.73k|    idx = small_index(nb);
  ------------------
  |  |  605|  2.73k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|  2.73k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1279|  2.73k|    smallbits = ms->smallmap >> idx;
 1280|       |
 1281|  2.73k|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1281:9): [True: 0, False: 2.73k]
  ------------------
 1282|      0|      mchunkptr b, p;
 1283|      0|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1284|      0|      b = smallbin_at(ms, idx);
  ------------------
  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1285|      0|      p = b->fd;
 1286|      0|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  703|      0|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|      0|  mchunkptr F = P->fd;\
  |  |  705|      0|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  706|      0|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|      0|  } else {\
  |  |  708|      0|    B->fd = F;\
  |  |  709|      0|    F->bk = B;\
  |  |  710|      0|  }\
  |  |  711|      0|}
  ------------------
 1287|      0|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1288|      0|      mem = chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1289|      0|      return mem;
 1290|  2.73k|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1290:16): [True: 2.73k, False: 0]
  ------------------
 1291|  2.73k|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1291:11): [True: 0, False: 2.73k]
  ------------------
 1292|      0|	mchunkptr b, p, r;
 1293|      0|	size_t rsize;
 1294|      0|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  656|      0|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1295|      0|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1296|      0|	b = smallbin_at(ms, i);
  ------------------
  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1297|      0|	p = b->fd;
 1298|      0|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  703|      0|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|      0|  mchunkptr F = P->fd;\
  |  |  705|      0|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  706|      0|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|      0|  } else {\
  |  |  708|      0|    B->fd = F;\
  |  |  709|      0|    F->bk = B;\
  |  |  710|      0|  }\
  |  |  711|      0|}
  ------------------
 1299|      0|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  606|      0|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1300|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1301|      0|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1301:6): [Folded - Ignored]
  |  Branch (1301:26): [True: 0, False: 0]
  ------------------
 1302|      0|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|      0|	} else {
 1304|      0|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1305|      0|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1306|      0|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1307|      0|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  715|      0|#define replace_dv(M, P, S) {\
  |  |  716|      0|  size_t DVS = M->dvsize;\
  |  |  717|      0|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  718|      0|    mchunkptr DV = M->dv;\
  |  |  719|      0|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|      0|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|      0|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|      0|  mchunkptr F = B;\
  |  |  |  |  679|      0|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|      0|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  680|      0|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|      0|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|      0|  else\
  |  |  |  |  682|      0|    F = B->fd;\
  |  |  |  |  683|      0|  B->fd = P;\
  |  |  |  |  684|      0|  F->bk = P;\
  |  |  |  |  685|      0|  P->fd = F;\
  |  |  |  |  686|      0|  P->bk = B;\
  |  |  |  |  687|      0|}
  |  |  ------------------
  |  |  720|      0|  }\
  |  |  721|      0|  M->dvsize = S;\
  |  |  722|      0|  M->dv = P;\
  |  |  723|      0|}
  ------------------
 1308|      0|	}
 1309|      0|	mem = chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|      0|	return mem;
 1311|  2.73k|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1311:18): [True: 0, False: 2.73k]
  |  Branch (1311:38): [True: 0, False: 0]
  ------------------
 1312|      0|	return mem;
 1313|      0|      }
 1314|  2.73k|    }
 1315|  2.73k|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|    212|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|    212|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|    212|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    212|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    212|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    212|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    212|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    212|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    212|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1315:14): [True: 0, False: 212]
  ------------------
 1316|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1317|    212|  } else {
 1318|    212|    nb = pad_request(nsize);
  ------------------
  |  |  433|    212|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|    212|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    212|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    212|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    212|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    212|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    212|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    212|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    212|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|    212|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1319:9): [True: 3, False: 209]
  |  Branch (1319:29): [True: 0, False: 3]
  ------------------
 1320|      0|      return mem;
 1321|      0|    }
 1322|    212|  }
 1323|       |
 1324|  2.94k|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1324:7): [True: 0, False: 2.94k]
  ------------------
 1325|      0|    size_t rsize = ms->dvsize - nb;
 1326|      0|    mchunkptr p = ms->dv;
 1327|      0|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1327:9): [True: 0, False: 0]
  ------------------
 1328|      0|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1329|      0|      ms->dvsize = rsize;
 1330|      0|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1331|      0|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1332|      0|    } else { /* exhaust dv */
 1333|      0|      size_t dvs = ms->dvsize;
 1334|      0|      ms->dvsize = 0;
 1335|      0|      ms->dv = 0;
 1336|      0|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1337|      0|    }
 1338|      0|    mem = chunk2mem(p);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1339|      0|    return mem;
 1340|  2.94k|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1340:14): [True: 2.94k, False: 0]
  ------------------
 1341|  2.94k|    size_t rsize = ms->topsize -= nb;
 1342|  2.94k|    mchunkptr p = ms->top;
 1343|  2.94k|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  2.94k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1344|  2.94k|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|  2.94k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.94k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1345|  2.94k|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  2.94k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  2.94k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.94k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  2.94k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.94k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1346|  2.94k|    mem = chunk2mem(p);
  ------------------
  |  |  422|  2.94k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.94k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.94k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1347|  2.94k|    return mem;
 1348|  2.94k|  }
 1349|      0|  return alloc_sys(ms, nb);
 1350|  2.94k|}
lj_alloc.c:tmalloc_large:
 1131|      3|{
 1132|      3|  tchunkptr v = 0;
 1133|      3|  size_t rsize = ~nb+1; /* Unsigned negation */
 1134|      3|  tchunkptr t;
 1135|      3|  bindex_t idx;
 1136|      3|  compute_tree_index(nb, idx);
  ------------------
  |  |  614|      3|#define compute_tree_index(S, I)\
  |  |  615|      3|{\
  |  |  616|      3|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  525|      3|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  617|      3|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (617:7): [True: 0, False: 3]
  |  |  ------------------
  |  |  618|      0|    I = 0;\
  |  |  619|      3|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (619:14): [True: 0, False: 3]
  |  |  ------------------
  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  621|      3|  } else {\
  |  |  622|      3|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|      3|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  623|      3|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  525|      3|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  624|      3|  }\
  |  |  625|      3|}
  ------------------
 1137|       |
 1138|      3|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  611|      3|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1138:7): [True: 3, False: 0]
  ------------------
 1139|       |    /* Traverse tree for this bin looking for node with size == nb */
 1140|      3|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  633|      3|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  522|      3|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (633:5): [True: 0, False: 3]
  |  |  ------------------
  |  |  634|      3|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|      3|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|      3|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  525|      3|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1141|      3|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1142|      3|    for (;;) {
 1143|      3|      tchunkptr rt;
 1144|      3|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|      3|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|      3|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      3|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      3|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|      3|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      3|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|      3|      if (trem < rsize) {
  ------------------
  |  Branch (1145:11): [True: 0, False: 3]
  ------------------
 1146|      0|	v = t;
 1147|      0|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1147:6): [True: 0, False: 0]
  ------------------
 1148|      0|	  break;
 1149|      0|      }
 1150|      3|      rt = t->child[1];
 1151|      3|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|      3|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|      3|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1152|      3|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1152:11): [True: 0, False: 3]
  |  Branch (1152:22): [True: 0, False: 0]
  ------------------
 1153|      0|	rst = rt;
 1154|      3|      if (t == 0) {
  ------------------
  |  Branch (1154:11): [True: 3, False: 0]
  ------------------
 1155|      3|	t = rst; /* set t to least subtree holding sizes > nb */
 1156|      3|	break;
 1157|      3|      }
 1158|      0|      sizebits <<= 1;
 1159|      0|    }
 1160|      3|  }
 1161|       |
 1162|      3|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1162:7): [True: 3, False: 0]
  |  Branch (1162:17): [True: 3, False: 0]
  ------------------
 1163|      3|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  656|      3|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1164|      3|    if (leftbits != 0)
  ------------------
  |  Branch (1164:9): [True: 0, False: 3]
  ------------------
 1165|      0|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1166|      3|  }
 1167|       |
 1168|      3|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1168:10): [True: 0, False: 3]
  ------------------
 1169|      0|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1170|      0|    if (trem < rsize) {
  ------------------
  |  Branch (1170:9): [True: 0, False: 0]
  ------------------
 1171|      0|      rsize = trem;
 1172|      0|      v = t;
 1173|      0|    }
 1174|      0|    t = leftmost_child(t);
  ------------------
  |  |  505|      0|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1175|      0|  }
 1176|       |
 1177|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1178|      3|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1178:7): [True: 0, False: 3]
  |  Branch (1178:17): [True: 0, False: 0]
  ------------------
 1179|      0|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1180|      0|    unlink_large_chunk(m, v);
  ------------------
  |  |  767|      0|#define unlink_large_chunk(M, X) {\
  |  |  768|      0|  tchunkptr XP = X->parent;\
  |  |  769|      0|  tchunkptr R;\
  |  |  770|      0|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  771|      0|    tchunkptr F = X->fd;\
  |  |  772|      0|    R = X->bk;\
  |  |  773|      0|    F->bk = R;\
  |  |  774|      0|    R->fd = F;\
  |  |  775|      0|  } else {\
  |  |  776|      0|    tchunkptr *RP;\
  |  |  777|      0|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  778|      0|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 0, False: 0]
  |  |  ------------------
  |  |  779|      0|      tchunkptr *CP;\
  |  |  780|      0|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 0, False: 0]
  |  |  ------------------
  |  |  781|      0|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  782|      0|	R = *(RP = CP);\
  |  |  783|      0|      }\
  |  |  784|      0|      *RP = 0;\
  |  |  785|      0|    }\
  |  |  786|      0|  }\
  |  |  787|      0|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  788|      0|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|      0|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  790|      0|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  791|      0|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|      0|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|      0|    } else {\
  |  |  793|      0|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  794|      0|	XP->child[0] = R;\
  |  |  795|      0|      else \
  |  |  796|      0|	XP->child[1] = R;\
  |  |  797|      0|    }\
  |  |  798|      0|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  799|      0|      tchunkptr C0, C1;\
  |  |  800|      0|      R->parent = XP;\
  |  |  801|      0|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  802|      0|	R->child[0] = C0;\
  |  |  803|      0|	C0->parent = R;\
  |  |  804|      0|      }\
  |  |  805|      0|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  806|      0|	R->child[1] = C1;\
  |  |  807|      0|	C1->parent = R;\
  |  |  808|      0|      }\
  |  |  809|      0|    }\
  |  |  810|      0|  }\
  |  |  811|      0|}
  ------------------
 1181|      0|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1181:9): [True: 0, False: 0]
  ------------------
 1182|      0|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|      0|    } else {
 1184|      0|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|      0|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1185|      0|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1186|      0|      insert_chunk(m, r, rsize);
  ------------------
  |  |  816|      0|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|      0|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|      0|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|      0|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|      0|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|      0|  mchunkptr F = B;\
  |  |  |  |  679|      0|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|      0|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  680|      0|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|      0|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|      0|  else\
  |  |  |  |  682|      0|    F = B->fd;\
  |  |  |  |  683|      0|  B->fd = P;\
  |  |  |  |  684|      0|  F->bk = P;\
  |  |  |  |  685|      0|  P->fd = F;\
  |  |  |  |  686|      0|  P->bk = B;\
  |  |  |  |  687|      0|}
  |  |  ------------------
  |  |  817|      0|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|      0|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|      0|  tbinptr *H;\
  |  |  |  |  730|      0|  bindex_t I;\
  |  |  |  |  731|      0|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|      0|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|      0|{\
  |  |  |  |  |  |  616|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|      0|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|      0|  } else {\
  |  |  |  |  |  |  622|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|      0|  }\
  |  |  |  |  |  |  625|      0|}
  |  |  |  |  ------------------
  |  |  |  |  732|      0|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|      0|  X->index = I;\
  |  |  |  |  734|      0|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  736|      0|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|      0|    *H = X;\
  |  |  |  |  738|      0|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|      0|    X->fd = X->bk = X;\
  |  |  |  |  740|      0|  } else {\
  |  |  |  |  741|      0|    tchunkptr T = *H;\
  |  |  |  |  742|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|      0|    for (;;) {\
  |  |  |  |  744|      0|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  745|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|      0|	K <<= 1;\
  |  |  |  |  747|      0|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  748|      0|	  T = *C;\
  |  |  |  |  749|      0|	} else {\
  |  |  |  |  750|      0|	  *C = X;\
  |  |  |  |  751|      0|	  X->parent = T;\
  |  |  |  |  752|      0|	  X->fd = X->bk = X;\
  |  |  |  |  753|      0|	  break;\
  |  |  |  |  754|      0|	}\
  |  |  |  |  755|      0|      } else {\
  |  |  |  |  756|      0|	tchunkptr F = T->fd;\
  |  |  |  |  757|      0|	T->fd = F->bk = X;\
  |  |  |  |  758|      0|	X->fd = F;\
  |  |  |  |  759|      0|	X->bk = T;\
  |  |  |  |  760|      0|	X->parent = 0;\
  |  |  |  |  761|      0|	break;\
  |  |  |  |  762|      0|      }\
  |  |  |  |  763|      0|    }\
  |  |  |  |  764|      0|  }\
  |  |  |  |  765|      0|}
  |  |  ------------------
  ------------------
 1187|      0|    }
 1188|      0|    return chunk2mem(v);
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1189|      0|  }
 1190|      3|  return NULL;
 1191|      3|}
lj_alloc.c:lj_alloc_realloc:
 1424|     10|{
 1425|     10|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|     10|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|     10|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|     10|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     10|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     10|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     10|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     10|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1425:7): [True: 0, False: 10]
  ------------------
 1426|      0|    return NULL;
 1427|     10|  } else {
 1428|     10|    mstate m = (mstate)msp;
 1429|     10|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  423|     10|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|     10|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|     10|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1430|     10|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  451|     10|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|     10|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|     10|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|     10|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|     10|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1431|     10|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  457|     10|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1432|     10|    mchunkptr newp = 0;
 1433|     10|    size_t nb = request2size(nsize);
  ------------------
  |  |  437|     10|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  429|     10|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  419|     10|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  408|     10|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|     10|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     10|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|     10|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|     10|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|     10|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  433|     10|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|     10|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|     10|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     10|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     10|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|     10|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|     10|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (437:4): [True: 0, False: 10]
  |  |  ------------------
  ------------------
 1434|       |
 1435|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1436|     10|    if (is_direct(oldp)) {
  ------------------
  |  |  480|     10|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  441|     10|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     10|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (480:4): [True: 0, False: 10]
  |  |  |  Branch (480:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1437|      0|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1438|     10|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1438:16): [True: 0, False: 10]
  ------------------
 1439|      0|      size_t rsize = oldsize - nb;
 1440|      0|      newp = oldp;
 1441|      0|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1441:11): [True: 0, False: 0]
  ------------------
 1442|      0|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1443|      0|	set_inuse(m, newp, nb);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1444|      0|	set_inuse(m, rem, rsize);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|      0|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1446|      0|      }
 1447|     10|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1447:16): [True: 2, False: 8]
  |  Branch (1447:34): [True: 2, False: 0]
  ------------------
 1448|       |      /* Expand into top */
 1449|      2|      size_t newsize = oldsize + m->topsize;
 1450|      2|      size_t newtopsize = newsize - nb;
 1451|      2|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  457|      2|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1452|      2|      set_inuse(m, oldp, nb);
  ------------------
  |  |  660|      2|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      2|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      2|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      2|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      2|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      2|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1453|      2|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  441|      2|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1454|      2|      m->top = newtop;
 1455|      2|      m->topsize = newtopsize;
 1456|      2|      newp = oldp;
 1457|      2|    }
 1458|       |
 1459|     10|    if (newp != 0) {
  ------------------
  |  Branch (1459:9): [True: 2, False: 8]
  ------------------
 1460|      2|      return chunk2mem(newp);
  ------------------
  |  |  422|      2|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      2|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      2|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1461|      8|    } else {
 1462|      8|      void *newmem = lj_alloc_malloc(m, nsize);
 1463|      8|      if (newmem != 0) {
  ------------------
  |  Branch (1463:11): [True: 8, False: 0]
  ------------------
 1464|      8|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  484|      8| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  480|      8|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      8|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      8|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (480:4): [True: 0, False: 8]
  |  |  |  |  |  Branch (480:33): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  413|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|      8|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      8|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1465|      8|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1465:22): [True: 8, False: 0]
  ------------------
 1466|      8|	lj_alloc_free(m, ptr);
 1467|      8|      }
 1468|      8|      return newmem;
 1469|      8|    }
 1470|     10|  }
 1471|     10|}

lua_settop:
  151|     98|{
  152|     98|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 49, False: 49]
  ------------------
  153|     49|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|     49|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 49]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|     49|    } else {
  159|     49|      L->top = L->base + idx;
  160|     49|    }
  161|     49|  } else {
  162|     49|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|      0|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|     49|  }
  165|     98|}
lua_remove:
  168|     49|{
  169|     49|  TValue *p = index2adr_stack(L, idx);
  170|     98|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 49, False: 49]
  ------------------
  171|     49|  L->top--;
  172|     49|}
lua_pushvalue:
  215|     98|{
  216|     98|  copyTV(L, L->top, index2adr(L, idx));
  217|     98|  incr_top(L);
  ------------------
  |  |   12|     98|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    196|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     98|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 98]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|     98|}
lua_type:
  223|     49|{
  224|     49|  cTValue *o = index2adr(L, idx);
  225|     49|  if (tvisnumber(o)) {
  ------------------
  |  |  799|     49|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     49|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|     49|  } else if (o == niltv(L)) {
  ------------------
  |  |  664|     49|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 49]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|     49|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|     49|    uint32_t t = ~itype(o);
  ------------------
  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|     49|#if LJ_64
  236|     49|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|     49|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  362|     49|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 49]
  |  |  |  |  |  Branch (352:5): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|      0|    return tt;
  242|     49|  }
  243|     49|}
lua_pushlstring:
  655|    147|{
  656|    147|  GCstr *s;
  657|    147|  lj_gc_check(L);
  ------------------
  |  |   66|    147|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    147|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 147]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    147|      lj_gc_step(L); }
  ------------------
  658|    147|  s = lj_str_new(L, str, len);
  659|    147|  setstrV(L, L->top, s);
  660|    147|  incr_top(L);
  ------------------
  |  |   12|    147|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    294|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    147|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 147]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|    147|}
lua_pushfstring:
  684|     49|{
  685|     49|  const char *ret;
  686|     49|  va_list argp;
  687|     49|  lj_gc_check(L);
  ------------------
  |  |   66|     49|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|     49|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 49]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|     49|      lj_gc_step(L); }
  ------------------
  688|     49|  va_start(argp, fmt);
  689|     49|  ret = lj_strfmt_pushvf(L, fmt, argp);
  690|     49|  va_end(argp);
  691|     49|  return ret;
  692|     49|}
lua_pushcclosure:
  695|     49|{
  696|     49|  GCfunc *fn;
  697|     49|  lj_gc_check(L);
  ------------------
  |  |   66|     49|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|     49|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 49]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|     49|      lj_gc_step(L); }
  ------------------
  698|     49|  lj_checkapi_slot(n);
  ------------------
  |  |   32|     49|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|      0|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|     49|  fn->c.f = f;
  701|     49|  L->top -= n;
  702|     49|  while (n--)
  ------------------
  |  Branch (702:10): [True: 0, False: 49]
  ------------------
  703|      0|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|     49|  setfuncV(L, L->top, fn);
  705|     49|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  362|     49|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|     49|  incr_top(L);
  ------------------
  |  |   12|     49|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     98|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 49]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|     49|}
lua_createtable:
  725|     49|{
  726|     49|  lj_gc_check(L);
  ------------------
  |  |   66|     49|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|     49|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 49]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|     49|      lj_gc_step(L); }
  ------------------
  727|     49|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|     49|  incr_top(L);
  ------------------
  |  |   12|     49|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     98|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 49]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|     49|}
lua_concat:
  777|     49|{
  778|     49|  lj_checkapi_slot(n);
  ------------------
  |  |   32|     49|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  779|     49|  if (n >= 2) {
  ------------------
  |  Branch (779:7): [True: 49, False: 0]
  ------------------
  780|     49|    n--;
  781|     49|    do {
  782|     49|      TValue *top = lj_meta_cat(L, L->top-1, -n);
  783|     49|      if (top == NULL) {
  ------------------
  |  Branch (783:11): [True: 49, False: 0]
  ------------------
  784|     49|	L->top -= n;
  785|     49|	break;
  786|     49|      }
  787|      0|      n -= (int)(L->top - (top - 2*LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  788|      0|      L->top = top+2;
  789|      0|      lj_vm_call(L, top, 1+1);
  790|      0|      L->top -= 1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  791|      0|      copyTV(L, L->top-1, L->top+LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  792|      0|    } while (--n > 0);
  ------------------
  |  Branch (792:14): [True: 0, False: 0]
  ------------------
  793|     49|  } else if (n == 0) {  /* Push empty string. */
  ------------------
  |  Branch (793:14): [True: 0, False: 0]
  ------------------
  794|      0|    setstrV(L, L->top, &G(L)->strempty);
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  795|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  796|      0|  }
  797|       |  /* else n == 1: nothing to do. */
  798|     49|}
lua_rawget:
  832|     49|{
  833|     49|  cTValue *t = index2adr(L, idx);
  834|     49|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|     49|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  861|     49|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|     49|}
lua_settable:
  968|     49|{
  969|     49|  TValue *o;
  970|     49|  cTValue *t = index2adr_check(L, idx);
  971|     49|  lj_checkapi_slot(2);
  ------------------
  |  |   32|     49|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|      0|  o = lj_meta_tset(L, t, L->top-2);
  973|     49|  if (o) {
  ------------------
  |  Branch (973:7): [True: 49, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|     49|    L->top -= 2;
  976|     49|    copyTV(L, o, L->top+1);
  977|     49|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|     49|}
lua_rawseti:
 1019|     49|{
 1020|     49|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  861|     49|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|     49|  lj_checkapi_slot(1);
  ------------------
  |  |   32|     49|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|     49|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   87|     49|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|     49|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 49]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|     49|  src = L->top-1;
 1025|     49|  copyTV(L, dst, src);
 1026|     49|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|     49|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|     98|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|     98|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|     49|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|     49|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 49, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|     98|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|     49|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|     49|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 49, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 49, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|     49|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|     49|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 49]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|     49|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|     49|  L->top = src;
 1028|     49|}
lj_api.c:index2adr_stack:
   72|     49|{
   73|     49|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 49]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  354|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|     49|  } else {
   83|     49|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 49, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|      0|		"invalid stack slot %d", idx);
   85|      0|    return L->top + idx;
   86|     49|  }
   87|     49|}
lj_api.c:index2adr:
   35|    343|{
   36|    343|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 0, False: 343]
  ------------------
   37|      0|    TValue *o = L->base + (idx - 1);
   38|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 0, False: 0]
  ------------------
   39|    343|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|    343|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 294, False: 49]
  ------------------
   40|    294|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  354|    294|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    588|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 294, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 294, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|    294|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|      0|		"bad stack slot %d", idx);
   42|      0|    return L->top + idx;
   43|    294|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|     49|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 0, False: 49]
  ------------------
   44|      0|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|      0|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|      0|    return o;
   47|     49|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|     49|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 49, False: 0]
  ------------------
   48|     49|    return registry(L);
  ------------------
  |  |  703|     49|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|     49|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  354|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|    343|}
lj_api.c:getcurrenv:
   90|     49|{
   91|     49|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|     49|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|     49|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|     49|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|     49|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|     49|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|     49|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|     49|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     49|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 0, False: 49]
  ------------------
   93|     49|}
lj_api.c:index2adr_check:
   65|     49|{
   66|     49|  TValue *o = index2adr(L, idx);
   67|     49|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  354|     49|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|      0|  return o;
   69|     49|}

lj_buf_more2:
   61|     59|{
   62|     59|  if (sbufisext(sb)) {
  ------------------
  |  |   56|     59|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|     59|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|     59|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|     59|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 59]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  360|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|     59|  } else {
   81|     59|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|     59|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|     59|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  360|     59|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     59|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 59, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     59|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|     59|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|    118|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 59]
  |  |  |  Branch (146:44): [True: 0, False: 59]
  |  |  |  Branch (146:44): [True: 0, False: 59]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|     59|    buf_grow(sb, len + sz);
   86|     59|  }
   87|     59|  return sb->w;
   88|     59|}
lj_buf_putmem:
  133|    196|{
  134|    196|  char *w = lj_buf_more(sb, len);
  135|    196|  w = lj_buf_wmem(w, q, len);
  136|    196|  sb->w = w;
  137|    196|  return sb;
  138|    196|}
lj_buf.c:buf_grow:
   20|     59|{
   21|     59|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|     59|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|     59|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|     59|  char *b;
   23|     59|  GCSize flag;
   24|     59|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|     59|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|     49|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 49, False: 10]
  ------------------
   25|     94|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 35, False: 59]
  ------------------
   26|     59|  flag = sbufflag(sb);
  ------------------
  |  |   55|     59|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|     59|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|     59|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|     59|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 59]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  360|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|     59|  } else {
   34|     59|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|     59|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|     59|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|     59|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|     59|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|     59|  }
   36|     59|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|     59|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 59]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  360|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  360|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|      0|  sb->b = b;
   41|     59|  sb->w = b + len;
   42|     59|  sb->e = b + nsz;
   43|     59|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|     59|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 59]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|     59|}

lj_state.c:lj_buf_init:
   75|     49|{
   76|     49|  setsbufL(sb, L);
  ------------------
  |  |   49|     49|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|     49|  sb->w = sb->e = sb->b = NULL;
   78|     49|}
lj_state.c:lj_buf_free:
   94|     49|{
   95|     49|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  361|     49|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|     49|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|     49|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|     49|}
lj_strfmt.c:lj_buf_tmp_:
   86|     49|{
   87|     49|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|     49|  setsbufL(sb, L);
  ------------------
  |  |   49|     49|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|     49|  lj_buf_reset(sb);
   90|     49|  return sb;
   91|     49|}
lj_strfmt.c:lj_buf_reset:
   81|     49|{
   82|     49|  sb->w = sb->b;
   83|     49|}
lj_strfmt.c:lj_buf_str:
  194|     49|{
  195|     49|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|     49|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  196|     49|}
lj_buf.c:lj_buf_more:
  107|    196|{
  108|    196|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|    196|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 51, False: 145]
  |  |  ------------------
  ------------------
  109|     51|    return lj_buf_more2(sb, sz);
  110|    145|  return sb->w;
  111|    196|}
lj_buf.c:lj_buf_wmem:
  169|    196|{
  170|    196|  return (char *)memcpy(p, q, len) + len;
  171|    196|}
lj_meta.c:lj_buf_tmp_:
   86|     49|{
   87|     49|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|     49|  setsbufL(sb, L);
  ------------------
  |  |   49|     49|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|     49|  lj_buf_reset(sb);
   90|     49|  return sb;
   91|     49|}
lj_meta.c:lj_buf_reset:
   81|     49|{
   82|     49|  sb->w = sb->b;
   83|     49|}
lj_meta.c:lj_buf_more:
  107|     49|{
  108|     49|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|     49|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 8, False: 41]
  |  |  ------------------
  ------------------
  109|      8|    return lj_buf_more2(sb, sz);
  110|     41|  return sb->w;
  111|     49|}
lj_meta.c:lj_buf_str:
  194|     49|{
  195|     49|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|     49|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  196|     49|}

lj_ctype_freestate:
  648|     49|{
  649|     49|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  383|     49|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  650|     49|  if (cts) {
  ------------------
  |  Branch (650:7): [True: 0, False: 49]
  ------------------
  651|      0|    lj_ccallback_mcode_free(cts);
  652|      0|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  653|      0|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  654|      0|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|      0|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  655|      0|  }
  656|     49|}

lj_debug_frame:
   26|     49|{
   27|     49|  cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|     49|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|     49|#define LJ_FR2			1
  ------------------
   28|       |  /* Traverse frames backwards. */
   29|     49|  for (nextframe = frame = L->base-1; frame > bot; ) {
  ------------------
  |  Branch (29:39): [True: 0, False: 49]
  ------------------
   30|      0|    if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  ------------------
  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (30:9): [True: 0, False: 0]
  ------------------
   31|      0|      level++;  /* Skip dummy frames. See lj_err_optype_call(). */
   32|      0|    if (level-- == 0) {
  ------------------
  |  Branch (32:9): [True: 0, False: 0]
  ------------------
   33|      0|      *size = (int)(nextframe - frame);
   34|      0|      return frame;  /* Level found. */
   35|      0|    }
   36|      0|    nextframe = frame;
   37|      0|    if (frame_islua(frame)) {
  ------------------
  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   38|      0|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   39|      0|    } else {
   40|      0|      if (frame_isvarg(frame))
  ------------------
  |  |   80|      0|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   41|      0|	level++;  /* Skip vararg pseudo-frame. */
   42|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   43|      0|    }
   44|      0|  }
   45|     49|  *size = level;
   46|     49|  return NULL;  /* Level not found. */
   47|     49|}
lua_getstack:
  541|     49|{
  542|     49|  int size;
  543|     49|  cTValue *frame = lj_debug_frame(L, level, &size);
  544|     49|  if (frame) {
  ------------------
  |  Branch (544:7): [True: 0, False: 49]
  ------------------
  545|      0|    ar->i_ci = (size << 16) + (int)(frame - tvref(L->stack));
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  546|      0|    return 1;
  547|     49|  } else {
  548|     49|    ar->i_ci = level - size;
  549|     49|    return 0;
  550|     49|  }
  551|     49|}
luaL_traceback:
  664|     49|{
  665|     49|  int top = (int)(L->top - L->base);
  666|     49|  int lim = TRACEBACK_LEVELS1;
  ------------------
  |  |  659|     49|#define TRACEBACK_LEVELS1	12
  ------------------
  667|     49|  lua_Debug ar;
  668|     49|  if (msg) lua_pushfstring(L, "%s\n", msg);
  ------------------
  |  Branch (668:7): [True: 49, False: 0]
  ------------------
  669|     49|  lua_pushliteral(L, "stack traceback:");
  ------------------
  |  |  276|     49|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  670|     49|  while (lua_getstack(L1, level++, &ar)) {
  ------------------
  |  Branch (670:10): [True: 0, False: 49]
  ------------------
  671|      0|    GCfunc *fn;
  672|      0|    if (level > lim) {
  ------------------
  |  Branch (672:9): [True: 0, False: 0]
  ------------------
  673|      0|      if (!lua_getstack(L1, level + TRACEBACK_LEVELS2, &ar)) {
  ------------------
  |  |  660|      0|#define TRACEBACK_LEVELS2	10
  ------------------
  |  Branch (673:11): [True: 0, False: 0]
  ------------------
  674|      0|	level--;
  675|      0|      } else {
  676|      0|	lua_pushliteral(L, "\n\t...");
  ------------------
  |  |  276|      0|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  677|      0|	lua_getstack(L1, -10, &ar);
  678|      0|	level = ar.i_ci - TRACEBACK_LEVELS2;
  ------------------
  |  |  660|      0|#define TRACEBACK_LEVELS2	10
  ------------------
  679|      0|      }
  680|      0|      lim = 2147483647;
  681|      0|      continue;
  682|      0|    }
  683|      0|    lua_getinfo(L1, "Snlf", &ar);
  684|      0|    fn = funcV(L1->top-1); L1->top--;
  ------------------
  |  |  857|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  685|      0|    if (isffunc(fn) && !*ar.namewhat)
  ------------------
  |  |  478|      0|#define isffunc(fn)	((fn)->c.ffid > FF_C)
  |  |  ------------------
  |  |  |  |  475|      0|#define FF_C		1
  |  |  ------------------
  |  |  |  Branch (478:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (685:24): [True: 0, False: 0]
  ------------------
  686|      0|      lua_pushfstring(L, "\n\t[builtin#%d]:", fn->c.ffid);
  687|      0|    else
  688|      0|      lua_pushfstring(L, "\n\t%s:", ar.short_src);
  689|      0|    if (ar.currentline > 0)
  ------------------
  |  Branch (689:9): [True: 0, False: 0]
  ------------------
  690|      0|      lua_pushfstring(L, "%d:", ar.currentline);
  691|      0|    if (*ar.namewhat) {
  ------------------
  |  Branch (691:9): [True: 0, False: 0]
  ------------------
  692|      0|      lua_pushfstring(L, " in function " LUA_QS, ar.name);
  ------------------
  |  |   86|      0|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   85|      0|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  693|      0|    } else {
  694|      0|      if (*ar.what == 'm') {
  ------------------
  |  Branch (694:11): [True: 0, False: 0]
  ------------------
  695|      0|	lua_pushliteral(L, " in main chunk");
  ------------------
  |  |  276|      0|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  696|      0|      } else if (*ar.what == 'C') {
  ------------------
  |  Branch (696:18): [True: 0, False: 0]
  ------------------
  697|      0|	lua_pushfstring(L, " at %p", fn->c.f);
  698|      0|      } else {
  699|      0|	lua_pushfstring(L, " in function <%s:%d>",
  700|      0|			ar.short_src, ar.linedefined);
  701|      0|      }
  702|      0|    }
  703|      0|    if ((int)(L->top - L->base) - top >= 15)
  ------------------
  |  Branch (703:9): [True: 0, False: 0]
  ------------------
  704|      0|      lua_concat(L, (int)(L->top - L->base) - top);
  705|      0|  }
  706|     49|  lua_concat(L, (int)(L->top - L->base) - top);
  707|     49|}

lj_str.c:lj_getu32:
  237|  7.89k|{
  238|  7.89k|  return ((const Unaligned32 *)p)->u;
  239|  7.89k|}

lj_dispatch_init:
   61|     49|{
   62|     49|  uint32_t i;
   63|     49|  ASMFunction *disp = GG->dispatch;
   64|  4.41k|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  4.41k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 4.36k, False: 49]
  ------------------
   65|  4.36k|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|  4.36k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  4.36k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  4.36k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|  4.36k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|  3.23k|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|     49|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  3.23k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.23k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 3.18k, False: 49]
  ------------------
   67|  3.18k|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  3.18k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|  3.18k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|     49|  disp[BC_FORL] = disp[BC_IFORL];
   70|     49|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|     49|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|     49|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|     49|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|     49|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|     49|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|     49|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|  2.84k|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|  2.84k|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 2.79k, False: 49]
  ------------------
   78|  2.79k|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|  2.79k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|     49|}
lj_dispatch_update:
  107|     49|{
  108|     49|  uint8_t oldmode = g->dispatchmode;
  109|     49|  uint8_t mode = 0;
  110|     49|#if LJ_HASJIT
  111|     49|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|     49|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|     49|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|     49|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|     49|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 0, False: 49]
  ------------------
  112|     49|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|     49|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|     49|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|     49|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 49]
  ------------------
  113|     49|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|     49|#endif
  115|     49|#if LJ_HASPROFILE
  116|     49|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  674|     49|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 49]
  ------------------
  117|     49|#endif
  118|     49|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|     49|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|     49|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|     49|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|     49|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 0, False: 49]
  ------------------
  119|     49|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|     49|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|     49|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 0, False: 49]
  ------------------
  120|     49|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|     49|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|     49|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 49]
  ------------------
  121|     49|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 0, False: 49]
  ------------------
  122|      0|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|      0|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|      0|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|      0|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 0, False: 0]
  ------------------
  128|      0|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|      0|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|      0|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|      0|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|      0|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|      0|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|      0|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|      0|      f_itern = &lj_vm_IITERN;
  138|      0|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|      0|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|      0|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|      0|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|      0|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|      0|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|      0|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 0, False: 0]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|      0|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 0]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|      0|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|      0|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 0]
  ------------------
  164|      0|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 0]
  ------------------
  165|      0|	uint32_t i;
  166|      0|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 0, False: 0]
  ------------------
  167|      0|	  disp[i] = f;
  168|      0|      }
  169|      0|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 0, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|      0|      disp[BC_FORL] = f_forl;
  172|      0|      disp[BC_ITERL] = f_iterl;
  173|      0|      disp[BC_ITERN] = f_itern;
  174|      0|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|      0|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|      0|      } else {
  182|      0|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|      0|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|      0|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|      0|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|      0|      }
  187|      0|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|      0|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 0, False: 0]
  ------------------
  191|      0|      uint32_t i;
  192|      0|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|      0|      } else {
  196|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 0, False: 0]
  ------------------
  197|      0|	  disp[i] = lj_vm_callhook;
  198|      0|      }
  199|      0|    }
  200|      0|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 0, False: 0]
  ------------------
  201|      0|      disp[BC_FUNCF] = f_funcf;
  202|      0|      disp[BC_FUNCV] = f_funcv;
  203|      0|    }
  204|       |
  205|      0|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|      0|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 0, False: 0]
  |  Branch (207:34): [True: 0, False: 0]
  ------------------
  208|      0|      lj_dispatch_init_hotcount(g);
  209|      0|#endif
  210|      0|  }
  211|     49|}

lj_err_verify:
  511|     49|{
  512|     49|#if !LJ_TARGET_OSX
  513|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  514|     49|  struct dwarf_eh_bases ehb;
  515|     49|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  516|     49|#endif
  517|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  518|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  519|       |  */
  520|     49|}
lj_err_str:
  808|     49|{
  809|     49|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|     49|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  810|     49|}

lj_func_closeuv:
   84|     98|{
   85|     98|  GCupval *uv;
   86|     98|  global_State *g = G(L);
  ------------------
  |  |  702|     98|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     98|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|     98|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|     98|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 98]
  ------------------
   88|     98|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  361|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  361|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|     98|}
lj_func_newC:
  112|     49|{
  113|     49|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|     49|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|     49|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|     49|#define LJ_TFUNC		(~8u)
  ------------------
  115|     49|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|     49|#define FF_C		1
  ------------------
  116|     49|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|     49|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|     49|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|     49|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|     49|  return fn;
  121|     49|}
lj_func_free:
  186|     49|{
  187|     49|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|     49|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|     49|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 49]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|     49|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|     98|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|     49|  lj_mem_free(g, fn, size);
  190|     49|}

lj_gc_separateudata:
  142|     98|{
  143|     98|  size_t m = 0;
  144|     98|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  662|     98|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|     98|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|     98|  GCobj *o;
  146|     98|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|     98|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 0, False: 98]
  ------------------
  147|      0|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|      0|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 0, False: 0]
  |  |  |  Branch (40:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 0, False: 0]
  ------------------
  148|      0|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|      0|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|      0|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 0]
  |  |  |  Branch (20:5): [True: 0, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  Branch (20:28): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 0, False: 0]
  ------------------
  150|      0|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|      0|      p = &o->gch.nextgc;
  152|      0|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|      0|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|      0|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  154|      0|      markfinalized(o);
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|      0|      *p = o->gch.nextgc;
  156|      0|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  157|      0|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|      0|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|      0|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|      0|      } else {  /* Create circular list. */
  162|      0|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|      0|      }
  165|      0|    }
  166|      0|  }
  167|     98|  return m;
  168|     98|}
lj_gc_finalize_udata:
  578|     49|{
  579|     49|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|     49|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (579:10): [True: 0, False: 49]
  ------------------
  580|      0|    gc_finalize(L);
  581|     49|}
lj_gc_finalize_cdata:
  586|     49|{
  587|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|     49|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  383|     49|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  589|     49|  if (cts) {
  ------------------
  |  Branch (589:7): [True: 0, False: 49]
  ------------------
  590|      0|    GCtab *t = cts->finalizer;
  591|      0|    Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  592|      0|    ptrdiff_t i;
  593|      0|    setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  594|      0|    for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (594:35): [True: 0, False: 0]
  ------------------
  595|      0|      if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  796|      0|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      0|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (796:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (595:11): [True: 0, False: 0]
  ------------------
  596|      0|	GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  597|      0|	TValue tmp;
  598|      0|	makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  599|      0|	o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  600|      0|	copyTV(L, &tmp, &node[i].val);
  601|      0|	setnilV(&node[i].val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  602|      0|	gc_call_finalizer(g, L, &tmp, o);
  603|      0|      }
  604|      0|  }
  605|     49|}
lj_gc_freeall:
  610|     49|{
  611|     49|  MSize i, strmask;
  612|       |  /* Free everything, except super-fixed objects (the main thread). */
  613|     49|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|     49|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|     49|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|     49|#define LJ_GC_SFIXED	0x40
  ------------------
  614|     49|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  402|     49|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  615|     49|  strmask = g->str.mask;
  616|  12.5k|  for (i = 0; i <= strmask; i++)  /* Free all string hash chains. */
  ------------------
  |  Branch (616:15): [True: 12.5k, False: 49]
  ------------------
  617|  12.5k|    gc_sweepstr(g, &g->str.tab[i]);
  618|     49|}
lj_mem_realloc:
  874|  2.70k|{
  875|  2.70k|  global_State *g = G(L);
  ------------------
  |  |  702|  2.70k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.70k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  876|  2.70k|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  361|  2.70k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|  2.70k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 2.70k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|  2.70k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  877|      0|  p = g->allocf(g->allocd, p, osz, nsz);
  878|  2.70k|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (878:7): [True: 0, False: 2.70k]
  |  Branch (878:20): [True: 0, False: 0]
  ------------------
  879|      0|    lj_err_mem(L);
  880|  2.70k|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  361|  2.70k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|  2.70k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 2.70k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|  2.70k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  881|  2.70k|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  361|  2.70k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|  5.41k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 2.70k, False: 0]
  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  353|  2.70k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  882|      0|	     "allocated memory address %p outside required range", p);
  883|      0|  g->gc.total = (g->gc.total - osz) + nsz;
  884|  2.70k|  return p;
  885|  2.70k|}
lj_mem_newgco:
  889|    196|{
  890|    196|  global_State *g = G(L);
  ------------------
  |  |  702|    196|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    196|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  891|    196|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  892|    196|  if (o == NULL)
  ------------------
  |  Branch (892:7): [True: 0, False: 196]
  ------------------
  893|      0|    lj_err_mem(L);
  894|    196|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  361|    196|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    392|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 196, False: 0]
  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  353|    196|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  895|      0|	     "allocated memory address %p outside required range", o);
  896|      0|  g->gc.total += size;
  897|    196|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|    196|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  898|    196|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|    196|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  899|    196|  newwhite(g, o);
  ------------------
  |  |   40|    196|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|    196|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|    196|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    196|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    196|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    196|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  900|    196|  return o;
  901|    196|}
lj_gc.c:gc_sweep:
  406|     98|{
  407|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  408|     98|  int ow = otherwhite(g);
  ------------------
  |  |   36|     98|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|     98|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|     98|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|     98|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  409|     98|  GCobj *o;
  410|    343|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|    343|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (410:10): [True: 245, False: 98]
  |  Branch (410:37): [True: 245, False: 0]
  ------------------
  411|    245|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|    245|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (411:9): [True: 49, False: 196]
  ------------------
  412|     49|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  402|     98|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (402:41): [True: 49, False: 0]
  |  |  ------------------
  ------------------
  413|    245|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|    245|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|    245|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|    245|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (413:9): [True: 49, False: 196]
  ------------------
  414|     49|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  361|     49|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 49, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  415|      0|		 "sweep of undead object");
  416|     49|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|     49|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|     49|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|     49|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|     49|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|     49|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|     49|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|     49|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|     49|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|     49|      p = &o->gch.nextgc;
  418|    196|    } else {  /* Otherwise value is dead, free it. */
  419|    196|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  361|    196|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    392|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 196]
  |  |  |  |  |  Branch (352:5): [True: 196, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|    196|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  420|      0|		 "sweep of unlive object");
  421|    196|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|    196|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  422|    196|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|    196|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (422:11): [True: 0, False: 196]
  ------------------
  423|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  424|    196|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|    196|#define LJ_TSTR			(~4u)
  ------------------
  425|    196|    }
  426|    245|  }
  427|     98|  return p;
  428|     98|}
lj_gc.c:gc_sweepstr:
  432|  12.5k|{
  433|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  434|  12.5k|  int ow = otherwhite(g);
  ------------------
  |  |   36|  12.5k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  12.5k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  12.5k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  12.5k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  435|  12.5k|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  12.5k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  436|  12.5k|  GCRef q;
  437|  12.5k|  GCRef *p = &q;
  438|  12.5k|  GCobj *o;
  439|  12.5k|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  12.5k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  440|  14.9k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  14.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (440:10): [True: 2.40k, False: 12.5k]
  ------------------
  441|  2.40k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  2.40k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  2.40k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  2.40k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (441:9): [True: 0, False: 2.40k]
  ------------------
  442|      0|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  361|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  443|      0|		 "sweep of undead string");
  444|      0|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  445|      0|      p = &o->gch.nextgc;
  446|  2.40k|    } else {  /* Otherwise string is dead, free it. */
  447|  2.40k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  361|  2.40k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|  4.80k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 2.40k]
  |  |  |  |  |  Branch (352:5): [True: 2.40k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|  2.40k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  448|      0|		 "sweep of unlive string");
  449|  2.40k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  2.40k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  450|  2.40k|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  762|  2.40k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  364|  2.40k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|  2.40k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|  2.40k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 2.40k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|  2.40k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  451|  2.40k|    }
  452|  2.40k|  }
  453|  12.5k|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  12.5k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  454|  12.5k|}

lj_state.c:lj_mem_free:
  120|    147|{
  121|    147|  g->gc.total -= (GCSize)osize;
  122|    147|  g->allocf(g->allocd, p, osize, 0);
  123|    147|}
lj_trace.c:lj_mem_free:
  120|    196|{
  121|    196|  g->gc.total -= (GCSize)osize;
  122|    196|  g->allocf(g->allocd, p, osize, 0);
  123|    196|}
lj_str.c:lj_mem_free:
  120|  2.45k|{
  121|  2.45k|  g->gc.total -= (GCSize)osize;
  122|  2.45k|  g->allocf(g->allocd, p, osize, 0);
  123|  2.45k|}
lj_tab.c:lj_mem_free:
  120|    294|{
  121|    294|  g->gc.total -= (GCSize)osize;
  122|    294|  g->allocf(g->allocd, p, osize, 0);
  123|    294|}
lj_func.c:lj_mem_free:
  120|     49|{
  121|     49|  g->gc.total -= (GCSize)osize;
  122|     49|  g->allocf(g->allocd, p, osize, 0);
  123|     49|}

lj_lex_init:
  506|     49|{
  507|     49|  uint32_t i;
  508|  1.12k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (508:15): [True: 1.07k, False: 49]
  ------------------
  509|  1.07k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|  1.07k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  510|  1.07k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|  1.07k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  1.07k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  511|  1.07k|    s->reserved = (uint8_t)(i+1);
  512|  1.07k|  }
  513|     49|}

lj_mcode_free:
  287|     49|{
  288|     49|  MCode *mc = J->mcarea;
  289|     49|  J->mcarea = NULL;
  290|     49|  J->szallmcarea = 0;
  291|     49|  while (mc) {
  ------------------
  |  Branch (291:10): [True: 0, False: 49]
  ------------------
  292|      0|    MCode *next = ((MCLink *)mc)->next;
  293|      0|    size_t sz = ((MCLink *)mc)->size;
  294|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  295|      0|    mcode_free(J, mc, sz);
  296|      0|    mc = next;
  297|      0|  }
  298|     49|}

lj_meta_init:
   30|     49|{
   31|     49|#define MMNAME(name)	"__" #name
   32|     49|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|     49|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|     49|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|     49|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|     49|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|     49|  _(lt) _(le) _(concat) _(call) \
  |  |  560|     49|  /* The following must be in ORDER ARITH. */ \
  |  |  561|     49|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|     49|  /* The following are used in the standard libraries. */ \
  |  |  563|     49|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|     49|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|     49|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|     49|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|     49|#undef MMNAME
   34|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|     49|  const char *p, *q;
   36|     49|  uint32_t mm;
   37|  1.12k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 1.07k, False: 49]
  ------------------
   38|  1.07k|    GCstr *s;
   39|  5.48k|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 5.43k, False: 49]
  |  Branch (39:25): [True: 4.41k, False: 1.02k]
  ------------------
   40|  1.07k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|  1.07k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|  1.07k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|  1.07k|  }
   44|     49|}
lj_meta_tset:
  162|     49|{
  163|     49|  TValue tmp;
  164|     49|  int loop;
  165|     49|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|     49|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 49, False: 0]
  ------------------
  166|     49|    cTValue *mo;
  167|     49|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|     49|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 49, False: 0]
  |  |  ------------------
  ------------------
  168|     49|      GCtab *t = tabV(o);
  ------------------
  |  |  861|     49|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|     49|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|     49|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  171|      0|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|      0|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|	return (TValue *)tv;
  174|     49|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|     49|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|     49|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 49, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 49, False: 0]
  ------------------
  175|     49|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|     49|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|     49|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|     49|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 49]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|     49|	if (tv != niltv(L))
  ------------------
  |  |  664|     49|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 49]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|     49|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  779|     49|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  180|     49|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  800|     49|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     98|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  942|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (942:35): [Folded - Ignored]
  |  |  |  Branch (942:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|     49|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  801|     98|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     49|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 49]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  809|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|     49|	return lj_tab_newkey(L, t, k);
  183|     49|      }
  184|     49|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  793|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|     49|}
lj_meta_cat:
  239|     49|{
  240|     49|  int fromc = 0;
  241|     49|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 49, False: 0]
  ------------------
  242|     49|  do {
  243|     49|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  792|     98|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  799|     49|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|     49|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  792|     98|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  799|     49|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|      0|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|      0|      if (tvisnil(mo)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  247|      0|	mo = lj_meta_lookup(L, top, MM_concat);
  248|      0|	if (tvisnil(mo)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  249|      0|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  250|      0|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|      0|	}
  253|      0|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|      0|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  266|      0|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  267|      0|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  268|      0|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  892|      0|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  891|      0|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|      0|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|      0|      return top+1;  /* Trigger metamethod call. */
  271|     49|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|     49|      TValue *e, *o = top;
  280|     49|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  792|     49|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  856|     49|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|     49|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|     49|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|      0|      SBuf *sb;
  283|     49|      do {
  284|     49|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  792|     49|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  856|     49|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  364|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|     49|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|     49|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|     49|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 0, False: 49]
  ------------------
  287|     49|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|     49|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|     49|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 49]
  ------------------
  288|     49|      sb = lj_buf_tmp_(L);
  289|     49|      lj_buf_more(sb, (MSize)tlen);
  290|    147|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 98, False: 49]
  ------------------
  291|     98|	if (tvisstr(o)) {
  ------------------
  |  |  792|     98|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     98|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     98|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 98, False: 0]
  |  |  ------------------
  ------------------
  292|     98|	  GCstr *s = strV(o);
  ------------------
  |  |  856|     98|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  364|     98|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     98|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 98, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|     98|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|     98|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|     98|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (364:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|      0|	} else if (tvisint(o)) {
  ------------------
  |  |  800|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|      0|	} else {
  301|      0|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  863|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|      0|	}
  303|     98|      }
  304|     49|      setstrV(L, top, lj_buf_str(L, sb));
  305|     49|    }
  306|     49|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 0, False: 49]
  ------------------
  307|     49|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|     49|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  308|      0|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  715|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  714|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 0, False: 0]
  ------------------
  309|      0|    lj_gc_step(L);
  310|      0|  }
  311|      0|  return NULL;
  312|     49|}

lj_state.c:settabV:
  930|     49|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     49|{ \
  932|     49|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     49|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     49|}
lj_state.c:setgcV:
  924|     98|{
  925|     98|  setgcVraw(o, v, it);
  926|     98|  checklivetv(L, o, "store to dead GC object");
  927|     98|}
lj_state.c:setgcVraw:
  915|     98|{
  916|     98|#if LJ_GC64
  917|     98|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     98|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|     98|}
lj_state.c:checklivetv:
  901|     98|{
  902|     98|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     98|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     98|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     98|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|     98|#if LUA_USE_ASSERT
  904|     98|  if (tvisgcv(o)) {
  ------------------
  |  |  806|     98|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|     98|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     98|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     98|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|     98|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     98|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     98|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 98, False: 0]
  |  |  ------------------
  ------------------
  905|     98|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  362|     98|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 98, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|     98|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  362|     98|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 98, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|     98|  }
  911|     98|#endif
  912|     98|}
lj_state.c:setthreadV:
  930|     49|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     49|{ \
  932|     49|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     49|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     49|}
lj_strfmt.c:checklivetv:
  901|     49|{
  902|     49|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|     49|#if LUA_USE_ASSERT
  904|     49|  if (tvisgcv(o)) {
  ------------------
  |  |  806|     49|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     49|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     49|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
  905|     49|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  362|     49|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|     49|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  362|     49|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|     49|  }
  911|     49|#endif
  912|     49|}
lj_strfmt.c:setstrV:
  930|     49|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     49|{ \
  932|     49|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     49|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     49|}
lj_strfmt.c:setgcV:
  924|     49|{
  925|     49|  setgcVraw(o, v, it);
  926|     49|  checklivetv(L, o, "store to dead GC object");
  927|     49|}
lj_strfmt.c:setgcVraw:
  915|     49|{
  916|     49|#if LJ_GC64
  917|     49|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     49|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|     49|}
lj_api.c:copyTV:
  972|    294|{
  973|    294|  *o1 = *o2;
  974|    294|  checklivetv(L, o1, "copy of dead GC object");
  975|    294|}
lj_api.c:checklivetv:
  901|    539|{
  902|    539|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    539|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    539|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    539|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|    539|#if LUA_USE_ASSERT
  904|    539|  if (tvisgcv(o)) {
  ------------------
  |  |  806|    539|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|    539|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    539|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    539|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    539|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    539|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    539|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 490, False: 49]
  |  |  ------------------
  ------------------
  905|    490|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  362|    490|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    490|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 490, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|    490|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|    490|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  362|    490|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    490|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 490, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|    490|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|    490|  }
  911|    539|#endif
  912|    539|}
lj_api.c:setstrV:
  930|    147|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|    147|{ \
  932|    147|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|    147|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|    147|}
lj_api.c:setgcV:
  924|    245|{
  925|    245|  setgcVraw(o, v, it);
  926|    245|  checklivetv(L, o, "store to dead GC object");
  927|    245|}
lj_api.c:setfuncV:
  930|     49|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     49|{ \
  932|     49|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     49|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     49|}
lj_api.c:settabV:
  930|     49|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     49|{ \
  932|     49|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     49|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     49|}
lj_api.c:setgcVraw:
  915|    245|{
  916|    245|#if LJ_GC64
  917|    245|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    245|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|    245|}
lj_meta.c:checklivetv:
  901|     49|{
  902|     49|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|     49|#if LUA_USE_ASSERT
  904|     49|  if (tvisgcv(o)) {
  ------------------
  |  |  806|     49|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     49|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     49|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     49|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
  905|     49|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  362|     49|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|     49|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  362|     49|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|     49|  }
  911|     49|#endif
  912|     49|}
lj_meta.c:setgcVraw:
  915|     49|{
  916|     49|#if LJ_GC64
  917|     49|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     49|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|     49|}
lj_meta.c:setstrV:
  930|     49|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|     49|{ \
  932|     49|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|     49|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|     49|}
lj_meta.c:setgcV:
  924|     49|{
  925|     49|  setgcVraw(o, v, it);
  926|     49|  checklivetv(L, o, "store to dead GC object");
  927|     49|}

lj_prng_u64:
   48|    159|{
   49|    159|  uint64_t z, r = 0;
   50|    159|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|    159|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|    159|  z = rs->u[i]; \
  |  |  |  |   37|    159|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|    159|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|    159|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|    159|  z = rs->u[i]; \
  |  |  |  |   37|    159|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|    159|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|    159|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|    159|  z = rs->u[i]; \
  |  |  |  |   37|    159|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|    159|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|    159|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|    159|  z = rs->u[i]; \
  |  |  |  |   37|    159|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|    159|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|    159|  return r;
   52|    159|}
lj_prng_seed_secure:
  167|     49|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|     49|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|     49|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 49, False: 0]
  ------------------
  211|     49|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|     49|ok:
  253|     49|  lj_prng_condition(rs);
  254|     49|  (void)lj_prng_u64(rs);
  255|     49|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|     49|{
   66|     49|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 49]
  ------------------
   67|     49|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 49]
  ------------------
   68|     49|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 49]
  ------------------
   69|     49|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 49]
  ------------------
   70|     49|}

luaJIT_profile_stop:
  341|     49|{
  342|     49|  ProfileState *ps = &profile_state;
  343|     49|  global_State *g = ps->g;
  344|     49|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 49]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  674|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|     49|}

lua_newstate:
  219|     49|{
  220|     49|  PRNGState prng;
  221|     49|  GG_State *GG;
  222|     49|  lua_State *L;
  223|     49|  global_State *g;
  224|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  225|     49|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (225:7): [True: 0, False: 49]
  ------------------
  226|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  227|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  228|      0|    return NULL;
  229|      0|  }
  230|     49|#ifndef LUAJIT_USE_SYSMALLOC
  231|     49|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|     49|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (231:7): [True: 49, False: 0]
  ------------------
  232|     49|    allocd = lj_alloc_create(&prng);
  233|     49|    if (!allocd) return NULL;
  ------------------
  |  Branch (233:9): [True: 0, False: 49]
  ------------------
  234|     49|    allocf = lj_alloc_f;
  235|     49|  }
  236|     49|#endif
  237|     49|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  238|     49|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|     49|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|     49|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|     49|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (238:7): [True: 0, False: 49]
  |  Branch (238:21): [True: 0, False: 49]
  ------------------
  239|     49|  memset(GG, 0, sizeof(GG_State));
  240|     49|  L = &GG->L;
  241|     49|  g = &GG->g;
  242|     49|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|     49|#define LJ_TTHREAD		(~6u)
  ------------------
  243|     49|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|     49|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|     49|#define LJ_GC_SFIXED	0x40
  ------------------
  244|     49|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|     49|#define FF_C		1
  ------------------
  245|     49|  setmref(L->glref, g);
  ------------------
  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  246|     49|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|     49|#define LJ_GC_FIXED	0x20
  ------------------
  247|     49|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  ------------------
  248|     49|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|     49|#define LJ_TSTR			(~4u)
  ------------------
  249|     49|  g->allocf = allocf;
  250|     49|  g->allocd = allocd;
  251|     49|  g->prng = prng;
  252|     49|#ifndef LUAJIT_USE_SYSMALLOC
  253|     49|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (253:7): [True: 49, False: 0]
  ------------------
  254|     49|    lj_alloc_setprng(allocd, &g->prng);
  255|     49|  }
  256|     49|#endif
  257|     49|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|     49|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  258|     49|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|     49|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  259|     49|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|     49|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  260|     49|  g->str.mask = ~(MSize)0;
  261|     49|  setnilV(registry(L));
  ------------------
  |  |  869|     49|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  262|     49|  setnilV(&g->nilnode.val);
  ------------------
  |  |  869|     49|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  263|     49|  setnilV(&g->nilnode.key);
  ------------------
  |  |  869|     49|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  264|       |#if !LJ_GC64
  265|       |  setmref(g->nilnode.freetop, &g->nilnode);
  266|       |#endif
  267|     49|  lj_buf_init(NULL, &g->tmpbuf);
  268|     49|  g->gc.state = GCSpause;
  269|     49|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|     49|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  270|     49|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|     49|  g->gc.total = sizeof(GG_State);
  272|     49|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   91|     49|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  273|     49|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   92|     49|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  274|     49|  lj_dispatch_init((GG_State *)L);
  275|     49|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|     49|#define LUA_ERRERR	5
  ------------------
  276|     49|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (276:7): [True: 0, False: 49]
  ------------------
  277|       |    /* Memory allocation error: free partial state. */
  278|      0|    close_state(L);
  279|      0|    return NULL;
  280|      0|  }
  281|     49|  L->status = LUA_OK;
  ------------------
  |  |   43|     49|#define LUA_OK		0
  ------------------
  282|     49|  return L;
  283|     49|}
lua_close:
  296|     49|{
  297|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  298|     49|  int i;
  299|     49|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  662|     49|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|     49|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  300|     49|#if LJ_HASPROFILE
  301|     49|  luaJIT_profile_stop(L);
  302|     49|#endif
  303|     49|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|     49|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  304|     49|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|     49|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  305|     49|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  306|     49|#if LJ_HASJIT
  307|     49|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|     49|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|     49|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|     49|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|     49|#define JIT_F_ON		0x00000001
  ------------------
  308|     49|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|     49|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|     49|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|     49|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|     49|  lj_dispatch_update(g);
  310|     49|#endif
  311|     49|  for (i = 0;;) {
  312|     49|    hook_enter(g);
  ------------------
  |  |  676|     49|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  670|     49|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  313|     49|    L->status = LUA_OK;
  ------------------
  |  |   43|     49|#define LUA_OK		0
  ------------------
  314|     49|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|     49|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|     49|#define LJ_FR2			1
  ------------------
  315|     49|    L->cframe = NULL;
  316|     49|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|     49|#define LUA_OK		0
  ------------------
  |  Branch (316:9): [True: 49, False: 0]
  ------------------
  317|     49|      if (++i >= 10) break;
  ------------------
  |  Branch (317:11): [True: 0, False: 49]
  ------------------
  318|     49|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  319|     49|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|     49|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (319:11): [True: 49, False: 0]
  ------------------
  320|     49|	break;
  321|     49|    }
  322|     49|  }
  323|     49|  close_state(L);
  324|     49|}
lj_state.c:cpluaopen:
  164|     49|{
  165|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  166|     49|  UNUSED(dummy);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  167|     49|  UNUSED(ud);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  168|     49|  stack_init(L, L);
  169|       |  /* NOBARRIER: State initialization, all objects are white. */
  170|     49|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|     49|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  171|     49|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  703|     49|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|     49|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  172|     49|  lj_str_init(L);
  173|     49|  lj_meta_init(L);
  174|     49|  lj_lex_init(L);
  175|     49|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|     49|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|     49|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  176|     49|  g->gc.threshold = 4*g->gc.total;
  177|     49|  lj_trace_initstate(g);
  178|     49|  lj_err_verify();
  179|     49|  return NULL;
  180|     49|}
lj_state.c:close_state:
  183|     49|{
  184|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  185|     49|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|     49|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  186|     49|  lj_gc_freeall(g);
  187|     49|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  361|     49|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  188|      0|	     "main thread is not first GC object");
  189|     49|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  361|     49|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  190|      0|  lj_trace_freestate(g);
  191|     49|#if LJ_HASFFI
  192|     49|  lj_ctype_freestate(g);
  193|     49|#endif
  194|     49|  lj_str_freetab(g);
  ------------------
  |  |   25|     49|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  195|     49|  lj_buf_free(g, &g->tmpbuf);
  196|     49|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  197|     49|#if LJ_64
  198|     49|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  199|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (199:20): [True: 0, False: 0]
  ------------------
  200|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  201|      0|  }
  202|     49|#endif
  203|     49|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  361|     49|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  204|      0|	     "memory leak of %lld bytes",
  205|      0|	     (long long)(g->gc.total - sizeof(GG_State)));
  206|      0|#ifndef LUAJIT_USE_SYSMALLOC
  207|     49|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (207:7): [True: 49, False: 0]
  ------------------
  208|     49|    lj_alloc_destroy(g->allocd);
  209|      0|  else
  210|      0|#endif
  211|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  212|     49|}
lj_state.c:cpfinalize:
  286|     49|{
  287|     49|  UNUSED(dummy);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  288|     49|  UNUSED(ud);
  ------------------
  |  |   91|     49|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  289|     49|  lj_gc_finalize_cdata(L);
  290|     49|  lj_gc_finalize_udata(L);
  291|       |  /* Frame pop omitted. */
  292|     49|  return NULL;
  293|     49|}
lj_state.c:stack_init:
  147|     49|{
  148|     49|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|     49|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|     49|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|     49|  setmref(L1->stack, st);
  ------------------
  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  150|     49|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|     49|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|     49|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|     49|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|     49|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|     49|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  151|     49|  stend = st + L1->stacksize;
  152|     49|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|     49|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  153|     49|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  154|     49|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|     49|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  869|     49|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  155|     49|  L1->base = L1->top = st;
  156|  2.30k|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (156:10): [True: 2.25k, False: 49]
  ------------------
  157|  2.25k|    setnilV(st++);
  ------------------
  |  |  869|  2.25k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  158|     49|}

lj_str_resize:
  139|     49|{
  140|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|     49|  GCRef *newtab, *oldtab = g->str.tab;
  142|     49|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|     49|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|     49|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 0, False: 49]
  |  Branch (145:40): [True: 0, False: 49]
  ------------------
  146|      0|    return;
  147|       |
  148|     49|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|     49|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|     49|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|     49|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|     49|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|     49|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 49]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  762|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|     49|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|     49|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 0, False: 49]
  ------------------
  179|      0|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|      0|    while (o) {
  ------------------
  |  Branch (180:12): [True: 0, False: 0]
  ------------------
  181|      0|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|      0|      GCstr *s = gco2str(o);
  ------------------
  |  |  762|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|      0|#if LUAJIT_SECURITY_STRHASH
  185|      0|      uintptr_t u;
  186|      0|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|      0|	hash &= newmask;
  188|      0|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|      0|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|      0|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|      0|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|      0|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|      0|      o = next;
  217|      0|    }
  218|      0|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|     49|  lj_str_freetab(g);
  ------------------
  |  |   25|     49|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|     49|  g->str.tab = newtab;
  223|     49|  g->str.mask = newmask;
  224|     49|}
lj_str_new:
  324|  2.45k|{
  325|  2.45k|  global_State *g = G(L);
  ------------------
  |  |  702|  2.45k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.45k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  2.45k|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  2.45k|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  2.45k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 2.45k, False: 0]
  ------------------
  327|  2.45k|    MSize len = (MSize)lenx;
  328|  2.45k|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  2.45k|    MSize coll = 0;
  330|  2.45k|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  2.45k|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  2.45k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  2.45k|#if LUAJIT_SECURITY_STRHASH
  334|  2.45k|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  2.45k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.45k]
  |  |  ------------------
  ------------------
  335|      0|      hashalg = 1;
  336|      0|      hash = hash_dense(g->str.seed, hash, str, len);
  337|      0|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|      0|    }
  339|  2.45k|#endif
  340|  2.66k|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 266, False: 2.40k]
  ------------------
  341|    266|      GCstr *sx = gco2str(o);
  ------------------
  |  |  762|    266|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  364|    266|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|    266|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|    266|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 266, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|    266|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|    266|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 49, False: 217]
  |  Branch (342:31): [True: 49, False: 0]
  ------------------
  343|     49|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|     49|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 49, False: 0]
  ------------------
  344|     49|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|     49|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|     49|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|     49|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|     49|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|     49|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|     49|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|     49|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 49]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|      0|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|     49|	  return sx;  /* Return existing string. */
  346|     49|	}
  347|      0|	coll++;
  348|      0|      }
  349|    217|      coll++;
  350|    217|      o = gcnext(o);
  ------------------
  |  |   90|    217|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|    217|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|    217|    }
  352|  2.40k|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|  2.40k|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  4.80k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.40k]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 0, False: 0]
  ------------------
  355|      0|      return lj_str_rehash_chain(L, hash, str, len);
  356|      0|    }
  357|  2.40k|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|  2.40k|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|  2.40k|  } else {
  361|      0|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|      0|    return &g->strempty;
  364|      0|  }
  365|  2.45k|}
lj_str_free:
  368|  2.40k|{
  369|  2.40k|  g->str.num--;
  370|  2.40k|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|  2.40k|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|  2.40k|}
lj_str_init:
  374|     49|{
  375|     49|  global_State *g = G(L);
  ------------------
  |  |  702|     49|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|     49|  g->str.seed = lj_prng_u64(&g->prng);
  377|     49|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|     49|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|     49|}
lj_str.c:hash_sparse:
   86|  2.45k|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  2.45k|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  2.45k|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 1.97k, False: 476]
  ------------------
   90|  1.97k|    a = lj_getu32(str);
   91|  1.97k|    h ^= lj_getu32(str+len-4);
   92|  1.97k|    b = lj_getu32(str+(len>>1)-2);
   93|  1.97k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  1.97k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|  1.97k|    b += lj_getu32(str+(len>>2)-1);
   95|  1.97k|  } else {
   96|    476|    a = *(const uint8_t *)str;
   97|    476|    h ^= *(const uint8_t *)(str+len-1);
   98|    476|    b = *(const uint8_t *)(str+(len>>1));
   99|    476|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|    476|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|    476|  }
  101|  2.45k|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  2.45k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  2.45k|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  2.45k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  2.45k|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  2.45k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  2.45k|  return h;
  105|  2.45k|}
lj_str.c:lj_str_alloc:
  286|  2.40k|{
  287|  2.40k|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|  2.40k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  2.40k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|  2.40k|  global_State *g = G(L);
  ------------------
  |  |  702|  2.40k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.40k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  2.40k|  uintptr_t u;
  290|  2.40k|  newwhite(g, s);
  ------------------
  |  |   40|  2.40k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|  2.40k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  2.40k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.40k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.40k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.40k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  2.40k|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|  2.40k|#define LJ_TSTR			(~4u)
  ------------------
  292|  2.40k|  s->len = len;
  293|  2.40k|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|  2.40k|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 61, False: 2.34k]
  ------------------
  298|     61|    uint64_t r = lj_prng_u64(&g->prng);
  299|     61|    g->str.id = (StrID)r;
  300|     61|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|     61|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|     61|  }
  302|  2.40k|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|  2.40k|  s->reserved = 0;
  307|  2.40k|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|  2.40k|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|  2.40k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|  2.40k|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|  2.40k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|  2.40k|  hash &= g->str.mask;
  313|  2.40k|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|  2.40k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|  2.40k|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  2.40k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|  2.40k|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|  2.40k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|  2.40k|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 0, False: 2.40k]
  ------------------
  318|      0|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|  2.40k|  return s;  /* Return newly interned string. */
  320|  2.40k|}

lj_strfmt_parse:
   35|    147|{
   36|    147|  const uint8_t *p = fs->p, *e = fs->e;
   37|    147|  fs->str = (const char *)p;
   38|    196|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 98, False: 98]
  ------------------
   39|     98|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 49, False: 49]
  ------------------
   40|     49|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 49]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|     49|      } else {
   44|     49|	SFormat sf = 0;
   45|     49|	uint32_t c;
   46|     49|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 0, False: 49]
  ------------------
   47|      0|	  break;
   48|     49|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 0, False: 49]
  ------------------
   49|       |	  /* Parse flags. */
   50|      0|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 0, False: 0]
  ------------------
   51|      0|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 0, False: 0]
  ------------------
   53|      0|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 0, False: 0]
  ------------------
   54|      0|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 0, False: 0]
  ------------------
   55|      0|	  else break;
   56|      0|	}
   57|     49|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 0, False: 49]
  ------------------
   58|      0|	  uint32_t width = (uint32_t)*p++ - '0';
   59|      0|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 0, False: 0]
  ------------------
   60|      0|	    width = (uint32_t)*p++ - '0' + width*10;
   61|      0|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|      0|#define STRFMT_SH_WIDTH	16
  ------------------
   62|      0|	}
   63|     49|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 0, False: 49]
  ------------------
   64|      0|	  uint32_t prec = 0;
   65|      0|	  p++;
   66|      0|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 0, False: 0]
  ------------------
   67|      0|	    prec = (uint32_t)*p++ - '0';
   68|      0|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 0, False: 0]
  ------------------
   69|      0|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|      0|	  }
   71|      0|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|      0|#define STRFMT_SH_PREC	24
  ------------------
   72|      0|	}
   73|       |	/* Parse conversion. */
   74|     49|	c = (uint32_t)*p - 'A';
   75|     49|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|     49|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 49, False: 0]
  |  |  ------------------
  ------------------
   76|     49|	  uint32_t sx = strfmt_map[c];
   77|     49|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 49, False: 0]
  ------------------
   78|     49|	    fs->p = p+1;
   79|     49|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 49, False: 0]
  ------------------
   80|     49|	  }
   81|     49|	}
   82|       |	/* Return error location. */
   83|      0|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 0, False: 0]
  ------------------
   84|      0|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      0|	fs->p = fs->e;
   86|      0|	return STRFMT_ERR;
   87|     49|      }
   88|     49|    }
   89|     98|  }
   90|     98|  fs->p = p;
   91|     98|retlit:
   92|     98|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|     98|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 49, False: 49]
  ------------------
   94|     98|}
lj_strfmt_pushvf:
  551|     49|{
  552|     49|  SBuf *sb = lj_buf_tmp_(L);
  553|     49|  FormatState fs;
  554|     49|  SFormat sf;
  555|     49|  GCstr *str;
  556|     49|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  557|    147|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (557:10): [True: 98, False: 49]
  ------------------
  558|     98|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|     98|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  559|     49|    case STRFMT_LIT:
  ------------------
  |  Branch (559:5): [True: 49, False: 49]
  ------------------
  560|     49|      lj_buf_putmem(sb, fs.str, fs.len);
  561|     49|      break;
  562|      0|    case STRFMT_INT:
  ------------------
  |  Branch (562:5): [True: 0, False: 98]
  ------------------
  563|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  564|      0|      break;
  565|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (565:5): [True: 0, False: 98]
  ------------------
  566|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  567|      0|      break;
  568|      0|    case STRFMT_NUM:
  ------------------
  |  Branch (568:5): [True: 0, False: 98]
  ------------------
  569|      0|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  570|      0|      break;
  571|     49|    case STRFMT_STR: {
  ------------------
  |  Branch (571:5): [True: 49, False: 49]
  ------------------
  572|     49|      const char *s = va_arg(argp, char *);
  573|     49|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (573:11): [True: 0, False: 49]
  ------------------
  574|     49|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  575|     49|      break;
  576|      0|      }
  577|      0|    case STRFMT_CHAR:
  ------------------
  |  Branch (577:5): [True: 0, False: 98]
  ------------------
  578|      0|      lj_buf_putb(sb, va_arg(argp, int));
  579|      0|      break;
  580|      0|    case STRFMT_PTR:
  ------------------
  |  Branch (580:5): [True: 0, False: 98]
  ------------------
  581|      0|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  582|      0|      break;
  583|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (583:5): [True: 0, False: 98]
  ------------------
  584|      0|    default:
  ------------------
  |  Branch (584:5): [True: 0, False: 98]
  ------------------
  585|      0|      lj_buf_putb(sb, '?');
  586|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  362|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  587|      0|      break;
  588|     98|    }
  589|     98|  }
  590|     49|  str = lj_buf_str(L, sb);
  591|     49|  setstrV(L, L->top, str);
  592|     49|  incr_top(L);
  ------------------
  |  |   12|     49|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     98|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 49]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  593|     49|  return strdata(str);
  ------------------
  |  |  316|     49|#define strdata(s)	((const char *)((s)+1))
  ------------------
  594|     49|}

lj_strfmt.c:lj_strfmt_init:
   79|     49|{
   80|     49|  fs->p = (const uint8_t *)p;
   81|     49|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|     49|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  363|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     49|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 49, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|     49|}

lj_tab_new:
  140|    147|{
  141|    147|  GCtab *t = newtab(L, asize, hbits);
  142|    147|  clearapart(t);
  143|    147|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 147, False: 0]
  ------------------
  144|    147|  return t;
  145|    147|}
lj_tab_new_ah:
  149|     49|{
  150|     49|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|     49|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|     49|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 49, False: 0]
  |  |  |  Branch (53:32): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 0, False: 49]
  ------------------
  151|     49|}
lj_tab_free:
  216|    147|{
  217|    147|  if (t->hmask > 0)
  ------------------
  |  Branch (217:7): [True: 147, False: 0]
  ------------------
  218|    147|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|    147|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  219|    147|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (219:7): [True: 0, False: 147]
  |  Branch (219:23): [Folded - Ignored]
  |  Branch (219:47): [True: 0, False: 0]
  ------------------
  220|      0|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  221|    147|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|    147|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (221:7): [Folded - Ignored]
  |  Branch (221:31): [True: 0, False: 147]
  ------------------
  222|      0|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|      0|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  223|    147|  else
  224|    147|    lj_mem_freet(g, t);
  ------------------
  |  |  134|    147|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  225|    147|}
lj_tab_getstr:
  398|     98|{
  399|     98|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|     98|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  400|     98|  do {
  401|     98|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  792|    196|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     98|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     98|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 98]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  856|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (401:29): [True: 0, False: 0]
  ------------------
  402|      0|      return &n->val;
  403|     98|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|     98|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|     98|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (403:12): [True: 0, False: 98]
  ------------------
  404|     98|  return NULL;
  405|     98|}
lj_tab_get:
  408|     98|{
  409|     98|  if (tvisstr(key)) {
  ------------------
  |  |  792|     98|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     98|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     98|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 98, False: 0]
  |  |  ------------------
  ------------------
  410|     98|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  856|     98|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  364|     98|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     98|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 98, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|     98|    if (tv)
  ------------------
  |  Branch (411:9): [True: 0, False: 98]
  ------------------
  412|      0|      return tv;
  413|     98|  } else if (tvisint(key)) {
  ------------------
  |  |  800|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  414|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (85:71): [Folded - Ignored]
  |  |  |  Branch (85:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  415|      0|    if (tv)
  ------------------
  |  Branch (415:9): [True: 0, False: 0]
  ------------------
  416|      0|      return tv;
  417|      0|  } else if (tvisnum(key)) {
  ------------------
  |  |  801|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  418|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  863|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  |  997|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  420|      0|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (420:9): [True: 0, False: 0]
  ------------------
  421|      0|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  422|      0|      if (tv)
  ------------------
  |  Branch (422:11): [True: 0, False: 0]
  ------------------
  423|      0|	return tv;
  424|      0|    } else {
  425|      0|      goto genlookup;  /* Else use the generic lookup. */
  426|      0|    }
  427|      0|  } else if (!tvisnil(key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (427:14): [True: 0, False: 0]
  ------------------
  428|      0|    Node *n;
  429|      0|  genlookup:
  430|      0|    n = hashkey(t, key);
  431|      0|    do {
  432|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (432:11): [True: 0, False: 0]
  ------------------
  433|      0|	return &n->val;
  434|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (434:14): [True: 0, False: 0]
  ------------------
  435|      0|  }
  436|     98|  return niltv(L);
  ------------------
  |  |  664|     98|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  364|     98|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|     98|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:4): [True: 98, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|     98|}
lj_tab_newkey:
  443|     98|{
  444|     98|  Node *n = hashkey(t, key);
  445|     98|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  779|    196|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (445:7): [True: 0, False: 98]
  |  Branch (445:28): [True: 0, False: 98]
  ------------------
  446|      0|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  447|      0|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|      0|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  448|      0|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  362|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|      0|	       "bad freenode");
  450|      0|    do {
  451|      0|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (451:11): [True: 0, False: 0]
  ------------------
  452|      0|	rehashtab(L, t, key);  /* Rehash table. */
  453|      0|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  454|      0|      }
  455|      0|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (455:14): [True: 0, False: 0]
  ------------------
  456|      0|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|      0|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  457|      0|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  362|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  458|      0|    collide = hashkey(t, &n->key);
  459|      0|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (459:9): [True: 0, False: 0]
  ------------------
  460|      0|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (460:14): [True: 0, False: 0]
  ------------------
  461|      0|	collide = nextnode(collide);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  462|      0|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  463|       |      /* Copy colliding node into free node and free main node. */
  464|      0|      freenode->val = n->val;
  465|      0|      freenode->key = n->key;
  466|      0|      freenode->next = n->next;
  467|      0|      setmref(n->next, NULL);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  468|      0|      setnilV(&n->val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  469|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  470|      0|      while (nextnode(freenode)) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  471|      0|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  472|      0|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (472:6): [True: 0, False: 0]
  |  Branch (472:28): [True: 0, False: 0]
  ------------------
  473|      0|	  freenode->next = nn->next;
  474|      0|	  nn->next = n->next;
  475|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  476|       |	  /*
  477|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  478|       |	  ** Another string key may have originally been resurrected via
  479|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  480|       |	  ** a node that had to be moved, which makes them unreachable.
  481|       |	  ** It's not feasible to check for all previous nodes, so rechain
  482|       |	  ** any string key that's currently in a non-main positions.
  483|       |	  */
  484|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (484:11): [True: 0, False: 0]
  ------------------
  485|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (485:10): [True: 0, False: 0]
  ------------------
  486|      0|	      Node *mn = hashkey(t, &nn->key);
  487|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (487:12): [True: 0, False: 0]
  |  Branch (487:30): [True: 0, False: 0]
  ------------------
  488|      0|		freenode->next = nn->next;
  489|      0|		nn->next = mn->next;
  490|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  491|      0|	      } else {
  492|      0|		freenode = nn;
  493|      0|	      }
  494|      0|	    } else {
  495|      0|	      freenode = nn;
  496|      0|	    }
  497|      0|	  }
  498|      0|	  break;
  499|      0|	} else {
  500|      0|	  freenode = nn;
  501|      0|	}
  502|      0|      }
  503|      0|    } else {  /* Otherwise use free node. */
  504|      0|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|      0|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  505|      0|      setmref(n->next, freenode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  506|      0|      n = freenode;
  507|      0|    }
  508|      0|  }
  509|     98|  n->key.u64 = key->u64;
  510|     98|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|     98|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 98]
  |  |  ------------------
  ------------------
  511|      0|    n->key.u64 = 0;
  512|     98|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|     98|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|     98|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 98]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|     98|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  362|     98|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 98, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  514|      0|  return &n->val;
  515|     98|}
lj_tab_setinth:
  518|     49|{
  519|     49|  TValue k;
  520|     49|  Node *n;
  521|     49|  k.n = (lua_Number)key;
  522|     49|  n = hashnum(t, &k);
  ------------------
  |  |   45|     49|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|     49|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  523|     49|  do {
  524|     49|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  801|     98|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     49|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 49]
  |  |  ------------------
  ------------------
  |  Branch (524:29): [True: 0, False: 0]
  ------------------
  525|      0|      return &n->val;
  526|     49|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|     49|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|     49|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (526:12): [True: 0, False: 49]
  ------------------
  527|     49|  return lj_tab_newkey(L, t, &k);
  528|     49|}
lj_tab.c:newtab:
   82|    147|{
   83|    147|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|    147|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|    147|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 0, False: 147]
  |  Branch (85:44): [True: 0, False: 0]
  ------------------
   86|      0|    Node *nilnode;
   87|      0|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  362|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|      0|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|      0|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|      0|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|      0|#define LJ_TTAB			(~11u)
  ------------------
   90|      0|    t->nomm = (uint8_t)~0;
   91|      0|    t->colo = (int8_t)asize;
   92|      0|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|      0|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|      0|    t->asize = asize;
   95|      0|    t->hmask = 0;
   96|      0|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|      0|    setmref(t->node, nilnode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|      0|#if LJ_GC64
   99|      0|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|      0|#endif
  101|    147|  } else {  /* Otherwise separately allocate the array part. */
  102|    147|    Node *nilnode;
  103|    147|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|    147|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|    147|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|    147|#define LJ_TTAB			(~11u)
  ------------------
  105|    147|    t->nomm = (uint8_t)~0;
  106|    147|    t->colo = 0;
  107|    147|    setmref(t->array, NULL);
  ------------------
  |  |   39|    147|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|    147|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|    147|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|    147|    t->asize = 0;  /* In case the array allocation fails. */
  110|    147|    t->hmask = 0;
  111|    147|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  702|    147|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    147|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|    147|    setmref(t->node, nilnode);
  ------------------
  |  |   39|    147|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|    147|#if LJ_GC64
  114|    147|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|    147|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|    147|#endif
  116|    147|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 0, False: 147]
  ------------------
  117|      0|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|      0|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|      0|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 0]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|      0|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|      0|      t->asize = asize;
  121|      0|    }
  122|    147|  }
  123|    147|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 147, False: 0]
  ------------------
  124|    147|    newhpart(L, t, hbits);
  125|    147|  return t;
  126|    147|}
lj_tab.c:clearapart:
   73|    147|{
   74|    147|  uint32_t i, asize = t->asize;
   75|    147|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|    147|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    147|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|    147|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 0, False: 147]
  ------------------
   77|      0|    setnilV(&array[i]);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|    147|}
lj_tab.c:clearhpart:
   59|    147|{
   60|    147|  uint32_t i, hmask = t->hmask;
   61|    147|  Node *node = noderef(t->node);
  ------------------
  |  |  515|    147|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    147|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|    147|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  363|    147|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    147|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 147, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|    147|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  3.67k|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 3.52k, False: 147]
  ------------------
   64|  3.52k|    Node *n = &node[i];
   65|  3.52k|    setmref(n->next, NULL);
  ------------------
  |  |   39|  3.52k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  3.52k|    setnilV(&n->key);
  ------------------
  |  |  869|  3.52k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  3.52k|    setnilV(&n->val);
  ------------------
  |  |  869|  3.52k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  3.52k|  }
   69|    147|}
lj_tab.c:newhpart:
   38|    147|{
   39|    147|  uint32_t hsize;
   40|    147|  Node *node;
   41|    147|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  362|    147|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|    147|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:4): [True: 147, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|    147|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|    147|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|    147|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 147]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|    147|  hsize = 1u << hbits;
   45|    147|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|    147|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|    147|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|    147|  setmref(t->node, node);
  ------------------
  |  |   39|    147|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|    147|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|    147|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|    147|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|    147|  t->hmask = hsize-1;
   49|    147|}
lj_tab.c:hashkey:
   21|     98|{
   22|     98|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  363|     98|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|     98|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [Folded - Ignored]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|     98|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|     98|  if (tvisstr(key))
  ------------------
  |  |  792|     98|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|     98|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     98|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 49, False: 49]
  |  |  ------------------
  ------------------
   24|     49|    return hashstr(t, strV(key));
  ------------------
  |  |   42|     98|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 49, False: 0]
  |  |  ------------------
  ------------------
   25|     49|  else if (tvisnum(key))
  ------------------
  |  |  801|     49|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|     49|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     49|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     49|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 49, False: 0]
  |  |  ------------------
  ------------------
   26|     49|    return hashnum(t, key);
  ------------------
  |  |   45|     49|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|     49|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|      0|  else if (tvisbool(key))
  ------------------
  |  |  786|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  784|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (784:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  785|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (785:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  834|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  364|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  363|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|      0|  else
   30|      0|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|      0|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|      0|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|     98|}

lj_tab.c:hashmask:
   36|    245|{
   37|    245|  Node *n = noderef(t->node);
  ------------------
  |  |  515|    245|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    245|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|    245|  return &n[hash & t->hmask];
   39|    245|}
lj_tab.c:hashrot:
   19|     98|{
   20|     98|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|     98|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|     98|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|     98|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|     98|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|     98|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|     98|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|     98|  return hi;
   32|     98|}

lj_trace_initstate:
  314|     49|{
  315|     49|  jit_State *J = G2J(g);
  ------------------
  |  |  116|     49|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|     49|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|     49|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|     49|  TValue *tv;
  317|       |
  318|       |  /* Initialize aligned SIMD constants. */
  319|     49|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|     49|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  320|     49|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  321|     49|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|     49|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|     49|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  323|     49|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  324|     49|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  325|       |
  326|       |  /* Initialize 32/64 bit constants. */
  327|     49|#if LJ_TARGET_X86ORX64
  328|     49|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  329|       |#if LJ_32
  330|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  331|       |#endif
  332|     49|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  333|     49|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|     49|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  334|     49|#endif
  335|     49|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  336|     49|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|     49|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  337|     49|#endif
  338|       |#if LJ_TARGET_PPC
  339|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  340|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  341|       |#endif
  342|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  343|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  344|       |#endif
  345|       |#if LJ_TARGET_MIPS
  346|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  347|       |#if LJ_64
  348|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  349|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  350|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  351|       |#endif
  352|       |#endif
  353|     49|}
lj_trace_freestate:
  357|     49|{
  358|     49|  jit_State *J = G2J(g);
  ------------------
  |  |  116|     49|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|     49|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|     49|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|     49|#ifdef LUA_USE_ASSERT
  360|     49|  {  /* This assumes all traces have already been freed. */
  361|     49|    ptrdiff_t i;
  362|     49|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (362:17): [True: 0, False: 49]
  ------------------
  363|     49|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  361|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  352|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (352:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  353|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  364|     49|		 "trace still allocated");
  365|     49|  }
  366|     49|#endif
  367|     49|  lj_mcode_free(J);
  368|     49|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  369|     49|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  370|     49|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  371|     49|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|     49|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  372|     49|}

LLVMFuzzerTestOneInput:
   11|     49|{
   12|     49|	lua_State *L = luaL_newstate();
   13|     49|	if (L == NULL)
  ------------------
  |  Branch (13:6): [True: 0, False: 49]
  ------------------
   14|      0|		return 0;
   15|       |
   16|     49|	char *buf = malloc(size + 1);
   17|     49|	if (buf == NULL)
  ------------------
  |  Branch (17:6): [True: 0, False: 49]
  ------------------
   18|      0|		return 0;
   19|     49|	memcpy(buf, data, size);
   20|     49|	buf[size] = '\0';
   21|       |
   22|     49|	luaL_traceback(L, L, buf, 1);
   23|       |
   24|     49|	free(buf);
   25|     49|	lua_settop(L, 0);
   26|     49|	lua_close(L);
   27|       |
   28|     49|	return 0;
   29|     49|}

