luaL_findtable:
   84|  1.85k|{
   85|  1.85k|  const char *e;
   86|  1.85k|  lua_pushvalue(L, idx);
   87|  1.85k|  do {
   88|  1.85k|    e = strchr(fname, '.');
   89|  1.85k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 1.85k, False: 0]
  ------------------
   90|  1.85k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|  1.85k|    lua_rawget(L, -2);
   92|  1.85k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|  1.85k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  1.85k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
   93|  1.85k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|  1.85k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|  1.85k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 1.85k]
  ------------------
   95|  1.85k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|  1.85k|      lua_pushvalue(L, -2);
   97|  1.85k|      lua_settable(L, -4);  /* set new table into field */
   98|  1.85k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|      0|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      0|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 0]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|  1.85k|    lua_remove(L, -2);  /* remove previous table */
  103|  1.85k|    fname = e + 1;
  104|  1.85k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 0, False: 1.85k]
  ------------------
  105|  1.85k|  return NULL;
  106|  1.85k|}
luaL_gsub:
  164|  1.72k|{
  165|  1.72k|  const char *wild;
  166|  1.72k|  size_t l = strlen(p);
  167|  1.72k|  luaL_Buffer b;
  168|  1.72k|  luaL_buffinit(L, &b);
  169|  1.63M|  while ((wild = strstr(s, p)) != NULL) {
  ------------------
  |  Branch (169:10): [True: 1.63M, False: 1.72k]
  ------------------
  170|  1.63M|    luaL_addlstring(&b, s, (size_t)(wild - s));  /* push prefix */
  171|  1.63M|    luaL_addstring(&b, r);  /* push replacement in place of pattern */
  172|  1.63M|    s = wild + l;  /* continue after `p' */
  173|  1.63M|  }
  174|  1.72k|  luaL_addstring(&b, s);  /* push last suffix */
  175|  1.72k|  luaL_pushresult(&b);
  176|  1.72k|  return lua_tostring(L, -1);
  ------------------
  |  |  281|  1.72k|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  177|  1.72k|}
luaL_addlstring:
  221|  3.26M|{
  222|  3.26M|  if (l <= bufffree(B)) {
  ------------------
  |  |  182|  3.26M|#define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  111|  3.26M|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (111:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  181|  3.26M|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  |  |  ------------------
  ------------------
  |  Branch (222:7): [True: 3.02M, False: 244k]
  ------------------
  223|  3.02M|    memcpy(B->p, s, l);
  224|  3.02M|    B->p += l;
  225|  3.02M|  } else {
  226|   244k|    emptybuffer(B);
  227|   244k|    lua_pushlstring(B->L, s, l);
  228|   244k|    B->lvl++;
  229|   244k|    adjuststack(B);
  230|   244k|  }
  231|  3.26M|}
luaL_addstring:
  234|  1.63M|{
  235|  1.63M|  luaL_addlstring(B, s, strlen(s));
  236|  1.63M|}
luaL_pushresult:
  239|  1.72k|{
  240|  1.72k|  emptybuffer(B);
  241|  1.72k|  lua_concat(B->L, B->lvl);
  242|  1.72k|  B->lvl = 1;
  243|  1.72k|}
luaL_buffinit:
  263|  1.72k|{
  264|  1.72k|  B->L = L;
  265|  1.72k|  B->p = B->buffer;
  266|  1.72k|  B->lvl = 0;
  267|  1.72k|}
luaL_newstate:
  371|  1.85k|{
  372|  1.85k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  1.85k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  1.85k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  1.85k|#endif
  378|  1.85k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 1.85k, False: 0]
  ------------------
  379|  1.85k|    G(L)->panic = panic;
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  1.85k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  1.85k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  1.85k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  1.85k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  1.85k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  1.85k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  1.85k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  1.85k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  1.85k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  1.85k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  1.85k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  1.85k|    L->top--;
  386|  1.85k|#endif
  387|  1.85k|  }
  388|  1.85k|  return L;
  389|  1.85k|}
lib_aux.c:emptybuffer:
  185|   246k|{
  186|   246k|  size_t l = bufflen(B);
  ------------------
  |  |  181|   246k|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  ------------------
  187|   246k|  if (l == 0)
  ------------------
  |  Branch (187:7): [True: 86, False: 246k]
  ------------------
  188|     86|    return 0;  /* put nothing on stack */
  189|   246k|  lua_pushlstring(B->L, B->buffer, l);
  190|   246k|  B->p = B->buffer;
  191|   246k|  B->lvl++;
  192|   246k|  return 1;
  193|   246k|}
lib_aux.c:adjuststack:
  196|   244k|{
  197|   244k|  if (B->lvl > 1) {
  ------------------
  |  Branch (197:7): [True: 244k, False: 0]
  ------------------
  198|   244k|    lua_State *L = B->L;
  199|   244k|    int toget = 1;  /* number of levels to concat */
  200|   244k|    size_t toplen = lua_strlen(L, -1);
  ------------------
  |  |  264|   244k|#define lua_strlen(L,i)		lua_objlen(L, (i))
  ------------------
  201|   719k|    do {
  202|   719k|      size_t l = lua_strlen(L, -(toget+1));
  ------------------
  |  |  264|   719k|#define lua_strlen(L,i)		lua_objlen(L, (i))
  ------------------
  203|   719k|      if (!(B->lvl - toget + 1 >= LUA_MINSTACK/2 || toplen > l))
  ------------------
  |  |   88|   719k|#define LUA_MINSTACK	20
  ------------------
  |  Branch (203:13): [True: 143k, False: 576k]
  |  Branch (203:53): [True: 336k, False: 239k]
  ------------------
  204|   239k|	break;
  205|   479k|      toplen += l;
  206|   479k|      toget++;
  207|   479k|    } while (toget < B->lvl);
  ------------------
  |  Branch (207:14): [True: 474k, False: 5.24k]
  ------------------
  208|      0|    lua_concat(L, toget);
  209|   244k|    B->lvl = B->lvl - toget + 1;
  210|   244k|  }
  211|   244k|}

lj_alloc_create:
 1227|  1.85k|{
 1228|  1.85k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  1.85k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1229|  1.85k|  char *tbase;
 1230|  1.85k|  INIT_MMAP();
  ------------------
  |  |  379|  1.85k|#define INIT_MMAP()		((void)0)
  ------------------
 1231|  1.85k|  UNUSED(rs);
  ------------------
  |  |   91|  1.85k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1232|  1.85k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  321|  1.85k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1233|  1.85k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  1.85k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  1.85k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  1.85k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1233:7): [True: 1.85k, False: 0]
  ------------------
 1234|  1.85k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  433|  1.85k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  1.85k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.85k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1235|  1.85k|    mchunkptr mn;
 1236|  1.85k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  425|  1.85k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  1.85k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.85k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1237|  1.85k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  422|  1.85k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.85k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.85k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1238|  1.85k|    memset(m, 0, msize);
 1239|  1.85k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  441|  1.85k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  442|  1.85k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  1.85k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1240|  1.85k|    m->seg.base = tbase;
 1241|  1.85k|    m->seg.size = tsize;
 1242|  1.85k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  1.85k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1243|  1.85k|    init_bins(m);
 1244|  1.85k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  461|  1.85k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  443|  1.85k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  1.85k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  1.85k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.85k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1245|  1.85k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  600|  1.85k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  1.85k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.85k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  1.85k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  1.85k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  1.85k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  1.85k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  1.85k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.85k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.85k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.85k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1246|  1.85k|    return m;
 1247|  1.85k|  }
 1248|      0|  return NULL;
 1249|  1.85k|}
lj_alloc_setprng:
 1252|  1.85k|{
 1253|  1.85k|  mstate ms = (mstate)msp;
 1254|  1.85k|  ms->prng = rs;
 1255|  1.85k|}
lj_alloc_destroy:
 1258|  1.85k|{
 1259|  1.85k|  mstate ms = (mstate)msp;
 1260|  1.85k|  msegmentptr sp = &ms->seg;
 1261|  8.78k|  while (sp != 0) {
  ------------------
  |  Branch (1261:10): [True: 6.92k, False: 1.85k]
  ------------------
 1262|  6.92k|    char *base = sp->base;
 1263|  6.92k|    size_t size = sp->size;
 1264|  6.92k|    sp = sp->next;
 1265|  6.92k|    CALL_MUNMAP(base, size);
 1266|  6.92k|  }
 1267|  1.85k|}
lj_alloc_f:
 1474|   736k|{
 1475|   736k|  (void)osize;
 1476|   736k|  if (nsize == 0) {
  ------------------
  |  Branch (1476:7): [True: 362k, False: 373k]
  ------------------
 1477|   362k|    return lj_alloc_free(msp, ptr);
 1478|   373k|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1478:14): [True: 355k, False: 18.4k]
  ------------------
 1479|   355k|    return lj_alloc_malloc(msp, nsize);
 1480|   355k|  } else {
 1481|  18.4k|    return lj_alloc_realloc(msp, ptr, nsize);
 1482|  18.4k|  }
 1483|   736k|}
lj_alloc.c:mmap_probe:
  234|  27.5k|{
  235|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  236|  27.5k|  static uintptr_t hint_addr = 0;
  237|  27.5k|  int olderr = errno;
  238|  27.5k|  int retry;
  239|  27.5k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  27.5k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (239:19): [True: 27.5k, False: 0]
  ------------------
  240|  27.5k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  27.5k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  27.5k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  27.5k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  241|  27.5k|    uintptr_t addr = (uintptr_t)p;
  242|  27.5k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  27.5k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|  55.0k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (242:9): [True: 27.5k, False: 0]
  |  Branch (242:42): [True: 27.5k, False: 0]
  ------------------
  243|  27.5k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  27.5k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (243:2): [True: 27.5k, False: 0]
  ------------------
  244|       |      /* We got a suitable address. Bump the hint address. */
  245|  27.5k|      hint_addr = addr + size;
  246|  27.5k|      errno = olderr;
  247|  27.5k|      return p;
  248|  27.5k|    }
  249|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (249:9): [True: 0, False: 0]
  ------------------
  250|      0|      munmap(p, size);
  251|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (251:16): [True: 0, False: 0]
  ------------------
  252|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  253|      0|    }
  254|      0|    if (hint_addr) {
  ------------------
  |  Branch (254:9): [True: 0, False: 0]
  ------------------
  255|       |      /* First, try linear probing. */
  256|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|	hint_addr += 0x1000000;
  258|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (258:6): [True: 0, False: 0]
  ------------------
  259|      0|	  hint_addr = 0;
  260|      0|	continue;
  261|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (261:18): [True: 0, False: 0]
  ------------------
  262|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  263|      0|	hint_addr = 0;
  264|      0|	continue;
  265|      0|      }
  266|      0|    }
  267|       |    /* Finally, try pseudo-random probing. */
  268|      0|    do {
  269|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  270|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (270:14): [True: 0, False: 0]
  ------------------
  271|      0|  }
  272|      0|  errno = olderr;
  273|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  274|  27.5k|}
lj_alloc.c:init_bins:
  892|  1.85k|{
  893|       |  /* Establish circular links for smallbins */
  894|  1.85k|  bindex_t i;
  895|  61.3k|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  521|  61.3k|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (895:15): [True: 59.4k, False: 1.85k]
  ------------------
  896|  59.4k|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  610|  59.4k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
  897|  59.4k|    bin->fd = bin->bk = bin;
  898|  59.4k|  }
  899|  1.85k|}
lj_alloc.c:init_top:
  876|  14.2k|{
  877|       |  /* Ensure alignment */
  878|  14.2k|  size_t offset = align_offset(chunk2mem(p));
  ------------------
  |  |   66|  14.2k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  14.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  14.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 14.2k, False: 0]
  |  |  ------------------
  |  |   67|  14.2k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  879|  14.2k|  p = (mchunkptr)((char *)p + offset);
  880|  14.2k|  psize -= offset;
  881|       |
  882|  14.2k|  m->top = p;
  883|  14.2k|  m->topsize = psize;
  884|  14.2k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  441|  14.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  885|       |  /* set size of fake trailing chunk holding overhead space only once */
  886|  14.2k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  457|  14.2k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  600|  14.2k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  14.2k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  14.2k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  14.2k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  14.2k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  14.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  14.2k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  14.2k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  887|  14.2k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  14.2k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
  888|  14.2k|}
lj_alloc.c:CALL_MUNMAP:
  348|  18.6k|{
  349|  18.6k|  int olderr = errno;
  350|  18.6k|  int ret = munmap(ptr, size);
  351|  18.6k|  errno = olderr;
  352|  18.6k|  return ret;
  353|  18.6k|}
lj_alloc.c:lj_alloc_free:
 1353|   369k|{
 1354|   369k|  if (ptr != 0) {
  ------------------
  |  Branch (1354:7): [True: 360k, False: 9.46k]
  ------------------
 1355|   360k|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  423|   360k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   360k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   360k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1356|   360k|    mstate fm = (mstate)msp;
 1357|   360k|    size_t psize = chunksize(p);
  ------------------
  |  |  451|   360k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|   360k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   360k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   360k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|   360k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   360k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1358|   360k|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  457|   360k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1359|   360k|    if (!pinuse(p)) {
  ------------------
  |  |  450|   360k|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|   360k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   360k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1359:9): [True: 162k, False: 197k]
  ------------------
 1360|   162k|      size_t prevsize = p->prev_foot;
 1361|   162k|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|   162k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   162k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1361:11): [True: 10.8k, False: 151k]
  ------------------
 1362|  10.8k|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|  10.8k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1363|  10.8k|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  415|  10.8k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  10.8k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1364|  10.8k|	CALL_MUNMAP((char *)p - prevsize, psize);
 1365|  10.8k|	return NULL;
 1366|   151k|      } else {
 1367|   151k|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  458|   151k|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1368|   151k|	psize += prevsize;
 1369|   151k|	p = prev;
 1370|       |	/* consolidate backward */
 1371|   151k|	if (p != fm->dv) {
  ------------------
  |  Branch (1371:6): [True: 150k, False: 1.13k]
  ------------------
 1372|   150k|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  820|   150k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|   150k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|   150k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|   150k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 35.1k, False: 115k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|  35.1k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|  35.1k|  mchunkptr F = P->fd;\
  |  |  |  |  692|  35.1k|  mchunkptr B = P->bk;\
  |  |  |  |  693|  35.1k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  35.1k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  35.1k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|  35.1k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 15.9k, False: 19.1k]
  |  |  |  |  ------------------
  |  |  |  |  695|  15.9k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  15.9k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  15.9k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|  19.1k|  } else {\
  |  |  |  |  697|  19.1k|    F->bk = B;\
  |  |  |  |  698|  19.1k|    B->fd = F;\
  |  |  |  |  699|  19.1k|  }\
  |  |  |  |  700|  35.1k|}
  |  |  ------------------
  |  |  821|   115k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|   115k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|   115k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|   115k|  tchunkptr R;\
  |  |  |  |  770|   115k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 19.2k, False: 96.1k]
  |  |  |  |  ------------------
  |  |  |  |  771|  19.2k|    tchunkptr F = X->fd;\
  |  |  |  |  772|  19.2k|    R = X->bk;\
  |  |  |  |  773|  19.2k|    F->bk = R;\
  |  |  |  |  774|  19.2k|    R->fd = F;\
  |  |  |  |  775|  96.1k|  } else {\
  |  |  |  |  776|  96.1k|    tchunkptr *RP;\
  |  |  |  |  777|  96.1k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 14.0k, False: 82.1k]
  |  |  |  |  ------------------
  |  |  |  |  778|  96.1k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 11.7k, False: 70.3k]
  |  |  |  |  ------------------
  |  |  |  |  779|  25.8k|      tchunkptr *CP;\
  |  |  |  |  780|  31.3k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 2.79k, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  781|  31.3k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 2.69k, False: 25.8k]
  |  |  |  |  ------------------
  |  |  |  |  782|  5.49k|	R = *(RP = CP);\
  |  |  |  |  783|  5.49k|      }\
  |  |  |  |  784|  25.8k|      *RP = 0;\
  |  |  |  |  785|  25.8k|    }\
  |  |  |  |  786|  96.1k|  }\
  |  |  |  |  787|   115k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 103k, False: 12.1k]
  |  |  |  |  ------------------
  |  |  |  |  788|   103k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   103k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|   103k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 70.7k, False: 32.5k]
  |  |  |  |  ------------------
  |  |  |  |  790|  70.7k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 46.4k, False: 24.3k]
  |  |  |  |  ------------------
  |  |  |  |  791|  70.7k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|  46.4k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  46.4k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|  70.7k|    } else {\
  |  |  |  |  793|  32.5k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 17.8k, False: 14.7k]
  |  |  |  |  ------------------
  |  |  |  |  794|  32.5k|	XP->child[0] = R;\
  |  |  |  |  795|  32.5k|      else \
  |  |  |  |  796|  32.5k|	XP->child[1] = R;\
  |  |  |  |  797|  32.5k|    }\
  |  |  |  |  798|   103k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 33.0k, False: 70.3k]
  |  |  |  |  ------------------
  |  |  |  |  799|  33.0k|      tchunkptr C0, C1;\
  |  |  |  |  800|  33.0k|      R->parent = XP;\
  |  |  |  |  801|  33.0k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 7.94k, False: 25.0k]
  |  |  |  |  ------------------
  |  |  |  |  802|  7.94k|	R->child[0] = C0;\
  |  |  |  |  803|  7.94k|	C0->parent = R;\
  |  |  |  |  804|  7.94k|      }\
  |  |  |  |  805|  33.0k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 4.45k, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  806|  4.45k|	R->child[1] = C1;\
  |  |  |  |  807|  4.45k|	C1->parent = R;\
  |  |  |  |  808|  4.45k|      }\
  |  |  |  |  809|  33.0k|    }\
  |  |  |  |  810|   103k|  }\
  |  |  |  |  811|   115k|}
  |  |  ------------------
  ------------------
 1373|   150k|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|  1.13k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  1.13k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.13k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  1.13k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.13k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|  1.13k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  1.13k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.13k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  1.13k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.13k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1373:13): [True: 411, False: 720]
  ------------------
 1374|    411|	  fm->dvsize = psize;
 1375|    411|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|    411|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|    411|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    411|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    411|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|    411|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    411|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    411|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|    411|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1376|    411|	  return NULL;
 1377|    411|	}
 1378|   151k|      }
 1379|   162k|    }
 1380|   349k|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  449|   349k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|   349k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   349k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1380:9): [True: 183k, False: 166k]
  ------------------
 1381|   183k|      if (next == fm->top) {
  ------------------
  |  Branch (1381:11): [True: 8.92k, False: 174k]
  ------------------
 1382|  8.92k|	size_t tsize = fm->topsize += psize;
 1383|  8.92k|	fm->top = p;
 1384|  8.92k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|  8.92k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  8.92k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1385|  8.92k|	if (p == fm->dv) {
  ------------------
  |  Branch (1385:6): [True: 107, False: 8.82k]
  ------------------
 1386|    107|	  fm->dv = 0;
 1387|    107|	  fm->dvsize = 0;
 1388|    107|	}
 1389|  8.92k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1389:6): [True: 0, False: 8.92k]
  ------------------
 1390|      0|	  alloc_trim(fm, 0);
 1391|  8.92k|	return NULL;
 1392|   174k|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1392:18): [True: 4.12k, False: 170k]
  ------------------
 1393|  4.12k|	size_t dsize = fm->dvsize += psize;
 1394|  4.12k|	fm->dv = p;
 1395|  4.12k|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  473|  4.12k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  4.12k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.12k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  4.12k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1396|  4.12k|	return NULL;
 1397|   170k|      } else {
 1398|   170k|	size_t nsize = chunksize(next);
  ------------------
  |  |  451|   170k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|   170k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   170k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   170k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|   170k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   170k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1399|   170k|	psize += nsize;
 1400|   170k|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  820|   170k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|   170k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|   170k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|   170k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 38.5k, False: 131k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|  38.5k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|  38.5k|  mchunkptr F = P->fd;\
  |  |  |  |  692|  38.5k|  mchunkptr B = P->bk;\
  |  |  |  |  693|  38.5k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  38.5k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  38.5k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|  38.5k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 21.6k, False: 16.9k]
  |  |  |  |  ------------------
  |  |  |  |  695|  21.6k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  21.6k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  21.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|  21.6k|  } else {\
  |  |  |  |  697|  16.9k|    F->bk = B;\
  |  |  |  |  698|  16.9k|    B->fd = F;\
  |  |  |  |  699|  16.9k|  }\
  |  |  |  |  700|  38.5k|}
  |  |  ------------------
  |  |  821|   131k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|   131k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|   131k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|   131k|  tchunkptr R;\
  |  |  |  |  770|   131k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 17.7k, False: 113k]
  |  |  |  |  ------------------
  |  |  |  |  771|  17.7k|    tchunkptr F = X->fd;\
  |  |  |  |  772|  17.7k|    R = X->bk;\
  |  |  |  |  773|  17.7k|    F->bk = R;\
  |  |  |  |  774|  17.7k|    R->fd = F;\
  |  |  |  |  775|   113k|  } else {\
  |  |  |  |  776|   113k|    tchunkptr *RP;\
  |  |  |  |  777|   113k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 14.3k, False: 99.4k]
  |  |  |  |  ------------------
  |  |  |  |  778|   113k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 12.3k, False: 87.1k]
  |  |  |  |  ------------------
  |  |  |  |  779|  26.6k|      tchunkptr *CP;\
  |  |  |  |  780|  32.2k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 2.92k, False: 29.3k]
  |  |  |  |  ------------------
  |  |  |  |  781|  32.2k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 2.70k, False: 26.6k]
  |  |  |  |  ------------------
  |  |  |  |  782|  5.62k|	R = *(RP = CP);\
  |  |  |  |  783|  5.62k|      }\
  |  |  |  |  784|  26.6k|      *RP = 0;\
  |  |  |  |  785|  26.6k|    }\
  |  |  |  |  786|   113k|  }\
  |  |  |  |  787|   131k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 119k, False: 11.8k]
  |  |  |  |  ------------------
  |  |  |  |  788|   119k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   119k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|   119k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 81.9k, False: 37.6k]
  |  |  |  |  ------------------
  |  |  |  |  790|  81.9k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 57.6k, False: 24.3k]
  |  |  |  |  ------------------
  |  |  |  |  791|  81.9k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|  57.6k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  57.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|  81.9k|    } else {\
  |  |  |  |  793|  37.6k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 19.4k, False: 18.2k]
  |  |  |  |  ------------------
  |  |  |  |  794|  37.6k|	XP->child[0] = R;\
  |  |  |  |  795|  37.6k|      else \
  |  |  |  |  796|  37.6k|	XP->child[1] = R;\
  |  |  |  |  797|  37.6k|    }\
  |  |  |  |  798|   119k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 32.5k, False: 87.1k]
  |  |  |  |  ------------------
  |  |  |  |  799|  32.5k|      tchunkptr C0, C1;\
  |  |  |  |  800|  32.5k|      R->parent = XP;\
  |  |  |  |  801|  32.5k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 7.36k, False: 25.1k]
  |  |  |  |  ------------------
  |  |  |  |  802|  7.36k|	R->child[0] = C0;\
  |  |  |  |  803|  7.36k|	C0->parent = R;\
  |  |  |  |  804|  7.36k|      }\
  |  |  |  |  805|  32.5k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 3.94k, False: 28.5k]
  |  |  |  |  ------------------
  |  |  |  |  806|  3.94k|	R->child[1] = C1;\
  |  |  |  |  807|  3.94k|	C1->parent = R;\
  |  |  |  |  808|  3.94k|      }\
  |  |  |  |  809|  32.5k|    }\
  |  |  |  |  810|   119k|  }\
  |  |  |  |  811|   131k|}
  |  |  ------------------
  ------------------
 1401|   170k|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  473|   170k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|   170k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   170k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|   170k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1402|   170k|	if (p == fm->dv) {
  ------------------
  |  Branch (1402:6): [True: 613, False: 169k]
  ------------------
 1403|    613|	  fm->dvsize = psize;
 1404|    613|	  return NULL;
 1405|    613|	}
 1406|   170k|      }
 1407|   183k|    } else {
 1408|   166k|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|   166k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|   166k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   166k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   166k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|   166k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   166k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   166k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|   166k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|   166k|    }
 1410|       |
 1411|   335k|    if (is_small(psize)) {
  ------------------
  |  |  604|   335k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  523|   335k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  521|   335k|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (604:22): [True: 71.6k, False: 263k]
  |  |  ------------------
  ------------------
 1412|  71.6k|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  675|  71.6k|#define insert_small_chunk(M, P, S) {\
  |  |  676|  71.6k|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  605|  71.6k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  71.6k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  677|  71.6k|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  610|  71.6k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  678|  71.6k|  mchunkptr F = B;\
  |  |  679|  71.6k|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  649|  71.6k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  71.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (679:7): [True: 35.5k, False: 36.0k]
  |  |  ------------------
  |  |  680|  71.6k|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  647|  35.5k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  35.5k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  681|  71.6k|  else\
  |  |  682|  71.6k|    F = B->fd;\
  |  |  683|  71.6k|  B->fd = P;\
  |  |  684|  71.6k|  F->bk = P;\
  |  |  685|  71.6k|  P->fd = F;\
  |  |  686|  71.6k|  P->bk = B;\
  |  |  687|  71.6k|}
  ------------------
 1413|   263k|    } else {
 1414|   263k|      tchunkptr tp = (tchunkptr)p;
 1415|   263k|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  728|   263k|#define insert_large_chunk(M, X, S) {\
  |  |  729|   263k|  tbinptr *H;\
  |  |  730|   263k|  bindex_t I;\
  |  |  731|   263k|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|   263k|#define compute_tree_index(S, I)\
  |  |  |  |  615|   263k|{\
  |  |  |  |  616|   263k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   263k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|   263k|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|   263k|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 263k]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|   263k|  } else {\
  |  |  |  |  622|   263k|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   263k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|   263k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   263k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|   263k|  }\
  |  |  |  |  625|   263k|}
  |  |  ------------------
  |  |  732|   263k|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|   263k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|   263k|  X->index = I;\
  |  |  734|   263k|  X->child[0] = X->child[1] = 0;\
  |  |  735|   263k|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|   263k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   263k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 114k, False: 149k]
  |  |  ------------------
  |  |  736|   114k|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|   114k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   114k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|   114k|    *H = X;\
  |  |  738|   114k|    X->parent = (tchunkptr)H;\
  |  |  739|   114k|    X->fd = X->bk = X;\
  |  |  740|   149k|  } else {\
  |  |  741|   149k|    tchunkptr T = *H;\
  |  |  742|   149k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|   149k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|   149k|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 149k]
  |  |  |  |  ------------------
  |  |  |  |  634|   149k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   149k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   149k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   149k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|   215k|    for (;;) {\
  |  |  744|   215k|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|   215k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|   215k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|   215k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   215k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|   215k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|   215k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 172k, False: 42.9k]
  |  |  ------------------
  |  |  745|   172k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|   172k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|   172k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|   172k|	K <<= 1;\
  |  |  747|   172k|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 65.8k, False: 106k]
  |  |  ------------------
  |  |  748|  65.8k|	  T = *C;\
  |  |  749|   106k|	} else {\
  |  |  750|   106k|	  *C = X;\
  |  |  751|   106k|	  X->parent = T;\
  |  |  752|   106k|	  X->fd = X->bk = X;\
  |  |  753|   106k|	  break;\
  |  |  754|   106k|	}\
  |  |  755|   172k|      } else {\
  |  |  756|  42.9k|	tchunkptr F = T->fd;\
  |  |  757|  42.9k|	T->fd = F->bk = X;\
  |  |  758|  42.9k|	X->fd = F;\
  |  |  759|  42.9k|	X->bk = T;\
  |  |  760|  42.9k|	X->parent = 0;\
  |  |  761|  42.9k|	break;\
  |  |  762|  42.9k|      }\
  |  |  763|   215k|    }\
  |  |  764|   149k|  }\
  |  |  765|   263k|}
  ------------------
 1416|   263k|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1416:11): [True: 407, False: 263k]
  ------------------
 1417|    407|	release_unused_segments(fm);
 1418|   263k|    }
 1419|   335k|  }
 1420|   345k|  return NULL;
 1421|   369k|}
lj_alloc.c:segment_holding:
  572|  5.99k|{
  573|  5.99k|  msegmentptr sp = &m->seg;
  574|  5.99k|  for (;;) {
  575|  5.99k|    if (addr >= sp->base && addr < sp->base + sp->size)
  ------------------
  |  Branch (575:9): [True: 5.99k, False: 0]
  |  Branch (575:29): [True: 5.99k, False: 0]
  ------------------
  576|  5.99k|      return sp;
  577|      0|    if ((sp = sp->next) == 0)
  ------------------
  |  Branch (577:9): [True: 0, False: 0]
  ------------------
  578|      0|      return 0;
  579|      0|  }
  580|  5.99k|}
lj_alloc.c:CALL_MREMAP_:
  358|  10.7k|{
  359|  10.7k|  int olderr = errno;
  360|  10.7k|  ptr = mremap(ptr, osz, nsz, flags);
  361|  10.7k|  errno = olderr;
  362|  10.7k|  return ptr;
  363|  10.7k|}
lj_alloc.c:release_unused_segments:
 1046|    407|{
 1047|    407|  size_t released = 0;
 1048|    407|  size_t nsegs = 0;
 1049|    407|  msegmentptr pred = &m->seg;
 1050|    407|  msegmentptr sp = pred->next;
 1051|  3.12k|  while (sp != 0) {
  ------------------
  |  Branch (1051:10): [True: 2.71k, False: 407]
  ------------------
 1052|  2.71k|    char *base = sp->base;
 1053|  2.71k|    size_t size = sp->size;
 1054|  2.71k|    msegmentptr next = sp->next;
 1055|  2.71k|    nsegs++;
 1056|  2.71k|    {
 1057|  2.71k|      mchunkptr p = align_as_chunk(base);
  ------------------
  |  |  425|  2.71k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  2.71k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.71k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.71k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.71k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 2.71k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  2.71k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1058|  2.71k|      size_t psize = chunksize(p);
  ------------------
  |  |  451|  2.71k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  2.71k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.71k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.71k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  2.71k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.71k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1059|       |      /* Can unmap if first chunk holds entire segment and not pinned */
 1060|  2.71k|      if (!cinuse(p) && (char *)p + psize >= base + size - TOP_FOOT_SIZE) {
  ------------------
  |  |  449|  5.42k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  2.71k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.71k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!cinuse(p) && (char *)p + psize >= base + size - TOP_FOOT_SIZE) {
  ------------------
  |  |  600|  1.88k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  1.88k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.88k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.88k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.88k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.88k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  1.88k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  1.88k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  1.88k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.88k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.88k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.88k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.88k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.88k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.88k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  1.88k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  1.88k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.88k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.88k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.88k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.88k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.88k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.88k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1060:11): [True: 1.88k, False: 833]
  |  Branch (1060:25): [True: 921, False: 959]
  ------------------
 1061|    921|	tchunkptr tp = (tchunkptr)p;
 1062|    921|	if (p == m->dv) {
  ------------------
  |  Branch (1062:6): [True: 7, False: 914]
  ------------------
 1063|      7|	  m->dv = 0;
 1064|      7|	  m->dvsize = 0;
 1065|    914|	} else {
 1066|    914|	  unlink_large_chunk(m, tp);
  ------------------
  |  |  767|    914|#define unlink_large_chunk(M, X) {\
  |  |  768|    914|  tchunkptr XP = X->parent;\
  |  |  769|    914|  tchunkptr R;\
  |  |  770|    914|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 370, False: 544]
  |  |  ------------------
  |  |  771|    370|    tchunkptr F = X->fd;\
  |  |  772|    370|    R = X->bk;\
  |  |  773|    370|    F->bk = R;\
  |  |  774|    370|    R->fd = F;\
  |  |  775|    544|  } else {\
  |  |  776|    544|    tchunkptr *RP;\
  |  |  777|    544|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 128, False: 416]
  |  |  ------------------
  |  |  778|    544|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 62, False: 354]
  |  |  ------------------
  |  |  779|    190|      tchunkptr *CP;\
  |  |  780|    211|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 8, False: 203]
  |  |  ------------------
  |  |  781|    211|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 13, False: 190]
  |  |  ------------------
  |  |  782|     21|	R = *(RP = CP);\
  |  |  783|     21|      }\
  |  |  784|    190|      *RP = 0;\
  |  |  785|    190|    }\
  |  |  786|    544|  }\
  |  |  787|    914|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 688, False: 226]
  |  |  ------------------
  |  |  788|    688|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|    688|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|    688|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 587, False: 101]
  |  |  ------------------
  |  |  790|    587|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 286, False: 301]
  |  |  ------------------
  |  |  791|    587|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|    286|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    286|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|    587|    } else {\
  |  |  793|    101|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 0, False: 101]
  |  |  ------------------
  |  |  794|    101|	XP->child[0] = R;\
  |  |  795|    101|      else \
  |  |  796|    101|	XP->child[1] = R;\
  |  |  797|    101|    }\
  |  |  798|    688|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 334, False: 354]
  |  |  ------------------
  |  |  799|    334|      tchunkptr C0, C1;\
  |  |  800|    334|      R->parent = XP;\
  |  |  801|    334|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 61, False: 273]
  |  |  ------------------
  |  |  802|     61|	R->child[0] = C0;\
  |  |  803|     61|	C0->parent = R;\
  |  |  804|     61|      }\
  |  |  805|    334|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 50, False: 284]
  |  |  ------------------
  |  |  806|     50|	R->child[1] = C1;\
  |  |  807|     50|	C1->parent = R;\
  |  |  808|     50|      }\
  |  |  809|    334|    }\
  |  |  810|    688|  }\
  |  |  811|    914|}
  ------------------
 1067|    914|	}
 1068|    921|	if (CALL_MUNMAP(base, size) == 0) {
  ------------------
  |  Branch (1068:6): [True: 921, False: 0]
  ------------------
 1069|    921|	  released += size;
 1070|       |	  /* unlink obsoleted record */
 1071|    921|	  sp = pred;
 1072|    921|	  sp->next = next;
 1073|    921|	} else { /* back out if cannot unmap */
 1074|      0|	  insert_large_chunk(m, tp, psize);
  ------------------
  |  |  728|      0|#define insert_large_chunk(M, X, S) {\
  |  |  729|      0|  tbinptr *H;\
  |  |  730|      0|  bindex_t I;\
  |  |  731|      0|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|      0|#define compute_tree_index(S, I)\
  |  |  |  |  615|      0|{\
  |  |  |  |  616|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|      0|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|      0|  } else {\
  |  |  |  |  622|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|      0|  }\
  |  |  |  |  625|      0|}
  |  |  ------------------
  |  |  732|      0|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|      0|  X->index = I;\
  |  |  734|      0|  X->child[0] = X->child[1] = 0;\
  |  |  735|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  736|      0|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|      0|    *H = X;\
  |  |  738|      0|    X->parent = (tchunkptr)H;\
  |  |  739|      0|    X->fd = X->bk = X;\
  |  |  740|      0|  } else {\
  |  |  741|      0|    tchunkptr T = *H;\
  |  |  742|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  634|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|      0|    for (;;) {\
  |  |  744|      0|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  745|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|      0|	K <<= 1;\
  |  |  747|      0|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  748|      0|	  T = *C;\
  |  |  749|      0|	} else {\
  |  |  750|      0|	  *C = X;\
  |  |  751|      0|	  X->parent = T;\
  |  |  752|      0|	  X->fd = X->bk = X;\
  |  |  753|      0|	  break;\
  |  |  754|      0|	}\
  |  |  755|      0|      } else {\
  |  |  756|      0|	tchunkptr F = T->fd;\
  |  |  757|      0|	T->fd = F->bk = X;\
  |  |  758|      0|	X->fd = F;\
  |  |  759|      0|	X->bk = T;\
  |  |  760|      0|	X->parent = 0;\
  |  |  761|      0|	break;\
  |  |  762|      0|      }\
  |  |  763|      0|    }\
  |  |  764|      0|  }\
  |  |  765|      0|}
  ------------------
 1075|      0|	}
 1076|    921|      }
 1077|  2.71k|    }
 1078|  2.71k|    pred = sp;
 1079|  2.71k|    sp = next;
 1080|  2.71k|  }
 1081|       |  /* Reset check counter */
 1082|    407|  m->release_checks = nsegs > MAX_RELEASE_CHECK_RATE ?
  ------------------
  |  |   44|    407|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
  |  Branch (1082:23): [True: 0, False: 407]
  ------------------
 1083|    407|		      nsegs : MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|    814|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1084|    407|  return released;
 1085|    407|}
lj_alloc.c:lj_alloc_malloc:
 1270|   358k|{
 1271|   358k|  mstate ms = (mstate)msp;
 1272|   358k|  void *mem;
 1273|   358k|  size_t nb;
 1274|   358k|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  528|   358k|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  527|   358k|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  526|   358k|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   358k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|   358k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   358k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|   358k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   358k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   358k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|   358k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   358k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1274:7): [True: 99.9k, False: 258k]
  ------------------
 1275|  99.9k|    bindex_t idx;
 1276|  99.9k|    binmap_t smallbits;
 1277|  99.9k|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  429|  99.9k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  419|  99.9k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  99.9k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  99.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  99.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  99.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  99.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  99.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  99.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  410|  99.9k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  99.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  99.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  433|   199k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  99.9k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  99.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  99.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  99.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  99.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  99.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  99.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  99.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1277:10): [True: 0, False: 99.9k]
  ------------------
 1278|  99.9k|    idx = small_index(nb);
  ------------------
  |  |  605|  99.9k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|  99.9k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1279|  99.9k|    smallbits = ms->smallmap >> idx;
 1280|       |
 1281|  99.9k|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1281:9): [True: 281, False: 99.6k]
  ------------------
 1282|    281|      mchunkptr b, p;
 1283|    281|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1284|    281|      b = smallbin_at(ms, idx);
  ------------------
  |  |  610|    281|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1285|    281|      p = b->fd;
 1286|    281|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  703|    281|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|    281|  mchunkptr F = P->fd;\
  |  |  705|    281|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 265, False: 16]
  |  |  ------------------
  |  |  706|    265|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|    265|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    265|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|    265|  } else {\
  |  |  708|     16|    B->fd = F;\
  |  |  709|     16|    F->bk = B;\
  |  |  710|     16|  }\
  |  |  711|    281|}
  ------------------
 1287|    281|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  665|    281|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|    281|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    281|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|    281|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    281|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|    281|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|    281|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    281|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1288|    281|      mem = chunk2mem(p);
  ------------------
  |  |  422|    281|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    281|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    281|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1289|    281|      return mem;
 1290|  99.6k|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1290:16): [True: 97.5k, False: 2.16k]
  ------------------
 1291|  97.5k|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1291:11): [True: 119, False: 97.4k]
  ------------------
 1292|    119|	mchunkptr b, p, r;
 1293|    119|	size_t rsize;
 1294|    119|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  656|    119|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1295|    119|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|    119|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1296|    119|	b = smallbin_at(ms, i);
  ------------------
  |  |  610|    119|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1297|    119|	p = b->fd;
 1298|    119|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  703|    119|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|    119|  mchunkptr F = P->fd;\
  |  |  705|    119|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 115, False: 4]
  |  |  ------------------
  |  |  706|    115|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|    115|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    115|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|    115|  } else {\
  |  |  708|      4|    B->fd = F;\
  |  |  709|      4|    F->bk = B;\
  |  |  710|      4|  }\
  |  |  711|    119|}
  ------------------
 1299|    119|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  606|    119|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|    119|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1300|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1301|    119|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|    119|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|    119|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|    119|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    119|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    119|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    119|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    119|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    119|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    119|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1301:6): [Folded - Ignored]
  |  Branch (1301:26): [True: 29, False: 90]
  ------------------
 1302|     29|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  665|     29|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|     29|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     29|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|     29|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     29|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|     29|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|     29|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     29|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|     90|	} else {
 1304|     90|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|     90|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|     90|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     90|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|     90|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     90|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1305|     90|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|     90|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1306|     90|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|     90|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|     90|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     90|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|     90|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1307|     90|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  715|     90|#define replace_dv(M, P, S) {\
  |  |  716|     90|  size_t DVS = M->dvsize;\
  |  |  717|     90|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 9, False: 81]
  |  |  ------------------
  |  |  718|      9|    mchunkptr DV = M->dv;\
  |  |  719|      9|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|      9|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|      9|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      9|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      9|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|      9|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|      9|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|      9|  mchunkptr F = B;\
  |  |  |  |  679|      9|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|      9|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      9|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 9, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  680|      9|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|      9|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      9|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|      9|  else\
  |  |  |  |  682|      9|    F = B->fd;\
  |  |  |  |  683|      9|  B->fd = P;\
  |  |  |  |  684|      9|  F->bk = P;\
  |  |  |  |  685|      9|  P->fd = F;\
  |  |  |  |  686|      9|  P->bk = B;\
  |  |  |  |  687|      9|}
  |  |  ------------------
  |  |  720|      9|  }\
  |  |  721|     90|  M->dvsize = S;\
  |  |  722|     90|  M->dv = P;\
  |  |  723|     90|}
  ------------------
 1308|     90|	}
 1309|    119|	mem = chunk2mem(p);
  ------------------
  |  |  422|    119|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    119|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    119|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|    119|	return mem;
 1311|  97.4k|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1311:18): [True: 638, False: 96.7k]
  |  Branch (1311:38): [True: 638, False: 0]
  ------------------
 1312|    638|	return mem;
 1313|    638|      }
 1314|  97.5k|    }
 1315|   258k|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|   258k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|   258k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|   258k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   258k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   258k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   258k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   258k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   258k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   258k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1315:14): [True: 0, False: 258k]
  ------------------
 1316|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1317|   258k|  } else {
 1318|   258k|    nb = pad_request(nsize);
  ------------------
  |  |  433|   258k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|   258k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   258k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   258k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   258k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   258k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   258k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   258k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   258k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|   258k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1319:9): [True: 237k, False: 20.9k]
  |  Branch (1319:29): [True: 153k, False: 84.2k]
  ------------------
 1320|   153k|      return mem;
 1321|   153k|    }
 1322|   258k|  }
 1323|       |
 1324|   204k|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1324:7): [True: 6.01k, False: 198k]
  ------------------
 1325|  6.01k|    size_t rsize = ms->dvsize - nb;
 1326|  6.01k|    mchunkptr p = ms->dv;
 1327|  6.01k|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  419|  6.01k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  6.01k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  6.01k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  6.01k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  6.01k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  6.01k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  6.01k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  6.01k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1327:9): [True: 5.90k, False: 113]
  ------------------
 1328|  5.90k|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  5.90k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1329|  5.90k|      ms->dvsize = rsize;
 1330|  5.90k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|  5.90k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  5.90k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.90k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  5.90k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1331|  5.90k|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  5.90k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  5.90k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.90k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  5.90k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  5.90k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1332|  5.90k|    } else { /* exhaust dv */
 1333|    113|      size_t dvs = ms->dvsize;
 1334|    113|      ms->dvsize = 0;
 1335|    113|      ms->dv = 0;
 1336|    113|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  665|    113|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|    113|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    113|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|    113|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    113|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|    113|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|    113|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    113|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1337|    113|    }
 1338|  6.01k|    mem = chunk2mem(p);
  ------------------
  |  |  422|  6.01k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  6.01k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  6.01k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1339|  6.01k|    return mem;
 1340|   198k|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1340:14): [True: 172k, False: 25.6k]
  ------------------
 1341|   172k|    size_t rsize = ms->topsize -= nb;
 1342|   172k|    mchunkptr p = ms->top;
 1343|   172k|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|   172k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1344|   172k|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|   172k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   172k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1345|   172k|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|   172k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|   172k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   172k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|   172k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   172k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1346|   172k|    mem = chunk2mem(p);
  ------------------
  |  |  422|   172k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   172k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   172k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1347|   172k|    return mem;
 1348|   172k|  }
 1349|  25.6k|  return alloc_sys(ms, nb);
 1350|   204k|}
lj_alloc.c:tmalloc_small:
 1195|    638|{
 1196|    638|  tchunkptr t, v;
 1197|    638|  mchunkptr r;
 1198|    638|  size_t rsize;
 1199|    638|  bindex_t i = lj_ffs(m->treemap);
  ------------------
  |  |  148|    638|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1200|       |
 1201|    638|  v = t = *treebin_at(m, i);
  ------------------
  |  |  611|    638|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1202|    638|  rsize = chunksize(t) - nb;
  ------------------
  |  |  451|    638|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|    638|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    638|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    638|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|    638|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    638|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1203|       |
 1204|    801|  while ((t = leftmost_child(t)) != 0) {
  ------------------
  |  |  505|    801|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 88, False: 713]
  |  |  ------------------
  ------------------
  |  Branch (1204:10): [True: 163, False: 638]
  ------------------
 1205|    163|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|    163|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|    163|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    163|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    163|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|    163|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    163|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1206|    163|    if (trem < rsize) {
  ------------------
  |  Branch (1206:9): [True: 84, False: 79]
  ------------------
 1207|     84|      rsize = trem;
 1208|     84|      v = t;
 1209|     84|    }
 1210|    163|  }
 1211|       |
 1212|    638|  r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|    638|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1213|    638|  unlink_large_chunk(m, v);
  ------------------
  |  |  767|    638|#define unlink_large_chunk(M, X) {\
  |  |  768|    638|  tchunkptr XP = X->parent;\
  |  |  769|    638|  tchunkptr R;\
  |  |  770|    638|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 24, False: 614]
  |  |  ------------------
  |  |  771|     24|    tchunkptr F = X->fd;\
  |  |  772|     24|    R = X->bk;\
  |  |  773|     24|    F->bk = R;\
  |  |  774|     24|    R->fd = F;\
  |  |  775|    614|  } else {\
  |  |  776|    614|    tchunkptr *RP;\
  |  |  777|    614|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 44, False: 570]
  |  |  ------------------
  |  |  778|    614|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 18, False: 552]
  |  |  ------------------
  |  |  779|     62|      tchunkptr *CP;\
  |  |  780|     73|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 3, False: 70]
  |  |  ------------------
  |  |  781|     73|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 8, False: 62]
  |  |  ------------------
  |  |  782|     11|	R = *(RP = CP);\
  |  |  783|     11|      }\
  |  |  784|     62|      *RP = 0;\
  |  |  785|     62|    }\
  |  |  786|    614|  }\
  |  |  787|    638|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 638, False: 0]
  |  |  ------------------
  |  |  788|    638|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|    638|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|    638|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 558, False: 80]
  |  |  ------------------
  |  |  790|    558|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 481, False: 77]
  |  |  ------------------
  |  |  791|    558|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|    481|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    481|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|    558|    } else {\
  |  |  793|     80|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 55, False: 25]
  |  |  ------------------
  |  |  794|     80|	XP->child[0] = R;\
  |  |  795|     80|      else \
  |  |  796|     80|	XP->child[1] = R;\
  |  |  797|     80|    }\
  |  |  798|    638|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 86, False: 552]
  |  |  ------------------
  |  |  799|     86|      tchunkptr C0, C1;\
  |  |  800|     86|      R->parent = XP;\
  |  |  801|     86|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 6, False: 80]
  |  |  ------------------
  |  |  802|      6|	R->child[0] = C0;\
  |  |  803|      6|	C0->parent = R;\
  |  |  804|      6|      }\
  |  |  805|     86|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 12, False: 74]
  |  |  ------------------
  |  |  806|     12|	R->child[1] = C1;\
  |  |  807|     12|	C1->parent = R;\
  |  |  808|     12|      }\
  |  |  809|     86|    }\
  |  |  810|    638|  }\
  |  |  811|    638|}
  ------------------
 1214|    638|  if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|    638|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|    638|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    638|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    638|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    638|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    638|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    638|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    638|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1214:7): [True: 6, False: 632]
  ------------------
 1215|      6|    set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|      6|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      6|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      6|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      6|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      6|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      6|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      6|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      6|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1216|    632|  } else {
 1217|    632|    set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|    632|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|    632|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    632|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|    632|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    632|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1218|    632|    set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|    632|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|    632|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    632|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|    632|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1219|    632|    replace_dv(m, r, rsize);
  ------------------
  |  |  715|    632|#define replace_dv(M, P, S) {\
  |  |  716|    632|  size_t DVS = M->dvsize;\
  |  |  717|    632|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 18, False: 614]
  |  |  ------------------
  |  |  718|     18|    mchunkptr DV = M->dv;\
  |  |  719|     18|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|     18|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|     18|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|     18|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|     18|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|     18|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|     18|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|     18|  mchunkptr F = B;\
  |  |  |  |  679|     18|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|     18|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     18|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 18, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  680|     18|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|     18|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     18|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|     18|  else\
  |  |  |  |  682|     18|    F = B->fd;\
  |  |  |  |  683|     18|  B->fd = P;\
  |  |  |  |  684|     18|  F->bk = P;\
  |  |  |  |  685|     18|  P->fd = F;\
  |  |  |  |  686|     18|  P->bk = B;\
  |  |  |  |  687|     18|}
  |  |  ------------------
  |  |  720|     18|  }\
  |  |  721|    632|  M->dvsize = S;\
  |  |  722|    632|  M->dv = P;\
  |  |  723|    632|}
  ------------------
 1220|    632|  }
 1221|    638|  return chunk2mem(v);
  ------------------
  |  |  422|    638|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    638|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    638|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1222|    638|}
lj_alloc.c:tmalloc_large:
 1131|   237k|{
 1132|   237k|  tchunkptr v = 0;
 1133|   237k|  size_t rsize = ~nb+1; /* Unsigned negation */
 1134|   237k|  tchunkptr t;
 1135|   237k|  bindex_t idx;
 1136|   237k|  compute_tree_index(nb, idx);
  ------------------
  |  |  614|   237k|#define compute_tree_index(S, I)\
  |  |  615|   237k|{\
  |  |  616|   237k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  525|   237k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  617|   237k|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (617:7): [True: 0, False: 237k]
  |  |  ------------------
  |  |  618|      0|    I = 0;\
  |  |  619|   237k|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (619:14): [True: 0, False: 237k]
  |  |  ------------------
  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  621|   237k|  } else {\
  |  |  622|   237k|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|   237k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  623|   237k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  525|   237k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  624|   237k|  }\
  |  |  625|   237k|}
  ------------------
 1137|       |
 1138|   237k|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  611|   237k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1138:7): [True: 78.5k, False: 159k]
  ------------------
 1139|       |    /* Traverse tree for this bin looking for node with size == nb */
 1140|  78.5k|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  633|  78.5k|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  522|  78.5k|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (633:5): [True: 0, False: 78.5k]
  |  |  ------------------
  |  |  634|  78.5k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|  78.5k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|  78.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  525|  78.5k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1141|  78.5k|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1142|  94.6k|    for (;;) {
 1143|  94.6k|      tchunkptr rt;
 1144|  94.6k|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|  94.6k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  94.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  94.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  94.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  94.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  94.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|  94.6k|      if (trem < rsize) {
  ------------------
  |  Branch (1145:11): [True: 30.6k, False: 63.9k]
  ------------------
 1146|  30.6k|	v = t;
 1147|  30.6k|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1147:6): [True: 10.0k, False: 20.6k]
  ------------------
 1148|  10.0k|	  break;
 1149|  30.6k|      }
 1150|  84.5k|      rt = t->child[1];
 1151|  84.5k|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|  84.5k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|  84.5k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1152|  84.5k|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1152:11): [True: 9.47k, False: 75.1k]
  |  Branch (1152:22): [True: 938, False: 8.53k]
  ------------------
 1153|    938|	rst = rt;
 1154|  84.5k|      if (t == 0) {
  ------------------
  |  Branch (1154:11): [True: 68.5k, False: 16.0k]
  ------------------
 1155|  68.5k|	t = rst; /* set t to least subtree holding sizes > nb */
 1156|  68.5k|	break;
 1157|  68.5k|      }
 1158|  16.0k|      sizebits <<= 1;
 1159|  16.0k|    }
 1160|  78.5k|  }
 1161|       |
 1162|   237k|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1162:7): [True: 226k, False: 10.8k]
  |  Branch (1162:17): [True: 209k, False: 17.6k]
  ------------------
 1163|   209k|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  656|   209k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1164|   209k|    if (leftbits != 0)
  ------------------
  |  Branch (1164:9): [True: 126k, False: 82.4k]
  ------------------
 1165|   126k|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  611|   126k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1166|   209k|  }
 1167|       |
 1168|   387k|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1168:10): [True: 149k, False: 237k]
  ------------------
 1169|   149k|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|   149k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|   149k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   149k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   149k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|   149k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   149k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1170|   149k|    if (trem < rsize) {
  ------------------
  |  Branch (1170:9): [True: 132k, False: 16.9k]
  ------------------
 1171|   132k|      rsize = trem;
 1172|   132k|      v = t;
 1173|   132k|    }
 1174|   149k|    t = leftmost_child(t);
  ------------------
  |  |  505|   149k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 6.26k, False: 142k]
  |  |  ------------------
  ------------------
 1175|   149k|  }
 1176|       |
 1177|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1178|   237k|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1178:7): [True: 155k, False: 82.4k]
  |  Branch (1178:17): [True: 153k, False: 1.80k]
  ------------------
 1179|   153k|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|   153k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1180|   153k|    unlink_large_chunk(m, v);
  ------------------
  |  |  767|   153k|#define unlink_large_chunk(M, X) {\
  |  |  768|   153k|  tchunkptr XP = X->parent;\
  |  |  769|   153k|  tchunkptr R;\
  |  |  770|   153k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 4.65k, False: 148k]
  |  |  ------------------
  |  |  771|  4.65k|    tchunkptr F = X->fd;\
  |  |  772|  4.65k|    R = X->bk;\
  |  |  773|  4.65k|    F->bk = R;\
  |  |  774|  4.65k|    R->fd = F;\
  |  |  775|   148k|  } else {\
  |  |  776|   148k|    tchunkptr *RP;\
  |  |  777|   148k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 3.64k, False: 145k]
  |  |  ------------------
  |  |  778|   148k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 2.32k, False: 142k]
  |  |  ------------------
  |  |  779|  5.97k|      tchunkptr *CP;\
  |  |  780|  6.51k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 352, False: 6.16k]
  |  |  ------------------
  |  |  781|  6.51k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 195, False: 5.97k]
  |  |  ------------------
  |  |  782|    547|	R = *(RP = CP);\
  |  |  783|    547|      }\
  |  |  784|  5.97k|      *RP = 0;\
  |  |  785|  5.97k|    }\
  |  |  786|   148k|  }\
  |  |  787|   153k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 153k, False: 0]
  |  |  ------------------
  |  |  788|   153k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|   153k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|   153k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 143k, False: 9.82k]
  |  |  ------------------
  |  |  790|   143k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 134k, False: 9.20k]
  |  |  ------------------
  |  |  791|   143k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|   134k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   134k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|   143k|    } else {\
  |  |  793|  9.82k|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 5.66k, False: 4.15k]
  |  |  ------------------
  |  |  794|  9.82k|	XP->child[0] = R;\
  |  |  795|  9.82k|      else \
  |  |  796|  9.82k|	XP->child[1] = R;\
  |  |  797|  9.82k|    }\
  |  |  798|   153k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 10.6k, False: 142k]
  |  |  ------------------
  |  |  799|  10.6k|      tchunkptr C0, C1;\
  |  |  800|  10.6k|      R->parent = XP;\
  |  |  801|  10.6k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 953, False: 9.67k]
  |  |  ------------------
  |  |  802|    953|	R->child[0] = C0;\
  |  |  803|    953|	C0->parent = R;\
  |  |  804|    953|      }\
  |  |  805|  10.6k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 1.00k, False: 9.61k]
  |  |  ------------------
  |  |  806|  1.00k|	R->child[1] = C1;\
  |  |  807|  1.00k|	C1->parent = R;\
  |  |  808|  1.00k|      }\
  |  |  809|  10.6k|    }\
  |  |  810|   153k|  }\
  |  |  811|   153k|}
  ------------------
 1181|   153k|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|   153k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|   153k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   153k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   153k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   153k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   153k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   153k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   153k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1181:9): [True: 16.6k, False: 136k]
  ------------------
 1182|  16.6k|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|  16.6k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  16.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  16.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  16.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  16.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  16.6k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  16.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  16.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|   136k|    } else {
 1184|   136k|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|   136k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|   136k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   136k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|   136k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   136k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1185|   136k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|   136k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|   136k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   136k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|   136k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1186|   136k|      insert_chunk(m, r, rsize);
  ------------------
  |  |  816|   136k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|   136k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|   136k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|   136k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 2.38k, False: 134k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|  2.38k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|  2.38k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  2.38k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  2.38k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|  2.38k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|  2.38k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|  2.38k|  mchunkptr F = B;\
  |  |  |  |  679|  2.38k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|  2.38k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  2.38k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 2.33k, False: 45]
  |  |  |  |  ------------------
  |  |  |  |  680|  2.38k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|  2.33k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  2.33k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|  2.38k|  else\
  |  |  |  |  682|  2.38k|    F = B->fd;\
  |  |  |  |  683|  2.38k|  B->fd = P;\
  |  |  |  |  684|  2.38k|  F->bk = P;\
  |  |  |  |  685|  2.38k|  P->fd = F;\
  |  |  |  |  686|  2.38k|  P->bk = B;\
  |  |  |  |  687|  2.38k|}
  |  |  ------------------
  |  |  817|   134k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|   134k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|   134k|  tbinptr *H;\
  |  |  |  |  730|   134k|  bindex_t I;\
  |  |  |  |  731|   134k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|   134k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|   134k|{\
  |  |  |  |  |  |  616|   134k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|   134k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|   134k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|   134k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 134k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|   134k|  } else {\
  |  |  |  |  |  |  622|   134k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   134k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|   134k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|   134k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|   134k|  }\
  |  |  |  |  |  |  625|   134k|}
  |  |  |  |  ------------------
  |  |  |  |  732|   134k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   134k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|   134k|  X->index = I;\
  |  |  |  |  734|   134k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|   134k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|   134k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   134k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 121k, False: 13.0k]
  |  |  |  |  ------------------
  |  |  |  |  736|   121k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|   121k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   121k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|   121k|    *H = X;\
  |  |  |  |  738|   121k|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|   121k|    X->fd = X->bk = X;\
  |  |  |  |  740|   121k|  } else {\
  |  |  |  |  741|  13.0k|    tchunkptr T = *H;\
  |  |  |  |  742|  13.0k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|  13.0k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|  13.0k|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 13.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|  13.0k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|  13.0k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  13.0k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|  15.5k|    for (;;) {\
  |  |  |  |  744|  15.5k|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|  15.5k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|  15.5k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|  15.5k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|  15.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|  15.5k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|  15.5k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 15.1k, False: 366]
  |  |  |  |  ------------------
  |  |  |  |  745|  15.1k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  15.1k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  15.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|  15.1k|	K <<= 1;\
  |  |  |  |  747|  15.1k|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 2.42k, False: 12.7k]
  |  |  |  |  ------------------
  |  |  |  |  748|  2.42k|	  T = *C;\
  |  |  |  |  749|  12.7k|	} else {\
  |  |  |  |  750|  12.7k|	  *C = X;\
  |  |  |  |  751|  12.7k|	  X->parent = T;\
  |  |  |  |  752|  12.7k|	  X->fd = X->bk = X;\
  |  |  |  |  753|  12.7k|	  break;\
  |  |  |  |  754|  12.7k|	}\
  |  |  |  |  755|  15.1k|      } else {\
  |  |  |  |  756|    366|	tchunkptr F = T->fd;\
  |  |  |  |  757|    366|	T->fd = F->bk = X;\
  |  |  |  |  758|    366|	X->fd = F;\
  |  |  |  |  759|    366|	X->bk = T;\
  |  |  |  |  760|    366|	X->parent = 0;\
  |  |  |  |  761|    366|	break;\
  |  |  |  |  762|    366|      }\
  |  |  |  |  763|  15.5k|    }\
  |  |  |  |  764|  13.0k|  }\
  |  |  |  |  765|   134k|}
  |  |  ------------------
  ------------------
 1187|   136k|    }
 1188|   153k|    return chunk2mem(v);
  ------------------
  |  |  422|   153k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   153k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   153k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1189|   153k|  }
 1190|  84.2k|  return NULL;
 1191|   237k|}
lj_alloc.c:alloc_sys:
  984|  25.6k|{
  985|  25.6k|  char *tbase = CMFAIL;
  ------------------
  |  |   72|  25.6k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  25.6k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  25.6k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  986|  25.6k|  size_t tsize = 0;
  987|       |
  988|       |  /* Directly map large chunks */
  989|  25.6k|  if (LJ_UNLIKELY(nb >= DEFAULT_MMAP_THRESHOLD)) {
  ------------------
  |  |  146|  25.6k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 10.8k, False: 14.8k]
  |  |  ------------------
  ------------------
  990|  10.8k|    void *mem = direct_alloc(m, nb);
  991|  10.8k|    if (mem != 0)
  ------------------
  |  Branch (991:9): [True: 10.8k, False: 0]
  ------------------
  992|  10.8k|      return mem;
  993|  10.8k|  }
  994|       |
  995|  14.8k|  {
  996|  14.8k|    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |  600|  14.8k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  14.8k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  14.8k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  14.8k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  14.8k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  14.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  14.8k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  14.8k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  14.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  14.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  ------------------
  997|  14.8k|    size_t rsize = granularity_align(req);
  ------------------
  |  |  557|  14.8k|  (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   41|  14.8k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                 (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  558|  14.8k|   & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   41|  14.8k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                  & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   55|  14.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  998|  14.8k|    if (LJ_LIKELY(rsize > nb)) { /* Fail if wraps around zero */
  ------------------
  |  |  145|  14.8k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 14.8k, False: 0]
  |  |  ------------------
  ------------------
  999|  14.8k|      char *mp = (char *)(CALL_MMAP(m->prng, rsize));
  ------------------
  |  |  321|  14.8k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1000|  14.8k|      if (mp != CMFAIL) {
  ------------------
  |  |   72|  14.8k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  14.8k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  14.8k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1000:11): [True: 14.8k, False: 0]
  ------------------
 1001|  14.8k|	tbase = mp;
 1002|  14.8k|	tsize = rsize;
 1003|  14.8k|      }
 1004|  14.8k|    }
 1005|  14.8k|  }
 1006|       |
 1007|  14.8k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  14.8k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  14.8k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  14.8k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1007:7): [True: 14.8k, False: 0]
  ------------------
 1008|  14.8k|    msegmentptr sp = &m->seg;
 1009|       |    /* Try to merge with an existing segment */
 1010|  49.2k|    while (sp != 0 && tbase != sp->base + sp->size)
  ------------------
  |  Branch (1010:12): [True: 40.8k, False: 8.40k]
  |  Branch (1010:23): [True: 34.4k, False: 6.42k]
  ------------------
 1011|  34.4k|      sp = sp->next;
 1012|  14.8k|    if (sp != 0 && segment_holds(sp, m->top)) { /* append */
  ------------------
  |  |  568|  6.42k|  ((char *)(A) >= S->base && (char *)(A) < S->base + S->size)
  |  |  ------------------
  |  |  |  Branch (568:4): [True: 6.42k, False: 0]
  |  |  |  Branch (568:30): [True: 6.41k, False: 8]
  |  |  ------------------
  ------------------
  |  Branch (1012:9): [True: 6.42k, False: 8.40k]
  ------------------
 1013|  6.41k|      sp->size += tsize;
 1014|  6.41k|      init_top(m, m->top, m->topsize + tsize);
 1015|  8.41k|    } else {
 1016|  8.41k|      sp = &m->seg;
 1017|  31.9k|      while (sp != 0 && sp->base != tbase + tsize)
  ------------------
  |  Branch (1017:14): [True: 25.9k, False: 5.99k]
  |  Branch (1017:25): [True: 23.5k, False: 2.42k]
  ------------------
 1018|  23.5k|	sp = sp->next;
 1019|  8.41k|      if (sp != 0) {
  ------------------
  |  Branch (1019:11): [True: 2.42k, False: 5.99k]
  ------------------
 1020|  2.42k|	char *oldbase = sp->base;
 1021|  2.42k|	sp->base = tbase;
 1022|  2.42k|	sp->size += tsize;
 1023|  2.42k|	return prepend_alloc(m, tbase, oldbase, nb);
 1024|  5.99k|      } else {
 1025|  5.99k|	add_segment(m, tbase, tsize);
 1026|  5.99k|      }
 1027|  8.41k|    }
 1028|       |
 1029|  12.4k|    if (nb < m->topsize) { /* Allocate from new or extended top space */
  ------------------
  |  Branch (1029:9): [True: 12.4k, False: 0]
  ------------------
 1030|  12.4k|      size_t rsize = m->topsize -= nb;
 1031|  12.4k|      mchunkptr p = m->top;
 1032|  12.4k|      mchunkptr r = m->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  12.4k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1033|  12.4k|      r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|  12.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  12.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1034|  12.4k|      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  670|  12.4k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  12.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  12.4k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  12.4k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1035|  12.4k|      return chunk2mem(p);
  ------------------
  |  |  422|  12.4k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  12.4k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.4k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1036|  12.4k|    }
 1037|  12.4k|  }
 1038|       |
 1039|      0|  return NULL;
 1040|  14.8k|}
lj_alloc.c:direct_alloc:
  826|  10.8k|{
  827|  10.8k|  size_t mmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |  563|  10.8k|#define mmap_align(S)	page_align(S)
  |  |  ------------------
  |  |  |  |  553|  10.8k| (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  10.8k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  10.8k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  828|  10.8k|  if (LJ_LIKELY(mmsize > nb)) {     /* Check for wrap around 0 */
  ------------------
  |  |  145|  10.8k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 10.8k, False: 0]
  |  |  ------------------
  ------------------
  829|  10.8k|    char *mm = (char *)(DIRECT_MMAP(m->prng, mmsize));
  ------------------
  |  |  383|  10.8k|#define DIRECT_MMAP(prng, s)	CALL_MMAP(prng, s)
  |  |  ------------------
  |  |  |  |  321|  10.8k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  |  |  ------------------
  ------------------
  830|  10.8k|    if (mm != CMFAIL) {
  ------------------
  |  |   72|  10.8k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  10.8k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  10.8k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (830:9): [True: 10.8k, False: 0]
  ------------------
  831|  10.8k|      size_t offset = align_offset(chunk2mem(mm));
  ------------------
  |  |   66|  10.8k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  10.8k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  10.8k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 10.8k, False: 0]
  |  |  ------------------
  |  |   67|  10.8k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|  10.8k|      size_t psize = mmsize - offset - DIRECT_FOOT_PAD;
  ------------------
  |  |  415|  10.8k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  10.8k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  833|  10.8k|      mchunkptr p = (mchunkptr)(mm + offset);
  834|  10.8k|      p->prev_foot = offset | IS_DIRECT_BIT;
  ------------------
  |  |   74|  10.8k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  835|  10.8k|      p->head = psize|CINUSE_BIT;
  ------------------
  |  |  442|  10.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  10.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
  836|  10.8k|      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  457|  10.8k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                    chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  446|  10.8k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  443|  10.8k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  10.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  10.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  10.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  10.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|  10.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
  837|  10.8k|      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
  ------------------
  |  |  457|  10.8k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  838|  10.8k|      return chunk2mem(p);
  ------------------
  |  |  422|  10.8k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  10.8k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.8k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  839|  10.8k|    }
  840|  10.8k|  }
  841|      0|  UNUSED(m);
  ------------------
  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  842|      0|  return NULL;
  843|  10.8k|}
lj_alloc.c:prepend_alloc:
  903|  2.42k|{
  904|  2.42k|  mchunkptr p = align_as_chunk(newbase);
  ------------------
  |  |  425|  2.42k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  2.42k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.42k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.42k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.42k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 2.42k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  2.42k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|  2.42k|  mchunkptr oldfirst = align_as_chunk(oldbase);
  ------------------
  |  |  425|  2.42k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  2.42k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.42k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.42k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.42k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 2.42k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  2.42k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  906|  2.42k|  size_t psize = (size_t)((char *)oldfirst - (char *)p);
  907|  2.42k|  mchunkptr q = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  2.42k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  908|  2.42k|  size_t qsize = psize - nb;
  909|  2.42k|  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  670|  2.42k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  2.42k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.42k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  2.42k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.42k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|       |
  911|       |  /* consolidate remainder with first chunk of old base */
  912|  2.42k|  if (oldfirst == m->top) {
  ------------------
  |  Branch (912:7): [True: 0, False: 2.42k]
  ------------------
  913|      0|    size_t tsize = m->topsize += qsize;
  914|      0|    m->top = q;
  915|      0|    q->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  916|  2.42k|  } else if (oldfirst == m->dv) {
  ------------------
  |  Branch (916:14): [True: 0, False: 2.42k]
  ------------------
  917|      0|    size_t dsize = m->dvsize += qsize;
  918|      0|    m->dv = q;
  919|      0|    set_size_and_pinuse_of_free_chunk(q, dsize);
  ------------------
  |  |  473|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
  920|  2.42k|  } else {
  921|  2.42k|    if (!cinuse(oldfirst)) {
  ------------------
  |  |  449|  2.42k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  2.42k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.42k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (921:9): [True: 2, False: 2.42k]
  ------------------
  922|      2|      size_t nsize = chunksize(oldfirst);
  ------------------
  |  |  451|      2|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|      2|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      2|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|      2|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      2|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  923|      2|      unlink_chunk(m, oldfirst, nsize);
  ------------------
  |  |  820|      2|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|      2|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|      2|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|      2|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|      0|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|      0|  mchunkptr F = P->fd;\
  |  |  |  |  692|      0|  mchunkptr B = P->bk;\
  |  |  |  |  693|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|      0|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  695|      0|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|      0|  } else {\
  |  |  |  |  697|      0|    F->bk = B;\
  |  |  |  |  698|      0|    B->fd = F;\
  |  |  |  |  699|      0|  }\
  |  |  |  |  700|      0|}
  |  |  ------------------
  |  |  821|      2|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|      2|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|      2|  tchunkptr XP = X->parent;\
  |  |  |  |  769|      2|  tchunkptr R;\
  |  |  |  |  770|      2|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 1, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  771|      1|    tchunkptr F = X->fd;\
  |  |  |  |  772|      1|    R = X->bk;\
  |  |  |  |  773|      1|    F->bk = R;\
  |  |  |  |  774|      1|    R->fd = F;\
  |  |  |  |  775|      1|  } else {\
  |  |  |  |  776|      1|    tchunkptr *RP;\
  |  |  |  |  777|      1|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  778|      1|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  779|      1|      tchunkptr *CP;\
  |  |  |  |  780|      1|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  781|      1|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  782|      0|	R = *(RP = CP);\
  |  |  |  |  783|      0|      }\
  |  |  |  |  784|      1|      *RP = 0;\
  |  |  |  |  785|      1|    }\
  |  |  |  |  786|      1|  }\
  |  |  |  |  787|      2|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 1, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  788|      1|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|      1|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|      1|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  790|      1|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  791|      1|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|      0|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|      1|    } else {\
  |  |  |  |  793|      0|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  794|      0|	XP->child[0] = R;\
  |  |  |  |  795|      0|      else \
  |  |  |  |  796|      0|	XP->child[1] = R;\
  |  |  |  |  797|      0|    }\
  |  |  |  |  798|      1|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  799|      1|      tchunkptr C0, C1;\
  |  |  |  |  800|      1|      R->parent = XP;\
  |  |  |  |  801|      1|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  802|      0|	R->child[0] = C0;\
  |  |  |  |  803|      0|	C0->parent = R;\
  |  |  |  |  804|      0|      }\
  |  |  |  |  805|      1|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  806|      0|	R->child[1] = C1;\
  |  |  |  |  807|      0|	C1->parent = R;\
  |  |  |  |  808|      0|      }\
  |  |  |  |  809|      1|    }\
  |  |  |  |  810|      1|  }\
  |  |  |  |  811|      2|}
  |  |  ------------------
  ------------------
  924|      2|      oldfirst = chunk_plus_offset(oldfirst, nsize);
  ------------------
  |  |  457|      2|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  925|      2|      qsize += nsize;
  926|      2|    }
  927|  2.42k|    set_free_with_pinuse(q, qsize, oldfirst);
  ------------------
  |  |  477|  2.42k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  2.42k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.42k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.42k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  2.42k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.42k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.42k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  2.42k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  928|  2.42k|    insert_chunk(m, q, qsize);
  ------------------
  |  |  816|  2.42k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  2.42k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  2.42k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  2.42k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 15, False: 2.40k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|     15|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|     15|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|     15|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|     15|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|     15|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|     15|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|     15|  mchunkptr F = B;\
  |  |  |  |  679|     15|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|     15|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     15|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 10, False: 5]
  |  |  |  |  ------------------
  |  |  |  |  680|     15|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|     10|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     10|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|     15|  else\
  |  |  |  |  682|     15|    F = B->fd;\
  |  |  |  |  683|     15|  B->fd = P;\
  |  |  |  |  684|     15|  F->bk = P;\
  |  |  |  |  685|     15|  P->fd = F;\
  |  |  |  |  686|     15|  P->bk = B;\
  |  |  |  |  687|     15|}
  |  |  ------------------
  |  |  817|  2.40k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|  2.40k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|  2.40k|  tbinptr *H;\
  |  |  |  |  730|  2.40k|  bindex_t I;\
  |  |  |  |  731|  2.40k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|  2.40k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|  2.40k|{\
  |  |  |  |  |  |  616|  2.40k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  2.40k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|  2.40k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 2.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|  2.40k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 2.40k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|  2.40k|  } else {\
  |  |  |  |  |  |  622|  2.40k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  2.40k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  2.40k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  2.40k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|  2.40k|  }\
  |  |  |  |  |  |  625|  2.40k|}
  |  |  |  |  ------------------
  |  |  |  |  732|  2.40k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  2.40k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|  2.40k|  X->index = I;\
  |  |  |  |  734|  2.40k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|  2.40k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|  2.40k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  2.40k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 2.27k, False: 136]
  |  |  |  |  ------------------
  |  |  |  |  736|  2.27k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|  2.27k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  2.27k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|  2.27k|    *H = X;\
  |  |  |  |  738|  2.27k|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|  2.27k|    X->fd = X->bk = X;\
  |  |  |  |  740|  2.27k|  } else {\
  |  |  |  |  741|    136|    tchunkptr T = *H;\
  |  |  |  |  742|    136|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|    136|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|    136|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 136]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|    136|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|    136|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    136|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|    136|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|    188|    for (;;) {\
  |  |  |  |  744|    188|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|    188|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|    188|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|    188|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|    188|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|    188|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|    188|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 184, False: 4]
  |  |  |  |  ------------------
  |  |  |  |  745|    184|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|    184|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    184|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|    184|	K <<= 1;\
  |  |  |  |  747|    184|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 52, False: 132]
  |  |  |  |  ------------------
  |  |  |  |  748|     52|	  T = *C;\
  |  |  |  |  749|    132|	} else {\
  |  |  |  |  750|    132|	  *C = X;\
  |  |  |  |  751|    132|	  X->parent = T;\
  |  |  |  |  752|    132|	  X->fd = X->bk = X;\
  |  |  |  |  753|    132|	  break;\
  |  |  |  |  754|    132|	}\
  |  |  |  |  755|    184|      } else {\
  |  |  |  |  756|      4|	tchunkptr F = T->fd;\
  |  |  |  |  757|      4|	T->fd = F->bk = X;\
  |  |  |  |  758|      4|	X->fd = F;\
  |  |  |  |  759|      4|	X->bk = T;\
  |  |  |  |  760|      4|	X->parent = 0;\
  |  |  |  |  761|      4|	break;\
  |  |  |  |  762|      4|      }\
  |  |  |  |  763|    188|    }\
  |  |  |  |  764|    136|  }\
  |  |  |  |  765|  2.40k|}
  |  |  ------------------
  ------------------
  929|  2.42k|  }
  930|       |
  931|  2.42k|  return chunk2mem(p);
  ------------------
  |  |  422|  2.42k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.42k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.42k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  932|  2.42k|}
lj_alloc.c:add_segment:
  936|  5.99k|{
  937|       |  /* Determine locations and sizes of segment, fenceposts, old top */
  938|  5.99k|  char *old_top = (char *)m->top;
  939|  5.99k|  msegmentptr oldsp = segment_holding(m, old_top);
  940|  5.99k|  char *old_end = oldsp->base + oldsp->size;
  941|  5.99k|  size_t ssize = pad_request(sizeof(struct malloc_segment));
  ------------------
  |  |  433|  5.99k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  5.99k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.99k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  942|  5.99k|  char *rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |   58|  5.99k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  ------------------
  |  |  |  |   49|  5.99k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
                char *rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  943|  5.99k|  size_t offset = align_offset(chunk2mem(rawsp));
  ------------------
  |  |   66|  5.99k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 0, False: 5.99k]
  |  |  ------------------
  |  |   67|  5.99k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  944|  5.99k|  char *asp = rawsp + offset;
  945|  5.99k|  char *csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
  ------------------
  |  |  419|  5.99k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  5.99k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (945:15): [True: 10, False: 5.98k]
  ------------------
  946|  5.99k|  mchunkptr sp = (mchunkptr)csp;
  947|  5.99k|  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
  ------------------
  |  |  422|  5.99k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  5.99k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.99k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  948|  5.99k|  mchunkptr tnext = chunk_plus_offset(sp, ssize);
  ------------------
  |  |  457|  5.99k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  949|  5.99k|  mchunkptr p = tnext;
  950|       |
  951|       |  /* reset top to new space */
  952|  5.99k|  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
  ------------------
  |  |  600|  5.99k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  5.99k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  5.99k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  5.99k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  5.99k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  5.99k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  5.99k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  5.99k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  5.99k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  5.99k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  953|       |
  954|       |  /* Set up segment record */
  955|  5.99k|  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
  ------------------
  |  |  670|  5.99k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  5.99k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  5.99k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  5.99k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  956|  5.99k|  *ss = m->seg; /* Push current record */
  957|  5.99k|  m->seg.base = tbase;
  958|  5.99k|  m->seg.size = tsize;
  959|  5.99k|  m->seg.next = ss;
  960|       |
  961|       |  /* Insert trailing fenceposts */
  962|  17.9k|  for (;;) {
  963|  17.9k|    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
  ------------------
  |  |  457|  17.9k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  964|  17.9k|    p->head = FENCEPOST_HEAD;
  ------------------
  |  |  446|  17.9k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  443|  17.9k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  17.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  17.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  17.9k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  17.9k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|  17.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
  965|  17.9k|    if ((char *)(&(nextp->head)) < old_end)
  ------------------
  |  Branch (965:9): [True: 11.9k, False: 5.99k]
  ------------------
  966|  11.9k|      p = nextp;
  967|  5.99k|    else
  968|  5.99k|      break;
  969|  17.9k|  }
  970|       |
  971|       |  /* Insert the rest of old top into a bin as an ordinary free chunk */
  972|  5.99k|  if (csp != old_top) {
  ------------------
  |  Branch (972:7): [True: 5.98k, False: 10]
  ------------------
  973|  5.98k|    mchunkptr q = (mchunkptr)old_top;
  974|  5.98k|    size_t psize = (size_t)(csp - old_top);
  975|  5.98k|    mchunkptr tn = chunk_plus_offset(q, psize);
  ------------------
  |  |  457|  5.98k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  976|  5.98k|    set_free_with_pinuse(q, psize, tn);
  ------------------
  |  |  477|  5.98k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  5.98k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  5.98k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.98k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  5.98k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  5.98k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.98k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  5.98k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  977|  5.98k|    insert_chunk(m, q, psize);
  ------------------
  |  |  816|  5.98k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|  5.98k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  5.98k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|  5.98k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 93, False: 5.88k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|     93|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|     93|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|     93|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|     93|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|     93|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|     93|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|     93|  mchunkptr F = B;\
  |  |  |  |  679|     93|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|     93|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     93|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 79, False: 14]
  |  |  |  |  ------------------
  |  |  |  |  680|     93|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|     79|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     79|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|     93|  else\
  |  |  |  |  682|     93|    F = B->fd;\
  |  |  |  |  683|     93|  B->fd = P;\
  |  |  |  |  684|     93|  F->bk = P;\
  |  |  |  |  685|     93|  P->fd = F;\
  |  |  |  |  686|     93|  P->bk = B;\
  |  |  |  |  687|     93|}
  |  |  ------------------
  |  |  817|  5.88k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|  5.88k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|  5.88k|  tbinptr *H;\
  |  |  |  |  730|  5.88k|  bindex_t I;\
  |  |  |  |  731|  5.88k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|  5.88k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|  5.88k|{\
  |  |  |  |  |  |  616|  5.88k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  5.88k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|  5.88k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 5.88k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|  5.88k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 5.88k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|  5.88k|  } else {\
  |  |  |  |  |  |  622|  5.88k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  5.88k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  5.88k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  5.88k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|  5.88k|  }\
  |  |  |  |  |  |  625|  5.88k|}
  |  |  |  |  ------------------
  |  |  |  |  732|  5.88k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  5.88k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|  5.88k|  X->index = I;\
  |  |  |  |  734|  5.88k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|  5.88k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|  5.88k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  5.88k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 4.47k, False: 1.41k]
  |  |  |  |  ------------------
  |  |  |  |  736|  4.47k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|  4.47k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  4.47k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|  4.47k|    *H = X;\
  |  |  |  |  738|  4.47k|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|  4.47k|    X->fd = X->bk = X;\
  |  |  |  |  740|  4.47k|  } else {\
  |  |  |  |  741|  1.41k|    tchunkptr T = *H;\
  |  |  |  |  742|  1.41k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|  1.41k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|  1.41k|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 1.41k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|  1.41k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|  1.41k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.41k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  1.41k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|  1.99k|    for (;;) {\
  |  |  |  |  744|  1.99k|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|  1.99k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|  1.99k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|  1.99k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|  1.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|  1.99k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|  1.99k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 1.96k, False: 32]
  |  |  |  |  ------------------
  |  |  |  |  745|  1.96k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  1.96k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.96k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|  1.96k|	K <<= 1;\
  |  |  |  |  747|  1.96k|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 578, False: 1.38k]
  |  |  |  |  ------------------
  |  |  |  |  748|    578|	  T = *C;\
  |  |  |  |  749|  1.38k|	} else {\
  |  |  |  |  750|  1.38k|	  *C = X;\
  |  |  |  |  751|  1.38k|	  X->parent = T;\
  |  |  |  |  752|  1.38k|	  X->fd = X->bk = X;\
  |  |  |  |  753|  1.38k|	  break;\
  |  |  |  |  754|  1.38k|	}\
  |  |  |  |  755|  1.96k|      } else {\
  |  |  |  |  756|     32|	tchunkptr F = T->fd;\
  |  |  |  |  757|     32|	T->fd = F->bk = X;\
  |  |  |  |  758|     32|	X->fd = F;\
  |  |  |  |  759|     32|	X->bk = T;\
  |  |  |  |  760|     32|	X->parent = 0;\
  |  |  |  |  761|     32|	break;\
  |  |  |  |  762|     32|      }\
  |  |  |  |  763|  1.99k|    }\
  |  |  |  |  764|  1.41k|  }\
  |  |  |  |  765|  5.88k|}
  |  |  ------------------
  ------------------
  978|  5.98k|  }
  979|  5.99k|}
lj_alloc.c:lj_alloc_realloc:
 1424|  18.4k|{
 1425|  18.4k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|  18.4k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|  18.4k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  18.4k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  18.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  18.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  18.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  18.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1425:7): [True: 0, False: 18.4k]
  ------------------
 1426|      0|    return NULL;
 1427|  18.4k|  } else {
 1428|  18.4k|    mstate m = (mstate)msp;
 1429|  18.4k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  423|  18.4k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  18.4k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  18.4k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1430|  18.4k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  451|  18.4k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  18.4k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  18.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  18.4k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  18.4k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1431|  18.4k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  457|  18.4k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1432|  18.4k|    mchunkptr newp = 0;
 1433|  18.4k|    size_t nb = request2size(nsize);
  ------------------
  |  |  437|  18.4k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  429|  18.4k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  419|  18.4k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  408|  18.4k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  18.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  18.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  18.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  18.4k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  18.4k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  433|  18.4k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  18.4k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  18.4k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  18.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  18.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  18.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  18.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (437:4): [True: 0, False: 18.4k]
  |  |  ------------------
  ------------------
 1434|       |
 1435|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1436|  18.4k|    if (is_direct(oldp)) {
  ------------------
  |  |  480|  18.4k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  441|  18.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  18.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|  11.1k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (480:4): [True: 11.1k, False: 7.38k]
  |  |  |  Branch (480:33): [True: 11.0k, False: 95]
  |  |  ------------------
  ------------------
 1437|  11.0k|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1438|  11.0k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1438:16): [True: 3.59k, False: 3.88k]
  ------------------
 1439|  3.59k|      size_t rsize = oldsize - nb;
 1440|  3.59k|      newp = oldp;
 1441|  3.59k|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|  3.59k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  3.59k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.59k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.59k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.59k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.59k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1441:11): [True: 3.59k, False: 0]
  ------------------
 1442|  3.59k|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  457|  3.59k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1443|  3.59k|	set_inuse(m, newp, nb);
  ------------------
  |  |  660|  3.59k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  3.59k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  3.59k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  3.59k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|  3.59k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  3.59k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1444|  3.59k|	set_inuse(m, rem, rsize);
  ------------------
  |  |  660|  3.59k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  3.59k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  3.59k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  3.59k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|  3.59k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  3.59k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|  3.59k|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  422|  3.59k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  3.59k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  3.59k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1446|  3.59k|      }
 1447|  3.88k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1447:16): [True: 646, False: 3.23k]
  |  Branch (1447:34): [True: 133, False: 513]
  ------------------
 1448|       |      /* Expand into top */
 1449|    133|      size_t newsize = oldsize + m->topsize;
 1450|    133|      size_t newtopsize = newsize - nb;
 1451|    133|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  457|    133|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1452|    133|      set_inuse(m, oldp, nb);
  ------------------
  |  |  660|    133|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|    133|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    133|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|    133|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    133|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|    133|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|    133|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    133|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1453|    133|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  441|    133|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|    133|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1454|    133|      m->top = newtop;
 1455|    133|      m->topsize = newtopsize;
 1456|    133|      newp = oldp;
 1457|    133|    }
 1458|       |
 1459|  18.4k|    if (newp != 0) {
  ------------------
  |  Branch (1459:9): [True: 14.7k, False: 3.75k]
  ------------------
 1460|  14.7k|      return chunk2mem(newp);
  ------------------
  |  |  422|  14.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  14.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  14.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1461|  14.7k|    } else {
 1462|  3.75k|      void *newmem = lj_alloc_malloc(m, nsize);
 1463|  3.75k|      if (newmem != 0) {
  ------------------
  |  Branch (1463:11): [True: 3.75k, False: 0]
  ------------------
 1464|  3.75k|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  484|  3.75k| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  480|  3.75k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  3.75k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.75k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|     89|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     89|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (480:4): [True: 89, False: 3.66k]
  |  |  |  |  |  Branch (480:33): [True: 0, False: 89]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  413|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|  3.75k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  3.75k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1465|  3.75k|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1465:22): [True: 3.75k, False: 0]
  ------------------
 1466|  3.75k|	lj_alloc_free(m, ptr);
 1467|  3.75k|      }
 1468|  3.75k|      return newmem;
 1469|  3.75k|    }
 1470|  18.4k|  }
 1471|  18.4k|}
lj_alloc.c:direct_resize:
  846|  11.0k|{
  847|  11.0k|  size_t oldsize = chunksize(oldp);
  ------------------
  |  |  451|  11.0k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  11.0k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  11.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  11.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  11.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  848|  11.0k|  if (is_small(nb)) /* Can't shrink direct regions below small size */
  ------------------
  |  |  604|  11.0k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  523|  11.0k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  521|  11.0k|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (604:22): [True: 0, False: 11.0k]
  |  |  ------------------
  ------------------
  849|      0|    return NULL;
  850|       |  /* Keep old chunk if big enough but not too big */
  851|  11.0k|  if (oldsize >= nb + SIZE_T_SIZE &&
  ------------------
  |  |   49|  22.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
  |  Branch (851:7): [True: 6.17k, False: 4.83k]
  ------------------
  852|  11.0k|      (oldsize - nb) <= (DEFAULT_GRANULARITY >> 1)) {
  ------------------
  |  |   41|  6.17k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
  |  Branch (852:7): [True: 255, False: 5.92k]
  ------------------
  853|    255|    return oldp;
  854|  10.7k|  } else {
  855|  10.7k|    size_t offset = oldp->prev_foot & ~IS_DIRECT_BIT;
  ------------------
  |  |   74|  10.7k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  10.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  856|  10.7k|    size_t oldmmsize = oldsize + offset + DIRECT_FOOT_PAD;
  ------------------
  |  |  415|  10.7k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  10.7k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|  10.7k|    size_t newmmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |  563|  10.7k|#define mmap_align(S)	page_align(S)
  |  |  ------------------
  |  |  |  |  553|  10.7k| (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  10.7k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  10.7k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  10.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  858|  10.7k|    char *cp = (char *)CALL_MREMAP((char *)oldp - offset,
  ------------------
  |  |  365|  10.7k|#define CALL_MREMAP(addr, osz, nsz, mv) CALL_MREMAP_((addr), (osz), (nsz), (mv))
  ------------------
  859|  10.7k|				   oldmmsize, newmmsize, CALL_MREMAP_MV);
  860|  10.7k|    if (cp != CMFAIL) {
  ------------------
  |  |   72|  10.7k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  10.7k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  10.7k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (860:9): [True: 10.7k, False: 0]
  ------------------
  861|  10.7k|      mchunkptr newp = (mchunkptr)(cp + offset);
  862|  10.7k|      size_t psize = newmmsize - offset - DIRECT_FOOT_PAD;
  ------------------
  |  |  415|  10.7k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  10.7k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  10.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  863|  10.7k|      newp->head = psize|CINUSE_BIT;
  ------------------
  |  |  442|  10.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  10.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
  864|  10.7k|      chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  457|  10.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                    chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  446|  10.7k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  443|  10.7k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  10.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  10.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  10.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  10.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|  10.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
  865|  10.7k|      chunk_plus_offset(newp, psize+SIZE_T_SIZE)->head = 0;
  ------------------
  |  |  457|  10.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  866|  10.7k|      return newp;
  867|  10.7k|    }
  868|  10.7k|  }
  869|      0|  return NULL;
  870|  11.0k|}

lua_gettop:
  146|  3.44k|{
  147|  3.44k|  return (int)(L->top - L->base);
  148|  3.44k|}
lua_settop:
  151|  3.71k|{
  152|  3.71k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 1.85k, False: 1.85k]
  ------------------
  153|  1.85k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  1.85k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 1.85k]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|  1.85k|    } else {
  159|  1.85k|      L->top = L->base + idx;
  160|  1.85k|    }
  161|  1.85k|  } else {
  162|  1.85k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|      0|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|  1.85k|  }
  165|  3.71k|}
lua_remove:
  168|  1.85k|{
  169|  1.85k|  TValue *p = index2adr_stack(L, idx);
  170|  3.71k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 1.85k, False: 1.85k]
  ------------------
  171|  1.85k|  L->top--;
  172|  1.85k|}
lua_pushvalue:
  215|  3.71k|{
  216|  3.71k|  copyTV(L, L->top, index2adr(L, idx));
  217|  3.71k|  incr_top(L);
  ------------------
  |  |   12|  3.71k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  7.43k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  3.71k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 3.71k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|  3.71k|}
lua_type:
  223|  1.85k|{
  224|  1.85k|  cTValue *o = index2adr(L, idx);
  225|  1.85k|  if (tvisnumber(o)) {
  ------------------
  |  |  799|  1.85k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.85k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.85k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.85k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|  1.85k|  } else if (o == niltv(L)) {
  ------------------
  |  |  664|  1.85k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 1.85k]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|  1.85k|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|  1.85k|    uint32_t t = ~itype(o);
  ------------------
  |  |  778|  1.85k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|  1.85k|#if LJ_64
  236|  1.85k|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|  1.85k|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|  1.85k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 1.85k]
  |  |  |  |  |  Branch (355:5): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|      0|    return tt;
  242|  1.85k|  }
  243|  1.85k|}
lua_tolstring:
  510|  1.72k|{
  511|  1.72k|  TValue *o = index2adr(L, idx);
  512|  1.72k|  GCstr *s;
  513|  1.72k|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  1.72k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.72k, False: 0]
  |  |  ------------------
  ------------------
  514|  1.72k|    s = strV(o);
  ------------------
  |  |  856|  1.72k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.72k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.72k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.72k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.72k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.72k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  515|  1.72k|  } else if (tvisnumber(o)) {
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  516|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  517|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  518|      0|    s = lj_strfmt_number(L, o);
  519|      0|    setstrV(L, o, s);
  520|      0|  } else {
  521|      0|    if (len != NULL) *len = 0;
  ------------------
  |  Branch (521:9): [True: 0, False: 0]
  ------------------
  522|      0|    return NULL;
  523|      0|  }
  524|  1.72k|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (524:7): [True: 0, False: 1.72k]
  ------------------
  525|  1.72k|  return strdata(s);
  ------------------
  |  |  316|  1.72k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  526|  1.72k|}
lua_objlen:
  582|   964k|{
  583|   964k|  TValue *o = index2adr(L, idx);
  584|   964k|  if (tvisstr(o)) {
  ------------------
  |  |  792|   964k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|   964k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   964k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 964k, False: 0]
  |  |  ------------------
  ------------------
  585|   964k|    return strV(o)->len;
  ------------------
  |  |  856|   964k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   964k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   964k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   964k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 964k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   964k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  586|   964k|  } else if (tvistab(o)) {
  ------------------
  |  |  797|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (797:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  587|      0|    return (size_t)lj_tab_len(tabV(o));
  ------------------
  |  |  861|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  588|      0|  } else if (tvisudata(o)) {
  ------------------
  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  589|      0|    return udataV(o)->len;
  ------------------
  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  590|      0|  } else if (tvisnumber(o)) {
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  591|      0|    GCstr *s = lj_strfmt_number(L, o);
  592|      0|    setstrV(L, o, s);
  593|      0|    return s->len;
  594|      0|  } else {
  595|      0|    return 0;
  596|      0|  }
  597|   964k|}
lua_pushlstring:
  655|   495k|{
  656|   495k|  GCstr *s;
  657|   495k|  lj_gc_check(L);
  ------------------
  |  |   66|   495k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   495k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 20.4k, False: 474k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   495k|      lj_gc_step(L); }
  ------------------
  658|   495k|  s = lj_str_new(L, str, len);
  659|   495k|  setstrV(L, L->top, s);
  660|   495k|  incr_top(L);
  ------------------
  |  |   12|   495k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   990k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   495k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 495k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|   495k|}
lua_pushcclosure:
  695|  1.85k|{
  696|  1.85k|  GCfunc *fn;
  697|  1.85k|  lj_gc_check(L);
  ------------------
  |  |   66|  1.85k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  1.85k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 1.85k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  1.85k|      lj_gc_step(L); }
  ------------------
  698|  1.85k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  1.85k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|      0|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|  1.85k|  fn->c.f = f;
  701|  1.85k|  L->top -= n;
  702|  1.85k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 0, False: 1.85k]
  ------------------
  703|      0|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|  1.85k|  setfuncV(L, L->top, fn);
  705|  1.85k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|  1.85k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|  1.85k|  incr_top(L);
  ------------------
  |  |   12|  1.85k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  3.71k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 1.85k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|  1.85k|}
lua_createtable:
  725|  1.85k|{
  726|  1.85k|  lj_gc_check(L);
  ------------------
  |  |   66|  1.85k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  1.85k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 1.85k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  1.85k|      lj_gc_step(L); }
  ------------------
  727|  1.85k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|  1.85k|  incr_top(L);
  ------------------
  |  |   12|  1.85k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  3.71k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 1.85k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|  1.85k|}
lua_concat:
  777|   246k|{
  778|   246k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|   246k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   246k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   246k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 246k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   246k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  779|   246k|  if (n >= 2) {
  ------------------
  |  Branch (779:7): [True: 91.8k, False: 154k]
  ------------------
  780|  91.8k|    n--;
  781|  91.8k|    do {
  782|  91.8k|      TValue *top = lj_meta_cat(L, L->top-1, -n);
  783|  91.8k|      if (top == NULL) {
  ------------------
  |  Branch (783:11): [True: 91.8k, False: 0]
  ------------------
  784|  91.8k|	L->top -= n;
  785|  91.8k|	break;
  786|  91.8k|      }
  787|      0|      n -= (int)(L->top - (top - 2*LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  788|      0|      L->top = top+2;
  789|      0|      lj_vm_call(L, top, 1+1);
  790|      0|      L->top -= 1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  791|      0|      copyTV(L, L->top-1, L->top+LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  792|      0|    } while (--n > 0);
  ------------------
  |  Branch (792:14): [True: 0, False: 0]
  ------------------
  793|   154k|  } else if (n == 0) {  /* Push empty string. */
  ------------------
  |  Branch (793:14): [True: 0, False: 154k]
  ------------------
  794|      0|    setstrV(L, L->top, &G(L)->strempty);
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  795|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  796|      0|  }
  797|       |  /* else n == 1: nothing to do. */
  798|   246k|}
lua_rawget:
  832|  1.85k|{
  833|  1.85k|  cTValue *t = index2adr(L, idx);
  834|  1.85k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|  1.85k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  861|  1.85k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|  1.85k|}
lua_settable:
  968|  1.85k|{
  969|  1.85k|  TValue *o;
  970|  1.85k|  cTValue *t = index2adr_check(L, idx);
  971|  1.85k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|  1.85k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|      0|  o = lj_meta_tset(L, t, L->top-2);
  973|  1.85k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 1.85k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|  1.85k|    L->top -= 2;
  976|  1.85k|    copyTV(L, o, L->top+1);
  977|  1.85k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|  1.85k|}
lua_rawseti:
 1019|  1.85k|{
 1020|  1.85k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  861|  1.85k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  1.85k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  1.85k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  1.85k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   87|  1.85k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|  1.85k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 1.85k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  1.85k|  src = L->top-1;
 1025|  1.85k|  copyTV(L, dst, src);
 1026|  1.85k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  1.85k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|  3.71k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  3.71k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|  1.85k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.85k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.85k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.85k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.85k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.85k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 1.85k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  3.71k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  1.85k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  1.85k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  1.85k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 1.85k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 1.85k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  1.85k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  1.85k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 1.85k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  1.85k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  1.85k|  L->top = src;
 1028|  1.85k|}
lj_api.c:index2adr_stack:
   72|  1.85k|{
   73|  1.85k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 1.85k]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|  1.85k|  } else {
   83|  1.85k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.85k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|      0|		"invalid stack slot %d", idx);
   85|      0|    return L->top + idx;
   86|  1.85k|  }
   87|  1.85k|}
lj_api.c:index2adr:
   35|   979k|{
   36|   979k|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 0, False: 979k]
  ------------------
   37|      0|    TValue *o = L->base + (idx - 1);
   38|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 0, False: 0]
  ------------------
   39|   979k|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   979k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 977k, False: 1.85k]
  ------------------
   40|   977k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   977k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.95M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 977k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 977k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   977k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|      0|		"bad stack slot %d", idx);
   42|      0|    return L->top + idx;
   43|   977k|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  1.85k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 0, False: 1.85k]
  ------------------
   44|      0|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|      0|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|      0|    return o;
   47|  1.85k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  1.85k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 1.85k, False: 0]
  ------------------
   48|  1.85k|    return registry(L);
  ------------------
  |  |  703|  1.85k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|  1.85k|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  664|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|   979k|}
lj_api.c:getcurrenv:
   90|  1.85k|{
   91|  1.85k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  707|  1.85k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  830|  1.85k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  1.85k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  1.85k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|  1.85k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|  1.85k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  1.85k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  1.85k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 0, False: 1.85k]
  ------------------
   93|  1.85k|}
lj_api.c:index2adr_check:
   65|  1.85k|{
   66|  1.85k|  TValue *o = index2adr(L, idx);
   67|  1.85k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|  1.85k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|      0|  return o;
   69|  1.85k|}

lj_buf_more2:
   61|  10.4k|{
   62|  10.4k|  if (sbufisext(sb)) {
  ------------------
  |  |   56|  10.4k|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|  10.4k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  10.4k|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|  10.4k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|  10.4k|  } else {
   81|  10.4k|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|  10.4k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|  10.4k|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|  10.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  10.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 10.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|  10.4k|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|  20.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 10.4k]
  |  |  |  Branch (146:44): [True: 0, False: 10.4k]
  |  |  |  Branch (146:44): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  10.4k|    buf_grow(sb, len + sz);
   86|  10.4k|  }
   87|  10.4k|  return sb->w;
   88|  10.4k|}
lj_buf_shrink:
   91|  9.77k|{
   92|  9.77k|  char *b = sb->b;
   93|  9.77k|  MSize osz = (MSize)(sb->e - b);
   94|  9.77k|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|  9.77k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 9.77k, False: 3]
  ------------------
   95|  9.77k|    MSize n = (MSize)(sb->w - b);
   96|  9.77k|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   97|  9.77k|    sb->b = b;
   98|  9.77k|    sb->w = b + n;
   99|  9.77k|    sb->e = b + (osz >> 1);
  100|  9.77k|  }
  101|  9.77k|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|  9.77k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.77k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.77k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.77k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  102|  9.77k|}
lj_buf_putmem:
  133|   581k|{
  134|   581k|  char *w = lj_buf_more(sb, len);
  135|   581k|  w = lj_buf_wmem(w, q, len);
  136|   581k|  sb->w = w;
  137|   581k|  return sb;
  138|   581k|}
lj_buf.c:buf_grow:
   20|  10.4k|{
   21|  10.4k|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|  10.4k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|  10.4k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|  10.4k|  char *b;
   23|  10.4k|  GCSize flag;
   24|  10.4k|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  10.4k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  1.68k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 1.68k, False: 8.71k]
  ------------------
   25|  45.7k|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 35.3k, False: 10.4k]
  ------------------
   26|  10.4k|  flag = sbufflag(sb);
  ------------------
  |  |   55|  10.4k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|  10.4k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|  10.4k|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|  10.4k|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 10.4k]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|  10.4k|  } else {
   34|  10.4k|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|  10.4k|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|  10.4k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|  10.4k|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|  10.4k|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|  10.4k|  }
   36|  10.4k|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|  10.4k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 10.4k]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|      0|  sb->b = b;
   41|  10.4k|  sb->w = b + len;
   42|  10.4k|  sb->e = b + nsz;
   43|  10.4k|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|  10.4k|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 10.4k]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|  10.4k|}

lj_state.c:lj_buf_init:
   75|  1.85k|{
   76|  1.85k|  setsbufL(sb, L);
  ------------------
  |  |   49|  1.85k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  1.85k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  1.85k|  sb->w = sb->e = sb->b = NULL;
   78|  1.85k|}
lj_state.c:lj_buf_free:
   94|  1.85k|{
   95|  1.85k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  1.85k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  1.85k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  1.85k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  1.85k|}
lj_buf.c:lj_buf_more:
  107|   581k|{
  108|   581k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|   581k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 581k]
  |  |  ------------------
  ------------------
  109|      0|    return lj_buf_more2(sb, sz);
  110|   581k|  return sb->w;
  111|   581k|}
lj_buf.c:lj_buf_wmem:
  169|   581k|{
  170|   581k|  return (char *)memcpy(p, q, len) + len;
  171|   581k|}
lj_meta.c:lj_buf_tmp_:
   86|  91.8k|{
   87|  91.8k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  702|  91.8k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  91.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|  91.8k|  setsbufL(sb, L);
  ------------------
  |  |   49|  91.8k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  91.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|  91.8k|  lj_buf_reset(sb);
   90|  91.8k|  return sb;
   91|  91.8k|}
lj_meta.c:lj_buf_reset:
   81|  91.8k|{
   82|  91.8k|  sb->w = sb->b;
   83|  91.8k|}
lj_meta.c:lj_buf_more:
  107|  91.8k|{
  108|  91.8k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  91.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 10.4k, False: 81.4k]
  |  |  ------------------
  ------------------
  109|  10.4k|    return lj_buf_more2(sb, sz);
  110|  81.4k|  return sb->w;
  111|  91.8k|}
lj_meta.c:lj_buf_str:
  194|  91.8k|{
  195|  91.8k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  91.8k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  196|  91.8k|}

lj_ctype_freestate:
  648|  1.85k|{
  649|  1.85k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  385|  1.85k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  650|  1.85k|  if (cts) {
  ------------------
  |  Branch (650:7): [True: 0, False: 1.85k]
  ------------------
  651|      0|    lj_ccallback_mcode_free(cts);
  652|      0|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  653|      0|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  654|      0|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|      0|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  655|      0|  }
  656|  1.85k|}

lj_str.c:lj_bswap:
  181|  3.14k|{
  182|  3.14k|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|  3.14k|}
lj_str.c:lj_getu32:
  237|  9.46M|{
  238|  9.46M|  return ((const Unaligned32 *)p)->u;
  239|  9.46M|}

lj_dispatch_init:
   61|  1.85k|{
   62|  1.85k|  uint32_t i;
   63|  1.85k|  ASMFunction *disp = GG->dispatch;
   64|   167k|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|   167k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 165k, False: 1.85k]
  ------------------
   65|   165k|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|   165k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   165k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|   165k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|   165k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|   122k|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  1.85k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|   122k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   122k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 120k, False: 1.85k]
  ------------------
   67|   120k|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|   120k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|   120k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  1.85k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  1.85k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  1.85k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  1.85k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  1.85k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  1.85k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  1.85k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  1.85k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|   107k|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|   107k|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 105k, False: 1.85k]
  ------------------
   78|   105k|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|   105k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  1.85k|}
lj_dispatch_update:
  107|  1.85k|{
  108|  1.85k|  uint8_t oldmode = g->dispatchmode;
  109|  1.85k|  uint8_t mode = 0;
  110|  1.85k|#if LJ_HASJIT
  111|  1.85k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  1.85k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.85k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.85k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  1.85k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 0, False: 1.85k]
  ------------------
  112|  1.85k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  1.85k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.85k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.85k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 1.85k]
  ------------------
  113|  1.85k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  1.85k|#endif
  115|  1.85k|#if LJ_HASPROFILE
  116|  1.85k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  674|  1.85k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 1.85k]
  ------------------
  117|  1.85k|#endif
  118|  1.85k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  1.85k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  1.85k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  1.85k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  1.85k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 0, False: 1.85k]
  ------------------
  119|  1.85k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  1.85k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  1.85k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 0, False: 1.85k]
  ------------------
  120|  1.85k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  1.85k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  1.85k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 1.85k]
  ------------------
  121|  1.85k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 0, False: 1.85k]
  ------------------
  122|      0|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|      0|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|      0|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|      0|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 0, False: 0]
  ------------------
  128|      0|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|      0|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|      0|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|      0|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|      0|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|      0|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|      0|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|      0|      f_itern = &lj_vm_IITERN;
  138|      0|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|      0|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|      0|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|      0|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|      0|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|      0|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|      0|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 0, False: 0]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|      0|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 0]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|      0|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|      0|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 0]
  ------------------
  164|      0|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 0]
  ------------------
  165|      0|	uint32_t i;
  166|      0|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 0, False: 0]
  ------------------
  167|      0|	  disp[i] = f;
  168|      0|      }
  169|      0|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 0, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|      0|      disp[BC_FORL] = f_forl;
  172|      0|      disp[BC_ITERL] = f_iterl;
  173|      0|      disp[BC_ITERN] = f_itern;
  174|      0|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|      0|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|      0|      } else {
  182|      0|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|      0|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|      0|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|      0|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|      0|      }
  187|      0|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|      0|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 0, False: 0]
  ------------------
  191|      0|      uint32_t i;
  192|      0|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1055|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|      0|      } else {
  196|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 0, False: 0]
  ------------------
  197|      0|	  disp[i] = lj_vm_callhook;
  198|      0|      }
  199|      0|    }
  200|      0|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 0, False: 0]
  ------------------
  201|      0|      disp[BC_FUNCF] = f_funcf;
  202|      0|      disp[BC_FUNCV] = f_funcv;
  203|      0|    }
  204|       |
  205|      0|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|      0|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 0, False: 0]
  |  Branch (207:34): [True: 0, False: 0]
  ------------------
  208|      0|      lj_dispatch_init_hotcount(g);
  209|      0|#endif
  210|      0|  }
  211|  1.85k|}

lj_err_verify:
  511|  1.85k|{
  512|  1.85k|#if !LJ_TARGET_OSX
  513|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  514|  1.85k|  struct dwarf_eh_bases ehb;
  515|  1.85k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  1.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  516|  1.85k|#endif
  517|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  518|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  519|       |  */
  520|  1.85k|}
lj_err_str:
  808|  1.85k|{
  809|  1.85k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  1.85k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  810|  1.85k|}

lj_func_closeuv:
   84|  3.71k|{
   85|  3.71k|  GCupval *uv;
   86|  3.71k|  global_State *g = G(L);
  ------------------
  |  |  702|  3.71k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.71k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  3.71k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  3.71k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 3.71k]
  ------------------
   88|  3.71k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|  3.71k|}
lj_func_newC:
  112|  1.85k|{
  113|  1.85k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|  1.85k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|  1.85k|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  1.85k|#define LJ_TFUNC		(~8u)
  ------------------
  115|  1.85k|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|  1.85k|#define FF_C		1
  ------------------
  116|  1.85k|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|  1.85k|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|  1.85k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|  1.85k|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|  1.85k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|  1.85k|  return fn;
  121|  1.85k|}
lj_func_free:
  186|  1.85k|{
  187|  1.85k|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  1.85k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  1.85k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|  1.85k|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  3.71k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|  1.85k|  lj_mem_free(g, fn, size);
  190|  1.85k|}

lj_gc_separateudata:
  142|  13.4k|{
  143|  13.4k|  size_t m = 0;
  144|  13.4k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  662|  13.4k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  13.4k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|  13.4k|  GCobj *o;
  146|  13.4k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  13.4k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 0, False: 13.4k]
  ------------------
  147|      0|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|      0|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 0, False: 0]
  |  |  |  Branch (40:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 0, False: 0]
  ------------------
  148|      0|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|      0|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|      0|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 0]
  |  |  |  Branch (20:5): [True: 0, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  Branch (20:28): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 0, False: 0]
  ------------------
  150|      0|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|      0|      p = &o->gch.nextgc;
  152|      0|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|      0|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|      0|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  154|      0|      markfinalized(o);
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|      0|      *p = o->gch.nextgc;
  156|      0|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  157|      0|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|      0|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|      0|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|      0|      } else {  /* Create circular list. */
  162|      0|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|      0|      }
  165|      0|    }
  166|      0|  }
  167|  13.4k|  return m;
  168|  13.4k|}
lj_gc_finalize_udata:
  578|  1.85k|{
  579|  1.85k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  1.85k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (579:10): [True: 0, False: 1.85k]
  ------------------
  580|      0|    gc_finalize(L);
  581|  1.85k|}
lj_gc_finalize_cdata:
  586|  1.85k|{
  587|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  1.85k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  385|  1.85k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  589|  1.85k|  if (cts) {
  ------------------
  |  Branch (589:7): [True: 0, False: 1.85k]
  ------------------
  590|      0|    GCtab *t = cts->finalizer;
  591|      0|    Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  592|      0|    ptrdiff_t i;
  593|      0|    setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  594|      0|    for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (594:35): [True: 0, False: 0]
  ------------------
  595|      0|      if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  796|      0|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      0|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (796:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (595:11): [True: 0, False: 0]
  ------------------
  596|      0|	GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  597|      0|	TValue tmp;
  598|      0|	makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  599|      0|	o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  600|      0|	copyTV(L, &tmp, &node[i].val);
  601|      0|	setnilV(&node[i].val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  602|      0|	gc_call_finalizer(g, L, &tmp, o);
  603|      0|      }
  604|      0|  }
  605|  1.85k|}
lj_gc_freeall:
  610|  1.85k|{
  611|  1.85k|  MSize i, strmask;
  612|       |  /* Free everything, except super-fixed objects (the main thread). */
  613|  1.85k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  1.85k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  1.85k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  1.85k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  1.85k|#define LJ_GC_SFIXED	0x40
  ------------------
  614|  1.85k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  402|  1.85k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  615|  1.85k|  strmask = g->str.mask;
  616|   477k|  for (i = 0; i <= strmask; i++)  /* Free all string hash chains. */
  ------------------
  |  Branch (616:15): [True: 475k, False: 1.85k]
  ------------------
  617|   475k|    gc_sweepstr(g, &g->str.tab[i]);
  618|  1.85k|}
lj_gc_step:
  733|  30.5k|{
  734|  30.5k|  global_State *g = G(L);
  ------------------
  |  |  702|  30.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  30.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  735|  30.5k|  GCSize lim;
  736|  30.5k|  int32_t ostate = g->vmstate;
  737|  30.5k|  setvmstate(g, GC);
  ------------------
  |  |  539|  30.5k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  738|  30.5k|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|  30.5k|#define GCSTEPSIZE	1024u
  ------------------
  739|  30.5k|  if (lim == 0)
  ------------------
  |  Branch (739:7): [True: 0, False: 30.5k]
  ------------------
  740|      0|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  741|  30.5k|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (741:7): [True: 19.2k, False: 11.2k]
  ------------------
  742|  19.2k|    g->gc.debt += g->gc.total - g->gc.threshold;
  743|  2.59M|  do {
  744|  2.59M|    lim -= (GCSize)gc_onestep(L);
  745|  2.59M|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (745:9): [True: 9.75k, False: 2.58M]
  ------------------
  746|  9.75k|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  747|  9.75k|      g->vmstate = ostate;
  748|  9.75k|      return 1;  /* Finished a GC cycle. */
  749|  9.75k|    }
  750|  2.59M|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (750:12): [Folded - Ignored]
  |  Branch (750:12): [True: 2.56M, False: 20.7k]
  ------------------
  751|  20.7k|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|  20.7k|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (751:7): [True: 990, False: 19.7k]
  ------------------
  752|    990|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|    990|#define GCSTEPSIZE	1024u
  ------------------
  753|    990|    g->vmstate = ostate;
  754|    990|    return -1;
  755|  19.7k|  } else {
  756|  19.7k|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|  19.7k|#define GCSTEPSIZE	1024u
  ------------------
  757|  19.7k|    g->gc.threshold = g->gc.total;
  758|  19.7k|    g->vmstate = ostate;
  759|  19.7k|    return 0;
  760|  19.7k|  }
  761|  20.7k|}
lj_mem_realloc:
  874|   364k|{
  875|   364k|  global_State *g = G(L);
  ------------------
  |  |  702|   364k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   364k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  876|   364k|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|   364k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   364k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 364k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   364k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  877|      0|  p = g->allocf(g->allocd, p, osz, nsz);
  878|   364k|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (878:7): [True: 0, False: 364k]
  |  Branch (878:20): [True: 0, False: 0]
  ------------------
  879|      0|    lj_err_mem(L);
  880|   364k|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|   364k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   364k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 364k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   364k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  881|   364k|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|   364k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   728k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 364k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   364k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  882|      0|	     "allocated memory address %p outside required range", p);
  883|      0|  g->gc.total = (g->gc.total - osz) + nsz;
  884|   364k|  return p;
  885|   364k|}
lj_mem_newgco:
  889|  7.43k|{
  890|  7.43k|  global_State *g = G(L);
  ------------------
  |  |  702|  7.43k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  7.43k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  891|  7.43k|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  892|  7.43k|  if (o == NULL)
  ------------------
  |  Branch (892:7): [True: 0, False: 7.43k]
  ------------------
  893|      0|    lj_err_mem(L);
  894|  7.43k|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|  7.43k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  14.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.43k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.43k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  895|      0|	     "allocated memory address %p outside required range", o);
  896|      0|  g->gc.total += size;
  897|  7.43k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|  7.43k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  898|  7.43k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|  7.43k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  899|  7.43k|  newwhite(g, o);
  ------------------
  |  |   40|  7.43k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|  7.43k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  7.43k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  7.43k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  7.43k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  7.43k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  900|  7.43k|  return o;
  901|  7.43k|}
lj_gc.c:gc_sweep:
  406|  23.2k|{
  407|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  408|  23.2k|  int ow = otherwhite(g);
  ------------------
  |  |   36|  23.2k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  23.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  23.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  23.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  409|  23.2k|  GCobj *o;
  410|  81.3k|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|  81.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (410:10): [True: 58.0k, False: 23.2k]
  |  Branch (410:37): [True: 58.0k, False: 0]
  ------------------
  411|  58.0k|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|  58.0k|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (411:9): [True: 11.6k, False: 46.4k]
  ------------------
  412|  11.6k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  402|  23.2k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (402:41): [True: 11.6k, False: 0]
  |  |  ------------------
  ------------------
  413|  58.0k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  58.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  58.0k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  58.0k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (413:9): [True: 50.6k, False: 7.43k]
  ------------------
  414|  50.6k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  50.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  50.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 50.6k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  50.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  415|      0|		 "sweep of undead object");
  416|  50.6k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|  50.6k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  50.6k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  50.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  50.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  50.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  50.6k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  50.6k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  50.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  50.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  50.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|  50.6k|      p = &o->gch.nextgc;
  418|  50.6k|    } else {  /* Otherwise value is dead, free it. */
  419|  7.43k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  7.43k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  14.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 7.43k]
  |  |  |  |  |  Branch (355:5): [True: 7.43k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.43k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  420|      0|		 "sweep of unlive object");
  421|  7.43k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  7.43k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  422|  7.43k|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|  7.43k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (422:11): [True: 0, False: 7.43k]
  ------------------
  423|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  424|  7.43k|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|  7.43k|#define LJ_TSTR			(~4u)
  ------------------
  425|  7.43k|    }
  426|  58.0k|  }
  427|  23.2k|  return p;
  428|  23.2k|}
lj_gc.c:gc_sweepstr:
  432|  2.97M|{
  433|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  434|  2.97M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  2.97M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  2.97M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.97M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  2.97M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  435|  2.97M|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  2.97M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  436|  2.97M|  GCRef q;
  437|  2.97M|  GCRef *p = &q;
  438|  2.97M|  GCobj *o;
  439|  2.97M|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  2.97M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  440|  3.84M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  3.84M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (440:10): [True: 867k, False: 2.97M]
  ------------------
  441|   867k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|   867k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|   867k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|   867k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (441:9): [True: 532k, False: 334k]
  ------------------
  442|   532k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   532k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   757k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 308k, False: 224k]
  |  |  |  |  |  Branch (355:5): [True: 224k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   532k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  443|      0|		 "sweep of undead string");
  444|   532k|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|   532k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   532k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   532k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   532k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   532k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   532k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   532k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   532k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   532k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   532k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  445|   532k|      p = &o->gch.nextgc;
  446|   532k|    } else {  /* Otherwise string is dead, free it. */
  447|   334k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   334k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   484k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 184k, False: 149k]
  |  |  |  |  |  Branch (355:5): [True: 149k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   334k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  448|      0|		 "sweep of unlive string");
  449|   334k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   334k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  450|   334k|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  762|   334k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   334k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   334k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   334k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 334k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   334k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  451|   334k|    }
  452|   867k|  }
  453|  2.97M|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  2.97M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  454|  2.97M|}
lj_gc.c:gc_onestep:
  660|  2.59M|{
  661|  2.59M|  global_State *g = G(L);
  ------------------
  |  |  702|  2.59M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.59M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  662|  2.59M|  switch (g->gc.state) {
  663|  10.9k|  case GCSpause:
  ------------------
  |  Branch (663:3): [True: 10.9k, False: 2.58M]
  ------------------
  664|  10.9k|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  665|  10.9k|    return 0;
  666|  64.7k|  case GCSpropagate:
  ------------------
  |  Branch (666:3): [True: 64.7k, False: 2.53M]
  ------------------
  667|  64.7k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  64.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (667:9): [True: 54.9k, False: 9.77k]
  ------------------
  668|  54.9k|      return propagatemark(g);  /* Propagate one gray object. */
  669|  9.77k|    g->gc.state = GCSatomic;  /* End of mark phase. */
  670|  9.77k|    return 0;
  671|  9.77k|  case GCSatomic:
  ------------------
  |  Branch (671:3): [True: 9.77k, False: 2.58M]
  ------------------
  672|  9.77k|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|  9.77k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  9.77k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 9.77k]
  |  |  ------------------
  ------------------
  673|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  674|  9.77k|    atomic(g, L);
  675|  9.77k|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  676|  9.77k|    g->gc.sweepstr = 0;
  677|  9.77k|    return 0;
  678|  2.50M|  case GCSsweepstring: {
  ------------------
  |  Branch (678:3): [True: 2.50M, False: 95.2k]
  ------------------
  679|  2.50M|    GCSize old = g->gc.total;
  680|  2.50M|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  681|  2.50M|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (681:9): [True: 9.75k, False: 2.49M]
  ------------------
  682|  9.75k|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  683|  2.50M|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  2.50M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.50M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.50M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.50M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  684|      0|    g->gc.estimate -= old - g->gc.total;
  685|  2.50M|    return GCSWEEPCOST;
  ------------------
  |  |   34|  2.50M|#define GCSWEEPCOST	10
  ------------------
  686|  9.77k|    }
  687|  9.75k|  case GCSsweep: {
  ------------------
  |  Branch (687:3): [True: 9.75k, False: 2.58M]
  ------------------
  688|  9.75k|    GCSize old = g->gc.total;
  689|  9.75k|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|  9.75k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  690|  9.75k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  9.75k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.75k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.75k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.75k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  691|      0|    g->gc.estimate -= old - g->gc.total;
  692|  9.75k|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|  9.75k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (692:9): [True: 9.75k, False: 0]
  ------------------
  693|  9.75k|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|  9.75k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (693:11): [True: 9.75k, False: 2]
  |  Branch (693:47): [True: 0, False: 9.75k]
  ------------------
  694|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  695|  9.75k|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|  9.75k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 9.75k]
  |  |  ------------------
  ------------------
  696|      0|	g->gc.state = GCSfinalize;
  697|      0|#if LJ_HASFFI
  698|      0|	g->gc.nocdatafin = 1;
  699|      0|#endif
  700|  9.75k|      } else {  /* Otherwise skip this phase to help the JIT. */
  701|  9.75k|	g->gc.state = GCSpause;  /* End of GC cycle. */
  702|  9.75k|	g->gc.debt = 0;
  703|  9.75k|      }
  704|  9.75k|    }
  705|  9.75k|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|  9.75k|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|  9.75k|#define GCSWEEPCOST	10
  ------------------
  706|  9.77k|    }
  707|      0|  case GCSfinalize:
  ------------------
  |  Branch (707:3): [True: 0, False: 2.59M]
  ------------------
  708|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (708:9): [True: 0, False: 0]
  ------------------
  709|      0|      GCSize old = g->gc.total;
  710|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  711|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  712|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  713|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (713:11): [True: 0, False: 0]
  |  Branch (713:33): [True: 0, False: 0]
  ------------------
  714|      0|	g->gc.estimate -= old - g->gc.total;
  715|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (715:11): [True: 0, False: 0]
  ------------------
  716|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  717|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  718|      0|    }
  719|      0|#if LJ_HASFFI
  720|      0|    if (!g->gc.nocdatafin) lj_tab_rehash(L, ctype_ctsG(g)->finalizer);
  ------------------
  |  |  385|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (720:9): [True: 0, False: 0]
  ------------------
  721|      0|#endif
  722|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  723|      0|    g->gc.debt = 0;
  724|      0|    return 0;
  725|      0|  default:
  ------------------
  |  Branch (725:3): [True: 0, False: 2.59M]
  ------------------
  726|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  727|      0|    return 0;
  728|  2.59M|  }
  729|  2.59M|}
lj_gc.c:gc_mark_start:
  103|  10.9k|{
  104|  10.9k|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|  10.9k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|  10.9k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  10.9k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|  10.9k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  10.9k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|  10.9k|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|  10.9k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  10.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  10.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  10.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  10.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 10.9k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|  10.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|  10.9k|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|  10.9k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  10.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  10.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  10.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  10.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 10.9k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|  10.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|  10.9k|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|  10.9k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  10.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  21.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 10.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  10.9k|	       "TValue and GC type mismatch"); \
  |  |   48|  10.9k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  10.9k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  21.9k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|  10.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  10.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  10.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  10.9k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  10.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  10.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  21.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  10.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  10.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  10.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|  10.9k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  10.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  10.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  10.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  10.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|  10.9k|  gc_mark_gcroot(g);
  111|  10.9k|  g->gc.state = GCSpropagate;
  112|  10.9k|}
lj_gc.c:gc_mark_gcroot:
   94|  20.7k|{
   95|  20.7k|  ptrdiff_t i;
   96|   809k|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 789k, False: 20.7k]
  ------------------
   97|   789k|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|   789k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 456k, False: 332k]
  ------------------
   98|   456k|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|   456k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   456k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   456k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   456k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   456k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 241k, False: 215k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|   241k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|  20.7k|}
lj_gc.c:propagatemark:
  325|  64.7k|{
  326|  64.7k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|  64.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  327|  64.7k|  int gct = o->gch.gct;
  328|  64.7k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|  64.7k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  64.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 64.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  64.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  329|  64.7k|  gray2black(o);
  ------------------
  |  |   39|  64.7k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  64.7k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  330|  64.7k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|  64.7k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  331|  64.7k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|  64.7k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 32.9k, False: 31.7k]
  |  |  ------------------
  ------------------
  332|  32.9k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  768|  32.9k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  32.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  32.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  32.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 32.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  32.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  333|  32.9k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (333:9): [True: 0, False: 32.9k]
  ------------------
  334|      0|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|      0|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  335|  32.9k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  336|  32.9k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (336:8): [True: 32.9k, False: 0]
  ------------------
  337|  32.9k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|  31.7k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 10.9k, False: 20.7k]
  |  |  ------------------
  ------------------
  338|  10.9k|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  766|  10.9k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  10.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  10.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  10.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  10.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  339|      0|    gc_traverse_func(g, fn);
  340|  10.9k|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  10.9k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  10.9k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 10.9k]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  341|  10.9k|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  10.9k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  342|  20.7k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  20.7k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 20.7k]
  |  |  ------------------
  ------------------
  343|      0|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  765|      0|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  344|      0|    gc_traverse_proto(g, pt);
  345|      0|    return pt->sizept;
  346|  20.7k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|  20.7k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 20.7k, False: 0]
  |  |  ------------------
  ------------------
  347|  20.7k|    lua_State *th = gco2th(o);
  ------------------
  |  |  764|  20.7k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|  20.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  20.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  20.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  348|  20.7k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  20.7k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  349|  20.7k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  20.7k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  350|  20.7k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|  20.7k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  20.7k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  351|  20.7k|    gc_traverse_thread(g, th);
  352|  20.7k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  353|  20.7k|  } else {
  354|      0|#if LJ_HASJIT
  355|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  356|      0|    gc_traverse_trace(g, T);
  357|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  358|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  359|       |#else
  360|       |    lj_assertG(0, "bad GC type %d", gct);
  361|       |    return 0;
  362|       |#endif
  363|      0|  }
  364|  64.7k|}
lj_gc.c:gc_traverse_tab:
  174|  32.9k|{
  175|  32.9k|  int weak = 0;
  176|  32.9k|  cTValue *mode;
  177|  32.9k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|  32.9k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  32.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|  32.9k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 0, False: 32.9k]
  ------------------
  179|      0|    gc_markobj(g, mt);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|  32.9k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|  32.9k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 32.9k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|  32.9k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 0, False: 32.9k]
  ------------------
  182|      0|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|      0|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|      0|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 0, False: 0]
  ------------------
  185|      0|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 0, False: 0]
  ------------------
  186|      0|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 0, False: 0]
  ------------------
  187|      0|    }
  188|      0|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 0, False: 0]
  ------------------
  189|      0|#if LJ_HASFFI
  190|      0|      CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  385|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  191|      0|      if (cts && cts->finalizer == t) {
  ------------------
  |  Branch (191:11): [True: 0, False: 0]
  |  Branch (191:18): [True: 0, False: 0]
  ------------------
  192|      0|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  193|      0|      } else
  194|      0|#endif
  195|      0|      {
  196|      0|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|      0|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  197|      0|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  198|      0|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  199|      0|      }
  200|      0|    }
  201|      0|  }
  202|  32.9k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|  32.9k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|  32.9k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|  32.9k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (202:7): [True: 0, False: 32.9k]
  ------------------
  203|      0|    return 1;
  204|  32.9k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|  32.9k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (204:7): [True: 32.9k, False: 0]
  ------------------
  205|  32.9k|    MSize i, asize = t->asize;
  206|  32.9k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (206:17): [True: 0, False: 32.9k]
  ------------------
  207|      0|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  208|  32.9k|  }
  209|  32.9k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (209:7): [True: 32.9k, False: 0]
  ------------------
  210|  32.9k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|  32.9k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  32.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  32.9k|    MSize i, hmask = t->hmask;
  212|   824k|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (212:17): [True: 791k, False: 32.9k]
  ------------------
  213|   791k|      Node *n = &node[i];
  214|   791k|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  779|   791k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (214:11): [True: 21.9k, False: 769k]
  ------------------
  215|  21.9k|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|  21.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  21.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 21.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  21.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  216|  21.9k|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|  21.9k|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|  21.9k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  21.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  32.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  21.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  21.9k|	       "TValue and GC type mismatch"); \
  |  |   48|  21.9k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  21.9k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  43.9k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|  21.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  21.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  21.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  21.9k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  21.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  21.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 10.9k, False: 10.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  21.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  10.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  10.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  10.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 10.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|  10.9k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  10.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  10.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  10.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.9k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  10.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 21.9k, False: 0]
  ------------------
  217|  21.9k|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|  21.9k|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|  21.9k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  21.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  43.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 21.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 21.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  21.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  21.9k|	       "TValue and GC type mismatch"); \
  |  |   48|  21.9k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  21.9k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  43.9k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|  21.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  21.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  21.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  21.9k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  21.9k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  21.9k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 21.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  43.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  21.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  21.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  21.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 21.9k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 21.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|  21.9k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  21.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  21.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  21.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 21.9k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  21.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (217:6): [True: 21.9k, False: 0]
  ------------------
  218|  21.9k|      }
  219|   791k|    }
  220|  32.9k|  }
  221|  32.9k|  return weak;
  222|  32.9k|}
lj_gc.c:gc_traverse_func:
  226|  10.9k|{
  227|  10.9k|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|  10.9k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  10.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  10.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  10.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  10.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 10.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  228|  10.9k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  10.9k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  10.9k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 10.9k]
  |  |  ------------------
  ------------------
  229|      0|    uint32_t i;
  230|      0|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  231|      0|	       "function upvalues out of range");
  232|      0|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  233|      0|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (233:17): [True: 0, False: 0]
  ------------------
  234|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  235|  10.9k|  } else {
  236|  10.9k|    uint32_t i;
  237|  10.9k|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (237:17): [True: 0, False: 10.9k]
  ------------------
  238|      0|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  239|  10.9k|  }
  240|  10.9k|}
lj_gc.c:gc_traverse_thread:
  310|  20.7k|{
  311|  20.7k|  TValue *o, *top = th->top;
  312|   166k|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|  20.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  20.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|  20.7k|#define LJ_FR2			1
  ------------------
  |  Branch (312:39): [True: 145k, False: 20.7k]
  ------------------
  313|   145k|    gc_marktv(g, o);
  ------------------
  |  |   46|   145k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   145k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   291k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 145k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 145k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   145k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   145k|	       "TValue and GC type mismatch"); \
  |  |   48|   145k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   145k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   291k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|   145k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   145k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   145k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   145k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   145k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   145k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 145k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   291k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   145k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   145k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   145k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 90.4k, False: 55.2k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 145k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|  90.4k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  90.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  90.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  90.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 90.4k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  90.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  314|  20.7k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (314:7): [True: 9.77k, False: 10.9k]
  ------------------
  315|  9.77k|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|  9.77k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  9.77k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  316|   419k|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (316:12): [True: 410k, False: 9.77k]
  ------------------
  317|   410k|      setnilV(o);
  ------------------
  |  |  869|   410k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  318|  9.77k|  }
  319|  20.7k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|  20.7k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  20.7k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  20.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  20.7k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  20.7k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 20.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  320|  20.7k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  321|  20.7k|}
lj_gc.c:gc_traverse_frames:
  293|  20.7k|{
  294|  20.7k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|  20.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  20.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  295|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  296|  20.7k|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|  20.7k|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (296:28): [True: 0, False: 20.7k]
  ------------------
  297|      0|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  830|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|      0|    TValue *ftop = frame;
  299|      0|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|      0|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (300:9): [True: 0, False: 0]
  ------------------
  301|      0|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (301:9): [Folded - Ignored]
  ------------------
  302|      0|  }
  303|  20.7k|  top++;  /* Correct bias of -1 (frame == base-1). */
  304|  20.7k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|  20.7k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  20.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (304:7): [True: 0, False: 20.7k]
  ------------------
  305|  20.7k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  306|  20.7k|}
lj_gc.c:gc_traverse_trace:
  257|  9.77k|{
  258|  9.77k|  IRRef ref;
  259|  9.77k|  if (T->traceno == 0) return;
  ------------------
  |  Branch (259:7): [True: 9.77k, False: 0]
  ------------------
  260|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (260:21): [True: 0, False: 0]
  ------------------
  261|      0|    IRIns *ir = &T->ir[ref];
  262|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (262:9): [True: 0, False: 0]
  ------------------
  263|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  264|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  408|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  396|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  397|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  398|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  399|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (408:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (264:28): [True: 0, False: 0]
  ------------------
  265|      0|      ref++;
  266|      0|  }
  267|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (269:7): [True: 0, False: 0]
  ------------------
  270|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  271|      0|}
lj_gc.c:atomic:
  624|  9.77k|{
  625|  9.77k|  size_t udsize;
  626|       |
  627|  9.77k|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  628|  9.77k|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  629|       |
  630|  9.77k|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|  9.77k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  631|  9.77k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  9.77k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  632|  9.77k|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|  9.77k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.77k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.77k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.77k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  633|  9.77k|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|  9.77k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  9.77k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  9.77k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  9.77k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  9.77k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 9.77k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  634|  9.77k|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  274|  9.77k|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|  9.77k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  9.77k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  9.77k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  635|  9.77k|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  636|  9.77k|  gc_propagate_gray(g);  /* Propagate all of the above. */
  637|       |
  638|  9.77k|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|  9.77k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  639|  9.77k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  9.77k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  640|  9.77k|  gc_propagate_gray(g);  /* Propagate it. */
  641|       |
  642|  9.77k|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  643|  9.77k|  gc_mark_mmudata(g);  /* Mark them. */
  644|  9.77k|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  645|       |
  646|       |  /* All marking done, clear weak tables. */
  647|  9.77k|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|  9.77k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  648|       |
  649|  9.77k|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  650|       |
  651|       |  /* Prepare for sweep phase. */
  652|  9.77k|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|  9.77k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  9.77k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  9.77k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  9.77k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  653|  9.77k|  g->strempty.marked = g->gc.currentwhite;
  654|  9.77k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  9.77k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  655|  9.77k|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  656|  9.77k|}
lj_gc.c:gc_mark_uv:
  116|  9.77k|{
  117|  9.77k|  GCupval *uv;
  118|  9.77k|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|  9.77k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|  9.77k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 9.77k]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|  9.77k|}
lj_gc.c:gc_propagate_gray:
  368|  39.0k|{
  369|  39.0k|  size_t m = 0;
  370|  48.8k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  48.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (370:10): [True: 9.77k, False: 39.0k]
  ------------------
  371|  9.77k|    m += propagatemark(g);
  372|  39.0k|  return m;
  373|  39.0k|}
lj_gc.c:gc_mark_mmudata:
  128|  9.77k|{
  129|  9.77k|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  9.77k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|  9.77k|  GCobj *u = root;
  131|  9.77k|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 9.77k]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|  9.77k|}
lj_gc.c:gc_clearweak:
  474|  9.77k|{
  475|  9.77k|  UNUSED(g);
  ------------------
  |  |   91|  9.77k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  476|  9.77k|  while (o) {
  ------------------
  |  Branch (476:10): [True: 0, False: 9.77k]
  ------------------
  477|      0|    GCtab *t = gco2tab(o);
  ------------------
  |  |  768|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  478|      0|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  479|      0|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (479:9): [True: 0, False: 0]
  ------------------
  480|      0|      MSize i, asize = t->asize;
  481|      0|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (481:19): [True: 0, False: 0]
  ------------------
  482|       |	/* Clear array slot when value is about to be collected. */
  483|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  484|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (484:6): [True: 0, False: 0]
  ------------------
  485|      0|	  setnilV(tv);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  486|      0|      }
  487|      0|    }
  488|      0|    if (t->hmask > 0) {
  ------------------
  |  Branch (488:9): [True: 0, False: 0]
  ------------------
  489|      0|      Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  490|      0|      MSize i, hmask = t->hmask;
  491|      0|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (491:19): [True: 0, False: 0]
  ------------------
  492|      0|	Node *n = &node[i];
  493|       |	/* Clear hash slot when key or value is about to be collected. */
  494|      0|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (494:6): [True: 0, False: 0]
  |  Branch (494:28): [True: 0, False: 0]
  ------------------
  495|      0|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (495:7): [True: 0, False: 0]
  ------------------
  496|      0|	  setnilV(&n->val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  497|      0|      }
  498|      0|    }
  499|      0|    o = gcref(t->gclist);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  500|      0|  }
  501|  9.77k|}
lj_gc.c:gc_mark:
   59|   398k|{
   60|   398k|  int gct = o->gch.gct;
   61|   398k|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|   398k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   398k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 398k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   398k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|   398k|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|   398k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   398k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 398k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   398k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   398k|  white2gray(o);
  ------------------
  |  |   38|   398k|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   398k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   398k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   398k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|   398k|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|   398k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
   65|      0|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|      0|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|      0|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (772:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|      0|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  769|      0|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 0]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|   398k|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|   398k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 398k]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  763|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (806:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  855|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|   398k|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|   796k|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|  54.9k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 54.9k, False: 343k]
  |  Branch (83:33): [True: 54.9k, False: 0]
  ------------------
   84|  54.9k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|  54.9k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   274k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 10.9k, False: 43.9k]
  |  |  |  |  |  Branch (355:5): [True: 32.9k, False: 10.9k]
  |  |  |  |  |  Branch (355:5): [True: 10.9k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  54.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|      0|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|      0|	       "bad GC type %d", gct);
   87|  54.9k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|  54.9k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|  54.9k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|  54.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|  54.9k|  }
   90|   398k|}

lj_state.c:lj_mem_free:
  120|  5.57k|{
  121|  5.57k|  g->gc.total -= (GCSize)osize;
  122|  5.57k|  g->allocf(g->allocd, p, osize, 0);
  123|  5.57k|}
lj_trace.c:lj_mem_free:
  120|  7.43k|{
  121|  7.43k|  g->gc.total -= (GCSize)osize;
  122|  7.43k|  g->allocf(g->allocd, p, osize, 0);
  123|  7.43k|}
lj_str.c:lj_mem_free:
  120|   336k|{
  121|   336k|  g->gc.total -= (GCSize)osize;
  122|   336k|  g->allocf(g->allocd, p, osize, 0);
  123|   336k|}
lj_tab.c:lj_mem_free:
  120|  11.1k|{
  121|  11.1k|  g->gc.total -= (GCSize)osize;
  122|  11.1k|  g->allocf(g->allocd, p, osize, 0);
  123|  11.1k|}
lj_func.c:lj_mem_free:
  120|  1.85k|{
  121|  1.85k|  g->gc.total -= (GCSize)osize;
  122|  1.85k|  g->allocf(g->allocd, p, osize, 0);
  123|  1.85k|}

lj_lex_init:
  506|  1.85k|{
  507|  1.85k|  uint32_t i;
  508|  42.7k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (508:15): [True: 40.8k, False: 1.85k]
  ------------------
  509|  40.8k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|  40.8k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  510|  40.8k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|  40.8k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  40.8k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  511|  40.8k|    s->reserved = (uint8_t)(i+1);
  512|  40.8k|  }
  513|  1.85k|}

lj_mcode_free:
  287|  1.85k|{
  288|  1.85k|  MCode *mc = J->mcarea;
  289|  1.85k|  J->mcarea = NULL;
  290|  1.85k|  J->szallmcarea = 0;
  291|  1.85k|  while (mc) {
  ------------------
  |  Branch (291:10): [True: 0, False: 1.85k]
  ------------------
  292|      0|    MCode *next = ((MCLink *)mc)->next;
  293|      0|    size_t sz = ((MCLink *)mc)->size;
  294|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  295|      0|    mcode_free(J, mc, sz);
  296|      0|    mc = next;
  297|      0|  }
  298|  1.85k|}

lj_meta_init:
   30|  1.85k|{
   31|  1.85k|#define MMNAME(name)	"__" #name
   32|  1.85k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  1.85k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  1.85k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  1.85k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  1.85k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  1.85k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  1.85k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  1.85k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  1.85k|  /* The following are used in the standard libraries. */ \
  |  |  563|  1.85k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  1.85k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.85k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  1.85k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  1.85k|#undef MMNAME
   34|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  1.85k|  const char *p, *q;
   36|  1.85k|  uint32_t mm;
   37|  42.7k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 40.8k, False: 1.85k]
  ------------------
   38|  40.8k|    GCstr *s;
   39|   208k|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 206k, False: 1.85k]
  |  Branch (39:25): [True: 167k, False: 39.0k]
  ------------------
   40|  40.8k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|  40.8k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|  40.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|  40.8k|  }
   44|  1.85k|}
lj_meta_tset:
  162|  1.85k|{
  163|  1.85k|  TValue tmp;
  164|  1.85k|  int loop;
  165|  1.85k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|  1.85k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 1.85k, False: 0]
  ------------------
  166|  1.85k|    cTValue *mo;
  167|  1.85k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|  1.85k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
  168|  1.85k|      GCtab *t = tabV(o);
  ------------------
  |  |  861|  1.85k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|  1.85k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|  1.85k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  171|      0|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|      0|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|	return (TValue *)tv;
  174|  1.85k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|  1.85k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|  1.85k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 1.85k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  587|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 1.85k, False: 0]
  ------------------
  175|  1.85k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|  1.85k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  1.85k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  1.85k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 1.85k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|  1.85k|	if (tv != niltv(L))
  ------------------
  |  |  664|  1.85k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 1.85k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|  1.85k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  779|  1.85k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  180|  1.85k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  800|  1.85k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  3.71k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  942|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (942:35): [Folded - Ignored]
  |  |  |  Branch (942:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|  1.85k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  801|  3.71k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.85k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.85k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.85k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  809|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|  1.85k|	return lj_tab_newkey(L, t, k);
  183|  1.85k|      }
  184|  1.85k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  793|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (793:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|  1.85k|}
lj_meta_cat:
  239|  91.8k|{
  240|  91.8k|  int fromc = 0;
  241|  91.8k|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 91.8k, False: 0]
  ------------------
  242|  91.8k|  do {
  243|  91.8k|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  792|   183k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  91.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  91.8k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 91.8k, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  799|  91.8k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|  91.8k|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  792|   183k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  91.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  91.8k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 91.8k, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  799|  91.8k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|      0|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|      0|      if (tvisnil(mo)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  247|      0|	mo = lj_meta_lookup(L, top, MM_concat);
  248|      0|	if (tvisnil(mo)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (779:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  249|      0|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  792|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  250|      0|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|      0|	}
  253|      0|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|      0|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  266|      0|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  267|      0|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  268|      0|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  892|      0|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  891|      0|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|      0|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|      0|      return top+1;  /* Trigger metamethod call. */
  271|  91.8k|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|  91.8k|      TValue *e, *o = top;
  280|  91.8k|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  792|  91.8k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  91.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  91.8k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 91.8k, False: 0]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  856|  91.8k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  91.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  91.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  91.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 91.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  91.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|  91.8k|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|  91.8k|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|      0|      SBuf *sb;
  283|   489k|      do {
  284|   489k|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  792|   489k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|   489k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   489k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 489k, False: 0]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  856|   489k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   489k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   489k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   489k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 489k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   489k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|   489k|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|   489k|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|   489k|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  792|   795k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|   397k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   397k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 397k, False: 0]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  799|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (799:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 397k, False: 91.8k]
  ------------------
  287|  91.8k|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|  91.8k|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  91.8k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 91.8k]
  ------------------
  288|  91.8k|      sb = lj_buf_tmp_(L);
  289|  91.8k|      lj_buf_more(sb, (MSize)tlen);
  290|   673k|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 581k, False: 91.8k]
  ------------------
  291|   581k|	if (tvisstr(o)) {
  ------------------
  |  |  792|   581k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|   581k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   581k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 581k, False: 0]
  |  |  ------------------
  ------------------
  292|   581k|	  GCstr *s = strV(o);
  ------------------
  |  |  856|   581k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   581k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   581k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   581k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 581k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   581k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|   581k|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|   581k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|   581k|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  798|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  862|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|      0|	} else if (tvisint(o)) {
  ------------------
  |  |  800|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  864|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|      0|	} else {
  301|      0|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  863|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|      0|	}
  303|   581k|      }
  304|  91.8k|      setstrV(L, top, lj_buf_str(L, sb));
  305|  91.8k|    }
  306|  91.8k|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 0, False: 91.8k]
  ------------------
  307|  91.8k|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|  91.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 10.1k, False: 81.7k]
  |  |  ------------------
  ------------------
  308|  10.1k|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  715|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  714|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 0, False: 10.1k]
  ------------------
  309|      0|    lj_gc_step(L);
  310|  10.1k|  }
  311|      0|  return NULL;
  312|  91.8k|}

lj_state.c:settabV:
  930|  1.85k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.85k|{ \
  932|  1.85k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.85k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.85k|}
lj_state.c:setgcV:
  924|  3.71k|{
  925|  3.71k|  setgcVraw(o, v, it);
  926|  3.71k|  checklivetv(L, o, "store to dead GC object");
  927|  3.71k|}
lj_state.c:setgcVraw:
  915|  3.71k|{
  916|  3.71k|#if LJ_GC64
  917|  3.71k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.71k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|  3.71k|}
lj_state.c:checklivetv:
  901|  3.71k|{
  902|  3.71k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.71k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.71k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.71k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|  3.71k|#if LUA_USE_ASSERT
  904|  3.71k|  if (tvisgcv(o)) {
  ------------------
  |  |  806|  3.71k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|  3.71k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.71k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.71k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.71k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.71k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.71k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 3.71k, False: 0]
  |  |  ------------------
  ------------------
  905|  3.71k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.71k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.71k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|  3.71k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.71k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.71k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|  3.71k|  }
  911|  3.71k|#endif
  912|  3.71k|}
lj_state.c:setthreadV:
  930|  1.85k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.85k|{ \
  932|  1.85k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.85k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.85k|}
lj_api.c:copyTV:
  972|  11.1k|{
  973|  11.1k|  *o1 = *o2;
  974|  11.1k|  checklivetv(L, o1, "copy of dead GC object");
  975|  11.1k|}
lj_api.c:checklivetv:
  901|   510k|{
  902|   510k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   510k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   510k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   510k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|   510k|#if LUA_USE_ASSERT
  904|   510k|  if (tvisgcv(o)) {
  ------------------
  |  |  806|   510k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|   510k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   510k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   510k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   510k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   510k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   510k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 508k, False: 1.85k]
  |  |  ------------------
  ------------------
  905|   508k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   508k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   508k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 508k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   508k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|   508k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   508k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   508k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 508k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   508k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|   508k|  }
  911|   510k|#endif
  912|   510k|}
lj_api.c:setstrV:
  930|   495k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|   495k|{ \
  932|   495k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|   495k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|   495k|}
lj_api.c:setgcV:
  924|   498k|{
  925|   498k|  setgcVraw(o, v, it);
  926|   498k|  checklivetv(L, o, "store to dead GC object");
  927|   498k|}
lj_api.c:setfuncV:
  930|  1.85k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.85k|{ \
  932|  1.85k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.85k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.85k|}
lj_api.c:settabV:
  930|  1.85k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  1.85k|{ \
  932|  1.85k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  1.85k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  1.85k|}
lj_api.c:setgcVraw:
  915|   498k|{
  916|   498k|#if LJ_GC64
  917|   498k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   498k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|   498k|}
lj_meta.c:checklivetv:
  901|  91.8k|{
  902|  91.8k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  91.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  91.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  91.8k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  903|  91.8k|#if LUA_USE_ASSERT
  904|  91.8k|  if (tvisgcv(o)) {
  ------------------
  |  |  806|  91.8k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  778|  91.8k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  91.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  91.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  91.8k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  91.8k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  91.8k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:20): [True: 91.8k, False: 0]
  |  |  ------------------
  ------------------
  905|  91.8k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  91.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  91.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 91.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  91.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  906|      0|	       "mismatch of TValue type %d vs GC type %d",
  907|      0|	       ~itype(o), gcval(o)->gch.gct);
  908|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  909|  91.8k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  91.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  91.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 91.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  91.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  910|  91.8k|  }
  911|  91.8k|#endif
  912|  91.8k|}
lj_meta.c:setgcVraw:
  915|  91.8k|{
  916|  91.8k|#if LJ_GC64
  917|  91.8k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  91.8k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  918|       |#else
  919|       |  setgcref(o->gcr, v); setitype(o, itype);
  920|       |#endif
  921|  91.8k|}
lj_meta.c:setstrV:
  930|  91.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  931|  91.8k|{ \
  932|  91.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  772|  91.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  933|  91.8k|}
lj_meta.c:setgcV:
  924|  91.8k|{
  925|  91.8k|  setgcVraw(o, v, it);
  926|  91.8k|  checklivetv(L, o, "store to dead GC object");
  927|  91.8k|}

lj_prng_u64:
   48|  7.64k|{
   49|  7.64k|  uint64_t z, r = 0;
   50|  7.64k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|  7.64k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|  7.64k|  z = rs->u[i]; \
  |  |  |  |   37|  7.64k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  7.64k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|  7.64k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|  7.64k|  z = rs->u[i]; \
  |  |  |  |   37|  7.64k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  7.64k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|  7.64k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|  7.64k|  z = rs->u[i]; \
  |  |  |  |   37|  7.64k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  7.64k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|  7.64k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|  7.64k|  z = rs->u[i]; \
  |  |  |  |   37|  7.64k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  7.64k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|  7.64k|  return r;
   52|  7.64k|}
lj_prng_seed_secure:
  167|  1.85k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  1.85k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  1.85k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 1.85k, False: 0]
  ------------------
  211|  1.85k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  1.85k|ok:
  253|  1.85k|  lj_prng_condition(rs);
  254|  1.85k|  (void)lj_prng_u64(rs);
  255|  1.85k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  1.85k|{
   66|  1.85k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 1.85k]
  ------------------
   67|  1.85k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 1.85k]
  ------------------
   68|  1.85k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 1.85k]
  ------------------
   69|  1.85k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 1.85k]
  ------------------
   70|  1.85k|}

luaJIT_profile_stop:
  341|  1.85k|{
  342|  1.85k|  ProfileState *ps = &profile_state;
  343|  1.85k|  global_State *g = ps->g;
  344|  1.85k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 1.85k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  674|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  1.85k|}

lj_state_shrinkstack:
   92|  20.7k|{
   93|  20.7k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|  20.7k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  20.7k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  20.7k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  20.7k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  20.7k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 20.7k]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|  20.7k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 11.7k, False: 9.04k]
  ------------------
   96|  20.7k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|  11.7k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  11.7k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  11.7k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|  11.7k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  11.7k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 0, False: 11.7k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|  20.7k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  772|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 0, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|      0|    resizestack(L, L->stacksize >> 1);
  100|  20.7k|}
lua_newstate:
  219|  1.85k|{
  220|  1.85k|  PRNGState prng;
  221|  1.85k|  GG_State *GG;
  222|  1.85k|  lua_State *L;
  223|  1.85k|  global_State *g;
  224|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  225|  1.85k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (225:7): [True: 0, False: 1.85k]
  ------------------
  226|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  227|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  228|      0|    return NULL;
  229|      0|  }
  230|  1.85k|#ifndef LUAJIT_USE_SYSMALLOC
  231|  1.85k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  1.85k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (231:7): [True: 1.85k, False: 0]
  ------------------
  232|  1.85k|    allocd = lj_alloc_create(&prng);
  233|  1.85k|    if (!allocd) return NULL;
  ------------------
  |  Branch (233:9): [True: 0, False: 1.85k]
  ------------------
  234|  1.85k|    allocf = lj_alloc_f;
  235|  1.85k|  }
  236|  1.85k|#endif
  237|  1.85k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  238|  1.85k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  1.85k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  1.85k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  1.85k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (238:7): [True: 0, False: 1.85k]
  |  Branch (238:21): [True: 0, False: 1.85k]
  ------------------
  239|  1.85k|  memset(GG, 0, sizeof(GG_State));
  240|  1.85k|  L = &GG->L;
  241|  1.85k|  g = &GG->g;
  242|  1.85k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  1.85k|#define LJ_TTHREAD		(~6u)
  ------------------
  243|  1.85k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  1.85k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  1.85k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  1.85k|#define LJ_GC_SFIXED	0x40
  ------------------
  244|  1.85k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  1.85k|#define FF_C		1
  ------------------
  245|  1.85k|  setmref(L->glref, g);
  ------------------
  |  |   39|  1.85k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  246|  1.85k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  1.85k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  1.85k|#define LJ_GC_FIXED	0x20
  ------------------
  247|  1.85k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  1.85k|#define LJ_GC_WHITE0	0x01
  ------------------
  248|  1.85k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  1.85k|#define LJ_TSTR			(~4u)
  ------------------
  249|  1.85k|  g->allocf = allocf;
  250|  1.85k|  g->allocd = allocd;
  251|  1.85k|  g->prng = prng;
  252|  1.85k|#ifndef LUAJIT_USE_SYSMALLOC
  253|  1.85k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (253:7): [True: 1.85k, False: 0]
  ------------------
  254|  1.85k|    lj_alloc_setprng(allocd, &g->prng);
  255|  1.85k|  }
  256|  1.85k|#endif
  257|  1.85k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  1.85k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  258|  1.85k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  1.85k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  259|  1.85k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  1.85k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  260|  1.85k|  g->str.mask = ~(MSize)0;
  261|  1.85k|  setnilV(registry(L));
  ------------------
  |  |  869|  1.85k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  262|  1.85k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  869|  1.85k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  263|  1.85k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  869|  1.85k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  264|       |#if !LJ_GC64
  265|       |  setmref(g->nilnode.freetop, &g->nilnode);
  266|       |#endif
  267|  1.85k|  lj_buf_init(NULL, &g->tmpbuf);
  268|  1.85k|  g->gc.state = GCSpause;
  269|  1.85k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  1.85k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  270|  1.85k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  1.85k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  1.85k|  g->gc.total = sizeof(GG_State);
  272|  1.85k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   91|  1.85k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  273|  1.85k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   92|  1.85k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  274|  1.85k|  lj_dispatch_init((GG_State *)L);
  275|  1.85k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  1.85k|#define LUA_ERRERR	5
  ------------------
  276|  1.85k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (276:7): [True: 0, False: 1.85k]
  ------------------
  277|       |    /* Memory allocation error: free partial state. */
  278|      0|    close_state(L);
  279|      0|    return NULL;
  280|      0|  }
  281|  1.85k|  L->status = LUA_OK;
  ------------------
  |  |   43|  1.85k|#define LUA_OK		0
  ------------------
  282|  1.85k|  return L;
  283|  1.85k|}
lua_close:
  296|  1.85k|{
  297|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  298|  1.85k|  int i;
  299|  1.85k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  662|  1.85k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  1.85k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  300|  1.85k|#if LJ_HASPROFILE
  301|  1.85k|  luaJIT_profile_stop(L);
  302|  1.85k|#endif
  303|  1.85k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  1.85k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  304|  1.85k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  1.85k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  305|  1.85k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  306|  1.85k|#if LJ_HASJIT
  307|  1.85k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  1.85k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.85k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.85k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  1.85k|#define JIT_F_ON		0x00000001
  ------------------
  308|  1.85k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  1.85k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.85k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.85k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|  1.85k|  lj_dispatch_update(g);
  310|  1.85k|#endif
  311|  1.85k|  for (i = 0;;) {
  312|  1.85k|    hook_enter(g);
  ------------------
  |  |  676|  1.85k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  670|  1.85k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  313|  1.85k|    L->status = LUA_OK;
  ------------------
  |  |   43|  1.85k|#define LUA_OK		0
  ------------------
  314|  1.85k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  1.85k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  1.85k|#define LJ_FR2			1
  ------------------
  315|  1.85k|    L->cframe = NULL;
  316|  1.85k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  1.85k|#define LUA_OK		0
  ------------------
  |  Branch (316:9): [True: 1.85k, False: 0]
  ------------------
  317|  1.85k|      if (++i >= 10) break;
  ------------------
  |  Branch (317:11): [True: 0, False: 1.85k]
  ------------------
  318|  1.85k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  319|  1.85k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  1.85k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (319:11): [True: 1.85k, False: 0]
  ------------------
  320|  1.85k|	break;
  321|  1.85k|    }
  322|  1.85k|  }
  323|  1.85k|  close_state(L);
  324|  1.85k|}
lj_state.c:cpluaopen:
  164|  1.85k|{
  165|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  166|  1.85k|  UNUSED(dummy);
  ------------------
  |  |   91|  1.85k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  167|  1.85k|  UNUSED(ud);
  ------------------
  |  |   91|  1.85k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  168|  1.85k|  stack_init(L, L);
  169|       |  /* NOBARRIER: State initialization, all objects are white. */
  170|  1.85k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  1.85k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  171|  1.85k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  703|  1.85k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  1.85k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  172|  1.85k|  lj_str_init(L);
  173|  1.85k|  lj_meta_init(L);
  174|  1.85k|  lj_lex_init(L);
  175|  1.85k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  1.85k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  1.85k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  176|  1.85k|  g->gc.threshold = 4*g->gc.total;
  177|  1.85k|  lj_trace_initstate(g);
  178|  1.85k|  lj_err_verify();
  179|  1.85k|  return NULL;
  180|  1.85k|}
lj_state.c:close_state:
  183|  1.85k|{
  184|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  185|  1.85k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  1.85k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  186|  1.85k|  lj_gc_freeall(g);
  187|  1.85k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  1.85k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  188|      0|	     "main thread is not first GC object");
  189|  1.85k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  1.85k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  190|      0|  lj_trace_freestate(g);
  191|  1.85k|#if LJ_HASFFI
  192|  1.85k|  lj_ctype_freestate(g);
  193|  1.85k|#endif
  194|  1.85k|  lj_str_freetab(g);
  ------------------
  |  |   25|  1.85k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  195|  1.85k|  lj_buf_free(g, &g->tmpbuf);
  196|  1.85k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  197|  1.85k|#if LJ_64
  198|  1.85k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  199|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (199:20): [True: 0, False: 0]
  ------------------
  200|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  201|      0|  }
  202|  1.85k|#endif
  203|  1.85k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  1.85k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.85k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.85k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  204|      0|	     "memory leak of %lld bytes",
  205|      0|	     (long long)(g->gc.total - sizeof(GG_State)));
  206|      0|#ifndef LUAJIT_USE_SYSMALLOC
  207|  1.85k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (207:7): [True: 1.85k, False: 0]
  ------------------
  208|  1.85k|    lj_alloc_destroy(g->allocd);
  209|      0|  else
  210|      0|#endif
  211|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  212|  1.85k|}
lj_state.c:cpfinalize:
  286|  1.85k|{
  287|  1.85k|  UNUSED(dummy);
  ------------------
  |  |   91|  1.85k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  288|  1.85k|  UNUSED(ud);
  ------------------
  |  |   91|  1.85k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  289|  1.85k|  lj_gc_finalize_cdata(L);
  290|  1.85k|  lj_gc_finalize_udata(L);
  291|       |  /* Frame pop omitted. */
  292|  1.85k|  return NULL;
  293|  1.85k|}
lj_state.c:stack_init:
  147|  1.85k|{
  148|  1.85k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  1.85k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  1.85k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  1.85k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  1.85k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  150|  1.85k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  1.85k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  1.85k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  1.85k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  1.85k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  151|  1.85k|  stend = st + L1->stacksize;
  152|  1.85k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  1.85k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  153|  1.85k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  154|  1.85k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  1.85k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  869|  1.85k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  155|  1.85k|  L1->base = L1->top = st;
  156|  87.3k|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (156:10): [True: 85.4k, False: 1.85k]
  ------------------
  157|  85.4k|    setnilV(st++);
  ------------------
  |  |  869|  85.4k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  158|  1.85k|}

lj_str_resize:
  139|  1.85k|{
  140|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  1.85k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  1.85k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  1.85k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  1.85k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 0, False: 1.85k]
  |  Branch (145:40): [True: 0, False: 1.85k]
  ------------------
  146|      0|    return;
  147|       |
  148|  1.85k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  1.85k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  1.85k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  1.85k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  1.85k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  1.85k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 1.85k]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  762|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|  1.85k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|  1.85k|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 0, False: 1.85k]
  ------------------
  179|      0|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|      0|    while (o) {
  ------------------
  |  Branch (180:12): [True: 0, False: 0]
  ------------------
  181|      0|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|      0|      GCstr *s = gco2str(o);
  ------------------
  |  |  762|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|      0|#if LUAJIT_SECURITY_STRHASH
  185|      0|      uintptr_t u;
  186|      0|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|      0|	hash &= newmask;
  188|      0|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|      0|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|      0|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|      0|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|      0|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|      0|      o = next;
  217|      0|    }
  218|      0|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  1.85k|  lj_str_freetab(g);
  ------------------
  |  |   25|  1.85k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  1.85k|  g->str.tab = newtab;
  223|  1.85k|  g->str.mask = newmask;
  224|  1.85k|}
lj_str_new:
  324|   670k|{
  325|   670k|  global_State *g = G(L);
  ------------------
  |  |  702|   670k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   670k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|   670k|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|   670k|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|   670k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 670k, False: 0]
  ------------------
  327|   670k|    MSize len = (MSize)lenx;
  328|   670k|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|   670k|    MSize coll = 0;
  330|   670k|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|   670k|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|   670k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|   670k|#if LUAJIT_SECURITY_STRHASH
  334|   670k|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|   670k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 915, False: 669k]
  |  |  ------------------
  ------------------
  335|    915|      hashalg = 1;
  336|    915|      hash = hash_dense(g->str.seed, hash, str, len);
  337|    915|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|    915|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|    915|    }
  339|   670k|#endif
  340|   926k|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 591k, False: 334k]
  ------------------
  341|   591k|      GCstr *sx = gco2str(o);
  ------------------
  |  |  762|   591k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   591k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   591k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   591k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 591k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   591k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|   591k|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 462k, False: 128k]
  |  Branch (342:31): [True: 462k, False: 178]
  ------------------
  343|   462k|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|   462k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 335k, False: 126k]
  ------------------
  344|   335k|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|   335k|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|   335k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   335k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   335k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   335k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   335k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   335k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   335k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 263, False: 335k]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|    263|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    263|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    263|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    263|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|   335k|	  return sx;  /* Return existing string. */
  346|   335k|	}
  347|   126k|	coll++;
  348|   126k|      }
  349|   255k|      coll++;
  350|   255k|      o = gcnext(o);
  ------------------
  |  |   90|   255k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   255k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|   255k|    }
  352|   334k|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|   334k|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|   669k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 135, False: 334k]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 135, False: 0]
  ------------------
  355|    135|      return lj_str_rehash_chain(L, hash, str, len);
  356|    135|    }
  357|   334k|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|   334k|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|   334k|  } else {
  361|      0|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|      0|    return &g->strempty;
  364|      0|  }
  365|   670k|}
lj_str_free:
  368|   334k|{
  369|   334k|  g->str.num--;
  370|   334k|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|   334k|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|   334k|}
lj_str_init:
  374|  1.85k|{
  375|  1.85k|  global_State *g = G(L);
  ------------------
  |  |  702|  1.85k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  1.85k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  1.85k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  1.85k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  1.85k|}
lj_str.c:hash_sparse:
   86|   670k|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|   670k|  StrHash a, b, h = len ^ (StrHash)seed;
   89|   670k|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 651k, False: 19.3k]
  ------------------
   90|   651k|    a = lj_getu32(str);
   91|   651k|    h ^= lj_getu32(str+len-4);
   92|   651k|    b = lj_getu32(str+(len>>1)-2);
   93|   651k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   651k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|   651k|    b += lj_getu32(str+(len>>2)-1);
   95|   651k|  } else {
   96|  19.3k|    a = *(const uint8_t *)str;
   97|  19.3k|    h ^= *(const uint8_t *)(str+len-1);
   98|  19.3k|    b = *(const uint8_t *)(str+(len>>1));
   99|  19.3k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  19.3k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|  19.3k|  }
  101|   670k|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|   670k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|   670k|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|   670k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|   670k|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|   670k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|   670k|  return h;
  105|   670k|}
lj_str.c:hash_dense:
  111|  3.14k|{
  112|  3.14k|  StrHash b = lj_bswap(lj_rol(h ^ (StrHash)(seed >> 32), 4));
  ------------------
  |  |  113|  3.14k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  113|  3.14k|  if (len > 12) {
  ------------------
  |  Branch (113:7): [True: 3.11k, False: 33]
  ------------------
  114|  3.11k|    StrHash a = (StrHash)seed;
  115|  3.11k|    const char *pe = str+len-12, *p = pe, *q = str;
  116|  2.28M|    do {
  117|  2.28M|      a += lj_getu32(p);
  118|  2.28M|      b += lj_getu32(p+4);
  119|  2.28M|      h += lj_getu32(p+8);
  120|  2.28M|      p = q; q += 12;
  121|  2.28M|      h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  2.28M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  122|  2.28M|      a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  2.28M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  123|  2.28M|      b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  2.28M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  124|  2.28M|    } while (p < pe);
  ------------------
  |  Branch (124:14): [True: 2.28M, False: 3.11k]
  ------------------
  125|  3.11k|    h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  3.11k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  126|  3.11k|    a ^= h; a -= lj_rol(h, 4);
  ------------------
  |  |  113|  3.11k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  127|  3.11k|    b ^= a; b -= lj_rol(a, 14);
  ------------------
  |  |  113|  3.11k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  128|  3.11k|  }
  129|  3.14k|  return b;
  130|  3.14k|}
lj_str.c:lj_str_rehash_chain:
  230|    135|{
  231|    135|  global_State *g = G(L);
  ------------------
  |  |  702|    135|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    135|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  232|    135|  int ow = g->gc.state == GCSsweepstring ? otherwhite(g) : 0;  /* Sweeping? */
  ------------------
  |  |   36|      5|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      5|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      5|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      5|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (232:12): [True: 5, False: 130]
  ------------------
  233|    135|  GCRef *strtab = g->str.tab;
  234|    135|  MSize strmask = g->str.mask;
  235|    135|  GCobj *o = gcref(strtab[hashc & strmask]);
  ------------------
  |  |   67|    135|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  236|    135|  setgcrefp(strtab[hashc & strmask], (void *)((uintptr_t)1));
  ------------------
  |  |   75|    135|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  237|    135|  g->str.second = 1;
  238|  2.44k|  while (o) {
  ------------------
  |  Branch (238:10): [True: 2.31k, False: 135]
  ------------------
  239|  2.31k|    uintptr_t u;
  240|  2.31k|    GCobj *next = gcnext(o);
  ------------------
  |  |   90|  2.31k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  2.31k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  241|  2.31k|    GCstr *s = gco2str(o);
  ------------------
  |  |  762|  2.31k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  2.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|      0|    StrHash hash;
  243|  2.31k|    if (ow) {  /* Must sweep while rechaining. */
  ------------------
  |  Branch (243:9): [True: 85, False: 2.22k]
  ------------------
  244|     85|      if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* String alive? */
  ------------------
  |  |   27|     85|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|     85|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|     85|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (244:11): [True: 5, False: 80]
  ------------------
  245|      5|	lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|      5|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      5|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 5, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      5|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  246|      0|		   "sweep of undead string");
  247|      5|	makewhite(g, o);
  ------------------
  |  |   42|      5|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      5|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      5|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      5|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      5|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      5|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      5|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      5|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      5|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      5|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|     80|      } else {  /* Free dead string. */
  249|     80|	lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|     80|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     80|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 80, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     80|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  250|      0|		   "sweep of unlive string");
  251|      0|	lj_str_free(g, s);
  252|     80|	o = next;
  253|     80|	continue;
  254|     80|      }
  255|     85|    }
  256|  2.23k|    hash = s->hash;
  257|  2.23k|    if (!s->hashalg) {  /* Rehash with secondary hash. */
  ------------------
  |  Branch (257:9): [True: 2.22k, False: 1]
  ------------------
  258|  2.22k|      hash = hash_dense(g->str.seed, hash, strdata(s), s->len);
  ------------------
  |  |  316|  2.22k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  259|  2.22k|      s->hash = hash;
  260|  2.22k|      s->hashalg = 1;
  261|  2.22k|    }
  262|       |    /* Rechain. */
  263|  2.23k|    hash &= strmask;
  264|  2.23k|    u = gcrefu(strtab[hash]);
  ------------------
  |  |   69|  2.23k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  265|  2.23k|    setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  2.23k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  266|  2.23k|    setgcrefp(strtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|  2.23k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  267|  2.23k|    o = next;
  268|  2.23k|  }
  269|       |  /* Try to insert the pending string again. */
  270|    135|  return lj_str_new(L, str, len);
  271|    135|}
lj_str.c:lj_str_alloc:
  286|   334k|{
  287|   334k|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|   334k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|   334k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|   334k|  global_State *g = G(L);
  ------------------
  |  |  702|   334k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   334k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|   334k|  uintptr_t u;
  290|   334k|  newwhite(g, s);
  ------------------
  |  |   40|   334k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  772|   334k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   334k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   334k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   334k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   334k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|   334k|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|   334k|#define LJ_TSTR			(~4u)
  ------------------
  292|   334k|  s->len = len;
  293|   334k|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|   334k|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 3.93k, False: 330k]
  ------------------
  298|  3.93k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  3.93k|    g->str.id = (StrID)r;
  300|  3.93k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  3.93k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  3.93k|  }
  302|   334k|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|   334k|  s->reserved = 0;
  307|   334k|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|   334k|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|   334k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|   334k|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|   334k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|   334k|  hash &= g->str.mask;
  313|   334k|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|   334k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|   334k|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   334k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|   334k|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|   334k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|   334k|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 0, False: 334k]
  ------------------
  318|      0|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|   334k|  return s;  /* Return newly interned string. */
  320|   334k|}

lj_tab_new:
  140|  5.57k|{
  141|  5.57k|  GCtab *t = newtab(L, asize, hbits);
  142|  5.57k|  clearapart(t);
  143|  5.57k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 5.57k, False: 0]
  ------------------
  144|  5.57k|  return t;
  145|  5.57k|}
lj_tab_new_ah:
  149|  1.85k|{
  150|  1.85k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|  1.85k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  1.85k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 1.85k, False: 0]
  |  |  |  Branch (53:32): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 0, False: 1.85k]
  ------------------
  151|  1.85k|}
lj_tab_free:
  216|  5.57k|{
  217|  5.57k|  if (t->hmask > 0)
  ------------------
  |  Branch (217:7): [True: 5.57k, False: 0]
  ------------------
  218|  5.57k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|  5.57k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  219|  5.57k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (219:7): [True: 0, False: 5.57k]
  |  Branch (219:23): [Folded - Ignored]
  |  Branch (219:47): [True: 0, False: 0]
  ------------------
  220|      0|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  221|  5.57k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|  5.57k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (221:7): [Folded - Ignored]
  |  Branch (221:31): [True: 0, False: 5.57k]
  ------------------
  222|      0|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|      0|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  223|  5.57k|  else
  224|  5.57k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|  5.57k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  225|  5.57k|}
lj_tab_getstr:
  398|  3.71k|{
  399|  3.71k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  3.71k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  400|  3.71k|  do {
  401|  3.71k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  792|  7.43k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  3.71k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  3.71k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  856|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (401:29): [True: 0, False: 0]
  ------------------
  402|      0|      return &n->val;
  403|  3.71k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  3.71k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  3.71k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (403:12): [True: 0, False: 3.71k]
  ------------------
  404|  3.71k|  return NULL;
  405|  3.71k|}
lj_tab_get:
  408|  3.71k|{
  409|  3.71k|  if (tvisstr(key)) {
  ------------------
  |  |  792|  3.71k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  3.71k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  3.71k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 3.71k, False: 0]
  |  |  ------------------
  ------------------
  410|  3.71k|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  856|  3.71k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  3.71k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.71k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.71k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|  3.71k|    if (tv)
  ------------------
  |  Branch (411:9): [True: 0, False: 3.71k]
  ------------------
  412|      0|      return tv;
  413|  3.71k|  } else if (tvisint(key)) {
  ------------------
  |  |  800|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (800:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  414|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (85:71): [Folded - Ignored]
  |  |  |  Branch (85:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  415|      0|    if (tv)
  ------------------
  |  Branch (415:9): [True: 0, False: 0]
  ------------------
  416|      0|      return tv;
  417|      0|  } else if (tvisnum(key)) {
  ------------------
  |  |  801|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  418|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  863|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  |  997|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  420|      0|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (420:9): [True: 0, False: 0]
  ------------------
  421|      0|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  422|      0|      if (tv)
  ------------------
  |  Branch (422:11): [True: 0, False: 0]
  ------------------
  423|      0|	return tv;
  424|      0|    } else {
  425|      0|      goto genlookup;  /* Else use the generic lookup. */
  426|      0|    }
  427|      0|  } else if (!tvisnil(key)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (427:14): [True: 0, False: 0]
  ------------------
  428|      0|    Node *n;
  429|      0|  genlookup:
  430|      0|    n = hashkey(t, key);
  431|      0|    do {
  432|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (432:11): [True: 0, False: 0]
  ------------------
  433|      0|	return &n->val;
  434|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (434:14): [True: 0, False: 0]
  ------------------
  435|      0|  }
  436|  3.71k|  return niltv(L);
  ------------------
  |  |  664|  3.71k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  3.71k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.71k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.71k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|  3.71k|}
lj_tab_newkey:
  443|  3.71k|{
  444|  3.71k|  Node *n = hashkey(t, key);
  445|  3.71k|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  779|  7.43k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (445:7): [True: 0, False: 3.71k]
  |  Branch (445:28): [True: 0, False: 3.71k]
  ------------------
  446|      0|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  447|      0|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|      0|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  448|      0|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|      0|	       "bad freenode");
  450|      0|    do {
  451|      0|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (451:11): [True: 0, False: 0]
  ------------------
  452|      0|	rehashtab(L, t, key);  /* Rehash table. */
  453|      0|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  454|      0|      }
  455|      0|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (455:14): [True: 0, False: 0]
  ------------------
  456|      0|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|      0|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  457|      0|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  458|      0|    collide = hashkey(t, &n->key);
  459|      0|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (459:9): [True: 0, False: 0]
  ------------------
  460|      0|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (460:14): [True: 0, False: 0]
  ------------------
  461|      0|	collide = nextnode(collide);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  462|      0|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  463|       |      /* Copy colliding node into free node and free main node. */
  464|      0|      freenode->val = n->val;
  465|      0|      freenode->key = n->key;
  466|      0|      freenode->next = n->next;
  467|      0|      setmref(n->next, NULL);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  468|      0|      setnilV(&n->val);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  469|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  470|      0|      while (nextnode(freenode)) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  471|      0|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  472|      0|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (472:6): [True: 0, False: 0]
  |  Branch (472:28): [True: 0, False: 0]
  ------------------
  473|      0|	  freenode->next = nn->next;
  474|      0|	  nn->next = n->next;
  475|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  476|       |	  /*
  477|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  478|       |	  ** Another string key may have originally been resurrected via
  479|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  480|       |	  ** a node that had to be moved, which makes them unreachable.
  481|       |	  ** It's not feasible to check for all previous nodes, so rechain
  482|       |	  ** any string key that's currently in a non-main positions.
  483|       |	  */
  484|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (484:11): [True: 0, False: 0]
  ------------------
  485|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  779|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (485:10): [True: 0, False: 0]
  ------------------
  486|      0|	      Node *mn = hashkey(t, &nn->key);
  487|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (487:12): [True: 0, False: 0]
  |  Branch (487:30): [True: 0, False: 0]
  ------------------
  488|      0|		freenode->next = nn->next;
  489|      0|		nn->next = mn->next;
  490|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  491|      0|	      } else {
  492|      0|		freenode = nn;
  493|      0|	      }
  494|      0|	    } else {
  495|      0|	      freenode = nn;
  496|      0|	    }
  497|      0|	  }
  498|      0|	  break;
  499|      0|	} else {
  500|      0|	  freenode = nn;
  501|      0|	}
  502|      0|      }
  503|      0|    } else {  /* Otherwise use free node. */
  504|      0|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|      0|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  505|      0|      setmref(n->next, freenode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  506|      0|      n = freenode;
  507|      0|    }
  508|      0|  }
  509|  3.71k|  n->key.u64 = key->u64;
  510|  3.71k|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|  3.71k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 3.71k]
  |  |  ------------------
  ------------------
  511|      0|    n->key.u64 = 0;
  512|  3.71k|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  3.71k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  3.71k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 3.71k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|  3.71k|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|  3.71k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.71k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  514|      0|  return &n->val;
  515|  3.71k|}
lj_tab_setinth:
  518|  1.85k|{
  519|  1.85k|  TValue k;
  520|  1.85k|  Node *n;
  521|  1.85k|  k.n = (lua_Number)key;
  522|  1.85k|  n = hashnum(t, &k);
  ------------------
  |  |   45|  1.85k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  1.85k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  523|  1.85k|  do {
  524|  1.85k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  801|  3.71k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.85k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.85k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.85k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 0, False: 1.85k]
  |  |  ------------------
  ------------------
  |  Branch (524:29): [True: 0, False: 0]
  ------------------
  525|      0|      return &n->val;
  526|  1.85k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  1.85k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  1.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (526:12): [True: 0, False: 1.85k]
  ------------------
  527|  1.85k|  return lj_tab_newkey(L, t, &k);
  528|  1.85k|}
lj_tab.c:newtab:
   82|  5.57k|{
   83|  5.57k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|  5.57k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  5.57k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 0, False: 5.57k]
  |  Branch (85:44): [True: 0, False: 0]
  ------------------
   86|      0|    Node *nilnode;
   87|      0|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|      0|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|      0|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|      0|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|      0|#define LJ_TTAB			(~11u)
  ------------------
   90|      0|    t->nomm = (uint8_t)~0;
   91|      0|    t->colo = (int8_t)asize;
   92|      0|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|      0|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|      0|    t->asize = asize;
   95|      0|    t->hmask = 0;
   96|      0|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  702|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|      0|    setmref(t->node, nilnode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|      0|#if LJ_GC64
   99|      0|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|      0|#endif
  101|  5.57k|  } else {  /* Otherwise separately allocate the array part. */
  102|  5.57k|    Node *nilnode;
  103|  5.57k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|  5.57k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|  5.57k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  5.57k|#define LJ_TTAB			(~11u)
  ------------------
  105|  5.57k|    t->nomm = (uint8_t)~0;
  106|  5.57k|    t->colo = 0;
  107|  5.57k|    setmref(t->array, NULL);
  ------------------
  |  |   39|  5.57k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|  5.57k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  5.57k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|  5.57k|    t->asize = 0;  /* In case the array allocation fails. */
  110|  5.57k|    t->hmask = 0;
  111|  5.57k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  702|  5.57k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.57k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|  5.57k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  5.57k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|  5.57k|#if LJ_GC64
  114|  5.57k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  5.57k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|  5.57k|#endif
  116|  5.57k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 0, False: 5.57k]
  ------------------
  117|      0|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|      0|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|      0|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 0]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|      0|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|      0|      t->asize = asize;
  121|      0|    }
  122|  5.57k|  }
  123|  5.57k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 5.57k, False: 0]
  ------------------
  124|  5.57k|    newhpart(L, t, hbits);
  125|  5.57k|  return t;
  126|  5.57k|}
lj_tab.c:clearapart:
   73|  5.57k|{
   74|  5.57k|  uint32_t i, asize = t->asize;
   75|  5.57k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|  5.57k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  5.57k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|  5.57k|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 0, False: 5.57k]
  ------------------
   77|      0|    setnilV(&array[i]);
  ------------------
  |  |  869|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|  5.57k|}
lj_tab.c:clearhpart:
   59|  5.57k|{
   60|  5.57k|  uint32_t i, hmask = t->hmask;
   61|  5.57k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  5.57k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  5.57k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|  5.57k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|  5.57k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.57k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.57k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.57k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   139k|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 133k, False: 5.57k]
  ------------------
   64|   133k|    Node *n = &node[i];
   65|   133k|    setmref(n->next, NULL);
  ------------------
  |  |   39|   133k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|   133k|    setnilV(&n->key);
  ------------------
  |  |  869|   133k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|   133k|    setnilV(&n->val);
  ------------------
  |  |  869|   133k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|   133k|  }
   69|  5.57k|}
lj_tab.c:newhpart:
   38|  5.57k|{
   39|  5.57k|  uint32_t hsize;
   40|  5.57k|  Node *node;
   41|  5.57k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|  5.57k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.57k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.57k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.57k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|  5.57k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|  5.57k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 5.57k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|  5.57k|  hsize = 1u << hbits;
   45|  5.57k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|  5.57k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  5.57k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|  5.57k|  setmref(t->node, node);
  ------------------
  |  |   39|  5.57k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|  5.57k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|  5.57k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|  5.57k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|  5.57k|  t->hmask = hsize-1;
   49|  5.57k|}
lj_tab.c:hashkey:
   21|  3.71k|{
   22|  3.71k|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|  3.71k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.71k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.71k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|  3.71k|  if (tvisstr(key))
  ------------------
  |  |  792|  3.71k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  778|  3.71k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  3.71k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (792:20): [True: 1.85k, False: 1.85k]
  |  |  ------------------
  ------------------
   24|  1.85k|    return hashstr(t, strV(key));
  ------------------
  |  |   42|  3.71k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
   25|  1.85k|  else if (tvisnum(key))
  ------------------
  |  |  801|  1.85k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  778|  1.85k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.85k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.85k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (801:20): [True: 1.85k, False: 0]
  |  |  ------------------
  ------------------
   26|  1.85k|    return hashnum(t, key);
  ------------------
  |  |   45|  1.85k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  1.85k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|      0|  else if (tvisbool(key))
  ------------------
  |  |  786|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  784|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (784:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  785|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  778|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (785:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  834|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|      0|  else
   30|      0|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|      0|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|      0|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|  3.71k|}

lj_tab.c:hashmask:
   36|  9.29k|{
   37|  9.29k|  Node *n = noderef(t->node);
  ------------------
  |  |  515|  9.29k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  9.29k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|  9.29k|  return &n[hash & t->hmask];
   39|  9.29k|}
lj_tab.c:hashrot:
   19|  3.71k|{
   20|  3.71k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  3.71k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  3.71k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  3.71k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  3.71k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  3.71k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  3.71k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  3.71k|  return hi;
   32|  3.71k|}

lj_trace_initstate:
  314|  1.85k|{
  315|  1.85k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  1.85k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.85k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.85k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|  1.85k|  TValue *tv;
  317|       |
  318|       |  /* Initialize aligned SIMD constants. */
  319|  1.85k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  1.85k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  320|  1.85k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  321|  1.85k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|  1.85k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  1.85k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  323|  1.85k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  324|  1.85k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  325|       |
  326|       |  /* Initialize 32/64 bit constants. */
  327|  1.85k|#if LJ_TARGET_X86ORX64
  328|  1.85k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  329|       |#if LJ_32
  330|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  331|       |#endif
  332|  1.85k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  333|  1.85k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  1.85k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  334|  1.85k|#endif
  335|  1.85k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  336|  1.85k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  1.85k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  337|  1.85k|#endif
  338|       |#if LJ_TARGET_PPC
  339|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  340|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  341|       |#endif
  342|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  343|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  344|       |#endif
  345|       |#if LJ_TARGET_MIPS
  346|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  347|       |#if LJ_64
  348|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  349|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  350|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  351|       |#endif
  352|       |#endif
  353|  1.85k|}
lj_trace_freestate:
  357|  1.85k|{
  358|  1.85k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  1.85k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  1.85k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.85k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|  1.85k|#ifdef LUA_USE_ASSERT
  360|  1.85k|  {  /* This assumes all traces have already been freed. */
  361|  1.85k|    ptrdiff_t i;
  362|  1.85k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (362:17): [True: 0, False: 1.85k]
  ------------------
  363|  1.85k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  364|  1.85k|		 "trace still allocated");
  365|  1.85k|  }
  366|  1.85k|#endif
  367|  1.85k|  lj_mcode_free(J);
  368|  1.85k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  369|  1.85k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  370|  1.85k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  371|  1.85k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  1.85k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  372|  1.85k|}

LLVMFuzzerTestOneInput:
   23|  1.85k|{
   24|  1.85k|	FuzzedDataProvider fdp(data, size);
   25|       |
   26|  1.85k|	lua_State *L = luaL_newstate();
   27|  1.85k|	if (L == NULL)
  ------------------
  |  Branch (27:6): [True: 0, False: 1.85k]
  ------------------
   28|      0|		return 0;
   29|       |
   30|  1.85k|	auto str1 = fdp.ConsumeRandomLengthString(size);
   31|  1.85k|	auto str2 = fdp.ConsumeRandomLengthString(size);
   32|  1.85k|	auto str3 = fdp.ConsumeRandomLengthString(size);
   33|  1.85k|	const char *c_str1 = str1.c_str();
   34|  1.85k|	const char *c_str2 = str2.c_str();
   35|  1.85k|	const char *c_str3 = str3.c_str();
   36|  1.85k|	if (strlen(c_str1) == 0 ||
  ------------------
  |  Branch (36:6): [True: 14, False: 1.84k]
  ------------------
   37|  1.85k|	    strlen(c_str2) == 0 ||
  ------------------
  |  Branch (37:6): [True: 110, False: 1.73k]
  ------------------
   38|  1.85k|	    strlen(c_str3) == 0) {
  ------------------
  |  Branch (38:6): [True: 11, False: 1.72k]
  ------------------
   39|    135|		lua_settop(L, 0);
   40|    135|		lua_close(L);
   41|    135|		return -1;
   42|    135|	}
   43|  1.72k|	int top = lua_gettop(L);
   44|  1.72k|	luaL_gsub(L, c_str1, c_str2, c_str3);
   45|       |	/* [-0, +1, m] */
   46|  1.72k|	assert(lua_gettop(L) == top + 1);
   47|       |
   48|      0|	lua_settop(L, 0);
   49|  1.72k|	lua_close(L);
   50|       |
   51|  1.72k|	return 0;
   52|  1.85k|}

