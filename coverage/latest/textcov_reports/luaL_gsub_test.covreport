luaL_findtable:
   84|  36.2k|{
   85|  36.2k|  const char *e;
   86|  36.2k|  lua_pushvalue(L, idx);
   87|  36.2k|  do {
   88|  36.2k|    e = strchr(fname, '.');
   89|  36.2k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 36.2k, False: 0]
  ------------------
   90|  36.2k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|  36.2k|    lua_rawget(L, -2);
   92|  36.2k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|  36.2k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|  36.2k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
   93|  36.2k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|  36.2k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|  36.2k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 36.2k]
  ------------------
   95|  36.2k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|  36.2k|      lua_pushvalue(L, -2);
   97|  36.2k|      lua_settable(L, -4);  /* set new table into field */
   98|  36.2k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|      0|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|      0|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 0]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|  36.2k|    lua_remove(L, -2);  /* remove previous table */
  103|  36.2k|    fname = e + 1;
  104|  36.2k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 0, False: 36.2k]
  ------------------
  105|  36.2k|  return NULL;
  106|  36.2k|}
luaL_gsub:
  164|  36.2k|{
  165|  36.2k|  const char *wild;
  166|  36.2k|  size_t l = strlen(p);
  167|  36.2k|  luaL_Buffer b;
  168|  36.2k|  luaL_buffinit(L, &b);
  169|  21.5M|  while ((wild = strstr(s, p)) != NULL) {
  ------------------
  |  Branch (169:10): [True: 21.5M, False: 36.2k]
  ------------------
  170|  21.5M|    luaL_addlstring(&b, s, (size_t)(wild - s));  /* push prefix */
  171|  21.5M|    luaL_addstring(&b, r);  /* push replacement in place of pattern */
  172|  21.5M|    s = wild + l;  /* continue after `p' */
  173|  21.5M|  }
  174|  36.2k|  luaL_addstring(&b, s);  /* push last suffix */
  175|  36.2k|  luaL_pushresult(&b);
  176|  36.2k|  return lua_tostring(L, -1);
  ------------------
  |  |  281|  36.2k|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  177|  36.2k|}
luaL_addlstring:
  221|  43.0M|{
  222|  43.0M|  if (l <= bufffree(B)) {
  ------------------
  |  |  182|  43.0M|#define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  113|  43.0M|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (113:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  181|  43.0M|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  |  |  ------------------
  ------------------
  |  Branch (222:7): [True: 40.3M, False: 2.65M]
  ------------------
  223|  40.3M|    memcpy(B->p, s, l);
  224|  40.3M|    B->p += l;
  225|  40.3M|  } else {
  226|  2.65M|    emptybuffer(B);
  227|  2.65M|    lua_pushlstring(B->L, s, l);
  228|  2.65M|    B->lvl++;
  229|  2.65M|    adjuststack(B);
  230|  2.65M|  }
  231|  43.0M|}
luaL_addstring:
  234|  21.5M|{
  235|  21.5M|  luaL_addlstring(B, s, strlen(s));
  236|  21.5M|}
luaL_pushresult:
  239|  36.2k|{
  240|  36.2k|  emptybuffer(B);
  241|  36.2k|  lua_concat(B->L, B->lvl);
  242|  36.2k|  B->lvl = 1;
  243|  36.2k|}
luaL_buffinit:
  263|  36.2k|{
  264|  36.2k|  B->L = L;
  265|  36.2k|  B->p = B->buffer;
  266|  36.2k|  B->lvl = 0;
  267|  36.2k|}
luaL_newstate:
  371|  36.2k|{
  372|  36.2k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  36.2k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  36.2k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  36.2k|#endif
  378|  36.2k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 36.2k, False: 0]
  ------------------
  379|  36.2k|    G(L)->panic = panic;
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  36.2k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  36.2k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  36.2k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  36.2k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  36.2k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  36.2k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  36.2k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  36.2k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  36.2k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  36.2k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  36.2k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  36.2k|    L->top--;
  386|  36.2k|#endif
  387|  36.2k|  }
  388|  36.2k|  return L;
  389|  36.2k|}
lib_aux.c:emptybuffer:
  185|  2.68M|{
  186|  2.68M|  size_t l = bufflen(B);
  ------------------
  |  |  181|  2.68M|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  ------------------
  187|  2.68M|  if (l == 0)
  ------------------
  |  Branch (187:7): [True: 1.19k, False: 2.68M]
  ------------------
  188|  1.19k|    return 0;  /* put nothing on stack */
  189|  2.68M|  lua_pushlstring(B->L, B->buffer, l);
  190|  2.68M|  B->p = B->buffer;
  191|  2.68M|  B->lvl++;
  192|  2.68M|  return 1;
  193|  2.68M|}
lib_aux.c:adjuststack:
  196|  2.65M|{
  197|  2.65M|  if (B->lvl > 1) {
  ------------------
  |  Branch (197:7): [True: 2.65M, False: 0]
  ------------------
  198|  2.65M|    lua_State *L = B->L;
  199|  2.65M|    int toget = 1;  /* number of levels to concat */
  200|  2.65M|    size_t toplen = lua_strlen(L, -1);
  ------------------
  |  |  264|  2.65M|#define lua_strlen(L,i)		lua_objlen(L, (i))
  ------------------
  201|  7.74M|    do {
  202|  7.74M|      size_t l = lua_strlen(L, -(toget+1));
  ------------------
  |  |  264|  7.74M|#define lua_strlen(L,i)		lua_objlen(L, (i))
  ------------------
  203|  7.74M|      if (!(B->lvl - toget + 1 >= LUA_MINSTACK/2 || toplen > l))
  ------------------
  |  |   88|  7.74M|#define LUA_MINSTACK	20
  ------------------
  |  Branch (203:13): [True: 1.55M, False: 6.18M]
  |  Branch (203:53): [True: 3.59M, False: 2.59M]
  ------------------
  204|  2.59M|	break;
  205|  5.15M|      toplen += l;
  206|  5.15M|      toget++;
  207|  5.15M|    } while (toget < B->lvl);
  ------------------
  |  Branch (207:14): [True: 5.09M, False: 63.4k]
  ------------------
  208|      0|    lua_concat(L, toget);
  209|  2.65M|    B->lvl = B->lvl - toget + 1;
  210|  2.65M|  }
  211|  2.65M|}

lj_alloc_create:
 1392|  36.2k|{
 1393|  36.2k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  36.2k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1394|       |#if LUAJIT_USE_ASAN
 1395|       |  tsize -= TOTAL_REDZONE_SIZE;
 1396|       |#endif
 1397|  36.2k|  char *tbase;
 1398|  36.2k|  INIT_MMAP();
  ------------------
  |  |  527|  36.2k|#define INIT_MMAP()		((void)0)
  ------------------
 1399|  36.2k|  UNUSED(rs);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1400|  36.2k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  438|  36.2k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1401|  36.2k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  36.2k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  36.2k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  36.2k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1401:7): [True: 36.2k, False: 0]
  ------------------
 1402|  36.2k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  587|  36.2k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  36.2k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  36.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1403|  36.2k|    mchunkptr mn;
 1404|       |#if LUAJIT_USE_ASAN
 1405|       |    mchunkptr msp = (mchunkptr)(tbase + align_offset(chunk2mem(tbase) - REDZONE_SIZE));
 1406|       |    mstate m = (mstate)(chunk2mem(msp) - REDZONE_SIZE);
 1407|       |#else
 1408|  36.2k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  579|  36.2k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  36.2k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.2k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  36.2k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  575|  36.2k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  36.2k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  36.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|  36.2k|#endif
 1411|  36.2k|    memset(m, 0, msize);
 1412|  36.2k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  595|  36.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  596|  36.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  36.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1413|  36.2k|    m->seg.base = tbase;
 1414|  36.2k|    m->seg.size = tsize;
 1415|  36.2k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  36.2k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1416|  36.2k|    init_bins(m);
 1417|       |#if LUAJIT_USE_ASAN
 1418|       |    mn = next_chunk((mchunkptr)((char *)(m) - TWO_SIZE_T_SIZES));
 1419|       |#else
 1420|  36.2k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  615|  36.2k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  597|  36.2k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  36.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  36.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  36.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1421|  36.2k|#endif
 1422|  36.2k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  754|  36.2k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  36.2k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.2k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  36.2k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  36.2k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  36.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  36.2k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  36.2k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1423|  36.2k|    return m;
 1424|  36.2k|  }
 1425|      0|  return NULL;
 1426|  36.2k|}
lj_alloc_setprng:
 1429|  36.2k|{
 1430|  36.2k|  mstate ms = (mstate)msp;
 1431|  36.2k|  ms->prng = rs;
 1432|  36.2k|}
lj_alloc_destroy:
 1435|  36.2k|{
 1436|  36.2k|  mstate ms = (mstate)msp;
 1437|  36.2k|  msegmentptr sp = &ms->seg;
 1438|   112k|  while (sp != 0) {
  ------------------
  |  Branch (1438:10): [True: 76.0k, False: 36.2k]
  ------------------
 1439|  76.0k|    char *base = sp->base;
 1440|  76.0k|    size_t size = sp->size;
 1441|  76.0k|    sp = sp->next;
 1442|       |#if LUAJIT_USE_ASAN
 1443|       |    ASAN_UNPOISON_MEMORY_REGION(base, size);
 1444|       |#endif
 1445|  76.0k|    CALL_MUNMAP(base, size);
 1446|  76.0k|  }
 1447|  36.2k|}
lj_alloc_f:
 1711|  10.9M|{
 1712|  10.9M|  (void)osize;
 1713|  10.9M|  if (nsize == 0) {
  ------------------
  |  Branch (1713:7): [True: 5.45M, False: 5.52M]
  ------------------
 1714|  5.45M|    return lj_alloc_free(msp, ptr);
 1715|  5.52M|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1715:14): [True: 5.29M, False: 231k]
  ------------------
 1716|  5.29M|    return lj_alloc_malloc(msp, nsize);
 1717|  5.29M|  } else {
 1718|   231k|    return lj_alloc_realloc(msp, ptr, nsize);
 1719|   231k|  }
 1720|  10.9M|}
lj_alloc.c:mmap_probe:
  334|   288k|{
  335|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  336|   288k|  static uintptr_t hint_addr = 0;
  337|   288k|  int olderr = errno;
  338|   288k|  int retry;
  339|       |#if LUAJIT_USE_ASAN
  340|       |  size_t mem_size = size;
  341|       |  size = (size_t)align_up((void *)size, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
  342|       |#endif
  343|   288k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|   288k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (343:19): [True: 288k, False: 0]
  ------------------
  344|   288k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|   288k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|   288k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|   288k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  345|   288k|    uintptr_t addr = (uintptr_t)p;
  346|   288k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|   288k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|   577k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (346:9): [True: 288k, False: 0]
  |  Branch (346:42): [True: 288k, False: 0]
  ------------------
  347|   288k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|   288k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (347:2): [True: 288k, False: 0]
  ------------------
  348|       |      /* We got a suitable address. Bump the hint address. */
  349|   288k|      hint_addr = addr + size;
  350|   288k|      errno = olderr;
  351|       |#if LUAJIT_USE_ASAN
  352|       |      p = mark_memory_region(p, mem_size, size);
  353|       |#endif
  354|   288k|      return p;
  355|   288k|    }
  356|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|      0|      munmap(p, size);
  358|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (358:16): [True: 0, False: 0]
  ------------------
  359|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  360|      0|    }
  361|      0|    if (hint_addr) {
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|       |      /* First, try linear probing. */
  363|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (363:11): [True: 0, False: 0]
  ------------------
  364|      0|	hint_addr += 0x1000000;
  365|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (365:6): [True: 0, False: 0]
  ------------------
  366|      0|	  hint_addr = 0;
  367|      0|	continue;
  368|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (368:18): [True: 0, False: 0]
  ------------------
  369|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  370|      0|	hint_addr = 0;
  371|      0|	continue;
  372|      0|      }
  373|      0|    }
  374|       |    /* Finally, try pseudo-random probing. */
  375|      0|    do {
  376|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  377|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (377:14): [True: 0, False: 0]
  ------------------
  378|      0|  }
  379|      0|  errno = olderr;
  380|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  381|   288k|}
lj_alloc.c:init_bins:
 1051|  36.2k|{
 1052|       |  /* Establish circular links for smallbins */
 1053|  36.2k|  bindex_t i;
 1054|  1.19M|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  675|  1.19M|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (1054:15): [True: 1.16M, False: 36.2k]
  ------------------
 1055|  1.16M|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  764|  1.16M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1056|  1.16M|    bin->fd = bin->bk = bin;
 1057|  1.16M|  }
 1058|  36.2k|}
lj_alloc.c:init_top:
 1030|   139k|{
 1031|       |  /* Ensure alignment */
 1032|   139k|  void *t = chunk2mem(p);
  ------------------
  |  |  575|   139k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   139k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   139k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1033|       |#if LUAJIT_USE_ASAN
 1034|       |  t -= REDZONE_SIZE;
 1035|       |#endif
 1036|   139k|  size_t offset = align_offset(t);
  ------------------
  |  |   66|   139k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 139k, False: 0]
  |  |  ------------------
  |  |   67|   139k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1037|       |
 1038|   139k|  p = (mchunkptr)((char *)p + offset);
 1039|   139k|  psize -= offset;
 1040|       |
 1041|   139k|  m->top = p;
 1042|   139k|  m->topsize = psize;
 1043|   139k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  595|   139k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1044|       |  /* set size of fake trailing chunk holding overhead space only once */
 1045|   139k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  611|   139k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  754|   139k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|   139k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|   139k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|   139k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|   139k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   139k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|   139k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   139k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1046|   139k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|   139k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
 1047|   139k|}
lj_alloc.c:CALL_MUNMAP:
  472|   195k|{
  473|   195k|  int olderr = errno;
  474|       |#if LUAJIT_USE_ASAN
  475|       |  memmove(ptr, ptr, size); /* check that memory is not poisoned */
  476|       |  size = asan_get_size(ptr, POISON_SIZE);
  477|       |  ptr -= REDZONE_SIZE;
  478|       |#endif
  479|   195k|  int ret = munmap(ptr, size);
  480|       |#if LUAJIT_USE_ASAN
  481|       |  if (ret == 0) {
  482|       |    ASAN_POISON_MEMORY_REGION(ptr, size);
  483|       |  }
  484|       |#endif
  485|   195k|  errno = olderr;
  486|   195k|  return ret;
  487|   195k|}
lj_alloc.c:lj_alloc_free:
 1560|  5.53M|{
 1561|       |#if LUAJIT_USE_ASAN
 1562|       |  if (ptr != 0) {    
 1563|       |    size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1564|       |    size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1565|       |
 1566|       |    memmove(ptr, ptr, mem_size);
 1567|       |    ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1568|       |  }
 1569|       |  return NULL;
 1570|       |#else
 1571|  5.53M|  if (ptr != 0) {
  ------------------
  |  Branch (1571:7): [True: 5.34M, False: 189k]
  ------------------
 1572|  5.34M|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  576|  5.34M|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  5.34M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.34M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1573|  5.34M|    mstate fm = (mstate)msp;
 1574|  5.34M|    size_t psize = chunksize(p);
  ------------------
  |  |  605|  5.34M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  5.34M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  5.34M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.34M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  5.34M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  5.34M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1575|  5.34M|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  611|  5.34M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1576|  5.34M|    if (!pinuse(p)) {
  ------------------
  |  |  604|  5.34M|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  5.34M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.34M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1576:9): [True: 2.39M, False: 2.94M]
  ------------------
 1577|  2.39M|      size_t prevsize = p->prev_foot;
 1578|  2.39M|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|  2.39M|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.39M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1578:11): [True: 112k, False: 2.28M]
  ------------------
 1579|   112k|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|   112k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   112k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1580|   112k|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  563|   112k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|   112k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   112k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1581|   112k|	CALL_MUNMAP((char *)p - prevsize, psize);
 1582|   112k|	return NULL;
 1583|  2.28M|      } else {
 1584|  2.28M|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  612|  2.28M|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1585|  2.28M|	psize += prevsize;
 1586|  2.28M|	p = prev;
 1587|       |	/* consolidate backward */
 1588|  2.28M|	if (p != fm->dv) {
  ------------------
  |  Branch (1588:6): [True: 2.26M, False: 12.1k]
  ------------------
 1589|  2.26M|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  974|  2.26M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  2.26M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  2.26M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  2.26M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 672k, False: 1.59M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|   672k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|   672k|  mchunkptr F = P->fd;\
  |  |  |  |  846|   672k|  mchunkptr B = P->bk;\
  |  |  |  |  847|   672k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|   672k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|   672k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|   672k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 313k, False: 359k]
  |  |  |  |  ------------------
  |  |  |  |  849|   313k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|   313k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   313k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|   359k|  } else {\
  |  |  |  |  851|   359k|    F->bk = B;\
  |  |  |  |  852|   359k|    B->fd = F;\
  |  |  |  |  853|   359k|  }\
  |  |  |  |  854|   672k|}
  |  |  ------------------
  |  |  975|  1.59M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|  1.59M|  tchunkptr XP = X->parent;\
  |  |  |  |  923|  1.59M|  tchunkptr R;\
  |  |  |  |  924|  1.59M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 258k, False: 1.33M]
  |  |  |  |  ------------------
  |  |  |  |  925|   258k|    tchunkptr F = X->fd;\
  |  |  |  |  926|   258k|    R = X->bk;\
  |  |  |  |  927|   258k|    F->bk = R;\
  |  |  |  |  928|   258k|    R->fd = F;\
  |  |  |  |  929|  1.33M|  } else {\
  |  |  |  |  930|  1.33M|    tchunkptr *RP;\
  |  |  |  |  931|  1.33M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 147k, False: 1.19M]
  |  |  |  |  ------------------
  |  |  |  |  932|  1.33M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 125k, False: 1.06M]
  |  |  |  |  ------------------
  |  |  |  |  933|   272k|      tchunkptr *CP;\
  |  |  |  |  934|   315k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 22.0k, False: 293k]
  |  |  |  |  ------------------
  |  |  |  |  935|   315k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 20.2k, False: 272k]
  |  |  |  |  ------------------
  |  |  |  |  936|  42.3k|	R = *(RP = CP);\
  |  |  |  |  937|  42.3k|      }\
  |  |  |  |  938|   272k|      *RP = 0;\
  |  |  |  |  939|   272k|    }\
  |  |  |  |  940|  1.33M|  }\
  |  |  |  |  941|  1.59M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 1.43M, False: 164k]
  |  |  |  |  ------------------
  |  |  |  |  942|  1.43M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  1.43M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|  1.43M|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 1.08M, False: 345k]
  |  |  |  |  ------------------
  |  |  |  |  944|  1.08M|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 795k, False: 291k]
  |  |  |  |  ------------------
  |  |  |  |  945|  1.08M|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   795k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   795k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|  1.08M|    } else {\
  |  |  |  |  947|   345k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 185k, False: 159k]
  |  |  |  |  ------------------
  |  |  |  |  948|   345k|	XP->child[0] = R;\
  |  |  |  |  949|   345k|      else \
  |  |  |  |  950|   345k|	XP->child[1] = R;\
  |  |  |  |  951|   345k|    }\
  |  |  |  |  952|  1.43M|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 366k, False: 1.06M]
  |  |  |  |  ------------------
  |  |  |  |  953|   366k|      tchunkptr C0, C1;\
  |  |  |  |  954|   366k|      R->parent = XP;\
  |  |  |  |  955|   366k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 69.8k, False: 296k]
  |  |  |  |  ------------------
  |  |  |  |  956|  69.8k|	R->child[0] = C0;\
  |  |  |  |  957|  69.8k|	C0->parent = R;\
  |  |  |  |  958|  69.8k|      }\
  |  |  |  |  959|   366k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 38.0k, False: 328k]
  |  |  |  |  ------------------
  |  |  |  |  960|  38.0k|	R->child[1] = C1;\
  |  |  |  |  961|  38.0k|	C1->parent = R;\
  |  |  |  |  962|  38.0k|      }\
  |  |  |  |  963|   366k|    }\
  |  |  |  |  964|  1.43M|  }\
  |  |  |  |  965|  1.59M|}
  |  |  ------------------
  ------------------
 1590|  2.26M|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|  12.1k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  12.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  12.1k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  12.1k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|  12.1k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  12.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  12.1k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  12.1k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1590:13): [True: 3.99k, False: 8.10k]
  ------------------
 1591|  3.99k|	  fm->dvsize = psize;
 1592|  3.99k|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|  3.99k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  3.99k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  3.99k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  3.99k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  3.99k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  3.99k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1593|  3.99k|	  return NULL;
 1594|  3.99k|	}
 1595|  2.28M|      }
 1596|  2.39M|    }
 1597|  5.22M|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  603|  5.22M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  5.22M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  5.22M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1597:9): [True: 2.86M, False: 2.35M]
  ------------------
 1598|  2.86M|      if (next == fm->top) {
  ------------------
  |  Branch (1598:11): [True: 266k, False: 2.59M]
  ------------------
 1599|   266k|	size_t tsize = fm->topsize += psize;
 1600|   266k|	fm->top = p;
 1601|   266k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  595|   266k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   266k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1602|   266k|	if (p == fm->dv) {
  ------------------
  |  Branch (1602:6): [True: 2.42k, False: 263k]
  ------------------
 1603|  2.42k|	  fm->dv = 0;
 1604|  2.42k|	  fm->dvsize = 0;
 1605|  2.42k|	}
 1606|   266k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1606:6): [True: 0, False: 266k]
  ------------------
 1607|      0|	  alloc_trim(fm, 0);
 1608|   266k|	return NULL;
 1609|  2.59M|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1609:18): [True: 45.0k, False: 2.55M]
  ------------------
 1610|  45.0k|	size_t dsize = fm->dvsize += psize;
 1611|  45.0k|	fm->dv = p;
 1612|  45.0k|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  627|  45.0k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  45.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  45.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  45.0k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1613|  45.0k|	return NULL;
 1614|  2.55M|      } else {
 1615|  2.55M|	size_t nsize = chunksize(next);
  ------------------
  |  |  605|  2.55M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  2.55M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  2.55M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  2.55M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.55M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1616|  2.55M|	psize += nsize;
 1617|  2.55M|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  974|  2.55M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  2.55M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  2.55M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  2.55M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 810k, False: 1.74M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|   810k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|   810k|  mchunkptr F = P->fd;\
  |  |  |  |  846|   810k|  mchunkptr B = P->bk;\
  |  |  |  |  847|   810k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|   810k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|   810k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|   810k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 460k, False: 349k]
  |  |  |  |  ------------------
  |  |  |  |  849|   460k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|   460k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   460k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|   460k|  } else {\
  |  |  |  |  851|   349k|    F->bk = B;\
  |  |  |  |  852|   349k|    B->fd = F;\
  |  |  |  |  853|   349k|  }\
  |  |  |  |  854|   810k|}
  |  |  ------------------
  |  |  975|  1.74M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|  1.74M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|  1.74M|  tchunkptr XP = X->parent;\
  |  |  |  |  923|  1.74M|  tchunkptr R;\
  |  |  |  |  924|  1.74M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 233k, False: 1.51M]
  |  |  |  |  ------------------
  |  |  |  |  925|   233k|    tchunkptr F = X->fd;\
  |  |  |  |  926|   233k|    R = X->bk;\
  |  |  |  |  927|   233k|    F->bk = R;\
  |  |  |  |  928|   233k|    R->fd = F;\
  |  |  |  |  929|  1.51M|  } else {\
  |  |  |  |  930|  1.51M|    tchunkptr *RP;\
  |  |  |  |  931|  1.51M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 145k, False: 1.36M]
  |  |  |  |  ------------------
  |  |  |  |  932|  1.51M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 123k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  |  |  933|   268k|      tchunkptr *CP;\
  |  |  |  |  934|   312k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 22.6k, False: 289k]
  |  |  |  |  ------------------
  |  |  |  |  935|   312k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 20.6k, False: 268k]
  |  |  |  |  ------------------
  |  |  |  |  936|  43.3k|	R = *(RP = CP);\
  |  |  |  |  937|  43.3k|      }\
  |  |  |  |  938|   268k|      *RP = 0;\
  |  |  |  |  939|   268k|    }\
  |  |  |  |  940|  1.51M|  }\
  |  |  |  |  941|  1.74M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 1.58M, False: 157k]
  |  |  |  |  ------------------
  |  |  |  |  942|  1.58M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  1.58M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|  1.58M|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 1.20M, False: 381k]
  |  |  |  |  ------------------
  |  |  |  |  944|  1.20M|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 928k, False: 276k]
  |  |  |  |  ------------------
  |  |  |  |  945|  1.20M|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   928k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   928k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|  1.20M|    } else {\
  |  |  |  |  947|   381k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 193k, False: 188k]
  |  |  |  |  ------------------
  |  |  |  |  948|   381k|	XP->child[0] = R;\
  |  |  |  |  949|   381k|      else \
  |  |  |  |  950|   381k|	XP->child[1] = R;\
  |  |  |  |  951|   381k|    }\
  |  |  |  |  952|  1.58M|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 345k, False: 1.24M]
  |  |  |  |  ------------------
  |  |  |  |  953|   345k|      tchunkptr C0, C1;\
  |  |  |  |  954|   345k|      R->parent = XP;\
  |  |  |  |  955|   345k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 63.3k, False: 281k]
  |  |  |  |  ------------------
  |  |  |  |  956|  63.3k|	R->child[0] = C0;\
  |  |  |  |  957|  63.3k|	C0->parent = R;\
  |  |  |  |  958|  63.3k|      }\
  |  |  |  |  959|   345k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 35.2k, False: 309k]
  |  |  |  |  ------------------
  |  |  |  |  960|  35.2k|	R->child[1] = C1;\
  |  |  |  |  961|  35.2k|	C1->parent = R;\
  |  |  |  |  962|  35.2k|      }\
  |  |  |  |  963|   345k|    }\
  |  |  |  |  964|  1.58M|  }\
  |  |  |  |  965|  1.74M|}
  |  |  ------------------
  ------------------
 1618|  2.55M|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  627|  2.55M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  2.55M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.55M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  2.55M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1619|  2.55M|	if (p == fm->dv) {
  ------------------
  |  Branch (1619:6): [True: 5.68k, False: 2.54M]
  ------------------
 1620|  5.68k|	  fm->dvsize = psize;
 1621|  5.68k|	  return NULL;
 1622|  5.68k|	}
 1623|  2.55M|      }
 1624|  2.86M|    } else {
 1625|  2.35M|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|  2.35M|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  2.35M|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  2.35M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  2.35M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  2.35M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.35M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  2.35M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1626|  2.35M|    }
 1627|       |
 1628|  4.90M|    if (is_small(psize)) {
  ------------------
  |  |  758|  4.90M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  677|  4.90M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  675|  4.90M|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (758:22): [True: 1.46M, False: 3.43M]
  |  |  ------------------
  ------------------
 1629|  1.46M|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  829|  1.46M|#define insert_small_chunk(M, P, S) {\
  |  |  830|  1.46M|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  759|  1.46M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  1.46M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  831|  1.46M|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  764|  1.46M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  832|  1.46M|  mchunkptr F = B;\
  |  |  833|  1.46M|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  803|  1.46M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  1.46M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (833:7): [True: 761k, False: 708k]
  |  |  ------------------
  |  |  834|  1.46M|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  801|   761k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   761k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  835|  1.46M|  else\
  |  |  836|  1.46M|    F = B->fd;\
  |  |  837|  1.46M|  B->fd = P;\
  |  |  838|  1.46M|  F->bk = P;\
  |  |  839|  1.46M|  P->fd = F;\
  |  |  840|  1.46M|  P->bk = B;\
  |  |  841|  1.46M|}
  ------------------
 1630|  3.43M|    } else {
 1631|  3.43M|      tchunkptr tp = (tchunkptr)p;
 1632|  3.43M|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  882|  3.43M|#define insert_large_chunk(M, X, S) {\
  |  |  883|  3.43M|  tbinptr *H;\
  |  |  884|  3.43M|  bindex_t I;\
  |  |  885|  3.43M|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|  3.43M|#define compute_tree_index(S, I)\
  |  |  |  |  769|  3.43M|{\
  |  |  |  |  770|  3.43M|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|  3.43M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|  3.43M|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 3.43M]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|  3.43M|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 0, False: 3.43M]
  |  |  |  |  ------------------
  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|  3.43M|  } else {\
  |  |  |  |  776|  3.43M|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  3.43M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|  3.43M|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|  3.43M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|  3.43M|  }\
  |  |  |  |  779|  3.43M|}
  |  |  ------------------
  |  |  886|  3.43M|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|  3.43M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|  3.43M|  X->index = I;\
  |  |  888|  3.43M|  X->child[0] = X->child[1] = 0;\
  |  |  889|  3.43M|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|  3.43M|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  3.43M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 1.78M, False: 1.65M]
  |  |  ------------------
  |  |  890|  1.78M|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|  1.78M|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  1.78M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|  1.78M|    *H = X;\
  |  |  892|  1.78M|    X->parent = (tchunkptr)H;\
  |  |  893|  1.78M|    X->fd = X->bk = X;\
  |  |  894|  1.78M|  } else {\
  |  |  895|  1.65M|    tchunkptr T = *H;\
  |  |  896|  1.65M|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|  1.65M|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|  1.65M|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 0, False: 1.65M]
  |  |  |  |  ------------------
  |  |  |  |  788|  1.65M|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  1.65M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.65M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|  1.65M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|  2.20M|    for (;;) {\
  |  |  898|  2.20M|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|  2.20M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|  2.20M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|  2.20M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  2.20M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|  2.20M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|  2.20M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 1.66M, False: 539k]
  |  |  ------------------
  |  |  899|  1.66M|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|  1.66M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|  1.66M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|  1.66M|	K <<= 1;\
  |  |  901|  1.66M|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 543k, False: 1.11M]
  |  |  ------------------
  |  |  902|   543k|	  T = *C;\
  |  |  903|  1.11M|	} else {\
  |  |  904|  1.11M|	  *C = X;\
  |  |  905|  1.11M|	  X->parent = T;\
  |  |  906|  1.11M|	  X->fd = X->bk = X;\
  |  |  907|  1.11M|	  break;\
  |  |  908|  1.11M|	}\
  |  |  909|  1.66M|      } else {\
  |  |  910|   539k|	tchunkptr F = T->fd;\
  |  |  911|   539k|	T->fd = F->bk = X;\
  |  |  912|   539k|	X->fd = F;\
  |  |  913|   539k|	X->bk = T;\
  |  |  914|   539k|	X->parent = 0;\
  |  |  915|   539k|	break;\
  |  |  916|   539k|      }\
  |  |  917|  2.20M|    }\
  |  |  918|  1.65M|  }\
  |  |  919|  3.43M|}
  ------------------
 1633|  3.43M|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1633:11): [True: 6.06k, False: 3.43M]
  ------------------
 1634|  6.06k|	release_unused_segments(fm);
 1635|  3.43M|    }
 1636|  4.90M|  }
 1637|  5.09M|  return NULL;
 1638|  5.53M|#endif
 1639|  5.53M|}
lj_alloc.c:segment_holding:
  726|  47.1k|{
  727|  47.1k|  msegmentptr sp = &m->seg;
  728|  47.1k|  for (;;) {
  729|  47.1k|    if (addr >= sp->base && addr < sp->base + sp->size)
  ------------------
  |  Branch (729:9): [True: 47.1k, False: 0]
  |  Branch (729:29): [True: 47.1k, False: 0]
  ------------------
  730|  47.1k|      return sp;
  731|      0|    if ((sp = sp->next) == 0)
  ------------------
  |  Branch (731:9): [True: 0, False: 0]
  ------------------
  732|      0|      return 0;
  733|      0|  }
  734|  47.1k|}
lj_alloc.c:CALL_MREMAP_:
  492|   138k|{
  493|   138k|  int olderr = errno;
  494|       |#if LUAJIT_USE_ASAN
  495|       |  void *old_ptr = ptr;
  496|       |  size_t nms = nsz; /* new memory size */
  497|       |  osz = asan_get_size(old_ptr, POISON_SIZE);
  498|       |  nsz = (size_t)align_up((void *)nsz, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
  499|       |  ptr -= REDZONE_SIZE;
  500|       |#endif
  501|   138k|  ptr = mremap(ptr, osz, nsz, flags);
  502|       |#if LUAJIT_USE_ASAN
  503|       |  if (ptr != MFAIL) { 
  504|       |    /* can return a pointer to the same memory */
  505|       |    ASAN_POISON_MEMORY_REGION(old_ptr, osz);
  506|       |    ptr = mark_memory_region(ptr, nms, nsz);
  507|       |  }
  508|       |#endif
  509|   138k|  errno = olderr;
  510|   138k|  return ptr;
  511|   138k|}
lj_alloc.c:release_unused_segments:
 1211|  6.06k|{
 1212|  6.06k|  size_t released = 0;
 1213|  6.06k|  size_t nsegs = 0;
 1214|  6.06k|  msegmentptr pred = &m->seg;
 1215|  6.06k|  msegmentptr sp = pred->next;
 1216|  38.0k|  while (sp != 0) {
  ------------------
  |  Branch (1216:10): [True: 31.9k, False: 6.06k]
  ------------------
 1217|  31.9k|    char *base = sp->base;
 1218|  31.9k|    size_t size = sp->size;
 1219|  31.9k|    msegmentptr next = sp->next;
 1220|  31.9k|    nsegs++;
 1221|  31.9k|    {
 1222|  31.9k|      mchunkptr p = align_as_chunk(base);
  ------------------
  |  |  579|  31.9k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  31.9k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  31.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  31.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  31.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 31.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  31.9k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1223|  31.9k|      size_t psize = chunksize(p);
  ------------------
  |  |  605|  31.9k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  31.9k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  31.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  31.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  31.9k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  31.9k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|       |      /* Can unmap if first chunk holds entire segment and not pinned */
 1225|  31.9k|      if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  603|  63.9k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  31.9k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  31.9k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  576|  18.0k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  18.0k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  18.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1225:11): [True: 18.0k, False: 13.9k]
  |  Branch (1225:25): [True: 7.33k, False: 10.6k]
  ------------------
 1226|  7.33k|	tchunkptr tp = (tchunkptr)p;
 1227|  7.33k|	if (p == m->dv) {
  ------------------
  |  Branch (1227:6): [True: 155, False: 7.18k]
  ------------------
 1228|    155|	  m->dv = 0;
 1229|    155|	  m->dvsize = 0;
 1230|  7.18k|	} else {
 1231|  7.18k|	  unlink_large_chunk(m, tp);
  ------------------
  |  |  921|  7.18k|#define unlink_large_chunk(M, X) {\
  |  |  922|  7.18k|  tchunkptr XP = X->parent;\
  |  |  923|  7.18k|  tchunkptr R;\
  |  |  924|  7.18k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 2.18k, False: 4.99k]
  |  |  ------------------
  |  |  925|  2.18k|    tchunkptr F = X->fd;\
  |  |  926|  2.18k|    R = X->bk;\
  |  |  927|  2.18k|    F->bk = R;\
  |  |  928|  2.18k|    R->fd = F;\
  |  |  929|  4.99k|  } else {\
  |  |  930|  4.99k|    tchunkptr *RP;\
  |  |  931|  4.99k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 1.07k, False: 3.92k]
  |  |  ------------------
  |  |  932|  4.99k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 530, False: 3.39k]
  |  |  ------------------
  |  |  933|  1.60k|      tchunkptr *CP;\
  |  |  934|  1.78k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 99, False: 1.68k]
  |  |  ------------------
  |  |  935|  1.78k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 80, False: 1.60k]
  |  |  ------------------
  |  |  936|    179|	R = *(RP = CP);\
  |  |  937|    179|      }\
  |  |  938|  1.60k|      *RP = 0;\
  |  |  939|  1.60k|    }\
  |  |  940|  4.99k|  }\
  |  |  941|  7.18k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 5.96k, False: 1.21k]
  |  |  ------------------
  |  |  942|  5.96k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|  5.96k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|  5.96k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 4.89k, False: 1.07k]
  |  |  ------------------
  |  |  944|  4.89k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 2.61k, False: 2.27k]
  |  |  ------------------
  |  |  945|  4.89k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|  2.61k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  2.61k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|  4.89k|    } else {\
  |  |  947|  1.07k|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 1, False: 1.07k]
  |  |  ------------------
  |  |  948|  1.07k|	XP->child[0] = R;\
  |  |  949|  1.07k|      else \
  |  |  950|  1.07k|	XP->child[1] = R;\
  |  |  951|  1.07k|    }\
  |  |  952|  5.96k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 2.57k, False: 3.39k]
  |  |  ------------------
  |  |  953|  2.57k|      tchunkptr C0, C1;\
  |  |  954|  2.57k|      R->parent = XP;\
  |  |  955|  2.57k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 437, False: 2.13k]
  |  |  ------------------
  |  |  956|    437|	R->child[0] = C0;\
  |  |  957|    437|	C0->parent = R;\
  |  |  958|    437|      }\
  |  |  959|  2.57k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 293, False: 2.28k]
  |  |  ------------------
  |  |  960|    293|	R->child[1] = C1;\
  |  |  961|    293|	C1->parent = R;\
  |  |  962|    293|      }\
  |  |  963|  2.57k|    }\
  |  |  964|  5.96k|  }\
  |  |  965|  7.18k|}
  ------------------
 1232|  7.18k|	}
 1233|  7.33k|	if (CALL_MUNMAP(base, size) == 0) {
  ------------------
  |  Branch (1233:6): [True: 7.33k, False: 0]
  ------------------
 1234|  7.33k|	  released += size;
 1235|       |	  /* unlink obsoleted record */
 1236|  7.33k|	  sp = pred;
 1237|  7.33k|	  sp->next = next;
 1238|  7.33k|	} else { /* back out if cannot unmap */
 1239|      0|	  insert_large_chunk(m, tp, psize);
  ------------------
  |  |  882|      0|#define insert_large_chunk(M, X, S) {\
  |  |  883|      0|  tbinptr *H;\
  |  |  884|      0|  bindex_t I;\
  |  |  885|      0|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|      0|#define compute_tree_index(S, I)\
  |  |  |  |  769|      0|{\
  |  |  |  |  770|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|      0|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|      0|  } else {\
  |  |  |  |  776|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|      0|  }\
  |  |  |  |  779|      0|}
  |  |  ------------------
  |  |  886|      0|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|      0|  X->index = I;\
  |  |  888|      0|  X->child[0] = X->child[1] = 0;\
  |  |  889|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  890|      0|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|      0|    *H = X;\
  |  |  892|      0|    X->parent = (tchunkptr)H;\
  |  |  893|      0|    X->fd = X->bk = X;\
  |  |  894|      0|  } else {\
  |  |  895|      0|    tchunkptr T = *H;\
  |  |  896|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  788|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|      0|    for (;;) {\
  |  |  898|      0|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  899|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|      0|	K <<= 1;\
  |  |  901|      0|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  902|      0|	  T = *C;\
  |  |  903|      0|	} else {\
  |  |  904|      0|	  *C = X;\
  |  |  905|      0|	  X->parent = T;\
  |  |  906|      0|	  X->fd = X->bk = X;\
  |  |  907|      0|	  break;\
  |  |  908|      0|	}\
  |  |  909|      0|      } else {\
  |  |  910|      0|	tchunkptr F = T->fd;\
  |  |  911|      0|	T->fd = F->bk = X;\
  |  |  912|      0|	X->fd = F;\
  |  |  913|      0|	X->bk = T;\
  |  |  914|      0|	X->parent = 0;\
  |  |  915|      0|	break;\
  |  |  916|      0|      }\
  |  |  917|      0|    }\
  |  |  918|      0|  }\
  |  |  919|      0|}
  ------------------
 1240|      0|	}
 1241|  7.33k|      }
 1242|  31.9k|    }
 1243|  31.9k|    pred = sp;
 1244|  31.9k|    sp = next;
 1245|  31.9k|  }
 1246|       |  /* Reset check counter */
 1247|  6.06k|  m->release_checks = nsegs > MAX_RELEASE_CHECK_RATE ?
  ------------------
  |  |   44|  6.06k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
  |  Branch (1247:23): [True: 0, False: 6.06k]
  ------------------
 1248|  6.06k|		      nsegs : MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  12.1k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1249|  6.06k|  return released;
 1250|  6.06k|}
lj_alloc.c:lj_alloc_malloc:
 1450|  5.33M|{
 1451|       |#if LUAJIT_USE_ASAN
 1452|       |  size_t mem_size = nsize;
 1453|       |  size_t poison_size = (size_t)align_up((void *)nsize, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
 1454|       |  nsize = poison_size;
 1455|       |#endif
 1456|  5.33M|  mstate ms = (mstate)msp;
 1457|  5.33M|  void *mem;
 1458|  5.33M|  size_t nb;
 1459|  5.33M|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  682|  5.33M|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  681|  5.33M|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  680|  5.33M|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  5.33M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  5.33M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.33M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  5.33M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  5.33M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.33M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|  5.33M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  5.33M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1459:7): [True: 2.04M, False: 3.29M]
  ------------------
 1460|  2.04M|    bindex_t idx;
 1461|  2.04M|    binmap_t smallbits;
 1462|  2.04M|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  583|  2.04M|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  567|  2.04M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  2.04M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.04M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.04M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.04M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  2.04M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  2.04M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.04M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  558|  2.04M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.04M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.04M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  587|  4.08M|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  2.04M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.04M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.04M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.04M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.04M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.04M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.04M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.04M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1462:10): [True: 0, False: 2.04M]
  ------------------
 1463|  2.04M|    idx = small_index(nb);
  ------------------
  |  |  759|  2.04M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|  2.04M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1464|  2.04M|    smallbits = ms->smallmap >> idx;
 1465|       |
 1466|  2.04M|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1466:9): [True: 1.00k, False: 2.04M]
  ------------------
 1467|  1.00k|      mchunkptr b, p;
 1468|  1.00k|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1469|  1.00k|      b = smallbin_at(ms, idx);
  ------------------
  |  |  764|  1.00k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1470|  1.00k|      p = b->fd;
 1471|  1.00k|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  857|  1.00k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|  1.00k|  mchunkptr F = P->fd;\
  |  |  859|  1.00k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 993, False: 12]
  |  |  ------------------
  |  |  860|    993|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|    993|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|    993|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|    993|  } else {\
  |  |  862|     12|    B->fd = F;\
  |  |  863|     12|    F->bk = B;\
  |  |  864|     12|  }\
  |  |  865|  1.00k|}
  ------------------
 1472|  1.00k|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  819|  1.00k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  1.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  1.00k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.00k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  1.00k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  1.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1473|  1.00k|      mem = chunk2mem(p);
  ------------------
  |  |  575|  1.00k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.00k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.00k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|       |#if LUAJIT_USE_ASAN
 1475|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1476|       |#endif
 1477|  1.00k|      return mem;
 1478|  2.04M|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1478:16): [True: 2.01M, False: 27.1k]
  ------------------
 1479|  2.01M|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1479:11): [True: 546, False: 2.01M]
  ------------------
 1480|    546|	mchunkptr b, p, r;
 1481|    546|	size_t rsize;
 1482|    546|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  810|    546|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1483|    546|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|    546|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1484|    546|	b = smallbin_at(ms, i);
  ------------------
  |  |  764|    546|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1485|    546|	p = b->fd;
 1486|    546|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  857|    546|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|    546|  mchunkptr F = P->fd;\
  |  |  859|    546|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 521, False: 25]
  |  |  ------------------
  |  |  860|    521|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|    521|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|    521|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|    521|  } else {\
  |  |  862|     25|    B->fd = F;\
  |  |  863|     25|    F->bk = B;\
  |  |  864|     25|  }\
  |  |  865|    546|}
  ------------------
 1487|    546|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  760|    546|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|    546|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1488|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1489|    546|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|    546|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|    546|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|    546|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    546|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    546|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    546|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    546|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    546|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    546|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1489:6): [Folded - Ignored]
  |  Branch (1489:26): [True: 107, False: 439]
  ------------------
 1490|    107|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  819|    107|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|    107|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    107|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|    107|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    107|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|    107|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|    107|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    107|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|    439|	} else {
 1492|    439|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|    439|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|    439|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    439|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|    439|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    439|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1493|    439|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|    439|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1494|    439|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|    439|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|    439|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    439|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|    439|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1495|    439|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  869|    439|#define replace_dv(M, P, S) {\
  |  |  870|    439|  size_t DVS = M->dvsize;\
  |  |  871|    439|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 29, False: 410]
  |  |  ------------------
  |  |  872|     29|    mchunkptr DV = M->dv;\
  |  |  873|     29|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|     29|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|     29|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|     29|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|     29|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|     29|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|     29|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|     29|  mchunkptr F = B;\
  |  |  |  |  833|     29|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|     29|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|     29|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 21, False: 8]
  |  |  |  |  ------------------
  |  |  |  |  834|     29|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|     21|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|     21|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|     29|  else\
  |  |  |  |  836|     29|    F = B->fd;\
  |  |  |  |  837|     29|  B->fd = P;\
  |  |  |  |  838|     29|  F->bk = P;\
  |  |  |  |  839|     29|  P->fd = F;\
  |  |  |  |  840|     29|  P->bk = B;\
  |  |  |  |  841|     29|}
  |  |  ------------------
  |  |  874|     29|  }\
  |  |  875|    439|  M->dvsize = S;\
  |  |  876|    439|  M->dv = P;\
  |  |  877|    439|}
  ------------------
 1496|    439|	}
 1497|    546|	mem = chunk2mem(p);
  ------------------
  |  |  575|    546|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    546|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    546|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1498|       |#if LUAJIT_USE_ASAN
 1499|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1500|       |#endif
 1501|    546|	return mem;
 1502|  2.01M|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1502:18): [True: 7.25k, False: 2.00M]
  |  Branch (1502:38): [True: 7.25k, False: 0]
  ------------------
 1503|       |#if LUAJIT_USE_ASAN
 1504|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1505|       |#endif
 1506|  7.25k|	return mem;
 1507|  7.25k|      }
 1508|  2.01M|    }
 1509|  3.29M|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|  3.29M|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|  3.29M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  3.29M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.29M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.29M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.29M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.29M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.29M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.29M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1509:14): [True: 0, False: 3.29M]
  ------------------
 1510|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1511|  3.29M|  } else {
 1512|  3.29M|    nb = pad_request(nsize);
  ------------------
  |  |  587|  3.29M|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  3.29M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  3.29M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.29M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.29M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.29M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.29M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.29M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.29M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1513|  3.29M|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1513:9): [True: 2.81M, False: 474k]
  |  Branch (1513:29): [True: 1.90M, False: 907k]
  ------------------
 1514|       |#if LUAJIT_USE_ASAN
 1515|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1516|       |#endif
 1517|  1.90M|      return mem;
 1518|  1.90M|    }
 1519|  3.29M|  }
 1520|       |
 1521|  3.41M|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1521:7): [True: 102k, False: 3.31M]
  ------------------
 1522|   102k|    size_t rsize = ms->dvsize - nb;
 1523|   102k|    mchunkptr p = ms->dv;
 1524|   102k|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  567|   102k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|   102k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   102k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   102k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   102k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   102k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   102k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   102k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1524:9): [True: 101k, False: 1.00k]
  ------------------
 1525|   101k|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|   101k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1526|   101k|      ms->dvsize = rsize;
 1527|   101k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|   101k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|   101k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   101k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|   101k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1528|   101k|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|   101k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|   101k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   101k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|   101k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   101k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1529|   101k|    } else { /* exhaust dv */
 1530|  1.00k|      size_t dvs = ms->dvsize;
 1531|  1.00k|      ms->dvsize = 0;
 1532|  1.00k|      ms->dv = 0;
 1533|  1.00k|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  819|  1.00k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  1.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  1.00k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.00k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  1.00k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  1.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1534|  1.00k|    }
 1535|   102k|    mem = chunk2mem(p);
  ------------------
  |  |  575|   102k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   102k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   102k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1536|       |#if LUAJIT_USE_ASAN
 1537|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1538|       |#endif
 1539|   102k|    return mem;
 1540|  3.31M|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1540:14): [True: 3.06M, False: 252k]
  ------------------
 1541|  3.06M|    size_t rsize = ms->topsize -= nb;
 1542|  3.06M|    mchunkptr p = ms->top;
 1543|  3.06M|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  3.06M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1544|  3.06M|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  595|  3.06M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  3.06M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1545|  3.06M|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|  3.06M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  3.06M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.06M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  3.06M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  3.06M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1546|  3.06M|    mem = chunk2mem(p);
  ------------------
  |  |  575|  3.06M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  3.06M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  3.06M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|       |#if LUAJIT_USE_ASAN
 1548|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1549|       |#endif
 1550|  3.06M|    return mem;
 1551|  3.06M|  }
 1552|       |#if LUAJIT_USE_ASAN
 1553|       |  return mark_memory_region(alloc_sys(ms, nb) - REDZONE_SIZE, mem_size, poison_size);
 1554|       |#else
 1555|   252k|  return alloc_sys(ms, nb);
 1556|  3.41M|#endif
 1557|  3.41M|}
lj_alloc.c:tmalloc_small:
 1360|  7.25k|{
 1361|  7.25k|  tchunkptr t, v;
 1362|  7.25k|  mchunkptr r;
 1363|  7.25k|  size_t rsize;
 1364|  7.25k|  bindex_t i = lj_ffs(m->treemap);
  ------------------
  |  |  148|  7.25k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1365|       |
 1366|  7.25k|  v = t = *treebin_at(m, i);
  ------------------
  |  |  765|  7.25k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1367|  7.25k|  rsize = chunksize(t) - nb;
  ------------------
  |  |  605|  7.25k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  7.25k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  7.25k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  7.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  7.25k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  7.25k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1368|       |
 1369|  8.10k|  while ((t = leftmost_child(t)) != 0) {
  ------------------
  |  |  659|  8.10k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (659:28): [True: 485, False: 7.61k]
  |  |  ------------------
  ------------------
  |  Branch (1369:10): [True: 845, False: 7.25k]
  ------------------
 1370|    845|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|    845|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|    845|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|    845|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    845|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|    845|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    845|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|    845|    if (trem < rsize) {
  ------------------
  |  Branch (1371:9): [True: 425, False: 420]
  ------------------
 1372|    425|      rsize = trem;
 1373|    425|      v = t;
 1374|    425|    }
 1375|    845|  }
 1376|       |
 1377|  7.25k|  r = chunk_plus_offset(v, nb);
  ------------------
  |  |  611|  7.25k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1378|  7.25k|  unlink_large_chunk(m, v);
  ------------------
  |  |  921|  7.25k|#define unlink_large_chunk(M, X) {\
  |  |  922|  7.25k|  tchunkptr XP = X->parent;\
  |  |  923|  7.25k|  tchunkptr R;\
  |  |  924|  7.25k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 89, False: 7.16k]
  |  |  ------------------
  |  |  925|     89|    tchunkptr F = X->fd;\
  |  |  926|     89|    R = X->bk;\
  |  |  927|     89|    F->bk = R;\
  |  |  928|     89|    R->fd = F;\
  |  |  929|  7.16k|  } else {\
  |  |  930|  7.16k|    tchunkptr *RP;\
  |  |  931|  7.16k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 242, False: 6.92k]
  |  |  ------------------
  |  |  932|  7.16k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 93, False: 6.83k]
  |  |  ------------------
  |  |  933|    335|      tchunkptr *CP;\
  |  |  934|    369|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 20, False: 349]
  |  |  ------------------
  |  |  935|    369|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 14, False: 335]
  |  |  ------------------
  |  |  936|     34|	R = *(RP = CP);\
  |  |  937|     34|      }\
  |  |  938|    335|      *RP = 0;\
  |  |  939|    335|    }\
  |  |  940|  7.16k|  }\
  |  |  941|  7.25k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 7.25k, False: 0]
  |  |  ------------------
  |  |  942|  7.25k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|  7.25k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|  7.25k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 6.85k, False: 396]
  |  |  ------------------
  |  |  944|  6.85k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 6.47k, False: 388]
  |  |  ------------------
  |  |  945|  6.85k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|  6.47k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  6.47k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|  6.85k|    } else {\
  |  |  947|    396|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 311, False: 85]
  |  |  ------------------
  |  |  948|    396|	XP->child[0] = R;\
  |  |  949|    396|      else \
  |  |  950|    396|	XP->child[1] = R;\
  |  |  951|    396|    }\
  |  |  952|  7.25k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 424, False: 6.83k]
  |  |  ------------------
  |  |  953|    424|      tchunkptr C0, C1;\
  |  |  954|    424|      R->parent = XP;\
  |  |  955|    424|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 33, False: 391]
  |  |  ------------------
  |  |  956|     33|	R->child[0] = C0;\
  |  |  957|     33|	C0->parent = R;\
  |  |  958|     33|      }\
  |  |  959|    424|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 38, False: 386]
  |  |  ------------------
  |  |  960|     38|	R->child[1] = C1;\
  |  |  961|     38|	C1->parent = R;\
  |  |  962|     38|      }\
  |  |  963|    424|    }\
  |  |  964|  7.25k|  }\
  |  |  965|  7.25k|}
  ------------------
 1379|  7.25k|  if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  7.25k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  7.25k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  7.25k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  7.25k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  7.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  7.25k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  7.25k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  7.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1379:7): [True: 5, False: 7.25k]
  ------------------
 1380|      5|    set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  819|      5|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|      5|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      5|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|      5|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      5|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|      5|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|      5|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      5|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1381|  7.25k|  } else {
 1382|  7.25k|    set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  824|  7.25k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  7.25k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  7.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  7.25k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  7.25k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1383|  7.25k|    set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|  7.25k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  7.25k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  7.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  7.25k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1384|  7.25k|    replace_dv(m, r, rsize);
  ------------------
  |  |  869|  7.25k|#define replace_dv(M, P, S) {\
  |  |  870|  7.25k|  size_t DVS = M->dvsize;\
  |  |  871|  7.25k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 72, False: 7.17k]
  |  |  ------------------
  |  |  872|     72|    mchunkptr DV = M->dv;\
  |  |  873|     72|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|     72|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|     72|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|     72|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|     72|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|     72|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|     72|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|     72|  mchunkptr F = B;\
  |  |  |  |  833|     72|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|     72|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|     72|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 68, False: 4]
  |  |  |  |  ------------------
  |  |  |  |  834|     72|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|     68|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|     68|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|     72|  else\
  |  |  |  |  836|     72|    F = B->fd;\
  |  |  |  |  837|     72|  B->fd = P;\
  |  |  |  |  838|     72|  F->bk = P;\
  |  |  |  |  839|     72|  P->fd = F;\
  |  |  |  |  840|     72|  P->bk = B;\
  |  |  |  |  841|     72|}
  |  |  ------------------
  |  |  874|     72|  }\
  |  |  875|  7.25k|  M->dvsize = S;\
  |  |  876|  7.25k|  M->dv = P;\
  |  |  877|  7.25k|}
  ------------------
 1385|  7.25k|  }
 1386|  7.25k|  return chunk2mem(v);
  ------------------
  |  |  575|  7.25k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  7.25k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  7.25k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1387|  7.25k|}
lj_alloc.c:tmalloc_large:
 1296|  2.81M|{
 1297|  2.81M|  tchunkptr v = 0;
 1298|  2.81M|  size_t rsize = ~nb+1; /* Unsigned negation */
 1299|  2.81M|  tchunkptr t;
 1300|  2.81M|  bindex_t idx;
 1301|  2.81M|  compute_tree_index(nb, idx);
  ------------------
  |  |  768|  2.81M|#define compute_tree_index(S, I)\
  |  |  769|  2.81M|{\
  |  |  770|  2.81M|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  679|  2.81M|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  771|  2.81M|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (771:7): [True: 0, False: 2.81M]
  |  |  ------------------
  |  |  772|      0|    I = 0;\
  |  |  773|  2.81M|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (773:14): [True: 0, False: 2.81M]
  |  |  ------------------
  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  775|  2.81M|  } else {\
  |  |  776|  2.81M|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|  2.81M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  777|  2.81M|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  679|  2.81M|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  778|  2.81M|  }\
  |  |  779|  2.81M|}
  ------------------
 1302|       |
 1303|  2.81M|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  765|  2.81M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1303:7): [True: 632k, False: 2.18M]
  ------------------
 1304|       |    /* Traverse tree for this bin looking for node with size == nb */
 1305|   632k|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  787|   632k|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  676|   632k|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (787:5): [True: 0, False: 632k]
  |  |  ------------------
  |  |  788|   632k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|   632k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|   632k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  679|   632k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1306|   632k|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1307|   709k|    for (;;) {
 1308|   709k|      tchunkptr rt;
 1309|   709k|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|   709k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   709k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   709k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   709k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   709k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   709k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|   709k|      if (trem < rsize) {
  ------------------
  |  Branch (1310:11): [True: 199k, False: 509k]
  ------------------
 1311|   199k|	v = t;
 1312|   199k|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1312:6): [True: 87.5k, False: 112k]
  ------------------
 1313|  87.5k|	  break;
 1314|   199k|      }
 1315|   621k|      rt = t->child[1];
 1316|   621k|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|   621k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|   621k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1317|   621k|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1317:11): [True: 50.7k, False: 570k]
  |  Branch (1317:22): [True: 4.78k, False: 45.9k]
  ------------------
 1318|  4.78k|	rst = rt;
 1319|   621k|      if (t == 0) {
  ------------------
  |  Branch (1319:11): [True: 544k, False: 77.0k]
  ------------------
 1320|   544k|	t = rst; /* set t to least subtree holding sizes > nb */
 1321|   544k|	break;
 1322|   544k|      }
 1323|  77.0k|      sizebits <<= 1;
 1324|  77.0k|    }
 1325|   632k|  }
 1326|       |
 1327|  2.81M|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1327:7): [True: 2.72M, False: 92.1k]
  |  Branch (1327:17): [True: 2.62M, False: 103k]
  ------------------
 1328|  2.62M|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  810|  2.62M|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1329|  2.62M|    if (leftbits != 0)
  ------------------
  |  Branch (1329:9): [True: 1.73M, False: 884k]
  ------------------
 1330|  1.73M|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  765|  1.73M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1331|  2.62M|  }
 1332|       |
 1333|  4.74M|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1333:10): [True: 1.92M, False: 2.81M]
  ------------------
 1334|  1.92M|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|  1.92M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  1.92M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.92M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.92M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  1.92M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.92M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1335|  1.92M|    if (trem < rsize) {
  ------------------
  |  Branch (1335:9): [True: 1.80M, False: 125k]
  ------------------
 1336|  1.80M|      rsize = trem;
 1337|  1.80M|      v = t;
 1338|  1.80M|    }
 1339|  1.92M|    t = leftmost_child(t);
  ------------------
  |  |  659|  1.92M|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (659:28): [True: 51.4k, False: 1.87M]
  |  |  ------------------
  ------------------
 1340|  1.92M|  }
 1341|       |
 1342|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1343|  2.81M|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1343:7): [True: 1.93M, False: 884k]
  |  Branch (1343:17): [True: 1.90M, False: 23.8k]
  ------------------
 1344|  1.90M|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  611|  1.90M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1345|  1.90M|    unlink_large_chunk(m, v);
  ------------------
  |  |  921|  1.90M|#define unlink_large_chunk(M, X) {\
  |  |  922|  1.90M|  tchunkptr XP = X->parent;\
  |  |  923|  1.90M|  tchunkptr R;\
  |  |  924|  1.90M|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 39.6k, False: 1.86M]
  |  |  ------------------
  |  |  925|  39.6k|    tchunkptr F = X->fd;\
  |  |  926|  39.6k|    R = X->bk;\
  |  |  927|  39.6k|    F->bk = R;\
  |  |  928|  39.6k|    R->fd = F;\
  |  |  929|  1.86M|  } else {\
  |  |  930|  1.86M|    tchunkptr *RP;\
  |  |  931|  1.86M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 21.0k, False: 1.84M]
  |  |  ------------------
  |  |  932|  1.86M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 8.15k, False: 1.83M]
  |  |  ------------------
  |  |  933|  29.1k|      tchunkptr *CP;\
  |  |  934|  31.0k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 1.18k, False: 29.9k]
  |  |  ------------------
  |  |  935|  31.0k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 745, False: 29.1k]
  |  |  ------------------
  |  |  936|  1.93k|	R = *(RP = CP);\
  |  |  937|  1.93k|      }\
  |  |  938|  29.1k|      *RP = 0;\
  |  |  939|  29.1k|    }\
  |  |  940|  1.86M|  }\
  |  |  941|  1.90M|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 1.90M, False: 0]
  |  |  ------------------
  |  |  942|  1.90M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|  1.90M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|  1.90M|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 1.82M, False: 82.3k]
  |  |  ------------------
  |  |  944|  1.82M|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 1.76M, False: 60.8k]
  |  |  ------------------
  |  |  945|  1.82M|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|  1.76M|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  1.76M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|  1.82M|    } else {\
  |  |  947|  82.3k|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 45.5k, False: 36.7k]
  |  |  ------------------
  |  |  948|  82.3k|	XP->child[0] = R;\
  |  |  949|  82.3k|      else \
  |  |  950|  82.3k|	XP->child[1] = R;\
  |  |  951|  82.3k|    }\
  |  |  952|  1.90M|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 68.8k, False: 1.83M]
  |  |  ------------------
  |  |  953|  68.8k|      tchunkptr C0, C1;\
  |  |  954|  68.8k|      R->parent = XP;\
  |  |  955|  68.8k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 4.24k, False: 64.5k]
  |  |  ------------------
  |  |  956|  4.24k|	R->child[0] = C0;\
  |  |  957|  4.24k|	C0->parent = R;\
  |  |  958|  4.24k|      }\
  |  |  959|  68.8k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 5.40k, False: 63.4k]
  |  |  ------------------
  |  |  960|  5.40k|	R->child[1] = C1;\
  |  |  961|  5.40k|	C1->parent = R;\
  |  |  962|  5.40k|      }\
  |  |  963|  68.8k|    }\
  |  |  964|  1.90M|  }\
  |  |  965|  1.90M|}
  ------------------
 1346|  1.90M|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  1.90M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  1.90M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.90M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.90M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.90M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.90M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.90M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.90M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1346:9): [True: 106k, False: 1.80M]
  ------------------
 1347|   106k|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  819|   106k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|   106k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   106k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|   106k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   106k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|   106k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|   106k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   106k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1348|  1.80M|    } else {
 1349|  1.80M|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  824|  1.80M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  1.80M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.80M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  1.80M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.80M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1350|  1.80M|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|  1.80M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  1.80M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.80M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  1.80M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1351|  1.80M|      insert_chunk(m, r, rsize);
  ------------------
  |  |  970|  1.80M|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  1.80M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  1.80M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  1.80M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 13.3k, False: 1.78M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|  13.3k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  13.3k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  13.3k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  13.3k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  13.3k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  13.3k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  13.3k|  mchunkptr F = B;\
  |  |  |  |  833|  13.3k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  13.3k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  13.3k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 13.0k, False: 240]
  |  |  |  |  ------------------
  |  |  |  |  834|  13.3k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  13.0k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  13.0k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  13.3k|  else\
  |  |  |  |  836|  13.3k|    F = B->fd;\
  |  |  |  |  837|  13.3k|  B->fd = P;\
  |  |  |  |  838|  13.3k|  F->bk = P;\
  |  |  |  |  839|  13.3k|  P->fd = F;\
  |  |  |  |  840|  13.3k|  P->bk = B;\
  |  |  |  |  841|  13.3k|}
  |  |  ------------------
  |  |  971|  1.78M|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|  1.78M|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|  1.78M|  tbinptr *H;\
  |  |  |  |  884|  1.78M|  bindex_t I;\
  |  |  |  |  885|  1.78M|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|  1.78M|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|  1.78M|{\
  |  |  |  |  |  |  770|  1.78M|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  1.78M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|  1.78M|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 1.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|  1.78M|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 1.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|  1.78M|  } else {\
  |  |  |  |  |  |  776|  1.78M|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  1.78M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|  1.78M|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  1.78M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|  1.78M|  }\
  |  |  |  |  |  |  779|  1.78M|}
  |  |  |  |  ------------------
  |  |  |  |  886|  1.78M|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  1.78M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|  1.78M|  X->index = I;\
  |  |  |  |  888|  1.78M|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|  1.78M|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|  1.78M|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.78M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 1.67M, False: 108k]
  |  |  |  |  ------------------
  |  |  |  |  890|  1.67M|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|  1.67M|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.67M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|  1.67M|    *H = X;\
  |  |  |  |  892|  1.67M|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|  1.67M|    X->fd = X->bk = X;\
  |  |  |  |  894|  1.67M|  } else {\
  |  |  |  |  895|   108k|    tchunkptr T = *H;\
  |  |  |  |  896|   108k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|   108k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|   108k|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 108k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|   108k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|   108k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   108k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|   108k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|   121k|    for (;;) {\
  |  |  |  |  898|   121k|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|   121k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|   121k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|   121k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|   121k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|   121k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|   121k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 119k, False: 1.86k]
  |  |  |  |  ------------------
  |  |  |  |  899|   119k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   119k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   119k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|   119k|	K <<= 1;\
  |  |  |  |  901|   119k|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 12.9k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  902|  12.9k|	  T = *C;\
  |  |  |  |  903|   106k|	} else {\
  |  |  |  |  904|   106k|	  *C = X;\
  |  |  |  |  905|   106k|	  X->parent = T;\
  |  |  |  |  906|   106k|	  X->fd = X->bk = X;\
  |  |  |  |  907|   106k|	  break;\
  |  |  |  |  908|   106k|	}\
  |  |  |  |  909|   119k|      } else {\
  |  |  |  |  910|  1.86k|	tchunkptr F = T->fd;\
  |  |  |  |  911|  1.86k|	T->fd = F->bk = X;\
  |  |  |  |  912|  1.86k|	X->fd = F;\
  |  |  |  |  913|  1.86k|	X->bk = T;\
  |  |  |  |  914|  1.86k|	X->parent = 0;\
  |  |  |  |  915|  1.86k|	break;\
  |  |  |  |  916|  1.86k|      }\
  |  |  |  |  917|   121k|    }\
  |  |  |  |  918|   108k|  }\
  |  |  |  |  919|  1.78M|}
  |  |  ------------------
  ------------------
 1352|  1.80M|    }
 1353|  1.90M|    return chunk2mem(v);
  ------------------
  |  |  575|  1.90M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.90M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.90M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|  1.90M|  }
 1355|   907k|  return NULL;
 1356|  2.81M|}
lj_alloc.c:alloc_sys:
 1149|   252k|{
 1150|   252k|  char *tbase = CMFAIL;
  ------------------
  |  |   72|   252k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|   252k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|   252k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1151|   252k|  size_t tsize = 0;
 1152|       |
 1153|       |  /* Directly map large chunks */
 1154|   252k|  if (LJ_UNLIKELY(nb >= DEFAULT_MMAP_THRESHOLD)) {
  ------------------
  |  |  146|   252k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 112k, False: 139k]
  |  |  ------------------
  ------------------
 1155|   112k|    void *mem = direct_alloc(m, nb);
 1156|   112k|    if (mem != 0)
  ------------------
  |  Branch (1156:9): [True: 112k, False: 0]
  ------------------
 1157|   112k|      return mem;
 1158|   112k|  }
 1159|       |
 1160|   139k|  {
 1161|   139k|    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |  754|   139k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|   139k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|   139k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|   139k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|   139k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   139k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|   139k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   139k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   139k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   139k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1162|   139k|    size_t rsize = granularity_align(req);
  ------------------
  |  |  711|   139k|  (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   41|   139k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                 (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  712|   139k|   & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   41|   139k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                  & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   55|   139k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1163|   139k|    if (LJ_LIKELY(rsize > nb)) { /* Fail if wraps around zero */
  ------------------
  |  |  145|   139k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 139k, False: 0]
  |  |  ------------------
  ------------------
 1164|   139k|      char *mp = (char *)(CALL_MMAP(m->prng, rsize));
  ------------------
  |  |  438|   139k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1165|   139k|      if (mp != CMFAIL) {
  ------------------
  |  |   72|   139k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|   139k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|   139k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1165:11): [True: 139k, False: 0]
  ------------------
 1166|   139k|	tbase = mp;
 1167|   139k|	tsize = rsize;
 1168|   139k|      }
 1169|   139k|    }
 1170|   139k|  }
 1171|       |
 1172|   139k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|   139k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|   139k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|   139k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1172:7): [True: 139k, False: 0]
  ------------------
 1173|   139k|    msegmentptr sp = &m->seg;
 1174|       |    /* Try to merge with an existing segment */
 1175|   409k|    while (sp != 0 && tbase != sp->base + sp->size)
  ------------------
  |  Branch (1175:12): [True: 326k, False: 83.3k]
  |  Branch (1175:23): [True: 269k, False: 56.4k]
  ------------------
 1176|   269k|      sp = sp->next;
 1177|   139k|    if (sp != 0 && segment_holds(sp, m->top)) { /* append */
  ------------------
  |  |  722|  56.4k|  ((char *)(A) >= S->base && (char *)(A) < S->base + S->size)
  |  |  ------------------
  |  |  |  Branch (722:4): [True: 56.4k, False: 17]
  |  |  |  Branch (722:30): [True: 56.3k, False: 96]
  |  |  ------------------
  ------------------
  |  Branch (1177:9): [True: 56.4k, False: 83.3k]
  ------------------
 1178|  56.3k|      sp->size += tsize;
 1179|  56.3k|      init_top(m, m->top, m->topsize + tsize);
 1180|  83.4k|    } else {
 1181|  83.4k|      sp = &m->seg;
 1182|   236k|      while (sp != 0 && sp->base != tbase + tsize)
  ------------------
  |  Branch (1182:14): [True: 188k, False: 47.1k]
  |  Branch (1182:25): [True: 152k, False: 36.2k]
  ------------------
 1183|   152k|	sp = sp->next;
 1184|  83.4k|      if (sp != 0) {
  ------------------
  |  Branch (1184:11): [True: 36.2k, False: 47.1k]
  ------------------
 1185|  36.2k|	char *oldbase = sp->base;
 1186|  36.2k|	sp->base = tbase;
 1187|  36.2k|	sp->size += tsize;
 1188|  36.2k|	return prepend_alloc(m, tbase, oldbase, nb);
 1189|  47.1k|      } else {
 1190|  47.1k|	add_segment(m, tbase, tsize);
 1191|  47.1k|      }
 1192|  83.4k|    }
 1193|       |
 1194|   103k|    if (nb < m->topsize) { /* Allocate from new or extended top space */
  ------------------
  |  Branch (1194:9): [True: 103k, False: 0]
  ------------------
 1195|   103k|      size_t rsize = m->topsize -= nb;
 1196|   103k|      mchunkptr p = m->top;
 1197|   103k|      mchunkptr r = m->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|   103k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1198|   103k|      r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  595|   103k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   103k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1199|   103k|      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  824|   103k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|   103k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   103k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|   103k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   103k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1200|   103k|      return chunk2mem(p);
  ------------------
  |  |  575|   103k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   103k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   103k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1201|   103k|    }
 1202|   103k|  }
 1203|       |
 1204|      0|  return NULL;
 1205|   139k|}
lj_alloc.c:direct_alloc:
  980|   112k|{
  981|   112k|  size_t mmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |  717|   112k|#define mmap_align(S)	page_align(S)
  |  |  ------------------
  |  |  |  |  707|   112k| (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   112k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   112k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   112k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   112k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  982|   112k|  if (LJ_LIKELY(mmsize > nb)) {     /* Check for wrap around 0 */
  ------------------
  |  |  145|   112k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 112k, False: 0]
  |  |  ------------------
  ------------------
  983|   112k|    char *mm = (char *)(DIRECT_MMAP(m->prng, mmsize));
  ------------------
  |  |  531|   112k|#define DIRECT_MMAP(prng, s)	CALL_MMAP(prng, s)
  |  |  ------------------
  |  |  |  |  438|   112k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  |  |  ------------------
  ------------------
  984|   112k|    if (mm != CMFAIL) {
  ------------------
  |  |   72|   112k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|   112k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|   112k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (984:9): [True: 112k, False: 0]
  ------------------
  985|   112k|      size_t offset = align_offset(chunk2mem(mm));
  ------------------
  |  |   66|   112k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|   112k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   112k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   112k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 112k, False: 0]
  |  |  ------------------
  |  |   67|   112k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  986|   112k|      size_t psize = mmsize - offset - DIRECT_FOOT_PAD;
  ------------------
  |  |  563|   112k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|   112k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   112k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  987|   112k|      mchunkptr p = (mchunkptr)(mm + offset);
  988|   112k|      p->prev_foot = offset | IS_DIRECT_BIT;
  ------------------
  |  |   74|   112k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   112k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  989|   112k|      p->head = psize|CINUSE_BIT;
  ------------------
  |  |  596|   112k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|   112k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
  990|   112k|      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  611|   112k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                    chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  600|   112k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  597|   112k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   112k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   112k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   112k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   112k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|   112k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
  991|   112k|      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
  ------------------
  |  |  611|   112k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  992|   112k|      return chunk2mem(p);
  ------------------
  |  |  575|   112k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   112k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   112k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  993|   112k|    }
  994|   112k|  }
  995|      0|  UNUSED(m);
  ------------------
  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  996|      0|  return NULL;
  997|   112k|}
lj_alloc.c:prepend_alloc:
 1062|  36.2k|{
 1063|  36.2k|  mchunkptr p = align_as_chunk(newbase);
  ------------------
  |  |  579|  36.2k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  36.2k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.2k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|  36.2k|  mchunkptr oldfirst = align_as_chunk(oldbase);
  ------------------
  |  |  579|  36.2k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  36.2k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  36.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  36.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  36.2k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1065|  36.2k|  size_t psize = (size_t)((char *)oldfirst - (char *)p);
 1066|  36.2k|  mchunkptr q = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  36.2k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1067|  36.2k|  size_t qsize = psize - nb;
 1068|  36.2k|  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  824|  36.2k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  36.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  36.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  36.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1069|       |
 1070|       |  /* consolidate remainder with first chunk of old base */
 1071|  36.2k|  if (oldfirst == m->top) {
  ------------------
  |  Branch (1071:7): [True: 5, False: 36.2k]
  ------------------
 1072|      5|    size_t tsize = m->topsize += qsize;
 1073|      5|    m->top = q;
 1074|      5|    q->head = tsize | PINUSE_BIT;
  ------------------
  |  |  595|      5|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      5|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1075|  36.2k|  } else if (oldfirst == m->dv) {
  ------------------
  |  Branch (1075:14): [True: 0, False: 36.2k]
  ------------------
 1076|      0|    size_t dsize = m->dvsize += qsize;
 1077|      0|    m->dv = q;
 1078|      0|    set_size_and_pinuse_of_free_chunk(q, dsize);
  ------------------
  |  |  627|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1079|  36.2k|  } else {
 1080|  36.2k|    if (!cinuse(oldfirst)) {
  ------------------
  |  |  603|  36.2k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  36.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  36.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1080:9): [True: 100, False: 36.1k]
  ------------------
 1081|    100|      size_t nsize = chunksize(oldfirst);
  ------------------
  |  |  605|    100|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|    100|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|    100|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    100|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|    100|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    100|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1082|    100|      unlink_chunk(m, oldfirst, nsize);
  ------------------
  |  |  974|    100|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|    100|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|    100|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|    100|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 5, False: 95]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|      5|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|      5|  mchunkptr F = P->fd;\
  |  |  |  |  846|      5|  mchunkptr B = P->bk;\
  |  |  |  |  847|      5|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|      5|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|      5|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|      5|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 5, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  849|      5|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      5|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|      5|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|      5|  } else {\
  |  |  |  |  851|      0|    F->bk = B;\
  |  |  |  |  852|      0|    B->fd = F;\
  |  |  |  |  853|      0|  }\
  |  |  |  |  854|      5|}
  |  |  ------------------
  |  |  975|     95|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|     95|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|     95|  tchunkptr XP = X->parent;\
  |  |  |  |  923|     95|  tchunkptr R;\
  |  |  |  |  924|     95|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 18, False: 77]
  |  |  |  |  ------------------
  |  |  |  |  925|     18|    tchunkptr F = X->fd;\
  |  |  |  |  926|     18|    R = X->bk;\
  |  |  |  |  927|     18|    F->bk = R;\
  |  |  |  |  928|     18|    R->fd = F;\
  |  |  |  |  929|     77|  } else {\
  |  |  |  |  930|     77|    tchunkptr *RP;\
  |  |  |  |  931|     77|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 13, False: 64]
  |  |  |  |  ------------------
  |  |  |  |  932|     77|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 6, False: 58]
  |  |  |  |  ------------------
  |  |  |  |  933|     19|      tchunkptr *CP;\
  |  |  |  |  934|     19|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 0, False: 19]
  |  |  |  |  ------------------
  |  |  |  |  935|     19|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 0, False: 19]
  |  |  |  |  ------------------
  |  |  |  |  936|      0|	R = *(RP = CP);\
  |  |  |  |  937|      0|      }\
  |  |  |  |  938|     19|      *RP = 0;\
  |  |  |  |  939|     19|    }\
  |  |  |  |  940|     77|  }\
  |  |  |  |  941|     95|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 86, False: 9]
  |  |  |  |  ------------------
  |  |  |  |  942|     86|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|     86|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|     86|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 55, False: 31]
  |  |  |  |  ------------------
  |  |  |  |  944|     55|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 39, False: 16]
  |  |  |  |  ------------------
  |  |  |  |  945|     55|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|     39|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|     39|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|     55|    } else {\
  |  |  |  |  947|     31|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 21, False: 10]
  |  |  |  |  ------------------
  |  |  |  |  948|     31|	XP->child[0] = R;\
  |  |  |  |  949|     31|      else \
  |  |  |  |  950|     31|	XP->child[1] = R;\
  |  |  |  |  951|     31|    }\
  |  |  |  |  952|     86|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 28, False: 58]
  |  |  |  |  ------------------
  |  |  |  |  953|     28|      tchunkptr C0, C1;\
  |  |  |  |  954|     28|      R->parent = XP;\
  |  |  |  |  955|     28|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 3, False: 25]
  |  |  |  |  ------------------
  |  |  |  |  956|      3|	R->child[0] = C0;\
  |  |  |  |  957|      3|	C0->parent = R;\
  |  |  |  |  958|      3|      }\
  |  |  |  |  959|     28|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 1, False: 27]
  |  |  |  |  ------------------
  |  |  |  |  960|      1|	R->child[1] = C1;\
  |  |  |  |  961|      1|	C1->parent = R;\
  |  |  |  |  962|      1|      }\
  |  |  |  |  963|     28|    }\
  |  |  |  |  964|     86|  }\
  |  |  |  |  965|     95|}
  |  |  ------------------
  ------------------
 1083|    100|      oldfirst = chunk_plus_offset(oldfirst, nsize);
  ------------------
  |  |  611|    100|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1084|    100|      qsize += nsize;
 1085|    100|    }
 1086|  36.2k|    set_free_with_pinuse(q, qsize, oldfirst);
  ------------------
  |  |  631|  36.2k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  36.2k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  36.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  36.2k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  36.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  36.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  36.2k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1087|  36.2k|    insert_chunk(m, q, qsize);
  ------------------
  |  |  970|  36.2k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  36.2k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  36.2k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  36.2k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 106, False: 36.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|    106|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|    106|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|    106|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|    106|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|    106|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|    106|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|    106|  mchunkptr F = B;\
  |  |  |  |  833|    106|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|    106|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|    106|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 103, False: 3]
  |  |  |  |  ------------------
  |  |  |  |  834|    106|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|    103|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|    103|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|    106|  else\
  |  |  |  |  836|    106|    F = B->fd;\
  |  |  |  |  837|    106|  B->fd = P;\
  |  |  |  |  838|    106|  F->bk = P;\
  |  |  |  |  839|    106|  P->fd = F;\
  |  |  |  |  840|    106|  P->bk = B;\
  |  |  |  |  841|    106|}
  |  |  ------------------
  |  |  971|  36.1k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|  36.1k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|  36.1k|  tbinptr *H;\
  |  |  |  |  884|  36.1k|  bindex_t I;\
  |  |  |  |  885|  36.1k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|  36.1k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|  36.1k|{\
  |  |  |  |  |  |  770|  36.1k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  36.1k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|  36.1k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|  36.1k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|  36.1k|  } else {\
  |  |  |  |  |  |  776|  36.1k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  36.1k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|  36.1k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  36.1k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|  36.1k|  }\
  |  |  |  |  |  |  779|  36.1k|}
  |  |  |  |  ------------------
  |  |  |  |  886|  36.1k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  36.1k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|  36.1k|  X->index = I;\
  |  |  |  |  888|  36.1k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|  36.1k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|  36.1k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  36.1k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 34.6k, False: 1.51k]
  |  |  |  |  ------------------
  |  |  |  |  890|  34.6k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|  34.6k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  34.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|  34.6k|    *H = X;\
  |  |  |  |  892|  34.6k|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|  34.6k|    X->fd = X->bk = X;\
  |  |  |  |  894|  34.6k|  } else {\
  |  |  |  |  895|  1.51k|    tchunkptr T = *H;\
  |  |  |  |  896|  1.51k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|  1.51k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|  1.51k|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 1.51k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|  1.51k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|  1.51k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.51k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  1.51k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|  1.99k|    for (;;) {\
  |  |  |  |  898|  1.99k|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  1.99k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|  1.99k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|  1.99k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|  1.99k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|  1.99k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|  1.99k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 1.84k, False: 156]
  |  |  |  |  ------------------
  |  |  |  |  899|  1.84k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  1.84k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.84k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|  1.84k|	K <<= 1;\
  |  |  |  |  901|  1.84k|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 482, False: 1.36k]
  |  |  |  |  ------------------
  |  |  |  |  902|    482|	  T = *C;\
  |  |  |  |  903|  1.36k|	} else {\
  |  |  |  |  904|  1.36k|	  *C = X;\
  |  |  |  |  905|  1.36k|	  X->parent = T;\
  |  |  |  |  906|  1.36k|	  X->fd = X->bk = X;\
  |  |  |  |  907|  1.36k|	  break;\
  |  |  |  |  908|  1.36k|	}\
  |  |  |  |  909|  1.84k|      } else {\
  |  |  |  |  910|    156|	tchunkptr F = T->fd;\
  |  |  |  |  911|    156|	T->fd = F->bk = X;\
  |  |  |  |  912|    156|	X->fd = F;\
  |  |  |  |  913|    156|	X->bk = T;\
  |  |  |  |  914|    156|	X->parent = 0;\
  |  |  |  |  915|    156|	break;\
  |  |  |  |  916|    156|      }\
  |  |  |  |  917|  1.99k|    }\
  |  |  |  |  918|  1.51k|  }\
  |  |  |  |  919|  36.1k|}
  |  |  ------------------
  ------------------
 1088|  36.2k|  }
 1089|       |
 1090|  36.2k|  return chunk2mem(p);
  ------------------
  |  |  575|  36.2k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  36.2k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  36.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1091|  36.2k|}
lj_alloc.c:add_segment:
 1095|  47.1k|{
 1096|       |  /* Determine locations and sizes of segment, fenceposts, old top */
 1097|  47.1k|  char *old_top = (char *)m->top;
 1098|  47.1k|  msegmentptr oldsp = segment_holding(m, old_top);
 1099|       |#if LUAJIT_USE_ASAN
 1100|       |  ASAN_UNPOISON_MEMORY_REGION(oldsp, sizeof(struct malloc_segment));
 1101|       |#endif
 1102|  47.1k|  char *old_end = oldsp->base + oldsp->size;
 1103|  47.1k|  size_t ssize = pad_request(sizeof(struct malloc_segment));
  ------------------
  |  |  587|  47.1k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  47.1k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  47.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1104|  47.1k|  char *rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |   58|  47.1k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  ------------------
  |  |  |  |   49|  47.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
                char *rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1105|  47.1k|  size_t offset = align_offset(chunk2mem(rawsp));
  ------------------
  |  |   66|  47.1k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 0, False: 47.1k]
  |  |  ------------------
  |  |   67|  47.1k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1106|  47.1k|  char *asp = rawsp + offset;
 1107|  47.1k|  char *csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
  ------------------
  |  |  567|  47.1k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  47.1k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1107:15): [True: 192, False: 46.9k]
  ------------------
 1108|  47.1k|  mchunkptr sp = (mchunkptr)csp;
 1109|  47.1k|  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
  ------------------
  |  |  575|  47.1k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  47.1k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  47.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1110|       |#if LUAJIT_USE_ASAN
 1111|       |  ss = (msegmentptr)((void *)ss - REDZONE_SIZE);
 1112|       |#endif
 1113|  47.1k|  mchunkptr tnext = chunk_plus_offset(sp, ssize);
  ------------------
  |  |  611|  47.1k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1114|  47.1k|  mchunkptr p = tnext;
 1115|       |
 1116|       |  /* reset top to new space */
 1117|  47.1k|  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
  ------------------
  |  |  754|  47.1k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  47.1k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  47.1k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  47.1k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  47.1k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  47.1k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  47.1k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  47.1k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  47.1k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  47.1k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1118|       |
 1119|       |  /* Set up segment record */
 1120|  47.1k|  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
  ------------------
  |  |  824|  47.1k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  47.1k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  47.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  47.1k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  47.1k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1121|  47.1k|  *ss = m->seg; /* Push current record */
 1122|  47.1k|  m->seg.base = tbase;
 1123|  47.1k|  m->seg.size = tsize;
 1124|  47.1k|  m->seg.next = ss;
 1125|       |
 1126|       |  /* Insert trailing fenceposts */
 1127|   141k|  for (;;) {
 1128|   141k|    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
  ------------------
  |  |  611|   141k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1129|   141k|    p->head = FENCEPOST_HEAD;
  ------------------
  |  |  600|   141k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  597|   141k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   141k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   141k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   141k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   141k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|   141k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
 1130|   141k|    if ((char *)(&(nextp->head)) < old_end)
  ------------------
  |  Branch (1130:9): [True: 94.6k, False: 47.1k]
  ------------------
 1131|  94.6k|      p = nextp;
 1132|  47.1k|    else
 1133|  47.1k|      break;
 1134|   141k|  }
 1135|       |
 1136|       |  /* Insert the rest of old top into a bin as an ordinary free chunk */
 1137|  47.1k|  if (csp != old_top) {
  ------------------
  |  Branch (1137:7): [True: 46.9k, False: 192]
  ------------------
 1138|  46.9k|    mchunkptr q = (mchunkptr)old_top;
 1139|  46.9k|    size_t psize = (size_t)(csp - old_top);
 1140|  46.9k|    mchunkptr tn = chunk_plus_offset(q, psize);
  ------------------
  |  |  611|  46.9k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1141|  46.9k|    set_free_with_pinuse(q, psize, tn);
  ------------------
  |  |  631|  46.9k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  46.9k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  46.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  46.9k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  46.9k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  46.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  46.9k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1142|  46.9k|    insert_chunk(m, q, psize);
  ------------------
  |  |  970|  46.9k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  46.9k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  46.9k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  46.9k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 1.01k, False: 45.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|  1.01k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  1.01k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  1.01k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  1.01k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  1.01k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  1.01k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  1.01k|  mchunkptr F = B;\
  |  |  |  |  833|  1.01k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  1.01k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.01k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 993, False: 22]
  |  |  |  |  ------------------
  |  |  |  |  834|  1.01k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|    993|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|    993|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  1.01k|  else\
  |  |  |  |  836|  1.01k|    F = B->fd;\
  |  |  |  |  837|  1.01k|  B->fd = P;\
  |  |  |  |  838|  1.01k|  F->bk = P;\
  |  |  |  |  839|  1.01k|  P->fd = F;\
  |  |  |  |  840|  1.01k|  P->bk = B;\
  |  |  |  |  841|  1.01k|}
  |  |  ------------------
  |  |  971|  45.9k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|  45.9k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|  45.9k|  tbinptr *H;\
  |  |  |  |  884|  45.9k|  bindex_t I;\
  |  |  |  |  885|  45.9k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|  45.9k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|  45.9k|{\
  |  |  |  |  |  |  770|  45.9k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  45.9k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|  45.9k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 45.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|  45.9k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 45.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|  45.9k|  } else {\
  |  |  |  |  |  |  776|  45.9k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  45.9k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|  45.9k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  45.9k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|  45.9k|  }\
  |  |  |  |  |  |  779|  45.9k|}
  |  |  |  |  ------------------
  |  |  |  |  886|  45.9k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  45.9k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|  45.9k|  X->index = I;\
  |  |  |  |  888|  45.9k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|  45.9k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|  45.9k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  45.9k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 35.6k, False: 10.2k]
  |  |  |  |  ------------------
  |  |  |  |  890|  35.6k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|  35.6k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  35.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|  35.6k|    *H = X;\
  |  |  |  |  892|  35.6k|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|  35.6k|    X->fd = X->bk = X;\
  |  |  |  |  894|  35.6k|  } else {\
  |  |  |  |  895|  10.2k|    tchunkptr T = *H;\
  |  |  |  |  896|  10.2k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|  10.2k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|  10.2k|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 10.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|  10.2k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|  10.2k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  10.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  10.2k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|  12.8k|    for (;;) {\
  |  |  |  |  898|  12.8k|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  12.8k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|  12.8k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|  12.8k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|  12.8k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|  12.8k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|  12.8k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 12.6k, False: 183]
  |  |  |  |  ------------------
  |  |  |  |  899|  12.6k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|  12.6k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|  12.6k|	K <<= 1;\
  |  |  |  |  901|  12.6k|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 2.57k, False: 10.0k]
  |  |  |  |  ------------------
  |  |  |  |  902|  2.57k|	  T = *C;\
  |  |  |  |  903|  10.0k|	} else {\
  |  |  |  |  904|  10.0k|	  *C = X;\
  |  |  |  |  905|  10.0k|	  X->parent = T;\
  |  |  |  |  906|  10.0k|	  X->fd = X->bk = X;\
  |  |  |  |  907|  10.0k|	  break;\
  |  |  |  |  908|  10.0k|	}\
  |  |  |  |  909|  12.6k|      } else {\
  |  |  |  |  910|    183|	tchunkptr F = T->fd;\
  |  |  |  |  911|    183|	T->fd = F->bk = X;\
  |  |  |  |  912|    183|	X->fd = F;\
  |  |  |  |  913|    183|	X->bk = T;\
  |  |  |  |  914|    183|	X->parent = 0;\
  |  |  |  |  915|    183|	break;\
  |  |  |  |  916|    183|      }\
  |  |  |  |  917|  12.8k|    }\
  |  |  |  |  918|  10.2k|  }\
  |  |  |  |  919|  45.9k|}
  |  |  ------------------
  ------------------
 1143|  46.9k|  }
 1144|  47.1k|}
lj_alloc.c:lj_alloc_realloc:
 1642|   231k|{
 1643|       |#if LUAJIT_USE_ASAN
 1644|       |  if (nsize >= MAX_REQUEST)
 1645|       |    return NULL;
 1646|       |
 1647|       |  mstate m = (mstate)msp;
 1648|       |
 1649|       |  size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1650|       |  size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1651|       |
 1652|       |  void *newmem = lj_alloc_malloc(m, nsize);
 1653|       |
 1654|       |  if (newmem == NULL)
 1655|       |    return NULL;
 1656|       |
 1657|       |  memcpy(newmem, ptr, nsize > mem_size ? mem_size : nsize);
 1658|       |  ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1659|       |  return newmem;
 1660|       |#else
 1661|   231k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|   231k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|   231k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   231k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   231k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   231k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   231k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   231k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1661:7): [True: 0, False: 231k]
  ------------------
 1662|      0|    return NULL;
 1663|   231k|  } else {
 1664|   231k|    mstate m = (mstate)msp;
 1665|   231k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  576|   231k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   231k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   231k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1666|   231k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  605|   231k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   231k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   231k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   231k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   231k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1667|   231k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  611|   231k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1668|   231k|    mchunkptr newp = 0;
 1669|   231k|    size_t nb = request2size(nsize);
  ------------------
  |  |  591|   231k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  583|   231k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  567|   231k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  556|   231k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   231k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|   231k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   231k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|   231k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|   231k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   231k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  587|   231k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|   231k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   231k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   231k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   231k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   231k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   231k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (591:4): [True: 0, False: 231k]
  |  |  ------------------
  ------------------
 1670|       |
 1671|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1672|   231k|    if (is_direct(oldp)) {
  ------------------
  |  |  634|   231k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  595|   231k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   231k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|   155k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   155k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (634:4): [True: 155k, False: 76.4k]
  |  |  |  Branch (634:33): [True: 144k, False: 10.8k]
  |  |  ------------------
  ------------------
 1673|   144k|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1674|   144k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1674:16): [True: 41.4k, False: 45.8k]
  ------------------
 1675|  41.4k|      size_t rsize = oldsize - nb;
 1676|  41.4k|      newp = oldp;
 1677|  41.4k|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  41.4k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  41.4k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  41.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  41.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  41.4k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  41.4k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1677:11): [True: 41.4k, False: 0]
  ------------------
 1678|  41.4k|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  611|  41.4k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1679|  41.4k|	set_inuse(m, newp, nb);
  ------------------
  |  |  814|  41.4k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  41.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  41.4k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  41.4k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  41.4k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  41.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1680|  41.4k|	set_inuse(m, rem, rsize);
  ------------------
  |  |  814|  41.4k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  41.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  41.4k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  41.4k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  41.4k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  41.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1681|  41.4k|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  575|  41.4k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  41.4k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  41.4k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1682|  41.4k|      }
 1683|  45.8k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1683:16): [True: 15.2k, False: 30.6k]
  |  Branch (1683:34): [True: 8.24k, False: 6.96k]
  ------------------
 1684|       |      /* Expand into top */
 1685|  8.24k|      size_t newsize = oldsize + m->topsize;
 1686|  8.24k|      size_t newtopsize = newsize - nb;
 1687|  8.24k|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  611|  8.24k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1688|  8.24k|      set_inuse(m, oldp, nb);
  ------------------
  |  |  814|  8.24k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  8.24k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.24k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  8.24k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  8.24k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  8.24k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  8.24k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.24k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1689|  8.24k|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  595|  8.24k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  8.24k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1690|  8.24k|      m->top = newtop;
 1691|  8.24k|      m->topsize = newtopsize;
 1692|  8.24k|      newp = oldp;
 1693|  8.24k|    }
 1694|       |
 1695|   231k|    if (newp != 0) {
  ------------------
  |  Branch (1695:9): [True: 194k, False: 37.6k]
  ------------------
 1696|   194k|      return chunk2mem(newp);
  ------------------
  |  |  575|   194k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   194k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   194k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|   194k|    } else {
 1698|  37.6k|      void *newmem = lj_alloc_malloc(m, nsize);
 1699|  37.6k|      if (newmem != 0) {
  ------------------
  |  Branch (1699:11): [True: 37.6k, False: 0]
  ------------------
 1700|  37.6k|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  638|  37.6k| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  634|  37.6k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  37.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  37.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|  6.37k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  6.37k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (634:4): [True: 6.37k, False: 31.2k]
  |  |  |  |  |  Branch (634:33): [True: 0, False: 6.37k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  561|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|  37.6k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  37.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1701|  37.6k|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1701:22): [True: 37.6k, False: 0]
  ------------------
 1702|  37.6k|	lj_alloc_free(m, ptr);
 1703|  37.6k|      }
 1704|  37.6k|      return newmem;
 1705|  37.6k|    }
 1706|   231k|  }
 1707|   231k|#endif
 1708|   231k|}
lj_alloc.c:direct_resize:
 1000|   144k|{
 1001|   144k|  size_t oldsize = chunksize(oldp);
  ------------------
  |  |  605|   144k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   144k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   144k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   144k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   144k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   144k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1002|   144k|  if (is_small(nb)) /* Can't shrink direct regions below small size */
  ------------------
  |  |  758|   144k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  677|   144k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  675|   144k|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (758:22): [True: 0, False: 144k]
  |  |  ------------------
  ------------------
 1003|      0|    return NULL;
 1004|       |  /* Keep old chunk if big enough but not too big */
 1005|   144k|  if (oldsize >= nb + SIZE_T_SIZE &&
  ------------------
  |  |   49|   289k|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
  |  Branch (1005:7): [True: 84.5k, False: 59.9k]
  ------------------
 1006|   144k|      (oldsize - nb) <= (DEFAULT_GRANULARITY >> 1)) {
  ------------------
  |  |   41|  84.5k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
  |  Branch (1006:7): [True: 5.71k, False: 78.8k]
  ------------------
 1007|  5.71k|    return oldp;
 1008|   138k|  } else {
 1009|   138k|    size_t offset = oldp->prev_foot & ~IS_DIRECT_BIT;
  ------------------
  |  |   74|   138k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   138k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1010|   138k|    size_t oldmmsize = oldsize + offset + DIRECT_FOOT_PAD;
  ------------------
  |  |  563|   138k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|   138k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   138k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1011|   138k|    size_t newmmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |  717|   138k|#define mmap_align(S)	page_align(S)
  |  |  ------------------
  |  |  |  |  707|   138k| (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   138k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   138k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   138k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   138k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1012|   138k|    char *cp = (char *)CALL_MREMAP((char *)oldp - offset,
  ------------------
  |  |  513|   138k|#define CALL_MREMAP(addr, osz, nsz, mv) CALL_MREMAP_((addr), (osz), (nsz), (mv))
  ------------------
 1013|   138k|				   oldmmsize, newmmsize, CALL_MREMAP_MV);
 1014|   138k|    if (cp != CMFAIL) {
  ------------------
  |  |   72|   138k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|   138k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|   138k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1014:9): [True: 138k, False: 0]
  ------------------
 1015|   138k|      mchunkptr newp = (mchunkptr)(cp + offset);
 1016|   138k|      size_t psize = newmmsize - offset - DIRECT_FOOT_PAD;
  ------------------
  |  |  563|   138k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|   138k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   138k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1017|   138k|      newp->head = psize|CINUSE_BIT;
  ------------------
  |  |  596|   138k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|   138k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1018|   138k|      chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  611|   138k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                    chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  600|   138k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  597|   138k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   138k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   138k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   138k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   138k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|   138k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
 1019|   138k|      chunk_plus_offset(newp, psize+SIZE_T_SIZE)->head = 0;
  ------------------
  |  |  611|   138k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1020|   138k|      return newp;
 1021|   138k|    }
 1022|   138k|  }
 1023|      0|  return NULL;
 1024|   144k|}

lua_gettop:
  146|  72.4k|{
  147|  72.4k|  return (int)(L->top - L->base);
  148|  72.4k|}
lua_settop:
  151|  72.5k|{
  152|  72.5k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 36.2k, False: 36.2k]
  ------------------
  153|  36.2k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  36.2k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 36.2k]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|  36.2k|    } else {
  159|  36.2k|      L->top = L->base + idx;
  160|  36.2k|    }
  161|  36.2k|  } else {
  162|  36.2k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|  36.2k|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|  36.2k|  }
  165|  72.5k|}
lua_remove:
  168|  36.2k|{
  169|  36.2k|  TValue *p = index2adr_stack(L, idx);
  170|  72.5k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 36.2k, False: 36.2k]
  ------------------
  171|  36.2k|  L->top--;
  172|  36.2k|}
lua_pushvalue:
  215|  72.5k|{
  216|  72.5k|  copyTV(L, L->top, index2adr(L, idx));
  217|  72.5k|  incr_top(L);
  ------------------
  |  |   12|  72.5k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   145k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  72.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 72.5k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|  72.5k|}
lua_type:
  223|  36.2k|{
  224|  36.2k|  cTValue *o = index2adr(L, idx);
  225|  36.2k|  if (tvisnumber(o)) {
  ------------------
  |  |  802|  36.2k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  36.2k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|  36.2k|  } else if (o == niltv(L)) {
  ------------------
  |  |  667|  36.2k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  36.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 36.2k]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|  36.2k|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|  36.2k|    uint32_t t = ~itype(o);
  ------------------
  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|  36.2k|#if LJ_64
  236|  36.2k|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|  36.2k|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|  36.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 36.2k]
  |  |  |  |  |  Branch (355:5): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|  36.2k|    return tt;
  242|  36.2k|  }
  243|  36.2k|}
lua_tolstring:
  510|  36.2k|{
  511|  36.2k|  TValue *o = index2adr(L, idx);
  512|  36.2k|  GCstr *s;
  513|  36.2k|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  36.2k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
  514|  36.2k|    s = strV(o);
  ------------------
  |  |  859|  36.2k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  36.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  515|  36.2k|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  516|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  517|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  518|      0|    s = lj_strfmt_number(L, o);
  519|      0|    setstrV(L, o, s);
  520|      0|  } else {
  521|      0|    if (len != NULL) *len = 0;
  ------------------
  |  Branch (521:9): [True: 0, False: 0]
  ------------------
  522|      0|    return NULL;
  523|      0|  }
  524|  36.2k|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (524:7): [True: 0, False: 36.2k]
  ------------------
  525|  36.2k|  return strdata(s);
  ------------------
  |  |  316|  36.2k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  526|  36.2k|}
lua_objlen:
  582|  10.4M|{
  583|  10.4M|  TValue *o = index2adr(L, idx);
  584|  10.4M|  if (tvisstr(o)) {
  ------------------
  |  |  795|  10.4M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  10.4M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  10.4M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 10.4M, False: 0]
  |  |  ------------------
  ------------------
  585|  10.4M|    return strV(o)->len;
  ------------------
  |  |  859|  10.4M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  10.4M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  10.4M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  10.4M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.4M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  10.4M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  586|  10.4M|  } else if (tvistab(o)) {
  ------------------
  |  |  800|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  587|      0|    return (size_t)lj_tab_len(tabV(o));
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  588|      0|  } else if (tvisudata(o)) {
  ------------------
  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  589|      0|    return udataV(o)->len;
  ------------------
  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  590|      0|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  591|      0|    GCstr *s = lj_strfmt_number(L, o);
  592|      0|    setstrV(L, o, s);
  593|      0|    return s->len;
  594|      0|  } else {
  595|      0|    return 0;
  596|      0|  }
  597|  10.4M|}
lua_pushlstring:
  655|  5.41M|{
  656|  5.41M|  GCstr *s;
  657|  5.41M|  lj_gc_check(L);
  ------------------
  |  |   66|  5.41M|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  5.41M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 260k, False: 5.15M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  5.41M|      lj_gc_step(L); }
  ------------------
  658|  5.41M|  s = lj_str_new(L, str, len);
  659|  5.41M|  setstrV(L, L->top, s);
  660|  5.41M|  incr_top(L);
  ------------------
  |  |   12|  5.41M|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  10.8M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  5.41M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 5.41M]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|  5.41M|}
lua_pushcclosure:
  695|  36.2k|{
  696|  36.2k|  GCfunc *fn;
  697|  36.2k|  lj_gc_check(L);
  ------------------
  |  |   66|  36.2k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  36.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 36.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  36.2k|      lj_gc_step(L); }
  ------------------
  698|  36.2k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  36.2k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|  36.2k|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|  36.2k|  fn->c.f = f;
  701|  36.2k|  L->top -= n;
  702|  36.2k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 0, False: 36.2k]
  ------------------
  703|      0|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|  36.2k|  setfuncV(L, L->top, fn);
  705|  36.2k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|  36.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|  36.2k|  incr_top(L);
  ------------------
  |  |   12|  36.2k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  72.5k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 36.2k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|  36.2k|}
lua_createtable:
  725|  36.2k|{
  726|  36.2k|  lj_gc_check(L);
  ------------------
  |  |   66|  36.2k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  36.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 36.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  36.2k|      lj_gc_step(L); }
  ------------------
  727|  36.2k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|  36.2k|  incr_top(L);
  ------------------
  |  |   12|  36.2k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  72.5k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 36.2k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|  36.2k|}
lua_concat:
  777|  2.68M|{
  778|  2.68M|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  2.68M|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  2.68M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.68M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.68M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.68M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  779|  2.68M|  if (n >= 2) {
  ------------------
  |  Branch (779:7): [True: 1.00M, False: 1.68M]
  ------------------
  780|  1.00M|    n--;
  781|  1.00M|    do {
  782|  1.00M|      TValue *top = lj_meta_cat(L, L->top-1, -n);
  783|  1.00M|      if (top == NULL) {
  ------------------
  |  Branch (783:11): [True: 1.00M, False: 0]
  ------------------
  784|  1.00M|	L->top -= n;
  785|  1.00M|	break;
  786|  1.00M|      }
  787|      0|      n -= (int)(L->top - (top - 2*LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  788|      0|      L->top = top+2;
  789|      0|      lj_vm_call(L, top, 1+1);
  790|      0|      L->top -= 1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  791|      0|      copyTV(L, L->top-1, L->top+LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  792|      0|    } while (--n > 0);
  ------------------
  |  Branch (792:14): [True: 0, False: 0]
  ------------------
  793|  1.68M|  } else if (n == 0) {  /* Push empty string. */
  ------------------
  |  Branch (793:14): [True: 0, False: 1.68M]
  ------------------
  794|      0|    setstrV(L, L->top, &G(L)->strempty);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  795|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  796|      0|  }
  797|       |  /* else n == 1: nothing to do. */
  798|  2.68M|}
lua_rawget:
  832|  36.2k|{
  833|  36.2k|  cTValue *t = index2adr(L, idx);
  834|  36.2k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|  36.2k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  864|  36.2k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  36.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|  36.2k|}
lua_settable:
  968|  36.2k|{
  969|  36.2k|  TValue *o;
  970|  36.2k|  cTValue *t = index2adr_check(L, idx);
  971|  36.2k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|  36.2k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|  36.2k|  o = lj_meta_tset(L, t, L->top-2);
  973|  36.2k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 36.2k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|  36.2k|    L->top -= 2;
  976|  36.2k|    copyTV(L, o, L->top+1);
  977|  36.2k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|  36.2k|}
lua_rawseti:
 1019|  36.2k|{
 1020|  36.2k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  36.2k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  36.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  36.2k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  36.2k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  36.2k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   84|  36.2k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|  36.2k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 36.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  36.2k|  src = L->top-1;
 1025|  36.2k|  copyTV(L, dst, src);
 1026|  36.2k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  36.2k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|  72.5k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  72.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  36.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  36.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 36.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  72.5k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  36.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  36.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  36.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 36.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  36.2k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  36.2k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 36.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  36.2k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  36.2k|  L->top = src;
 1028|  36.2k|}
lj_api.c:index2adr_stack:
   72|  36.2k|{
   73|  36.2k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 36.2k]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|  36.2k|  } else {
   83|  36.2k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 36.2k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  36.2k|		"invalid stack slot %d", idx);
   85|  36.2k|    return L->top + idx;
   86|  36.2k|  }
   87|  36.2k|}
lj_api.c:index2adr:
   35|  10.6M|{
   36|  10.6M|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 0, False: 10.6M]
  ------------------
   37|      0|    TValue *o = L->base + (idx - 1);
   38|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 0, False: 0]
  ------------------
   39|  10.6M|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  10.6M|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 10.6M, False: 36.2k]
  ------------------
   40|  10.6M|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  10.6M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  21.3M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 10.6M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 10.6M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  10.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|  10.6M|		"bad stack slot %d", idx);
   42|  10.6M|    return L->top + idx;
   43|  10.6M|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  36.2k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 0, False: 36.2k]
  ------------------
   44|      0|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|      0|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|      0|    return o;
   47|  36.2k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  36.2k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 36.2k, False: 0]
  ------------------
   48|  36.2k|    return registry(L);
  ------------------
  |  |  706|  36.2k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|  36.2k|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|  10.6M|}
lj_api.c:getcurrenv:
   90|  36.2k|{
   91|  36.2k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  36.2k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  36.2k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  36.2k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  36.2k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|  36.2k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|  36.2k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  36.2k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  36.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 0, False: 36.2k]
  ------------------
   93|  36.2k|}
lj_api.c:index2adr_check:
   65|  36.2k|{
   66|  36.2k|  TValue *o = index2adr(L, idx);
   67|  36.2k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|  36.2k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|  36.2k|  return o;
   69|  36.2k|}

lj_buf_more2:
   61|   134k|{
   62|   134k|  if (sbufisext(sb)) {
  ------------------
  |  |   56|   134k|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|   134k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|   134k|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|   134k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|   134k|  } else {
   81|   134k|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|   134k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|   134k|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|   134k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   134k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 134k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   134k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|   134k|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|   268k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 134k]
  |  |  |  Branch (146:44): [True: 0, False: 134k]
  |  |  |  Branch (146:44): [True: 0, False: 134k]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|   134k|    buf_grow(sb, len + sz);
   86|   134k|  }
   87|   134k|  return sb->w;
   88|   134k|}
lj_buf_shrink:
   91|   125k|{
   92|   125k|  char *b = sb->b;
   93|   125k|  MSize osz = (MSize)(sb->e - b);
   94|   125k|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|   125k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 125k, False: 17]
  ------------------
   95|   125k|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   96|   125k|    sb->w = sb->b = b;  /* Not supposed to keep data across shrinks. */
   97|   125k|    sb->e = b + (osz >> 1);
   98|   125k|  }
   99|   125k|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|   125k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   125k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 125k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   125k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  100|   125k|}
lj_buf_putmem:
  131|  6.30M|{
  132|  6.30M|  char *w = lj_buf_more(sb, len);
  133|  6.30M|  w = lj_buf_wmem(w, q, len);
  134|  6.30M|  sb->w = w;
  135|  6.30M|  return sb;
  136|  6.30M|}
lj_buf.c:buf_grow:
   20|   134k|{
   21|   134k|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|   134k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|   134k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|   134k|  char *b;
   23|   134k|  GCSize flag;
   24|   134k|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|   134k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  27.7k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 27.7k, False: 106k]
  ------------------
   25|   636k|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 501k, False: 134k]
  ------------------
   26|   134k|  flag = sbufflag(sb);
  ------------------
  |  |   55|   134k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|   134k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|   134k|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|   134k|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 134k]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|   134k|  } else {
   34|   134k|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|   134k|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|   134k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|   134k|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|   134k|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|   134k|  }
   36|   134k|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|   134k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 134k]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|   134k|  sb->b = b;
   41|   134k|  sb->w = b + len;
   42|   134k|  sb->e = b + nsz;
   43|   134k|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|   134k|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 134k]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|   134k|}

lj_state.c:lj_buf_init:
   75|  36.2k|{
   76|  36.2k|  setsbufL(sb, L);
  ------------------
  |  |   49|  36.2k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  36.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  36.2k|  sb->w = sb->e = sb->b = NULL;
   78|  36.2k|}
lj_state.c:lj_buf_free:
   94|  36.2k|{
   95|  36.2k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  36.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  36.2k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  36.2k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  36.2k|}
lj_buf.c:lj_buf_more:
  107|  6.30M|{
  108|  6.30M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  6.30M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 6.30M]
  |  |  ------------------
  ------------------
  109|      0|    return lj_buf_more2(sb, sz);
  110|  6.30M|  return sb->w;
  111|  6.30M|}
lj_buf.c:lj_buf_wmem:
  176|  6.30M|{
  177|  6.30M|  return (char *)memcpy(p, q, len) + len;
  178|  6.30M|}
lj_meta.c:lj_buf_tmp_:
   86|  1.00M|{
   87|  1.00M|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|  1.00M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.00M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|  1.00M|  setsbufL(sb, L);
  ------------------
  |  |   49|  1.00M|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  1.00M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|  1.00M|  lj_buf_reset(sb);
   90|  1.00M|  return sb;
   91|  1.00M|}
lj_meta.c:lj_buf_reset:
   81|  1.00M|{
   82|  1.00M|  sb->w = sb->b;
   83|  1.00M|}
lj_meta.c:lj_buf_more:
  107|  1.00M|{
  108|  1.00M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  1.00M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 134k, False: 869k]
  |  |  ------------------
  ------------------
  109|   134k|    return lj_buf_more2(sb, sz);
  110|   869k|  return sb->w;
  111|  1.00M|}
lj_meta.c:lj_buf_str:
  201|  1.00M|{
  202|  1.00M|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  1.00M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|  1.00M|}

lj_ctype_initfin:
  651|  36.2k|{
  652|       |  /* NOBARRIER: The table is new (marked white). */
  653|  36.2k|  GCtab *t = lj_tab_new(L, 0, 1);
  654|  36.2k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  655|  36.2k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  36.2k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  656|  36.2k|	  lj_str_newlit(L, "k"));
  ------------------
  |  |   28|  36.2k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  657|  36.2k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  658|  36.2k|  setgcref(G(L)->gcroot[GCROOT_FFI_FIN], obj2gco(t));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  659|  36.2k|}
lj_ctype_freestate:
  663|  36.2k|{
  664|  36.2k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  386|  36.2k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  665|  36.2k|  if (cts) {
  ------------------
  |  Branch (665:7): [True: 0, False: 36.2k]
  ------------------
  666|      0|    lj_ccallback_mcode_free(cts);
  667|      0|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  668|      0|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  669|      0|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|      0|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  670|      0|  }
  671|  36.2k|}

lj_str.c:lj_bswap:
  181|  60.2k|{
  182|  60.2k|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|  60.2k|}
lj_str.c:lj_getu32:
  237|   159M|{
  238|   159M|  return ((const Unaligned32 *)p)->u;
  239|   159M|}

lj_dispatch_init:
   61|  36.2k|{
   62|  36.2k|  uint32_t i;
   63|  36.2k|  ASMFunction *disp = GG->dispatch;
   64|  3.26M|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  3.26M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 3.22M, False: 36.2k]
  ------------------
   65|  3.22M|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|  3.22M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.22M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  3.22M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.22M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|  2.39M|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  36.2k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  2.39M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  2.39M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 2.35M, False: 36.2k]
  ------------------
   67|  2.35M|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  2.35M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  2.35M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  36.2k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  36.2k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  36.2k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  36.2k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  36.2k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  36.2k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  36.2k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  36.2k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|  2.10M|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|  2.10M|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 2.06M, False: 36.2k]
  ------------------
   78|  2.06M|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|  2.06M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  36.2k|}
lj_dispatch_update:
  107|  36.2k|{
  108|  36.2k|  uint8_t oldmode = g->dispatchmode;
  109|  36.2k|  uint8_t mode = 0;
  110|  36.2k|#if LJ_HASJIT
  111|  36.2k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  36.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  36.2k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 0, False: 36.2k]
  ------------------
  112|  36.2k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  36.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 36.2k]
  ------------------
  113|  36.2k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  36.2k|#endif
  115|  36.2k|#if LJ_HASPROFILE
  116|  36.2k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  677|  36.2k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 36.2k]
  ------------------
  117|  36.2k|#endif
  118|  36.2k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  36.2k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  36.2k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  36.2k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  36.2k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 0, False: 36.2k]
  ------------------
  119|  36.2k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  36.2k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  36.2k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 0, False: 36.2k]
  ------------------
  120|  36.2k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  36.2k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  36.2k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 36.2k]
  ------------------
  121|  36.2k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 0, False: 36.2k]
  ------------------
  122|      0|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|      0|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|      0|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|      0|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 0, False: 0]
  ------------------
  128|      0|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|      0|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|      0|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|      0|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|      0|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|      0|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|      0|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|      0|      f_itern = &lj_vm_IITERN;
  138|      0|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|      0|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|      0|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|      0|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|      0|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|      0|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|      0|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|      0|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|      0|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 0, False: 0]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|      0|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 0]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|      0|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|      0|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 0]
  ------------------
  164|      0|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 0]
  ------------------
  165|      0|	uint32_t i;
  166|      0|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 0, False: 0]
  ------------------
  167|      0|	  disp[i] = f;
  168|      0|      }
  169|      0|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 0, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|      0|      disp[BC_FORL] = f_forl;
  172|      0|      disp[BC_ITERL] = f_iterl;
  173|      0|      disp[BC_ITERN] = f_itern;
  174|      0|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|      0|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|      0|      } else {
  182|      0|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|      0|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|      0|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|      0|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|      0|      }
  187|      0|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|      0|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 0, False: 0]
  ------------------
  191|      0|      uint32_t i;
  192|      0|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|      0|      } else {
  196|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 0, False: 0]
  ------------------
  197|      0|	  disp[i] = lj_vm_callhook;
  198|      0|      }
  199|      0|    }
  200|      0|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 0, False: 0]
  ------------------
  201|      0|      disp[BC_FUNCF] = f_funcf;
  202|      0|      disp[BC_FUNCV] = f_funcv;
  203|      0|    }
  204|       |
  205|      0|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|      0|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|      0|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 0, False: 0]
  |  Branch (207:34): [True: 0, False: 0]
  ------------------
  208|      0|      lj_dispatch_init_hotcount(g);
  209|      0|#endif
  210|      0|  }
  211|  36.2k|}

lj_err_verify:
  505|  36.2k|{
  506|  36.2k|#if !LJ_TARGET_OSX
  507|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  508|  36.2k|  struct dwarf_eh_bases ehb;
  509|  36.2k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  510|  36.2k|#endif
  511|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  512|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  513|       |  */
  514|  36.2k|}
lj_err_str:
  802|  36.2k|{
  803|  36.2k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  36.2k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  804|  36.2k|}

lj_func_closeuv:
   84|  72.5k|{
   85|  72.5k|  GCupval *uv;
   86|  72.5k|  global_State *g = G(L);
  ------------------
  |  |  705|  72.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  72.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  72.5k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  72.5k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 72.5k]
  ------------------
   88|  72.5k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|  72.5k|}
lj_func_newC:
  112|  36.2k|{
  113|  36.2k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|  36.2k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|  36.2k|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  36.2k|#define LJ_TFUNC		(~8u)
  ------------------
  115|  36.2k|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|  36.2k|#define FF_C		1
  ------------------
  116|  36.2k|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|  36.2k|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|  36.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|  36.2k|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|  36.2k|  return fn;
  121|  36.2k|}
lj_func_free:
  186|  36.2k|{
  187|  36.2k|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  36.2k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  36.2k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|  36.2k|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  72.5k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|  36.2k|  lj_mem_free(g, fn, size);
  190|  36.2k|}

lj_gc_separateudata:
  142|   197k|{
  143|   197k|  size_t m = 0;
  144|   197k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  665|   197k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|   197k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|   197k|  GCobj *o;
  146|   197k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|   197k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 0, False: 197k]
  ------------------
  147|      0|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|      0|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 0, False: 0]
  |  |  |  Branch (40:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 0, False: 0]
  ------------------
  148|      0|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|      0|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|      0|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 0]
  |  |  |  Branch (20:5): [True: 0, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  Branch (20:28): [True: 0, False: 0]
  |  |  ------------------
  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 0, False: 0]
  ------------------
  150|      0|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|      0|      p = &o->gch.nextgc;
  152|      0|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|      0|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|      0|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  154|      0|      markfinalized(o);
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|      0|      *p = o->gch.nextgc;
  156|      0|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  157|      0|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|      0|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|      0|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|      0|      } else {  /* Create circular list. */
  162|      0|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|      0|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|      0|      }
  165|      0|    }
  166|      0|  }
  167|   197k|  return m;
  168|   197k|}
lj_gc_finalize_udata:
  576|  36.2k|{
  577|  36.2k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  36.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (577:10): [True: 0, False: 36.2k]
  ------------------
  578|      0|    gc_finalize(L);
  579|  36.2k|}
lj_gc_finalize_cdata:
  584|  36.2k|{
  585|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  586|  36.2k|  GCtab *t = tabref(g->gcroot[GCROOT_FFI_FIN]);
  ------------------
  |  |  514|  36.2k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  36.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  587|  36.2k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  36.2k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  36.2k|  ptrdiff_t i;
  589|  36.2k|  setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|  36.2k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  590|   108k|  for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (590:33): [True: 72.5k, False: 36.2k]
  ------------------
  591|  72.5k|    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  782|   145k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                  if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  799|  36.2k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  36.2k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  |  Branch (591:9): [True: 36.2k, False: 36.2k]
  ------------------
  592|      0|      GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  593|      0|      TValue tmp;
  594|      0|      makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  595|      0|      o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  596|      0|      copyTV(L, &tmp, &node[i].val);
  597|      0|      setnilV(&node[i].val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  598|      0|      gc_call_finalizer(g, L, &tmp, o);
  599|      0|    }
  600|  36.2k|}
lj_gc_freeall:
  605|  36.2k|{
  606|  36.2k|  MSize i;
  607|       |  /* Free everything, except super-fixed objects (the main thread). */
  608|  36.2k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  36.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  36.2k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  36.2k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  36.2k|#define LJ_GC_SFIXED	0x40
  ------------------
  609|  36.2k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  401|  36.2k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  610|  9.32M|  for (i = g->str.mask; i != ~(MSize)0; i--)  /* Free all string hash chains. */
  ------------------
  |  Branch (610:25): [True: 9.28M, False: 36.2k]
  ------------------
  611|  9.28M|    gc_sweepstr(g, &g->str.tab[i]);
  612|  36.2k|}
lj_gc_step:
  721|   399k|{
  722|   399k|  global_State *g = G(L);
  ------------------
  |  |  705|   399k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   399k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  723|   399k|  GCSize lim;
  724|   399k|  int32_t ostate = g->vmstate;
  725|   399k|  setvmstate(g, GC);
  ------------------
  |  |  539|   399k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  726|   399k|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|   399k|#define GCSTEPSIZE	1024u
  ------------------
  727|   399k|  if (lim == 0)
  ------------------
  |  Branch (727:7): [True: 0, False: 399k]
  ------------------
  728|      0|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  729|   399k|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (729:7): [True: 264k, False: 134k]
  ------------------
  730|   264k|    g->gc.debt += g->gc.total - g->gc.threshold;
  731|  33.4M|  do {
  732|  33.4M|    lim -= (GCSize)gc_onestep(L);
  733|  33.4M|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (733:9): [True: 125k, False: 33.3M]
  ------------------
  734|   125k|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  735|   125k|      g->vmstate = ostate;
  736|   125k|      return 1;  /* Finished a GC cycle. */
  737|   125k|    }
  738|  33.4M|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (738:12): [Folded - Ignored]
  |  Branch (738:12): [True: 33.0M, False: 274k]
  ------------------
  739|   274k|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|   274k|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (739:7): [True: 9.41k, False: 265k]
  ------------------
  740|  9.41k|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|  9.41k|#define GCSTEPSIZE	1024u
  ------------------
  741|  9.41k|    g->vmstate = ostate;
  742|  9.41k|    return -1;
  743|   265k|  } else {
  744|   265k|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|   265k|#define GCSTEPSIZE	1024u
  ------------------
  745|   265k|    g->gc.threshold = g->gc.total;
  746|   265k|    g->vmstate = ostate;
  747|   265k|    return 0;
  748|   265k|  }
  749|   274k|}
lj_mem_realloc:
  862|  5.31M|{
  863|  5.31M|  global_State *g = G(L);
  ------------------
  |  |  705|  5.31M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.31M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  864|  5.31M|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|  5.31M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.31M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.31M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  865|  5.31M|  p = g->allocf(g->allocd, p, osz, nsz);
  866|  5.31M|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (866:7): [True: 0, False: 5.31M]
  |  Branch (866:20): [True: 0, False: 0]
  ------------------
  867|      0|    lj_err_mem(L);
  868|  5.31M|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|  5.31M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.31M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.31M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  869|  5.31M|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|  5.31M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  10.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.31M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  870|  5.31M|	     "allocated memory address %p outside required range", p);
  871|  5.31M|  g->gc.total = (g->gc.total - osz) + nsz;
  872|  5.31M|  return p;
  873|  5.31M|}
lj_mem_newgco:
  877|   181k|{
  878|   181k|  global_State *g = G(L);
  ------------------
  |  |  705|   181k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   181k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  879|   181k|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  880|   181k|  if (o == NULL)
  ------------------
  |  Branch (880:7): [True: 0, False: 181k]
  ------------------
  881|      0|    lj_err_mem(L);
  882|   181k|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|   181k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   362k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 181k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   181k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  883|   181k|	     "allocated memory address %p outside required range", o);
  884|   181k|  g->gc.total += size;
  885|   181k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|   181k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  886|   181k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|   181k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  887|   181k|  newwhite(g, o);
  ------------------
  |  |   40|   181k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|   181k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   181k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   181k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   181k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   181k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|   181k|  return o;
  889|   181k|}
lj_gc.c:gc_sweep:
  405|   322k|{
  406|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  407|   322k|  int ow = otherwhite(g);
  ------------------
  |  |   36|   322k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   322k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   322k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   322k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|   322k|  GCobj *o;
  409|  1.29M|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|  1.29M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (409:10): [True: 968k, False: 322k]
  |  Branch (409:37): [True: 968k, False: 0]
  ------------------
  410|   968k|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|   968k|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (410:9): [True: 161k, False: 806k]
  ------------------
  411|   161k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  401|   322k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (401:41): [True: 161k, False: 0]
  |  |  ------------------
  ------------------
  412|   968k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|   968k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|   968k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|   968k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (412:9): [True: 786k, False: 181k]
  ------------------
  413|   786k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   786k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   786k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 786k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   786k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  414|   786k|		 "sweep of undead object");
  415|   786k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|   786k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   786k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   786k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   786k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   786k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   786k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   786k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   786k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   786k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   786k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|   786k|      p = &o->gch.nextgc;
  417|   786k|    } else {  /* Otherwise value is dead, free it. */
  418|   181k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   181k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   362k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 181k]
  |  |  |  |  |  Branch (355:5): [True: 181k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   181k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  419|   181k|		 "sweep of unlive object");
  420|   181k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   181k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  421|   181k|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|   181k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (421:11): [True: 0, False: 181k]
  ------------------
  422|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  423|   181k|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|   181k|#define LJ_TSTR			(~4u)
  ------------------
  424|   181k|    }
  425|   968k|  }
  426|   322k|  return p;
  427|   322k|}
lj_gc.c:gc_sweepstr:
  431|  41.3M|{
  432|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  433|  41.3M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  41.3M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  41.3M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  41.3M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  41.3M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|  41.3M|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  41.3M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  435|  41.3M|  GCRef q;
  436|  41.3M|  GCRef *p = &q;
  437|  41.3M|  GCobj *o;
  438|  41.3M|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  41.3M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  439|  52.5M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  52.5M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (439:10): [True: 11.2M, False: 41.3M]
  ------------------
  440|  11.2M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  11.2M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  11.2M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  11.2M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 6.38M, False: 4.82M]
  ------------------
  441|  6.38M|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  6.38M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.26M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 3.50M, False: 2.88M]
  |  |  |  |  |  Branch (355:5): [True: 2.88M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.38M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|  6.38M|		 "sweep of undead string");
  443|  6.38M|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|  6.38M|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  6.38M|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  6.38M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  6.38M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  6.38M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  6.38M|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  6.38M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  6.38M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  6.38M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  6.38M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|  6.38M|      p = &o->gch.nextgc;
  445|  6.38M|    } else {  /* Otherwise string is dead, free it. */
  446|  4.82M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  4.82M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.07M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 2.57M, False: 2.24M]
  |  |  |  |  |  Branch (355:5): [True: 2.24M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.82M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  447|  4.82M|		 "sweep of unlive string");
  448|  4.82M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  4.82M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  449|  4.82M|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  765|  4.82M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  4.82M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.82M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.82M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.82M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.82M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|  4.82M|    }
  451|  11.2M|  }
  452|  41.3M|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  41.3M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  453|  41.3M|}
lj_gc.c:gc_onestep:
  654|  33.4M|{
  655|  33.4M|  global_State *g = G(L);
  ------------------
  |  |  705|  33.4M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  33.4M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  656|  33.4M|  switch (g->gc.state) {
  657|   149k|  case GCSpause:
  ------------------
  |  Branch (657:3): [True: 149k, False: 33.3M]
  ------------------
  658|   149k|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  659|   149k|    return 0;
  660|   996k|  case GCSpropagate:
  ------------------
  |  Branch (660:3): [True: 996k, False: 32.4M]
  ------------------
  661|   996k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|   996k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (661:9): [True: 870k, False: 125k]
  ------------------
  662|   870k|      return propagatemark(g);  /* Propagate one gray object. */
  663|   125k|    g->gc.state = GCSatomic;  /* End of mark phase. */
  664|   125k|    return 0;
  665|   125k|  case GCSatomic:
  ------------------
  |  Branch (665:3): [True: 125k, False: 33.3M]
  ------------------
  666|   125k|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|   125k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   125k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
  667|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  668|   125k|    atomic(g, L);
  669|   125k|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  670|   125k|    g->gc.sweepstr = 0;
  671|   125k|    return 0;
  672|  32.0M|  case GCSsweepstring: {
  ------------------
  |  Branch (672:3): [True: 32.0M, False: 1.39M]
  ------------------
  673|  32.0M|    GCSize old = g->gc.total;
  674|  32.0M|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  675|  32.0M|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (675:9): [True: 125k, False: 31.9M]
  ------------------
  676|   125k|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  677|  32.0M|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  32.0M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  32.0M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 32.0M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  32.0M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  678|  32.0M|    g->gc.estimate -= old - g->gc.total;
  679|  32.0M|    return GCSWEEPCOST;
  ------------------
  |  |   34|  32.0M|#define GCSWEEPCOST	10
  ------------------
  680|  32.0M|    }
  681|   125k|  case GCSsweep: {
  ------------------
  |  Branch (681:3): [True: 125k, False: 33.3M]
  ------------------
  682|   125k|    GCSize old = g->gc.total;
  683|   125k|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|   125k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  684|   125k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|   125k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   125k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 125k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   125k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  685|   125k|    g->gc.estimate -= old - g->gc.total;
  686|   125k|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|   125k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (686:9): [True: 125k, False: 0]
  ------------------
  687|   125k|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|   124k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (687:11): [True: 124k, False: 190]
  |  Branch (687:47): [True: 0, False: 124k]
  ------------------
  688|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  689|   125k|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|   125k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
  690|      0|	g->gc.state = GCSfinalize;
  691|   125k|      } else {  /* Otherwise skip this phase to help the JIT. */
  692|   125k|	g->gc.state = GCSpause;  /* End of GC cycle. */
  693|   125k|	g->gc.debt = 0;
  694|   125k|      }
  695|   125k|    }
  696|   125k|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|   125k|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|   125k|#define GCSWEEPCOST	10
  ------------------
  697|   125k|    }
  698|      0|  case GCSfinalize:
  ------------------
  |  Branch (698:3): [True: 0, False: 33.4M]
  ------------------
  699|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (699:9): [True: 0, False: 0]
  ------------------
  700|      0|      GCSize old = g->gc.total;
  701|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  702|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  703|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  704|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (704:11): [True: 0, False: 0]
  |  Branch (704:33): [True: 0, False: 0]
  ------------------
  705|      0|	g->gc.estimate -= old - g->gc.total;
  706|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (706:11): [True: 0, False: 0]
  ------------------
  707|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  708|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  709|      0|    }
  710|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  711|      0|    g->gc.debt = 0;
  712|      0|    return 0;
  713|      0|  default:
  ------------------
  |  Branch (713:3): [True: 0, False: 33.4M]
  ------------------
  714|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  715|      0|    return 0;
  716|  33.4M|  }
  717|  33.4M|}
lj_gc.c:gc_mark_start:
  103|   149k|{
  104|   149k|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|   149k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|   149k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|   149k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|   149k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|   149k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|   149k|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|   149k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   149k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   149k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   149k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   149k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 149k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   149k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|   149k|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|   149k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   149k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   149k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   149k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   149k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 149k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   149k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|   149k|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|   149k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   149k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   298k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 149k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 149k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   149k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   149k|	       "TValue and GC type mismatch"); \
  |  |   48|   149k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   149k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   298k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   149k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   149k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   149k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   149k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   149k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   149k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 149k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   298k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   149k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   149k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   149k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 149k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 149k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   149k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   149k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   149k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   149k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 149k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   149k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|   149k|  gc_mark_gcroot(g);
  111|   149k|  g->gc.state = GCSpropagate;
  112|   149k|}
lj_gc.c:gc_mark_gcroot:
   94|   274k|{
   95|   274k|  ptrdiff_t i;
   96|  10.9M|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 10.7M, False: 274k]
  ------------------
   97|  10.7M|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|  10.7M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 6.31M, False: 4.39M]
  ------------------
   98|  6.31M|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|  6.31M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  6.31M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  6.31M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  6.31M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  6.31M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.42M, False: 2.88M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  3.42M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|   274k|}
lj_gc.c:propagatemark:
  324|   996k|{
  325|   996k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|   996k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  326|   996k|  int gct = o->gch.gct;
  327|   996k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|   996k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   996k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 996k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   996k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  328|   996k|  gray2black(o);
  ------------------
  |  |   39|   996k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   996k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  329|   996k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|   996k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  330|   996k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|   996k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 596k, False: 399k]
  |  |  ------------------
  ------------------
  331|   596k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|   596k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   596k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   596k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   596k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 596k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   596k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|   596k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (332:9): [True: 0, False: 596k]
  ------------------
  333|      0|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|      0|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  334|   596k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  335|   596k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (335:8): [True: 596k, False: 0]
  ------------------
  336|   596k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|   399k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 149k, False: 250k]
  |  |  ------------------
  ------------------
  337|   149k|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  769|   149k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|   149k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   149k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   149k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 149k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   149k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|    gc_traverse_func(g, fn);
  339|   149k|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|   149k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   149k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|      0|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  340|   149k|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|   149k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  341|   250k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|   250k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 250k]
  |  |  ------------------
  ------------------
  342|      0|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  768|      0|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    gc_traverse_proto(g, pt);
  344|      0|    return pt->sizept;
  345|   250k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|   250k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 250k, False: 0]
  |  |  ------------------
  ------------------
  346|   250k|    lua_State *th = gco2th(o);
  ------------------
  |  |  767|   250k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|   250k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   250k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   250k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 250k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   250k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|   250k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|   250k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  348|   250k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|   250k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  349|   250k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|   250k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   250k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  350|   250k|    gc_traverse_thread(g, th);
  351|   250k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  352|   250k|  } else {
  353|      0|#if LJ_HASJIT
  354|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  355|      0|    gc_traverse_trace(g, T);
  356|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  357|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  358|       |#else
  359|       |    lj_assertG(0, "bad GC type %d", gct);
  360|       |    return 0;
  361|       |#endif
  362|      0|  }
  363|   996k|}
lj_gc.c:gc_traverse_tab:
  174|   596k|{
  175|   596k|  int weak = 0;
  176|   596k|  cTValue *mode;
  177|   596k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|   596k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   596k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|   596k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 149k, False: 447k]
  ------------------
  179|   149k|    gc_markobj(g, mt);
  ------------------
  |  |   52|   149k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   149k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   149k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   149k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   149k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 149k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|   596k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|   596k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 447k, False: 149k]
  |  |  |  Branch (20:26): [True: 0, False: 149k]
  |  |  ------------------
  |  |   21|   149k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|   149k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|   149k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|   149k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|   596k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  795|   149k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   149k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   149k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 149k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 149k, False: 447k]
  ------------------
  182|   149k|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|   149k|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|   298k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 149k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|   298k|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 149k, False: 149k]
  ------------------
  185|   149k|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|   149k|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 149k, False: 0]
  ------------------
  186|      0|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 0, False: 0]
  ------------------
  187|   149k|    }
  188|   149k|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 149k, False: 0]
  ------------------
  189|   149k|#if LJ_HASFFI
  190|   149k|      if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |   67|   149k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                    if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |  775|   149k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (190:11): [True: 149k, False: 0]
  ------------------
  191|   149k|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|   149k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  192|   149k|      } else
  193|      0|#endif
  194|      0|      {
  195|      0|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|      0|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|      0|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  196|      0|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  197|      0|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  198|      0|      }
  199|   149k|    }
  200|   149k|  }
  201|   596k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|   596k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|   596k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|   596k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (201:7): [True: 0, False: 596k]
  ------------------
  202|      0|    return 1;
  203|   596k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|   596k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (203:7): [True: 596k, False: 0]
  ------------------
  204|   596k|    MSize i, asize = t->asize;
  205|   596k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (205:17): [True: 0, False: 596k]
  ------------------
  206|   596k|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  207|   596k|  }
  208|   596k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (208:7): [True: 596k, False: 0]
  ------------------
  209|   596k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|   596k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   596k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|   596k|    MSize i, hmask = t->hmask;
  211|  11.6M|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (211:17): [True: 11.0M, False: 596k]
  ------------------
  212|  11.0M|      Node *n = &node[i];
  213|  11.0M|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  782|  11.0M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (213:11): [True: 447k, False: 10.5M]
  ------------------
  214|   447k|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|   447k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 447k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   447k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|   447k|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|   447k|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|   298k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   298k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 149k, False: 149k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 149k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   298k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   298k|	       "TValue and GC type mismatch"); \
  |  |   48|   298k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   298k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   596k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   298k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   298k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   298k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   298k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   298k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   298k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 149k, False: 149k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   298k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   149k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   149k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   149k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 149k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 149k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   149k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   149k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   149k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   149k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 149k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   149k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (215:6): [True: 298k, False: 149k]
  ------------------
  216|   447k|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|   447k|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|   447k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   447k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   894k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 447k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 447k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   447k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   447k|	       "TValue and GC type mismatch"); \
  |  |   48|   447k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   447k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   894k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   447k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   447k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   447k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   447k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   447k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   447k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 447k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   894k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   447k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   447k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   447k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 447k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 447k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   447k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   447k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   447k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   447k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 447k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   447k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 447k, False: 0]
  ------------------
  217|   447k|      }
  218|  11.0M|    }
  219|   596k|  }
  220|   596k|  return weak;
  221|   596k|}
lj_gc.c:gc_traverse_func:
  225|   149k|{
  226|   149k|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|   149k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   149k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   149k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   149k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   149k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 149k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  227|   149k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|   149k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   149k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
  228|      0|    uint32_t i;
  229|      0|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  230|      0|	       "function upvalues out of range");
  231|      0|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|      0|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (232:17): [True: 0, False: 0]
  ------------------
  233|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  234|   149k|  } else {
  235|   149k|    uint32_t i;
  236|   149k|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (236:17): [True: 0, False: 149k]
  ------------------
  237|   149k|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|   149k|  }
  239|   149k|}
lj_gc.c:gc_traverse_thread:
  309|   250k|{
  310|   250k|  TValue *o, *top = th->top;
  311|  1.30M|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|   250k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   250k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|   250k|#define LJ_FR2			1
  ------------------
  |  Branch (311:39): [True: 1.05M, False: 250k]
  ------------------
  312|  1.05M|    gc_marktv(g, o);
  ------------------
  |  |   46|  1.05M|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  1.05M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.10M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 1.05M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.05M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.05M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  1.05M|	       "TValue and GC type mismatch"); \
  |  |   48|  1.05M|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  1.05M|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  2.10M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  1.05M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.05M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.05M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.05M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.05M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.05M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 1.05M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  2.10M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  1.05M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  1.05M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  1.05M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 450k, False: 603k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 1.05M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   450k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   450k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   450k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   450k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 450k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   450k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|   250k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (313:7): [True: 125k, False: 125k]
  ------------------
  314|   125k|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|   125k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   125k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  315|  5.36M|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (315:12): [True: 5.24M, False: 125k]
  ------------------
  316|  5.24M|      setnilV(o);
  ------------------
  |  |  872|  5.24M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  317|   125k|  }
  318|   250k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|   250k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   250k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   250k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   250k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   250k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 250k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  319|   250k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  320|   250k|}
lj_gc.c:gc_traverse_frames:
  292|   250k|{
  293|   250k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|   250k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   250k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  294|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  295|   250k|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|   250k|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (295:28): [True: 0, False: 250k]
  ------------------
  296|      0|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|    TValue *ftop = frame;
  298|      0|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|      0|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (300:9): [Folded - Ignored]
  ------------------
  301|      0|  }
  302|   250k|  top++;  /* Correct bias of -1 (frame == base-1). */
  303|   250k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|   250k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   250k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (303:7): [True: 0, False: 250k]
  ------------------
  304|   250k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  305|   250k|}
lj_gc.c:gc_traverse_trace:
  256|   125k|{
  257|   125k|  IRRef ref;
  258|   125k|  if (T->traceno == 0) return;
  ------------------
  |  Branch (258:7): [True: 125k, False: 0]
  ------------------
  259|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (259:21): [True: 0, False: 0]
  ------------------
  260|      0|    IRIns *ir = &T->ir[ref];
  261|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (261:9): [True: 0, False: 0]
  ------------------
  262|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (263:28): [True: 0, False: 0]
  ------------------
  264|      0|      ref++;
  265|      0|  }
  266|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (266:7): [True: 0, False: 0]
  ------------------
  267|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  270|      0|}
lj_gc.c:atomic:
  618|   125k|{
  619|   125k|  size_t udsize;
  620|       |
  621|   125k|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  622|   125k|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  623|       |
  624|   125k|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|   125k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  625|   125k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|   125k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  626|   125k|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|   125k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   125k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 125k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   125k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  627|   125k|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|   125k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   125k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   125k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   125k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   125k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 125k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  628|   125k|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  273|   125k|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|   125k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|   125k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|   125k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  629|   125k|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  630|   125k|  gc_propagate_gray(g);  /* Propagate all of the above. */
  631|       |
  632|   125k|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|   125k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  633|   125k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|   125k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  634|   125k|  gc_propagate_gray(g);  /* Propagate it. */
  635|       |
  636|   125k|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  637|   125k|  gc_mark_mmudata(g);  /* Mark them. */
  638|   125k|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  639|       |
  640|       |  /* All marking done, clear weak tables. */
  641|   125k|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|   125k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  642|       |
  643|   125k|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  644|       |
  645|       |  /* Prepare for sweep phase. */
  646|   125k|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|   125k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   125k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   125k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   125k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|   125k|  g->strempty.marked = g->gc.currentwhite;
  648|   125k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|   125k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  649|   125k|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  650|   125k|}
lj_gc.c:gc_mark_uv:
  116|   125k|{
  117|   125k|  GCupval *uv;
  118|   125k|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|   125k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|   125k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 125k]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|   125k|}
lj_gc.c:gc_propagate_gray:
  367|   501k|{
  368|   501k|  size_t m = 0;
  369|   626k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|   626k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (369:10): [True: 125k, False: 501k]
  ------------------
  370|   125k|    m += propagatemark(g);
  371|   501k|  return m;
  372|   501k|}
lj_gc.c:gc_mark_mmudata:
  128|   125k|{
  129|   125k|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|   125k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|   125k|  GCobj *u = root;
  131|   125k|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 125k]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|   125k|}
lj_gc.c:gc_clearweak:
  473|   125k|{
  474|   125k|  UNUSED(g);
  ------------------
  |  |   91|   125k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  475|   125k|  while (o) {
  ------------------
  |  Branch (475:10): [True: 0, False: 125k]
  ------------------
  476|      0|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|      0|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  478|      0|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|      0|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (478:9): [True: 0, False: 0]
  ------------------
  479|      0|      MSize i, asize = t->asize;
  480|      0|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (480:19): [True: 0, False: 0]
  ------------------
  481|       |	/* Clear array slot when value is about to be collected. */
  482|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  483|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	  setnilV(tv);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  485|      0|      }
  486|      0|    }
  487|      0|    if (t->hmask > 0) {
  ------------------
  |  Branch (487:9): [True: 0, False: 0]
  ------------------
  488|      0|      Node *node = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  489|      0|      MSize i, hmask = t->hmask;
  490|      0|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (490:19): [True: 0, False: 0]
  ------------------
  491|      0|	Node *n = &node[i];
  492|       |	/* Clear hash slot when key or value is about to be collected. */
  493|      0|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (493:6): [True: 0, False: 0]
  |  Branch (493:28): [True: 0, False: 0]
  ------------------
  494|      0|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (494:7): [True: 0, False: 0]
  ------------------
  495|      0|	  setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  496|      0|      }
  497|      0|    }
  498|      0|    o = gcref(t->gclist);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  499|      0|  }
  500|   125k|}
lj_gc.c:gc_mark:
   59|  4.92M|{
   60|  4.92M|  int gct = o->gch.gct;
   61|  4.92M|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|  4.92M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.92M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.92M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.92M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|  4.92M|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|  4.92M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.92M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.92M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.92M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  4.92M|  white2gray(o);
  ------------------
  |  |   38|  4.92M|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  4.92M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  4.92M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  4.92M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|  4.92M|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|  4.92M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 4.92M]
  |  |  ------------------
  ------------------
   65|      0|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|      0|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|      0|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|      0|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  772|      0|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 0]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|  4.92M|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|  4.92M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 4.92M]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  766|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|  4.92M|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|  9.84M|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|   894k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 894k, False: 4.02M]
  |  Branch (83:33): [True: 894k, False: 0]
  ------------------
   84|   894k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|   894k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.47M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 149k, False: 745k]
  |  |  |  |  |  Branch (355:5): [True: 596k, False: 149k]
  |  |  |  |  |  Branch (355:5): [True: 149k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   894k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|   894k|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|   894k|	       "bad GC type %d", gct);
   87|   894k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|   894k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|   894k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|   894k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|   894k|  }
   90|  4.92M|}

lj_state.c:lj_mem_free:
  120|   108k|{
  121|   108k|  g->gc.total -= (GCSize)osize;
  122|   108k|  g->allocf(g->allocd, p, osize, 0);
  123|   108k|}
lj_trace.c:lj_mem_free:
  120|   145k|{
  121|   145k|  g->gc.total -= (GCSize)osize;
  122|   145k|  g->allocf(g->allocd, p, osize, 0);
  123|   145k|}
lj_str.c:lj_mem_free:
  120|  4.87M|{
  121|  4.87M|  g->gc.total -= (GCSize)osize;
  122|  4.87M|  g->allocf(g->allocd, p, osize, 0);
  123|  4.87M|}
lj_tab.c:lj_mem_free:
  120|   290k|{
  121|   290k|  g->gc.total -= (GCSize)osize;
  122|   290k|  g->allocf(g->allocd, p, osize, 0);
  123|   290k|}
lj_func.c:lj_mem_free:
  120|  36.2k|{
  121|  36.2k|  g->gc.total -= (GCSize)osize;
  122|  36.2k|  g->allocf(g->allocd, p, osize, 0);
  123|  36.2k|}

lj_lex_init:
  507|  36.2k|{
  508|  36.2k|  uint32_t i;
  509|   834k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (509:15): [True: 797k, False: 36.2k]
  ------------------
  510|   797k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|   797k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  511|   797k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|   797k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|   797k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  512|   797k|    s->reserved = (uint8_t)(i+1);
  513|   797k|  }
  514|  36.2k|}

lj_mcode_free:
  306|  36.2k|{
  307|  36.2k|  MCode *mc = J->mcarea;
  308|  36.2k|  J->mcarea = NULL;
  309|  36.2k|  J->szallmcarea = 0;
  310|  36.2k|  while (mc) {
  ------------------
  |  Branch (310:10): [True: 0, False: 36.2k]
  ------------------
  311|      0|    MCode *next = ((MCLink *)mc)->next;
  312|      0|    size_t sz = ((MCLink *)mc)->size;
  313|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  314|      0|    mcode_free(J, mc, sz);
  315|      0|    mc = next;
  316|      0|  }
  317|  36.2k|}

lj_meta_init:
   30|  36.2k|{
   31|  36.2k|#define MMNAME(name)	"__" #name
   32|  36.2k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  36.2k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  36.2k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  36.2k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  36.2k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  36.2k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  36.2k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  36.2k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  36.2k|  /* The following are used in the standard libraries. */ \
  |  |  563|  36.2k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  36.2k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  36.2k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  36.2k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  36.2k|#undef MMNAME
   34|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  36.2k|  const char *p, *q;
   36|  36.2k|  uint32_t mm;
   37|   834k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 797k, False: 36.2k]
  ------------------
   38|   797k|    GCstr *s;
   39|  4.06M|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 4.02M, False: 36.2k]
  |  Branch (39:25): [True: 3.26M, False: 761k]
  ------------------
   40|   797k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|   797k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|   797k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|   797k|  }
   44|  36.2k|}
lj_meta_cache:
   48|   149k|{
   49|   149k|  cTValue *mo = lj_tab_getstr(mt, name);
   50|   149k|  lj_assertX(mm <= MM_FAST, "bad metamethod %d", mm);
  ------------------
  |  |  366|   149k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   149k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 149k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   149k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   51|   149k|  if (!mo || tvisnil(mo)) {  /* No metamethod? */
  ------------------
  |  |  782|   149k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 149k]
  ------------------
   52|      0|    mt->nomm |= (uint8_t)(1u<<mm);  /* Set negative cache flag. */
   53|      0|    return NULL;
   54|      0|  }
   55|   149k|  return mo;
   56|   149k|}
lj_meta_tset:
  162|  36.2k|{
  163|  36.2k|  TValue tmp;
  164|  36.2k|  int loop;
  165|  36.2k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|  36.2k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 36.2k, False: 0]
  ------------------
  166|  36.2k|    cTValue *mo;
  167|  36.2k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|  36.2k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
  168|  36.2k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|  36.2k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  36.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|  36.2k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|  36.2k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  171|      0|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|      0|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|	return (TValue *)tv;
  174|  36.2k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|  36.2k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|  36.2k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 36.2k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 36.2k, False: 0]
  ------------------
  175|  36.2k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|  36.2k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  36.2k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  36.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 36.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|  36.2k|	if (tv != niltv(L))
  ------------------
  |  |  667|  36.2k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  36.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  36.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 36.2k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|  36.2k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  782|  36.2k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  180|  36.2k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  803|  36.2k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  72.5k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|  36.2k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  804|  72.5k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  36.2k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|  36.2k|	return lj_tab_newkey(L, t, k);
  183|  36.2k|      }
  184|  36.2k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  185|      0|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      0|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|  36.2k|}
lj_meta_cat:
  239|  1.00M|{
  240|  1.00M|  int fromc = 0;
  241|  1.00M|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 1.00M, False: 0]
  ------------------
  242|  1.00M|  do {
  243|  1.00M|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  795|  2.00M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.00M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.00M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  802|  1.00M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|  1.00M|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  795|  2.00M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.00M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.00M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  802|  1.00M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|      0|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|      0|      if (tvisnil(mo)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  247|      0|	mo = lj_meta_lookup(L, top, MM_concat);
  248|      0|	if (tvisnil(mo)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  249|      0|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  250|      0|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|      0|	}
  253|      0|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|      0|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  266|      0|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  267|      0|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  268|      0|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  895|      0|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|      0|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|      0|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|      0|      return top+1;  /* Trigger metamethod call. */
  271|  1.00M|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|  1.00M|      TValue *e, *o = top;
  280|  2.00M|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|  1.00M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.00M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.00M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|  1.00M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.00M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.00M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.00M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.00M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.00M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|  1.00M|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|  1.00M|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|  1.00M|      SBuf *sb;
  283|  5.30M|      do {
  284|  10.6M|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|  5.30M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  5.30M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  5.30M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 5.30M, False: 0]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|  5.30M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  5.30M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.30M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.30M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.30M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.30M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  5.30M|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|  5.30M|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|  5.30M|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  795|  8.60M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  4.30M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  4.30M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4.30M, False: 0]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 4.30M, False: 1.00M]
  ------------------
  287|  1.00M|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|  1.00M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  1.00M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 1.00M]
  ------------------
  288|  1.00M|      sb = lj_buf_tmp_(L);
  289|  1.00M|      lj_buf_more(sb, (MSize)tlen);
  290|  7.31M|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 6.30M, False: 1.00M]
  ------------------
  291|  6.30M|	if (tvisstr(o)) {
  ------------------
  |  |  795|  6.30M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  6.30M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  6.30M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 6.30M, False: 0]
  |  |  ------------------
  ------------------
  292|  6.30M|	  GCstr *s = strV(o);
  ------------------
  |  |  859|  6.30M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  6.30M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  6.30M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  6.30M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.30M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  6.30M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|  6.30M|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|  6.30M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|  6.30M|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|      0|	} else if (tvisint(o)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|      0|	} else {
  301|      0|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|      0|	}
  303|  6.30M|      }
  304|  1.00M|      setstrV(L, top, lj_buf_str(L, sb));
  305|  1.00M|    }
  306|  1.00M|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 0, False: 1.00M]
  ------------------
  307|  1.00M|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|  1.00M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 138k, False: 865k]
  |  |  ------------------
  ------------------
  308|   138k|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 0, False: 138k]
  ------------------
  309|   138k|    lj_gc_step(L);
  310|   138k|  }
  311|  1.00M|  return NULL;
  312|  1.00M|}

lj_state.c:setgcVraw:
  918|  72.5k|{
  919|  72.5k|#if LJ_GC64
  920|  72.5k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  72.5k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  72.5k|}
lj_state.c:setgcV:
  927|  72.5k|{
  928|  72.5k|  setgcVraw(o, v, it);
  929|  72.5k|  checklivetv(L, o, "store to dead GC object");
  930|  72.5k|}
lj_state.c:checklivetv:
  904|  72.5k|{
  905|  72.5k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  72.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  72.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  72.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  72.5k|#if LUA_USE_ASSERT
  907|  72.5k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  72.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  72.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  72.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  72.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  72.5k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  72.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  72.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 72.5k, False: 0]
  |  |  ------------------
  ------------------
  908|  72.5k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  72.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 72.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  72.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  72.5k|	       "mismatch of TValue type %d vs GC type %d",
  910|  72.5k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  72.5k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  72.5k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 72.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  72.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  72.5k|  }
  914|  72.5k|#endif
  915|  72.5k|}
lj_state.c:settabV:
  933|  36.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.2k|{ \
  935|  36.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.2k|}
lj_state.c:setthreadV:
  933|  36.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.2k|{ \
  935|  36.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.2k|}
lj_api.c:copyTV:
  975|   217k|{
  976|   217k|  *o1 = *o2;
  977|   217k|  checklivetv(L, o1, "copy of dead GC object");
  978|   217k|}
lj_api.c:checklivetv:
  904|  5.70M|{
  905|  5.70M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.70M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.70M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  5.70M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  5.70M|#if LUA_USE_ASSERT
  907|  5.70M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  5.70M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  5.70M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  5.70M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  5.70M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  5.70M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  5.70M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  5.70M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 5.66M, False: 36.2k]
  |  |  ------------------
  ------------------
  908|  5.66M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  5.66M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.66M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.66M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.66M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  5.66M|	       "mismatch of TValue type %d vs GC type %d",
  910|  5.66M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  5.66M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  5.66M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  5.66M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 5.66M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.66M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  5.66M|  }
  914|  5.70M|#endif
  915|  5.70M|}
lj_api.c:setstrV:
  933|  5.41M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  5.41M|{ \
  935|  5.41M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  5.41M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  5.41M|}
lj_api.c:setgcV:
  927|  5.48M|{
  928|  5.48M|  setgcVraw(o, v, it);
  929|  5.48M|  checklivetv(L, o, "store to dead GC object");
  930|  5.48M|}
lj_api.c:setfuncV:
  933|  36.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.2k|{ \
  935|  36.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.2k|}
lj_api.c:settabV:
  933|  36.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.2k|{ \
  935|  36.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.2k|}
lj_api.c:setgcVraw:
  918|  5.48M|{
  919|  5.48M|#if LJ_GC64
  920|  5.48M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  5.48M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  5.48M|}
lj_ctype.c:setstrV:
  933|  36.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.2k|{ \
  935|  36.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.2k|}
lj_ctype.c:setgcV:
  927|  36.2k|{
  928|  36.2k|  setgcVraw(o, v, it);
  929|  36.2k|  checklivetv(L, o, "store to dead GC object");
  930|  36.2k|}
lj_ctype.c:setgcVraw:
  918|  36.2k|{
  919|  36.2k|#if LJ_GC64
  920|  36.2k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  36.2k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  36.2k|}
lj_ctype.c:checklivetv:
  904|  36.2k|{
  905|  36.2k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  36.2k|#if LUA_USE_ASSERT
  907|  36.2k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  36.2k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  36.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  36.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
  908|  36.2k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  36.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  36.2k|	       "mismatch of TValue type %d vs GC type %d",
  910|  36.2k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  36.2k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  36.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  36.2k|  }
  914|  36.2k|#endif
  915|  36.2k|}
lj_tab.c:checklivetv:
  904|  36.2k|{
  905|  36.2k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  36.2k|#if LUA_USE_ASSERT
  907|  36.2k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  36.2k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  36.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  36.2k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
  908|  36.2k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  36.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  36.2k|	       "mismatch of TValue type %d vs GC type %d",
  910|  36.2k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  36.2k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  36.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  36.2k|  }
  914|  36.2k|#endif
  915|  36.2k|}
lj_tab.c:setstrV:
  933|  36.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  36.2k|{ \
  935|  36.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  36.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  36.2k|}
lj_tab.c:setgcV:
  927|  36.2k|{
  928|  36.2k|  setgcVraw(o, v, it);
  929|  36.2k|  checklivetv(L, o, "store to dead GC object");
  930|  36.2k|}
lj_tab.c:setgcVraw:
  918|  36.2k|{
  919|  36.2k|#if LJ_GC64
  920|  36.2k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  36.2k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  36.2k|}
lj_meta.c:checklivetv:
  904|  1.00M|{
  905|  1.00M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.00M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.00M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.00M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.00M|#if LUA_USE_ASSERT
  907|  1.00M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.00M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.00M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.00M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.00M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.00M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.00M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.00M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.00M, False: 0]
  |  |  ------------------
  ------------------
  908|  1.00M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.00M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.00M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.00M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.00M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.00M|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.00M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.00M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.00M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.00M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.00M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.00M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.00M|  }
  914|  1.00M|#endif
  915|  1.00M|}
lj_meta.c:setgcVraw:
  918|  1.00M|{
  919|  1.00M|#if LJ_GC64
  920|  1.00M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  1.00M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  1.00M|}
lj_meta.c:setstrV:
  933|  1.00M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  1.00M|{ \
  935|  1.00M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  1.00M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  1.00M|}
lj_meta.c:setgcV:
  927|  1.00M|{
  928|  1.00M|  setgcVraw(o, v, it);
  929|  1.00M|  checklivetv(L, o, "store to dead GC object");
  930|  1.00M|}

lj_prng_u64:
   48|   137k|{
   49|   137k|  uint64_t z, r = 0;
   50|   137k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|   137k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|   137k|  z = rs->u[i]; \
  |  |  |  |   37|   137k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   137k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|   137k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|   137k|  z = rs->u[i]; \
  |  |  |  |   37|   137k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   137k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|   137k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|   137k|  z = rs->u[i]; \
  |  |  |  |   37|   137k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   137k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|   137k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|   137k|  z = rs->u[i]; \
  |  |  |  |   37|   137k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|   137k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|   137k|  return r;
   52|   137k|}
lj_prng_seed_secure:
  167|  36.2k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  36.2k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  36.2k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 36.2k, False: 0]
  ------------------
  211|  36.2k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  36.2k|ok:
  253|  36.2k|  lj_prng_condition(rs);
  254|  36.2k|  (void)lj_prng_u64(rs);
  255|  36.2k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  36.2k|{
   66|  36.2k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 36.2k]
  ------------------
   67|  36.2k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 36.2k]
  ------------------
   68|  36.2k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 36.2k]
  ------------------
   69|  36.2k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 36.2k]
  ------------------
   70|  36.2k|}

luaJIT_profile_stop:
  341|  36.2k|{
  342|  36.2k|  ProfileState *ps = &profile_state;
  343|  36.2k|  global_State *g = ps->g;
  344|  36.2k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 36.2k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  677|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  36.2k|}

lj_state_shrinkstack:
   92|   250k|{
   93|   250k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|   250k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|   250k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   250k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|   250k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|   250k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 250k]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|   250k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 208k, False: 42.2k]
  ------------------
   96|   250k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|   208k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|   208k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|   208k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|   208k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|   208k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 0, False: 208k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|   250k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 0, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|      0|    resizestack(L, L->stacksize >> 1);
  100|   250k|}
lua_newstate:
  244|  36.2k|{
  245|  36.2k|  PRNGState prng;
  246|  36.2k|  GG_State *GG;
  247|  36.2k|  lua_State *L;
  248|  36.2k|  global_State *g;
  249|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  250|  36.2k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (250:7): [True: 0, False: 36.2k]
  ------------------
  251|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  252|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  253|      0|    return NULL;
  254|      0|  }
  255|  36.2k|#ifndef LUAJIT_USE_SYSMALLOC
  256|  36.2k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  36.2k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (256:7): [True: 36.2k, False: 0]
  ------------------
  257|  36.2k|    allocd = lj_alloc_create(&prng);
  258|  36.2k|    if (!allocd) return NULL;
  ------------------
  |  Branch (258:9): [True: 0, False: 36.2k]
  ------------------
  259|  36.2k|    allocf = lj_alloc_f;
  260|  36.2k|  }
  261|  36.2k|#endif
  262|  36.2k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  263|  36.2k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  36.2k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  36.2k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  36.2k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (263:7): [True: 0, False: 36.2k]
  |  Branch (263:21): [True: 0, False: 36.2k]
  ------------------
  264|  36.2k|  memset(GG, 0, sizeof(GG_State));
  265|  36.2k|  L = &GG->L;
  266|  36.2k|  g = &GG->g;
  267|  36.2k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  36.2k|#define LJ_TTHREAD		(~6u)
  ------------------
  268|  36.2k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  36.2k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  36.2k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  36.2k|#define LJ_GC_SFIXED	0x40
  ------------------
  269|  36.2k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  36.2k|#define FF_C		1
  ------------------
  270|  36.2k|  setmref(L->glref, g);
  ------------------
  |  |   39|  36.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  36.2k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  36.2k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  36.2k|#define LJ_GC_FIXED	0x20
  ------------------
  272|  36.2k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  36.2k|#define LJ_GC_WHITE0	0x01
  ------------------
  273|  36.2k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  ------------------
  274|  36.2k|  g->allocf = allocf;
  275|  36.2k|  g->allocd = allocd;
  276|  36.2k|  g->prng = prng;
  277|  36.2k|#ifndef LUAJIT_USE_SYSMALLOC
  278|  36.2k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (278:7): [True: 36.2k, False: 0]
  ------------------
  279|  36.2k|    lj_alloc_setprng(allocd, &g->prng);
  280|  36.2k|  }
  281|  36.2k|#endif
  282|  36.2k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  283|  36.2k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  284|  36.2k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  285|  36.2k|  g->str.mask = ~(MSize)0;
  286|  36.2k|  setnilV(registry(L));
  ------------------
  |  |  872|  36.2k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  287|  36.2k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  872|  36.2k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  288|  36.2k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  872|  36.2k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  289|       |#if !LJ_GC64
  290|       |  setmref(g->nilnode.freetop, &g->nilnode);
  291|       |#endif
  292|  36.2k|  lj_buf_init(NULL, &g->tmpbuf);
  293|  36.2k|  g->gc.state = GCSpause;
  294|  36.2k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  295|  36.2k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  36.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  296|  36.2k|  g->gc.total = sizeof(GG_State);
  297|  36.2k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   93|  36.2k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  298|  36.2k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   94|  36.2k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  299|  36.2k|  lj_dispatch_init((GG_State *)L);
  300|  36.2k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  36.2k|#define LUA_ERRERR	5
  ------------------
  301|  36.2k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (301:7): [True: 0, False: 36.2k]
  ------------------
  302|       |    /* Memory allocation error: free partial state. */
  303|      0|    close_state(L);
  304|      0|    return NULL;
  305|      0|  }
  306|  36.2k|  L->status = LUA_OK;
  ------------------
  |  |   43|  36.2k|#define LUA_OK		0
  ------------------
  307|  36.2k|  return L;
  308|  36.2k|}
lua_close:
  321|  36.2k|{
  322|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  323|  36.2k|  int i;
  324|  36.2k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  665|  36.2k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  36.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  325|  36.2k|#if LJ_HASPROFILE
  326|  36.2k|  luaJIT_profile_stop(L);
  327|  36.2k|#endif
  328|  36.2k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  36.2k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  329|  36.2k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  36.2k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  330|  36.2k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  331|  36.2k|#if LJ_HASJIT
  332|  36.2k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  36.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  36.2k|#define JIT_F_ON		0x00000001
  ------------------
  333|  36.2k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  36.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|  36.2k|  lj_dispatch_update(g);
  335|  36.2k|#endif
  336|  36.2k|  for (i = 0;;) {
  337|  36.2k|    hook_enter(g);
  ------------------
  |  |  679|  36.2k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  36.2k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  338|  36.2k|    L->status = LUA_OK;
  ------------------
  |  |   43|  36.2k|#define LUA_OK		0
  ------------------
  339|  36.2k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  36.2k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  36.2k|#define LJ_FR2			1
  ------------------
  340|  36.2k|    L->cframe = NULL;
  341|  36.2k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  36.2k|#define LUA_OK		0
  ------------------
  |  Branch (341:9): [True: 36.2k, False: 0]
  ------------------
  342|  36.2k|      if (++i >= 10) break;
  ------------------
  |  Branch (342:11): [True: 0, False: 36.2k]
  ------------------
  343|  36.2k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  344|  36.2k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  36.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (344:11): [True: 36.2k, False: 0]
  ------------------
  345|  36.2k|	break;
  346|  36.2k|    }
  347|  36.2k|  }
  348|  36.2k|  close_state(L);
  349|  36.2k|}
lj_state.c:cpluaopen:
  186|  36.2k|{
  187|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|  36.2k|  UNUSED(dummy);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  189|  36.2k|  UNUSED(ud);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  190|  36.2k|  stack_init(L, L);
  191|       |  /* NOBARRIER: State initialization, all objects are white. */
  192|  36.2k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  36.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  193|  36.2k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  706|  36.2k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  36.2k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  194|  36.2k|  lj_str_init(L);
  195|  36.2k|  lj_meta_init(L);
  196|  36.2k|  lj_lex_init(L);
  197|  36.2k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  36.2k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  36.2k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  198|  36.2k|  g->gc.threshold = 4*g->gc.total;
  199|  36.2k|#if LJ_HASFFI
  200|  36.2k|  lj_ctype_initfin(L);
  201|  36.2k|#endif
  202|  36.2k|  lj_trace_initstate(g);
  203|  36.2k|  lj_err_verify();
  204|  36.2k|  return NULL;
  205|  36.2k|}
lj_state.c:close_state:
  208|  36.2k|{
  209|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  36.2k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  36.2k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  36.2k|  lj_gc_freeall(g);
  212|  36.2k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  36.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  213|  36.2k|	     "main thread is not first GC object");
  214|  36.2k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  36.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  36.2k|  lj_trace_freestate(g);
  216|  36.2k|#if LJ_HASFFI
  217|  36.2k|  lj_ctype_freestate(g);
  218|  36.2k|#endif
  219|  36.2k|  lj_str_freetab(g);
  ------------------
  |  |   25|  36.2k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  220|  36.2k|  lj_buf_free(g, &g->tmpbuf);
  221|  36.2k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|  36.2k|#if LJ_64
  223|  36.2k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  224|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (224:20): [True: 0, False: 0]
  ------------------
  225|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  226|      0|  }
  227|  36.2k|#endif
  228|  36.2k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  36.2k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  36.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 36.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  36.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  229|  36.2k|	     "memory leak of %lld bytes",
  230|  36.2k|	     (long long)(g->gc.total - sizeof(GG_State)));
  231|  36.2k|#ifndef LUAJIT_USE_SYSMALLOC
  232|  36.2k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (232:7): [True: 36.2k, False: 0]
  ------------------
  233|  36.2k|    lj_alloc_destroy(g->allocd);
  234|      0|  else
  235|      0|#endif
  236|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  237|  36.2k|}
lj_state.c:cpfinalize:
  311|  36.2k|{
  312|  36.2k|  UNUSED(dummy);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  313|  36.2k|  UNUSED(ud);
  ------------------
  |  |   91|  36.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  314|  36.2k|  lj_gc_finalize_cdata(L);
  315|  36.2k|  lj_gc_finalize_udata(L);
  316|       |  /* Frame pop omitted. */
  317|  36.2k|  return NULL;
  318|  36.2k|}
lj_state.c:stack_init:
  169|  36.2k|{
  170|  36.2k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  36.2k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  36.2k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  171|  36.2k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  36.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  172|  36.2k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  36.2k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  36.2k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  36.2k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  36.2k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  173|  36.2k|  stend = st + L1->stacksize;
  174|  36.2k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  36.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  175|  36.2k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  176|  36.2k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  36.2k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  872|  36.2k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  177|  36.2k|  L1->base = L1->top = st;
  178|  1.70M|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (178:10): [True: 1.66M, False: 36.2k]
  ------------------
  179|  1.66M|    setnilV(st++);
  ------------------
  |  |  872|  1.66M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  180|  36.2k|}

lj_str_resize:
  139|  36.2k|{
  140|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  36.2k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  36.2k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  36.2k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  36.2k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 0, False: 36.2k]
  |  Branch (145:40): [True: 0, False: 36.2k]
  ------------------
  146|      0|    return;
  147|       |
  148|  36.2k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  36.2k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  36.2k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  36.2k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  36.2k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  36.2k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 36.2k]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|  36.2k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|  36.2k|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 0, False: 36.2k]
  ------------------
  179|      0|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|      0|    while (o) {
  ------------------
  |  Branch (180:12): [True: 0, False: 0]
  ------------------
  181|      0|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|      0|      GCstr *s = gco2str(o);
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|      0|#if LUAJIT_SECURITY_STRHASH
  185|      0|      uintptr_t u;
  186|      0|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|      0|	hash &= newmask;
  188|      0|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|      0|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|      0|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|      0|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|      0|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|      0|      o = next;
  217|      0|    }
  218|      0|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  36.2k|  lj_str_freetab(g);
  ------------------
  |  |   25|  36.2k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  36.2k|  g->str.tab = newtab;
  223|  36.2k|  g->str.mask = newmask;
  224|  36.2k|}
lj_str_new:
  324|  8.12M|{
  325|  8.12M|  global_State *g = G(L);
  ------------------
  |  |  705|  8.12M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  8.12M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  8.12M|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  8.12M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  8.12M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 8.12M, False: 0]
  ------------------
  327|  8.12M|    MSize len = (MSize)lenx;
  328|  8.12M|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  8.12M|    MSize coll = 0;
  330|  8.12M|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  8.12M|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  8.12M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  8.12M|#if LUAJIT_SECURITY_STRHASH
  334|  8.12M|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  8.12M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 14.9k, False: 8.11M]
  |  |  ------------------
  ------------------
  335|  14.9k|      hashalg = 1;
  336|  14.9k|      hash = hash_dense(g->str.seed, hash, str, len);
  337|  14.9k|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  14.9k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|  14.9k|    }
  339|  8.12M|#endif
  340|  11.3M|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 6.55M, False: 4.83M]
  ------------------
  341|  6.55M|      GCstr *sx = gco2str(o);
  ------------------
  |  |  765|  6.55M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  6.55M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  6.55M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  6.55M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.55M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  6.55M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|  6.55M|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 5.14M, False: 1.41M]
  |  Branch (342:31): [True: 5.14M, False: 299]
  ------------------
  343|  5.14M|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|  5.14M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 3.28M, False: 1.85M]
  ------------------
  344|  3.28M|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|  3.28M|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|  3.28M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  3.28M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  3.28M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  3.28M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  3.28M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  3.28M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  3.28M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 11.7k, False: 3.27M]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|  11.7k|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  11.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  11.7k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  11.7k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|  3.28M|	  return sx;  /* Return existing string. */
  346|  3.28M|	}
  347|  1.85M|	coll++;
  348|  1.85M|      }
  349|  3.26M|      coll++;
  350|  3.26M|      o = gcnext(o);
  ------------------
  |  |   90|  3.26M|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  3.26M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|  3.26M|    }
  352|  4.83M|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|  4.83M|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  9.67M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 3.02k, False: 4.83M]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 3.02k, False: 0]
  ------------------
  355|  3.02k|      return lj_str_rehash_chain(L, hash, str, len);
  356|  3.02k|    }
  357|  4.83M|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|  4.83M|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|  4.83M|  } else {
  361|      0|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|      0|    return &g->strempty;
  364|      0|  }
  365|  8.12M|}
lj_str_free:
  368|  4.83M|{
  369|  4.83M|  g->str.num--;
  370|  4.83M|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|  4.83M|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|  4.83M|}
lj_str_init:
  374|  36.2k|{
  375|  36.2k|  global_State *g = G(L);
  ------------------
  |  |  705|  36.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  36.2k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  36.2k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  36.2k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  36.2k|}
lj_str.c:hash_sparse:
   86|  8.12M|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  8.12M|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  8.12M|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 7.72M, False: 398k]
  ------------------
   90|  7.72M|    a = lj_getu32(str);
   91|  7.72M|    h ^= lj_getu32(str+len-4);
   92|  7.72M|    b = lj_getu32(str+(len>>1)-2);
   93|  7.72M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  7.72M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|  7.72M|    b += lj_getu32(str+(len>>2)-1);
   95|  7.72M|  } else {
   96|   398k|    a = *(const uint8_t *)str;
   97|   398k|    h ^= *(const uint8_t *)(str+len-1);
   98|   398k|    b = *(const uint8_t *)(str+(len>>1));
   99|   398k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   398k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|   398k|  }
  101|  8.12M|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  8.12M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  8.12M|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  8.12M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  8.12M|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  8.12M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  8.12M|  return h;
  105|  8.12M|}
lj_str.c:hash_dense:
  111|  60.2k|{
  112|  60.2k|  StrHash b = lj_bswap(lj_rol(h ^ (StrHash)(seed >> 32), 4));
  ------------------
  |  |  113|  60.2k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  113|  60.2k|  if (len > 12) {
  ------------------
  |  Branch (113:7): [True: 59.4k, False: 814]
  ------------------
  114|  59.4k|    StrHash a = (StrHash)seed;
  115|  59.4k|    const char *pe = str+len-12, *p = pe, *q = str;
  116|  42.8M|    do {
  117|  42.8M|      a += lj_getu32(p);
  118|  42.8M|      b += lj_getu32(p+4);
  119|  42.8M|      h += lj_getu32(p+8);
  120|  42.8M|      p = q; q += 12;
  121|  42.8M|      h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  42.8M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  122|  42.8M|      a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  42.8M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  123|  42.8M|      b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  42.8M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  124|  42.8M|    } while (p < pe);
  ------------------
  |  Branch (124:14): [True: 42.7M, False: 59.4k]
  ------------------
  125|  59.4k|    h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  59.4k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  126|  59.4k|    a ^= h; a -= lj_rol(h, 4);
  ------------------
  |  |  113|  59.4k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  127|  59.4k|    b ^= a; b -= lj_rol(a, 14);
  ------------------
  |  |  113|  59.4k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  128|  59.4k|  }
  129|  60.2k|  return b;
  130|  60.2k|}
lj_str.c:lj_str_rehash_chain:
  230|  3.02k|{
  231|  3.02k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.02k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.02k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  232|  3.02k|  int ow = g->gc.state == GCSsweepstring ? otherwhite(g) : 0;  /* Sweeping? */
  ------------------
  |  |   36|    392|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    392|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    392|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    392|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (232:12): [True: 392, False: 2.63k]
  ------------------
  233|  3.02k|  GCRef *strtab = g->str.tab;
  234|  3.02k|  MSize strmask = g->str.mask;
  235|  3.02k|  GCobj *o = gcref(strtab[hashc & strmask]);
  ------------------
  |  |   67|  3.02k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  236|  3.02k|  setgcrefp(strtab[hashc & strmask], (void *)((uintptr_t)1));
  ------------------
  |  |   75|  3.02k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  237|  3.02k|  g->str.second = 1;
  238|  54.8k|  while (o) {
  ------------------
  |  Branch (238:10): [True: 51.8k, False: 3.02k]
  ------------------
  239|  51.8k|    uintptr_t u;
  240|  51.8k|    GCobj *next = gcnext(o);
  ------------------
  |  |   90|  51.8k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  51.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  241|  51.8k|    GCstr *s = gco2str(o);
  ------------------
  |  |  765|  51.8k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  51.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  51.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  51.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 51.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  51.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|      0|    StrHash hash;
  243|  51.8k|    if (ow) {  /* Must sweep while rechaining. */
  ------------------
  |  Branch (243:9): [True: 6.68k, False: 45.1k]
  ------------------
  244|  6.68k|      if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* String alive? */
  ------------------
  |  |   27|  6.68k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  6.68k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  6.68k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (244:11): [True: 177, False: 6.50k]
  ------------------
  245|    177|	lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|    177|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    193|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 161, False: 16]
  |  |  |  |  |  Branch (355:5): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    177|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  246|    177|		   "sweep of undead string");
  247|    177|	makewhite(g, o);
  ------------------
  |  |   42|    177|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|    177|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    177|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    177|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    177|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    177|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|    177|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    177|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    177|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    177|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|  6.50k|      } else {  /* Free dead string. */
  249|  6.50k|	lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  6.50k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.50k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 6.50k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.50k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  250|  6.50k|		   "sweep of unlive string");
  251|  6.50k|	lj_str_free(g, s);
  252|  6.50k|	o = next;
  253|  6.50k|	continue;
  254|  6.50k|      }
  255|  6.68k|    }
  256|  45.3k|    hash = s->hash;
  257|  45.3k|    if (!s->hashalg) {  /* Rehash with secondary hash. */
  ------------------
  |  Branch (257:9): [True: 45.2k, False: 71]
  ------------------
  258|  45.2k|      hash = hash_dense(g->str.seed, hash, strdata(s), s->len);
  ------------------
  |  |  316|  45.2k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  259|  45.2k|      s->hash = hash;
  260|  45.2k|      s->hashalg = 1;
  261|  45.2k|    }
  262|       |    /* Rechain. */
  263|  45.3k|    hash &= strmask;
  264|  45.3k|    u = gcrefu(strtab[hash]);
  ------------------
  |  |   69|  45.3k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  265|  45.3k|    setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  45.3k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  266|  45.3k|    setgcrefp(strtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|  45.3k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  267|  45.3k|    o = next;
  268|  45.3k|  }
  269|       |  /* Try to insert the pending string again. */
  270|  3.02k|  return lj_str_new(L, str, len);
  271|  3.02k|}
lj_str.c:lj_str_alloc:
  286|  4.83M|{
  287|  4.83M|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|  4.83M|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  4.83M|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|  4.83M|  global_State *g = G(L);
  ------------------
  |  |  705|  4.83M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.83M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  4.83M|  uintptr_t u;
  290|  4.83M|  newwhite(g, s);
  ------------------
  |  |   40|  4.83M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  4.83M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  4.83M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.83M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.83M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.83M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  4.83M|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|  4.83M|#define LJ_TSTR			(~4u)
  ------------------
  292|  4.83M|  s->len = len;
  293|  4.83M|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|  4.83M|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 64.8k, False: 4.76M]
  ------------------
  298|  64.8k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  64.8k|    g->str.id = (StrID)r;
  300|  64.8k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  64.8k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  64.8k|  }
  302|  4.83M|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|  4.83M|  s->reserved = 0;
  307|  4.83M|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|  4.83M|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|  4.83M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|  4.83M|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|  4.83M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|  4.83M|  hash &= g->str.mask;
  313|  4.83M|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|  4.83M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|  4.83M|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  4.83M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|  4.83M|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|  4.83M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|  4.83M|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 0, False: 4.83M]
  ------------------
  318|      0|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|  4.83M|  return s;  /* Return newly interned string. */
  320|  4.83M|}

lj_tab_new:
  140|   145k|{
  141|   145k|  GCtab *t = newtab(L, asize, hbits);
  142|   145k|  clearapart(t);
  143|   145k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 145k, False: 0]
  ------------------
  144|   145k|  return t;
  145|   145k|}
lj_tab_new_ah:
  149|  36.2k|{
  150|  36.2k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|  36.2k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  36.2k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 36.2k, False: 0]
  |  |  |  Branch (53:32): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 0, False: 36.2k]
  ------------------
  151|  36.2k|}
lj_tab_free:
  217|   145k|{
  218|   145k|  if (t->hmask > 0)
  ------------------
  |  Branch (218:7): [True: 145k, False: 0]
  ------------------
  219|   145k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|   145k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  220|   145k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (220:7): [True: 0, False: 145k]
  |  Branch (220:23): [Folded - Ignored]
  |  Branch (220:47): [True: 0, False: 0]
  ------------------
  221|      0|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|   145k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|   145k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (222:7): [Folded - Ignored]
  |  Branch (222:31): [True: 0, False: 145k]
  ------------------
  223|      0|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|      0|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  224|   145k|  else
  225|   145k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|   145k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  226|   145k|}
lj_tab_getstr:
  392|   221k|{
  393|   221k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|   221k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  394|   221k|  do {
  395|   298k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|   443k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   221k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   221k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 149k, False: 72.5k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|   149k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   149k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   149k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   149k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 149k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   149k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (395:29): [True: 149k, False: 0]
  ------------------
  396|   149k|      return &n->val;
  397|   221k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  72.5k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  72.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (397:12): [True: 0, False: 72.5k]
  ------------------
  398|  72.5k|  return NULL;
  399|   221k|}
lj_tab_get:
  402|  72.5k|{
  403|  72.5k|  if (tvisstr(key)) {
  ------------------
  |  |  795|  72.5k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  72.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  72.5k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 72.5k, False: 0]
  |  |  ------------------
  ------------------
  404|  72.5k|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  859|  72.5k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  72.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  72.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 72.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  72.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  72.5k|    if (tv)
  ------------------
  |  Branch (405:9): [True: 0, False: 72.5k]
  ------------------
  406|      0|      return tv;
  407|  72.5k|  } else if (tvisint(key)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  408|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:71): [Folded - Ignored]
  |  |  |  Branch (82:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  409|      0|    if (tv)
  ------------------
  |  Branch (409:9): [True: 0, False: 0]
  ------------------
  410|      0|      return tv;
  411|      0|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  412|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  413|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  414|      0|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (414:9): [True: 0, False: 0]
  ------------------
  415|      0|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|      0|      if (tv)
  ------------------
  |  Branch (416:11): [True: 0, False: 0]
  ------------------
  417|      0|	return tv;
  418|      0|    } else {
  419|      0|      goto genlookup;  /* Else use the generic lookup. */
  420|      0|    }
  421|      0|  } else if (!tvisnil(key)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (421:14): [True: 0, False: 0]
  ------------------
  422|      0|    Node *n;
  423|      0|  genlookup:
  424|      0|    n = hashkey(t, key);
  425|      0|    do {
  426|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (426:11): [True: 0, False: 0]
  ------------------
  427|      0|	return &n->val;
  428|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (428:14): [True: 0, False: 0]
  ------------------
  429|      0|  }
  430|  72.5k|  return niltv(L);
  ------------------
  |  |  667|  72.5k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  72.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  72.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  72.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 72.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  72.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  431|  72.5k|}
lj_tab_newkey:
  437|   108k|{
  438|   108k|  Node *n = hashkey(t, key);
  439|   108k|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  782|   217k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (439:7): [True: 0, False: 108k]
  |  Branch (439:28): [True: 0, False: 108k]
  ------------------
  440|      0|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  441|      0|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|      0|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  442|      0|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  443|      0|	       "bad freenode");
  444|      0|    do {
  445|      0|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (445:11): [True: 0, False: 0]
  ------------------
  446|      0|	rehashtab(L, t, key);  /* Rehash table. */
  447|      0|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  448|      0|      }
  449|      0|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (449:14): [True: 0, False: 0]
  ------------------
  450|      0|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|      0|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  451|      0|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  452|      0|    collide = hashkey(t, &n->key);
  453|      0|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (453:9): [True: 0, False: 0]
  ------------------
  454|      0|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|      0|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (454:14): [True: 0, False: 0]
  ------------------
  455|      0|	collide = nextnode(collide);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  456|      0|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  457|       |      /* Copy colliding node into free node and free main node. */
  458|      0|      freenode->val = n->val;
  459|      0|      freenode->key = n->key;
  460|      0|      freenode->next = n->next;
  461|      0|      setmref(n->next, NULL);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  462|      0|      setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  463|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  464|      0|      while (nextnode(freenode)) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  465|      0|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  466|      0|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (466:6): [True: 0, False: 0]
  |  Branch (466:28): [True: 0, False: 0]
  ------------------
  467|      0|	  freenode->next = nn->next;
  468|      0|	  nn->next = n->next;
  469|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  470|       |	  /*
  471|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  472|       |	  ** Another string key may have originally been resurrected via
  473|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  474|       |	  ** a node that had to be moved, which makes them unreachable.
  475|       |	  ** It's not feasible to check for all previous nodes, so rechain
  476|       |	  ** any string key that's currently in a non-main positions.
  477|       |	  */
  478|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (478:11): [True: 0, False: 0]
  ------------------
  479|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (479:10): [True: 0, False: 0]
  ------------------
  480|      0|	      Node *mn = hashkey(t, &nn->key);
  481|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (481:12): [True: 0, False: 0]
  |  Branch (481:30): [True: 0, False: 0]
  ------------------
  482|      0|		freenode->next = nn->next;
  483|      0|		nn->next = mn->next;
  484|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  485|      0|	      } else {
  486|      0|		freenode = nn;
  487|      0|	      }
  488|      0|	    } else {
  489|      0|	      freenode = nn;
  490|      0|	    }
  491|      0|	  }
  492|      0|	  break;
  493|      0|	} else {
  494|      0|	  freenode = nn;
  495|      0|	}
  496|      0|      }
  497|      0|    } else {  /* Otherwise use free node. */
  498|      0|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|      0|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  499|      0|      setmref(n->next, freenode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  500|      0|      n = freenode;
  501|      0|    }
  502|      0|  }
  503|   108k|  n->key.u64 = key->u64;
  504|   108k|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|   108k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 108k]
  |  |  ------------------
  ------------------
  505|      0|    n->key.u64 = 0;
  506|   108k|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   108k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   108k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|   108k|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|   108k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   108k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 108k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   108k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  508|   108k|  return &n->val;
  509|   108k|}
lj_tab_setinth:
  512|  36.2k|{
  513|  36.2k|  TValue k;
  514|  36.2k|  Node *n;
  515|  36.2k|  k.n = (lua_Number)key;
  516|  36.2k|  n = hashnum(t, &k);
  ------------------
  |  |   45|  36.2k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  36.2k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  517|  36.2k|  do {
  518|  36.2k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|  72.5k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  36.2k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
  |  Branch (518:29): [True: 0, False: 0]
  ------------------
  519|      0|      return &n->val;
  520|  36.2k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  36.2k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (520:12): [True: 0, False: 36.2k]
  ------------------
  521|  36.2k|  return lj_tab_newkey(L, t, &k);
  522|  36.2k|}
lj_tab_setstr:
  525|  36.2k|{
  526|  36.2k|  TValue k;
  527|  36.2k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  36.2k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  528|  36.2k|  do {
  529|  36.2k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  72.5k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  36.2k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 36.2k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (529:29): [True: 0, False: 0]
  ------------------
  530|      0|      return &n->val;
  531|  36.2k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  36.2k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  36.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (531:12): [True: 0, False: 36.2k]
  ------------------
  532|  36.2k|  setstrV(L, &k, key);
  533|  36.2k|  return lj_tab_newkey(L, t, &k);
  534|  36.2k|}
lj_tab.c:newtab:
   82|   145k|{
   83|   145k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|   145k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|   145k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|      0|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 0, False: 145k]
  |  Branch (85:44): [True: 0, False: 0]
  ------------------
   86|      0|    Node *nilnode;
   87|      0|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|      0|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|      0|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|      0|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|      0|#define LJ_TTAB			(~11u)
  ------------------
   90|      0|    t->nomm = (uint8_t)~0;
   91|      0|    t->colo = (int8_t)asize;
   92|      0|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|      0|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|      0|    t->asize = asize;
   95|      0|    t->hmask = 0;
   96|      0|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|      0|    setmref(t->node, nilnode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|      0|#if LJ_GC64
   99|      0|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|      0|#endif
  101|   145k|  } else {  /* Otherwise separately allocate the array part. */
  102|   145k|    Node *nilnode;
  103|   145k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|   145k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|   145k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|   145k|#define LJ_TTAB			(~11u)
  ------------------
  105|   145k|    t->nomm = (uint8_t)~0;
  106|   145k|    t->colo = 0;
  107|   145k|    setmref(t->array, NULL);
  ------------------
  |  |   39|   145k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|   145k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|   145k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|   145k|    t->asize = 0;  /* In case the array allocation fails. */
  110|   145k|    t->hmask = 0;
  111|   145k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|   145k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   145k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|   145k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|   145k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|   145k|#if LJ_GC64
  114|   145k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|   145k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|   145k|#endif
  116|   145k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 0, False: 145k]
  ------------------
  117|      0|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|      0|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|      0|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 0]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|      0|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|      0|      t->asize = asize;
  121|      0|    }
  122|   145k|  }
  123|   145k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 145k, False: 0]
  ------------------
  124|   145k|    newhpart(L, t, hbits);
  125|   145k|  return t;
  126|   145k|}
lj_tab.c:clearapart:
   73|   145k|{
   74|   145k|  uint32_t i, asize = t->asize;
   75|   145k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|   145k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   145k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|   145k|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 0, False: 145k]
  ------------------
   77|      0|    setnilV(&array[i]);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|   145k|}
lj_tab.c:clearhpart:
   59|   145k|{
   60|   145k|  uint32_t i, hmask = t->hmask;
   61|   145k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|   145k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   145k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|   145k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|   145k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   145k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 145k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   145k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  2.82M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 2.68M, False: 145k]
  ------------------
   64|  2.68M|    Node *n = &node[i];
   65|  2.68M|    setmref(n->next, NULL);
  ------------------
  |  |   39|  2.68M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  2.68M|    setnilV(&n->key);
  ------------------
  |  |  872|  2.68M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  2.68M|    setnilV(&n->val);
  ------------------
  |  |  872|  2.68M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  2.68M|  }
   69|   145k|}
lj_tab.c:newhpart:
   38|   145k|{
   39|   145k|  uint32_t hsize;
   40|   145k|  Node *node;
   41|   145k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|   145k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   145k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 145k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   145k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|   145k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|   145k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 145k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|   145k|  hsize = 1u << hbits;
   45|   145k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|   145k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|   145k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|   145k|  setmref(t->node, node);
  ------------------
  |  |   39|   145k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|   145k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|   145k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   145k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|   145k|  t->hmask = hsize-1;
   49|   145k|}
lj_tab.c:hashkey:
   21|   108k|{
   22|   108k|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|   108k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   108k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   108k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|   108k|  if (tvisstr(key))
  ------------------
  |  |  795|   108k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   108k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   108k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 72.5k, False: 36.2k]
  |  |  ------------------
  ------------------
   24|   108k|    return hashstr(t, strV(key));
  ------------------
  |  |   42|   145k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 72.5k, False: 0]
  |  |  ------------------
  ------------------
   25|  36.2k|  else if (tvisnum(key))
  ------------------
  |  |  804|  36.2k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  36.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  36.2k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  36.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 36.2k, False: 0]
  |  |  ------------------
  ------------------
   26|  36.2k|    return hashnum(t, key);
  ------------------
  |  |   45|  36.2k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  36.2k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|      0|  else if (tvisbool(key))
  ------------------
  |  |  789|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  837|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|      0|  else
   30|      0|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|      0|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|      0|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|   108k|}

lj_tab.c:hashmask:
   36|   402k|{
   37|   402k|  Node *n = noderef(t->node);
  ------------------
  |  |  515|   402k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   402k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|   402k|  return &n[hash & t->hmask];
   39|   402k|}
lj_tab.c:hashrot:
   19|  72.5k|{
   20|  72.5k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  72.5k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  72.5k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  72.5k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  72.5k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  72.5k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  72.5k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  72.5k|  return hi;
   32|  72.5k|}

lj_trace_initstate:
  307|  36.2k|{
  308|  36.2k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  36.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  309|  36.2k|  TValue *tv;
  310|       |
  311|       |  /* Initialize aligned SIMD constants. */
  312|  36.2k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  36.2k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  313|  36.2k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  314|  36.2k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  315|  36.2k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  36.2k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  316|  36.2k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  317|  36.2k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  318|       |
  319|       |  /* Initialize 32/64 bit constants. */
  320|  36.2k|#if LJ_TARGET_X86ORX64
  321|  36.2k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|       |#if LJ_32
  323|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  324|       |#endif
  325|  36.2k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  326|  36.2k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  36.2k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  327|  36.2k|#endif
  328|  36.2k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  329|  36.2k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  36.2k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  330|  36.2k|#endif
  331|       |#if LJ_TARGET_PPC
  332|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  333|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  334|       |#endif
  335|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  336|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  337|       |#endif
  338|       |#if LJ_TARGET_MIPS
  339|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  340|       |#if LJ_64
  341|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  342|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  343|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  344|       |#endif
  345|       |#endif
  346|  36.2k|}
lj_trace_freestate:
  350|  36.2k|{
  351|  36.2k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  36.2k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  36.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  36.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  352|  36.2k|#ifdef LUA_USE_ASSERT
  353|  36.2k|  {  /* This assumes all traces have already been freed. */
  354|  36.2k|    ptrdiff_t i;
  355|  36.2k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (355:17): [True: 0, False: 36.2k]
  ------------------
  356|  36.2k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  357|  36.2k|		 "trace still allocated");
  358|  36.2k|  }
  359|  36.2k|#endif
  360|  36.2k|  lj_mcode_free(J);
  361|  36.2k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  362|  36.2k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  363|  36.2k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  364|  36.2k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  36.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  365|  36.2k|}

LLVMFuzzerTestOneInput:
   29|  36.2k|{
   30|  36.2k|	FuzzedDataProvider fdp(data, size);
   31|       |
   32|  36.2k|	lua_State *L = luaL_newstate();
   33|  36.2k|	if (L == NULL)
  ------------------
  |  Branch (33:6): [True: 0, False: 36.2k]
  ------------------
   34|      0|		return 0;
   35|       |
   36|  36.2k|	auto str1 = fdp.ConsumeRandomLengthString(size);
   37|  36.2k|	auto str2 = fdp.ConsumeRandomLengthString(size);
   38|  36.2k|	auto str3 = fdp.ConsumeRandomLengthString(size);
   39|  36.2k|	const char *c_str1 = str1.c_str();
   40|  36.2k|	const char *c_str2 = str2.c_str();
   41|  36.2k|	const char *c_str3 = str3.c_str();
   42|  36.2k|	if (strlen(c_str1) == 0 ||
  ------------------
  |  Branch (42:6): [True: 8, False: 36.2k]
  ------------------
   43|  36.2k|	    strlen(c_str2) == 0 ||
  ------------------
  |  Branch (43:6): [True: 25, False: 36.2k]
  ------------------
   44|  36.2k|	    strlen(c_str3) == 0) {
  ------------------
  |  Branch (44:6): [True: 2, False: 36.2k]
  ------------------
   45|     35|		lua_settop(L, 0);
   46|     35|		lua_close(L);
   47|     35|		return -1;
   48|     35|	}
   49|  36.2k|	int top = lua_gettop(L);
   50|  36.2k|	luaL_gsub(L, c_str1, c_str2, c_str3);
   51|       |	/* [-0, +1, m] */
   52|  36.2k|	assert(lua_gettop(L) == top + 1);
   53|       |
   54|  36.2k|	lua_settop(L, 0);
   55|  36.2k|	lua_close(L);
   56|       |
   57|  36.2k|	return 0;
   58|  36.2k|}

