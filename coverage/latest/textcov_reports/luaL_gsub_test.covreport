






















LLVMFuzzerTestOneInput:
   29|  1.51k|{
   30|  1.51k|	FuzzedDataProvider fdp(data, size);
   31|       |
   32|  1.51k|	lua_State *L = luaL_newstate();
   33|  1.51k|	if (L == NULL)
  ------------------
  |  Branch (33:6): [True: 0, False: 1.51k]
  ------------------
   34|      0|		return 0;
   35|       |
   36|  1.51k|	auto str1 = fdp.ConsumeRandomLengthString(size);
   37|  1.51k|	auto str2 = fdp.ConsumeRandomLengthString(size);
   38|  1.51k|	auto str3 = fdp.ConsumeRandomLengthString(size);
   39|  1.51k|	const char *c_str1 = str1.c_str();
   40|  1.51k|	const char *c_str2 = str2.c_str();
   41|  1.51k|	const char *c_str3 = str3.c_str();
   42|  1.51k|	if (strlen(c_str1) == 0 ||
  ------------------
  |  Branch (42:6): [True: 13, False: 1.50k]
  ------------------
   43|  1.51k|	    strlen(c_str2) == 0 ||
  ------------------
  |  Branch (43:6): [True: 103, False: 1.40k]
  ------------------
   44|  1.51k|	    strlen(c_str3) == 0) {
  ------------------
  |  Branch (44:6): [True: 10, False: 1.39k]
  ------------------
   45|    126|		lua_settop(L, 0);
   46|    126|		lua_close(L);
   47|    126|		return -1;
   48|    126|	}
   49|  1.39k|	int top = lua_gettop(L);
   50|  1.39k|	luaL_gsub(L, c_str1, c_str2, c_str3);
   51|       |	/* [-0, +1, m] */
   52|  1.39k|	assert(lua_gettop(L) == top + 1);
   53|       |
   54|      0|	lua_settop(L, 0);
   55|  1.39k|	lua_close(L);
   56|       |
   57|  1.39k|	return 0;
   58|  1.51k|}

