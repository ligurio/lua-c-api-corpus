luaL_findtable:
   84|   102k|{
   85|   102k|  const char *e;
   86|   102k|  lua_pushvalue(L, idx);
   87|   105k|  do {
   88|   105k|    e = strchr(fname, '.');
   89|   105k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 102k, False: 3.10k]
  ------------------
   90|   105k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|   105k|    lua_rawget(L, -2);
   92|   105k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|   105k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|   105k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 43.4k, False: 62.0k]
  |  |  ------------------
  ------------------
   93|  43.4k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|  43.4k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|  43.4k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 43.4k]
  ------------------
   95|  43.4k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|  43.4k|      lua_pushvalue(L, -2);
   97|  43.4k|      lua_settable(L, -4);  /* set new table into field */
   98|  62.0k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|  62.0k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  62.0k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 62.0k]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|   105k|    lua_remove(L, -2);  /* remove previous table */
  103|   105k|    fname = e + 1;
  104|   105k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 3.10k, False: 102k]
  ------------------
  105|   102k|  return NULL;
  106|   102k|}
luaL_pushmodule:
  116|  3.10k|{
  117|  3.10k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  118|  3.10k|  lua_getfield(L, -1, modname);
  119|  3.10k|  if (!lua_istable(L, -1)) {
  ------------------
  |  |  267|  3.10k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  3.10k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (119:7): [True: 3.10k, False: 0]
  ------------------
  120|  3.10k|    lua_pop(L, 1);
  ------------------
  |  |  256|  3.10k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  121|  3.10k|    if (luaL_findtable(L, LUA_GLOBALSINDEX, modname, sizehint) != NULL)
  ------------------
  |  |   38|  3.10k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (121:9): [True: 0, False: 3.10k]
  ------------------
  122|      0|      lj_err_callerv(L, LJ_ERR_BADMODN, modname);
  123|  3.10k|    lua_pushvalue(L, -1);
  124|  3.10k|    lua_setfield(L, -3, modname);  /* _LOADED[modname] = new table. */
  125|  3.10k|  }
  126|  3.10k|  lua_remove(L, -2);  /* Remove _LOADED table. */
  127|  3.10k|}
luaL_openlib:
  131|  6.20k|{
  132|  6.20k|  lj_lib_checkfpu(L);
  ------------------
  |  |   74|  6.20k|#define lj_lib_checkfpu(L)	UNUSED(L)
  |  |  ------------------
  |  |  |  |   91|  6.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  133|  6.20k|  if (libname) {
  ------------------
  |  Branch (133:7): [True: 3.10k, False: 3.10k]
  ------------------
  134|  3.10k|    luaL_pushmodule(L, libname, libsize(l));
  135|  3.10k|    lua_insert(L, -(nup + 1));  /* Move module table below upvalues. */
  136|  3.10k|  }
  137|  6.20k|  if (l)
  ------------------
  |  Branch (137:7): [True: 6.20k, False: 0]
  ------------------
  138|  6.20k|    luaL_setfuncs(L, l, nup);
  139|      0|  else
  140|      0|    lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  141|  6.20k|}
luaL_register:
  145|  6.20k|{
  146|  6.20k|  luaL_openlib(L, libname, l, 0);
  147|  6.20k|}
luaL_setfuncs:
  150|  6.20k|{
  151|  6.20k|  luaL_checkstack(L, nup, "too many upvalues");
  152|  21.7k|  for (; l->name; l++) {
  ------------------
  |  Branch (152:10): [True: 15.5k, False: 6.20k]
  ------------------
  153|  15.5k|    int i;
  154|  15.5k|    for (i = 0; i < nup; i++)  /* Copy upvalues to the top. */
  ------------------
  |  Branch (154:17): [True: 0, False: 15.5k]
  ------------------
  155|      0|      lua_pushvalue(L, -nup);
  156|  15.5k|    lua_pushcclosure(L, l->func, nup);
  157|  15.5k|    lua_setfield(L, -(nup + 2), l->name);
  158|  15.5k|  }
  159|  6.20k|  lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|  6.20k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  160|  6.20k|}
luaL_newstate:
  371|  3.10k|{
  372|  3.10k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  3.10k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  3.10k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  3.10k|#endif
  378|  3.10k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 3.10k, False: 0]
  ------------------
  379|  3.10k|    G(L)->panic = panic;
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  3.10k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  3.10k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  3.10k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  3.10k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  3.10k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  3.10k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  3.10k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  3.10k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  3.10k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  3.10k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  3.10k|    L->top--;
  386|  3.10k|#endif
  387|  3.10k|  }
  388|  3.10k|  return L;
  389|  3.10k|}
lib_aux.c:libsize:
  109|  3.10k|{
  110|  3.10k|  int size = 0;
  111|  12.4k|  for (; l && l->name; l++) size++;
  ------------------
  |  Branch (111:10): [True: 12.4k, False: 0]
  |  Branch (111:15): [True: 9.31k, False: 3.10k]
  ------------------
  112|  3.10k|  return size;
  113|  3.10k|}

luaopen_base:
  693|  3.10k|{
  694|       |  /* NOBARRIER: Table and value are the same. */
  695|  3.10k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|  3.10k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  696|  3.10k|  settabV(L, lj_tab_setstr(L, env, lj_str_newlit(L, "_G")), env);
  ------------------
  |  |   28|  3.10k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  697|  3.10k|  lua_pushliteral(L, LUA_VERSION);  /* top-3. */
  ------------------
  |  |  276|  3.10k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  698|  3.10k|  newproxy_weaktable(L);  /* top-2. */
  699|  3.10k|  LJ_LIB_REG(L, "_G", base);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  700|  3.10k|  LJ_LIB_REG(L, LUA_COLIBNAME, coroutine);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  701|  3.10k|  return 2;
  702|  3.10k|}
lib_base.c:newproxy_weaktable:
  682|  3.10k|{
  683|       |  /* NOBARRIER: The table is new (marked white). */
  684|  3.10k|  GCtab *t = lj_tab_new(L, 0, 1);
  685|  3.10k|  settabV(L, L->top++, t);
  686|  3.10k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  687|  3.10k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  3.10k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  688|  3.10k|	    lj_str_newlit(L, "kv"));
  ------------------
  |  |   28|  3.10k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  689|  3.10k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  690|  3.10k|}

luaopen_bit:
  177|  3.10k|{
  178|  3.10k|  LJ_LIB_REG(L, LUA_BITLIBNAME, bit);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  179|  3.10k|  return 1;
  180|  3.10k|}

luaopen_debug:
  402|  3.10k|{
  403|  3.10k|  LJ_LIB_REG(L, LUA_DBLIBNAME, debug);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  404|  3.10k|  return 1;
  405|  3.10k|}

luaopen_ffi:
  838|    509|{
  839|    509|  CTState *cts = lj_ctype_init(L);
  840|    509|  settabV(L, L->top++, (cts->miscmap = lj_tab_new(L, 0, 1)));
  841|    509|  LJ_LIB_REG(L, NULL, ffi_meta);
  ------------------
  |  |   92|    509|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  842|       |  /* NOBARRIER: basemt is a GC root. */
  843|    509|  setgcref(basemt_it(G(L), LJ_TCDATA), obj2gco(tabV(L->top-1)));
  ------------------
  |  |   72|  1.01k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 509, False: 0]
  |  |  ------------------
  ------------------
  844|    509|  LJ_LIB_REG(L, NULL, ffi_clib);
  ------------------
  |  |   92|    509|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  845|    509|  LJ_LIB_REG(L, NULL, ffi_callback);
  ------------------
  |  |   92|    509|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  846|       |  /* NOBARRIER: the key is new and lj_tab_newkey() handles the barrier. */
  847|    509|  settabV(L, lj_tab_setstr(L, cts->miscmap, &cts->g->strempty), tabV(L->top-1));
  ------------------
  |  |  864|    509|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    509|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    509|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  848|      0|  L->top--;
  849|    509|  lj_clib_default(L, tabV(L->top-1));  /* Create ffi.C default namespace. */
  ------------------
  |  |  864|    509|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    509|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    509|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  850|    509|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|    509|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  851|    509|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|    509|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  852|    509|  LJ_LIB_REG(L, NULL, ffi);  /* Note: no global "ffi" created! */
  ------------------
  |  |   92|    509|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  853|    509|  ffi_register_module(L);
  854|    509|  return 1;
  855|    509|}
lib_ffi.c:lj_cf_ffi_meta___eq:
  191|     67|{
  192|     67|  return ffi_arith(L);
  193|     67|}
lib_ffi.c:ffi_arith:
  184|    833|{
  185|    833|  MMS mm = (MMS)(curr_func(L)->c.ffid - (int)FF_ffi_meta___eq + (int)MM_eq);
  ------------------
  |  |  710|    833|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|    833|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|    833|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|    833|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  186|    833|  return lj_carith_op(L, mm);
  187|    833|}
lib_ffi.c:lj_cf_ffi_meta___len:
  196|      1|{
  197|      1|  return ffi_arith(L);
  198|      1|}
lib_ffi.c:lj_cf_ffi_meta___lt:
  201|    104|{
  202|    104|  return ffi_arith(L);
  203|    104|}
lib_ffi.c:lj_cf_ffi_meta___le:
  206|     13|{
  207|     13|  return ffi_arith(L);
  208|     13|}
lib_ffi.c:lj_cf_ffi_meta___concat:
  211|     12|{
  212|     12|  return ffi_arith(L);
  213|     12|}
lib_ffi.c:lj_cf_ffi_meta___call:
  219|      6|{
  220|      6|  CTState *cts = ctype_cts(L);
  221|      6|  GCcdata *cd = ffi_checkcdata(L, 1);
  222|      6|  CTypeID id = cd->ctypeid;
  223|      6|  CType *ct;
  224|      6|  cTValue *tv;
  225|      6|  MMS mm = MM_call;
  226|      6|  if (cd->ctypeid == CTID_CTYPEID) {
  ------------------
  |  Branch (226:7): [True: 0, False: 6]
  ------------------
  227|      0|    id = *(CTypeID *)cdataptr(cd);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  228|      0|    mm = MM_new;
  229|      6|  } else {
  230|      6|    int ret = lj_ccall_func(L, cd);
  231|      6|    if (ret >= 0)
  ------------------
  |  Branch (231:9): [True: 0, False: 6]
  ------------------
  232|      0|      return ret;
  233|      6|  }
  234|       |  /* Handle ctype __call/__new metamethod. */
  235|      6|  ct = ctype_raw(cts, id);
  236|      6|  if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  203|      6|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      6|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      6|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 6]
  |  |  ------------------
  ------------------
                if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  237|      6|  tv = lj_ctype_meta(cts, id, mm);
  238|      6|  if (tv)
  ------------------
  |  Branch (238:7): [True: 0, False: 6]
  ------------------
  239|      0|    return lj_meta_tailcall(L, tv);
  240|      6|  else if (mm == MM_call)
  ------------------
  |  Branch (240:12): [True: 6, False: 0]
  ------------------
  241|      6|    lj_err_callerv(L, LJ_ERR_FFI_BADCALL, strdata(lj_ctype_repr(L, id, NULL)));
  ------------------
  |  |  316|      6|#define strdata(s)	((const char *)((s)+1))
  ------------------
  242|      0|  return lj_cf_ffi_new(L);
  243|      6|}
lib_ffi.c:ffi_checkcdata:
   70|      6|{
   71|      6|  TValue *o = L->base + narg-1;
   72|      6|  if (!(o < L->top && tviscdata(o)))
  ------------------
  |  |  799|      6|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      6|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (72:9): [True: 6, False: 0]
  ------------------
   73|      0|    lj_err_argt(L, narg, LUA_TCDATA);
  ------------------
  |  |  222|      0|#define LUA_TCDATA	(LAST_TT+2)
  |  |  ------------------
  |  |  |  |  220|      0|#define LAST_TT		LUA_TTHREAD
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|      0|#define LUA_TTHREAD		8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|      6|  return cdataV(o);
  ------------------
  |  |  863|      6|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      6|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      6|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      6|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      6|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   75|      6|}
lib_ffi.c:lj_cf_ffi_meta___add:
  246|     62|{
  247|     62|  return ffi_arith(L);
  248|     62|}
lib_ffi.c:lj_cf_ffi_meta___sub:
  251|     53|{
  252|     53|  return ffi_arith(L);
  253|     53|}
lib_ffi.c:lj_cf_ffi_meta___mul:
  256|     69|{
  257|     69|  return ffi_arith(L);
  258|     69|}
lib_ffi.c:lj_cf_ffi_meta___div:
  261|    153|{
  262|    153|  return ffi_arith(L);
  263|    153|}
lib_ffi.c:lj_cf_ffi_meta___mod:
  266|    166|{
  267|    166|  return ffi_arith(L);
  268|    166|}
lib_ffi.c:lj_cf_ffi_meta___pow:
  271|    124|{
  272|    124|  return ffi_arith(L);
  273|    124|}
lib_ffi.c:lj_cf_ffi_meta___unm:
  276|      9|{
  277|      9|  return ffi_arith(L);
  278|      9|}
lib_ffi.c:lj_cf_ffi_clib___gc:
  419|    509|{
  420|    509|  TValue *o = L->base;
  421|  1.01k|  if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  801|  1.01k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    509|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    509|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 509, False: 0]
  |  |  ------------------
  ------------------
                if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  865|    509|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|    509|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    509|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (421:7): [True: 509, False: 0]
  |  Branch (421:37): [True: 509, False: 0]
  ------------------
  422|    509|    lj_clib_unload((CLibrary *)uddata(udataV(o)));
  ------------------
  |  |  342|  1.01k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 509, False: 0]
  |  |  ------------------
  ------------------
  423|    509|  return 0;
  424|    509|}
lib_ffi.c:ffi_register_module:
  828|    509|{
  829|    509|  cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |  864|    509|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    509|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    509|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |   28|    509|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  830|    509|  if (tmp && tvistab(tmp)) {
  ------------------
  |  |  800|    509|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|    509|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|    509|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 509, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (830:7): [True: 509, False: 0]
  ------------------
  831|    509|    GCtab *t = tabV(tmp);
  ------------------
  |  |  864|    509|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    509|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    509|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|    509|    copyTV(L, lj_tab_setstr(L, t, lj_str_newlit(L, LUA_FFILIBNAME)), L->top-1);
  ------------------
  |  |   28|    509|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  833|    509|    lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|    509|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|    509|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 509]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  834|    509|  }
  835|    509|}

luaL_openlibs:
   40|  3.10k|{
   41|  3.10k|  const luaL_Reg *lib;
   42|  34.1k|  for (lib = lj_lib_load; lib->func; lib++) {
  ------------------
  |  Branch (42:27): [True: 31.0k, False: 3.10k]
  ------------------
   43|  31.0k|    lua_pushcfunction(L, lib->func);
  ------------------
  |  |  262|  31.0k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
   44|  31.0k|    lua_pushstring(L, lib->name);
   45|  31.0k|    lua_call(L, 1, 0);
   46|  31.0k|  }
   47|  3.10k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD",
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   48|  3.10k|		 sizeof(lj_lib_preload)/sizeof(lj_lib_preload[0])-1);
   49|  6.20k|  for (lib = lj_lib_preload; lib->func; lib++) {
  ------------------
  |  Branch (49:30): [True: 3.10k, False: 3.10k]
  ------------------
   50|  3.10k|    lua_pushcfunction(L, lib->func);
  ------------------
  |  |  262|  3.10k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
   51|  3.10k|    lua_setfield(L, -2, lib->name);
   52|  3.10k|  }
   53|  3.10k|  lua_pop(L, 1);
  ------------------
  |  |  256|  3.10k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   54|  3.10k|}

luaopen_io:
  541|  3.10k|{
  542|  3.10k|  LJ_LIB_REG(L, NULL, io_method);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  543|  3.10k|  copyTV(L, L->top, L->top-1); L->top++;
  544|  3.10k|  lua_setfield(L, LUA_REGISTRYINDEX, LUA_FILEHANDLE);
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                lua_setfield(L, LUA_REGISTRYINDEX, LUA_FILEHANDLE);
  ------------------
  |  |   11|  3.10k|#define LUA_FILEHANDLE	"FILE*"
  ------------------
  545|  3.10k|  LJ_LIB_REG(L, LUA_IOLIBNAME, io);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  546|  3.10k|  setgcref(G(L)->gcroot[GCROOT_IO_INPUT], io_std_new(L, stdin, "stdin"));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  547|  3.10k|  setgcref(G(L)->gcroot[GCROOT_IO_OUTPUT], io_std_new(L, stdout, "stdout"));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  548|  3.10k|  io_std_new(L, stderr, "stderr");
  549|  3.10k|  return 1;
  550|  3.10k|}
lib_io.c:io_tofilep:
   48|  9.31k|{
   49|  9.31k|  if (!(L->base < L->top && tvisudata(L->base) &&
  ------------------
  |  |  801|  18.6k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  9.31k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  9.31k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 9.31k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (49:9): [True: 9.31k, False: 0]
  ------------------
   50|  18.6k|	udataV(L->base)->udtype == UDTYPE_IO_FILE))
  ------------------
  |  |  865|  9.31k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  9.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (50:2): [True: 9.31k, False: 0]
  ------------------
   51|      0|    lj_err_argtype(L, 1, "FILE*");
   52|  9.31k|  return (IOFileUD *)uddata(udataV(L->base));
  ------------------
  |  |  342|  18.6k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 9.31k, False: 0]
  |  |  ------------------
  ------------------
   53|  9.31k|}
lib_io.c:lj_cf_io_method___gc:
  382|  9.31k|{
  383|  9.31k|  IOFileUD *iof = io_tofilep(L);
  384|  9.31k|  if (iof->fp != NULL && (iof->type & IOFILE_TYPE_MASK) != IOFILE_TYPE_STDF)
  ------------------
  |  |   38|  9.31k|#define IOFILE_TYPE_MASK	3
  ------------------
                if (iof->fp != NULL && (iof->type & IOFILE_TYPE_MASK) != IOFILE_TYPE_STDF)
  ------------------
  |  |   37|  9.31k|#define IOFILE_TYPE_STDF	2	/* Standard file handle. */
  ------------------
  |  Branch (384:7): [True: 9.31k, False: 0]
  |  Branch (384:26): [True: 0, False: 9.31k]
  ------------------
  385|      0|    io_file_close(L, iof);
  386|  9.31k|  return 0;
  387|  9.31k|}
lib_io.c:io_std_new:
  528|  9.31k|{
  529|  9.31k|  IOFileUD *iof = (IOFileUD *)lua_newuserdata(L, sizeof(IOFileUD));
  530|  9.31k|  GCudata *ud = udataV(L->top-1);
  ------------------
  |  |  865|  9.31k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  9.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  531|      0|  ud->udtype = UDTYPE_IO_FILE;
  532|       |  /* NOBARRIER: The GCudata is new (marked white). */
  533|  9.31k|  setgcref(ud->metatable, gcV(L->top-3));
  ------------------
  |  |   72|  18.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 9.31k, False: 0]
  |  |  ------------------
  ------------------
  534|      0|  iof->fp = fp;
  535|  9.31k|  iof->type = IOFILE_TYPE_STDF;
  ------------------
  |  |   37|  9.31k|#define IOFILE_TYPE_STDF	2	/* Standard file handle. */
  ------------------
  536|  9.31k|  lua_setfield(L, -2, name);
  537|  9.31k|  return obj2gco(ud);
  ------------------
  |  |  775|  9.31k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  538|  9.31k|}

luaopen_jit:
  722|  3.10k|{
  723|  3.10k|#if LJ_HASJIT
  724|  3.10k|  jit_init(L);
  725|  3.10k|#endif
  726|  3.10k|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|  3.10k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  727|  3.10k|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|  3.10k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  728|  3.10k|  lua_pushinteger(L, LUAJIT_VERSION_NUM);  /* Deprecated. */
  ------------------
  |  |   34|  3.10k|#define LUAJIT_VERSION_NUM	20199  /* Deprecated. */
  ------------------
  729|  3.10k|  lua_pushliteral(L, LUAJIT_VERSION);
  ------------------
  |  |  276|  3.10k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  730|  3.10k|  LJ_LIB_REG(L, LUA_JITLIBNAME, jit);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  731|  3.10k|#if LJ_HASPROFILE
  732|  3.10k|  lj_lib_prereg(L, LUA_JITLIBNAME ".profile", luaopen_jit_profile,
  ------------------
  |  |   22|  3.10k|#define LUA_JITLIBNAME	"jit"
  ------------------
  733|  3.10k|		tabref(L->env));
  ------------------
  |  |  514|  3.10k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  734|  3.10k|#endif
  735|  3.10k|#ifndef LUAJIT_DISABLE_JITUTIL
  736|  3.10k|  lj_lib_prereg(L, LUA_JITLIBNAME ".util", luaopen_jit_util, tabref(L->env));
  ------------------
  |  |   22|  3.10k|#define LUA_JITLIBNAME	"jit"
  ------------------
                lj_lib_prereg(L, LUA_JITLIBNAME ".util", luaopen_jit_util, tabref(L->env));
  ------------------
  |  |  514|  3.10k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  737|  3.10k|#endif
  738|  3.10k|#if LJ_HASJIT
  739|  3.10k|  LJ_LIB_REG(L, "jit.opt", jit_opt);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  740|  3.10k|#endif
  741|  3.10k|  L->top -= 2;
  742|  3.10k|  return 1;
  743|  3.10k|}
lib_jit.c:jit_init:
  713|  3.10k|{
  714|  3.10k|  jit_State *J = L2J(L);
  ------------------
  |  |  117|  3.10k|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|  3.10k|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  715|  3.10k|  J->flags = jit_cpudetect() | JIT_F_ON | JIT_F_OPT_DEFAULT;
  ------------------
  |  |   16|  3.10k|#define JIT_F_ON		0x00000001
  ------------------
                J->flags = jit_cpudetect() | JIT_F_ON | JIT_F_OPT_DEFAULT;
  ------------------
  |  |  102|  3.10k|#define JIT_F_OPT_DEFAULT	JIT_F_OPT_3
  |  |  ------------------
  |  |  |  |  100|  3.10k|#define JIT_F_OPT_3	(JIT_F_OPT_2|\
  |  |  |  |  ------------------
  |  |  |  |  |  |   99|  3.10k|#define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   98|  3.10k|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   80|  3.10k|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   81|  3.10k|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   82|  3.10k|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   85|  3.10k|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   86|  3.10k|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  101|  3.10k|  JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|  3.10k|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   84|  3.10k|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   87|  3.10k|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  3.10k|#define JIT_F_OPT_SINK		(JIT_F_OPT << 8)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  3.10k|#define JIT_F_OPT_FUSE		(JIT_F_OPT << 9)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  3.10k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  716|  3.10k|  memcpy(J->param, jit_param_default, sizeof(J->param));
  717|  3.10k|  lj_dispatch_update(G(L));
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  718|  3.10k|}
lib_jit.c:jit_cpudetect:
  636|  3.10k|{
  637|  3.10k|  uint32_t flags = 0;
  638|  3.10k|#if LJ_TARGET_X86ORX64
  639|       |
  640|  3.10k|  uint32_t vendor[4];
  641|  3.10k|  uint32_t features[4];
  642|  3.10k|  if (lj_vm_cpuid(0, vendor) && lj_vm_cpuid(1, features)) {
  ------------------
  |  Branch (642:7): [True: 3.10k, False: 0]
  |  Branch (642:33): [True: 3.10k, False: 0]
  ------------------
  643|  3.10k|    flags |= ((features[2] >> 0)&1) * JIT_F_SSE3;
  ------------------
  |  |   23|  3.10k|#define JIT_F_SSE3		(JIT_F_CPU << 0)
  |  |  ------------------
  |  |  |  |   19|  3.10k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  644|  3.10k|    flags |= ((features[2] >> 19)&1) * JIT_F_SSE4_1;
  ------------------
  |  |   24|  3.10k|#define JIT_F_SSE4_1		(JIT_F_CPU << 1)
  |  |  ------------------
  |  |  |  |   19|  3.10k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  645|  3.10k|    if (vendor[0] >= 7) {
  ------------------
  |  Branch (645:9): [True: 3.10k, False: 0]
  ------------------
  646|  3.10k|      uint32_t xfeatures[4];
  647|  3.10k|      lj_vm_cpuid(7, xfeatures);
  648|  3.10k|      flags |= ((xfeatures[1] >> 8)&1) * JIT_F_BMI2;
  ------------------
  |  |   25|  3.10k|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|  3.10k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  649|  3.10k|    }
  650|  3.10k|  }
  651|       |  /* Don't bother checking for SSE2 -- the VM will crash before getting here. */
  652|       |
  653|       |#elif LJ_TARGET_ARM
  654|       |
  655|       |  int ver = LJ_ARCH_VERSION;  /* Compile-time ARM CPU detection. */
  656|       |#if LJ_TARGET_LINUX
  657|       |  if (ver < 70) {  /* Runtime ARM CPU detection. */
  658|       |    struct utsname ut;
  659|       |    uname(&ut);
  660|       |    if (strncmp(ut.machine, "armv", 4) == 0) {
  661|       |      if (ut.machine[4] >= '8') ver = 80;
  662|       |      else if (ut.machine[4] == '7') ver = 70;
  663|       |      else if (ut.machine[4] == '6') ver = 60;
  664|       |    }
  665|       |  }
  666|       |#endif
  667|       |  flags |= ver >= 70 ? JIT_F_ARMV7 :
  668|       |	   ver >= 61 ? JIT_F_ARMV6T2_ :
  669|       |	   ver >= 60 ? JIT_F_ARMV6_ : 0;
  670|       |  flags |= LJ_ARCH_HASFPU == 0 ? 0 : ver >= 70 ? JIT_F_VFPV3 : JIT_F_VFPV2;
  671|       |
  672|       |#elif LJ_TARGET_ARM64
  673|       |
  674|       |  /* No optional CPU features to detect (for now). */
  675|       |
  676|       |#elif LJ_TARGET_PPC
  677|       |
  678|       |#if LJ_ARCH_SQRT
  679|       |  flags |= JIT_F_SQRT;
  680|       |#endif
  681|       |#if LJ_ARCH_ROUND
  682|       |  flags |= JIT_F_ROUND;
  683|       |#endif
  684|       |
  685|       |#elif LJ_TARGET_MIPS
  686|       |
  687|       |  /* Compile-time MIPS CPU detection. */
  688|       |#if LJ_ARCH_VERSION >= 20
  689|       |  flags |= JIT_F_MIPSXXR2;
  690|       |#endif
  691|       |  /* Runtime MIPS CPU detection. */
  692|       |#if defined(__GNUC__)
  693|       |  if (!(flags & JIT_F_MIPSXXR2)) {
  694|       |    int x;
  695|       |#ifdef __mips16
  696|       |    x = 0;  /* Runtime detection is difficult. Ensure optimal -march flags. */
  697|       |#else
  698|       |    /* On MIPS32R1 rotr is treated as srl. rotr r2,r2,1 -> srl r2,r2,1. */
  699|       |    __asm__("li $2, 1\n\t.long 0x00221042\n\tmove %0, $2" : "=r"(x) : : "$2");
  700|       |#endif
  701|       |    if (x) flags |= JIT_F_MIPSXXR2;  /* Either 0x80000000 (R2) or 0 (R1). */
  702|       |  }
  703|       |#endif
  704|       |
  705|       |#else
  706|       |#error "Missing CPU detection for this architecture"
  707|       |#endif
  708|  3.10k|  return flags;
  709|  3.10k|}

luaopen_math:
  199|  3.10k|{
  200|  3.10k|  PRNGState *rs = (PRNGState *)lua_newuserdata(L, sizeof(PRNGState));
  201|  3.10k|  lj_prng_seed_fixed(rs);
  202|  3.10k|  LJ_LIB_REG(L, LUA_MATHLIBNAME, math);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  203|  3.10k|  return 1;
  204|  3.10k|}

luaopen_os:
  288|  3.10k|{
  289|  3.10k|  LJ_LIB_REG(L, LUA_OSLIBNAME, os);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  290|  3.10k|  return 1;
  291|  3.10k|}

luaopen_package:
  594|  3.10k|{
  595|  3.10k|  int i;
  596|  3.10k|  int noenv;
  597|  3.10k|  luaL_newmetatable(L, "_LOADLIB");
  598|  3.10k|  lj_lib_pushcf(L, lj_cf_package_unloadlib, 1);
  ------------------
  |  |   78|  3.10k|#define lj_lib_pushcf(L, fn, id)	(lj_lib_pushcc(L, (fn), (id), 0))
  ------------------
  599|  3.10k|  lua_setfield(L, -2, "__gc");
  600|  3.10k|  luaL_register(L, LUA_LOADLIBNAME, package_lib);
  ------------------
  |  |   19|  3.10k|#define LUA_LOADLIBNAME	"package"
  ------------------
  601|  3.10k|  lua_copy(L, -1, LUA_ENVIRONINDEX);
  ------------------
  |  |   37|  3.10k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  602|  3.10k|  lua_createtable(L, sizeof(package_loaders)/sizeof(package_loaders[0])-1, 0);
  603|  15.5k|  for (i = 0; package_loaders[i] != NULL; i++) {
  ------------------
  |  Branch (603:15): [True: 12.4k, False: 3.10k]
  ------------------
  604|  12.4k|    lj_lib_pushcf(L, package_loaders[i], 1);
  ------------------
  |  |   78|  12.4k|#define lj_lib_pushcf(L, fn, id)	(lj_lib_pushcc(L, (fn), (id), 0))
  ------------------
  605|  12.4k|    lua_rawseti(L, -2, i+1);
  606|  12.4k|  }
  607|       |#if LJ_52
  608|       |  lua_pushvalue(L, -1);
  609|       |  lua_setfield(L, -3, "searchers");
  610|       |#endif
  611|  3.10k|  lua_setfield(L, -2, "loaders");
  612|  3.10k|  lua_getfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  613|  3.10k|  noenv = lua_toboolean(L, -1);
  614|  3.10k|  lua_pop(L, 1);
  ------------------
  |  |  256|  3.10k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  615|  3.10k|  setpath(L, "path", LUA_PATH, LUA_PATH_DEFAULT, noenv);
  ------------------
  |  |   69|  3.10k|#define LUA_PATH	"LUA_PATH"
  ------------------
                setpath(L, "path", LUA_PATH, LUA_PATH_DEFAULT, noenv);
  ------------------
  |  |   64|  3.10k|#define LUA_PATH_DEFAULT	"./?.lua" LUA_JPATH LUA_LLPATH LUA_RLPATH
  |  |  ------------------
  |  |  |  |   60|  3.10k|#define LUA_LLPATH	";" LUA_LLDIR "?.lua;" LUA_LLDIR "?/init.lua"
  |  |  ------------------
  ------------------
  616|  3.10k|  setpath(L, "cpath", LUA_CPATH, LUA_CPATH_DEFAULT, noenv);
  ------------------
  |  |   70|  3.10k|#define LUA_CPATH	"LUA_CPATH"
  ------------------
                setpath(L, "cpath", LUA_CPATH, LUA_CPATH_DEFAULT, noenv);
  ------------------
  |  |   65|  3.10k|#define LUA_CPATH_DEFAULT	"./?.so" LUA_LCPATH1 LUA_RCPATH LUA_LCPATH2
  |  |  ------------------
  |  |  |  |   62|  3.10k|#define LUA_LCPATH2	";" LUA_LCDIR "loadall.so"
  |  |  ------------------
  ------------------
  617|  3.10k|  lua_pushliteral(L, LUA_PATH_CONFIG);
  ------------------
  |  |  276|  3.10k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  618|  3.10k|  lua_setfield(L, -2, "config");
  619|  3.10k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  620|  3.10k|  lua_setfield(L, -2, "loaded");
  621|  3.10k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD", 4);
  ------------------
  |  |   36|  3.10k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  622|  3.10k|  lua_setfield(L, -2, "preload");
  623|  3.10k|  lua_pushvalue(L, LUA_GLOBALSINDEX);
  ------------------
  |  |   38|  3.10k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  624|  3.10k|  luaL_register(L, NULL, package_global);
  625|  3.10k|  lua_pop(L, 1);
  ------------------
  |  |  256|  3.10k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  626|  3.10k|  return 1;
  627|  3.10k|}
lib_package.c:setpath:
  552|  6.20k|{
  553|       |#if LJ_TARGET_CONSOLE
  554|       |  const char *path = NULL;
  555|       |  UNUSED(envname);
  556|       |#else
  557|  6.20k|  const char *path = getenv(envname);
  558|  6.20k|#endif
  559|  6.20k|  if (path == NULL || noenv) {
  ------------------
  |  Branch (559:7): [True: 6.20k, False: 0]
  |  Branch (559:23): [True: 0, False: 0]
  ------------------
  560|  6.20k|    lua_pushstring(L, def);
  561|  6.20k|  } else {
  562|      0|    path = luaL_gsub(L, path, LUA_PATHSEP LUA_PATHSEP,
  ------------------
  |  |   79|      0|#define LUA_PATHSEP	";"
  ------------------
                  path = luaL_gsub(L, path, LUA_PATHSEP LUA_PATHSEP,
  ------------------
  |  |   79|      0|#define LUA_PATHSEP	";"
  ------------------
  563|      0|			      LUA_PATHSEP AUXMARK LUA_PATHSEP);
  ------------------
  |  |   79|      0|#define LUA_PATHSEP	";"
  ------------------
              			      LUA_PATHSEP AUXMARK LUA_PATHSEP);
  ------------------
  |  |   79|      0|#define LUA_PATHSEP	";"
  ------------------
  564|      0|    luaL_gsub(L, path, AUXMARK, def);
  ------------------
  |  |  548|      0|#define AUXMARK		"\1"
  ------------------
  565|      0|    lua_remove(L, -2);
  566|      0|  }
  567|  6.20k|  setprogdir(L);
  ------------------
  |  |   29|  6.20k|#define setprogdir(L)		((void)0)
  ------------------
  568|  6.20k|  lua_setfield(L, -2, fieldname);
  569|  6.20k|}

luaopen_string:
  675|  3.10k|{
  676|  3.10k|  GCtab *mt;
  677|  3.10k|  global_State *g;
  678|  3.10k|  LJ_LIB_REG(L, LUA_STRLIBNAME, string);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  679|  3.10k|  mt = lj_tab_new(L, 0, 1);
  680|       |  /* NOBARRIER: basemt is a GC root. */
  681|  3.10k|  g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  682|  3.10k|  setgcref(basemt_it(g, LJ_TSTR), obj2gco(mt));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  683|  3.10k|  settabV(L, lj_tab_setstr(L, mt, mmname_str(g, MM_index)), tabV(L->top-1));
  ------------------
  |  |  590|  3.10k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|  3.10k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, lj_tab_setstr(L, mt, mmname_str(g, MM_index)), tabV(L->top-1));
  ------------------
  |  |  864|  3.10k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.10k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  684|      0|  mt->nomm = (uint8_t)(~(1u<<MM_index));
  685|  3.10k|#if LJ_HASBUFFER
  686|  3.10k|  lj_lib_prereg(L, LUA_STRLIBNAME ".buffer", luaopen_string_buffer, tabV(L->top-1));
  ------------------
  |  |   15|  3.10k|#define LUA_STRLIBNAME	"string"
  ------------------
                lj_lib_prereg(L, LUA_STRLIBNAME ".buffer", luaopen_string_buffer, tabV(L->top-1));
  ------------------
  |  |  864|  3.10k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.10k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  687|      0|#endif
  688|      0|  return 1;
  689|  3.10k|}

luaopen_table:
  317|  3.10k|{
  318|  3.10k|  LJ_LIB_REG(L, LUA_TABLIBNAME, table);
  ------------------
  |  |   92|  3.10k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  319|       |#if LJ_52
  320|       |  lua_getglobal(L, "unpack");
  321|       |  lua_setfield(L, -2, "unpack");
  322|       |#endif
  323|  3.10k|  lj_lib_prereg(L, LUA_TABLIBNAME ".new", luaopen_table_new, tabV(L->top-1));
  ------------------
  |  |   16|  3.10k|#define LUA_TABLIBNAME	"table"
  ------------------
                lj_lib_prereg(L, LUA_TABLIBNAME ".new", luaopen_table_new, tabV(L->top-1));
  ------------------
  |  |  864|  3.10k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.10k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  324|  3.10k|  lj_lib_prereg(L, LUA_TABLIBNAME ".clear", luaopen_table_clear, tabV(L->top-1));
  ------------------
  |  |   16|  3.10k|#define LUA_TABLIBNAME	"table"
  ------------------
                lj_lib_prereg(L, LUA_TABLIBNAME ".clear", luaopen_table_clear, tabV(L->top-1));
  ------------------
  |  |  864|  3.10k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.10k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  325|      0|  return 1;
  326|  3.10k|}

lj_alloc_create:
 1227|  3.10k|{
 1228|  3.10k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  3.10k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1229|  3.10k|  char *tbase;
 1230|  3.10k|  INIT_MMAP();
  ------------------
  |  |  379|  3.10k|#define INIT_MMAP()		((void)0)
  ------------------
 1231|  3.10k|  UNUSED(rs);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1232|  3.10k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  321|  3.10k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1233|  3.10k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  3.10k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  3.10k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  3.10k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1233:7): [True: 3.10k, False: 0]
  ------------------
 1234|  3.10k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  433|  3.10k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  3.10k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  3.10k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1235|  3.10k|    mchunkptr mn;
 1236|  3.10k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  425|  3.10k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  3.10k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  3.10k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1237|  3.10k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  422|  3.10k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  3.10k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  3.10k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1238|  3.10k|    memset(m, 0, msize);
 1239|  3.10k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  441|  3.10k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  442|  3.10k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  3.10k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1240|  3.10k|    m->seg.base = tbase;
 1241|  3.10k|    m->seg.size = tsize;
 1242|  3.10k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  3.10k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1243|  3.10k|    init_bins(m);
 1244|  3.10k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  461|  3.10k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  443|  3.10k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  3.10k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  3.10k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  3.10k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1245|  3.10k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  600|  3.10k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  3.10k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  3.10k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  3.10k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  3.10k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  3.10k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  3.10k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  3.10k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1246|  3.10k|    return m;
 1247|  3.10k|  }
 1248|      0|  return NULL;
 1249|  3.10k|}
lj_alloc_setprng:
 1252|  3.10k|{
 1253|  3.10k|  mstate ms = (mstate)msp;
 1254|  3.10k|  ms->prng = rs;
 1255|  3.10k|}
lj_alloc_destroy:
 1258|  3.10k|{
 1259|  3.10k|  mstate ms = (mstate)msp;
 1260|  3.10k|  msegmentptr sp = &ms->seg;
 1261|  6.20k|  while (sp != 0) {
  ------------------
  |  Branch (1261:10): [True: 3.10k, False: 3.10k]
  ------------------
 1262|  3.10k|    char *base = sp->base;
 1263|  3.10k|    size_t size = sp->size;
 1264|  3.10k|    sp = sp->next;
 1265|  3.10k|    CALL_MUNMAP(base, size);
 1266|  3.10k|  }
 1267|  3.10k|}
lj_alloc_f:
 1474|  3.29M|{
 1475|  3.29M|  (void)osize;
 1476|  3.29M|  if (nsize == 0) {
  ------------------
  |  Branch (1476:7): [True: 1.65M, False: 1.64M]
  ------------------
 1477|  1.65M|    return lj_alloc_free(msp, ptr);
 1478|  1.65M|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1478:14): [True: 1.63M, False: 11.2k]
  ------------------
 1479|  1.63M|    return lj_alloc_malloc(msp, nsize);
 1480|  1.63M|  } else {
 1481|  11.2k|    return lj_alloc_realloc(msp, ptr, nsize);
 1482|  11.2k|  }
 1483|  3.29M|}
lj_alloc.c:mmap_probe:
  234|  3.10k|{
  235|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  236|  3.10k|  static uintptr_t hint_addr = 0;
  237|  3.10k|  int olderr = errno;
  238|  3.10k|  int retry;
  239|  3.10k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  3.10k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (239:19): [True: 3.10k, False: 0]
  ------------------
  240|  3.10k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  3.10k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  3.10k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  3.10k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  241|  3.10k|    uintptr_t addr = (uintptr_t)p;
  242|  3.10k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  3.10k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|  6.20k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (242:9): [True: 3.10k, False: 0]
  |  Branch (242:42): [True: 3.10k, False: 0]
  ------------------
  243|  3.10k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  3.10k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (243:2): [True: 3.10k, False: 0]
  ------------------
  244|       |      /* We got a suitable address. Bump the hint address. */
  245|  3.10k|      hint_addr = addr + size;
  246|  3.10k|      errno = olderr;
  247|  3.10k|      return p;
  248|  3.10k|    }
  249|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (249:9): [True: 0, False: 0]
  ------------------
  250|      0|      munmap(p, size);
  251|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (251:16): [True: 0, False: 0]
  ------------------
  252|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  253|      0|    }
  254|      0|    if (hint_addr) {
  ------------------
  |  Branch (254:9): [True: 0, False: 0]
  ------------------
  255|       |      /* First, try linear probing. */
  256|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|	hint_addr += 0x1000000;
  258|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (258:6): [True: 0, False: 0]
  ------------------
  259|      0|	  hint_addr = 0;
  260|      0|	continue;
  261|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (261:18): [True: 0, False: 0]
  ------------------
  262|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  263|      0|	hint_addr = 0;
  264|      0|	continue;
  265|      0|      }
  266|      0|    }
  267|       |    /* Finally, try pseudo-random probing. */
  268|      0|    do {
  269|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  270|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (270:14): [True: 0, False: 0]
  ------------------
  271|      0|  }
  272|      0|  errno = olderr;
  273|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  274|  3.10k|}
lj_alloc.c:init_bins:
  892|  3.10k|{
  893|       |  /* Establish circular links for smallbins */
  894|  3.10k|  bindex_t i;
  895|   102k|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  521|   102k|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (895:15): [True: 99.3k, False: 3.10k]
  ------------------
  896|  99.3k|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  610|  99.3k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
  897|  99.3k|    bin->fd = bin->bk = bin;
  898|  99.3k|  }
  899|  3.10k|}
lj_alloc.c:init_top:
  876|  3.10k|{
  877|       |  /* Ensure alignment */
  878|  3.10k|  size_t offset = align_offset(chunk2mem(p));
  ------------------
  |  |   66|  3.10k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 3.10k, False: 0]
  |  |  ------------------
  |  |   67|  3.10k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  879|  3.10k|  p = (mchunkptr)((char *)p + offset);
  880|  3.10k|  psize -= offset;
  881|       |
  882|  3.10k|  m->top = p;
  883|  3.10k|  m->topsize = psize;
  884|  3.10k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  441|  3.10k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  885|       |  /* set size of fake trailing chunk holding overhead space only once */
  886|  3.10k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  457|  3.10k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  600|  3.10k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  3.10k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  3.10k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  433|  3.10k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  3.10k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  3.10k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  419|  3.10k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  3.10k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  3.10k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  3.10k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  3.10k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  887|  3.10k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  3.10k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
  888|  3.10k|}
lj_alloc.c:CALL_MUNMAP:
  348|  3.10k|{
  349|  3.10k|  int olderr = errno;
  350|  3.10k|  int ret = munmap(ptr, size);
  351|  3.10k|  errno = olderr;
  352|  3.10k|  return ret;
  353|  3.10k|}
lj_alloc.c:lj_alloc_free:
 1353|  1.65M|{
 1354|  1.65M|  if (ptr != 0) {
  ------------------
  |  Branch (1354:7): [True: 1.63M, False: 19.2k]
  ------------------
 1355|  1.63M|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  423|  1.63M|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.63M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.63M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1356|  1.63M|    mstate fm = (mstate)msp;
 1357|  1.63M|    size_t psize = chunksize(p);
  ------------------
  |  |  451|  1.63M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  1.63M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  1.63M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.63M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  1.63M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.63M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1358|  1.63M|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  457|  1.63M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1359|  1.63M|    if (!pinuse(p)) {
  ------------------
  |  |  450|  1.63M|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  1.63M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.63M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1359:9): [True: 685k, False: 954k]
  ------------------
 1360|   685k|      size_t prevsize = p->prev_foot;
 1361|   685k|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|   685k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   685k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1361:11): [True: 0, False: 685k]
  ------------------
 1362|      0|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|      0|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1363|      0|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  415|      0|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|      0|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1364|      0|	CALL_MUNMAP((char *)p - prevsize, psize);
 1365|      0|	return NULL;
 1366|   685k|      } else {
 1367|   685k|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  458|   685k|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1368|   685k|	psize += prevsize;
 1369|   685k|	p = prev;
 1370|       |	/* consolidate backward */
 1371|   685k|	if (p != fm->dv) {
  ------------------
  |  Branch (1371:6): [True: 680k, False: 5.26k]
  ------------------
 1372|   680k|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  820|   680k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|   680k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|   680k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|   680k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 413k, False: 266k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|   413k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|   413k|  mchunkptr F = P->fd;\
  |  |  |  |  692|   413k|  mchunkptr B = P->bk;\
  |  |  |  |  693|   413k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|   413k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|   413k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|   413k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 58.6k, False: 354k]
  |  |  |  |  ------------------
  |  |  |  |  695|  58.6k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  58.6k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  58.6k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|   354k|  } else {\
  |  |  |  |  697|   354k|    F->bk = B;\
  |  |  |  |  698|   354k|    B->fd = F;\
  |  |  |  |  699|   354k|  }\
  |  |  |  |  700|   413k|}
  |  |  ------------------
  |  |  821|   413k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|   266k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|   266k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|   266k|  tchunkptr R;\
  |  |  |  |  770|   266k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 51.1k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  771|  51.1k|    tchunkptr F = X->fd;\
  |  |  |  |  772|  51.1k|    R = X->bk;\
  |  |  |  |  773|  51.1k|    F->bk = R;\
  |  |  |  |  774|  51.1k|    R->fd = F;\
  |  |  |  |  775|   215k|  } else {\
  |  |  |  |  776|   215k|    tchunkptr *RP;\
  |  |  |  |  777|   215k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 51.9k, False: 163k]
  |  |  |  |  ------------------
  |  |  |  |  778|   215k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 36.4k, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |  779|  88.4k|      tchunkptr *CP;\
  |  |  |  |  780|   118k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 15.3k, False: 103k]
  |  |  |  |  ------------------
  |  |  |  |  781|   118k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 14.5k, False: 88.4k]
  |  |  |  |  ------------------
  |  |  |  |  782|  29.8k|	R = *(RP = CP);\
  |  |  |  |  783|  29.8k|      }\
  |  |  |  |  784|  88.4k|      *RP = 0;\
  |  |  |  |  785|  88.4k|    }\
  |  |  |  |  786|   215k|  }\
  |  |  |  |  787|   266k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 237k, False: 29.6k]
  |  |  |  |  ------------------
  |  |  |  |  788|   237k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   237k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|   237k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 88.6k, False: 148k]
  |  |  |  |  ------------------
  |  |  |  |  790|  88.6k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 40.1k, False: 48.5k]
  |  |  |  |  ------------------
  |  |  |  |  791|  88.6k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|  40.1k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  40.1k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|   148k|    } else {\
  |  |  |  |  793|   148k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 82.7k, False: 65.8k]
  |  |  |  |  ------------------
  |  |  |  |  794|   148k|	XP->child[0] = R;\
  |  |  |  |  795|   148k|      else \
  |  |  |  |  796|   148k|	XP->child[1] = R;\
  |  |  |  |  797|   148k|    }\
  |  |  |  |  798|   237k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 109k, False: 127k]
  |  |  |  |  ------------------
  |  |  |  |  799|   109k|      tchunkptr C0, C1;\
  |  |  |  |  800|   109k|      R->parent = XP;\
  |  |  |  |  801|   109k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 52.1k, False: 57.7k]
  |  |  |  |  ------------------
  |  |  |  |  802|  52.1k|	R->child[0] = C0;\
  |  |  |  |  803|  52.1k|	C0->parent = R;\
  |  |  |  |  804|  52.1k|      }\
  |  |  |  |  805|   109k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 25.6k, False: 84.2k]
  |  |  |  |  ------------------
  |  |  |  |  806|  25.6k|	R->child[1] = C1;\
  |  |  |  |  807|  25.6k|	C1->parent = R;\
  |  |  |  |  808|  25.6k|      }\
  |  |  |  |  809|   109k|    }\
  |  |  |  |  810|   237k|  }\
  |  |  |  |  811|   266k|}
  |  |  ------------------
  ------------------
 1373|   680k|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|  5.26k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  5.26k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.26k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  5.26k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  5.26k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  443|  5.26k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  5.26k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  5.26k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  5.26k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  5.26k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1373:13): [True: 2.08k, False: 3.17k]
  ------------------
 1374|  2.08k|	  fm->dvsize = psize;
 1375|  2.08k|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|  2.08k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|  2.08k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.08k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.08k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|  2.08k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.08k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.08k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|  2.08k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1376|  2.08k|	  return NULL;
 1377|  2.08k|	}
 1378|   685k|      }
 1379|   685k|    }
 1380|  1.63M|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  449|  1.63M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|  1.63M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.63M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1380:9): [True: 937k, False: 700k]
  ------------------
 1381|   937k|      if (next == fm->top) {
  ------------------
  |  Branch (1381:11): [True: 12.6k, False: 924k]
  ------------------
 1382|  12.6k|	size_t tsize = fm->topsize += psize;
 1383|  12.6k|	fm->top = p;
 1384|  12.6k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  441|  12.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  12.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1385|  12.6k|	if (p == fm->dv) {
  ------------------
  |  Branch (1385:6): [True: 1.41k, False: 11.2k]
  ------------------
 1386|  1.41k|	  fm->dv = 0;
 1387|  1.41k|	  fm->dvsize = 0;
 1388|  1.41k|	}
 1389|  12.6k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1389:6): [True: 0, False: 12.6k]
  ------------------
 1390|      0|	  alloc_trim(fm, 0);
 1391|  12.6k|	return NULL;
 1392|   924k|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1392:18): [True: 4.91k, False: 919k]
  ------------------
 1393|  4.91k|	size_t dsize = fm->dvsize += psize;
 1394|  4.91k|	fm->dv = p;
 1395|  4.91k|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  473|  4.91k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  4.91k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.91k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  4.91k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1396|  4.91k|	return NULL;
 1397|   919k|      } else {
 1398|   919k|	size_t nsize = chunksize(next);
  ------------------
  |  |  451|   919k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|   919k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   919k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   919k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|   919k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   919k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1399|   919k|	psize += nsize;
 1400|   919k|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  820|   919k|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|   919k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|   919k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|   919k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 586k, False: 333k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  690|   586k|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  691|   586k|  mchunkptr F = P->fd;\
  |  |  |  |  692|   586k|  mchunkptr B = P->bk;\
  |  |  |  |  693|   586k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|   586k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|   586k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  694|   586k|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (694:7): [True: 104k, False: 482k]
  |  |  |  |  ------------------
  |  |  |  |  695|   104k|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|   104k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|   104k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  696|   482k|  } else {\
  |  |  |  |  697|   482k|    F->bk = B;\
  |  |  |  |  698|   482k|    B->fd = F;\
  |  |  |  |  699|   482k|  }\
  |  |  |  |  700|   586k|}
  |  |  ------------------
  |  |  821|   586k|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  767|   333k|#define unlink_large_chunk(M, X) {\
  |  |  |  |  768|   333k|  tchunkptr XP = X->parent;\
  |  |  |  |  769|   333k|  tchunkptr R;\
  |  |  |  |  770|   333k|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (770:7): [True: 64.0k, False: 269k]
  |  |  |  |  ------------------
  |  |  |  |  771|  64.0k|    tchunkptr F = X->fd;\
  |  |  |  |  772|  64.0k|    R = X->bk;\
  |  |  |  |  773|  64.0k|    F->bk = R;\
  |  |  |  |  774|  64.0k|    R->fd = F;\
  |  |  |  |  775|   269k|  } else {\
  |  |  |  |  776|   269k|    tchunkptr *RP;\
  |  |  |  |  777|   269k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (777:9): [True: 53.5k, False: 215k]
  |  |  |  |  ------------------
  |  |  |  |  778|   269k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (778:2): [True: 38.7k, False: 177k]
  |  |  |  |  ------------------
  |  |  |  |  779|  92.2k|      tchunkptr *CP;\
  |  |  |  |  780|   121k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (780:14): [True: 14.8k, False: 106k]
  |  |  |  |  ------------------
  |  |  |  |  781|   121k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (781:7): [True: 14.3k, False: 92.2k]
  |  |  |  |  ------------------
  |  |  |  |  782|  29.2k|	R = *(RP = CP);\
  |  |  |  |  783|  29.2k|      }\
  |  |  |  |  784|  92.2k|      *RP = 0;\
  |  |  |  |  785|  92.2k|    }\
  |  |  |  |  786|   269k|  }\
  |  |  |  |  787|   333k|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:7): [True: 290k, False: 42.3k]
  |  |  |  |  ------------------
  |  |  |  |  788|   290k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   290k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  789|   290k|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (789:9): [True: 130k, False: 160k]
  |  |  |  |  ------------------
  |  |  |  |  790|   130k|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (790:11): [True: 76.8k, False: 53.5k]
  |  |  |  |  ------------------
  |  |  |  |  791|   130k|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  652|  76.8k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  76.8k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  792|   160k|    } else {\
  |  |  |  |  793|   160k|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (793:11): [True: 88.8k, False: 71.7k]
  |  |  |  |  ------------------
  |  |  |  |  794|   160k|	XP->child[0] = R;\
  |  |  |  |  795|   160k|      else \
  |  |  |  |  796|   160k|	XP->child[1] = R;\
  |  |  |  |  797|   160k|    }\
  |  |  |  |  798|   290k|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (798:9): [True: 113k, False: 177k]
  |  |  |  |  ------------------
  |  |  |  |  799|   113k|      tchunkptr C0, C1;\
  |  |  |  |  800|   113k|      R->parent = XP;\
  |  |  |  |  801|   113k|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:11): [True: 51.2k, False: 62.6k]
  |  |  |  |  ------------------
  |  |  |  |  802|  51.2k|	R->child[0] = C0;\
  |  |  |  |  803|  51.2k|	C0->parent = R;\
  |  |  |  |  804|  51.2k|      }\
  |  |  |  |  805|   113k|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (805:11): [True: 25.6k, False: 88.2k]
  |  |  |  |  ------------------
  |  |  |  |  806|  25.6k|	R->child[1] = C1;\
  |  |  |  |  807|  25.6k|	C1->parent = R;\
  |  |  |  |  808|  25.6k|      }\
  |  |  |  |  809|   113k|    }\
  |  |  |  |  810|   290k|  }\
  |  |  |  |  811|   333k|}
  |  |  ------------------
  ------------------
 1401|   919k|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  473|   919k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|   919k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   919k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|   919k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1402|   919k|	if (p == fm->dv) {
  ------------------
  |  Branch (1402:6): [True: 1.76k, False: 918k]
  ------------------
 1403|  1.76k|	  fm->dvsize = psize;
 1404|  1.76k|	  return NULL;
 1405|  1.76k|	}
 1406|   919k|      }
 1407|   937k|    } else {
 1408|   700k|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  477|   700k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  453|   700k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   700k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   700k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  473|   700k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|   700k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   700k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  469|   700k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|   700k|    }
 1410|       |
 1411|  1.61M|    if (is_small(psize)) {
  ------------------
  |  |  604|  1.61M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  523|  1.61M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  521|  1.61M|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (604:22): [True: 1.01M, False: 602k]
  |  |  ------------------
  ------------------
 1412|  1.01M|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  675|  1.01M|#define insert_small_chunk(M, P, S) {\
  |  |  676|  1.01M|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  605|  1.01M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|  1.01M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  677|  1.01M|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  610|  1.01M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  678|  1.01M|  mchunkptr F = B;\
  |  |  679|  1.01M|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  649|  1.01M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  1.01M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (679:7): [True: 179k, False: 836k]
  |  |  ------------------
  |  |  680|  1.01M|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  647|   179k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   179k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  681|  1.01M|  else\
  |  |  682|  1.01M|    F = B->fd;\
  |  |  683|  1.01M|  B->fd = P;\
  |  |  684|  1.01M|  F->bk = P;\
  |  |  685|  1.01M|  P->fd = F;\
  |  |  686|  1.01M|  P->bk = B;\
  |  |  687|  1.01M|}
  ------------------
 1413|  1.01M|    } else {
 1414|   602k|      tchunkptr tp = (tchunkptr)p;
 1415|   602k|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  728|   602k|#define insert_large_chunk(M, X, S) {\
  |  |  729|   602k|  tbinptr *H;\
  |  |  730|   602k|  bindex_t I;\
  |  |  731|   602k|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|   602k|#define compute_tree_index(S, I)\
  |  |  |  |  615|   602k|{\
  |  |  |  |  616|   602k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   602k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|   602k|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|   602k|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 602k]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|   602k|  } else {\
  |  |  |  |  622|   602k|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   602k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|   602k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   602k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|   602k|  }\
  |  |  |  |  625|   602k|}
  |  |  ------------------
  |  |  732|   602k|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|   602k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|   602k|  X->index = I;\
  |  |  734|   602k|  X->child[0] = X->child[1] = 0;\
  |  |  735|   602k|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|   602k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   602k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 119k, False: 483k]
  |  |  ------------------
  |  |  736|   119k|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|   119k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|   119k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|   119k|    *H = X;\
  |  |  738|   119k|    X->parent = (tchunkptr)H;\
  |  |  739|   119k|    X->fd = X->bk = X;\
  |  |  740|   483k|  } else {\
  |  |  741|   483k|    tchunkptr T = *H;\
  |  |  742|   483k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|   483k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|   483k|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 483k]
  |  |  |  |  ------------------
  |  |  |  |  634|   483k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   483k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   483k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|   483k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|   920k|    for (;;) {\
  |  |  744|   920k|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|   920k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|   920k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|   920k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   920k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|   920k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|   920k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 805k, False: 115k]
  |  |  ------------------
  |  |  745|   805k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|   805k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|   805k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|   805k|	K <<= 1;\
  |  |  747|   805k|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 437k, False: 368k]
  |  |  ------------------
  |  |  748|   437k|	  T = *C;\
  |  |  749|   437k|	} else {\
  |  |  750|   368k|	  *C = X;\
  |  |  751|   368k|	  X->parent = T;\
  |  |  752|   368k|	  X->fd = X->bk = X;\
  |  |  753|   368k|	  break;\
  |  |  754|   368k|	}\
  |  |  755|   805k|      } else {\
  |  |  756|   115k|	tchunkptr F = T->fd;\
  |  |  757|   115k|	T->fd = F->bk = X;\
  |  |  758|   115k|	X->fd = F;\
  |  |  759|   115k|	X->bk = T;\
  |  |  760|   115k|	X->parent = 0;\
  |  |  761|   115k|	break;\
  |  |  762|   115k|      }\
  |  |  763|   920k|    }\
  |  |  764|   483k|  }\
  |  |  765|   602k|}
  ------------------
 1416|   602k|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1416:11): [True: 158, False: 602k]
  ------------------
 1417|    158|	release_unused_segments(fm);
 1418|   602k|    }
 1419|  1.61M|  }
 1420|  1.63M|  return NULL;
 1421|  1.65M|}
lj_alloc.c:release_unused_segments:
 1046|    158|{
 1047|    158|  size_t released = 0;
 1048|    158|  size_t nsegs = 0;
 1049|    158|  msegmentptr pred = &m->seg;
 1050|    158|  msegmentptr sp = pred->next;
 1051|    158|  while (sp != 0) {
  ------------------
  |  Branch (1051:10): [True: 0, False: 158]
  ------------------
 1052|      0|    char *base = sp->base;
 1053|      0|    size_t size = sp->size;
 1054|      0|    msegmentptr next = sp->next;
 1055|      0|    nsegs++;
 1056|      0|    {
 1057|      0|      mchunkptr p = align_as_chunk(base);
  ------------------
  |  |  425|      0|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|      0| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|      0|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1058|      0|      size_t psize = chunksize(p);
  ------------------
  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1059|       |      /* Can unmap if first chunk holds entire segment and not pinned */
 1060|      0|      if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  449|      0|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  423|      0|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1060:11): [True: 0, False: 0]
  |  Branch (1060:25): [True: 0, False: 0]
  ------------------
 1061|      0|	tchunkptr tp = (tchunkptr)p;
 1062|      0|	if (p == m->dv) {
  ------------------
  |  Branch (1062:6): [True: 0, False: 0]
  ------------------
 1063|      0|	  m->dv = 0;
 1064|      0|	  m->dvsize = 0;
 1065|      0|	} else {
 1066|      0|	  unlink_large_chunk(m, tp);
  ------------------
  |  |  767|      0|#define unlink_large_chunk(M, X) {\
  |  |  768|      0|  tchunkptr XP = X->parent;\
  |  |  769|      0|  tchunkptr R;\
  |  |  770|      0|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  771|      0|    tchunkptr F = X->fd;\
  |  |  772|      0|    R = X->bk;\
  |  |  773|      0|    F->bk = R;\
  |  |  774|      0|    R->fd = F;\
  |  |  775|      0|  } else {\
  |  |  776|      0|    tchunkptr *RP;\
  |  |  777|      0|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  778|      0|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 0, False: 0]
  |  |  ------------------
  |  |  779|      0|      tchunkptr *CP;\
  |  |  780|      0|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 0, False: 0]
  |  |  ------------------
  |  |  781|      0|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  782|      0|	R = *(RP = CP);\
  |  |  783|      0|      }\
  |  |  784|      0|      *RP = 0;\
  |  |  785|      0|    }\
  |  |  786|      0|  }\
  |  |  787|      0|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  788|      0|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|      0|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  790|      0|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  791|      0|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|      0|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|      0|    } else {\
  |  |  793|      0|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  794|      0|	XP->child[0] = R;\
  |  |  795|      0|      else \
  |  |  796|      0|	XP->child[1] = R;\
  |  |  797|      0|    }\
  |  |  798|      0|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  799|      0|      tchunkptr C0, C1;\
  |  |  800|      0|      R->parent = XP;\
  |  |  801|      0|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  802|      0|	R->child[0] = C0;\
  |  |  803|      0|	C0->parent = R;\
  |  |  804|      0|      }\
  |  |  805|      0|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  806|      0|	R->child[1] = C1;\
  |  |  807|      0|	C1->parent = R;\
  |  |  808|      0|      }\
  |  |  809|      0|    }\
  |  |  810|      0|  }\
  |  |  811|      0|}
  ------------------
 1067|      0|	}
 1068|      0|	if (CALL_MUNMAP(base, size) == 0) {
  ------------------
  |  Branch (1068:6): [True: 0, False: 0]
  ------------------
 1069|      0|	  released += size;
 1070|       |	  /* unlink obsoleted record */
 1071|      0|	  sp = pred;
 1072|      0|	  sp->next = next;
 1073|      0|	} else { /* back out if cannot unmap */
 1074|      0|	  insert_large_chunk(m, tp, psize);
  ------------------
  |  |  728|      0|#define insert_large_chunk(M, X, S) {\
  |  |  729|      0|  tbinptr *H;\
  |  |  730|      0|  bindex_t I;\
  |  |  731|      0|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  614|      0|#define compute_tree_index(S, I)\
  |  |  |  |  615|      0|{\
  |  |  |  |  616|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  617|      0|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (617:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  619|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (619:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  621|      0|  } else {\
  |  |  |  |  622|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  623|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  624|      0|  }\
  |  |  |  |  625|      0|}
  |  |  ------------------
  |  |  732|      0|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  611|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  733|      0|  X->index = I;\
  |  |  734|      0|  X->child[0] = X->child[1] = 0;\
  |  |  735|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  653|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (735:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  736|      0|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  651|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  737|      0|    *H = X;\
  |  |  738|      0|    X->parent = (tchunkptr)H;\
  |  |  739|      0|    X->fd = X->bk = X;\
  |  |  740|      0|  } else {\
  |  |  741|      0|    tchunkptr T = *H;\
  |  |  742|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  633|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (633:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  634|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  525|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  743|      0|    for (;;) {\
  |  |  744|      0|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  451|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  443|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (744:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  745|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  746|      0|	K <<= 1;\
  |  |  747|      0|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (747:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  748|      0|	  T = *C;\
  |  |  749|      0|	} else {\
  |  |  750|      0|	  *C = X;\
  |  |  751|      0|	  X->parent = T;\
  |  |  752|      0|	  X->fd = X->bk = X;\
  |  |  753|      0|	  break;\
  |  |  754|      0|	}\
  |  |  755|      0|      } else {\
  |  |  756|      0|	tchunkptr F = T->fd;\
  |  |  757|      0|	T->fd = F->bk = X;\
  |  |  758|      0|	X->fd = F;\
  |  |  759|      0|	X->bk = T;\
  |  |  760|      0|	X->parent = 0;\
  |  |  761|      0|	break;\
  |  |  762|      0|      }\
  |  |  763|      0|    }\
  |  |  764|      0|  }\
  |  |  765|      0|}
  ------------------
 1075|      0|	}
 1076|      0|      }
 1077|      0|    }
 1078|      0|    pred = sp;
 1079|      0|    sp = next;
 1080|      0|  }
 1081|       |  /* Reset check counter */
 1082|    158|  m->release_checks = nsegs > MAX_RELEASE_CHECK_RATE ?
  ------------------
  |  |   44|    158|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
  |  Branch (1082:23): [True: 0, False: 158]
  ------------------
 1083|    158|		      nsegs : MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|    316|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1084|    158|  return released;
 1085|    158|}
lj_alloc.c:lj_alloc_malloc:
 1270|  1.64M|{
 1271|  1.64M|  mstate ms = (mstate)msp;
 1272|  1.64M|  void *mem;
 1273|  1.64M|  size_t nb;
 1274|  1.64M|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  528|  1.64M|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  527|  1.64M|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  526|  1.64M|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.64M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|  1.64M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.64M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|  1.64M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.64M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.64M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|  1.64M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.64M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1274:7): [True: 1.58M, False: 60.0k]
  ------------------
 1275|  1.58M|    bindex_t idx;
 1276|  1.58M|    binmap_t smallbits;
 1277|  1.58M|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  429|  1.58M|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  419|  1.58M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  1.58M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.58M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.58M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.58M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.58M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.58M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.58M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  410|  1.58M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.58M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.58M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  419|     15|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|     15|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     15|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     15|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     15|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     15|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     15|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     15|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  433|  3.16M|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  1.58M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.58M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.58M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.58M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.58M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.58M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.58M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.58M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1277:10): [True: 15, False: 1.58M]
  ------------------
 1278|  1.58M|    idx = small_index(nb);
  ------------------
  |  |  605|  1.58M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|  1.58M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1279|  1.58M|    smallbits = ms->smallmap >> idx;
 1280|       |
 1281|  1.58M|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1281:9): [True: 6.17k, False: 1.57M]
  ------------------
 1282|  6.17k|      mchunkptr b, p;
 1283|  6.17k|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1284|  6.17k|      b = smallbin_at(ms, idx);
  ------------------
  |  |  610|  6.17k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1285|  6.17k|      p = b->fd;
 1286|  6.17k|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  703|  6.17k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|  6.17k|  mchunkptr F = P->fd;\
  |  |  705|  6.17k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 6.04k, False: 134]
  |  |  ------------------
  |  |  706|  6.04k|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|  6.04k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  6.04k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|  6.04k|  } else {\
  |  |  708|    134|    B->fd = F;\
  |  |  709|    134|    F->bk = B;\
  |  |  710|    134|  }\
  |  |  711|  6.17k|}
  ------------------
 1287|  6.17k|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  665|  6.17k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  6.17k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  6.17k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  6.17k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  6.17k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  6.17k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  6.17k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  6.17k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1288|  6.17k|      mem = chunk2mem(p);
  ------------------
  |  |  422|  6.17k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  6.17k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  6.17k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1289|  6.17k|      return mem;
 1290|  1.57M|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1290:16): [True: 1.52M, False: 54.6k]
  ------------------
 1291|  1.52M|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1291:11): [True: 14.5k, False: 1.50M]
  ------------------
 1292|  14.5k|	mchunkptr b, p, r;
 1293|  14.5k|	size_t rsize;
 1294|  14.5k|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  656|  14.5k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1295|  14.5k|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|  14.5k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1296|  14.5k|	b = smallbin_at(ms, i);
  ------------------
  |  |  610|  14.5k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1297|  14.5k|	p = b->fd;
 1298|  14.5k|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  703|  14.5k|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  704|  14.5k|  mchunkptr F = P->fd;\
  |  |  705|  14.5k|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (705:7): [True: 14.4k, False: 114]
  |  |  ------------------
  |  |  706|  14.4k|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  648|  14.4k|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  14.4k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  707|  14.4k|  } else {\
  |  |  708|    114|    B->fd = F;\
  |  |  709|    114|    F->bk = B;\
  |  |  710|    114|  }\
  |  |  711|  14.5k|}
  ------------------
 1299|  14.5k|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  606|  14.5k|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  523|  14.5k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1300|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1301|  14.5k|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|  14.5k|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|  14.5k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  14.5k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  14.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  14.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  14.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  14.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  14.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  14.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1301:6): [Folded - Ignored]
  |  Branch (1301:26): [True: 1.79k, False: 12.7k]
  ------------------
 1302|  1.79k|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  665|  1.79k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  1.79k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.79k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  1.79k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.79k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  1.79k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  1.79k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.79k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|  12.7k|	} else {
 1304|  12.7k|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  12.7k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  12.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  12.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  12.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1305|  12.7k|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  12.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1306|  12.7k|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|  12.7k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  12.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  12.7k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1307|  12.7k|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  715|  12.7k|#define replace_dv(M, P, S) {\
  |  |  716|  12.7k|  size_t DVS = M->dvsize;\
  |  |  717|  12.7k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 4.02k, False: 8.73k]
  |  |  ------------------
  |  |  718|  4.02k|    mchunkptr DV = M->dv;\
  |  |  719|  4.02k|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|  4.02k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|  4.02k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|  4.02k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|  4.02k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|  4.02k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|  4.02k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|  4.02k|  mchunkptr F = B;\
  |  |  |  |  679|  4.02k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|  4.02k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  4.02k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 3.47k, False: 543]
  |  |  |  |  ------------------
  |  |  |  |  680|  4.02k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|  3.47k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|  3.47k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|  4.02k|  else\
  |  |  |  |  682|  4.02k|    F = B->fd;\
  |  |  |  |  683|  4.02k|  B->fd = P;\
  |  |  |  |  684|  4.02k|  F->bk = P;\
  |  |  |  |  685|  4.02k|  P->fd = F;\
  |  |  |  |  686|  4.02k|  P->bk = B;\
  |  |  |  |  687|  4.02k|}
  |  |  ------------------
  |  |  720|  4.02k|  }\
  |  |  721|  12.7k|  M->dvsize = S;\
  |  |  722|  12.7k|  M->dv = P;\
  |  |  723|  12.7k|}
  ------------------
 1308|  12.7k|	}
 1309|  14.5k|	mem = chunk2mem(p);
  ------------------
  |  |  422|  14.5k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  14.5k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  14.5k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|  14.5k|	return mem;
 1311|  1.50M|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1311:18): [True: 2.02k, False: 1.50M]
  |  Branch (1311:38): [True: 2.02k, False: 0]
  ------------------
 1312|  2.02k|	return mem;
 1313|  2.02k|      }
 1314|  1.52M|    }
 1315|  1.58M|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|  60.0k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|  60.0k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  60.0k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  60.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  60.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  60.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  60.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  60.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  60.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1315:14): [True: 0, False: 60.0k]
  ------------------
 1316|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1317|  60.0k|  } else {
 1318|  60.0k|    nb = pad_request(nsize);
  ------------------
  |  |  433|  60.0k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  410|  60.0k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  60.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  60.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  60.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  60.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  60.0k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  60.0k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  60.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|  60.0k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1319:9): [True: 1.13k, False: 58.8k]
  |  Branch (1319:29): [True: 437, False: 694]
  ------------------
 1320|    437|      return mem;
 1321|    437|    }
 1322|  60.0k|  }
 1323|       |
 1324|  1.61M|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1324:7): [True: 54.9k, False: 1.56M]
  ------------------
 1325|  54.9k|    size_t rsize = ms->dvsize - nb;
 1326|  54.9k|    mchunkptr p = ms->dv;
 1327|  54.9k|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  419|  54.9k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  54.9k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  54.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  54.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  54.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  54.9k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  54.9k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  54.9k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1327:9): [True: 46.3k, False: 8.59k]
  ------------------
 1328|  46.3k|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  46.3k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1329|  46.3k|      ms->dvsize = rsize;
 1330|  46.3k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|  46.3k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  46.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  46.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  46.3k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1331|  46.3k|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  46.3k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  46.3k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  46.3k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  46.3k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  46.3k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1332|  46.3k|    } else { /* exhaust dv */
 1333|  8.59k|      size_t dvs = ms->dvsize;
 1334|  8.59k|      ms->dvsize = 0;
 1335|  8.59k|      ms->dv = 0;
 1336|  8.59k|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  665|  8.59k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  8.59k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  8.59k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  8.59k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|  8.59k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  8.59k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.59k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1337|  8.59k|    }
 1338|  54.9k|    mem = chunk2mem(p);
  ------------------
  |  |  422|  54.9k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  54.9k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  54.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1339|  54.9k|    return mem;
 1340|  1.56M|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1340:14): [True: 1.56M, False: 0]
  ------------------
 1341|  1.56M|    size_t rsize = ms->topsize -= nb;
 1342|  1.56M|    mchunkptr p = ms->top;
 1343|  1.56M|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  457|  1.56M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1344|  1.56M|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  441|  1.56M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.56M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1345|  1.56M|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  670|  1.56M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  1.56M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.56M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  1.56M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.56M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1346|  1.56M|    mem = chunk2mem(p);
  ------------------
  |  |  422|  1.56M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  1.56M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.56M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1347|  1.56M|    return mem;
 1348|  1.56M|  }
 1349|      0|  return alloc_sys(ms, nb);
 1350|  1.61M|}
lj_alloc.c:tmalloc_small:
 1195|  2.02k|{
 1196|  2.02k|  tchunkptr t, v;
 1197|  2.02k|  mchunkptr r;
 1198|  2.02k|  size_t rsize;
 1199|  2.02k|  bindex_t i = lj_ffs(m->treemap);
  ------------------
  |  |  148|  2.02k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1200|       |
 1201|  2.02k|  v = t = *treebin_at(m, i);
  ------------------
  |  |  611|  2.02k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1202|  2.02k|  rsize = chunksize(t) - nb;
  ------------------
  |  |  451|  2.02k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  2.02k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  2.02k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  2.02k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  2.02k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  2.02k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1203|       |
 1204|  2.04k|  while ((t = leftmost_child(t)) != 0) {
  ------------------
  |  |  505|  2.04k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 17, False: 2.02k]
  |  |  ------------------
  ------------------
  |  Branch (1204:10): [True: 22, False: 2.02k]
  ------------------
 1205|     22|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|     22|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|     22|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|     22|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     22|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|     22|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|     22|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1206|     22|    if (trem < rsize) {
  ------------------
  |  Branch (1206:9): [True: 11, False: 11]
  ------------------
 1207|     11|      rsize = trem;
 1208|     11|      v = t;
 1209|     11|    }
 1210|     22|  }
 1211|       |
 1212|  2.02k|  r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|  2.02k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1213|  2.02k|  unlink_large_chunk(m, v);
  ------------------
  |  |  767|  2.02k|#define unlink_large_chunk(M, X) {\
  |  |  768|  2.02k|  tchunkptr XP = X->parent;\
  |  |  769|  2.02k|  tchunkptr R;\
  |  |  770|  2.02k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 8, False: 2.01k]
  |  |  ------------------
  |  |  771|      8|    tchunkptr F = X->fd;\
  |  |  772|      8|    R = X->bk;\
  |  |  773|      8|    F->bk = R;\
  |  |  774|      8|    R->fd = F;\
  |  |  775|  2.01k|  } else {\
  |  |  776|  2.01k|    tchunkptr *RP;\
  |  |  777|  2.01k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 4, False: 2.01k]
  |  |  ------------------
  |  |  778|  2.01k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 6, False: 2.00k]
  |  |  ------------------
  |  |  779|     10|      tchunkptr *CP;\
  |  |  780|     10|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 0, False: 10]
  |  |  ------------------
  |  |  781|     10|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 0, False: 10]
  |  |  ------------------
  |  |  782|      0|	R = *(RP = CP);\
  |  |  783|      0|      }\
  |  |  784|     10|      *RP = 0;\
  |  |  785|     10|    }\
  |  |  786|  2.01k|  }\
  |  |  787|  2.02k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 2.02k, False: 0]
  |  |  ------------------
  |  |  788|  2.02k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|  2.02k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|  2.02k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 2.01k, False: 11]
  |  |  ------------------
  |  |  790|  2.01k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 1.99k, False: 18]
  |  |  ------------------
  |  |  791|  2.01k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|  1.99k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|  1.99k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|  2.01k|    } else {\
  |  |  793|     11|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 11, False: 0]
  |  |  ------------------
  |  |  794|     11|	XP->child[0] = R;\
  |  |  795|     11|      else \
  |  |  796|     11|	XP->child[1] = R;\
  |  |  797|     11|    }\
  |  |  798|  2.02k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 18, False: 2.00k]
  |  |  ------------------
  |  |  799|     18|      tchunkptr C0, C1;\
  |  |  800|     18|      R->parent = XP;\
  |  |  801|     18|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 0, False: 18]
  |  |  ------------------
  |  |  802|      0|	R->child[0] = C0;\
  |  |  803|      0|	C0->parent = R;\
  |  |  804|      0|      }\
  |  |  805|     18|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 1, False: 17]
  |  |  ------------------
  |  |  806|      1|	R->child[1] = C1;\
  |  |  807|      1|	C1->parent = R;\
  |  |  808|      1|      }\
  |  |  809|     18|    }\
  |  |  810|  2.02k|  }\
  |  |  811|  2.02k|}
  ------------------
 1214|  2.02k|  if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|  2.02k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|  2.02k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.02k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.02k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.02k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  2.02k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  2.02k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.02k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1214:7): [True: 5, False: 2.01k]
  ------------------
 1215|      5|    set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|      5|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      5|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      5|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      5|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      5|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|      5|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      5|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      5|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1216|  2.01k|  } else {
 1217|  2.01k|    set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|  2.01k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|  2.01k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.01k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|  2.01k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.01k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1218|  2.01k|    set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|  2.01k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|  2.01k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.01k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|  2.01k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1219|  2.01k|    replace_dv(m, r, rsize);
  ------------------
  |  |  715|  2.01k|#define replace_dv(M, P, S) {\
  |  |  716|  2.01k|  size_t DVS = M->dvsize;\
  |  |  717|  2.01k|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (717:7): [True: 747, False: 1.27k]
  |  |  ------------------
  |  |  718|    747|    mchunkptr DV = M->dv;\
  |  |  719|    747|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  675|    747|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|    747|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|    747|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|    747|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|    747|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|    747|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|    747|  mchunkptr F = B;\
  |  |  |  |  679|    747|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|    747|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    747|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 414, False: 333]
  |  |  |  |  ------------------
  |  |  |  |  680|    747|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|    414|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    414|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|    747|  else\
  |  |  |  |  682|    747|    F = B->fd;\
  |  |  |  |  683|    747|  B->fd = P;\
  |  |  |  |  684|    747|  F->bk = P;\
  |  |  |  |  685|    747|  P->fd = F;\
  |  |  |  |  686|    747|  P->bk = B;\
  |  |  |  |  687|    747|}
  |  |  ------------------
  |  |  720|    747|  }\
  |  |  721|  2.01k|  M->dvsize = S;\
  |  |  722|  2.01k|  M->dv = P;\
  |  |  723|  2.01k|}
  ------------------
 1220|  2.01k|  }
 1221|  2.02k|  return chunk2mem(v);
  ------------------
  |  |  422|  2.02k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.02k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.02k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1222|  2.02k|}
lj_alloc.c:tmalloc_large:
 1131|  1.13k|{
 1132|  1.13k|  tchunkptr v = 0;
 1133|  1.13k|  size_t rsize = ~nb+1; /* Unsigned negation */
 1134|  1.13k|  tchunkptr t;
 1135|  1.13k|  bindex_t idx;
 1136|  1.13k|  compute_tree_index(nb, idx);
  ------------------
  |  |  614|  1.13k|#define compute_tree_index(S, I)\
  |  |  615|  1.13k|{\
  |  |  616|  1.13k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  525|  1.13k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  617|  1.13k|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (617:7): [True: 0, False: 1.13k]
  |  |  ------------------
  |  |  618|      0|    I = 0;\
  |  |  619|  1.13k|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (619:14): [True: 0, False: 1.13k]
  |  |  ------------------
  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  621|  1.13k|  } else {\
  |  |  622|  1.13k|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|  1.13k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  623|  1.13k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  525|  1.13k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  624|  1.13k|  }\
  |  |  625|  1.13k|}
  ------------------
 1137|       |
 1138|  1.13k|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  611|  1.13k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1138:7): [True: 164, False: 967]
  ------------------
 1139|       |    /* Traverse tree for this bin looking for node with size == nb */
 1140|    164|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  633|    164|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  522|    164|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (633:5): [True: 0, False: 164]
  |  |  ------------------
  |  |  634|    164|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|    164|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|    164|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  525|    164|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1141|    164|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1142|    165|    for (;;) {
 1143|    165|      tchunkptr rt;
 1144|    165|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|    165|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|    165|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    165|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    165|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|    165|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    165|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|    165|      if (trem < rsize) {
  ------------------
  |  Branch (1145:11): [True: 116, False: 49]
  ------------------
 1146|    116|	v = t;
 1147|    116|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1147:6): [True: 16, False: 100]
  ------------------
 1148|     16|	  break;
 1149|    116|      }
 1150|    149|      rt = t->child[1];
 1151|    149|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|    149|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|    149|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1152|    149|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1152:11): [True: 0, False: 149]
  |  Branch (1152:22): [True: 0, False: 0]
  ------------------
 1153|      0|	rst = rt;
 1154|    149|      if (t == 0) {
  ------------------
  |  Branch (1154:11): [True: 148, False: 1]
  ------------------
 1155|    148|	t = rst; /* set t to least subtree holding sizes > nb */
 1156|    148|	break;
 1157|    148|      }
 1158|      1|      sizebits <<= 1;
 1159|      1|    }
 1160|    164|  }
 1161|       |
 1162|  1.13k|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1162:7): [True: 1.11k, False: 16]
  |  Branch (1162:17): [True: 1.01k, False: 100]
  ------------------
 1163|  1.01k|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  656|  1.01k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1164|  1.01k|    if (leftbits != 0)
  ------------------
  |  Branch (1164:9): [True: 349, False: 666]
  ------------------
 1165|    349|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  611|    349|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1166|  1.01k|  }
 1167|       |
 1168|  1.50k|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1168:10): [True: 370, False: 1.13k]
  ------------------
 1169|    370|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  451|    370|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|    370|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|    370|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    370|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|    370|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|    370|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1170|    370|    if (trem < rsize) {
  ------------------
  |  Branch (1170:9): [True: 354, False: 16]
  ------------------
 1171|    354|      rsize = trem;
 1172|    354|      v = t;
 1173|    354|    }
 1174|    370|    t = leftmost_child(t);
  ------------------
  |  |  505|    370|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (505:28): [True: 5, False: 365]
  |  |  ------------------
  ------------------
 1175|    370|  }
 1176|       |
 1177|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1178|  1.13k|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1178:7): [True: 465, False: 666]
  |  Branch (1178:17): [True: 437, False: 28]
  ------------------
 1179|    437|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  457|    437|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1180|    437|    unlink_large_chunk(m, v);
  ------------------
  |  |  767|    437|#define unlink_large_chunk(M, X) {\
  |  |  768|    437|  tchunkptr XP = X->parent;\
  |  |  769|    437|  tchunkptr R;\
  |  |  770|    437|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (770:7): [True: 1, False: 436]
  |  |  ------------------
  |  |  771|      1|    tchunkptr F = X->fd;\
  |  |  772|      1|    R = X->bk;\
  |  |  773|      1|    F->bk = R;\
  |  |  774|      1|    R->fd = F;\
  |  |  775|    436|  } else {\
  |  |  776|    436|    tchunkptr *RP;\
  |  |  777|    436|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (777:9): [True: 0, False: 436]
  |  |  ------------------
  |  |  778|    436|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (778:2): [True: 1, False: 435]
  |  |  ------------------
  |  |  779|      1|      tchunkptr *CP;\
  |  |  780|      1|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (780:14): [True: 0, False: 1]
  |  |  ------------------
  |  |  781|      1|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (781:7): [True: 0, False: 1]
  |  |  ------------------
  |  |  782|      0|	R = *(RP = CP);\
  |  |  783|      0|      }\
  |  |  784|      1|      *RP = 0;\
  |  |  785|      1|    }\
  |  |  786|    436|  }\
  |  |  787|    437|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (787:7): [True: 437, False: 0]
  |  |  ------------------
  |  |  788|    437|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  611|    437|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  789|    437|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (789:9): [True: 433, False: 4]
  |  |  ------------------
  |  |  790|    433|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (790:11): [True: 431, False: 2]
  |  |  ------------------
  |  |  791|    433|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  652|    431|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  644|    431|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  792|    433|    } else {\
  |  |  793|      4|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (793:11): [True: 4, False: 0]
  |  |  ------------------
  |  |  794|      4|	XP->child[0] = R;\
  |  |  795|      4|      else \
  |  |  796|      4|	XP->child[1] = R;\
  |  |  797|      4|    }\
  |  |  798|    437|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (798:9): [True: 2, False: 435]
  |  |  ------------------
  |  |  799|      2|      tchunkptr C0, C1;\
  |  |  800|      2|      R->parent = XP;\
  |  |  801|      2|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (801:11): [True: 0, False: 2]
  |  |  ------------------
  |  |  802|      0|	R->child[0] = C0;\
  |  |  803|      0|	C0->parent = R;\
  |  |  804|      0|      }\
  |  |  805|      2|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (805:11): [True: 0, False: 2]
  |  |  ------------------
  |  |  806|      0|	R->child[1] = C1;\
  |  |  807|      0|	C1->parent = R;\
  |  |  808|      0|      }\
  |  |  809|      2|    }\
  |  |  810|    437|  }\
  |  |  811|    437|}
  ------------------
 1181|    437|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|    437|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|    437|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    437|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    437|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    437|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|    437|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|    437|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    437|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1181:9): [True: 23, False: 414]
  ------------------
 1182|     23|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  665|     23|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|     23|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     23|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|     23|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     23|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  666|     23|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|     23|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     23|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1183|    414|    } else {
 1184|    414|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  670|    414|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  441|    414|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    414|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  442|    414|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    414|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1185|    414|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  473|    414|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  441|    414|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    414|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  469|    414|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1186|    414|      insert_chunk(m, r, rsize);
  ------------------
  |  |  816|    414|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  604|    414|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  523|    414|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  521|    414|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (604:22): [True: 109, False: 305]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  675|    109|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  676|    109|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|    109|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  523|    109|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  677|    109|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  610|    109|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  678|    109|  mchunkptr F = B;\
  |  |  |  |  679|    109|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  649|    109|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    109|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (679:7): [True: 92, False: 17]
  |  |  |  |  ------------------
  |  |  |  |  680|    109|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  647|     92|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|     92|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  681|    109|  else\
  |  |  |  |  682|    109|    F = B->fd;\
  |  |  |  |  683|    109|  B->fd = P;\
  |  |  |  |  684|    109|  F->bk = P;\
  |  |  |  |  685|    109|  P->fd = F;\
  |  |  |  |  686|    109|  P->bk = B;\
  |  |  |  |  687|    109|}
  |  |  ------------------
  |  |  817|    305|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  728|    305|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  729|    305|  tbinptr *H;\
  |  |  |  |  730|    305|  bindex_t I;\
  |  |  |  |  731|    305|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  614|    305|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  615|    305|{\
  |  |  |  |  |  |  616|    305|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|    305|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  617|    305|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (617:7): [True: 0, False: 305]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  618|      0|    I = 0;\
  |  |  |  |  |  |  619|    305|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (619:14): [True: 0, False: 305]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  620|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  621|    305|  } else {\
  |  |  |  |  |  |  622|    305|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    305|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  623|    305|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|    305|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  624|    305|  }\
  |  |  |  |  |  |  625|    305|}
  |  |  |  |  ------------------
  |  |  |  |  732|    305|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|    305|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  733|    305|  X->index = I;\
  |  |  |  |  734|    305|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  735|    305|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  653|    305|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    305|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (735:7): [True: 303, False: 2]
  |  |  |  |  ------------------
  |  |  |  |  736|    303|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  651|    303|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  644|    303|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  737|    303|    *H = X;\
  |  |  |  |  738|    303|    X->parent = (tchunkptr)H;\
  |  |  |  |  739|    303|    X->fd = X->bk = X;\
  |  |  |  |  740|    303|  } else {\
  |  |  |  |  741|      2|    tchunkptr T = *H;\
  |  |  |  |  742|      2|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  633|      2|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  522|      2|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (633:5): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  634|      2|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|      2|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  525|      2|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  743|      2|    for (;;) {\
  |  |  |  |  744|      2|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  451|      2|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  443|      2|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  441|      2|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  442|      2|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|      2|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (744:11): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  745|      2|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      2|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      2|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  746|      2|	K <<= 1;\
  |  |  |  |  747|      2|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (747:6): [True: 0, False: 2]
  |  |  |  |  ------------------
  |  |  |  |  748|      0|	  T = *C;\
  |  |  |  |  749|      2|	} else {\
  |  |  |  |  750|      2|	  *C = X;\
  |  |  |  |  751|      2|	  X->parent = T;\
  |  |  |  |  752|      2|	  X->fd = X->bk = X;\
  |  |  |  |  753|      2|	  break;\
  |  |  |  |  754|      2|	}\
  |  |  |  |  755|      2|      } else {\
  |  |  |  |  756|      0|	tchunkptr F = T->fd;\
  |  |  |  |  757|      0|	T->fd = F->bk = X;\
  |  |  |  |  758|      0|	X->fd = F;\
  |  |  |  |  759|      0|	X->bk = T;\
  |  |  |  |  760|      0|	X->parent = 0;\
  |  |  |  |  761|      0|	break;\
  |  |  |  |  762|      0|      }\
  |  |  |  |  763|      2|    }\
  |  |  |  |  764|      2|  }\
  |  |  |  |  765|    305|}
  |  |  ------------------
  ------------------
 1187|    414|    }
 1188|    437|    return chunk2mem(v);
  ------------------
  |  |  422|    437|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|    437|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|    437|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1189|    437|  }
 1190|    694|  return NULL;
 1191|  1.13k|}
lj_alloc.c:lj_alloc_realloc:
 1424|  11.2k|{
 1425|  11.2k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  428|  11.2k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  419|  11.2k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|  11.2k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  11.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  11.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  11.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  11.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1425:7): [True: 0, False: 11.2k]
  ------------------
 1426|      0|    return NULL;
 1427|  11.2k|  } else {
 1428|  11.2k|    mstate m = (mstate)msp;
 1429|  11.2k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  423|  11.2k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  11.2k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  11.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1430|  11.2k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  451|  11.2k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  443|  11.2k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  11.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  442|  11.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  11.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1431|  11.2k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  457|  11.2k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1432|  11.2k|    mchunkptr newp = 0;
 1433|  11.2k|    size_t nb = request2size(nsize);
  ------------------
  |  |  437|  11.2k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  429|  11.2k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  419|  11.2k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  408|  11.2k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  11.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  11.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|  11.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  11.2k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  11.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  419|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  408|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  433|  11.2k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  410|  11.2k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  11.2k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  11.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  11.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  11.2k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  11.2k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (437:4): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
 1434|       |
 1435|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1436|  11.2k|    if (is_direct(oldp)) {
  ------------------
  |  |  480|  11.2k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  441|  11.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  11.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|  1.91k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.91k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (480:4): [True: 1.91k, False: 9.38k]
  |  |  |  Branch (480:33): [True: 0, False: 1.91k]
  |  |  ------------------
  ------------------
 1437|      0|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1438|  11.2k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1438:16): [True: 26, False: 11.2k]
  ------------------
 1439|     26|      size_t rsize = oldsize - nb;
 1440|     26|      newp = oldp;
 1441|     26|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  419|     26|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  408|     26|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     26|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     26|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     26|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|     26|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|     26|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     26|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1441:11): [True: 0, False: 26]
  ------------------
 1442|      0|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  457|      0|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1443|      0|	set_inuse(m, newp, nb);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1444|      0|	set_inuse(m, rem, rsize);
  ------------------
  |  |  660|      0|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|      0|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|      0|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  422|      0|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1446|      0|      }
 1447|  11.2k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1447:16): [True: 2.64k, False: 8.62k]
  |  Branch (1447:34): [True: 2.64k, False: 0]
  ------------------
 1448|       |      /* Expand into top */
 1449|  2.64k|      size_t newsize = oldsize + m->topsize;
 1450|  2.64k|      size_t newtopsize = newsize - nb;
 1451|  2.64k|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  457|  2.64k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1452|  2.64k|      set_inuse(m, oldp, nb);
  ------------------
  |  |  660|  2.64k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  441|  2.64k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  442|  2.64k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.64k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  661|  2.64k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  441|  2.64k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1453|  2.64k|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  441|  2.64k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  2.64k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1454|  2.64k|      m->top = newtop;
 1455|  2.64k|      m->topsize = newtopsize;
 1456|  2.64k|      newp = oldp;
 1457|  2.64k|    }
 1458|       |
 1459|  11.2k|    if (newp != 0) {
  ------------------
  |  Branch (1459:9): [True: 2.66k, False: 8.62k]
  ------------------
 1460|  2.66k|      return chunk2mem(newp);
  ------------------
  |  |  422|  2.66k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  2.66k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  2.66k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1461|  8.62k|    } else {
 1462|  8.62k|      void *newmem = lj_alloc_malloc(m, nsize);
 1463|  8.62k|      if (newmem != 0) {
  ------------------
  |  Branch (1463:11): [True: 8.62k, False: 0]
  ------------------
 1464|  8.62k|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  484|  8.62k| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  480|  8.62k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  441|  8.62k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  8.62k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|  1.60k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.60k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (480:4): [True: 1.60k, False: 7.02k]
  |  |  |  |  |  Branch (480:33): [True: 0, False: 1.60k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  413|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  410|  8.62k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  8.62k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1465|  8.62k|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1465:22): [True: 8.62k, False: 0]
  ------------------
 1466|  8.62k|	lj_alloc_free(m, ptr);
 1467|  8.62k|      }
 1468|  8.62k|      return newmem;
 1469|  8.62k|    }
 1470|  11.2k|  }
 1471|  11.2k|}

lua_checkstack:
  103|  6.20k|{
  104|  6.20k|  if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   93|  12.4k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
                if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   93|  6.20k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
  |  Branch (104:7): [True: 0, False: 6.20k]
  |  Branch (104:32): [True: 0, False: 6.20k]
  ------------------
  105|      0|    return 0;  /* Stack overflow. */
  106|  6.20k|  } else if (size > 0) {
  ------------------
  |  Branch (106:14): [True: 0, False: 6.20k]
  ------------------
  107|      0|    int avail = (int)(mref(L->maxstack, TValue) - L->top);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  108|      0|    if (size > avail &&
  ------------------
  |  Branch (108:9): [True: 0, False: 0]
  ------------------
  109|      0|	lj_state_cpgrowstack(L, (MSize)(size - avail)) != LUA_OK) {
  ------------------
  |  |   43|      0|#define LUA_OK		0
  ------------------
  |  Branch (109:2): [True: 0, False: 0]
  ------------------
  110|      0|      L->top--;
  111|      0|      return 0;  /* Out of memory. */
  112|      0|    }
  113|      0|  }
  114|  6.20k|  return 1;
  115|  6.20k|}
luaL_checkstack:
  118|  6.20k|{
  119|  6.20k|  if (!lua_checkstack(L, size))
  ------------------
  |  Branch (119:7): [True: 0, False: 6.20k]
  ------------------
  120|      0|    lj_err_callerv(L, LJ_ERR_STKOVM, msg);
  121|  6.20k|}
lua_settop:
  151|  65.1k|{
  152|  65.1k|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 3.10k, False: 62.0k]
  ------------------
  153|  3.10k|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  3.10k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  3.10k|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 0, False: 3.10k]
  ------------------
  155|      0|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 0]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|      0|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 0, False: 0]
  ------------------
  158|  3.10k|    } else {
  159|  3.10k|      L->top = L->base + idx;
  160|  3.10k|    }
  161|  62.0k|  } else {
  162|  62.0k|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|  62.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  62.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 62.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  62.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|  62.0k|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|  62.0k|  }
  165|  65.1k|}
lua_remove:
  168|   108k|{
  169|   108k|  TValue *p = index2adr_stack(L, idx);
  170|   217k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 108k, False: 108k]
  ------------------
  171|   108k|  L->top--;
  172|   108k|}
lua_insert:
  175|  3.10k|{
  176|  3.10k|  TValue *q, *p = index2adr_stack(L, idx);
  177|  6.20k|  for (q = L->top; q > p; q--) copyTV(L, q, q-1);
  ------------------
  |  Branch (177:20): [True: 3.10k, False: 3.10k]
  ------------------
  178|  3.10k|  copyTV(L, p, L->top);
  179|  3.10k|}
lua_copy:
  210|  3.10k|{
  211|  3.10k|  copy_slot(L, index2adr(L, fromidx), toidx);
  212|  3.10k|}
lua_pushvalue:
  215|   152k|{
  216|   152k|  copyTV(L, L->top, index2adr(L, idx));
  217|   152k|  incr_top(L);
  ------------------
  |  |   12|   152k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   304k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   152k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 152k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|   152k|}
lua_type:
  223|   170k|{
  224|   170k|  cTValue *o = index2adr(L, idx);
  225|   170k|  if (tvisnumber(o)) {
  ------------------
  |  |  802|   170k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   170k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   170k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   170k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|   170k|  } else if (o == niltv(L)) {
  ------------------
  |  |  667|   170k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   170k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   170k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   170k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 170k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   170k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 170k]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|   170k|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|   170k|    uint32_t t = ~itype(o);
  ------------------
  |  |  781|   170k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|   170k|#if LJ_64
  236|   170k|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|   170k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|   170k|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|   170k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   217k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 124k, False: 46.5k]
  |  |  |  |  |  Branch (355:5): [True: 46.5k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   170k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|   170k|    return tt;
  242|   170k|  }
  243|   170k|}
lua_toboolean:
  504|  3.10k|{
  505|  3.10k|  cTValue *o = index2adr(L, idx);
  506|  3.10k|  return tvistruecond(o);
  ------------------
  |  |  806|  3.10k|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|  3.10k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|  3.10k|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  3.10k|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|  3.10k|}
lua_pushinteger:
  649|  3.10k|{
  650|  3.10k|  setintptrV(L->top, n);
  ------------------
  |  |  968|  3.10k|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  651|  3.10k|  incr_top(L);
  ------------------
  |  |   12|  3.10k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  6.20k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 3.10k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  652|  3.10k|}
lua_pushlstring:
  655|   165k|{
  656|   165k|  GCstr *s;
  657|   165k|  lj_gc_check(L);
  ------------------
  |  |   66|   165k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   165k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 89, False: 165k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   165k|      lj_gc_step(L); }
  ------------------
  658|   165k|  s = lj_str_new(L, str, len);
  659|   165k|  setstrV(L, L->top, s);
  660|   165k|  incr_top(L);
  ------------------
  |  |   12|   165k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   331k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   165k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 165k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|   165k|}
lua_pushstring:
  664|  37.2k|{
  665|  37.2k|  if (str == NULL) {
  ------------------
  |  Branch (665:7): [True: 0, False: 37.2k]
  ------------------
  666|      0|    setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  667|  37.2k|  } else {
  668|  37.2k|    GCstr *s;
  669|  37.2k|    lj_gc_check(L);
  ------------------
  |  |   66|  37.2k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  37.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 37.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  37.2k|      lj_gc_step(L); }
  ------------------
  670|  37.2k|    s = lj_str_newz(L, str);
  ------------------
  |  |   27|  37.2k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  671|  37.2k|    setstrV(L, L->top, s);
  672|  37.2k|  }
  673|  37.2k|  incr_top(L);
  ------------------
  |  |   12|  37.2k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  74.4k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  37.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 37.2k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  674|  37.2k|}
lua_pushcclosure:
  695|  83.8k|{
  696|  83.8k|  GCfunc *fn;
  697|  83.8k|  lj_gc_check(L);
  ------------------
  |  |   66|  83.8k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  83.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 83.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  83.8k|      lj_gc_step(L); }
  ------------------
  698|  83.8k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|  83.8k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  83.8k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  83.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 83.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  83.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|  83.8k|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|  83.8k|  fn->c.f = f;
  701|  83.8k|  L->top -= n;
  702|  83.8k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 0, False: 83.8k]
  ------------------
  703|      0|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|  83.8k|  setfuncV(L, L->top, fn);
  705|  83.8k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|  83.8k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  83.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 83.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  83.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|  83.8k|  incr_top(L);
  ------------------
  |  |   12|  83.8k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   167k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  83.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 83.8k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|  83.8k|}
lua_createtable:
  725|  51.7k|{
  726|  51.7k|  lj_gc_check(L);
  ------------------
  |  |   66|  51.7k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  51.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 209, False: 51.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  51.7k|      lj_gc_step(L); }
  ------------------
  727|  51.7k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|  51.7k|  incr_top(L);
  ------------------
  |  |   12|  51.7k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   103k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  51.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 51.7k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|  51.7k|}
luaL_newmetatable:
  732|  3.10k|{
  733|  3.10k|  GCtab *regt = tabV(registry(L));
  ------------------
  |  |  864|  3.10k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.10k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  734|  3.10k|  TValue *tv = lj_tab_setstr(L, regt, lj_str_newz(L, tname));
  ------------------
  |  |   27|  3.10k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  735|  3.10k|  if (tvisnil(tv)) {
  ------------------
  |  |  782|  3.10k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 3.10k, False: 0]
  |  |  ------------------
  ------------------
  736|  3.10k|    GCtab *mt = lj_tab_new(L, 0, 1);
  737|  3.10k|    settabV(L, tv, mt);
  738|  3.10k|    settabV(L, L->top++, mt);
  739|  3.10k|    lj_gc_anybarriert(L, regt);
  ------------------
  |  |   95|  3.10k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  3.10k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 3.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  740|  3.10k|    return 1;
  741|  3.10k|  } else {
  742|      0|    copyTV(L, L->top++, tv);
  743|      0|    return 0;
  744|      0|  }
  745|  3.10k|}
lua_newuserdata:
  765|  12.4k|{
  766|  12.4k|  GCudata *ud;
  767|  12.4k|  lj_gc_check(L);
  ------------------
  |  |   66|  12.4k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  12.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 12.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  12.4k|      lj_gc_step(L); }
  ------------------
  768|  12.4k|  if (size > LJ_MAX_UDATA)
  ------------------
  |  |   56|  12.4k|#define LJ_MAX_UDATA	LJ_MAX_MEM32	/* Max. userdata length. */
  |  |  ------------------
  |  |  |  |   49|  12.4k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (768:7): [True: 0, False: 12.4k]
  ------------------
  769|      0|    lj_err_msg(L, LJ_ERR_UDATAOV);
  770|  12.4k|  ud = lj_udata_new(L, (MSize)size, getcurrenv(L));
  771|  12.4k|  setudataV(L, L->top, ud);
  772|  12.4k|  incr_top(L);
  ------------------
  |  |   12|  12.4k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  24.8k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  12.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 12.4k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  773|  12.4k|  return uddata(ud);
  ------------------
  |  |  342|  12.4k|#define uddata(u)	((void *)((u)+1))
  ------------------
  774|  12.4k|}
lua_getfield:
  816|  40.3k|{
  817|  40.3k|  cTValue *v, *t = index2adr_check(L, idx);
  818|  40.3k|  TValue key;
  819|  40.3k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|  40.3k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  820|  40.3k|  v = lj_meta_tget(L, t, &key);
  821|  40.3k|  if (v == NULL) {
  ------------------
  |  Branch (821:7): [True: 0, False: 40.3k]
  ------------------
  822|      0|    L->top += 2;
  823|      0|    lj_vm_call(L, L->top-2, 1+1);
  824|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  825|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  826|      0|  }
  827|  40.3k|  copyTV(L, L->top, v);
  828|  40.3k|  incr_top(L);
  ------------------
  |  |   12|  40.3k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  80.7k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  40.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 40.3k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  829|  40.3k|}
lua_rawget:
  832|   105k|{
  833|   105k|  cTValue *t = index2adr(L, idx);
  834|   105k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|   105k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   105k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 105k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   105k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|   105k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  864|   105k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   105k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   105k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   105k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 105k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   105k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|   105k|}
lua_settable:
  968|  43.4k|{
  969|  43.4k|  TValue *o;
  970|  43.4k|  cTValue *t = index2adr_check(L, idx);
  971|  43.4k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|  43.4k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  43.4k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  43.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 43.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  43.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|  43.4k|  o = lj_meta_tset(L, t, L->top-2);
  973|  43.4k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 43.4k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|  43.4k|    L->top -= 2;
  976|  43.4k|    copyTV(L, o, L->top+1);
  977|  43.4k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|  43.4k|}
lua_setfield:
  987|   105k|{
  988|   105k|  TValue *o;
  989|   105k|  TValue key;
  990|   105k|  cTValue *t = index2adr_check(L, idx);
  991|   105k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|   105k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   105k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   105k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 105k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   105k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|   105k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|   105k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  993|   105k|  o = lj_meta_tset(L, t, &key);
  994|   105k|  if (o) {
  ------------------
  |  Branch (994:7): [True: 105k, False: 0]
  ------------------
  995|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  996|   105k|    copyTV(L, o, --L->top);
  997|   105k|  } else {
  998|      0|    TValue *base = L->top;
  999|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1000|      0|    L->top = base+3;
 1001|      0|    lj_vm_call(L, base, 0+1);
 1002|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1003|      0|  }
 1004|   105k|}
lua_rawseti:
 1019|  15.5k|{
 1020|  15.5k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  15.5k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  15.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  15.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  15.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 15.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  15.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  15.5k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  15.5k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  15.5k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  15.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 15.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  15.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  15.5k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   87|  15.5k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|  15.5k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 12.4k, False: 3.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|  12.4k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  12.4k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  12.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  15.5k|  src = L->top-1;
 1025|  15.5k|  copyTV(L, dst, src);
 1026|  15.5k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  15.5k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|  31.0k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  31.0k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  15.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  15.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  15.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  15.5k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  15.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  15.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 15.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  31.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  15.5k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  15.5k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  15.5k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 15.5k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 15.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  15.5k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  15.5k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 15.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  15.5k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  15.5k|  L->top = src;
 1028|  15.5k|}
lua_call:
 1129|  31.0k|{
 1130|  31.0k|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|  31.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  31.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 31.0k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  31.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1131|  31.0k|	      "thread called in wrong state %d", L->status);
 1132|  31.0k|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|  31.0k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  31.0k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  31.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 31.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  31.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1133|  31.0k|  lj_vm_call(L, api_call_base(L, nargs), nresults+1);
 1134|  31.0k|}
lua_pcall:
 1137|    829|{
 1138|    829|  global_State *g = G(L);
  ------------------
  |  |  705|    829|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    829|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1139|    829|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|    829|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|    829|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
 1140|    829|  ptrdiff_t ef;
 1141|    829|  int status;
 1142|    829|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|    829|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    829|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 829, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1143|    829|	      "thread called in wrong state %d", L->status);
 1144|    829|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|    829|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    829|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    829|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 829, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|    829|  if (errfunc == 0) {
  ------------------
  |  Branch (1145:7): [True: 829, False: 0]
  ------------------
 1146|    829|    ef = 0;
 1147|    829|  } else {
 1148|      0|    cTValue *o = index2adr_stack(L, errfunc);
 1149|      0|    ef = savestack(L, o);
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1150|      0|  }
 1151|    829|  status = lj_vm_pcall(L, api_call_base(L, nargs), nresults+1, ef);
 1152|    829|  if (status) hook_restore(g, oldh);
  ------------------
  |  |  686|    637|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|    637|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  |  Branch (1152:7): [True: 637, False: 192]
  ------------------
 1153|    829|  return status;
 1154|    829|}
lj_api.c:index2adr_stack:
   72|   111k|{
   73|   111k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 111k]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|   111k|  } else {
   83|   111k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   111k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   223k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 111k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 111k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   111k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|   111k|		"invalid stack slot %d", idx);
   85|   111k|    return L->top + idx;
   86|   111k|  }
   87|   111k|}
lj_api.c:copy_slot:
  182|  3.10k|{
  183|  3.10k|  if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  3.10k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (183:7): [True: 0, False: 3.10k]
  ------------------
  184|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  185|       |    /* NOBARRIER: A thread (i.e. L) is never black. */
  186|      0|    setgcref(L->env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|  3.10k|  } else if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|  3.10k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (187:14): [True: 3.10k, False: 0]
  ------------------
  188|  3.10k|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  3.10k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  3.10k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  3.10k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  3.10k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  189|  3.10k|    if (fn->c.gct != ~LJ_TFUNC)
  ------------------
  |  |  268|  3.10k|#define LJ_TFUNC		(~8u)
  ------------------
  |  Branch (189:9): [True: 0, False: 3.10k]
  ------------------
  190|      0|      lj_err_msg(L, LJ_ERR_NOENV);
  191|  3.10k|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  3.10k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  192|  6.20k|    setgcref(fn->c.env, obj2gco(tabV(f)));
  ------------------
  |  |   72|  6.20k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 3.10k, False: 0]
  |  |  ------------------
  ------------------
  193|  3.10k|    lj_gc_barrier(L, fn, f);
  ------------------
  |  |  105|  3.10k|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|  6.20k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  6.20k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  3.10k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  3.10k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 3.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  6.20k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  3.10k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  3.10k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  3.10k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 3.10k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 3.10k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|  3.10k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  3.10k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 3.10k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|  3.10k|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  194|  3.10k|  } else {
  195|      0|    TValue *o = index2adr_check(L, idx);
  196|      0|    copyTV(L, o, f);
  197|      0|    if (idx < LUA_GLOBALSINDEX)  /* Need a barrier for upvalues. */
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (197:9): [True: 0, False: 0]
  ------------------
  198|      0|      lj_gc_barrier(L, curr_func(L), f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  199|      0|  }
  200|  3.10k|}
lj_api.c:index2adr:
   35|   654k|{
   36|   654k|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 0, False: 654k]
  ------------------
   37|      0|    TValue *o = L->base + (idx - 1);
   38|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 0, False: 0]
  ------------------
   39|   654k|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   654k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 543k, False: 111k]
  ------------------
   40|   543k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   543k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.08M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 543k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 543k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   543k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|   543k|		"bad stack slot %d", idx);
   42|   543k|    return L->top + idx;
   43|   543k|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|   111k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 40.3k, False: 71.3k]
  ------------------
   44|  40.3k|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|  40.3k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  40.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|  40.3k|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|  40.3k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  40.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|  40.3k|    return o;
   47|  71.3k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  71.3k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 71.3k, False: 0]
  ------------------
   48|  71.3k|    return registry(L);
  ------------------
  |  |  706|  71.3k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  71.3k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  71.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|  71.3k|  } else {
   50|      0|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      0|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|      0|		"calling frame is not a C function");
   53|      0|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|      0|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 0, False: 0]
  ------------------
   54|      0|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|      0|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|      0|      return o;
   57|      0|    } else {
   58|      0|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|      0|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 0, False: 0]
  ------------------
   60|      0|    }
   61|      0|  }
   62|   654k|}
lj_api.c:getcurrenv:
   90|  96.2k|{
   91|  96.2k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  96.2k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  96.2k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  96.2k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  96.2k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|  96.2k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|  96.2k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  58.9k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  58.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|  37.2k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  37.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 58.9k, False: 37.2k]
  ------------------
   93|  96.2k|}
lj_api.c:index2adr_check:
   65|   189k|{
   66|   189k|  TValue *o = index2adr(L, idx);
   67|   189k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|   189k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   378k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 189k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 189k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   189k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|   189k|  return o;
   69|   189k|}
lj_api.c:api_call_base:
 1117|  31.8k|{
 1118|  31.8k|  TValue *o = L->top, *base = o - nargs;
 1119|  31.8k|  L->top = o+1;
 1120|  62.9k|  for (; o > base; o--) copyTV(L, o, o-1);
  ------------------
  |  Branch (1120:10): [True: 31.0k, False: 31.8k]
  ------------------
 1121|  31.8k|  setnilV(o);
  ------------------
  |  |  872|  31.8k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1122|  31.8k|  return o+1;
 1123|  31.8k|}

lj_bcread_proto:
  314|  24.8k|{
  315|  24.8k|  GCproto *pt;
  316|  24.8k|  MSize framesize, numparams, flags, sizeuv, sizekgc, sizekn, sizebc, sizept;
  317|  24.8k|  MSize ofsk, ofsuv, ofsdbg;
  318|  24.8k|  MSize sizedbg = 0;
  319|  24.8k|  BCLine firstline = 0, numline = 0;
  320|       |
  321|       |  /* Read prototype header. */
  322|  24.8k|  flags = bcread_byte(ls);
  323|  24.8k|  numparams = bcread_byte(ls);
  324|  24.8k|  framesize = bcread_byte(ls);
  325|  24.8k|  sizeuv = bcread_byte(ls);
  326|  24.8k|  sizekgc = bcread_uleb128(ls);
  327|  24.8k|  sizekn = bcread_uleb128(ls);
  328|  24.8k|  sizebc = bcread_uleb128(ls) + 1;
  329|  24.8k|  if (!(bcread_flags(ls) & BCDUMP_F_STRIP)) {
  ------------------
  |  |   27|  24.8k|#define bcread_flags(ls)	ls->level
  ------------------
                if (!(bcread_flags(ls) & BCDUMP_F_STRIP)) {
  ------------------
  |  |   43|  24.8k|#define BCDUMP_F_STRIP		0x02
  ------------------
  |  Branch (329:7): [True: 0, False: 24.8k]
  ------------------
  330|      0|    sizedbg = bcread_uleb128(ls);
  331|      0|    if (sizedbg) {
  ------------------
  |  Branch (331:9): [True: 0, False: 0]
  ------------------
  332|      0|      firstline = bcread_uleb128(ls);
  333|      0|      numline = bcread_uleb128(ls);
  334|      0|    }
  335|      0|  }
  336|       |
  337|       |  /* Calculate total size of prototype including all colocated arrays. */
  338|  24.8k|  sizept = (MSize)sizeof(GCproto) +
  339|  24.8k|	   sizebc*(MSize)sizeof(BCIns) +
  340|  24.8k|	   sizekgc*(MSize)sizeof(GCRef);
  341|  24.8k|  sizept = (sizept + (MSize)sizeof(TValue)-1) & ~((MSize)sizeof(TValue)-1);
  342|  24.8k|  ofsk = sizept; sizept += sizekn*(MSize)sizeof(TValue);
  343|  24.8k|  ofsuv = sizept; sizept += ((sizeuv+1)&~1)*2;
  344|  24.8k|  ofsdbg = sizept; sizept += sizedbg;
  345|       |
  346|       |  /* Allocate prototype object and initialize its fields. */
  347|  24.8k|  pt = (GCproto *)lj_mem_newgco(ls->L, (MSize)sizept);
  348|  24.8k|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|  24.8k|#define LJ_TPROTO		(~7u)
  ------------------
  349|  24.8k|  pt->numparams = (uint8_t)numparams;
  350|  24.8k|  pt->framesize = (uint8_t)framesize;
  351|  24.8k|  pt->sizebc = sizebc;
  352|  24.8k|  setmref(pt->k, (char *)pt + ofsk);
  ------------------
  |  |   39|  24.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  353|  24.8k|  setmref(pt->uv, (char *)pt + ofsuv);
  ------------------
  |  |   39|  24.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  354|  24.8k|  pt->sizekgc = 0;  /* Set to zero until fully initialized. */
  355|  24.8k|  pt->sizekn = sizekn;
  356|  24.8k|  pt->sizept = sizept;
  357|  24.8k|  pt->sizeuv = (uint8_t)sizeuv;
  358|  24.8k|  pt->flags = (uint8_t)flags;
  359|  24.8k|  pt->trace = 0;
  360|  24.8k|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|  24.8k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  361|       |
  362|       |  /* Close potentially uninitialized gap between bc and kgc. */
  363|  24.8k|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(sizekgc+1)) = 0;
  364|       |
  365|       |  /* Read bytecode instructions and upvalue refs. */
  366|  24.8k|  bcread_bytecode(ls, pt, sizebc);
  367|  24.8k|  bcread_uv(ls, pt, sizeuv);
  368|       |
  369|       |  /* Read constants. */
  370|  24.8k|  bcread_kgc(ls, pt, sizekgc);
  371|  24.8k|  pt->sizekgc = sizekgc;
  372|  24.8k|  bcread_knum(ls, pt, sizekn);
  373|       |
  374|       |  /* Read and initialize debug info. */
  375|  24.8k|  pt->firstline = firstline;
  376|  24.8k|  pt->numline = numline;
  377|  24.8k|  if (sizedbg) {
  ------------------
  |  Branch (377:7): [True: 0, False: 24.8k]
  ------------------
  378|      0|    MSize sizeli = (sizebc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (378:35): [True: 0, False: 0]
  |  Branch (378:55): [True: 0, False: 0]
  ------------------
  379|      0|    setmref(pt->lineinfo, (char *)pt + ofsdbg);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  380|      0|    setmref(pt->uvinfo, (char *)pt + ofsdbg + sizeli);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  381|      0|    bcread_dbg(ls, pt, sizedbg);
  382|      0|    setmref(pt->varinfo, bcread_varinfo(pt));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  383|  24.8k|  } else {
  384|  24.8k|    setmref(pt->lineinfo, NULL);
  ------------------
  |  |   39|  24.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  385|  24.8k|    setmref(pt->uvinfo, NULL);
  ------------------
  |  |   39|  24.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  386|  24.8k|    setmref(pt->varinfo, NULL);
  ------------------
  |  |   39|  24.8k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  387|  24.8k|  }
  388|  24.8k|  return pt;
  389|  24.8k|}
lj_bcread:
  422|      2|{
  423|      2|  lua_State *L = ls->L;
  424|      2|  lj_assertLS(ls->c == BCDUMP_HEAD1, "bad bytecode header");
  ------------------
  |  |   89|      2|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      2|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  425|      2|  bcread_savetop(L, ls, L->top);
  ------------------
  |  |   32|      2|  ls->lastline = (BCLine)savestack(L, (top))
  |  |  ------------------
  |  |  |  |   14|      2|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      2|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  426|      2|  lj_buf_reset(&ls->sb);
  427|       |  /* Check for a valid bytecode dump header. */
  428|      2|  if (!bcread_header(ls))
  ------------------
  |  Branch (428:7): [True: 2, False: 0]
  ------------------
  429|      2|    bcread_error(ls, LJ_ERR_BCFMT);
  430|      2|  for (;;) {  /* Process all prototypes in the bytecode dump. */
  431|      0|    GCproto *pt;
  432|      0|    MSize len;
  433|      0|    const char *startp;
  434|       |    /* Read length. */
  435|      0|    if (ls->p < ls->pe && ls->p[0] == 0) {  /* Shortcut EOF. */
  ------------------
  |  Branch (435:9): [True: 0, False: 0]
  |  Branch (435:27): [True: 0, False: 0]
  ------------------
  436|      0|      ls->p++;
  437|      0|      break;
  438|      0|    }
  439|      0|    bcread_want(ls, 5);
  440|      0|    len = bcread_uleb128(ls);
  441|      0|    if (!len) break;  /* EOF */
  ------------------
  |  Branch (441:9): [True: 0, False: 0]
  ------------------
  442|      0|    bcread_need(ls, len);
  443|      0|    startp = ls->p;
  444|      0|    pt = lj_bcread_proto(ls);
  445|      0|    if (ls->p != startp + len)
  ------------------
  |  Branch (445:9): [True: 0, False: 0]
  ------------------
  446|      0|      bcread_error(ls, LJ_ERR_BCBAD);
  447|      0|    setprotoV(L, L->top, pt);
  448|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  449|      0|  }
  450|      2|  if ((ls->pe != ls->p && !ls->endmark) || L->top-1 != bcread_oldtop(L, ls))
  ------------------
  |  |   30|      0|#define bcread_oldtop(L, ls)	restorestack(L, ls->lastline)
  |  |  ------------------
  |  |  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (450:8): [True: 0, False: 2]
  |  Branch (450:27): [True: 0, False: 0]
  |  Branch (450:44): [True: 0, False: 0]
  ------------------
  451|      0|    bcread_error(ls, LJ_ERR_BCBAD);
  452|       |  /* Pop off last prototype. */
  453|      2|  L->top--;
  454|      2|  return protoV(L->top);
  ------------------
  |  |  862|      2|#define protoV(o)	check_exp(tvisproto(o), &gcval(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      2|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 2]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|      2|}
lj_bcread.c:bcread_byte:
  122|  99.3k|{
  123|  99.3k|  lj_assertLS(ls->p < ls->pe, "buffer read overflow");
  ------------------
  |  |   89|  99.3k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  99.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  99.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 99.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  99.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  124|  99.3k|  return (uint32_t)(uint8_t)*ls->p++;
  125|  99.3k|}
lj_bcread.c:bcread_uleb128:
  129|  83.8k|{
  130|  83.8k|  uint32_t v = lj_buf_ruleb128(&ls->p);
  131|  83.8k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|  83.8k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  83.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  83.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 83.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  83.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  132|  83.8k|  return v;
  133|  83.8k|}
lj_bcread.c:bcread_bytecode:
  282|  24.8k|{
  283|  24.8k|  BCIns *bc = proto_bc(pt);
  ------------------
  |  |  420|  24.8k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  284|  24.8k|  BCIns op;
  285|  24.8k|  if (ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|  24.8k|#define LJ_FR2			1
  ------------------
  |  Branch (285:7): [True: 0, False: 24.8k]
  ------------------
  286|  24.8k|  else if ((pt->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|  24.8k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (286:12): [True: 0, False: 24.8k]
  ------------------
  287|  24.8k|  else op = BC_FUNCF;
  288|  24.8k|  bc[0] = BCINS_AD(op, pt->framesize, 0);
  ------------------
  |  |   56|  24.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  289|  24.8k|  bcread_block(ls, bc+1, (sizebc-1)*(MSize)sizeof(BCIns));
  290|       |  /* Swap bytecode instructions if the endianess differs. */
  291|  24.8k|  if (bcread_swap(ls)) {
  ------------------
  |  |   29|  24.8k|  ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   27|  24.8k|#define bcread_flags(ls)	ls->level
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|  24.8k|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |  630|  24.8k|#define LJ_BE			0
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|  24.8k|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |  |  Branch (29:3): [True: 0, False: 24.8k]
  |  |  ------------------
  ------------------
  292|      0|    MSize i;
  293|      0|    for (i = 1; i < sizebc; i++) bc[i] = lj_bswap(bc[i]);
  ------------------
  |  Branch (293:17): [True: 0, False: 0]
  ------------------
  294|      0|  }
  295|  24.8k|}
lj_bcread.c:bcread_block:
  116|  24.8k|{
  117|  24.8k|  memcpy(q, bcread_mem(ls, len), len);
  118|  24.8k|}
lj_bcread.c:bcread_mem:
  107|  24.8k|{
  108|  24.8k|  uint8_t *p = (uint8_t *)ls->p;
  109|  24.8k|  ls->p += len;
  110|  24.8k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|  24.8k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  24.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  24.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 24.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  24.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  111|  24.8k|  return p;
  112|  24.8k|}
lj_bcread.c:bcread_uv:
  299|  24.8k|{
  300|  24.8k|  if (sizeuv) {
  ------------------
  |  Branch (300:7): [True: 0, False: 24.8k]
  ------------------
  301|      0|    uint16_t *uv = proto_uv(pt);
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  302|      0|    bcread_block(ls, uv, sizeuv*2);
  303|       |    /* Swap upvalue refs if the endianess differs. */
  304|      0|    if (bcread_swap(ls)) {
  ------------------
  |  |   29|      0|  ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   27|      0|#define bcread_flags(ls)	ls->level
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|      0|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |  630|      0|#define LJ_BE			0
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|      0|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |  |  Branch (29:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  305|      0|      MSize i;
  306|      0|      for (i = 0; i < sizeuv; i++)
  ------------------
  |  Branch (306:19): [True: 0, False: 0]
  ------------------
  307|      0|	uv[i] = (uint16_t)((uv[i] >> 8)|(uv[i] << 8));
  308|      0|    }
  309|      0|  }
  310|  24.8k|}
lj_bcread.c:bcread_kgc:
  226|  24.8k|{
  227|  24.8k|  MSize i;
  228|  24.8k|  GCRef *kr = mref(pt->k, GCRef) - (ptrdiff_t)sizekgc;
  ------------------
  |  |   36|  24.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  229|  24.8k|  for (i = 0; i < sizekgc; i++, kr++) {
  ------------------
  |  Branch (229:15): [True: 0, False: 24.8k]
  ------------------
  230|      0|    MSize tp = bcread_uleb128(ls);
  231|      0|    if (tp >= BCDUMP_KGC_STR) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      MSize len = tp - BCDUMP_KGC_STR;
  233|      0|      const char *p = (const char *)bcread_mem(ls, len);
  234|      0|      setgcref(*kr, obj2gco(lj_str_new(ls->L, p, len)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  235|      0|    } else if (tp == BCDUMP_KGC_TAB) {
  ------------------
  |  Branch (235:16): [True: 0, False: 0]
  ------------------
  236|      0|      setgcref(*kr, obj2gco(bcread_ktab(ls)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  237|      0|#if LJ_HASFFI
  238|      0|    } else if (tp != BCDUMP_KGC_CHILD) {
  ------------------
  |  Branch (238:16): [True: 0, False: 0]
  ------------------
  239|      0|      CTypeID id = tp == BCDUMP_KGC_COMPLEX ? CTID_COMPLEX_DOUBLE :
  ------------------
  |  Branch (239:20): [True: 0, False: 0]
  ------------------
  240|      0|		   tp == BCDUMP_KGC_I64 ? CTID_INT64 : CTID_UINT64;
  ------------------
  |  Branch (240:6): [True: 0, False: 0]
  ------------------
  241|      0|      CTSize sz = tp == BCDUMP_KGC_COMPLEX ? 16 : 8;
  ------------------
  |  Branch (241:19): [True: 0, False: 0]
  ------------------
  242|      0|      GCcdata *cd = lj_cdata_new_(ls->L, id, sz);
  243|      0|      TValue *p = (TValue *)cdataptr(cd);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  244|      0|      setgcref(*kr, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  245|      0|      p[0].u32.lo = bcread_uleb128(ls);
  246|      0|      p[0].u32.hi = bcread_uleb128(ls);
  247|      0|      if (tp == BCDUMP_KGC_COMPLEX) {
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|	p[1].u32.lo = bcread_uleb128(ls);
  249|      0|	p[1].u32.hi = bcread_uleb128(ls);
  250|      0|      }
  251|      0|#endif
  252|      0|    } else {
  253|      0|      lua_State *L = ls->L;
  254|      0|      lj_assertLS(tp == BCDUMP_KGC_CHILD, "bad constant type %d", tp);
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  255|      0|      if (L->top <= bcread_oldtop(L, ls))  /* Stack underflow? */
  ------------------
  |  |   30|      0|#define bcread_oldtop(L, ls)	restorestack(L, ls->lastline)
  |  |  ------------------
  |  |  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (255:11): [True: 0, False: 0]
  ------------------
  256|      0|	bcread_error(ls, LJ_ERR_BCBAD);
  257|      0|      L->top--;
  258|      0|      setgcref(*kr, obj2gco(protoV(L->top)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  259|      0|    }
  260|      0|  }
  261|  24.8k|}
lj_bcread.c:bcread_knum:
  265|  24.8k|{
  266|  24.8k|  MSize i;
  267|  24.8k|  TValue *o = mref(pt->k, TValue);
  ------------------
  |  |   36|  24.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  268|  40.3k|  for (i = 0; i < sizekn; i++, o++) {
  ------------------
  |  Branch (268:15): [True: 15.5k, False: 24.8k]
  ------------------
  269|  15.5k|    int isnum = (ls->p[0] & 1);
  270|  15.5k|    uint32_t lo = bcread_uleb128_33(ls);
  271|  15.5k|    if (isnum) {
  ------------------
  |  Branch (271:9): [True: 9.31k, False: 6.20k]
  ------------------
  272|  9.31k|      o->u32.lo = lo;
  273|  9.31k|      o->u32.hi = bcread_uleb128(ls);
  274|  9.31k|    } else {
  275|  6.20k|      setintV(o, lo);
  276|  6.20k|    }
  277|  15.5k|  }
  278|  24.8k|}
lj_bcread.c:bcread_uleb128_33:
  137|  15.5k|{
  138|  15.5k|  const uint8_t *p = (const uint8_t *)ls->p;
  139|  15.5k|  uint32_t v = (*p++ >> 1);
  140|  15.5k|  if (LJ_UNLIKELY(v >= 0x40)) {
  ------------------
  |  |  146|  15.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 6.20k, False: 9.31k]
  |  |  ------------------
  ------------------
  141|  6.20k|    int sh = -1;
  142|  6.20k|    v &= 0x3f;
  143|  24.8k|    do {
  144|  24.8k|     v |= ((*p & 0x7f) << (sh += 7));
  145|  24.8k|   } while (*p++ >= 0x80);
  ------------------
  |  Branch (145:13): [True: 18.6k, False: 6.20k]
  ------------------
  146|  6.20k|  }
  147|  15.5k|  ls->p = (char *)p;
  148|  15.5k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|  15.5k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  15.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  15.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 15.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  15.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|  15.5k|  return v;
  150|  15.5k|}
lj_bcread.c:bcread_header:
  393|      2|{
  394|      2|  uint32_t flags;
  395|      2|  bcread_want(ls, 3+5+5);
  396|      2|  if (bcread_byte(ls) != BCDUMP_HEAD2 ||
  ------------------
  |  |   33|      4|#define BCDUMP_HEAD2		0x4c
  ------------------
  |  Branch (396:7): [True: 1, False: 1]
  ------------------
  397|      2|      bcread_byte(ls) != BCDUMP_HEAD3 ||
  ------------------
  |  |   34|      3|#define BCDUMP_HEAD3		0x4a
  ------------------
  |  Branch (397:7): [True: 1, False: 0]
  ------------------
  398|      2|      bcread_byte(ls) != BCDUMP_VERSION) return 0;
  ------------------
  |  |   39|      0|#define BCDUMP_VERSION		2
  ------------------
  |  Branch (398:7): [True: 0, False: 0]
  ------------------
  399|      0|  bcread_flags(ls) = flags = bcread_uleb128(ls);
  ------------------
  |  |   27|      0|#define bcread_flags(ls)	ls->level
  ------------------
  400|      0|  if ((flags & ~(BCDUMP_F_KNOWN)) != 0) return 0;
  ------------------
  |  |   47|      0|#define BCDUMP_F_KNOWN		(BCDUMP_F_FR2*2-1)
  |  |  ------------------
  |  |  |  |   45|      0|#define BCDUMP_F_FR2		0x08
  |  |  ------------------
  ------------------
  |  Branch (400:7): [True: 0, False: 0]
  ------------------
  401|      0|  if ((flags & BCDUMP_F_FR2) != (uint32_t)ls->fr2*BCDUMP_F_FR2) return 0;
  ------------------
  |  |   45|      0|#define BCDUMP_F_FR2		0x08
  ------------------
                if ((flags & BCDUMP_F_FR2) != (uint32_t)ls->fr2*BCDUMP_F_FR2) return 0;
  ------------------
  |  |   45|      0|#define BCDUMP_F_FR2		0x08
  ------------------
  |  Branch (401:7): [True: 0, False: 0]
  ------------------
  402|      0|  if ((flags & BCDUMP_F_FFI)) {
  ------------------
  |  |   44|      0|#define BCDUMP_F_FFI		0x04
  ------------------
  |  Branch (402:7): [True: 0, False: 0]
  ------------------
  403|      0|#if LJ_HASFFI
  404|      0|    lua_State *L = ls->L;
  405|      0|    ctype_loadffi(L);
  ------------------
  |  |  396|      0|  do { \
  |  |  397|      0|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  384|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (397:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  398|      0|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  399|      0|      luaopen_ffi(L); \
  |  |  400|      0|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|      0|    } \
  |  |  402|      0|  } while (0)
  |  |  ------------------
  |  |  |  Branch (402:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  406|       |#else
  407|       |    return 0;
  408|       |#endif
  409|      0|  }
  410|      0|  if ((flags & BCDUMP_F_STRIP)) {
  ------------------
  |  |   43|      0|#define BCDUMP_F_STRIP		0x02
  ------------------
  |  Branch (410:7): [True: 0, False: 0]
  ------------------
  411|      0|    ls->chunkname = lj_str_newz(ls->L, ls->chunkarg);
  ------------------
  |  |   27|      0|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  412|      0|  } else {
  413|      0|    MSize len = bcread_uleb128(ls);
  414|      0|    bcread_need(ls, len);
  415|      0|    ls->chunkname = lj_str_new(ls->L, (const char *)bcread_mem(ls, len), len);
  416|      0|  }
  417|      0|  return 1;  /* Ok. */
  418|      0|}
lj_bcread.c:bcread_error:
   38|      2|{
   39|      2|  lua_State *L = ls->L;
   40|      2|  const char *name = ls->chunkarg;
   41|      2|  if (*name == BCDUMP_HEAD1) name = "(binary)";
  ------------------
  |  |   32|      2|#define BCDUMP_HEAD1		0x1b
  ------------------
  |  Branch (41:7): [True: 0, False: 2]
  ------------------
   42|      2|  else if (*name == '@' || *name == '=') name++;
  ------------------
  |  Branch (42:12): [True: 0, False: 2]
  |  Branch (42:28): [True: 0, False: 2]
  ------------------
   43|      2|  lj_strfmt_pushf(L, "%s: %s", name, err2msg(em));
  ------------------
  |  |   21|      2|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
   44|      2|  lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      2|#define LUA_ERRSYNTAX	3
  ------------------
   45|      2|}
lj_bcread.c:bcread_want:
  100|      2|{
  101|      2|  if (LJ_UNLIKELY((MSize)(ls->pe - ls->p) < len))
  ------------------
  |  |  146|      2|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2, False: 0]
  |  |  ------------------
  ------------------
  102|      2|    bcread_fill(ls, len, 0);
  103|      2|}
lj_bcread.c:bcread_fill:
   49|      2|{
   50|      2|  lj_assertLS(len != 0, "empty refill");
  ------------------
  |  |   89|      2|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      2|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      2|  if (len > LJ_MAX_BUF || ls->c < 0)
  ------------------
  |  |   55|      2|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      4|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 2]
  |  Branch (51:27): [True: 0, False: 2]
  ------------------
   52|      0|    bcread_error(ls, LJ_ERR_BCBAD);
   53|      2|  do {
   54|      2|    const char *buf;
   55|      2|    size_t sz;
   56|      2|    char *p = ls->sb.b;
   57|      2|    MSize n = (MSize)(ls->pe - ls->p);
   58|      2|    if (n) {  /* Copy remainder to buffer. */
  ------------------
  |  Branch (58:9): [True: 2, False: 0]
  ------------------
   59|      2|      if (sbuflen(&ls->sb)) {  /* Move down in buffer. */
  ------------------
  |  |   36|      2|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  |  |  ------------------
  |  |  |  Branch (36:22): [True: 0, False: 2]
  |  |  ------------------
  ------------------
   60|      0|	lj_assertLS(ls->pe == ls->sb.w, "bad buffer pointer");
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   61|      0|	if (ls->p != p) memmove(p, ls->p, n);
  ------------------
  |  Branch (61:6): [True: 0, False: 0]
  ------------------
   62|      2|      } else {  /* Copy from buffer provided by reader. */
   63|      2|	p = lj_buf_need(&ls->sb, len);
   64|      2|	memcpy(p, ls->p, n);
   65|      2|      }
   66|      2|      ls->p = p;
   67|      2|      ls->pe = p + n;
   68|      2|    }
   69|      2|    ls->sb.w = p + n;
   70|      2|    buf = ls->rfunc(ls->L, ls->rdata, &sz);  /* Get more data from reader. */
   71|      2|    if (buf == NULL || sz == 0) {  /* EOF? */
  ------------------
  |  Branch (71:9): [True: 0, False: 2]
  |  Branch (71:24): [True: 1, False: 1]
  ------------------
   72|      1|      if (need) bcread_error(ls, LJ_ERR_BCBAD);
  ------------------
  |  Branch (72:11): [True: 0, False: 1]
  ------------------
   73|      1|      ls->c = -1;  /* Only bad if we get called again. */
   74|      1|      break;
   75|      1|    }
   76|      1|    if (sz >= LJ_MAX_BUF - n) lj_err_mem(ls->L);
  ------------------
  |  |   55|      1|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      1|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (76:9): [True: 0, False: 1]
  ------------------
   77|      1|    if (n) {  /* Append to buffer. */
  ------------------
  |  Branch (77:9): [True: 1, False: 0]
  ------------------
   78|      1|      n += (MSize)sz;
   79|      1|      p = lj_buf_need(&ls->sb, n < len ? len : n);
  ------------------
  |  Branch (79:32): [True: 0, False: 1]
  ------------------
   80|      1|      memcpy(ls->sb.w, buf, sz);
   81|      1|      ls->sb.w = p + n;
   82|      1|      ls->p = p;
   83|      1|      ls->pe = p + n;
   84|      1|    } else {  /* Return buffer provided by reader. */
   85|      0|      ls->p = buf;
   86|      0|      ls->pe = buf + sz;
   87|      0|    }
   88|      1|  } while ((MSize)(ls->pe - ls->p) < len);
  ------------------
  |  Branch (88:12): [True: 0, False: 1]
  ------------------
   89|      2|}

lj_buf_need2:
   52|      2|{
   53|      2|  lj_assertG_(G(sbufL(sb)), sz > sbufsz(sb), "SBuf overflow");
  ------------------
  |  |  363|      2|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   54|      2|  if (LJ_UNLIKELY(sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      2|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2]
  |  |  ------------------
  ------------------
   55|      0|    lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      2|  buf_grow(sb, sz);
   57|      2|  return sb->b;
   58|      2|}
lj_buf_more2:
   61|  11.2k|{
   62|  11.2k|  if (sbufisext(sb)) {
  ------------------
  |  |   56|  11.2k|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|  11.2k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  11.2k|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|  11.2k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|  11.2k|  } else {
   81|  11.2k|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|  11.2k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|  11.2k|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|  11.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|  11.2k|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|  22.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 11.2k]
  |  |  |  Branch (146:44): [True: 0, False: 11.2k]
  |  |  |  Branch (146:44): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  11.2k|    buf_grow(sb, len + sz);
   86|  11.2k|  }
   87|  11.2k|  return sb->w;
   88|  11.2k|}
lj_buf_shrink:
   91|    104|{
   92|    104|  char *b = sb->b;
   93|    104|  MSize osz = (MSize)(sb->e - b);
   94|    104|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|    104|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 0, False: 104]
  ------------------
   95|      0|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   96|      0|    sb->w = sb->b = b;  /* Not supposed to keep data across shrinks. */
   97|      0|    sb->e = b + (osz >> 1);
   98|      0|  }
   99|    104|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|    104|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    104|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 104, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    104|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  100|    104|}
lj_buf_putmem:
  131|  30.4k|{
  132|  30.4k|  char *w = lj_buf_more(sb, len);
  133|  30.4k|  w = lj_buf_wmem(w, q, len);
  134|  30.4k|  sb->w = w;
  135|  30.4k|  return sb;
  136|  30.4k|}
lj_buf_ruleb128:
  292|  83.8k|{
  293|  83.8k|  const uint8_t *w = (const uint8_t *)*pp;
  294|  83.8k|  uint32_t v = *w++;
  295|  83.8k|  if (LJ_UNLIKELY(v >= 0x80)) {
  ------------------
  |  |  146|  83.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 9.31k, False: 74.4k]
  |  |  ------------------
  ------------------
  296|  9.31k|    int sh = 0;
  297|  9.31k|    v &= 0x7f;
  298|  37.2k|    do { v |= ((*w & 0x7f) << (sh += 7)); } while (*w++ >= 0x80);
  ------------------
  |  Branch (298:52): [True: 27.9k, False: 9.31k]
  ------------------
  299|  9.31k|  }
  300|  83.8k|  *pp = (const char *)w;
  301|  83.8k|  return v;
  302|  83.8k|}
lj_buf.c:buf_grow:
   20|  11.2k|{
   21|  11.2k|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|  11.2k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|  11.2k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|  11.2k|  char *b;
   23|  11.2k|  GCSize flag;
   24|  11.2k|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  11.2k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  6.00k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 6.00k, False: 5.21k]
  ------------------
   25|  17.1k|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 5.93k, False: 11.2k]
  ------------------
   26|  11.2k|  flag = sbufflag(sb);
  ------------------
  |  |   55|  11.2k|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|  11.2k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|  11.2k|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|  11.2k|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 11.2k]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|  11.2k|  } else {
   34|  11.2k|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|  11.2k|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|  11.2k|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|  11.2k|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|  11.2k|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|  11.2k|  }
   36|  11.2k|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|  11.2k|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 11.2k]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|  11.2k|  sb->b = b;
   41|  11.2k|  sb->w = b + len;
   42|  11.2k|  sb->e = b + nsz;
   43|  11.2k|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|  11.2k|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 11.2k]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|  11.2k|}

lj_state.c:lj_buf_init:
   75|  3.10k|{
   76|  3.10k|  setsbufL(sb, L);
  ------------------
  |  |   49|  3.10k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  3.10k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  3.10k|  sb->w = sb->e = sb->b = NULL;
   78|  3.10k|}
lj_state.c:lj_buf_free:
   94|  3.10k|{
   95|  3.10k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  3.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  3.10k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  3.10k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  3.10k|}
lj_lex.c:lj_buf_free:
   94|  3.10k|{
   95|  3.10k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  3.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  3.10k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  3.10k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  3.10k|}
lj_lex.c:lj_buf_reset:
   81|   242k|{
   82|   242k|  sb->w = sb->b;
   83|   242k|}
lj_lex.c:lj_buf_putb:
  181|  1.02M|{
  182|  1.02M|  char *w = lj_buf_more(sb, 1);
  183|  1.02M|  *w++ = (char)c;
  184|  1.02M|  sb->w = w;
  185|  1.02M|}
lj_lex.c:lj_buf_more:
  107|  1.02M|{
  108|  1.02M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  1.02M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 4.97k, False: 1.02M]
  |  |  ------------------
  ------------------
  109|  4.97k|    return lj_buf_more2(sb, sz);
  110|  1.02M|  return sb->w;
  111|  1.02M|}
lj_parse.c:lj_buf_reset:
   81|    829|{
   82|    829|  sb->w = sb->b;
   83|    829|}
lj_parse.c:lj_buf_more:
  107|    829|{
  108|    829|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|    829|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 73, False: 756]
  |  |  ------------------
  ------------------
  109|     73|    return lj_buf_more2(sb, sz);
  110|    756|  return sb->w;
  111|    829|}
lj_parse.c:lj_buf_putb:
  181|    829|{
  182|    829|  char *w = lj_buf_more(sb, 1);
  183|    829|  *w++ = (char)c;
  184|    829|  sb->w = w;
  185|    829|}
lj_load.c:lj_buf_init:
   75|  3.10k|{
   76|  3.10k|  setsbufL(sb, L);
  ------------------
  |  |   49|  3.10k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  3.10k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  3.10k|  sb->w = sb->e = sb->b = NULL;
   78|  3.10k|}
lj_buf.c:lj_buf_more:
  107|  30.4k|{
  108|  30.4k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  30.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 4.57k, False: 25.8k]
  |  |  ------------------
  ------------------
  109|  4.57k|    return lj_buf_more2(sb, sz);
  110|  25.8k|  return sb->w;
  111|  30.4k|}
lj_buf.c:lj_buf_wmem:
  176|  30.4k|{
  177|  30.4k|  return (char *)memcpy(p, q, len) + len;
  178|  30.4k|}
lj_meta.c:lj_buf_tmp_:
   86|    321|{
   87|    321|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|    321|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    321|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|    321|  setsbufL(sb, L);
  ------------------
  |  |   49|    321|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|    321|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|    321|  lj_buf_reset(sb);
   90|    321|  return sb;
   91|    321|}
lj_meta.c:lj_buf_reset:
   81|    321|{
   82|    321|  sb->w = sb->b;
   83|    321|}
lj_meta.c:lj_buf_more:
  107|    321|{
  108|    321|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|    321|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 257, False: 64]
  |  |  ------------------
  ------------------
  109|    257|    return lj_buf_more2(sb, sz);
  110|     64|  return sb->w;
  111|    321|}
lj_meta.c:lj_buf_str:
  201|    321|{
  202|    321|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|    321|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|    321|}
lj_strfmt.c:lj_buf_tmp_:
   86|  9.78k|{
   87|  9.78k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|  9.78k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  9.78k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|  9.78k|  setsbufL(sb, L);
  ------------------
  |  |   49|  9.78k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  9.78k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|  9.78k|  lj_buf_reset(sb);
   90|  9.78k|  return sb;
   91|  9.78k|}
lj_strfmt.c:lj_buf_reset:
   81|  9.78k|{
   82|  9.78k|  sb->w = sb->b;
   83|  9.78k|}
lj_strfmt.c:lj_buf_more:
  107|  4.75k|{
  108|  4.75k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  4.75k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.34k, False: 3.40k]
  |  |  ------------------
  ------------------
  109|  1.34k|    return lj_buf_more2(sb, sz);
  110|  3.40k|  return sb->w;
  111|  4.75k|}
lj_strfmt.c:lj_buf_putb:
  181|  1.69k|{
  182|  1.69k|  char *w = lj_buf_more(sb, 1);
  183|  1.69k|  *w++ = (char)c;
  184|  1.69k|  sb->w = w;
  185|  1.69k|}
lj_strfmt.c:lj_buf_str:
  201|  9.78k|{
  202|  9.78k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  9.78k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|  9.78k|}
lj_strfmt_num.c:lj_buf_more:
  107|  1.76k|{
  108|  1.76k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  1.76k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.76k]
  |  |  ------------------
  ------------------
  109|      0|    return lj_buf_more2(sb, sz);
  110|  1.76k|  return sb->w;
  111|  1.76k|}
lj_bcread.c:lj_buf_reset:
   81|      2|{
   82|      2|  sb->w = sb->b;
   83|      2|}
lj_bcread.c:lj_buf_need:
  100|      3|{
  101|      3|  if (LJ_UNLIKELY(sz > sbufsz(sb)))
  ------------------
  |  |  146|      3|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2, False: 1]
  |  |  ------------------
  ------------------
  102|      2|    return lj_buf_need2(sb, sz);
  103|      1|  return sb->b;
  104|      3|}

lj_carith_op:
  276|    833|{
  277|    833|  CTState *cts = ctype_cts(L);
  278|    833|  CDArith ca;
  279|    833|  if (carith_checkarg(L, cts, &ca) && mm != MM_len && mm != MM_concat) {
  ------------------
  |  Branch (279:7): [True: 793, False: 40]
  |  Branch (279:39): [True: 792, False: 1]
  |  Branch (279:55): [True: 781, False: 11]
  ------------------
  280|    781|    if (carith_int64(L, cts, &ca, mm) || carith_ptr(L, cts, &ca, mm)) {
  ------------------
  |  Branch (280:9): [True: 646, False: 135]
  |  Branch (280:42): [True: 0, False: 135]
  ------------------
  281|    646|      copyTV(L, &G(L)->tmptv2, L->top-1);  /* Remember for trace recorder. */
  ------------------
  |  |  705|    646|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    646|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  282|    646|      return 1;
  283|    646|    }
  284|    781|  }
  285|    187|  return lj_carith_meta(L, cts, &ca, mm);
  286|    833|}
lj_carith_divu64:
  375|     70|{
  376|     70|  if (b == 0) return U64x(80000000,00000000);
  ------------------
  |  |   94|     11|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (376:7): [True: 11, False: 59]
  ------------------
  377|     59|  return a / b;
  378|     70|}
lj_carith_divi64:
  382|     81|{
  383|     81|  if (b == 0 || (a == (int64_t)U64x(80000000,00000000) && b == -1))
  ------------------
  |  |   94|    136|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (383:7): [True: 13, False: 68]
  |  Branch (383:18): [True: 10, False: 58]
  |  Branch (383:59): [True: 1, False: 9]
  ------------------
  384|     14|    return U64x(80000000,00000000);
  ------------------
  |  |   94|     14|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  385|     67|  return a / b;
  386|     81|}
lj_carith_modu64:
  390|      6|{
  391|      6|  if (b == 0) return U64x(80000000,00000000);
  ------------------
  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (391:7): [True: 0, False: 6]
  ------------------
  392|      6|  return a % b;
  393|      6|}
lj_carith_modi64:
  397|    141|{
  398|    141|  if (b == 0) return U64x(80000000,00000000);
  ------------------
  |  |   94|     26|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (398:7): [True: 26, False: 115]
  ------------------
  399|    115|  if (a == (int64_t)U64x(80000000,00000000) && b == -1) return 0;
  ------------------
  |  |   94|    230|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (399:7): [True: 21, False: 94]
  |  Branch (399:48): [True: 0, False: 21]
  ------------------
  400|    115|  return a % b;
  401|    115|}
lj_carith_powu64:
  405|    107|{
  406|    107|  uint64_t y;
  407|    107|  if (k == 0)
  ------------------
  |  Branch (407:7): [True: 1, False: 106]
  ------------------
  408|      1|    return 1;
  409|    323|  for (; (k & 1) == 0; k >>= 1) x *= x;
  ------------------
  |  Branch (409:10): [True: 217, False: 106]
  ------------------
  410|    106|  y = x;
  411|    106|  if ((k >>= 1) != 0) {
  ------------------
  |  Branch (411:7): [True: 101, False: 5]
  ------------------
  412|  1.49k|    for (;;) {
  413|  1.49k|      x *= x;
  414|  1.49k|      if (k == 1) break;
  ------------------
  |  Branch (414:11): [True: 101, False: 1.39k]
  ------------------
  415|  1.39k|      if (k & 1) y *= x;
  ------------------
  |  Branch (415:11): [True: 671, False: 723]
  ------------------
  416|  1.39k|      k >>= 1;
  417|  1.39k|    }
  418|    101|    y *= x;
  419|    101|  }
  420|    106|  return y;
  421|    107|}
lj_carith_powi64:
  425|    114|{
  426|    114|  if (k == 0)
  ------------------
  |  Branch (426:7): [True: 6, False: 108]
  ------------------
  427|      6|    return 1;
  428|    108|  if (k < 0) {
  ------------------
  |  Branch (428:7): [True: 10, False: 98]
  ------------------
  429|     10|    if (x == 0)
  ------------------
  |  Branch (429:9): [True: 1, False: 9]
  ------------------
  430|      1|      return U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|      1|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  431|      9|    else if (x == 1)
  ------------------
  |  Branch (431:14): [True: 1, False: 8]
  ------------------
  432|      1|      return 1;
  433|      8|    else if (x == -1)
  ------------------
  |  Branch (433:14): [True: 0, False: 8]
  ------------------
  434|      0|      return (k & 1) ? -1 : 1;
  ------------------
  |  Branch (434:14): [True: 0, False: 0]
  ------------------
  435|      8|    else
  436|      8|      return 0;
  437|     10|  }
  438|     98|  return (int64_t)lj_carith_powu64((uint64_t)x, (uint64_t)k);
  439|    108|}
lj_carith.c:carith_checkarg:
   31|    833|{
   32|    833|  TValue *o = L->base;
   33|    833|  int ok = 1;
   34|    833|  MSize i;
   35|    833|  if (o+1 >= L->top)
  ------------------
  |  Branch (35:7): [True: 0, False: 833]
  ------------------
   36|      0|    lj_err_argt(L, 1, LUA_TCDATA);
  ------------------
  |  |  222|      0|#define LUA_TCDATA	(LAST_TT+2)
  |  |  ------------------
  |  |  |  |  220|      0|#define LAST_TT		LUA_TTHREAD
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|      0|#define LUA_TTHREAD		8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   37|  2.49k|  for (i = 0; i < 2; i++, o++) {
  ------------------
  |  Branch (37:15): [True: 1.66k, False: 833]
  ------------------
   38|  1.66k|    if (tviscdata(o)) {
  ------------------
  |  |  799|  1.66k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  1.66k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  1.66k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 983, False: 683]
  |  |  ------------------
  ------------------
   39|    983|      GCcdata *cd = cdataV(o);
  ------------------
  |  |  863|    983|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|    983|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    983|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    983|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 983, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    983|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   40|      0|      CTypeID id = (CTypeID)cd->ctypeid;
   41|    983|      CType *ct = ctype_raw(cts, id);
   42|    983|      uint8_t *p = (uint8_t *)cdataptr(cd);
  ------------------
  |  |  360|    983|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
   43|    983|      if (ctype_isptr(ct->info)) {
  ------------------
  |  |  203|    983|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|    983|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    983|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 983]
  |  |  ------------------
  ------------------
   44|      0|	p = (uint8_t *)cdata_getptr(p, ct->size);
   45|      0|	if (ctype_isref(ct->info)) ct = ctype_rawchild(cts, ct);
  ------------------
  |  |  229|      0|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|      0|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   46|    983|      } else if (ctype_isfunc(ct->info)) {
  ------------------
  |  |  206|    983|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|    983|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    983|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 983]
  |  |  ------------------
  ------------------
   47|      0|	CTypeID id0 = i ? ctype_typeid(cts, ca->ct[0]) : 0;
  ------------------
  |  |  425|      0|#define ctype_typeid(cts, ct)	((CTypeID)((ct) - (cts)->tab))
  ------------------
  |  Branch (47:16): [True: 0, False: 0]
  ------------------
   48|      0|	p = (uint8_t *)*(void **)p;
   49|      0|	ct = ctype_get(cts,
   50|      0|	  lj_ctype_intern(cts, CTINFO(CT_PTR, CTALIGN_PTR|id), CTSIZE_PTR));
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
              	  lj_ctype_intern(cts, CTINFO(CT_PTR, CTALIGN_PTR|id), CTSIZE_PTR));
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
   51|      0|	if (i) {  /* cts->tab may have been reallocated. */
  ------------------
  |  Branch (51:6): [True: 0, False: 0]
  ------------------
   52|      0|	  ca->ct[0] = ctype_get(cts, id0);
   53|      0|	}
   54|      0|      }
   55|    983|      if (ctype_isenum(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  207|    983|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|    983|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    983|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 983]
  |  |  ------------------
  ------------------
   56|    983|      ca->ct[i] = ct;
   57|    983|      ca->p[i] = p;
   58|    983|    } else if (tvisint(o)) {
  ------------------
  |  |  803|    683|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.36k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   59|      0|      ca->ct[i] = ctype_get(cts, CTID_INT32);
   60|      0|      ca->p[i] = (uint8_t *)&o->i;
   61|    683|    } else if (tvisnum(o)) {
  ------------------
  |  |  804|    683|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    683|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    683|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    683|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 536, False: 147]
  |  |  ------------------
  ------------------
   62|    536|      ca->ct[i] = ctype_get(cts, CTID_DOUBLE);
   63|    536|      ca->p[i] = (uint8_t *)&o->n;
   64|    536|    } else if (tvisnil(o)) {
  ------------------
  |  |  782|    147|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 107, False: 40]
  |  |  ------------------
  ------------------
   65|    107|      ca->ct[i] = ctype_get(cts, CTID_P_VOID);
   66|    107|      ca->p[i] = (uint8_t *)0;
   67|    107|    } else if (tvisstr(o)) {
  ------------------
  |  |  795|     40|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     40|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     40|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 12, False: 28]
  |  |  ------------------
  ------------------
   68|     12|      TValue *o2 = i == 0 ? o+1 : o-1;
  ------------------
  |  Branch (68:20): [True: 10, False: 2]
  ------------------
   69|     12|      CType *ct = ctype_raw(cts, cdataV(o2)->ctypeid);
  ------------------
  |  |  863|     12|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|     12|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     12|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     12|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 12, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     12|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   70|      0|      ca->ct[i] = NULL;
   71|     12|      ca->p[i] = (uint8_t *)strVdata(o);
  ------------------
  |  |  318|     12|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|     24|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 12, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   72|      0|      ok = 0;
   73|     12|      if (ctype_isenum(ct->info)) {
  ------------------
  |  |  207|     12|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|     12|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     12|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 12]
  |  |  ------------------
  ------------------
   74|      0|	CTSize ofs;
   75|      0|	CType *cct = lj_ctype_getfield(cts, ct, strV(o), &ofs);
  ------------------
  |  |  467|      0|  lj_ctype_getfieldq((cts), (ct), (name), (ofs), NULL)
  |  |  ------------------
  |  |  |  Branch (467:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	if (cct && ctype_isconstval(cct->info)) {
  ------------------
  |  |  212|      0|#define ctype_isconstval(info)	(ctype_type((info)) == CT_CONSTVAL)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (212:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (76:6): [True: 0, False: 0]
  ------------------
   77|      0|	  ca->ct[i] = ctype_child(cts, cct);
   78|      0|	  ca->p[i] = (uint8_t *)&cct->size;  /* Assumes ct does not grow. */
   79|      0|	  ok = 1;
   80|      0|	} else {
   81|      0|	  ca->ct[1-i] = ct;  /* Use enum to improve error message. */
   82|      0|	  ca->p[1-i] = NULL;
   83|      0|	  break;
   84|      0|	}
   85|      0|      }
   86|     28|    } else {
   87|     28|      ca->ct[i] = NULL;
   88|     28|      ca->p[i] = (void *)(intptr_t)1;  /* To make it unequal. */
   89|     28|      ok = 0;
   90|     28|    }
   91|  1.66k|  }
   92|    833|  return ok;
   93|    833|}
lj_carith.c:carith_int64:
  168|    781|{
  169|    781|  if (ctype_isnum(ca->ct[0]->info) && ca->ct[0]->size <= 8 &&
  ------------------
  |  |  201|  1.56k|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|    781|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    781|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 688, False: 93]
  |  |  ------------------
  ------------------
  |  Branch (169:39): [True: 688, False: 0]
  ------------------
  170|    781|      ctype_isnum(ca->ct[1]->info) && ca->ct[1]->size <= 8) {
  ------------------
  |  |  201|  1.46k|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|    688|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    688|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 646, False: 42]
  |  |  ------------------
  ------------------
  |  Branch (170:39): [True: 646, False: 0]
  ------------------
  171|    646|    CTypeID id = (((ca->ct[0]->info & CTF_UNSIGNED) && ca->ct[0]->size == 8) ||
  ------------------
  |  |   68|    646|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (171:20): [True: 69, False: 577]
  |  Branch (171:56): [True: 69, False: 0]
  ------------------
  172|    646|		  ((ca->ct[1]->info & CTF_UNSIGNED) && ca->ct[1]->size == 8)) ?
  ------------------
  |  |   68|    577|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (172:6): [True: 76, False: 501]
  |  Branch (172:42): [True: 76, False: 0]
  ------------------
  173|    501|		 CTID_UINT64 : CTID_INT64;
  174|    646|    CType *ct = ctype_get(cts, id);
  175|    646|    GCcdata *cd;
  176|    646|    uint64_t u0, u1, *up;
  177|    646|    lj_cconv_ct_ct(cts, ct, ca->ct[0], (uint8_t *)&u0, ca->p[0], 0);
  178|    646|    if (mm != MM_unm)
  ------------------
  |  Branch (178:9): [True: 637, False: 9]
  ------------------
  179|    637|      lj_cconv_ct_ct(cts, ct, ca->ct[1], (uint8_t *)&u1, ca->p[1], 0);
  180|    646|    switch (mm) {
  181|      3|    case MM_eq:
  ------------------
  |  Branch (181:5): [True: 3, False: 643]
  ------------------
  182|      3|      setboolV(L->top-1, (u0 == u1));
  ------------------
  |  |  874|      3|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  183|      3|      return 1;
  184|     39|    case MM_lt:
  ------------------
  |  Branch (184:5): [True: 39, False: 607]
  ------------------
  185|     39|      setboolV(L->top-1,
  ------------------
  |  |  874|     78|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:61): [True: 27, False: 12]
  |  |  ------------------
  ------------------
  186|     39|	       id == CTID_INT64 ? ((int64_t)u0 < (int64_t)u1) : (u0 < u1));
  187|     39|      return 1;
  188|     11|    case MM_le:
  ------------------
  |  Branch (188:5): [True: 11, False: 635]
  ------------------
  189|     11|      setboolV(L->top-1,
  ------------------
  |  |  874|     22|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:61): [True: 6, False: 5]
  |  |  ------------------
  ------------------
  190|     11|	       id == CTID_INT64 ? ((int64_t)u0 <= (int64_t)u1) : (u0 <= u1));
  191|     11|      return 1;
  192|    593|    default: break;
  ------------------
  |  Branch (192:5): [True: 593, False: 53]
  ------------------
  193|    646|    }
  194|    593|    cd = lj_cdata_new(cts, id, 8);
  195|    593|    up = (uint64_t *)cdataptr(cd);
  ------------------
  |  |  360|    593|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  196|    593|    setcdataV(L, L->top-1, cd);
  197|    593|    switch (mm) {
  198|     49|    case MM_add: *up = u0 + u1; break;
  ------------------
  |  Branch (198:5): [True: 49, False: 544]
  ------------------
  199|     47|    case MM_sub: *up = u0 - u1; break;
  ------------------
  |  Branch (199:5): [True: 47, False: 546]
  ------------------
  200|     67|    case MM_mul: *up = u0 * u1; break;
  ------------------
  |  Branch (200:5): [True: 67, False: 526]
  ------------------
  201|    151|    case MM_div:
  ------------------
  |  Branch (201:5): [True: 151, False: 442]
  ------------------
  202|    151|      if (id == CTID_INT64)
  ------------------
  |  Branch (202:11): [True: 81, False: 70]
  ------------------
  203|     81|	*up = (uint64_t)lj_carith_divi64((int64_t)u0, (int64_t)u1);
  204|     70|      else
  205|     70|	*up = lj_carith_divu64(u0, u1);
  206|    151|      break;
  207|    147|    case MM_mod:
  ------------------
  |  Branch (207:5): [True: 147, False: 446]
  ------------------
  208|    147|      if (id == CTID_INT64)
  ------------------
  |  Branch (208:11): [True: 141, False: 6]
  ------------------
  209|    141|	*up = (uint64_t)lj_carith_modi64((int64_t)u0, (int64_t)u1);
  210|      6|      else
  211|      6|	*up = lj_carith_modu64(u0, u1);
  212|    147|      break;
  213|    123|    case MM_pow:
  ------------------
  |  Branch (213:5): [True: 123, False: 470]
  ------------------
  214|    123|      if (id == CTID_INT64)
  ------------------
  |  Branch (214:11): [True: 114, False: 9]
  ------------------
  215|    114|	*up = (uint64_t)lj_carith_powi64((int64_t)u0, (int64_t)u1);
  216|      9|      else
  217|      9|	*up = lj_carith_powu64(u0, u1);
  218|    123|      break;
  219|      9|    case MM_unm: *up = ~u0+1u; break;
  ------------------
  |  Branch (219:5): [True: 9, False: 584]
  ------------------
  220|      0|    default:
  ------------------
  |  Branch (220:5): [True: 0, False: 593]
  ------------------
  221|      0|      lj_assertL(0, "bad metamethod %d", mm);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  222|      0|      break;
  223|    593|    }
  224|    593|    lj_gc_check(L);
  ------------------
  |  |   66|    593|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    593|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 126, False: 467]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    593|      lj_gc_step(L); }
  ------------------
  225|    593|    return 1;
  226|    593|  }
  227|    135|  return 0;
  228|    781|}
lj_carith.c:carith_ptr:
   97|    135|{
   98|    135|  CType *ctp = ca->ct[0];
   99|    135|  uint8_t *pp = ca->p[0];
  100|    135|  ptrdiff_t idx;
  101|    135|  CTSize sz;
  102|    135|  CTypeID id;
  103|    135|  GCcdata *cd;
  104|    135|  if (ctype_isptr(ctp->info) || ctype_isrefarray(ctp->info)) {
  ------------------
  |  |  203|    270|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|    135|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    135|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 87, False: 48]
  |  |  ------------------
  ------------------
                if (ctype_isptr(ctp->info) || ctype_isrefarray(ctp->info)) {
  ------------------
  |  |  232|     48|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|     48|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|     48|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|     48|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|     48|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     48|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 48]
  |  |  ------------------
  ------------------
  105|     87|    if ((mm == MM_sub || mm == MM_eq || mm == MM_lt || mm == MM_le) &&
  ------------------
  |  Branch (105:10): [True: 3, False: 84]
  |  Branch (105:26): [True: 42, False: 42]
  |  Branch (105:41): [True: 30, False: 12]
  |  Branch (105:56): [True: 1, False: 11]
  ------------------
  106|     87|	(ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  203|    152|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|     76|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     76|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 76]
  |  |  ------------------
  ------------------
              	(ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  232|     76|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|     76|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|     76|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|     76|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|     76|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     76|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 76]
  |  |  ------------------
  ------------------
  107|      0|      uint8_t *pp2 = ca->p[1];
  108|      0|      if (mm == MM_eq) {  /* Pointer equality. Incompatible pointers are ok. */
  ------------------
  |  Branch (108:11): [True: 0, False: 0]
  ------------------
  109|      0|	setboolV(L->top-1, (pp == pp2));
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  110|      0|	return 1;
  111|      0|      }
  112|      0|      if (!lj_cconv_compatptr(cts, ctp, ca->ct[1], CCF_IGNQUAL))
  ------------------
  |  |   50|      0|#define CCF_IGNQUAL	0x00000008u
  ------------------
  |  Branch (112:11): [True: 0, False: 0]
  ------------------
  113|      0|	return 0;
  114|      0|      if (mm == MM_sub) {  /* Pointer difference. */
  ------------------
  |  Branch (114:11): [True: 0, False: 0]
  ------------------
  115|      0|	intptr_t diff;
  116|      0|	sz = lj_ctype_size(cts, ctype_cid(ctp->info));  /* Element size. */
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  117|      0|	if (sz == 0 || sz == CTSIZE_INVALID)
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (117:6): [True: 0, False: 0]
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|	  return 0;
  119|      0|	diff = ((intptr_t)pp - (intptr_t)pp2) / (int32_t)sz;
  120|       |	/* All valid pointer differences on x64 are in (-2^47, +2^47),
  121|       |	** which fits into a double without loss of precision.
  122|       |	*/
  123|      0|	setintptrV(L->top-1, (int32_t)diff);
  ------------------
  |  |  968|      0|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  124|      0|	return 1;
  125|      0|      } else if (mm == MM_lt) {  /* Pointer comparison (unsigned). */
  ------------------
  |  Branch (125:18): [True: 0, False: 0]
  ------------------
  126|      0|	setboolV(L->top-1, ((uintptr_t)pp < (uintptr_t)pp2));
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  127|      0|	return 1;
  128|      0|      } else {
  129|      0|	lj_assertL(mm == MM_le, "bad metamethod %d", mm);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  130|      0|	setboolV(L->top-1, ((uintptr_t)pp <= (uintptr_t)pp2));
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  131|      0|	return 1;
  132|      0|      }
  133|      0|    }
  134|     87|    if (!((mm == MM_add || mm == MM_sub) && ctype_isnum(ca->ct[1]->info)))
  ------------------
  |  |  201|     12|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|     12|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     12|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 10, False: 2]
  |  |  ------------------
  ------------------
  |  Branch (134:12): [True: 9, False: 78]
  |  Branch (134:28): [True: 3, False: 75]
  ------------------
  135|     77|      return 0;
  136|     10|    lj_cconv_ct_ct(cts, ctype_get(cts, CTID_INT_PSZ), ca->ct[1],
  ------------------
  |  |  319|     10|#define CTID_INT_PSZ	CTID_INT64
  ------------------
  137|     10|		   (uint8_t *)&idx, ca->p[1], 0);
  138|     10|    if (mm == MM_sub) idx = -idx;
  ------------------
  |  Branch (138:9): [True: 3, False: 7]
  ------------------
  139|     48|  } else if (mm == MM_add && ctype_isnum(ctp->info) &&
  ------------------
  |  |  201|     52|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|      4|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      4|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 3, False: 1]
  |  |  ------------------
  ------------------
  |  Branch (139:14): [True: 4, False: 44]
  ------------------
  140|     48|      (ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  203|      6|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      3|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      3|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 1, False: 2]
  |  |  ------------------
  ------------------
                    (ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  232|      2|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|      2|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|      2|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|      2|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|      2|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      2|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 2]
  |  |  ------------------
  ------------------
  141|       |    /* Swap pointer and index. */
  142|      1|    ctp = ca->ct[1]; pp = ca->p[1];
  143|      1|    lj_cconv_ct_ct(cts, ctype_get(cts, CTID_INT_PSZ), ca->ct[0],
  ------------------
  |  |  319|      1|#define CTID_INT_PSZ	CTID_INT64
  ------------------
  144|      1|		   (uint8_t *)&idx, ca->p[0], 0);
  145|     47|  } else {
  146|     47|    return 0;
  147|     47|  }
  148|     11|  sz = lj_ctype_size(cts, ctype_cid(ctp->info));  /* Element size. */
  ------------------
  |  |  190|     11|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|     11|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  149|     11|  if (sz == CTSIZE_INVALID)
  ------------------
  |  |  135|     11|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (149:7): [True: 11, False: 0]
  ------------------
  150|     11|    return 0;
  151|      0|  pp += idx*(int32_t)sz;  /* Compute pointer + index. */
  152|      0|  id = lj_ctype_intern(cts, CTINFO(CT_PTR, CTALIGN_PTR|ctype_cid(ctp->info)),
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  153|      0|		       CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  154|      0|  cd = lj_cdata_new(cts, id, CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  155|      0|  *(uint8_t **)cdataptr(cd) = pp;
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  156|      0|  setcdataV(L, L->top-1, cd);
  157|      0|  lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  158|      0|  return 1;
  159|     11|}
lj_carith.c:lj_carith_meta:
  232|    187|{
  233|    187|  cTValue *tv = NULL;
  234|    187|  if (tviscdata(L->base)) {
  ------------------
  |  |  799|    187|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    187|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    187|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 38, False: 149]
  |  |  ------------------
  ------------------
  235|     38|    CTypeID id = cdataV(L->base)->ctypeid;
  ------------------
  |  |  863|     38|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|     38|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     38|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     38|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 38, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     38|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  236|      0|    CType *ct = ctype_raw(cts, id);
  237|     38|    if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  203|     38|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|     38|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     38|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 38]
  |  |  ------------------
  ------------------
                  if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  238|     38|    tv = lj_ctype_meta(cts, id, mm);
  239|     38|  }
  240|    187|  if (!tv && L->base+1 < L->top && tviscdata(L->base+1)) {
  ------------------
  |  |  799|    187|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    187|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    187|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 152, False: 35]
  |  |  ------------------
  ------------------
  |  Branch (240:7): [True: 187, False: 0]
  |  Branch (240:14): [True: 187, False: 0]
  ------------------
  241|    152|    CTypeID id = cdataV(L->base+1)->ctypeid;
  ------------------
  |  |  863|    152|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|    152|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    152|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    152|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 152, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    152|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|      0|    CType *ct = ctype_raw(cts, id);
  243|    152|    if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  203|    152|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|    152|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    152|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 152]
  |  |  ------------------
  ------------------
                  if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  244|    152|    tv = lj_ctype_meta(cts, id, mm);
  245|    152|  }
  246|    187|  if (!tv) {
  ------------------
  |  Branch (246:7): [True: 187, False: 0]
  ------------------
  247|    187|    const char *repr[2];
  248|    187|    int i, isenum = -1, isstr = -1;
  249|    187|    if (mm == MM_eq) {  /* Equality checks never raise an error. */
  ------------------
  |  Branch (249:9): [True: 64, False: 123]
  ------------------
  250|     64|      int eq = ca->p[0] == ca->p[1];
  251|     64|      setboolV(L->top-1, eq);
  ------------------
  |  |  874|     64|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  252|     64|      setboolV(&G(L)->tmptv2, eq);  /* Remember for trace recorder. */
  ------------------
  |  |  874|     64|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  253|     64|      return 1;
  254|     64|    }
  255|    369|    for (i = 0; i < 2; i++) {
  ------------------
  |  Branch (255:17): [True: 246, False: 123]
  ------------------
  256|    246|      if (ca->ct[i] && tviscdata(L->base+i)) {
  ------------------
  |  |  799|    225|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    225|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    225|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 126, False: 99]
  |  |  ------------------
  ------------------
  |  Branch (256:11): [True: 225, False: 21]
  ------------------
  257|    126|	if (ctype_isenum(ca->ct[i]->info)) isenum = i;
  ------------------
  |  |  207|    126|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|    126|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    126|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 126]
  |  |  ------------------
  ------------------
  258|    126|	repr[i] = strdata(lj_ctype_repr(L, ctype_typeid(cts, ca->ct[i]), NULL));
  ------------------
  |  |  316|    126|#define strdata(s)	((const char *)((s)+1))
  ------------------
  259|    126|      } else {
  260|    120|	if (tvisstr(&L->base[i])) isstr = i;
  ------------------
  |  |  795|    120|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    120|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    120|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 12, False: 108]
  |  |  ------------------
  ------------------
  261|    120|	repr[i] = lj_typename(&L->base[i]);
  ------------------
  |  | 1042|    120|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|    120|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|    120|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    120|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|    120|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|    120|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 36, False: 84]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     36|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     84|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  262|    120|      }
  263|    246|    }
  264|    123|    if ((isenum ^ isstr) == 1)
  ------------------
  |  Branch (264:9): [True: 0, False: 123]
  ------------------
  265|      0|      lj_err_callerv(L, LJ_ERR_FFI_BADCONV, repr[isstr], repr[isenum]);
  266|    123|    lj_err_callerv(L, mm == MM_len ? LJ_ERR_FFI_BADLEN :
  ------------------
  |  Branch (266:23): [True: 1, False: 122]
  ------------------
  267|    123|		      mm == MM_concat ? LJ_ERR_FFI_BADCONCAT :
  ------------------
  |  Branch (267:9): [True: 12, False: 110]
  ------------------
  268|    122|		      mm < MM_add ? LJ_ERR_FFI_BADCOMP : LJ_ERR_FFI_BADARITH,
  ------------------
  |  Branch (268:9): [True: 67, False: 43]
  ------------------
  269|    123|		   repr[0], repr[1]);
  270|    123|  }
  271|      0|  return lj_meta_tailcall(L, tv);
  272|    187|}

lj_ccall_func:
 1172|      6|{
 1173|      6|  CTState *cts = ctype_cts(L);
 1174|      6|  CType *ct = ctype_raw(cts, cd->ctypeid);
 1175|      6|  CTSize sz = CTSIZE_PTR;
  ------------------
  |  |  250|      6|#define CTSIZE_PTR	8
  ------------------
 1176|      6|  if (ctype_isptr(ct->info)) {
  ------------------
  |  |  203|      6|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      6|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      6|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 1177|      0|    sz = ct->size;
 1178|      0|    ct = ctype_rawchild(cts, ct);
 1179|      0|  }
 1180|      6|  if (ctype_isfunc(ct->info)) {
  ------------------
  |  |  206|      6|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|      6|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      6|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 6]
  |  |  ------------------
  ------------------
 1181|      0|    CCallState cc;
 1182|      0|    int gcsteps, ret;
 1183|      0|    cc.func = (void (*)(void))cdata_getptr(cdataptr(cd), sz);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
 1184|      0|    gcsteps = ccall_set_args(L, cts, ct, &cc);
 1185|      0|    ct = (CType *)((intptr_t)ct-(intptr_t)cts->tab);
 1186|      0|    cts->cb.slot = ~0u;
 1187|      0|    lj_vm_ffi_call(&cc);
 1188|      0|    if (cts->cb.slot != ~0u) {  /* Blacklist function that called a callback. */
  ------------------
  |  Branch (1188:9): [True: 0, False: 0]
  ------------------
 1189|      0|      TValue tv;
 1190|      0|      tv.u64 = ((uintptr_t)(void *)cc.func >> 2) | U64x(800000000, 00000000);
  ------------------
  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
 1191|      0|      setboolV(lj_tab_set(L, cts->miscmap, &tv), 1);
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
 1192|      0|    }
 1193|      0|    ct = (CType *)((intptr_t)ct+(intptr_t)cts->tab);  /* May be reallocated. */
 1194|      0|    gcsteps += ccall_get_results(L, cts, ct, &cc, &ret);
 1195|       |#if LJ_TARGET_X86 && LJ_ABI_WIN
 1196|       |    /* Automatically detect __stdcall and fix up C function declaration. */
 1197|       |    if (cc.spadj && ctype_cconv(ct->info) == CTCC_CDECL) {
 1198|       |      CTF_INSERT(ct->info, CCONV, CTCC_STDCALL);
 1199|       |      lj_trace_abort(G(L));
 1200|       |    }
 1201|       |#endif
 1202|      0|    while (gcsteps-- > 0)
  ------------------
  |  Branch (1202:12): [True: 0, False: 0]
  ------------------
 1203|      0|      lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
 1204|      0|    return ret;
 1205|      0|  }
 1206|      6|  return -1;  /* Not a function. */
 1207|      6|}

lj_ccallback_mcode_free:
  305|    509|{
  306|    509|  size_t sz = (size_t)CALLBACK_MCODE_SIZE;
  ------------------
  |  |   26|    509|#define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |  648|    509|#define LJ_PAGESIZE		4096
  |  |  ------------------
  |  |               #define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |   74|    509|#define LJ_NUM_CBPAGE	1		/* Number of FFI callback pages. */
  |  |  ------------------
  ------------------
  307|    509|  void *p = cts->cb.mcode;
  308|    509|  if (p == NULL) return;
  ------------------
  |  Branch (308:7): [True: 509, False: 0]
  ------------------
  309|       |#if LJ_TARGET_WINDOWS
  310|       |  VirtualFree(p, 0, MEM_RELEASE);
  311|       |  UNUSED(sz);
  312|       |#elif LJ_TARGET_POSIX
  313|      0|  munmap(p, sz);
  314|       |#else
  315|       |  lj_mem_free(cts->g, p, sz);
  316|       |#endif
  317|      0|}

lj_cconv_ct_ct:
  121|  1.29k|{
  122|  1.29k|  CTSize dsize = d->size, ssize = s->size;
  123|  1.29k|  CTInfo dinfo = d->info, sinfo = s->info;
  124|  1.29k|  void *tmpptr;
  125|       |
  126|  1.29k|  lj_assertCTS(!ctype_isenum(dinfo) && !ctype_isenum(sinfo),
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  127|  1.29k|	       "unresolved enum");
  128|  1.29k|  lj_assertCTS(!ctype_isattrib(dinfo) && !ctype_isattrib(sinfo),
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  129|  1.29k|	       "unstripped attribute");
  130|       |
  131|  1.29k|  if (ctype_type(dinfo) > CT_MAYCONVERT || ctype_type(sinfo) > CT_MAYCONVERT)
  ------------------
  |  |  189|  1.29k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  1.29k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                if (ctype_type(dinfo) > CT_MAYCONVERT || ctype_type(sinfo) > CT_MAYCONVERT)
  ------------------
  |  |  189|  1.29k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  1.29k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (131:7): [True: 0, False: 1.29k]
  |  Branch (131:44): [True: 0, False: 1.29k]
  ------------------
  132|      0|    goto err_conv;
  133|       |
  134|       |  /* Some basic sanity checks. */
  135|  1.29k|  lj_assertCTS(!ctype_isnum(dinfo) || dsize > 0, "bad size for number type");
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 1.29k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|  1.29k|  lj_assertCTS(!ctype_isnum(sinfo) || ssize > 0, "bad size for number type");
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 1.29k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  137|  1.29k|  lj_assertCTS(!ctype_isbool(dinfo) || dsize == 1 || dsize == 4,
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|  1.29k|	       "bad size for bool type");
  139|  1.29k|  lj_assertCTS(!ctype_isbool(sinfo) || ssize == 1 || ssize == 4,
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  140|  1.29k|	       "bad size for bool type");
  141|  1.29k|  lj_assertCTS(!ctype_isinteger(dinfo) || (1u<<lj_fls(dsize)) == dsize,
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 1.29k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|  1.29k|	       "bad size for integer type");
  143|  1.29k|  lj_assertCTS(!ctype_isinteger(sinfo) || (1u<<lj_fls(ssize)) == ssize,
  ------------------
  |  |  263|  1.29k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.08k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 499, False: 795]
  |  |  |  |  |  |  |  Branch (355:5): [True: 795, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|  1.29k|	       "bad size for integer type");
  145|       |
  146|  1.29k|  switch (cconv_idx2(dinfo, sinfo)) {
  ------------------
  |  |   42|  1.29k|  ((cconv_idx((dinfo)) << 3) + cconv_idx((sinfo)))
  ------------------
  147|       |  /* Destination is a bool. */
  148|      0|  case CCX(B, B):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (148:3): [True: 0, False: 1.29k]
  ------------------
  149|       |    /* Source operand is already normalized. */
  150|      0|    if (dsize == 1) *dp = *sp; else *(int *)dp = *sp;
  ------------------
  |  Branch (150:9): [True: 0, False: 0]
  ------------------
  151|      0|    break;
  152|      0|  case CCX(B, I): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (152:3): [True: 0, False: 1.29k]
  ------------------
  153|      0|    MSize i;
  154|      0|    uint8_t b = 0;
  155|      0|    for (i = 0; i < ssize; i++) b |= sp[i];
  ------------------
  |  Branch (155:17): [True: 0, False: 0]
  ------------------
  156|      0|    b = (b != 0);
  157|      0|    if (dsize == 1) *dp = b; else *(int *)dp = b;
  ------------------
  |  Branch (157:9): [True: 0, False: 0]
  ------------------
  158|      0|    break;
  159|      0|    }
  160|      0|  case CCX(B, F): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (160:3): [True: 0, False: 1.29k]
  ------------------
  161|      0|    uint8_t b;
  162|      0|    if (ssize == sizeof(double)) b = (*(double *)sp != 0);
  ------------------
  |  Branch (162:9): [True: 0, False: 0]
  ------------------
  163|      0|    else if (ssize == sizeof(float)) b = (*(float *)sp != 0);
  ------------------
  |  Branch (163:14): [True: 0, False: 0]
  ------------------
  164|      0|    else goto err_conv;  /* NYI: long double. */
  165|      0|    if (dsize == 1) *dp = b; else *(int *)dp = b;
  ------------------
  |  Branch (165:9): [True: 0, False: 0]
  ------------------
  166|      0|    break;
  167|      0|    }
  168|       |
  169|       |  /* Destination is an integer. */
  170|      0|  case CCX(I, B):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (170:3): [True: 0, False: 1.29k]
  ------------------
  171|    795|  case CCX(I, I):
  ------------------
  |  |   44|    795|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (171:3): [True: 795, False: 499]
  ------------------
  172|    795|  conv_I_I:
  173|    795|    if (dsize > ssize) {  /* Zero-extend or sign-extend LSB. */
  ------------------
  |  Branch (173:9): [True: 0, False: 795]
  ------------------
  174|      0|#if LJ_LE
  175|      0|      uint8_t fill = (!(sinfo & CTF_UNSIGNED) && (sp[ssize-1]&0x80)) ? 0xff : 0;
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (175:23): [True: 0, False: 0]
  |  Branch (175:50): [True: 0, False: 0]
  ------------------
  176|      0|      memcpy(dp, sp, ssize);
  177|      0|      memset(dp + ssize, fill, dsize-ssize);
  178|       |#else
  179|       |      uint8_t fill = (!(sinfo & CTF_UNSIGNED) && (sp[0]&0x80)) ? 0xff : 0;
  180|       |      memset(dp, fill, dsize-ssize);
  181|       |      memcpy(dp + (dsize-ssize), sp, ssize);
  182|       |#endif
  183|    795|    } else {  /* Copy LSB. */
  184|    795|#if LJ_LE
  185|    795|      memcpy(dp, sp, dsize);
  186|       |#else
  187|       |      memcpy(dp, sp + (ssize-dsize), dsize);
  188|       |#endif
  189|    795|    }
  190|    795|    break;
  191|    499|  case CCX(I, F): {
  ------------------
  |  |   44|    499|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (191:3): [True: 499, False: 795]
  ------------------
  192|    499|    double n;  /* Always convert via double. */
  193|    499|  conv_I_F:
  194|       |    /* Convert source to double. */
  195|    499|    if (ssize == sizeof(double)) n = *(double *)sp;
  ------------------
  |  Branch (195:9): [True: 499, False: 0]
  ------------------
  196|      0|    else if (ssize == sizeof(float)) n = (double)*(float *)sp;
  ------------------
  |  Branch (196:14): [True: 0, False: 0]
  ------------------
  197|      0|    else goto err_conv;  /* NYI: long double. */
  198|       |    /* Then convert double to integer. */
  199|       |    /* The conversion must exactly match the semantics of JIT-compiled code! */
  200|    499|    if (dsize < 4 || (dsize == 4 && !(dinfo & CTF_UNSIGNED))) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (200:9): [True: 0, False: 499]
  |  Branch (200:23): [True: 0, False: 499]
  |  Branch (200:37): [True: 0, False: 0]
  ------------------
  201|      0|      int32_t i = (int32_t)n;
  202|      0|      if (dsize == 4) *(int32_t *)dp = i;
  ------------------
  |  Branch (202:11): [True: 0, False: 0]
  ------------------
  203|      0|      else if (dsize == 2) *(int16_t *)dp = (int16_t)i;
  ------------------
  |  Branch (203:16): [True: 0, False: 0]
  ------------------
  204|      0|      else *(int8_t *)dp = (int8_t)i;
  205|    499|    } else if (dsize == 4) {
  ------------------
  |  Branch (205:16): [True: 0, False: 499]
  ------------------
  206|      0|      *(uint32_t *)dp = (uint32_t)n;
  207|    499|    } else if (dsize == 8) {
  ------------------
  |  Branch (207:16): [True: 499, False: 0]
  ------------------
  208|    499|      if (!(dinfo & CTF_UNSIGNED))
  ------------------
  |  |   68|    499|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (208:11): [True: 384, False: 115]
  ------------------
  209|    384|	*(int64_t *)dp = (int64_t)n;
  210|    115|      else
  211|    115|	*(uint64_t *)dp = lj_num2u64(n);
  212|    499|    } else {
  213|      0|      goto err_conv;  /* NYI: conversion to >64 bit integers. */
  214|      0|    }
  215|    499|    break;
  216|    499|    }
  217|    499|  case CCX(I, C):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (217:3): [True: 0, False: 1.29k]
  ------------------
  218|      0|    s = ctype_child(cts, s);
  219|      0|    sinfo = s->info;
  220|      0|    ssize = s->size;
  221|      0|    goto conv_I_F;  /* Just convert re. */
  222|      0|  case CCX(I, P):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (222:3): [True: 0, False: 1.29k]
  ------------------
  223|      0|    if (!(flags & CCF_CAST)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
  |  Branch (223:9): [True: 0, False: 0]
  ------------------
  224|      0|    sinfo = CTINFO(CT_NUM, CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  225|      0|    goto conv_I_I;
  226|      0|  case CCX(I, A):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (226:3): [True: 0, False: 1.29k]
  ------------------
  227|      0|    if (!(flags & CCF_CAST)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
  |  Branch (227:9): [True: 0, False: 0]
  ------------------
  228|      0|    sinfo = CTINFO(CT_NUM, CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  229|      0|    ssize = CTSIZE_PTR;
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  230|      0|    tmpptr = sp;
  231|      0|    sp = (uint8_t *)&tmpptr;
  232|      0|    goto conv_I_I;
  233|       |
  234|       |  /* Destination is a floating-point number. */
  235|      0|  case CCX(F, B):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (235:3): [True: 0, False: 1.29k]
  ------------------
  236|      0|  case CCX(F, I): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (236:3): [True: 0, False: 1.29k]
  ------------------
  237|      0|    double n;  /* Always convert via double. */
  238|      0|  conv_F_I:
  239|       |    /* First convert source to double. */
  240|       |    /* The conversion must exactly match the semantics of JIT-compiled code! */
  241|      0|    if (ssize < 4 || (ssize == 4 && !(sinfo & CTF_UNSIGNED))) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (241:9): [True: 0, False: 0]
  |  Branch (241:23): [True: 0, False: 0]
  |  Branch (241:37): [True: 0, False: 0]
  ------------------
  242|      0|      int32_t i;
  243|      0|      if (ssize == 4) {
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|	i = *(int32_t *)sp;
  245|      0|      } else if (!(sinfo & CTF_UNSIGNED)) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (245:18): [True: 0, False: 0]
  ------------------
  246|      0|	if (ssize == 2) i = *(int16_t *)sp;
  ------------------
  |  Branch (246:6): [True: 0, False: 0]
  ------------------
  247|      0|	else i = *(int8_t *)sp;
  248|      0|      } else {
  249|      0|	if (ssize == 2) i = *(uint16_t *)sp;
  ------------------
  |  Branch (249:6): [True: 0, False: 0]
  ------------------
  250|      0|	else i = *(uint8_t *)sp;
  251|      0|      }
  252|      0|      n = (double)i;
  253|      0|    } else if (ssize == 4) {
  ------------------
  |  Branch (253:16): [True: 0, False: 0]
  ------------------
  254|      0|      n = (double)*(uint32_t *)sp;
  255|      0|    } else if (ssize == 8) {
  ------------------
  |  Branch (255:16): [True: 0, False: 0]
  ------------------
  256|      0|      if (!(sinfo & CTF_UNSIGNED)) n = (double)*(int64_t *)sp;
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|      else n = (double)*(uint64_t *)sp;
  258|      0|    } else {
  259|      0|      goto err_conv;  /* NYI: conversion from >64 bit integers. */
  260|      0|    }
  261|       |    /* Convert double to destination. */
  262|      0|    if (dsize == sizeof(double)) *(double *)dp = n;
  ------------------
  |  Branch (262:9): [True: 0, False: 0]
  ------------------
  263|      0|    else if (dsize == sizeof(float)) *(float *)dp = (float)n;
  ------------------
  |  Branch (263:14): [True: 0, False: 0]
  ------------------
  264|      0|    else goto err_conv;  /* NYI: long double. */
  265|      0|    break;
  266|      0|    }
  267|      0|  case CCX(F, F): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (267:3): [True: 0, False: 1.29k]
  ------------------
  268|      0|    double n;  /* Always convert via double. */
  269|      0|  conv_F_F:
  270|      0|    if (ssize == dsize) goto copyval;
  ------------------
  |  Branch (270:9): [True: 0, False: 0]
  ------------------
  271|       |    /* Convert source to double. */
  272|      0|    if (ssize == sizeof(double)) n = *(double *)sp;
  ------------------
  |  Branch (272:9): [True: 0, False: 0]
  ------------------
  273|      0|    else if (ssize == sizeof(float)) n = (double)*(float *)sp;
  ------------------
  |  Branch (273:14): [True: 0, False: 0]
  ------------------
  274|      0|    else goto err_conv;  /* NYI: long double. */
  275|       |    /* Convert double to destination. */
  276|      0|    if (dsize == sizeof(double)) *(double *)dp = n;
  ------------------
  |  Branch (276:9): [True: 0, False: 0]
  ------------------
  277|      0|    else if (dsize == sizeof(float)) *(float *)dp = (float)n;
  ------------------
  |  Branch (277:14): [True: 0, False: 0]
  ------------------
  278|      0|    else goto err_conv;  /* NYI: long double. */
  279|      0|    break;
  280|      0|    }
  281|      0|  case CCX(F, C):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (281:3): [True: 0, False: 1.29k]
  ------------------
  282|      0|    s = ctype_child(cts, s);
  283|      0|    sinfo = s->info;
  284|      0|    ssize = s->size;
  285|      0|    goto conv_F_F;  /* Ignore im, and convert from re. */
  286|       |
  287|       |  /* Destination is a complex number. */
  288|      0|  case CCX(C, I):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (288:3): [True: 0, False: 1.29k]
  ------------------
  289|      0|    d = ctype_child(cts, d);
  290|      0|    dinfo = d->info;
  291|      0|    dsize = d->size;
  292|      0|    memset(dp + dsize, 0, dsize);  /* Clear im. */
  293|      0|    goto conv_F_I;  /* Convert to re. */
  294|      0|  case CCX(C, F):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (294:3): [True: 0, False: 1.29k]
  ------------------
  295|      0|    d = ctype_child(cts, d);
  296|      0|    dinfo = d->info;
  297|      0|    dsize = d->size;
  298|      0|    memset(dp + dsize, 0, dsize);  /* Clear im. */
  299|      0|    goto conv_F_F;  /* Convert to re. */
  300|       |
  301|      0|  case CCX(C, C):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (301:3): [True: 0, False: 1.29k]
  ------------------
  302|      0|    if (dsize != ssize) {  /* Different types: convert re/im separately. */
  ------------------
  |  Branch (302:9): [True: 0, False: 0]
  ------------------
  303|      0|      CType *dc = ctype_child(cts, d);
  304|      0|      CType *sc = ctype_child(cts, s);
  305|      0|      lj_cconv_ct_ct(cts, dc, sc, dp, sp, flags);
  306|      0|      lj_cconv_ct_ct(cts, dc, sc, dp + dc->size, sp + sc->size, flags);
  307|      0|      return;
  308|      0|    }
  309|      0|    goto copyval;  /* Otherwise this is easy. */
  310|       |
  311|       |  /* Destination is a vector. */
  312|      0|  case CCX(V, I):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (312:3): [True: 0, False: 1.29k]
  ------------------
  313|      0|  case CCX(V, F):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (313:3): [True: 0, False: 1.29k]
  ------------------
  314|      0|  case CCX(V, C): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (314:3): [True: 0, False: 1.29k]
  ------------------
  315|      0|    CType *dc = ctype_child(cts, d);
  316|      0|    CTSize esize;
  317|       |    /* First convert the scalar to the first element. */
  318|      0|    lj_cconv_ct_ct(cts, dc, s, dp, sp, flags);
  319|       |    /* Then replicate it to the other elements (splat). */
  320|      0|    for (sp = dp, esize = dc->size; dsize > esize; dsize -= esize) {
  ------------------
  |  Branch (320:37): [True: 0, False: 0]
  ------------------
  321|      0|      dp += esize;
  322|      0|      memcpy(dp, sp, esize);
  323|      0|    }
  324|      0|    break;
  325|      0|    }
  326|       |
  327|      0|  case CCX(V, V):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (327:3): [True: 0, False: 1.29k]
  ------------------
  328|       |    /* Copy same-sized vectors, even for different lengths/element-types. */
  329|      0|    if (dsize != ssize) goto err_conv;
  ------------------
  |  Branch (329:9): [True: 0, False: 0]
  ------------------
  330|      0|    goto copyval;
  331|       |
  332|       |  /* Destination is a pointer. */
  333|      0|  case CCX(P, I):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (333:3): [True: 0, False: 1.29k]
  ------------------
  334|      0|    if (!(flags & CCF_CAST)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|    dinfo = CTINFO(CT_NUM, CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  336|      0|    goto conv_I_I;
  337|       |
  338|      0|  case CCX(P, F):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (338:3): [True: 0, False: 1.29k]
  ------------------
  339|      0|    if (!(flags & CCF_CAST) || !(flags & CCF_FROMTV)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
                  if (!(flags & CCF_CAST) || !(flags & CCF_FROMTV)) goto err_conv;
  ------------------
  |  |   48|      0|#define CCF_FROMTV	0x00000002u
  ------------------
  |  Branch (339:9): [True: 0, False: 0]
  |  Branch (339:32): [True: 0, False: 0]
  ------------------
  340|       |    /* The signed conversion is cheaper. x64 really has 47 bit pointers. */
  341|      0|    dinfo = CTINFO(CT_NUM, (LJ_64 && dsize == 8) ? 0 : CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  |  |  |  Branch (185:61): [Folded - Ignored]
  |  |  |  Branch (185:61): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  342|      0|    goto conv_I_F;
  343|       |
  344|      0|  case CCX(P, P):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (344:3): [True: 0, False: 1.29k]
  ------------------
  345|      0|    if (!lj_cconv_compatptr(cts, d, s, flags)) goto err_conv;
  ------------------
  |  Branch (345:9): [True: 0, False: 0]
  ------------------
  346|      0|    cdata_setptr(dp, dsize, cdata_getptr(sp, ssize));
  347|      0|    break;
  348|       |
  349|      0|  case CCX(P, A):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (349:3): [True: 0, False: 1.29k]
  ------------------
  350|      0|  case CCX(P, S):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (350:3): [True: 0, False: 1.29k]
  ------------------
  351|      0|    if (!lj_cconv_compatptr(cts, d, s, flags)) goto err_conv;
  ------------------
  |  Branch (351:9): [True: 0, False: 0]
  ------------------
  352|      0|    cdata_setptr(dp, dsize, sp);
  353|      0|    break;
  354|       |
  355|       |  /* Destination is an array. */
  356|      0|  case CCX(A, A):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (356:3): [True: 0, False: 1.29k]
  ------------------
  357|      0|    if ((flags & CCF_CAST) || (d->info & CTF_VLA) || dsize != ssize ||
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
                  if ((flags & CCF_CAST) || (d->info & CTF_VLA) || dsize != ssize ||
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (357:9): [True: 0, False: 0]
  |  Branch (357:31): [True: 0, False: 0]
  |  Branch (357:54): [True: 0, False: 0]
  ------------------
  358|      0|	d->size == CTSIZE_INVALID || !lj_cconv_compatptr(cts, d, s, flags))
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (358:2): [True: 0, False: 0]
  |  Branch (358:31): [True: 0, False: 0]
  ------------------
  359|      0|      goto err_conv;
  360|      0|    goto copyval;
  361|       |
  362|       |  /* Destination is a struct/union. */
  363|      0|  case CCX(S, S):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (363:3): [True: 0, False: 1.29k]
  ------------------
  364|      0|    if ((flags & CCF_CAST) || (d->info & CTF_VLA) || d != s)
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
                  if ((flags & CCF_CAST) || (d->info & CTF_VLA) || d != s)
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (364:9): [True: 0, False: 0]
  |  Branch (364:31): [True: 0, False: 0]
  |  Branch (364:54): [True: 0, False: 0]
  ------------------
  365|      0|      goto err_conv;  /* Must be exact same type. */
  366|      0|copyval:  /* Copy value. */
  367|      0|    lj_assertCTS(dsize == ssize, "value copy with different sizes");
  ------------------
  |  |  263|      0|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  368|      0|    memcpy(dp, sp, dsize);
  369|      0|    break;
  370|       |
  371|      0|  default:
  ------------------
  |  Branch (371:3): [True: 0, False: 1.29k]
  ------------------
  372|      0|  err_conv:
  373|      0|    cconv_err_conv(cts, d, s, flags);
  374|  1.29k|  }
  375|  1.29k|}

lj_cconv.c:cconv_idx:
   28|  2.58k|{
   29|  2.58k|  uint32_t idx = ((info >> 26) & 15u);  /* Dispatch bits. */
   30|  2.58k|  lj_assertX(ctype_type(info) <= CT_MAYCONVERT,
  ------------------
  |  |  366|  2.58k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.58k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.58k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   31|  2.58k|	     "cannot convert ctype %08x", info);
   32|  2.58k|#if LJ_64
   33|  2.58k|  idx = ((uint32_t)(U64x(f436fff5,fff7f021) >> 4*idx) & 15u);
  ------------------
  |  |   94|  2.58k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   34|       |#else
   35|       |  idx = (((idx < 8 ? 0xfff7f021u : 0xf436fff5) >> 4*(idx & 7u)) & 15u);
   36|       |#endif
   37|  2.58k|  lj_assertX(idx < 8, "cannot convert ctype %08x", info);
  ------------------
  |  |  366|  2.58k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.58k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.58k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.58k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   38|  2.58k|  return idx;
   39|  2.58k|}

lj_cdata_free:
   63|  7.89k|{
   64|  7.89k|  if (LJ_UNLIKELY(cd->marked & LJ_GC_CDATA_FIN)) {
  ------------------
  |  |  146|  7.89k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
   65|      0|    GCobj *root;
   66|      0|    makewhite(g, obj2gco(cd));
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    markfinalized(obj2gco(cd));
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
   68|      0|    if ((root = gcref(g->gc.mmudata)) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (68:9): [True: 0, False: 0]
  ------------------
   69|      0|      setgcrefr(cd->nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   70|      0|      setgcref(root->gch.nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   71|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   72|      0|    } else {
   73|      0|      setgcref(cd->nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   74|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   75|      0|    }
   76|  7.89k|  } else if (LJ_LIKELY(!cdataisv(cd))) {
  ------------------
  |  |  145|  7.89k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 7.89k, False: 0]
  |  |  ------------------
  ------------------
   77|  7.89k|    CType *ct = ctype_raw(ctype_ctsG(g), cd->ctypeid);
  ------------------
  |  |  384|  7.89k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  7.89k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   78|  7.89k|    CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  214|  7.89k|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|  7.89k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  7.89k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (214:29): [True: 7.89k, False: 0]
  |  |  ------------------
  ------------------
                  CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
   79|  7.89k|    lj_assertG(ctype_hassize(ct->info) || ctype_isfunc(ct->info) ||
  ------------------
  |  |  364|  7.89k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  15.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 7.89k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.89k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   80|  7.89k|	       ctype_isextern(ct->info), "free of ctype without a size");
   81|  7.89k|    lj_mem_free(g, cd, sizeof(GCcdata) + sz);
   82|  7.89k|  } else {
   83|      0|    lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  365|      0|#define memcdatav(cd)	((void *)((char *)(cd) - cdatav(cd)->offset))
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
                  lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  364|      0|#define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  363|      0|#define cdatavlen(cd)	check_exp(cdataisv(cd), cdatav(cd)->len)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
   84|      0|  }
   85|  7.89k|}

lj_lex.c:lj_cdata_new_:
   54|  7.30k|{
   55|  7.30k|  GCcdata *cd = (GCcdata *)lj_mem_newgco(L, sizeof(GCcdata) + sz);
   56|  7.30k|  cd->gct = ~LJ_TCDATA;
  ------------------
  |  |  270|  7.30k|#define LJ_TCDATA		(~10u)
  ------------------
   57|  7.30k|  cd->ctypeid = id;
   58|  7.30k|  return cd;
   59|  7.30k|}
lj_carith.c:lj_cdata_new:
   39|    593|{
   40|    593|  GCcdata *cd;
   41|    593|#ifdef LUA_USE_ASSERT
   42|    593|  CType *ct = ctype_raw(cts, id);
   43|    593|  lj_assertCTS((ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR) == sz,
  ------------------
  |  |  263|    593|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    593|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.18k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 593, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 593, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    593|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   44|    593|	       "inconsistent size of fixed-size cdata alloc");
   45|    593|#endif
   46|    593|  cd = (GCcdata *)lj_mem_newgco(cts->L, sizeof(GCcdata) + sz);
   47|    593|  cd->gct = ~LJ_TCDATA;
  ------------------
  |  |  270|    593|#define LJ_TCDATA		(~10u)
  ------------------
   48|    593|  cd->ctypeid = ctype_check(cts, id);
   49|    593|  return cd;
   50|    593|}

lj_clib_unload:
  422|    509|{
  423|    509|  clib_unloadlib(cl);
  424|    509|  cl->handle = NULL;
  425|    509|}
lj_clib_default:
  429|    509|{
  430|    509|  CLibrary *cl = clib_new(L, mt);
  431|    509|  cl->handle = CLIB_DEFHANDLE;
  ------------------
  |  |   33|    509|#define CLIB_DEFHANDLE	NULL
  ------------------
  432|    509|}
lj_clib.c:clib_new:
  400|    509|{
  401|    509|  GCtab *t = lj_tab_new(L, 0, 0);
  402|    509|  GCudata *ud = lj_udata_new(L, sizeof(CLibrary), t);
  403|    509|  CLibrary *cl = (CLibrary *)uddata(ud);
  ------------------
  |  |  342|    509|#define uddata(u)	((void *)((u)+1))
  ------------------
  404|    509|  cl->cache = t;
  405|    509|  ud->udtype = UDTYPE_FFI_CLIB;
  406|       |  /* NOBARRIER: The GCudata is new (marked white). */
  407|    509|  setgcref(ud->metatable, obj2gco(mt));
  ------------------
  |  |   72|    509|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  408|    509|  setudataV(L, L->top++, ud);
  409|    509|  return cl;
  410|    509|}
lj_clib.c:clib_unloadlib:
  135|    509|{
  136|    509|  if (cl->handle && cl->handle != CLIB_DEFHANDLE)
  ------------------
  |  |   33|      0|#define CLIB_DEFHANDLE	NULL
  ------------------
  |  Branch (136:7): [True: 0, False: 509]
  |  Branch (136:21): [True: 0, False: 0]
  ------------------
  137|      0|    dlclose(cl->handle);
  138|    509|}

lj_ctype_addname:
  229|  37.6k|{
  230|  37.6k|  uint32_t h = ct_hashname(gcref(ct->name));
  ------------------
  |  |  149|  37.6k|  (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|  37.6k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|  37.6k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   12|  37.6k|#define HASH_BIAS	(-0x04c11db7)
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|  37.6k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|  37.6k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|  37.6k|  ct->next = cts->hash[h];
  232|  37.6k|  cts->hash[h] = (CTypeID1)id;
  233|  37.6k|}
lj_ctype_size:
  293|     11|{
  294|     11|  CType *ct = ctype_raw(cts, id);
  295|     11|  return ctype_hassize(ct->info) ? ct->size : CTSIZE_INVALID;
  ------------------
  |  |  214|     11|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|     11|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     11|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (214:29): [True: 11, False: 0]
  |  |  ------------------
  ------------------
                return ctype_hassize(ct->info) ? ct->size : CTSIZE_INVALID;
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  296|     11|}
lj_ctype_meta:
  358|    196|{
  359|    196|  CType *ct = ctype_get(cts, id);
  360|    196|  cTValue *tv;
  361|    196|  while (ctype_isattrib(ct->info) || ctype_isref(ct->info)) {
  ------------------
  |  |  209|    392|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|    196|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    196|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 196]
  |  |  ------------------
  ------------------
                while (ctype_isattrib(ct->info) || ctype_isref(ct->info)) {
  ------------------
  |  |  229|    196|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|    196|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|    196|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|    196|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    196|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 196]
  |  |  ------------------
  ------------------
  362|      0|    id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  363|      0|    ct = ctype_get(cts, id);
  364|      0|  }
  365|    196|  if (ctype_isptr(ct->info) &&
  ------------------
  |  |  203|    392|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|    196|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    196|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 196]
  |  |  ------------------
  ------------------
  366|    196|      ctype_isfunc(ctype_get(cts, ctype_cid(ct->info))->info))
  ------------------
  |  |  206|      0|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|      0|    tv = lj_tab_getstr(cts->miscmap, &cts->g->strempty);
  368|    196|  else
  369|    196|    tv = lj_tab_getinth(cts->miscmap, -(int32_t)id);
  370|    196|  if (tv && tvistab(tv) &&
  ------------------
  |  |  800|    196|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (370:7): [True: 0, False: 196]
  ------------------
  371|    196|      (tv = lj_tab_getstr(tabV(tv), mmname_str(cts->g, mm))) && !tvisnil(tv))
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    (tv = lj_tab_getstr(tabV(tv), mmname_str(cts->g, mm))) && !tvisnil(tv))
  ------------------
  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    (tv = lj_tab_getstr(tabV(tv), mmname_str(cts->g, mm))) && !tvisnil(tv))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (371:7): [True: 0, False: 0]
  |  Branch (371:65): [True: 0, False: 0]
  ------------------
  372|      0|    return tv;
  373|    196|  return NULL;
  374|    196|}
lj_ctype_repr:
  561|    132|{
  562|    132|  global_State *g = G(L);
  ------------------
  |  |  705|    132|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    132|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  563|    132|  CTRepr ctr;
  564|    132|  ctr.pb = ctr.pe = &ctr.buf[CTREPR_MAX/2];
  ------------------
  |  |  379|    132|#define CTREPR_MAX		512
  ------------------
  565|    132|  ctr.cts = ctype_ctsG(g);
  ------------------
  |  |  384|    132|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|    132|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  566|    132|  ctr.L = L;
  567|    132|  ctr.ok = 1;
  568|    132|  ctr.needsp = 0;
  569|    132|  if (name) ctype_prepstr(&ctr, strdata(name), name->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (569:7): [True: 0, False: 132]
  ------------------
  570|    132|  ctype_repr(&ctr, id);
  571|    132|  if (LJ_UNLIKELY(!ctr.ok)) return lj_str_newlit(L, "?");
  ------------------
  |  |  146|    132|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 132]
  |  |  ------------------
  ------------------
                if (LJ_UNLIKELY(!ctr.ok)) return lj_str_newlit(L, "?");
  ------------------
  |  |   28|      0|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  572|    132|  return lj_str_new(L, ctr.pb, ctr.pe - ctr.pb);
  573|    132|}
lj_ctype_init:
  614|    509|{
  615|    509|  CTState *cts = lj_mem_newt(L, sizeof(CTState), CTState);
  ------------------
  |  |  133|    509|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|    509|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  616|    509|  CType *ct = lj_mem_newvec(L, CTTYPETAB_MIN, CType);
  ------------------
  |  |  125|    509|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|    509|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  617|    509|  const char *name = lj_ctype_typenames;
  618|    509|  CTypeID id;
  619|    509|  memset(cts, 0, sizeof(CTState));
  620|    509|  cts->tab = ct;
  621|    509|  cts->sizetab = CTTYPETAB_MIN;
  ------------------
  |  |  142|    509|#define CTTYPETAB_MIN		128
  ------------------
  622|    509|  cts->top = CTTYPEINFO_NUM;
  ------------------
  |  |  138|    509|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  623|    509|  cts->L = NULL;
  624|    509|  cts->g = G(L);
  ------------------
  |  |  705|    509|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    509|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  625|  49.8k|  for (id = 0; id < CTTYPEINFO_NUM; id++, ct++) {
  ------------------
  |  |  138|  49.8k|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  |  Branch (625:16): [True: 49.3k, False: 509]
  ------------------
  626|  49.3k|    CTInfo info = lj_ctype_typeinfo[id];
  627|  49.3k|    ct->size = (CTSize)((int32_t)(info << 16) >> 26);
  628|  49.3k|    ct->info = info & 0xffff03ffu;
  629|  49.3k|    ct->sib = 0;
  630|  49.3k|    if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  189|  49.3k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  49.3k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                  if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  208|  20.3k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|  20.3k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  20.3k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 8.65k, False: 11.7k]
  |  |  ------------------
  ------------------
  |  Branch (630:9): [True: 29.0k, False: 20.3k]
  ------------------
  631|  37.6k|      size_t len = strlen(name);
  632|  37.6k|      GCstr *str = lj_str_new(L, name, len);
  633|  37.6k|      ctype_setname(ct, str);
  634|  37.6k|      name += len+1;
  635|  37.6k|      lj_ctype_addname(cts, ct, id);
  636|  37.6k|    } else {
  637|  11.7k|      setgcrefnull(ct->name);
  ------------------
  |  |   76|  11.7k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  638|  11.7k|      ct->next = 0;
  639|  11.7k|      if (!ctype_isenum(info)) ctype_addtype(cts, ct, id);
  ------------------
  |  |  207|  11.7k|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|  11.7k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  11.7k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (639:11): [True: 11.1k, False: 509]
  ------------------
  640|  11.7k|    }
  641|  49.3k|  }
  642|    509|  setmref(G(L)->ctype_state, cts);
  ------------------
  |  |   39|    509|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  643|    509|  return cts;
  644|    509|}
lj_ctype_initfin:
  648|  3.10k|{
  649|       |  /* NOBARRIER: The table is new (marked white). */
  650|  3.10k|  GCtab *t = lj_tab_new(L, 0, 1);
  651|  3.10k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  652|  3.10k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  3.10k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  653|  3.10k|	  lj_str_newlit(L, "k"));
  ------------------
  |  |   28|  3.10k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  654|  3.10k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  655|  3.10k|  setgcref(G(L)->gcroot[GCROOT_FFI_FIN], obj2gco(t));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  656|  3.10k|}
lj_ctype_freestate:
  660|  3.10k|{
  661|  3.10k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  384|  3.10k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  662|  3.10k|  if (cts) {
  ------------------
  |  Branch (662:7): [True: 509, False: 2.59k]
  ------------------
  663|    509|    lj_ccallback_mcode_free(cts);
  664|    509|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|    509|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  665|    509|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|    509|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  666|    509|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|    509|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  667|    509|  }
  668|  3.10k|}
lj_ctype.c:ctype_prepstr:
  392|    203|{
  393|    203|  char *p = ctr->pb;
  394|    203|  if (ctr->buf + len+1 > p) { ctr->ok = 0; return; }
  ------------------
  |  Branch (394:7): [True: 0, False: 203]
  ------------------
  395|    203|  if (ctr->needsp) *--p = ' ';
  ------------------
  |  Branch (395:7): [True: 0, False: 203]
  ------------------
  396|    203|  ctr->needsp = 1;
  397|    203|  p -= len;
  398|    985|  while (len-- > 0) p[len] = str[len];
  ------------------
  |  Branch (398:10): [True: 782, False: 203]
  ------------------
  399|    203|  ctr->pb = p;
  400|    203|}
lj_ctype.c:ctype_repr:
  463|    132|{
  464|    132|  CType *ct = ctype_get(ctr->cts, id);
  465|    132|  CTInfo qual = 0;
  466|    132|  int ptrto = 0;
  467|    132|  for (;;) {
  468|    132|    CTInfo info = ct->info;
  469|    132|    CTSize size = ct->size;
  470|    132|    switch (ctype_type(info)) {
  ------------------
  |  |  189|    132|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|    132|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  471|     71|    case CT_NUM:
  ------------------
  |  Branch (471:5): [True: 71, False: 61]
  ------------------
  472|     71|      if ((info & CTF_BOOL)) {
  ------------------
  |  |   64|     71|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  ------------------
  |  Branch (472:11): [True: 0, False: 71]
  ------------------
  473|      0|	ctype_preplit(ctr, "bool");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  474|     71|      } else if ((info & CTF_FP)) {
  ------------------
  |  |   65|     71|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  ------------------
  |  Branch (474:18): [True: 0, False: 71]
  ------------------
  475|      0|	if (size == sizeof(double)) ctype_preplit(ctr, "double");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (475:6): [True: 0, False: 0]
  ------------------
  476|      0|	else if (size == sizeof(float)) ctype_preplit(ctr, "float");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (476:11): [True: 0, False: 0]
  ------------------
  477|      0|	else ctype_preplit(ctr, "long double");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  478|     71|      } else if (size == 1) {
  ------------------
  |  Branch (478:18): [True: 0, False: 71]
  ------------------
  479|      0|	if (!((info ^ CTF_UCHAR) & CTF_UNSIGNED)) ctype_preplit(ctr, "char");
  ------------------
  |  |   80|      0|#define CTF_UCHAR	((char)-1 > 0 ? CTF_UNSIGNED : 0)
  |  |  ------------------
  |  |  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  |  |  ------------------
  |  |  |  Branch (80:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (!((info ^ CTF_UCHAR) & CTF_UNSIGNED)) ctype_preplit(ctr, "char");
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
              	if (!((info ^ CTF_UCHAR) & CTF_UNSIGNED)) ctype_preplit(ctr, "char");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (479:6): [True: 0, False: 0]
  ------------------
  480|      0|	else if (CTF_UCHAR) ctype_preplit(ctr, "signed char");
  ------------------
  |  |   80|      0|#define CTF_UCHAR	((char)-1 > 0 ? CTF_UNSIGNED : 0)
  |  |  ------------------
  |  |  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  |  |  ------------------
  |  |  |  Branch (80:19): [Folded - Ignored]
  |  |  |  Branch (80:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	else if (CTF_UCHAR) ctype_preplit(ctr, "signed char");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  481|      0|	else ctype_preplit(ctr, "unsigned char");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  482|     71|      } else if (size < 8) {
  ------------------
  |  Branch (482:18): [True: 0, False: 71]
  ------------------
  483|      0|	if (size == 4) ctype_preplit(ctr, "int");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	else ctype_preplit(ctr, "short");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  485|      0|	if ((info & CTF_UNSIGNED)) ctype_preplit(ctr, "unsigned");
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
              	if ((info & CTF_UNSIGNED)) ctype_preplit(ctr, "unsigned");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (485:6): [True: 0, False: 0]
  ------------------
  486|     71|      } else {
  487|     71|	ctype_preplit(ctr, "_t");
  ------------------
  |  |  402|     71|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  488|     71|	ctype_prepnum(ctr, size*8);
  489|     71|	ctype_preplit(ctr, "int");
  ------------------
  |  |  402|     71|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  490|     71|	if ((info & CTF_UNSIGNED)) ctype_prepc(ctr, 'u');
  ------------------
  |  |   68|     71|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (490:6): [True: 12, False: 59]
  ------------------
  491|     71|      }
  492|     71|      ctype_prepqual(ctr, (qual|info));
  493|     71|      return;
  494|      0|    case CT_VOID:
  ------------------
  |  Branch (494:5): [True: 0, False: 132]
  ------------------
  495|      0|      ctype_preplit(ctr, "void");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  496|      0|      ctype_prepqual(ctr, (qual|info));
  497|      0|      return;
  498|      0|    case CT_STRUCT:
  ------------------
  |  Branch (498:5): [True: 0, False: 132]
  ------------------
  499|      0|      ctype_preptype(ctr, ct, qual, (info & CTF_UNION) ? "union" : "struct");
  ------------------
  |  |   74|      0|#define CTF_UNION	0x00800000u	/* Union: STRUCT. */
  ------------------
  |  Branch (499:37): [True: 0, False: 0]
  ------------------
  500|      0|      return;
  501|      0|    case CT_ENUM:
  ------------------
  |  Branch (501:5): [True: 0, False: 132]
  ------------------
  502|      0|      if (id == CTID_CTYPEID) {
  ------------------
  |  Branch (502:11): [True: 0, False: 0]
  ------------------
  503|      0|	ctype_preplit(ctr, "ctype");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  504|      0|	return;
  505|      0|      }
  506|      0|      ctype_preptype(ctr, ct, qual, "enum");
  507|      0|      return;
  508|      0|    case CT_ATTRIB:
  ------------------
  |  Branch (508:5): [True: 0, False: 132]
  ------------------
  509|      0|      if (ctype_attrib(info) == CTA_QUAL) qual |= size;
  ------------------
  |  |  192|      0|#define ctype_attrib(info)	(((info) >> CTSHIFT_ATTRIB) & CTMASK_ATTRIB)
  |  |  ------------------
  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  ------------------
  |  |               #define ctype_attrib(info)	(((info) >> CTSHIFT_ATTRIB) & CTMASK_ATTRIB)
  |  |  ------------------
  |  |  |  |   94|      0|#define CTMASK_ATTRIB	255		/* Max. 256 attributes. */
  |  |  ------------------
  ------------------
  |  Branch (509:11): [True: 0, False: 0]
  ------------------
  510|      0|      break;
  511|      0|    case CT_PTR:
  ------------------
  |  Branch (511:5): [True: 0, False: 132]
  ------------------
  512|      0|      if ((info & CTF_REF)) {
  ------------------
  |  |   71|      0|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  ------------------
  |  Branch (512:11): [True: 0, False: 0]
  ------------------
  513|      0|	ctype_prepc(ctr, '&');
  514|      0|      } else {
  515|      0|	ctype_prepqual(ctr, (qual|info));
  516|      0|	if (LJ_64 && size == 4) ctype_preplit(ctr, "__ptr32");
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (LJ_64 && size == 4) ctype_preplit(ctr, "__ptr32");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (516:15): [True: 0, False: 0]
  ------------------
  517|      0|	ctype_prepc(ctr, '*');
  518|      0|      }
  519|      0|      qual = 0;
  520|      0|      ptrto = 1;
  521|      0|      ctr->needsp = 1;
  522|      0|      break;
  523|     61|    case CT_ARRAY:
  ------------------
  |  Branch (523:5): [True: 61, False: 71]
  ------------------
  524|     61|      if (ctype_isrefarray(info)) {
  ------------------
  |  |  232|     61|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|     61|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|     61|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|     61|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|     61|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     61|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 61]
  |  |  ------------------
  ------------------
  525|      0|	ctr->needsp = 1;
  526|      0|	if (ptrto) { ptrto = 0; ctype_prepc(ctr, '('); ctype_appc(ctr, ')'); }
  ------------------
  |  Branch (526:6): [True: 0, False: 0]
  ------------------
  527|      0|	ctype_appc(ctr, '[');
  528|      0|	if (size != CTSIZE_INVALID) {
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (528:6): [True: 0, False: 0]
  ------------------
  529|      0|	  CTSize csize = ctype_child(ctr->cts, ct)->size;
  530|      0|	  ctype_appnum(ctr, csize ? size/csize : 0);
  ------------------
  |  Branch (530:22): [True: 0, False: 0]
  ------------------
  531|      0|	} else if ((info & CTF_VLA)) {
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (531:13): [True: 0, False: 0]
  ------------------
  532|      0|	  ctype_appc(ctr, '?');
  533|      0|	}
  534|      0|	ctype_appc(ctr, ']');
  535|     61|      } else if ((info & CTF_COMPLEX)) {
  ------------------
  |  |   73|     61|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  ------------------
  |  Branch (535:18): [True: 61, False: 0]
  ------------------
  536|     61|	if (size == 2*sizeof(float)) ctype_preplit(ctr, "float");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (536:6): [True: 0, False: 61]
  ------------------
  537|     61|	ctype_preplit(ctr, "complex");
  ------------------
  |  |  402|     61|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  538|     61|	return;
  539|     61|      } else {
  540|      0|	ctype_preplit(ctr, ")))");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  541|      0|	ctype_prepnum(ctr, size);
  542|      0|	ctype_preplit(ctr, "__attribute__((vector_size(");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  543|      0|      }
  544|      0|      break;
  545|      0|    case CT_FUNC:
  ------------------
  |  Branch (545:5): [True: 0, False: 132]
  ------------------
  546|      0|      ctr->needsp = 1;
  547|      0|      if (ptrto) { ptrto = 0; ctype_prepc(ctr, '('); ctype_appc(ctr, ')'); }
  ------------------
  |  Branch (547:11): [True: 0, False: 0]
  ------------------
  548|      0|      ctype_appc(ctr, '(');
  549|      0|      ctype_appc(ctr, ')');
  550|      0|      break;
  551|      0|    default:
  ------------------
  |  Branch (551:5): [True: 0, False: 132]
  ------------------
  552|      0|      lj_assertG_(ctr->cts->g, 0, "bad ctype %08x", info);
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  553|      0|      break;
  554|    132|    }
  555|      0|    ct = ctype_get(ctr->cts, ctype_cid(info));
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  556|      0|  }
  557|    132|}
lj_ctype.c:ctype_prepnum:
  413|     71|{
  414|     71|  char *p = ctr->pb;
  415|     71|  if (ctr->buf + 10+1 > p) { ctr->ok = 0; return; }
  ------------------
  |  Branch (415:7): [True: 0, False: 71]
  ------------------
  416|    142|  do { *--p = (char)('0' + n % 10); } while (n /= 10);
  ------------------
  |  Branch (416:46): [True: 71, False: 71]
  ------------------
  417|     71|  ctr->pb = p;
  418|     71|  ctr->needsp = 0;
  419|     71|}
lj_ctype.c:ctype_prepc:
  406|     12|{
  407|     12|  if (ctr->buf >= ctr->pb) { ctr->ok = 0; return; }
  ------------------
  |  Branch (407:7): [True: 0, False: 12]
  ------------------
  408|     12|  *--ctr->pb = c;
  409|     12|}
lj_ctype.c:ctype_prepqual:
  442|     71|{
  443|     71|  if ((info & CTF_VOLATILE)) ctype_preplit(ctr, "volatile");
  ------------------
  |  |   67|     71|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  ------------------
                if ((info & CTF_VOLATILE)) ctype_preplit(ctr, "volatile");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (443:7): [True: 0, False: 71]
  ------------------
  444|     71|  if ((info & CTF_CONST)) ctype_preplit(ctr, "const");
  ------------------
  |  |   66|     71|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  ------------------
                if ((info & CTF_CONST)) ctype_preplit(ctr, "const");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (444:7): [True: 0, False: 71]
  ------------------
  445|     71|}
lj_ctype.c:ctype_addtype:
  221|  11.1k|{
  222|  11.1k|  uint32_t h = ct_hashtype(ct->info, ct->size);
  ------------------
  |  |  147|  11.1k|#define ct_hashtype(info, size)	(hashrot(info, size) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|  11.1k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|  11.1k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  223|  11.1k|  ct->next = cts->hash[h];
  224|  11.1k|  cts->hash[h] = (CTypeID1)id;
  225|  11.1k|}

lj_ctype.c:ctype_get:
  420|    339|{
  421|    339|  return &cts->tab[ctype_check(cts, id)];
  422|    339|}
lj_ctype.c:ctype_check:
  412|    339|{
  413|    339|  UNUSED(cts);
  ------------------
  |  |   91|    339|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|    339|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|    339|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    339|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    678|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 339, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 339, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    339|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|    339|  return id;
  416|    339|}
lj_ctype.c:ctype_raw:
  438|     11|{
  439|     11|  CType *ct = ctype_get(cts, id);
  440|     11|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|     11|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|     11|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     11|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 11]
  |  |  ------------------
  ------------------
  441|     11|  return ct;
  442|     11|}
lj_ctype.c:ctype_setname:
  453|  37.6k|{
  454|       |  /* NOBARRIER: mark string as fixed -- the C type table is never collected. */
  455|  37.6k|  fixstring(s);
  ------------------
  |  |   45|  37.6k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  37.6k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  456|  37.6k|  setgcref(ct->name, obj2gco(s));
  ------------------
  |  |   72|  37.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  457|  37.6k|}
lib_ffi.c:ctype_cts:
  388|      6|{
  389|      6|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  384|      6|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      6|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  390|      6|  cts->L = L;  /* Save L for errors and allocations. */
  391|      6|  return cts;
  392|      6|}
lib_ffi.c:ctype_raw:
  438|      6|{
  439|      6|  CType *ct = ctype_get(cts, id);
  440|      6|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|      6|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|      6|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      6|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  441|      6|  return ct;
  442|      6|}
lib_ffi.c:ctype_get:
  420|      6|{
  421|      6|  return &cts->tab[ctype_check(cts, id)];
  422|      6|}
lib_ffi.c:ctype_check:
  412|      6|{
  413|      6|  UNUSED(cts);
  ------------------
  |  |   91|      6|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|      6|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|      6|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      6|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     12|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 6, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      6|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|      6|  return id;
  416|      6|}
lj_cdata.c:ctype_check:
  412|  7.89k|{
  413|  7.89k|  UNUSED(cts);
  ------------------
  |  |   91|  7.89k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|  7.89k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|  7.89k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  7.89k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  15.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 7.89k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 7.89k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  7.89k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|  7.89k|  return id;
  416|  7.89k|}
lj_cdata.c:ctype_raw:
  438|  7.89k|{
  439|  7.89k|  CType *ct = ctype_get(cts, id);
  440|  7.89k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|  7.89k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  7.89k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  7.89k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 7.89k]
  |  |  ------------------
  ------------------
  441|  7.89k|  return ct;
  442|  7.89k|}
lj_cdata.c:ctype_get:
  420|  7.89k|{
  421|  7.89k|  return &cts->tab[ctype_check(cts, id)];
  422|  7.89k|}
lj_ccall.c:ctype_get:
  420|      6|{
  421|      6|  return &cts->tab[ctype_check(cts, id)];
  422|      6|}
lj_ccall.c:ctype_check:
  412|      6|{
  413|      6|  UNUSED(cts);
  ------------------
  |  |   91|      6|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|      6|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|      6|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      6|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     12|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 6, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      6|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|      6|  return id;
  416|      6|}
lj_ccall.c:ctype_cts:
  388|      6|{
  389|      6|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  384|      6|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      6|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  390|      6|  cts->L = L;  /* Save L for errors and allocations. */
  391|      6|  return cts;
  392|      6|}
lj_ccall.c:ctype_raw:
  438|      6|{
  439|      6|  CType *ct = ctype_get(cts, id);
  440|      6|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|      6|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|      6|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      6|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 6]
  |  |  ------------------
  ------------------
  441|      6|  return ct;
  442|      6|}
lj_carith.c:ctype_cts:
  388|    833|{
  389|    833|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  384|    833|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|    833|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  390|    833|  cts->L = L;  /* Save L for errors and allocations. */
  391|    833|  return cts;
  392|    833|}
lj_carith.c:ctype_check:
  412|  3.67k|{
  413|  3.67k|  UNUSED(cts);
  ------------------
  |  |   91|  3.67k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|  3.67k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|  3.67k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.67k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  7.34k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.67k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.67k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.67k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|  3.67k|  return id;
  416|  3.67k|}
lj_carith.c:ctype_get:
  420|  3.07k|{
  421|  3.07k|  return &cts->tab[ctype_check(cts, id)];
  422|  3.07k|}
lj_carith.c:ctype_raw:
  438|  1.77k|{
  439|  1.77k|  CType *ct = ctype_get(cts, id);
  440|  1.77k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|  1.77k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  1.77k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.77k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 1.77k]
  |  |  ------------------
  ------------------
  441|  1.77k|  return ct;
  442|  1.77k|}

lj_debug_line:
  120|    637|{
  121|    637|  const void *lineinfo = proto_lineinfo(pt);
  ------------------
  |  |  426|    637|#define proto_lineinfo(pt)	(mref((pt)->lineinfo, const void))
  |  |  ------------------
  |  |  |  |   36|    637|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  122|    637|  if (pc <= pt->sizebc && lineinfo) {
  ------------------
  |  Branch (122:7): [True: 637, False: 0]
  |  Branch (122:27): [True: 637, False: 0]
  ------------------
  123|    637|    BCLine first = pt->firstline;
  124|    637|    if (pc == pt->sizebc) return first + pt->numline;
  ------------------
  |  Branch (124:9): [True: 0, False: 637]
  ------------------
  125|    637|    if (pc-- == 0) return first;
  ------------------
  |  Branch (125:9): [True: 0, False: 637]
  ------------------
  126|    637|    if (pt->numline < 256)
  ------------------
  |  Branch (126:9): [True: 630, False: 7]
  ------------------
  127|    630|      return first + (BCLine)((const uint8_t *)lineinfo)[pc];
  128|      7|    else if (pt->numline < 65536)
  ------------------
  |  Branch (128:14): [True: 7, False: 0]
  ------------------
  129|      7|      return first + (BCLine)((const uint16_t *)lineinfo)[pc];
  130|      0|    else
  131|      0|      return first + (BCLine)((const uint32_t *)lineinfo)[pc];
  132|    637|  }
  133|      0|  return 0;
  134|    637|}
lj_debug_slotname:
  256|    424|{
  257|    424|  const char *lname;
  258|    424|restart:
  259|    424|  lname = debug_varname(pt, proto_bcpos(pt, ip), slot);
  ------------------
  |  |  421|    424|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|    424|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  260|    424|  if (lname != NULL) { *name = lname; return "local"; }
  ------------------
  |  Branch (260:7): [True: 0, False: 424]
  ------------------
  261|  2.59k|  while (--ip > proto_bc(pt)) {
  ------------------
  |  |  420|  2.59k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  |  Branch (261:10): [True: 2.59k, False: 0]
  ------------------
  262|  2.59k|    BCIns ins = *ip;
  263|  2.59k|    BCOp op = bc_op(ins);
  ------------------
  |  |   34|  2.59k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  264|  2.59k|    BCReg ra = bc_a(ins);
  ------------------
  |  |   35|  2.59k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  265|  2.59k|    if (bcmode_a(op) == BCMbase) {
  ------------------
  |  |  246|  2.59k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
  |  Branch (265:9): [True: 136, False: 2.45k]
  ------------------
  266|    136|      if (slot >= ra && (op != BC_KNIL || slot <= bc_d(ins)))
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (266:11): [True: 1, False: 135]
  |  Branch (266:26): [True: 1, False: 0]
  |  Branch (266:43): [True: 0, False: 0]
  ------------------
  267|      1|	return NULL;
  268|  2.45k|    } else if (bcmode_a(op) == BCMdst && ra == slot) {
  ------------------
  |  |  246|  2.45k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
  |  Branch (268:16): [True: 2.33k, False: 120]
  |  Branch (268:42): [True: 423, False: 1.91k]
  ------------------
  269|    423|      switch (bc_op(ins)) {
  ------------------
  |  |   34|    423|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  270|      0|      case BC_MOV:
  ------------------
  |  Branch (270:7): [True: 0, False: 423]
  ------------------
  271|      0|	if (ra == slot) { slot = bc_d(ins); goto restart; }
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (271:6): [True: 0, False: 0]
  ------------------
  272|      0|	break;
  273|    364|      case BC_GGET:
  ------------------
  |  Branch (273:7): [True: 364, False: 59]
  ------------------
  274|    364|	*name = strdata(gco2str(proto_kgc(pt, ~(ptrdiff_t)bc_d(ins))));
  ------------------
  |  |  316|  2.54k|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 364, False: 0]
  |  |  |  Branch (316:37): [True: 364, False: 0]
  |  |  |  Branch (316:37): [True: 364, False: 0]
  |  |  ------------------
  ------------------
  275|      0|	return "global";
  276|      0|      case BC_TGETS:
  ------------------
  |  Branch (276:7): [True: 0, False: 423]
  ------------------
  277|      0|	*name = strdata(gco2str(proto_kgc(pt, ~(ptrdiff_t)bc_c(ins))));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  278|      0|	if (ip > proto_bc(pt)) {
  ------------------
  |  |  420|      0|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  |  Branch (278:6): [True: 0, False: 0]
  ------------------
  279|      0|	  BCIns insp = ip[-1];
  280|      0|	  if (bc_op(insp) == BC_MOV && bc_a(insp) == ra+1+LJ_FR2 &&
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
              	  if (bc_op(insp) == BC_MOV && bc_a(insp) == ra+1+LJ_FR2 &&
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	  if (bc_op(insp) == BC_MOV && bc_a(insp) == ra+1+LJ_FR2 &&
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (280:8): [True: 0, False: 0]
  |  Branch (280:33): [True: 0, False: 0]
  ------------------
  281|      0|	      bc_d(insp) == bc_b(ins))
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
              	      bc_d(insp) == bc_b(ins))
  ------------------
  |  |   36|      0|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
  |  Branch (281:8): [True: 0, False: 0]
  ------------------
  282|      0|	    return "method";
  283|      0|	}
  284|      0|	return "field";
  285|      0|      case BC_UGET:
  ------------------
  |  Branch (285:7): [True: 0, False: 423]
  ------------------
  286|      0|	*name = lj_debug_uvname(pt, bc_d(ins));
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  287|      0|	return "upvalue";
  288|     59|      default:
  ------------------
  |  Branch (288:7): [True: 59, False: 364]
  ------------------
  289|     59|	return NULL;
  290|    423|      }
  291|    423|    }
  292|  2.59k|  }
  293|      0|  return NULL;
  294|    424|}
lj_debug_shortname:
  329|  2.91k|{
  330|  2.91k|  const char *src = strdata(str);
  ------------------
  |  |  316|  2.91k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  331|  2.91k|  if (*src == '=') {
  ------------------
  |  Branch (331:7): [True: 0, False: 2.91k]
  ------------------
  332|      0|    strncpy(out, src+1, LUA_IDSIZE);  /* Remove first char. */
  ------------------
  |  |  108|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  333|      0|    out[LUA_IDSIZE-1] = '\0';  /* Ensures null termination. */
  ------------------
  |  |  108|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  334|  2.91k|  } else if (*src == '@') {  /* Output "source", or "...source". */
  ------------------
  |  Branch (334:14): [True: 0, False: 2.91k]
  ------------------
  335|      0|    size_t len = str->len-1;
  336|      0|    src++;  /* Skip the `@' */
  337|      0|    if (len >= LUA_IDSIZE) {
  ------------------
  |  |  108|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (337:9): [True: 0, False: 0]
  ------------------
  338|      0|      src += len-(LUA_IDSIZE-4);  /* Get last part of file name. */
  ------------------
  |  |  108|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  339|      0|      *out++ = '.'; *out++ = '.'; *out++ = '.';
  340|      0|    }
  341|      0|    strcpy(out, src);
  342|  2.91k|  } else {  /* Output [string "string"] or [builtin:name]. */
  343|  2.91k|    size_t len;  /* Length, up to first control char. */
  344|  29.1k|    for (len = 0; len < LUA_IDSIZE-12; len++)
  ------------------
  |  |  108|  29.1k|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (344:19): [True: 29.1k, False: 0]
  ------------------
  345|  29.1k|      if (((const unsigned char *)src)[len] < ' ') break;
  ------------------
  |  Branch (345:11): [True: 2.91k, False: 26.1k]
  ------------------
  346|  2.91k|    strcpy(out, line == ~(BCLine)0 ? "[builtin:" : "[string \""); out += 9;
  ------------------
  |  Branch (346:17): [True: 0, False: 2.91k]
  ------------------
  347|  2.91k|    if (src[len] != '\0') {  /* Must truncate? */
  ------------------
  |  Branch (347:9): [True: 0, False: 2.91k]
  ------------------
  348|      0|      if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  108|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
                    if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  108|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (348:11): [True: 0, False: 0]
  ------------------
  349|      0|      strncpy(out, src, len); out += len;
  350|      0|      strcpy(out, "..."); out += 3;
  351|  2.91k|    } else {
  352|  2.91k|      strcpy(out, src); out += len;
  353|  2.91k|    }
  354|  2.91k|    strcpy(out, line == ~(BCLine)0 ? "]" : "\"]");
  ------------------
  |  Branch (354:17): [True: 0, False: 2.91k]
  ------------------
  355|  2.91k|  }
  356|  2.91k|}
lj_debug_addloc:
  361|    637|{
  362|    637|  if (frame) {
  ------------------
  |  Branch (362:7): [True: 637, False: 0]
  ------------------
  363|    637|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|    637|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    637|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    637|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    637|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    637|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|    637|    if (isluafunc(fn)) {
  ------------------
  |  |  476|    637|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    637|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 637, False: 0]
  |  |  ------------------
  ------------------
  365|    637|      BCLine line = debug_frameline(L, fn, nextframe);
  366|    637|      if (line >= 0) {
  ------------------
  |  Branch (366:11): [True: 637, False: 0]
  ------------------
  367|    637|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|    637|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    637|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    637|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    637|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 637, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    637|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  368|      0|	char buf[LUA_IDSIZE];
  369|    637|	lj_debug_shortname(buf, proto_chunkname(pt), pt->firstline);
  ------------------
  |  |  424|    637|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|    637|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|    637|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|    637|	lj_strfmt_pushf(L, "%s:%d: %s", buf, line, msg);
  371|    637|	return;
  372|    637|      }
  373|    637|    }
  374|    637|  }
  375|      0|  lj_strfmt_pushf(L, "%s", msg);
  376|      0|}
lj_debug.c:debug_varname:
  152|    424|{
  153|    424|  const char *p = (const char *)proto_varinfo(pt);
  ------------------
  |  |  428|    424|#define proto_varinfo(pt)	(mref((pt)->varinfo, const uint8_t))
  |  |  ------------------
  |  |  |  |   36|    424|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  154|    424|  if (p) {
  ------------------
  |  Branch (154:7): [True: 424, False: 0]
  ------------------
  155|    424|    BCPos lastpc = 0;
  156|    424|    for (;;) {
  157|    424|      const char *name = p;
  158|    424|      uint32_t vn = *(const uint8_t *)p;
  159|    424|      BCPos startpc, endpc;
  160|    424|      if (vn < VARNAME__MAX) {
  ------------------
  |  Branch (160:11): [True: 424, False: 0]
  ------------------
  161|    424|	if (vn == VARNAME_END) break;  /* End of varinfo. */
  ------------------
  |  Branch (161:6): [True: 424, False: 0]
  ------------------
  162|    424|      } else {
  163|      0|	do { p++; } while (*(const uint8_t *)p);  /* Skip over variable name. */
  ------------------
  |  Branch (163:21): [True: 0, False: 0]
  ------------------
  164|      0|      }
  165|      0|      p++;
  166|      0|      lastpc = startpc = lastpc + lj_buf_ruleb128(&p);
  167|      0|      if (startpc > pc) break;
  ------------------
  |  Branch (167:11): [True: 0, False: 0]
  ------------------
  168|      0|      endpc = startpc + lj_buf_ruleb128(&p);
  169|      0|      if (pc < endpc && slot-- == 0) {
  ------------------
  |  Branch (169:11): [True: 0, False: 0]
  |  Branch (169:25): [True: 0, False: 0]
  ------------------
  170|      0|	if (vn < VARNAME__MAX) {
  ------------------
  |  Branch (170:6): [True: 0, False: 0]
  ------------------
  171|      0|#define VARNAMESTR(name, str)	str "\0"
  172|      0|	  name = VARNAMEDEF(VARNAMESTR);
  ------------------
  |  |   51|      0|  _(FOR_IDX, "(for index)") \
  |  |  ------------------
  |  |  |  |  172|      0|	  name = VARNAMEDEF(VARNAMESTR);
  |  |  |  |  ------------------
  |  |  |  |  |  |  171|      0|#define VARNAMESTR(name, str)	str "\0"
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   52|      0|  _(FOR_STOP, "(for limit)") \
  |  |   53|      0|  _(FOR_STEP, "(for step)") \
  |  |   54|      0|  _(FOR_GEN, "(for generator)") \
  |  |   55|      0|  _(FOR_STATE, "(for state)") \
  |  |   56|      0|  _(FOR_CTL, "(for control)")
  |  |  ------------------
  |  |  |  |  172|      0|	  name = VARNAMEDEF(VARNAMESTR);
  |  |  |  |  ------------------
  |  |  |  |  |  |  171|      0|#define VARNAMESTR(name, str)	str "\0"
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|#undef VARNAMESTR
  174|      0|	  if (--vn) while (*name++ || --vn) ;
  ------------------
  |  Branch (174:8): [True: 0, False: 0]
  |  Branch (174:21): [True: 0, False: 0]
  |  Branch (174:32): [True: 0, False: 0]
  ------------------
  175|      0|	}
  176|      0|	return name;
  177|      0|      }
  178|      0|    }
  179|    424|  }
  180|    424|  return NULL;
  181|    424|}
lj_debug.c:debug_framepc:
   54|    637|{
   55|    637|  const BCIns *ins;
   56|    637|  GCproto *pt;
   57|    637|  BCPos pos;
   58|    637|  lj_assertL(fn->c.gct == ~LJ_TFUNC || fn->c.gct == ~LJ_TTHREAD,
  ------------------
  |  |  365|    637|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    637|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 637, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    637|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   59|    637|	     "function or frame expected");
   60|    637|  if (!isluafunc(fn)) {  /* Cannot derive a PC for non-Lua functions. */
  ------------------
  |  |  476|    637|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    637|#define FF_LUA		0
  |  |  ------------------
  ------------------
  |  Branch (60:7): [True: 0, False: 637]
  ------------------
   61|      0|    return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   62|    637|  } else if (nextframe == NULL) {  /* Lua function on top. */
  ------------------
  |  Branch (62:14): [True: 508, False: 129]
  ------------------
   63|    508|    void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|    508|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|    508|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|    508|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|    508|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|    508|    if (cf == NULL || (char *)cframe_pc(cf) == (char *)cframe_L(cf))
  ------------------
  |  |  287|    508|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|    508|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (cf == NULL || (char *)cframe_pc(cf) == (char *)cframe_L(cf))
  ------------------
  |  |  285|    508|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|    508|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (64:9): [True: 0, False: 508]
  |  Branch (64:23): [True: 0, False: 508]
  ------------------
   65|      0|      return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   66|    508|    ins = cframe_pc(cf);  /* Only happens during error/hook handling. */
  ------------------
  |  |  287|    508|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|    508|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|    508|    if (!ins) return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (67:9): [True: 0, False: 508]
  ------------------
   68|    508|  } else {
   69|    129|    if (frame_islua(nextframe)) {
  ------------------
  |  |   77|    129|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|    129|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    129|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|    129|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 6, False: 123]
  |  |  ------------------
  ------------------
   70|      6|      ins = frame_pc(nextframe);
  ------------------
  |  |   48|      6|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  ------------------
  |  |  |  |   47|      6|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
   71|    123|    } else if (frame_iscont(nextframe)) {
  ------------------
  |  |   79|    123|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|    123|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    123|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    123|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    123|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    123|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 123, False: 0]
  |  |  ------------------
  ------------------
   72|    123|      ins = frame_contpc(nextframe);
  ------------------
  |  |   90|    123|#define frame_contpc(f)		(frame_pc((f)-2))
  |  |  ------------------
  |  |  |  |   48|    123|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    123|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   73|    123|    } else {
   74|       |      /* Lua function below errfunc/gc/hook: find cframe to get the PC. */
   75|      0|      void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   76|      0|      TValue *f = L->base-1;
   77|      0|      for (;;) {
   78|      0|	if (cf == NULL)
  ------------------
  |  Branch (78:6): [True: 0, False: 0]
  ------------------
   79|      0|	  return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   80|      0|	while (cframe_nres(cf) < 0) {
  ------------------
  |  |  280|      0|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|      0|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (80:9): [True: 0, False: 0]
  ------------------
   81|      0|	  if (f >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (81:8): [True: 0, False: 0]
  ------------------
   82|      0|	    break;
   83|      0|	  cf = cframe_raw(cframe_prev(cf));
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   84|      0|	  if (cf == NULL)
  ------------------
  |  Branch (84:8): [True: 0, False: 0]
  ------------------
   85|      0|	    return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   86|      0|	}
   87|      0|	if (f < nextframe)
  ------------------
  |  Branch (87:6): [True: 0, False: 0]
  ------------------
   88|      0|	  break;
   89|      0|	if (frame_islua(f)) {
  ------------------
  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   90|      0|	  f = frame_prevl(f);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   91|      0|	} else {
   92|      0|	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |   78|      0|#define frame_isc(f)		(frame_type(f) == FRAME_C)
  |  |  ------------------
  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (78:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |   79|      0|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   93|      0|	    cf = cframe_raw(cframe_prev(cf));
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|      0|	  f = frame_prevd(f);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   95|      0|	}
   96|      0|      }
   97|      0|      ins = cframe_pc(cf);
  ------------------
  |  |  287|      0|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   98|      0|      if (!ins) return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (98:11): [True: 0, False: 0]
  ------------------
   99|      0|    }
  100|    129|  }
  101|    637|  pt = funcproto(fn);
  ------------------
  |  |  480|    637|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    637|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    637|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    637|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 637, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    637|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  102|    637|  pos = proto_bcpos(pt, ins) - 1;
  ------------------
  |  |  421|    637|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|    637|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  103|    637|#if LJ_HASJIT
  104|    637|  if (pos > pt->sizebc) {  /* Undo the effects of lj_trace_exit for JLOOP. */
  ------------------
  |  Branch (104:7): [True: 0, False: 637]
  ------------------
  105|      0|    if (bc_isret(bc_op(ins[-1]))) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (105:9): [True: 0, False: 0]
  ------------------
  106|      0|      GCtrace *T = (GCtrace *)((char *)(ins-1) - offsetof(GCtrace, startins));
  107|      0|      pos = proto_bcpos(pt, mref(T->startpc, const BCIns));
  ------------------
  |  |  421|      0|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|      0|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  108|      0|    } else {
  109|      0|      pos = NO_BCPOS;  /* Punt in case of stack overflow for stitched trace. */
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  110|      0|    }
  111|      0|  }
  112|    637|#endif
  113|    637|  return pos;
  114|    637|}
lj_debug.c:debug_frameline:
  138|    637|{
  139|    637|  BCPos pc = debug_framepc(L, fn, nextframe);
  140|    637|  if (pc != NO_BCPOS) {
  ------------------
  |  |   50|    637|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (140:7): [True: 637, False: 0]
  ------------------
  141|    637|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|    637|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    637|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    637|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    637|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 637, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    637|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|    637|    lj_assertL(pc <= pt->sizebc, "PC out of range");
  ------------------
  |  |  365|    637|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    637|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 637, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    637|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  143|    637|    return lj_debug_line(pt, pc);
  144|    637|  }
  145|      0|  return -1;
  146|    637|}

lj_str.c:lj_bswap:
  181|     42|{
  182|     42|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|     42|}
lj_str.c:lj_getu32:
  237|  3.74M|{
  238|  3.74M|  return ((const Unaligned32 *)p)->u;
  239|  3.74M|}

lj_dispatch_init:
   61|  3.10k|{
   62|  3.10k|  uint32_t i;
   63|  3.10k|  ASMFunction *disp = GG->dispatch;
   64|   279k|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|   279k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 276k, False: 3.10k]
  ------------------
   65|   276k|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|   276k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   276k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|   276k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|   276k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|   204k|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  3.10k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|   204k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   204k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 201k, False: 3.10k]
  ------------------
   67|   201k|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|   201k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|   201k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  3.10k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  3.10k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  3.10k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  3.10k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  3.10k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  3.10k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  3.10k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  3.10k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|   180k|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|   180k|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 176k, False: 3.10k]
  ------------------
   78|   176k|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|   176k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  3.10k|}
lj_dispatch_init_hotcount:
   87|  3.10k|{
   88|  3.10k|  int32_t hotloop = G2J(g)->param[JIT_P_hotloop];
  ------------------
  |  |  116|  3.10k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   89|  3.10k|  HotCount start = (HotCount)(hotloop*HOTCOUNT_LOOP - 1);
  ------------------
  |  |   78|  3.10k|#define HOTCOUNT_LOOP		2
  ------------------
   90|  3.10k|  HotCount *hotcount = G2GG(g)->hotcount;
  ------------------
  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
   91|  3.10k|  uint32_t i;
   92|   201k|  for (i = 0; i < HOTCOUNT_SIZE; i++)
  ------------------
  |  |   74|   201k|#define HOTCOUNT_SIZE		64
  ------------------
  |  Branch (92:15): [True: 198k, False: 3.10k]
  ------------------
   93|   198k|    hotcount[i] = start;
   94|  3.10k|}
lj_dispatch_update:
  107|  6.20k|{
  108|  6.20k|  uint8_t oldmode = g->dispatchmode;
  109|  6.20k|  uint8_t mode = 0;
  110|  6.20k|#if LJ_HASJIT
  111|  6.20k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  6.20k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  6.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  6.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  6.20k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|  3.10k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 3.10k, False: 3.10k]
  ------------------
  112|  6.20k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  6.20k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  6.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  6.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 0, False: 6.20k]
  ------------------
  113|  6.20k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  6.20k|#endif
  115|  6.20k|#if LJ_HASPROFILE
  116|  6.20k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  677|  6.20k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 6.20k]
  ------------------
  117|  6.20k|#endif
  118|  6.20k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  6.20k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  6.20k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  6.20k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  6.20k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 0, False: 6.20k]
  ------------------
  119|  6.20k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  6.20k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  6.20k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 0, False: 6.20k]
  ------------------
  120|  6.20k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  6.20k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  6.20k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 6.20k]
  ------------------
  121|  6.20k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 6.20k, False: 0]
  ------------------
  122|  6.20k|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|  6.20k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  6.20k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|  6.20k|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|  6.20k|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|  6.20k|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  6.20k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|  6.20k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  6.20k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 3.10k, False: 3.10k]
  ------------------
  128|  3.10k|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|  3.10k|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|  3.10k|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|  3.10k|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|  3.10k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|  3.10k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|  3.10k|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|  3.10k|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|  3.10k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.10k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|  3.10k|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|  3.10k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.10k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|  3.10k|      f_itern = &lj_vm_IITERN;
  138|  3.10k|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|  3.10k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  3.10k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|  3.10k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|  3.10k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|  3.10k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  3.10k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|  3.10k|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|  6.20k|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|  6.20k|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|  6.20k|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|  6.20k|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|  6.20k|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|  6.20k|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|  6.20k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|  6.20k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 0, False: 6.20k]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|      0|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 0, False: 0]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|      0|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|      0|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 0]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|      0|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|      0|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 0]
  ------------------
  164|      0|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|      0|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 0, False: 0]
  ------------------
  165|      0|	uint32_t i;
  166|      0|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 0, False: 0]
  ------------------
  167|      0|	  disp[i] = f;
  168|      0|      }
  169|  6.20k|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|  6.20k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 6.20k, False: 0]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|  6.20k|      disp[BC_FORL] = f_forl;
  172|  6.20k|      disp[BC_ITERL] = f_iterl;
  173|  6.20k|      disp[BC_ITERN] = f_itern;
  174|  6.20k|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|  6.20k|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|  6.20k|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 6.20k]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|  6.20k|      } else {
  182|  6.20k|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|  6.20k|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|  6.20k|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|  6.20k|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|  6.20k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  6.20k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|  6.20k|      }
  187|  6.20k|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|  6.20k|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|  6.20k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 0, False: 6.20k]
  ------------------
  191|      0|      uint32_t i;
  192|      0|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|      0|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 0, False: 0]
  ------------------
  193|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 0, False: 0]
  ------------------
  194|      0|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|      0|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|      0|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|      0|      } else {
  196|      0|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|      0|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|      0|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|      0|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 0, False: 0]
  ------------------
  197|      0|	  disp[i] = lj_vm_callhook;
  198|      0|      }
  199|      0|    }
  200|  6.20k|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|  6.20k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 6.20k, False: 0]
  ------------------
  201|  6.20k|      disp[BC_FUNCF] = f_funcf;
  202|  6.20k|      disp[BC_FUNCV] = f_funcv;
  203|  6.20k|    }
  204|       |
  205|  6.20k|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|  6.20k|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  6.20k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  3.10k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 3.10k, False: 3.10k]
  |  Branch (207:34): [True: 3.10k, False: 0]
  ------------------
  208|  3.10k|      lj_dispatch_init_hotcount(g);
  209|  6.20k|#endif
  210|  6.20k|  }
  211|  6.20k|}

lj_err_unwind_dwarf:
  445|  5.82k|{
  446|  5.82k|  void *cf;
  447|  5.82k|  lua_State *L;
  448|  5.82k|  if (version != 1)
  ------------------
  |  Branch (448:7): [True: 0, False: 5.82k]
  ------------------
  449|      0|    return _URC_FATAL_PHASE1_ERROR;
  ------------------
  |  |  409|      0|#define _URC_FATAL_PHASE1_ERROR	3
  ------------------
  450|  5.82k|  cf = (void *)_Unwind_GetCFA(ctx);
  451|  5.82k|  L = cframe_L(cf);
  ------------------
  |  |  285|  5.82k|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|  5.82k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  452|  5.82k|  if ((actions & _UA_SEARCH_PHASE)) {
  ------------------
  |  |  437|  5.82k|#define _UA_SEARCH_PHASE	1
  ------------------
  |  Branch (452:7): [True: 2.91k, False: 2.91k]
  ------------------
  453|  2.91k|#if LJ_UNWIND_EXT
  454|  2.91k|    if (err_unwind(L, cf, 0) == NULL)
  ------------------
  |  Branch (454:9): [True: 0, False: 2.91k]
  ------------------
  455|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  412|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  456|  2.91k|#endif
  457|  2.91k|    if (!LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  417|  2.91k|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  415|  2.91k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  |  Branch (457:9): [True: 0, False: 2.91k]
  ------------------
  458|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_ERRCPP));
  459|      0|    }
  460|  2.91k|    return _URC_HANDLER_FOUND;
  ------------------
  |  |  410|  2.91k|#define _URC_HANDLER_FOUND	6
  ------------------
  461|  2.91k|  }
  462|  2.91k|  if ((actions & _UA_CLEANUP_PHASE)) {
  ------------------
  |  |  438|  2.91k|#define _UA_CLEANUP_PHASE	2
  ------------------
  |  Branch (462:7): [True: 2.91k, False: 0]
  ------------------
  463|  2.91k|    int errcode;
  464|  2.91k|    if (LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  417|  2.91k|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  415|  2.91k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  |  |  |  Branch (417:31): [True: 2.91k, False: 0]
  |  |  ------------------
  ------------------
  465|  2.91k|      errcode = LJ_UEXCLASS_ERRCODE(uexclass);
  ------------------
  |  |  418|  2.91k|#define LJ_UEXCLASS_ERRCODE(cl)	((int)((cl) & 0xff))
  ------------------
  466|  2.91k|    } else {
  467|      0|      if ((actions & _UA_HANDLER_FRAME))
  ------------------
  |  |  439|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (467:11): [True: 0, False: 0]
  ------------------
  468|      0|	_Unwind_DeleteException(uex);
  469|      0|      errcode = LUA_ERRRUN;
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  470|      0|    }
  471|  2.91k|#if LJ_UNWIND_EXT
  472|  2.91k|    cf = err_unwind(L, cf, errcode);
  473|  2.91k|    if ((actions & _UA_FORCE_UNWIND)) {
  ------------------
  |  |  440|  2.91k|#define _UA_FORCE_UNWIND	8
  ------------------
  |  Branch (473:9): [True: 0, False: 2.91k]
  ------------------
  474|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  412|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  475|  2.91k|    } else if (cf) {
  ------------------
  |  Branch (475:16): [True: 2.91k, False: 0]
  ------------------
  476|  2.91k|      ASMFunction ip;
  477|  2.91k|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|  2.91k|#define LJ_TARGET_EHRETREG	0
  ------------------
  478|  2.91k|      ip = cframe_unwind_ff(cf) ? lj_vm_unwind_ff_eh : lj_vm_unwind_c_eh;
  ------------------
  |  |  293|  2.91k|#define cframe_unwind_ff(cf)	((intptr_t)(cf) & CFRAME_UNWIND_FF)
  |  |  ------------------
  |  |  |  |  276|  2.91k|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  ------------------
  |  |  |  Branch (293:30): [True: 0, False: 2.91k]
  |  |  ------------------
  ------------------
  479|  2.91k|      _Unwind_SetIP(ctx, (uintptr_t)lj_ptr_strip(ip));
  ------------------
  |  | 1059|  2.91k|#define lj_ptr_strip(ptr) (ptr)
  ------------------
  480|  2.91k|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  411|  2.91k|#define _URC_INSTALL_CONTEXT	7
  ------------------
  481|  2.91k|    }
  482|      0|#if LJ_TARGET_X86ORX64
  483|      0|    else if ((actions & _UA_HANDLER_FRAME)) {
  ------------------
  |  |  439|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (483:14): [True: 0, False: 0]
  ------------------
  484|       |      /* Workaround for ancient libgcc bug. Still present in RHEL 5.5. :-/
  485|       |      ** Real fix: http://gcc.gnu.org/viewcvs/trunk/gcc/unwind-dw2.c?r1=121165&r2=124837&pathrev=153877&diff_format=h
  486|       |      */
  487|      0|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|      0|#define LJ_TARGET_EHRETREG	0
  ------------------
  488|      0|      _Unwind_SetIP(ctx, (uintptr_t)lj_vm_unwind_rethrow);
  489|      0|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  411|      0|#define _URC_INSTALL_CONTEXT	7
  ------------------
  490|      0|    }
  491|  2.91k|#endif
  492|       |#else
  493|       |    /* This is not the proper way to escape from the unwinder. We get away with
  494|       |    ** it on non-x64 because the interpreter restores all callee-saved regs.
  495|       |    */
  496|       |    lj_err_throw(L, errcode);
  497|       |#if LJ_TARGET_X64
  498|       |#error "Broken build system -- only use the provided Makefiles!"
  499|       |#endif
  500|       |#endif
  501|  2.91k|  }
  502|      0|  return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  412|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  503|  2.91k|}
lj_err_verify:
  511|  3.10k|{
  512|  3.10k|#if !LJ_TARGET_OSX
  513|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  514|  3.10k|  struct dwarf_eh_bases ehb;
  515|  3.10k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  3.10k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  516|  3.10k|#endif
  517|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  518|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  519|       |  */
  520|  3.10k|}
lj_err_throw:
  775|  2.91k|{
  776|  2.91k|  global_State *g = G(L);
  ------------------
  |  |  705|  2.91k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.91k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  777|  2.91k|  lj_trace_abort(g);
  ------------------
  |  |   45|  2.91k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  2.91k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  2.91k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  2.91k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  778|  2.91k|  L->status = LUA_OK;
  ------------------
  |  |   43|  2.91k|#define LUA_OK		0
  ------------------
  779|  2.91k|#if LJ_UNWIND_EXT
  780|  2.91k|  err_raise_ext(g, errcode);
  781|       |  /*
  782|       |  ** A return from this function signals a corrupt C stack that cannot be
  783|       |  ** unwound. We have no choice but to call the panic function and exit.
  784|       |  **
  785|       |  ** Usually this is caused by a C function without unwind information.
  786|       |  ** This may happen if you've manually enabled LUAJIT_UNWIND_EXTERNAL
  787|       |  ** and forgot to recompile *every* non-C++ file with -funwind-tables.
  788|       |  */
  789|  2.91k|  if (G(L)->panic)
  ------------------
  |  |  705|  2.91k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.91k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (789:7): [True: 0, False: 2.91k]
  ------------------
  790|      0|    G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  791|       |#else
  792|       |#if LJ_HASJIT
  793|       |  setmref(g->jit_base, NULL);
  794|       |#endif
  795|       |  {
  796|       |    void *cf = err_unwind(L, NULL, errcode);
  797|       |    if (cframe_unwind_ff(cf))
  798|       |      lj_vm_unwind_ff(cframe_raw(cf));
  799|       |    else
  800|       |      lj_vm_unwind_c(cframe_raw(cf), errcode);
  801|       |  }
  802|       |#endif
  803|  2.91k|  exit(EXIT_FAILURE);
  804|  2.91k|}
lj_err_str:
  808|  3.10k|{
  809|  3.10k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  3.10k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  810|  3.10k|}
lj_err_run:
  886|    637|{
  887|    637|  ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  578|  1.27k|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  217|    637|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    637|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 637]
  |  |  ------------------
  ------------------
  888|    637|  if (ef) {
  ------------------
  |  Branch (888:7): [True: 0, False: 637]
  ------------------
  889|      0|    TValue *errfunc, *top;
  890|      0|    lj_state_checkstack(L, LUA_MINSTACK * 2);  /* Might raise new error. */
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  891|      0|    lj_trace_abort(G(L));
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  892|      0|    errfunc = restorestack(L, ef);
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  893|      0|    top = L->top;
  894|      0|    if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
                  if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  |  Branch (894:9): [True: 0, False: 0]
  |  Branch (894:31): [True: 0, False: 0]
  ------------------
  895|      0|      setstrV(L, top-1, lj_err_str(L, LJ_ERR_ERRERR));
  896|      0|      lj_err_throw(L, LUA_ERRERR);
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  897|      0|    }
  898|      0|    L->status = LUA_ERRERR;
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  899|      0|    copyTV(L, top+LJ_FR2, top-1);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  900|      0|    copyTV(L, top-1, errfunc);
  901|      0|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  902|      0|    L->top = top+1;
  903|      0|    lj_vm_call(L, top, 1+1);  /* Stack: |errfunc|msg| -> |msg| */
  904|      0|  }
  905|    637|  lj_err_throw(L, LUA_ERRRUN);
  ------------------
  |  |   45|    637|#define LUA_ERRRUN	2
  ------------------
  906|    637|}
lj_err_lex:
  952|  2.27k|{
  953|  2.27k|  char buff[LUA_IDSIZE];
  954|  2.27k|  const char *msg;
  955|  2.27k|  lj_debug_shortname(buff, src, line);
  956|  2.27k|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|  2.27k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  957|  2.27k|  msg = lj_strfmt_pushf(L, "%s:%d: %s", buff, line, msg);
  958|  2.27k|  if (tok)
  ------------------
  |  Branch (958:7): [True: 2.26k, False: 8]
  ------------------
  959|  2.26k|    lj_strfmt_pushf(L, err2msg(LJ_ERR_XNEAR), msg, tok);
  ------------------
  |  |   21|  2.26k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  960|  2.27k|  lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|  2.27k|#define LUA_ERRSYNTAX	3
  ------------------
  961|  2.27k|}
lj_err_optype:
  965|    424|{
  966|    424|  const char *tname = lj_typename(o);
  ------------------
  |  | 1042|    424|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|    424|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|    424|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    424|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|    424|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|    424|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 22, False: 402]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     22|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    402|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  967|    424|  const char *opname = err2msg(opm);
  ------------------
  |  |   21|    424|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  968|    424|  if (curr_funcisL(L)) {
  ------------------
  |  |  716|    424|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|    424|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|    424|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 424, False: 0]
  |  |  ------------------
  ------------------
  969|    424|    GCproto *pt = curr_proto(L);
  ------------------
  |  |  717|    424|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  ------------------
  |  |  |  |  480|    424|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    424|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    424|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    424|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 424, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    424|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  970|    424|    const BCIns *pc = cframe_Lpc(L) - 1;
  ------------------
  |  |  295|    424|#define cframe_Lpc(L)		cframe_pc(cframe_raw(L->cframe))
  |  |  ------------------
  |  |  |  |  287|    424|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    424|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  971|    424|    const char *oname = NULL;
  972|    424|    const char *kind = lj_debug_slotname(pt, pc, (BCReg)(o-L->base), &oname);
  973|    424|    if (kind)
  ------------------
  |  Branch (973:9): [True: 364, False: 60]
  ------------------
  974|    364|      err_msgv(L, LJ_ERR_BADOPRT, opname, kind, oname, tname);
  975|    424|  }
  976|     60|  err_msgv(L, LJ_ERR_BADOPRV, opname, tname);
  977|    424|}
lj_err_comp:
  981|     84|{
  982|     84|  const char *t1 = lj_typename(o1);
  ------------------
  |  | 1042|     84|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|     84|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|     84|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|     84|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|     84|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|     84|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 17, False: 67]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     17|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     67|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  983|     84|  const char *t2 = lj_typename(o2);
  ------------------
  |  | 1042|     84|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|     84|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|     84|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|     84|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|     84|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|     84|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 43, False: 41]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     43|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     41|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  984|     84|  err_msgv(L, t1 == t2 ? LJ_ERR_BADCMPV : LJ_ERR_BADCMPT, t1, t2);
  ------------------
  |  Branch (984:15): [True: 5, False: 79]
  ------------------
  985|       |  /* This assumes the two "boolean" entries are commoned by the C compiler. */
  986|     84|}
lj_err_optype_call:
  990|    131|{
  991|       |  /* Gross hack if lua_[p]call or pcall/xpcall fail for a non-callable object:
  992|       |  ** L->base still points to the caller. So add a dummy frame with L instead
  993|       |  ** of a function. See lua_getstack().
  994|       |  */
  995|    131|  const BCIns *pc = cframe_Lpc(L);
  ------------------
  |  |  295|    131|#define cframe_Lpc(L)		cframe_pc(cframe_raw(L->cframe))
  |  |  ------------------
  |  |  |  |  287|    131|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    131|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  996|    131|  if (((ptrdiff_t)pc & FRAME_TYPE) != FRAME_LUA) {
  ------------------
  |  |   28|    131|#define FRAME_TYPE		3
  ------------------
  |  Branch (996:7): [True: 0, False: 131]
  ------------------
  997|      0|    const char *tname = lj_typename(o);
  ------------------
  |  | 1042|      0|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|      0|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  998|      0|    setframe_gc(o, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|      0|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  999|      0|    if (LJ_FR2) o++;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1000|      0|    setframe_pc(o, pc);
  ------------------
  |  |   51|      0|#define setframe_pc(f, pc)	((f)->ftsz = (int64_t)(intptr_t)(pc))
  ------------------
 1001|      0|    L->top = L->base = o+1;
 1002|      0|    err_msgv(L, LJ_ERR_BADCALL, tname);
 1003|      0|  }
 1004|    131|  lj_err_optype(L, o, LJ_ERR_OPCALL);
 1005|    131|}
lj_err_callermsg:
 1009|    129|{
 1010|    129|  TValue *frame = NULL, *pframe = NULL;
 1011|    129|  if (!(LJ_HASJIT && tvref(G(L)->jit_base))) {
  ------------------
  |  |  578|    258|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (!(LJ_HASJIT && tvref(G(L)->jit_base))) {
  ------------------
  |  |  217|    129|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    129|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 129]
  |  |  ------------------
  ------------------
 1012|    129|    frame = L->base-1;
 1013|    129|    if (frame_islua(frame)) {
  ------------------
  |  |   77|    129|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|    129|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    129|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|    129|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 6, False: 123]
  |  |  ------------------
  ------------------
 1014|      6|      pframe = frame_prevl(frame);
  ------------------
  |  |  108|      6|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      6|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      6|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
 1015|    123|    } else if (frame_iscont(frame)) {
  ------------------
  |  |   79|    123|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|    123|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    123|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    123|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    123|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    123|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 123, False: 0]
  |  |  ------------------
  ------------------
 1016|    123|      if (frame_iscont_fficb(frame)) {
  ------------------
  |  |  106|    123|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|    246|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|    123|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 123]
  |  |  ------------------
  ------------------
 1017|      0|	pframe = frame;
 1018|      0|	frame = NULL;
 1019|    123|      } else {
 1020|    123|	pframe = frame_prevd(frame);
  ------------------
  |  |  109|    123|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|    123|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    123|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    123|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    123|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    123|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|    123|#if LJ_HASFFI
 1022|       |	/* Remove frame for FFI metamethods. */
 1023|    123|	if (frame_func(frame)->c.ffid >= FF_ffi_meta___index &&
  ------------------
  |  |   83|    123|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    123|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    123|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    123|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    123|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1023:6): [True: 123, False: 0]
  ------------------
 1024|    123|	    frame_func(frame)->c.ffid <= FF_ffi_meta___tostring) {
  ------------------
  |  |   83|    123|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    123|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    123|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    123|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    123|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1024:6): [True: 123, False: 0]
  ------------------
 1025|    123|	  L->base = pframe+1;
 1026|    123|	  L->top = frame;
 1027|    123|	  setcframe_pc(cframe_raw(L->cframe), frame_contpc(frame));
  ------------------
  |  |  291|    123|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|    123|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
 1028|    123|	}
 1029|    123|#endif
 1030|    123|      }
 1031|    123|    }
 1032|    129|  }
 1033|    129|  lj_debug_addloc(L, msg, pframe, frame);
 1034|    129|  lj_err_run(L);
 1035|    129|}
lj_err_callerv:
 1039|    129|{
 1040|    129|  const char *msg;
 1041|    129|  va_list argp;
 1042|    129|  va_start(argp, em);
 1043|    129|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|    129|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1044|    129|  va_end(argp);
 1045|    129|  lj_err_callermsg(L, msg);
 1046|    129|}
lj_err.c:err_unwind:
  110|  5.82k|{
  111|  5.82k|  TValue *frame = L->base-1;
  112|  5.82k|  void *cf = L->cframe;
  113|  7.11k|  while (cf) {
  ------------------
  |  Branch (113:10): [True: 7.11k, False: 0]
  ------------------
  114|  7.11k|    int32_t nres = cframe_nres(cframe_raw(cf));
  ------------------
  |  |  280|  7.11k|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  7.11k|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  115|  7.11k|    if (nres < 0) {  /* C frame without Lua frame? */
  ------------------
  |  Branch (115:9): [True: 4.55k, False: 2.56k]
  ------------------
  116|  4.55k|      TValue *top = restorestack(L, -nres);
  ------------------
  |  |   15|  4.55k|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|  4.55k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  117|  4.55k|      if (frame < top) {  /* Frame reached? */
  ------------------
  |  Branch (117:11): [True: 4.55k, False: 0]
  ------------------
  118|  4.55k|	if (errcode) {
  ------------------
  |  Branch (118:6): [True: 2.27k, False: 2.27k]
  ------------------
  119|  2.27k|	  L->base = frame+1;
  120|  2.27k|	  L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|  2.27k|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  2.27k|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  121|  2.27k|	  unwindstack(L, top);
  122|  2.27k|	}
  123|  4.55k|	return cf;
  124|  4.55k|      }
  125|  4.55k|    }
  126|  2.56k|    if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  217|  2.56k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.56k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  569|  2.56k|#define LJ_FR2			1
  ------------------
  |  Branch (126:9): [True: 0, False: 2.56k]
  ------------------
  127|      0|      break;
  128|  2.56k|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|  2.56k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  2.56k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  2.56k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  2.56k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  2.56k|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (76:25): [True: 0, False: 2.56k]
  |  |  ------------------
  ------------------
  129|      4|    case FRAME_LUA:  /* Lua frame. */
  ------------------
  |  Branch (129:5): [True: 4, False: 2.55k]
  ------------------
  130|     12|    case FRAME_LUAP:
  ------------------
  |  Branch (130:5): [True: 8, False: 2.55k]
  ------------------
  131|     12|      frame = frame_prevl(frame);
  ------------------
  |  |  108|     12|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|     12|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|     12|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  132|     12|      break;
  133|      0|    case FRAME_C:  /* C frame. */
  ------------------
  |  Branch (133:5): [True: 0, False: 2.56k]
  ------------------
  134|      0|    unwind_c:
  135|      0|#if LJ_UNWIND_EXT
  136|      0|      if (errcode) {
  ------------------
  |  Branch (136:11): [True: 0, False: 0]
  ------------------
  137|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|      0|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  139|      0|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  140|      0|      } else if (cf != stopcf) {
  ------------------
  |  Branch (140:18): [True: 0, False: 0]
  ------------------
  141|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  142|      0|	frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  143|      0|	break;
  144|      0|      }
  145|      0|      return NULL;  /* Continue unwinding. */
  146|       |#else
  147|       |      UNUSED(stopcf);
  148|       |      cf = cframe_prev(cf);
  149|       |      frame = frame_prevd(frame);
  150|       |      break;
  151|       |#endif
  152|  1.27k|    case FRAME_CP:  /* Protected C frame. */
  ------------------
  |  Branch (152:5): [True: 1.27k, False: 1.28k]
  ------------------
  153|  1.27k|      if (cframe_canyield(cf)) {  /* Resume? */
  ------------------
  |  |  292|  1.27k|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|  1.27k|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 0, False: 1.27k]
  |  |  ------------------
  ------------------
  154|      0|	if (errcode) {
  ------------------
  |  Branch (154:6): [True: 0, False: 0]
  ------------------
  155|      0|	  hook_leave(G(L));  /* Assumes nobody uses coroutines inside hooks. */
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  156|      0|	  L->cframe = NULL;
  157|      0|	  L->status = (uint8_t)errcode;
  158|      0|	}
  159|      0|	return cf;
  160|      0|      }
  161|  1.27k|      if (errcode) {
  ------------------
  |  Branch (161:11): [True: 637, False: 637]
  ------------------
  162|    637|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|    637|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|    637|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    637|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    637|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    637|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    637|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  163|    637|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|    637|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|    637|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  164|    637|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|    637|#define LJ_FR2			1
  ------------------
  165|    637|      }
  166|  1.27k|      return cf;
  167|      0|    case FRAME_CONT:  /* Continuation frame. */
  ------------------
  |  Branch (167:5): [True: 0, False: 2.56k]
  ------------------
  168|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  169|      0|	goto unwind_c;
  170|       |      /* fallthrough */
  171|  1.27k|    case FRAME_VARG:  /* Vararg frame. */
  ------------------
  |  Branch (171:5): [True: 1.27k, False: 1.28k]
  ------------------
  172|  1.27k|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  1.27k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  1.27k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.27k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  1.27k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  1.27k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.27k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|  1.27k|      break;
  174|      0|    case FRAME_PCALL:  /* FF pcall() frame. */
  ------------------
  |  Branch (174:5): [True: 0, False: 2.56k]
  ------------------
  175|      0|    case FRAME_PCALLH:  /* FF pcall() frame inside hook. */
  ------------------
  |  Branch (175:5): [True: 0, False: 2.56k]
  ------------------
  176|      0|      if (errcode) {
  ------------------
  |  Branch (176:11): [True: 0, False: 0]
  ------------------
  177|      0|	global_State *g;
  178|      0|	if (errcode == LUA_YIELD) {
  ------------------
  |  |   44|      0|#define LUA_YIELD	1
  ------------------
  |  Branch (178:6): [True: 0, False: 0]
  ------------------
  179|      0|	  frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      0|	  break;
  181|      0|	}
  182|      0|	g = G(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  183|      0|	setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  184|      0|	if (frame_typep(frame) == FRAME_PCALL)
  ------------------
  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (184:6): [True: 0, False: 0]
  ------------------
  185|      0|	  hook_leave(g);
  ------------------
  |  |  683|      0|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|      0|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  186|      0|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|      0|	L->cframe = cf;
  188|      0|	unwindstack(L, L->base);
  189|      0|      }
  190|      0|      return (void *)((intptr_t)cf | CFRAME_UNWIND_FF);
  ------------------
  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  ------------------
  191|  2.56k|    }
  192|  2.56k|  }
  193|       |  /* No C frame. */
  194|      0|  if (errcode) {
  ------------------
  |  Branch (194:7): [True: 0, False: 0]
  ------------------
  195|      0|    L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  196|      0|    L->cframe = NULL;
  197|      0|    unwindstack(L, L->base);
  198|      0|    if (G(L)->panic)
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (198:9): [True: 0, False: 0]
  ------------------
  199|      0|      G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  200|      0|    exit(EXIT_FAILURE);
  201|      0|  }
  202|      0|  return L;  /* Anything non-NULL will do. */
  203|      0|}
lj_err.c:unwindstack:
   99|  2.91k|{
  100|  2.91k|  lj_func_closeuv(L, top);
  101|  2.91k|  if (top < L->top-1) {
  ------------------
  |  Branch (101:7): [True: 2.91k, False: 2]
  ------------------
  102|  2.91k|    copyTV(L, top, L->top-1);
  103|  2.91k|    L->top = top+1;
  104|  2.91k|  }
  105|  2.91k|  lj_state_relimitstack(L);
  106|  2.91k|}
lj_err.c:err_raise_ext:
  760|  2.91k|{
  761|  2.91k|  memset(&static_uex, 0, sizeof(static_uex));
  762|  2.91k|  static_uex.ex.exclass = LJ_UEXCLASS_MAKE(errcode);
  ------------------
  |  |  416|  2.91k|#define LJ_UEXCLASS_MAKE(c)	(LJ_UEXCLASS | (uint64_t)(c))
  |  |  ------------------
  |  |  |  |  415|  2.91k|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  763|  2.91k|  static_uex.g = g;
  764|  2.91k|  _Unwind_RaiseException(&static_uex.ex);
  765|  2.91k|}
lj_err.c:finderrfunc:
  835|    637|{
  836|    637|  cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|    637|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    637|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|    637|#define LJ_FR2			1
  ------------------
  837|    637|  void *cf = L->cframe;
  838|  1.28k|  while (frame > bot && cf) {
  ------------------
  |  Branch (838:10): [True: 1.28k, False: 0]
  |  Branch (838:25): [True: 1.28k, False: 0]
  ------------------
  839|  1.28k|    while (cframe_nres(cframe_raw(cf)) < 0) {  /* cframe without frame? */
  ------------------
  |  |  280|  1.28k|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  1.28k|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (839:12): [True: 0, False: 1.28k]
  ------------------
  840|      0|      if (frame >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (840:11): [True: 0, False: 0]
  ------------------
  841|      0|	break;
  842|      0|      if (cframe_errfunc(cf) >= 0)  /* Error handler not inherited (-1)? */
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (842:11): [True: 0, False: 0]
  ------------------
  843|      0|	return cframe_errfunc(cf);
  ------------------
  |  |  279|      0|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|      0|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  844|      0|      cf = cframe_prev(cf);  /* Else unwind cframe and continue searching. */
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  845|      0|      if (cf == NULL)
  ------------------
  |  Branch (845:11): [True: 0, False: 0]
  ------------------
  846|      0|	return 0;
  847|      0|    }
  848|  1.28k|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|  1.28k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  1.28k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  1.28k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  1.28k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  1.28k|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  849|      2|    case FRAME_LUA:
  ------------------
  |  Branch (849:5): [True: 2, False: 1.27k]
  ------------------
  850|      6|    case FRAME_LUAP:
  ------------------
  |  Branch (850:5): [True: 4, False: 1.27k]
  ------------------
  851|      6|      frame = frame_prevl(frame);
  ------------------
  |  |  108|      6|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      6|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      6|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  852|      6|      break;
  853|      0|    case FRAME_C:
  ------------------
  |  Branch (853:5): [True: 0, False: 1.28k]
  ------------------
  854|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  855|       |      /* fallthrough */
  856|    637|    case FRAME_VARG:
  ------------------
  |  Branch (856:5): [True: 637, False: 643]
  ------------------
  857|    637|      frame = frame_prevd(frame);
  ------------------
  |  |  109|    637|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|    637|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    637|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    637|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    637|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    637|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  858|    637|      break;
  859|      0|    case FRAME_CONT:
  ------------------
  |  Branch (859:5): [True: 0, False: 1.28k]
  ------------------
  860|      0|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  861|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  862|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  863|      0|      break;
  864|    637|    case FRAME_CP:
  ------------------
  |  Branch (864:5): [True: 637, False: 643]
  ------------------
  865|    637|      if (cframe_canyield(cf)) return 0;
  ------------------
  |  |  292|    637|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|    637|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 0, False: 637]
  |  |  ------------------
  ------------------
  866|    637|      if (cframe_errfunc(cf) >= 0)
  ------------------
  |  |  279|    637|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|    637|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (866:11): [True: 637, False: 0]
  ------------------
  867|    637|	return cframe_errfunc(cf);
  ------------------
  |  |  279|    637|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|    637|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  868|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  869|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  870|      0|      break;
  871|      0|    case FRAME_PCALL:
  ------------------
  |  Branch (871:5): [True: 0, False: 1.28k]
  ------------------
  872|      0|    case FRAME_PCALLH:
  ------------------
  |  Branch (872:5): [True: 0, False: 1.28k]
  ------------------
  873|      0|      if (frame_func(frame_prevd(frame))->c.ffid == FF_xpcall)
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (873:11): [True: 0, False: 0]
  ------------------
  874|      0|	return savestack(L, frame_prevd(frame)+1);  /* xpcall's errorfunc. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  875|      0|      return 0;
  876|      0|    default:
  ------------------
  |  Branch (876:5): [True: 0, False: 1.28k]
  ------------------
  877|      0|      lj_assertL(0, "bad frame type");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  878|      0|      return 0;
  879|  1.28k|    }
  880|  1.28k|  }
  881|      0|  return 0;
  882|    637|}
lj_err.c:err_msgv:
  928|    508|{
  929|    508|  const char *msg;
  930|    508|  va_list argp;
  931|    508|  va_start(argp, em);
  932|    508|  if (LJ_HASJIT) {
  ------------------
  |  |  578|    508|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  933|    508|    TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|    508|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    508|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  934|    508|    if (base) L->base = base;
  ------------------
  |  Branch (934:9): [True: 0, False: 508]
  ------------------
  935|    508|  }
  936|    508|  if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  716|    508|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|    508|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|    508|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 508, False: 0]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  718|    508|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|    508|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|    508|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|    508|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|    508|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|    508|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 508, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|    508|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  937|    508|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|    508|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  938|    508|  va_end(argp);
  939|    508|  lj_debug_addloc(L, msg, L->base-1, NULL);
  940|    508|  lj_err_run(L);
  941|    508|}

lj_func_freeproto:
   21|  25.6k|{
   22|  25.6k|  lj_mem_free(g, pt, pt->sizept);
   23|  25.6k|}
lj_func_closeuv:
   84|  9.12k|{
   85|  9.12k|  GCupval *uv;
   86|  9.12k|  global_State *g = G(L);
  ------------------
  |  |  705|  9.12k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  9.12k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  9.12k|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  9.12k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 0, False: 9.12k]
  ------------------
   88|  9.12k|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|      0|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 0, False: 0]
  ------------------
   89|      0|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|      0|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|      0|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|      0|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|      0|    if (isdead(g, o)) {
  ------------------
  |  |   37|      0|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|      0|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|      0|    } else {
   96|      0|      unlinkuv(g, uv);
   97|      0|      lj_gc_closeuv(g, uv);
   98|      0|    }
   99|      0|  }
  100|  9.12k|}
lj_func_newC:
  112|   551k|{
  113|   551k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|   551k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|   551k|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|   551k|#define LJ_TFUNC		(~8u)
  ------------------
  115|   551k|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|   551k|#define FF_C		1
  ------------------
  116|   551k|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|   551k|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|   551k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|   551k|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|   551k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|   551k|  return fn;
  121|   551k|}
lj_func_newL_empty:
  141|  25.6k|{
  142|  25.6k|  GCfunc *fn = func_newL(L, pt, env);
  143|  25.6k|  MSize i, nuv = pt->sizeuv;
  144|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  145|  25.6k|  for (i = 0; i < nuv; i++) {
  ------------------
  |  Branch (145:15): [True: 0, False: 25.6k]
  ------------------
  146|      0|    GCupval *uv = func_emptyuv(L);
  147|      0|    int32_t v = proto_uv(pt)[i];
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  148|      0|    uv->immutable = ((v / PROTO_UV_IMMUTABLE) & 1);
  ------------------
  |  |  413|      0|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
  149|      0|    uv->dhash = (uint32_t)(uintptr_t)pt ^ (v << 24);
  150|      0|    setgcref(fn->l.uvptr[i], obj2gco(uv));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  151|      0|  }
  152|  25.6k|  fn->l.nupvalues = (uint8_t)nuv;
  153|  25.6k|  return fn;
  154|  25.6k|}
lj_func_free:
  186|   576k|{
  187|   576k|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|   576k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   576k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 25.6k, False: 551k]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|  25.6k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|   576k|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  1.12M|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|   576k|  lj_mem_free(g, fn, size);
  190|   576k|}
lj_func.c:func_newL:
  124|  25.6k|{
  125|  25.6k|  uint32_t count;
  126|  25.6k|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeLfunc((MSize)pt->sizeuv));
  ------------------
  |  |  482|  25.6k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  127|  25.6k|  fn->l.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  25.6k|#define LJ_TFUNC		(~8u)
  ------------------
  128|  25.6k|  fn->l.ffid = FF_LUA;
  ------------------
  |  |  474|  25.6k|#define FF_LUA		0
  ------------------
  129|  25.6k|  fn->l.nupvalues = 0;  /* Set to zero until upvalues are initialized. */
  130|       |  /* NOBARRIER: Really a setgcref. But the GCfunc is new (marked white). */
  131|  25.6k|  setmref(fn->l.pc, proto_bc(pt));
  ------------------
  |  |   39|  25.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  132|  25.6k|  setgcref(fn->l.env, obj2gco(env));
  ------------------
  |  |   72|  25.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  133|       |  /* Saturating 3 bit counter (0..7) for created closures. */
  134|  25.6k|  count = (uint32_t)pt->flags + PROTO_CLCOUNT;
  ------------------
  |  |  408|  25.6k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  135|  25.6k|  pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  409|  25.6k|#define PROTO_CLC_BITS		3
  ------------------
                pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  408|  25.6k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  136|  25.6k|  return fn;
  137|  25.6k|}

lj_gc_separateudata:
  142|  6.31k|{
  143|  6.31k|  size_t m = 0;
  144|  6.31k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  665|  6.31k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  6.31k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|  6.31k|  GCobj *o;
  146|  32.6k|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  32.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 26.3k, False: 6.31k]
  ------------------
  147|  26.3k|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|  52.7k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  26.3k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  26.3k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  26.3k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 24.1k, False: 2.21k]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|  51.7k|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  25.8k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 12.9k, False: 12.9k]
  |  |  |  Branch (40:27): [True: 25.8k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 1.70k, False: 510]
  ------------------
  148|  13.4k|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|  13.4k|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|  25.8k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 3.10k, False: 9.82k]
  |  |  |  Branch (20:5): [True: 12.9k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 9.82k]
  |  |  |  Branch (20:28): [True: 9.82k, False: 0]
  |  |  ------------------
  |  |   21|  19.6k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  9.82k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  9.82k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  9.82k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 9.82k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 3.10k, False: 9.82k]
  ------------------
  150|  3.10k|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|  3.10k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  3.10k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|  3.10k|      p = &o->gch.nextgc;
  152|  9.82k|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|  9.82k|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|  19.6k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 9.82k, False: 0]
  |  |  ------------------
  ------------------
  154|  9.82k|      markfinalized(o);
  ------------------
  |  |   46|  9.82k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  9.82k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|  9.82k|      *p = o->gch.nextgc;
  156|  9.82k|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|  9.82k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 6.71k, False: 3.10k]
  |  |  ------------------
  ------------------
  157|  6.71k|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  6.71k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|  6.71k|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|  6.71k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|  6.71k|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|  6.71k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|  6.71k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  6.71k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|  6.71k|      } else {  /* Create circular list. */
  162|  3.10k|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|  3.10k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|  3.10k|      }
  165|  9.82k|    }
  166|  26.3k|  }
  167|  6.31k|  return m;
  168|  6.31k|}
lj_gc_finalize_udata:
  576|  3.10k|{
  577|  12.9k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  12.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (577:10): [True: 9.82k, False: 3.10k]
  ------------------
  578|  9.82k|    gc_finalize(L);
  579|  3.10k|}
lj_gc_finalize_cdata:
  584|  3.10k|{
  585|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  586|  3.10k|  GCtab *t = tabref(g->gcroot[GCROOT_FFI_FIN]);
  ------------------
  |  |  514|  3.10k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  587|  3.10k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  3.10k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  3.10k|  ptrdiff_t i;
  589|  3.10k|  setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|  3.10k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  590|  9.31k|  for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (590:33): [True: 6.20k, False: 3.10k]
  ------------------
  591|  6.20k|    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  782|  12.4k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                  if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  799|  3.10k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  3.10k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  3.10k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 3.10k]
  |  |  ------------------
  ------------------
  |  Branch (591:9): [True: 3.10k, False: 3.10k]
  ------------------
  592|      0|      GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  593|      0|      TValue tmp;
  594|      0|      makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  595|      0|      o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  596|      0|      copyTV(L, &tmp, &node[i].val);
  597|      0|      setnilV(&node[i].val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  598|      0|      gc_call_finalizer(g, L, &tmp, o);
  599|      0|    }
  600|  3.10k|}
lj_gc_freeall:
  605|  3.10k|{
  606|  3.10k|  MSize i;
  607|       |  /* Free everything, except super-fixed objects (the main thread). */
  608|  3.10k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  3.10k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  3.10k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  3.10k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  3.10k|#define LJ_GC_SFIXED	0x40
  ------------------
  609|  3.10k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  401|  3.10k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  610|  1.00M|  for (i = g->str.mask; i != ~(MSize)0; i--)  /* Free all string hash chains. */
  ------------------
  |  Branch (610:25): [True: 1.00M, False: 3.10k]
  ------------------
  611|  1.00M|    gc_sweepstr(g, &g->str.tab[i]);
  612|  3.10k|}
lj_gc_step:
  721|  2.70k|{
  722|  2.70k|  global_State *g = G(L);
  ------------------
  |  |  705|  2.70k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.70k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  723|  2.70k|  GCSize lim;
  724|  2.70k|  int32_t ostate = g->vmstate;
  725|  2.70k|  setvmstate(g, GC);
  ------------------
  |  |  539|  2.70k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  726|  2.70k|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|  2.70k|#define GCSTEPSIZE	1024u
  ------------------
  727|  2.70k|  if (lim == 0)
  ------------------
  |  Branch (727:7): [True: 0, False: 2.70k]
  ------------------
  728|      0|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  729|  2.70k|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (729:7): [True: 2.13k, False: 568]
  ------------------
  730|  2.13k|    g->gc.debt += g->gc.total - g->gc.threshold;
  731|  93.9k|  do {
  732|  93.9k|    lim -= (GCSize)gc_onestep(L);
  733|  93.9k|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (733:9): [True: 21, False: 93.9k]
  ------------------
  734|     21|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  735|     21|      g->vmstate = ostate;
  736|     21|      return 1;  /* Finished a GC cycle. */
  737|     21|    }
  738|  93.9k|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (738:12): [Folded - Ignored]
  |  Branch (738:12): [True: 91.2k, False: 2.67k]
  ------------------
  739|  2.67k|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|  2.67k|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (739:7): [True: 1.02k, False: 1.65k]
  ------------------
  740|  1.02k|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|  1.02k|#define GCSTEPSIZE	1024u
  ------------------
  741|  1.02k|    g->vmstate = ostate;
  742|  1.02k|    return -1;
  743|  1.65k|  } else {
  744|  1.65k|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|  1.65k|#define GCSTEPSIZE	1024u
  ------------------
  745|  1.65k|    g->gc.threshold = g->gc.total;
  746|  1.65k|    g->vmstate = ostate;
  747|  1.65k|    return 0;
  748|  1.65k|  }
  749|  2.67k|}
lj_gc_step_fixtop:
  753|      4|{
  754|      4|  if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  716|      4|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|      4|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|      4|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 4, False: 0]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  718|      4|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      4|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      4|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      4|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      4|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      4|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  755|      4|  lj_gc_step(L);
  756|      4|}
lj_mem_realloc:
  862|   955k|{
  863|   955k|  global_State *g = G(L);
  ------------------
  |  |  705|   955k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   955k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  864|   955k|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|   955k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   955k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 955k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   955k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  865|   955k|  p = g->allocf(g->allocd, p, osz, nsz);
  866|   955k|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (866:7): [True: 20, False: 955k]
  |  Branch (866:20): [True: 0, False: 20]
  ------------------
  867|      0|    lj_err_mem(L);
  868|   955k|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|   955k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   955k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 955k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   955k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  869|   955k|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|   955k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.91M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 955k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   955k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  870|   955k|	     "allocated memory address %p outside required range", p);
  871|   955k|  g->gc.total = (g->gc.total - osz) + nsz;
  872|   955k|  return p;
  873|   955k|}
lj_mem_newgco:
  877|   686k|{
  878|   686k|  global_State *g = G(L);
  ------------------
  |  |  705|   686k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   686k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  879|   686k|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  880|   686k|  if (o == NULL)
  ------------------
  |  Branch (880:7): [True: 0, False: 686k]
  ------------------
  881|      0|    lj_err_mem(L);
  882|   686k|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|   686k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.37M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 686k, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   686k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  883|   686k|	     "allocated memory address %p outside required range", o);
  884|   686k|  g->gc.total += size;
  885|   686k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|   686k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  886|   686k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|   686k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  887|   686k|  newwhite(g, o);
  ------------------
  |  |   40|   686k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|   686k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   686k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   686k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   686k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   686k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|   686k|  return o;
  889|   686k|}
lj_mem_grow:
  893|  8.87k|{
  894|  8.87k|  MSize sz = (*szp) << 1;
  895|  8.87k|  if (sz < LJ_MIN_VECSZ)
  ------------------
  |  |   81|  8.87k|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  |  Branch (895:7): [True: 3.15k, False: 5.71k]
  ------------------
  896|  3.15k|    sz = LJ_MIN_VECSZ;
  ------------------
  |  |   81|  3.15k|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  897|  8.87k|  if (sz > lim)
  ------------------
  |  Branch (897:7): [True: 0, False: 8.87k]
  ------------------
  898|      0|    sz = lim;
  899|  8.87k|  p = lj_mem_realloc(L, p, (*szp)*esz, sz*esz);
  900|  8.87k|  *szp = sz;
  901|  8.87k|  return p;
  902|  8.87k|}
lj_gc.c:gc_finalize:
  535|  9.82k|{
  536|  9.82k|  global_State *g = G(L);
  ------------------
  |  |  705|  9.82k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  9.82k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  537|  9.82k|  GCobj *o = gcnext(gcref(g->gc.mmudata));
  ------------------
  |  |   90|  9.82k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  9.82k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  538|  9.82k|  cTValue *mo;
  539|  9.82k|  lj_assertG(tvref(g->jit_base) == NULL, "finalizer called on trace");
  ------------------
  |  |  364|  9.82k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.82k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.82k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.82k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|       |  /* Unchain from list of userdata to be finalized. */
  541|  9.82k|  if (o == gcref(g->gc.mmudata))
  ------------------
  |  |   67|  9.82k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (541:7): [True: 3.10k, False: 6.71k]
  ------------------
  542|  3.10k|    setgcrefnull(g->gc.mmudata);
  ------------------
  |  |   76|  3.10k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  543|  6.71k|  else
  544|  6.71k|    setgcrefr(gcref(g->gc.mmudata)->gch.nextgc, o->gch.nextgc);
  ------------------
  |  |   77|  6.71k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  545|  9.82k|#if LJ_HASFFI
  546|  9.82k|  if (o->gch.gct == ~LJ_TCDATA) {
  ------------------
  |  |  270|  9.82k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (546:7): [True: 0, False: 9.82k]
  ------------------
  547|      0|    TValue tmp, *tv;
  548|       |    /* Add cdata back to the GC list and make it white. */
  549|      0|    setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  550|      0|    setgcref(g->gc.root, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  551|      0|    makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|      0|    o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  553|       |    /* Resolve finalizer. */
  554|      0|    setcdataV(L, &tmp, gco2cd(o));
  ------------------
  |  |  770|      0|#define gco2cd(o)	check_exp((o)->gch.gct == ~LJ_TCDATA, &(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|      0|    tv = lj_tab_set(L, tabref(g->gcroot[GCROOT_FFI_FIN]), &tmp);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  556|      0|    if (!tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (556:9): [True: 0, False: 0]
  ------------------
  557|      0|      copyTV(L, &tmp, tv);
  558|      0|      setnilV(tv);  /* Clear entry in finalizer table. */
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  559|      0|      gc_call_finalizer(g, L, &tmp, o);
  560|      0|    }
  561|      0|    return;
  562|      0|  }
  563|  9.82k|#endif
  564|       |  /* Add userdata back to the main userdata list and make it white. */
  565|  9.82k|  setgcrefr(o->gch.nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  9.82k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  566|  9.82k|  setgcref(mainthread(g)->nextgc, o);
  ------------------
  |  |   72|  9.82k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  567|  9.82k|  makewhite(g, o);
  ------------------
  |  |   42|  9.82k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  9.82k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  9.82k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  9.82k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  9.82k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  9.82k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  9.82k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  9.82k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  9.82k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  9.82k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  568|       |  /* Resolve the __gc metamethod. */
  569|  9.82k|  mo = lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc);
  ------------------
  |  |   20|  19.6k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 9.82k]
  |  |  |  Branch (20:5): [True: 9.82k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 9.82k]
  |  |  |  Branch (20:28): [True: 9.82k, False: 0]
  |  |  ------------------
  |  |   21|  19.6k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  9.82k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  9.82k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  9.82k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 9.82k, False: 0]
  |  |  ------------------
  ------------------
  570|  9.82k|  if (mo)
  ------------------
  |  Branch (570:7): [True: 9.82k, False: 0]
  ------------------
  571|  9.82k|    gc_call_finalizer(g, L, mo, o);
  572|  9.82k|}
lj_gc.c:gc_call_finalizer:
  505|  9.82k|{
  506|       |  /* Save and restore lots of state around the __gc callback. */
  507|  9.82k|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|  9.82k|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|  9.82k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  508|  9.82k|  GCSize oldt = g->gc.threshold;
  509|  9.82k|  int errcode;
  510|  9.82k|  TValue *top;
  511|  9.82k|  lj_trace_abort(g);
  ------------------
  |  |   45|  9.82k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  9.82k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  9.82k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  9.82k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  512|  9.82k|  hook_entergc(g);  /* Disable hooks and new traces during __gc. */
  ------------------
  |  |  681|  9.82k|  ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  673|  9.82k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  676|  9.82k|#define HOOK_GC			0x40
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  677|  9.82k|#define HOOK_PROFILE		0x80
  |  |  ------------------
  ------------------
  513|  9.82k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|  19.6k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  9.82k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (513:24): [True: 0, False: 9.82k]
  ------------------
  514|  9.82k|  g->gc.threshold = LJ_MAX_MEM;  /* Prevent GC steps. */
  ------------------
  |  |   52|  9.82k|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|  9.82k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|  9.82k|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  515|  9.82k|  top = L->top;
  516|  9.82k|  copyTV(L, top++, mo);
  517|  9.82k|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|  9.82k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|  9.82k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  518|  9.82k|  setgcV(L, top, o, ~o->gch.gct);
  519|  9.82k|  L->top = top+1;
  520|  9.82k|  errcode = lj_vm_pcall(L, top, 1+0, -1);  /* Stack: |mo|o| -> | */
  521|  9.82k|  hook_restore(g, oldh);
  ------------------
  |  |  686|  9.82k|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|  9.82k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  522|  9.82k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|  19.6k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  9.82k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (522:24): [True: 0, False: 9.82k]
  ------------------
  523|  9.82k|  g->gc.threshold = oldt;  /* Restore GC threshold. */
  524|  9.82k|  if (errcode) {
  ------------------
  |  Branch (524:7): [True: 0, False: 9.82k]
  ------------------
  525|      0|    ptrdiff_t errobj = savestack(L, L->top-1);  /* Stack may be resized. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  526|      0|    lj_vmevent_send(L, ERRFIN,
  ------------------
  |  |   39|      0|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|      0|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  527|      0|      copyTV(L, L->top++, restorestack(L, errobj));
  528|      0|    );
  529|      0|    L->top--;
  530|      0|  }
  531|  9.82k|}
lj_gc.c:gc_sweep:
  405|  6.47k|{
  406|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  407|  6.47k|  int ow = otherwhite(g);
  ------------------
  |  |   36|  6.47k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  6.47k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  6.47k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  6.47k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|  6.47k|  GCobj *o;
  409|   718k|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|   718k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (409:10): [True: 711k, False: 6.25k]
  |  Branch (409:37): [True: 711k, False: 220]
  ------------------
  410|   711k|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|   711k|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (410:9): [True: 3.12k, False: 708k]
  ------------------
  411|  3.12k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  401|  6.25k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (401:41): [True: 3.12k, False: 0]
  |  |  ------------------
  ------------------
  412|   711k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|   711k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|   711k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|   711k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (412:9): [True: 12.1k, False: 699k]
  ------------------
  413|  12.1k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  12.1k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 12.1k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  414|  12.1k|		 "sweep of undead object");
  415|  12.1k|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|  12.1k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  12.1k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  12.1k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  12.1k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  12.1k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  12.1k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  12.1k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  12.1k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  12.1k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  12.1k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|  12.1k|      p = &o->gch.nextgc;
  417|   699k|    } else {  /* Otherwise value is dead, free it. */
  418|   699k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   699k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.39M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 280, False: 699k]
  |  |  |  |  |  Branch (355:5): [True: 699k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   699k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  419|   699k|		 "sweep of unlive object");
  420|   699k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   699k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  421|   699k|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|   699k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (421:11): [True: 0, False: 699k]
  ------------------
  422|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  423|   699k|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|   699k|#define LJ_TSTR			(~4u)
  ------------------
  424|   699k|    }
  425|   711k|  }
  426|  6.47k|  return p;
  427|  6.47k|}
lj_gc.c:gc_sweepstr:
  431|  1.04M|{
  432|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  433|  1.04M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  1.04M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  1.04M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  1.04M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  1.04M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|  1.04M|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  1.04M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  435|  1.04M|  GCRef q;
  436|  1.04M|  GCRef *p = &q;
  437|  1.04M|  GCobj *o;
  438|  1.04M|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  1.04M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  439|  1.89M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  1.89M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (439:10): [True: 849k, False: 1.04M]
  ------------------
  440|   849k|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|   849k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|   849k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|   849k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 26.1k, False: 823k]
  ------------------
  441|  26.1k|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  26.1k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  32.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 19.3k, False: 6.78k]
  |  |  |  |  |  Branch (355:5): [True: 6.78k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  26.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|  26.1k|		 "sweep of undead string");
  443|  26.1k|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|  26.1k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  26.1k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  26.1k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  26.1k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  26.1k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  26.1k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  26.1k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  26.1k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  26.1k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  26.1k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|  26.1k|      p = &o->gch.nextgc;
  445|   823k|    } else {  /* Otherwise string is dead, free it. */
  446|   823k|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   823k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.64M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 69, False: 823k]
  |  |  |  |  |  Branch (355:5): [True: 823k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   823k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  447|   823k|		 "sweep of unlive string");
  448|   823k|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   823k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  449|   823k|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  765|   823k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   823k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   823k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   823k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 823k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   823k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|   823k|    }
  451|   849k|  }
  452|  1.04M|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  1.04M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  453|  1.04M|}
lj_gc.c:gc_onestep:
  654|  93.9k|{
  655|  93.9k|  global_State *g = G(L);
  ------------------
  |  |  705|  93.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  93.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  656|  93.9k|  switch (g->gc.state) {
  657|    555|  case GCSpause:
  ------------------
  |  Branch (657:3): [True: 555, False: 93.4k]
  ------------------
  658|    555|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  659|    555|    return 0;
  660|  54.1k|  case GCSpropagate:
  ------------------
  |  Branch (660:3): [True: 54.1k, False: 39.7k]
  ------------------
  661|  54.1k|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  54.1k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (661:9): [True: 54.0k, False: 104]
  ------------------
  662|  54.0k|      return propagatemark(g);  /* Propagate one gray object. */
  663|    104|    g->gc.state = GCSatomic;  /* End of mark phase. */
  664|    104|    return 0;
  665|    104|  case GCSatomic:
  ------------------
  |  Branch (665:3): [True: 104, False: 93.8k]
  ------------------
  666|    104|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|    104|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    104|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 104]
  |  |  ------------------
  ------------------
  667|      0|      return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  668|    104|    atomic(g, L);
  669|    104|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  670|    104|    g->gc.sweepstr = 0;
  671|    104|    return 0;
  672|  38.8k|  case GCSsweepstring: {
  ------------------
  |  Branch (672:3): [True: 38.8k, False: 55.0k]
  ------------------
  673|  38.8k|    GCSize old = g->gc.total;
  674|  38.8k|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  675|  38.8k|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (675:9): [True: 43, False: 38.8k]
  ------------------
  676|     43|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  677|  38.8k|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  38.8k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  38.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 38.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  38.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  678|  38.8k|    g->gc.estimate -= old - g->gc.total;
  679|  38.8k|    return GCSWEEPCOST;
  ------------------
  |  |   34|  38.8k|#define GCSWEEPCOST	10
  ------------------
  680|  38.8k|    }
  681|    241|  case GCSsweep: {
  ------------------
  |  Branch (681:3): [True: 241, False: 93.7k]
  ------------------
  682|    241|    GCSize old = g->gc.total;
  683|    241|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|    241|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  684|    241|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|    241|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    241|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 241, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    241|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  685|    241|    g->gc.estimate -= old - g->gc.total;
  686|    241|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|    241|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (686:9): [True: 21, False: 220]
  ------------------
  687|     21|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|      0|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (687:11): [True: 0, False: 21]
  |  Branch (687:47): [True: 0, False: 0]
  ------------------
  688|      0|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  689|     21|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|     21|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 21]
  |  |  ------------------
  ------------------
  690|      0|	g->gc.state = GCSfinalize;
  691|     21|      } else {  /* Otherwise skip this phase to help the JIT. */
  692|     21|	g->gc.state = GCSpause;  /* End of GC cycle. */
  693|     21|	g->gc.debt = 0;
  694|     21|      }
  695|     21|    }
  696|    241|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|    241|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|    241|#define GCSWEEPCOST	10
  ------------------
  697|    241|    }
  698|      0|  case GCSfinalize:
  ------------------
  |  Branch (698:3): [True: 0, False: 93.9k]
  ------------------
  699|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (699:9): [True: 0, False: 0]
  ------------------
  700|      0|      GCSize old = g->gc.total;
  701|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  702|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  703|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  704|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (704:11): [True: 0, False: 0]
  |  Branch (704:33): [True: 0, False: 0]
  ------------------
  705|      0|	g->gc.estimate -= old - g->gc.total;
  706|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (706:11): [True: 0, False: 0]
  ------------------
  707|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  708|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  709|      0|    }
  710|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  711|      0|    g->gc.debt = 0;
  712|      0|    return 0;
  713|      0|  default:
  ------------------
  |  Branch (713:3): [True: 0, False: 93.9k]
  ------------------
  714|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  715|      0|    return 0;
  716|  93.9k|  }
  717|  93.9k|}
lj_gc.c:gc_mark_start:
  103|    555|{
  104|    555|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|    555|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|    555|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|    555|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|    555|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|    555|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|    555|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|    555|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    555|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    555|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    555|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    555|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 555, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|    555|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|    555|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|    555|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    555|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    555|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    555|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    555|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 555, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|    555|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|    555|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|    555|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|    555|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.11k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 555]
  |  |  |  |  |  |  |  Branch (355:5): [True: 555, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    555|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|    555|	       "TValue and GC type mismatch"); \
  |  |   48|    555|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|    555|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  1.11k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    555|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    555|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    555|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|    555|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    555|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    555|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 555, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.11k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    555|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    555|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    555|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 555, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 555, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|    555|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    555|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    555|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    555|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 555, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    555|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|    555|  gc_mark_gcroot(g);
  111|    555|  g->gc.state = GCSpropagate;
  112|    555|}
lj_gc.c:gc_mark_gcroot:
   94|    659|{
   95|    659|  ptrdiff_t i;
   96|  26.3k|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 25.7k, False: 659]
  ------------------
   97|  25.7k|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|  25.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 17.6k, False: 8.02k]
  ------------------
   98|  17.6k|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|  17.6k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  17.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  17.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  17.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  17.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 14.9k, False: 2.76k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  14.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|    659|}
lj_gc.c:propagatemark:
  324|  56.1k|{
  325|  56.1k|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|  56.1k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  326|  56.1k|  int gct = o->gch.gct;
  327|  56.1k|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|  56.1k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  56.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 56.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  56.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  328|  56.1k|  gray2black(o);
  ------------------
  |  |   39|  56.1k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  56.1k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  329|  56.1k|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|  56.1k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  330|  56.1k|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|  56.1k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 7.07k, False: 49.1k]
  |  |  ------------------
  ------------------
  331|  7.07k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|  7.07k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  7.07k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.07k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  7.07k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.07k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.07k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|  7.07k|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (332:9): [True: 246, False: 6.82k]
  ------------------
  333|    246|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|    246|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    246|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  334|  7.07k|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  335|  7.07k|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (335:8): [True: 6.65k, False: 423]
  ------------------
  336|  49.1k|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|  49.1k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 47.0k, False: 2.00k]
  |  |  ------------------
  ------------------
  337|  47.0k|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  769|  47.0k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  47.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  47.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  47.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 47.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  47.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|    gc_traverse_func(g, fn);
  339|  47.0k|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  47.0k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  47.0k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 1.76k, False: 45.3k]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|  1.76k|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  340|  47.0k|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  45.3k|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  341|  47.0k|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  2.00k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.76k, False: 244]
  |  |  ------------------
  ------------------
  342|  1.76k|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  768|  1.76k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  1.76k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.76k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.76k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.76k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.76k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    gc_traverse_proto(g, pt);
  344|  1.76k|    return pt->sizept;
  345|  1.76k|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|    244|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 244, False: 0]
  |  |  ------------------
  ------------------
  346|    244|    lua_State *th = gco2th(o);
  ------------------
  |  |  767|    244|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|    244|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    244|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    244|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 244, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    244|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|    244|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    244|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  348|    244|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    244|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  349|    244|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|    244|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    244|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  350|    244|    gc_traverse_thread(g, th);
  351|    244|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  352|    244|  } else {
  353|      0|#if LJ_HASJIT
  354|      0|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|      0|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  355|      0|    gc_traverse_trace(g, T);
  356|      0|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  357|      0|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  358|       |#else
  359|       |    lj_assertG(0, "bad GC type %d", gct);
  360|       |    return 0;
  361|       |#endif
  362|      0|  }
  363|  56.1k|}
lj_gc.c:gc_traverse_tab:
  174|  7.07k|{
  175|  7.07k|  int weak = 0;
  176|  7.07k|  cTValue *mode;
  177|  7.07k|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|  7.07k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  7.07k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|  7.07k|  if (mt)
  ------------------
  |  Branch (178:7): [True: 801, False: 6.27k]
  ------------------
  179|    801|    gc_markobj(g, mt);
  ------------------
  |  |   52|    801|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    801|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    801|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    801|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    801|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 801]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|  7.07k|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|  7.07k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 6.27k, False: 801]
  |  |  |  Branch (20:26): [True: 0, False: 801]
  |  |  ------------------
  |  |   21|    801|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|    801|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|    801|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|    801|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|  7.07k|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  795|    801|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    801|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    801|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 801, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 801, False: 6.27k]
  ------------------
  182|    801|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|    801|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  1.60k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 801, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|  1.84k|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 1.04k, False: 801]
  ------------------
  185|  1.04k|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|    801|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 801, False: 246]
  ------------------
  186|    246|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|    246|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 246, False: 0]
  ------------------
  187|  1.04k|    }
  188|    801|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 801, False: 0]
  ------------------
  189|    801|#if LJ_HASFFI
  190|    801|      if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |   67|    801|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                    if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |  775|    801|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (190:11): [True: 555, False: 246]
  ------------------
  191|    555|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|    555|#define LJ_GC_WEAKVAL	0x10
  ------------------
  192|    555|      } else
  193|    246|#endif
  194|    246|      {
  195|    246|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|    246|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|    246|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|    246|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  196|    246|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|    246|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  197|    246|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|    246|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  198|    246|      }
  199|    801|    }
  200|    801|  }
  201|  7.07k|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|  7.07k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|  7.07k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|  7.07k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (201:7): [True: 246, False: 6.82k]
  ------------------
  202|    246|    return 1;
  203|  6.82k|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|  6.82k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (203:7): [True: 6.82k, False: 0]
  ------------------
  204|  6.82k|    MSize i, asize = t->asize;
  205|  9.48k|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (205:17): [True: 2.65k, False: 6.82k]
  ------------------
  206|  6.82k|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|  2.65k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  2.65k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.37k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.93k, False: 722]
  |  |  |  |  |  |  |  Branch (355:5): [True: 722, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.65k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  2.65k|	       "TValue and GC type mismatch"); \
  |  |   48|  2.65k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  2.65k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  5.30k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  2.65k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.65k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.65k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  2.65k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.65k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.65k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 722, False: 1.93k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.44k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    722|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    722|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    722|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 716, False: 6]
  |  |  |  |  |  |  |  Branch (32:22): [True: 722, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|    716|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    716|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    716|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    716|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 716, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    716|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  207|  6.82k|  }
  208|  6.82k|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (208:7): [True: 6.40k, False: 423]
  ------------------
  209|  6.40k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|  6.40k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  6.40k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  6.40k|    MSize i, hmask = t->hmask;
  211|   109k|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (211:17): [True: 102k, False: 6.40k]
  ------------------
  212|   102k|      Node *n = &node[i];
  213|   102k|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  782|   102k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (213:11): [True: 72.0k, False: 30.9k]
  ------------------
  214|  72.0k|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|  72.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  72.0k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 72.0k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  72.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  72.0k|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|  72.0k|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|  71.4k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  71.4k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   141k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.21k, False: 70.2k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 70.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  71.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  71.4k|	       "TValue and GC type mismatch"); \
  |  |   48|  71.4k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  71.4k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   142k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  71.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  71.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  71.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  71.4k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  71.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  71.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 70.2k, False: 1.21k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   140k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  70.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  70.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  70.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 49.3k, False: 20.9k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 70.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  49.3k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  49.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  49.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  49.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 49.3k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  49.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (215:6): [True: 71.4k, False: 555]
  ------------------
  216|  72.0k|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|  72.0k|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|  72.0k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  72.0k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   132k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 11.4k, False: 60.5k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 60.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  72.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  72.0k|	       "TValue and GC type mismatch"); \
  |  |   48|  72.0k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  72.0k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   144k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  72.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  72.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  72.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  72.0k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  72.0k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  72.0k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 60.5k, False: 11.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   121k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  60.5k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  60.5k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  60.5k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 55.7k, False: 4.77k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 60.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  55.7k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  55.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  55.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  55.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 55.7k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  55.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 72.0k, False: 0]
  ------------------
  217|  72.0k|      }
  218|   102k|    }
  219|  6.40k|  }
  220|  6.82k|  return weak;
  221|  6.82k|}
lj_gc.c:gc_traverse_func:
  225|  47.0k|{
  226|  47.0k|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|  47.0k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  47.0k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  47.0k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  47.0k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  47.0k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 180, False: 46.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|    180|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  227|  47.0k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  47.0k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  47.0k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 1.76k, False: 45.3k]
  |  |  ------------------
  ------------------
  228|  1.76k|    uint32_t i;
  229|  1.76k|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|  1.76k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.52k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.76k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.76k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.76k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  230|  1.76k|	       "function upvalues out of range");
  231|  1.76k|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|  1.76k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  3.52k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.76k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.76k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.76k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 1.76k, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 1.76k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  3.52k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 1.76k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|  1.76k|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (232:17): [True: 0, False: 1.76k]
  ------------------
  233|      0|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|  1.76k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  234|  45.3k|  } else {
  235|  45.3k|    uint32_t i;
  236|  48.2k|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (236:17): [True: 2.90k, False: 45.3k]
  ------------------
  237|  45.3k|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|  2.90k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  2.90k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  5.81k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 2.90k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.90k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.90k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  2.90k|	       "TValue and GC type mismatch"); \
  |  |   48|  2.90k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  2.90k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  5.81k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  2.90k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.90k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.90k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  2.90k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  2.90k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  2.90k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 2.90k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  5.81k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  2.90k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  2.90k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  2.90k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 1.87k, False: 1.03k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 2.90k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  1.87k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  1.87k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  1.87k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  1.87k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.87k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  1.87k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|  45.3k|  }
  239|  47.0k|}
lj_gc.c:gc_traverse_proto:
  280|  1.76k|{
  281|  1.76k|  ptrdiff_t i;
  282|  1.76k|  gc_mark_str(proto_chunkname(pt));
  ------------------
  |  |   55|  1.76k|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  1.76k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  1.76k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  1.76k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  283|  1.88k|  for (i = -(ptrdiff_t)pt->sizekgc; i < 0; i++)  /* Mark collectable consts. */
  ------------------
  |  Branch (283:37): [True: 123, False: 1.76k]
  ------------------
  284|  1.76k|    gc_markobj(g, proto_kgc(pt, i));
  ------------------
  |  |   52|    123|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    246|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    123|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    123|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    123|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 123]
  |  |  |  |  |  Branch (32:22): [True: 123, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  1.76k|#if LJ_HASJIT
  286|  1.76k|  if (pt->trace) gc_marktrace(g, pt->trace);
  ------------------
  |  Branch (286:7): [True: 0, False: 1.76k]
  ------------------
  287|  1.76k|#endif
  288|  1.76k|}
lj_gc.c:gc_traverse_thread:
  309|    244|{
  310|    244|  TValue *o, *top = th->top;
  311|    798|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|    244|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    244|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|    244|#define LJ_FR2			1
  ------------------
  |  Branch (311:39): [True: 554, False: 244]
  ------------------
  312|    554|    gc_marktv(g, o);
  ------------------
  |  |   46|    554|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|    554|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.10k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 554]
  |  |  |  |  |  |  |  Branch (355:5): [True: 554, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    554|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|    554|	       "TValue and GC type mismatch"); \
  |  |   48|    554|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|    554|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  1.10k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    554|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    554|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    554|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|    554|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|    554|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|    554|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 554, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  1.10k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|    554|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|    554|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|    554|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 319, False: 235]
  |  |  |  |  |  |  |  Branch (32:22): [True: 554, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|    319|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    319|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    319|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    319|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 319, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    319|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|    244|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (313:7): [True: 104, False: 140]
  ------------------
  314|    104|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|    104|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    104|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  315|  4.64k|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (315:12): [True: 4.54k, False: 104]
  ------------------
  316|  4.54k|      setnilV(o);
  ------------------
  |  |  872|  4.54k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  317|    104|  }
  318|    244|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|    244|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    244|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    244|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    244|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    244|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 244]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  319|    244|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  320|    244|}
lj_gc.c:gc_traverse_frames:
  292|    244|{
  293|    244|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|    244|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    244|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  294|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  295|    244|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|    244|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (295:28): [True: 0, False: 244]
  ------------------
  296|      0|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|      0|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|      0|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|    TValue *ftop = frame;
  298|      0|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|      0|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (299:9): [True: 0, False: 0]
  ------------------
  300|      0|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (300:9): [Folded - Ignored]
  ------------------
  301|      0|  }
  302|    244|  top++;  /* Correct bias of -1 (frame == base-1). */
  303|    244|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|    244|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    244|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (303:7): [True: 0, False: 244]
  ------------------
  304|    244|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  305|    244|}
lj_gc.c:gc_traverse_trace:
  256|    104|{
  257|    104|  IRRef ref;
  258|    104|  if (T->traceno == 0) return;
  ------------------
  |  Branch (258:7): [True: 104, False: 0]
  ------------------
  259|      0|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (259:21): [True: 0, False: 0]
  ------------------
  260|      0|    IRIns *ir = &T->ir[ref];
  261|      0|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (261:9): [True: 0, False: 0]
  ------------------
  262|      0|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|      0|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (263:28): [True: 0, False: 0]
  ------------------
  264|      0|      ref++;
  265|      0|  }
  266|      0|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (266:7): [True: 0, False: 0]
  ------------------
  267|      0|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (267:7): [True: 0, False: 0]
  ------------------
  268|      0|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (268:7): [True: 0, False: 0]
  ------------------
  269|      0|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  270|      0|}
lj_gc.c:atomic:
  618|    104|{
  619|    104|  size_t udsize;
  620|       |
  621|    104|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  622|    104|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  623|       |
  624|    104|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|    104|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  625|    104|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|    104|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  626|    104|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|    104|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    104|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 104, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    104|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  627|    104|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|    104|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|    104|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    104|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    104|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    104|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 104]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  628|    104|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  273|    104|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|    104|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|    104|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|    104|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  629|    104|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  630|    104|  gc_propagate_gray(g);  /* Propagate all of the above. */
  631|       |
  632|    104|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|    104|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  633|    104|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|    104|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  634|    104|  gc_propagate_gray(g);  /* Propagate it. */
  635|       |
  636|    104|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  637|    104|  gc_mark_mmudata(g);  /* Mark them. */
  638|    104|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  639|       |
  640|       |  /* All marking done, clear weak tables. */
  641|    104|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|    104|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  642|       |
  643|    104|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  644|       |
  645|       |  /* Prepare for sweep phase. */
  646|    104|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|    104|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    104|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    104|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    104|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|    104|  g->strempty.marked = g->gc.currentwhite;
  648|    104|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|    104|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  649|    104|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  650|    104|}
lj_gc.c:gc_mark_uv:
  116|    104|{
  117|    104|  GCupval *uv;
  118|    104|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|    104|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|    104|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|      0|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 0, False: 104]
  ------------------
  119|      0|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|      0|	       "broken upvalue chain");
  121|      0|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|      0|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  122|      0|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|      0|  }
  124|    104|}
lj_gc.c:gc_propagate_gray:
  367|    416|{
  368|    416|  size_t m = 0;
  369|  2.50k|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  2.50k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (369:10): [True: 2.09k, False: 416]
  ------------------
  370|  2.09k|    m += propagatemark(g);
  371|    416|  return m;
  372|    416|}
lj_gc.c:gc_mark_mmudata:
  128|    104|{
  129|    104|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|    104|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|    104|  GCobj *u = root;
  131|    104|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 104]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|    104|}
lj_gc.c:gc_clearweak:
  473|    104|{
  474|    104|  UNUSED(g);
  ------------------
  |  |   91|    104|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  475|    208|  while (o) {
  ------------------
  |  Branch (475:10): [True: 104, False: 104]
  ------------------
  476|    104|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|    104|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    104|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    104|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    104|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 104, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    104|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|    104|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|    104|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    104|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 104, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    104|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  478|    104|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|    104|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (478:9): [True: 104, False: 0]
  ------------------
  479|    104|      MSize i, asize = t->asize;
  480|    104|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (480:19): [True: 0, False: 104]
  ------------------
  481|       |	/* Clear array slot when value is about to be collected. */
  482|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  483|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	  setnilV(tv);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  485|      0|      }
  486|    104|    }
  487|    104|    if (t->hmask > 0) {
  ------------------
  |  Branch (487:9): [True: 104, False: 0]
  ------------------
  488|    104|      Node *node = noderef(t->node);
  ------------------
  |  |  515|    104|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    104|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  489|    104|      MSize i, hmask = t->hmask;
  490|    312|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (490:19): [True: 208, False: 104]
  ------------------
  491|    208|	Node *n = &node[i];
  492|       |	/* Clear hash slot when key or value is about to be collected. */
  493|    208|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  782|    416|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (493:6): [True: 104, False: 104]
  |  Branch (493:28): [True: 0, False: 104]
  ------------------
  494|    104|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (494:7): [True: 0, False: 104]
  ------------------
  495|      0|	  setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  496|    208|      }
  497|    104|    }
  498|    104|    o = gcref(t->gclist);
  ------------------
  |  |   67|    104|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  499|    104|  }
  500|    104|}
lj_gc.c:gc_mayclear:
  457|    208|{
  458|    208|  if (tvisgcv(o)) {  /* Only collectable objects can be weak references. */
  ------------------
  |  |  809|    208|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    208|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    208|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    208|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    208|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    208|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    208|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 208, False: 0]
  |  |  ------------------
  ------------------
  459|    208|    if (tvisstr(o)) {  /* But strings cannot be used as weak references. */
  ------------------
  |  |  795|    208|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    208|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    208|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 208, False: 0]
  |  |  ------------------
  ------------------
  460|    208|      gc_mark_str(strV(o));  /* And need to be marked. */
  ------------------
  |  |   55|    416|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    208|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    208|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    208|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (55:27): [True: 208, False: 0]
  |  |  ------------------
  ------------------
  461|      0|      return 0;
  462|    208|    }
  463|      0|    if (iswhite(gcV(o)))
  ------------------
  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  464|      0|      return 1;  /* Object is about to be collected. */
  465|      0|    if (tvisudata(o) && val && isfinalized(udataV(o)))
  ------------------
  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (tvisudata(o) && val && isfinalized(udataV(o)))
  ------------------
  |  |   40|      0|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 0, False: 0]
  |  |  |  Branch (40:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (465:25): [True: 0, False: 0]
  ------------------
  466|      0|      return 1;  /* Finalized userdata is dropped only from values. */
  467|      0|  }
  468|      0|  return 0;  /* Cannot clear. */
  469|    208|}
lj_gc.c:gc_mark:
   59|   127k|{
   60|   127k|  int gct = o->gch.gct;
   61|   127k|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|   127k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   127k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 127k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   127k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|   127k|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|   127k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   127k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 127k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   127k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   127k|  white2gray(o);
  ------------------
  |  |   38|   127k|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   127k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   127k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   127k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|   127k|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|   127k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.63k, False: 125k]
  |  |  ------------------
  ------------------
   65|  1.63k|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|  1.63k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.26k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1.63k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|  1.63k|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|  1.63k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  1.63k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|  1.63k|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|  1.44k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  1.44k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.44k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.44k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.44k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 692, False: 751]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|    692|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 1.44k, False: 191]
  ------------------
   68|  1.63k|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|  1.63k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  3.26k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.63k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.63k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.63k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 145, False: 1.48k]
  |  |  |  |  |  Branch (32:22): [True: 1.63k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|    290|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 145, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|  3.26k|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|  3.26k|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  772|  1.63k|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  1.63k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.63k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.63k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.63k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.63k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 1.63k]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|   125k|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|   125k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 125k]
  |  |  ------------------
  ------------------
   79|      0|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  766|      0|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|      0|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|      0|	       "TValue and GC type mismatch"); \
  |  |   48|      0|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|      0|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 0, False: 0]
  ------------------
   82|      0|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|      0|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|   125k|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|   251k|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|  65.3k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 65.3k, False: 60.4k]
  |  Branch (83:33): [True: 60.6k, False: 4.63k]
  ------------------
   84|  60.6k|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|  60.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   257k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 49.8k, False: 10.8k]
  |  |  |  |  |  Branch (355:5): [True: 8.55k, False: 2.31k]
  |  |  |  |  |  Branch (355:5): [True: 555, False: 1.76k]
  |  |  |  |  |  Branch (355:5): [True: 1.76k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  60.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|  60.6k|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|  60.6k|	       "bad GC type %d", gct);
   87|  60.6k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|  60.6k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|  60.6k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|  60.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|  60.6k|  }
   90|   127k|}

lj_state.c:lj_mem_free:
  120|  9.31k|{
  121|  9.31k|  g->gc.total -= (GCSize)osize;
  122|  9.31k|  g->allocf(g->allocd, p, osize, 0);
  123|  9.31k|}
lj_lex.c:lj_mem_free:
  120|  9.31k|{
  121|  9.31k|  g->gc.total -= (GCSize)osize;
  122|  9.31k|  g->allocf(g->allocd, p, osize, 0);
  123|  9.31k|}
lj_parse.c:lj_gc_barrierback:
   82|      1|{
   83|      1|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|      1|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|      1|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|      1|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|      1|	     "bad object states for backward barrier");
   86|      1|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|      1|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|      1|	     "bad GC state");
   88|      1|  black2gray(o);
  ------------------
  |  |   44|      1|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      1|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|      1|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|      1|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|      1|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|      1|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|      1|}
lj_trace.c:lj_mem_free:
  120|  12.4k|{
  121|  12.4k|  g->gc.total -= (GCSize)osize;
  122|  12.4k|  g->allocf(g->allocd, p, osize, 0);
  123|  12.4k|}
lj_ctype.c:lj_mem_free:
  120|  1.52k|{
  121|  1.52k|  g->gc.total -= (GCSize)osize;
  122|  1.52k|  g->allocf(g->allocd, p, osize, 0);
  123|  1.52k|}
lj_str.c:lj_mem_free:
  120|   827k|{
  121|   827k|  g->gc.total -= (GCSize)osize;
  122|   827k|  g->allocf(g->allocd, p, osize, 0);
  123|   827k|}
lj_tab.c:lj_mem_free:
  120|   166k|{
  121|   166k|  g->gc.total -= (GCSize)osize;
  122|   166k|  g->allocf(g->allocd, p, osize, 0);
  123|   166k|}
lj_tab.c:lj_gc_barrierback:
   82|    190|{
   83|    190|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|    190|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|    190|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|    190|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    380|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 190, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 190, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    190|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|    190|	     "bad object states for backward barrier");
   86|    190|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    190|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    380|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 190, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 190, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    190|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|    190|	     "bad GC state");
   88|    190|  black2gray(o);
  ------------------
  |  |   44|    190|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    190|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|    190|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    190|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|    190|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    190|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|    190|}
lj_func.c:lj_mem_free:
  120|   602k|{
  121|   602k|  g->gc.total -= (GCSize)osize;
  122|   602k|  g->allocf(g->allocd, p, osize, 0);
  123|   602k|}
lj_udata.c:lj_mem_free:
  120|  12.9k|{
  121|  12.9k|  g->gc.total -= (GCSize)osize;
  122|  12.9k|  g->allocf(g->allocd, p, osize, 0);
  123|  12.9k|}
lj_cdata.c:lj_mem_free:
  120|  7.89k|{
  121|  7.89k|  g->gc.total -= (GCSize)osize;
  122|  7.89k|  g->allocf(g->allocd, p, osize, 0);
  123|  7.89k|}

lj_lex_setup:
  399|  3.10k|{
  400|  3.10k|  int header = 0;
  401|  3.10k|  ls->L = L;
  402|  3.10k|  ls->fs = NULL;
  403|  3.10k|  ls->pe = ls->p = NULL;
  404|  3.10k|  ls->vstack = NULL;
  405|  3.10k|  ls->sizevstack = 0;
  406|  3.10k|  ls->vtop = 0;
  407|  3.10k|  ls->bcstack = NULL;
  408|  3.10k|  ls->sizebcstack = 0;
  409|  3.10k|  ls->tok = 0;
  410|  3.10k|  ls->lookahead = TK_eof;  /* No look-ahead token. */
  411|  3.10k|  ls->linenumber = 1;
  412|  3.10k|  ls->lastline = 1;
  413|  3.10k|  ls->endmark = 0;
  414|  3.10k|  ls->fr2 = LJ_FR2;  /* Generate native bytecode by default. */
  ------------------
  |  |  569|  3.10k|#define LJ_FR2			1
  ------------------
  415|  3.10k|  lex_next(ls);  /* Read-ahead first char. */
  416|  3.10k|  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
  ------------------
  |  Branch (416:7): [True: 0, False: 3.10k]
  |  Branch (416:24): [True: 0, False: 0]
  |  Branch (416:47): [True: 0, False: 0]
  ------------------
  417|  3.10k|      (uint8_t)ls->p[1] == 0xbf) {  /* Skip UTF-8 BOM (if buffered). */
  ------------------
  |  Branch (417:7): [True: 0, False: 0]
  ------------------
  418|      0|    ls->p += 2;
  419|      0|    lex_next(ls);
  420|      0|    header = 1;
  421|      0|  }
  422|  3.10k|  if (ls->c == '#') {  /* Skip POSIX #! header line. */
  ------------------
  |  Branch (422:7): [True: 19, False: 3.08k]
  ------------------
  423|  2.86k|    do {
  424|  2.86k|      lex_next(ls);
  425|  2.86k|      if (ls->c == LEX_EOF) return 0;
  ------------------
  |  |   42|  2.86k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (425:11): [True: 12, False: 2.85k]
  ------------------
  426|  2.86k|    } while (!lex_iseol(ls));
  ------------------
  |  |   43|  2.85k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 6, False: 2.85k]
  |  |  |  Branch (43:42): [True: 1, False: 2.84k]
  |  |  ------------------
  ------------------
  427|      7|    lex_newline(ls);
  428|      7|    header = 1;
  429|      7|  }
  430|  3.09k|  if (ls->c == LUA_SIGNATURE[0]) {  /* Bytecode dump. */
  ------------------
  |  |   27|  3.09k|#define	LUA_SIGNATURE	"\033Lua"
  ------------------
  |  Branch (430:7): [True: 2, False: 3.09k]
  ------------------
  431|      2|    if (header) {
  ------------------
  |  Branch (431:9): [True: 0, False: 2]
  ------------------
  432|       |      /*
  433|       |      ** Loading bytecode with an extra header is disabled for security
  434|       |      ** reasons. This may circumvent the usual check for bytecode vs.
  435|       |      ** Lua code by looking at the first char. Since this is a potential
  436|       |      ** security violation no attempt is made to echo the chunkname either.
  437|       |      */
  438|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_BCBAD));
  439|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
  440|      0|    }
  441|      2|    return 1;
  442|      2|  }
  443|  3.09k|  return 0;
  444|  3.09k|}
lj_lex_cleanup:
  448|  3.10k|{
  449|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|  3.10k|  lj_mem_freevec(g, ls->bcstack, ls->sizebcstack, BCInsLine);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  451|  3.10k|  lj_mem_freevec(g, ls->vstack, ls->sizevstack, VarInfo);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  452|  3.10k|  lj_buf_free(g, &ls->sb);
  453|  3.10k|}
lj_lex_next:
  457|   242k|{
  458|   242k|  ls->lastline = ls->linenumber;
  459|   242k|  if (LJ_LIKELY(ls->lookahead == TK_eof)) {  /* No lookahead token? */
  ------------------
  |  |  145|   242k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 231k, False: 10.8k]
  |  |  ------------------
  ------------------
  460|   231k|    ls->tok = lex_scan(ls, &ls->tokval);  /* Get next token. */
  461|   231k|  } else {  /* Otherwise return lookahead token. */
  462|  10.8k|    ls->tok = ls->lookahead;
  463|  10.8k|    ls->lookahead = TK_eof;
  464|  10.8k|    ls->tokval = ls->lookaheadval;
  465|  10.8k|  }
  466|   242k|}
lj_lex_lookahead:
  470|  10.8k|{
  471|  10.8k|  lj_assertLS(ls->lookahead == TK_eof, "double lookahead");
  ------------------
  |  |   89|  10.8k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  10.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  10.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 10.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  472|  10.8k|  ls->lookahead = lex_scan(ls, &ls->lookaheadval);
  473|  10.8k|  return ls->lookahead;
  474|  10.8k|}
lj_lex_token2str:
  478|  2.87k|{
  479|  2.87k|  if (tok > TK_OFS)
  ------------------
  |  Branch (479:7): [True: 1.18k, False: 1.69k]
  ------------------
  480|  1.18k|    return tokennames[tok-TK_OFS-1];
  481|  1.69k|  else if (!lj_char_iscntrl(tok))
  ------------------
  |  |   25|  1.69k|#define lj_char_iscntrl(c)	lj_char_isa((c), LJ_CHAR_CNTRL)
  |  |  ------------------
  |  |  |  |   24|  1.69k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (481:12): [True: 1.69k, False: 2]
  ------------------
  482|  1.69k|    return lj_strfmt_pushf(ls->L, "%c", tok);
  483|      2|  else
  484|      2|    return lj_strfmt_pushf(ls->L, "char(%d)", tok);
  485|  2.87k|}
lj_lex_error:
  489|  2.27k|{
  490|  2.27k|  const char *tokstr;
  491|  2.27k|  va_list argp;
  492|  2.27k|  if (tok == 0) {
  ------------------
  |  Branch (492:7): [True: 8, False: 2.26k]
  ------------------
  493|      8|    tokstr = NULL;
  494|  2.26k|  } else if (tok == TK_name || tok == TK_string || tok == TK_number) {
  ------------------
  |  Branch (494:14): [True: 182, False: 2.08k]
  |  Branch (494:32): [True: 96, False: 1.98k]
  |  Branch (494:52): [True: 461, False: 1.52k]
  ------------------
  495|    739|    lex_save(ls, '\0');
  496|    739|    tokstr = ls->sb.b;
  497|  1.52k|  } else {
  498|  1.52k|    tokstr = lj_lex_token2str(ls, tok);
  499|  1.52k|  }
  500|  2.27k|  va_start(argp, em);
  501|  2.27k|  lj_err_lex(ls->L, ls->chunkname, tokstr, ls->linenumber, em, argp);
  502|      0|  va_end(argp);
  503|      0|}
lj_lex_init:
  507|  3.10k|{
  508|  3.10k|  uint32_t i;
  509|  71.3k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (509:15): [True: 68.2k, False: 3.10k]
  ------------------
  510|  68.2k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|  68.2k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  511|  68.2k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|  68.2k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  68.2k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  512|  68.2k|    s->reserved = (uint8_t)(i+1);
  513|  68.2k|  }
  514|  3.10k|}
lj_lex.c:lex_next:
   64|  1.54M|{
   65|  1.54M|  return (ls->c = ls->p < ls->pe ? (LexChar)(uint8_t)*ls->p++ : lex_more(ls));
  ------------------
  |  Branch (65:19): [True: 1.50M, False: 41.8k]
  ------------------
   66|  1.54M|}
lj_lex.c:lex_more:
   47|  41.8k|{
   48|  41.8k|  size_t sz;
   49|  41.8k|  const char *p = ls->rfunc(ls->L, ls->rdata, &sz);
   50|  41.8k|  if (p == NULL || sz == 0) return LEX_EOF;
  ------------------
  |  |   42|  2.09k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (50:7): [True: 1.55k, False: 40.2k]
  |  Branch (50:20): [True: 539, False: 39.7k]
  ------------------
   51|  39.7k|  if (sz >= LJ_MAX_BUF) {
  ------------------
  |  |   55|  39.7k|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|  39.7k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 39.7k]
  ------------------
   52|      0|    if (sz != ~(size_t)0) lj_err_mem(ls->L);
  ------------------
  |  Branch (52:9): [True: 0, False: 0]
  ------------------
   53|      0|    sz = ~(uintptr_t)0 - (uintptr_t)p;
   54|      0|    if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
                  if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (54:9): [True: 0, False: 0]
  ------------------
   55|      0|    ls->endmark = 1;
   56|      0|  }
   57|  39.7k|  ls->pe = p + sz;
   58|  39.7k|  ls->p = p + 1;
   59|  39.7k|  return (LexChar)(uint8_t)p[0];
   60|  39.7k|}
lj_lex.c:lex_newline:
   83|  23.6k|{
   84|  23.6k|  LexChar old = ls->c;
   85|  23.6k|  lj_assertLS(lex_iseol(ls), "bad usage");
  ------------------
  |  |   89|  23.6k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  23.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  33.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 13.9k, False: 9.68k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 9.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  23.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   86|  23.6k|  lex_next(ls);  /* Skip "\n" or "\r". */
   87|  23.6k|  if (lex_iseol(ls) && ls->c != old) lex_next(ls);  /* Skip "\n\r" or "\r\n". */
  ------------------
  |  |   43|  47.2k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 10.9k, False: 12.7k]
  |  |  |  Branch (43:42): [True: 7.03k, False: 5.70k]
  |  |  ------------------
  ------------------
  |  Branch (87:24): [True: 566, False: 17.3k]
  ------------------
   88|  23.6k|  if (++ls->linenumber >= LJ_MAX_LINE)
  ------------------
  |  |   64|  23.6k|#define LJ_MAX_LINE	LJ_MAX_MEM32	/* Max. source code line number. */
  |  |  ------------------
  |  |  |  |   49|  23.6k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (88:7): [True: 0, False: 23.6k]
  ------------------
   89|      0|    lj_lex_error(ls, ls->tok, LJ_ERR_XLINES);
   90|  23.6k|}
lj_lex.c:lex_scan:
  292|   242k|{
  293|   242k|  lj_buf_reset(&ls->sb);
  294|   671k|  for (;;) {
  295|   671k|    if (lj_char_isident(ls->c)) {
  ------------------
  |  |   32|   671k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|   671k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 75.0k, False: 596k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  296|  75.0k|      GCstr *s;
  297|  75.0k|      if (lj_char_isdigit(ls->c)) {  /* Numeric literal. */
  ------------------
  |  |   28|  75.0k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  75.0k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 39.0k, False: 36.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|  39.0k|	lex_number(ls, tv);
  299|  39.0k|	return TK_number;
  300|  39.0k|      }
  301|       |      /* Identifier or reserved word. */
  302|   280k|      do {
  303|   280k|	lex_savenext(ls);
  304|   280k|      } while (lj_char_isident(ls->c));
  ------------------
  |  |   32|   280k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|   280k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 244k, False: 36.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|  36.0k|      s = lj_parse_keepstr(ls, ls->sb.b, sbuflen(&ls->sb));
  ------------------
  |  |   36|  36.0k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  306|  36.0k|      setstrV(ls->L, tv, s);
  307|  36.0k|      if (s->reserved > 0)  /* Reserved word? */
  ------------------
  |  Branch (307:11): [True: 2.74k, False: 33.2k]
  ------------------
  308|  2.74k|	return TK_OFS + s->reserved;
  309|  33.2k|      return TK_name;
  310|  36.0k|    }
  311|   596k|    switch (ls->c) {
  312|  11.5k|    case '\n':
  ------------------
  |  Branch (312:5): [True: 11.5k, False: 584k]
  ------------------
  313|  20.6k|    case '\r':
  ------------------
  |  Branch (313:5): [True: 9.09k, False: 587k]
  ------------------
  314|  20.6k|      lex_newline(ls);
  315|  20.6k|      continue;
  316|   383k|    case ' ':
  ------------------
  |  Branch (316:5): [True: 383k, False: 213k]
  ------------------
  317|   383k|    case '\t':
  ------------------
  |  Branch (317:5): [True: 885, False: 595k]
  ------------------
  318|   385k|    case '\v':
  ------------------
  |  Branch (318:5): [True: 1.43k, False: 594k]
  ------------------
  319|   408k|    case '\f':
  ------------------
  |  Branch (319:5): [True: 22.7k, False: 573k]
  ------------------
  320|   408k|      lex_next(ls);
  321|   408k|      continue;
  322|  7.76k|    case '-':
  ------------------
  |  Branch (322:5): [True: 7.76k, False: 588k]
  ------------------
  323|  7.76k|      lex_next(ls);
  324|  7.76k|      if (ls->c != '-') return '-';
  ------------------
  |  Branch (324:11): [True: 7.48k, False: 278]
  ------------------
  325|    278|      lex_next(ls);
  326|    278|      if (ls->c == '[') {  /* Long comment "--[=*[...]=*]". */
  ------------------
  |  Branch (326:11): [True: 84, False: 194]
  ------------------
  327|     84|	int sep = lex_skipeq(ls);
  328|     84|	lj_buf_reset(&ls->sb);  /* `lex_skipeq' may dirty the buffer */
  329|     84|	if (sep >= 0) {
  ------------------
  |  Branch (329:6): [True: 18, False: 66]
  ------------------
  330|     18|	  lex_longstring(ls, NULL, sep);
  331|     18|	  lj_buf_reset(&ls->sb);
  332|     18|	  continue;
  333|     18|	}
  334|     84|      }
  335|       |      /* Short comment "--.*\n". */
  336|  12.2k|      while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   43|  24.5k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 139, False: 12.1k]
  |  |  |  Branch (43:42): [True: 90, False: 12.0k]
  |  |  ------------------
  ------------------
                    while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   42|  12.0k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (336:32): [True: 12.0k, False: 31]
  ------------------
  337|  12.0k|	lex_next(ls);
  338|    260|      continue;
  339|  1.80k|    case '[': {
  ------------------
  |  Branch (339:5): [True: 1.80k, False: 594k]
  ------------------
  340|  1.80k|      int sep = lex_skipeq(ls);
  341|  1.80k|      if (sep >= 0) {
  ------------------
  |  Branch (341:11): [True: 289, False: 1.51k]
  ------------------
  342|    289|	lex_longstring(ls, tv, sep);
  343|    289|	return TK_string;
  344|  1.51k|      } else if (sep == -1) {
  ------------------
  |  Branch (344:18): [True: 1.50k, False: 16]
  ------------------
  345|  1.50k|	return '[';
  346|  1.50k|      } else {
  347|     16|	lj_lex_error(ls, TK_string, LJ_ERR_XLDELIM);
  348|      0|	continue;
  349|     16|      }
  350|  1.80k|      }
  351|  3.16k|    case '=':
  ------------------
  |  Branch (351:5): [True: 3.16k, False: 593k]
  ------------------
  352|  3.16k|      lex_next(ls);
  353|  3.16k|      if (ls->c != '=') return '='; else { lex_next(ls); return TK_eq; }
  ------------------
  |  Branch (353:11): [True: 2.35k, False: 810]
  ------------------
  354|  3.74k|    case '<':
  ------------------
  |  Branch (354:5): [True: 3.74k, False: 592k]
  ------------------
  355|  3.74k|      lex_next(ls);
  356|  3.74k|      if (ls->c != '=') return '<'; else { lex_next(ls); return TK_le; }
  ------------------
  |  Branch (356:11): [True: 3.26k, False: 477]
  ------------------
  357|  3.68k|    case '>':
  ------------------
  |  Branch (357:5): [True: 3.68k, False: 592k]
  ------------------
  358|  3.68k|      lex_next(ls);
  359|  3.68k|      if (ls->c != '=') return '>'; else { lex_next(ls); return TK_ge; }
  ------------------
  |  Branch (359:11): [True: 2.83k, False: 850]
  ------------------
  360|    480|    case '~':
  ------------------
  |  Branch (360:5): [True: 480, False: 595k]
  ------------------
  361|    480|      lex_next(ls);
  362|    480|      if (ls->c != '=') return '~'; else { lex_next(ls); return TK_ne; }
  ------------------
  |  Branch (362:11): [True: 13, False: 467]
  ------------------
  363|    745|    case ':':
  ------------------
  |  Branch (363:5): [True: 745, False: 595k]
  ------------------
  364|    745|      lex_next(ls);
  365|    745|      if (ls->c != ':') return ':'; else { lex_next(ls); return TK_label; }
  ------------------
  |  Branch (365:11): [True: 463, False: 282]
  ------------------
  366|  40.3k|    case '"':
  ------------------
  |  Branch (366:5): [True: 40.3k, False: 555k]
  ------------------
  367|  60.2k|    case '\'':
  ------------------
  |  Branch (367:5): [True: 19.8k, False: 576k]
  ------------------
  368|  60.2k|      lex_string(ls, tv);
  369|  60.2k|      return TK_string;
  370|  5.01k|    case '.':
  ------------------
  |  Branch (370:5): [True: 5.01k, False: 591k]
  ------------------
  371|  5.01k|      if (lex_savenext(ls) == '.') {
  ------------------
  |  Branch (371:11): [True: 2.15k, False: 2.85k]
  ------------------
  372|  2.15k|	lex_next(ls);
  373|  2.15k|	if (ls->c == '.') {
  ------------------
  |  Branch (373:6): [True: 157, False: 2.00k]
  ------------------
  374|    157|	  lex_next(ls);
  375|    157|	  return TK_dots;   /* ... */
  376|    157|	}
  377|  2.00k|	return TK_concat;   /* .. */
  378|  2.85k|      } else if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  2.85k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  2.85k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (378:18): [True: 2.43k, False: 422]
  ------------------
  379|  2.43k|	return '.';
  380|  2.43k|      } else {
  381|    422|	lex_number(ls, tv);
  382|    422|	return TK_number;
  383|    422|      }
  384|  1.55k|    case LEX_EOF:
  ------------------
  |  |   42|  1.55k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (384:5): [True: 1.55k, False: 594k]
  ------------------
  385|  1.55k|      return TK_eof;
  386|  79.3k|    default: {
  ------------------
  |  Branch (386:5): [True: 79.3k, False: 517k]
  ------------------
  387|  79.3k|      LexChar c = ls->c;
  388|  79.3k|      lex_next(ls);
  389|  79.3k|      return c;  /* Single-char tokens (+ - / ...). */
  390|  5.01k|    }
  391|   596k|    }
  392|   596k|  }
  393|   242k|}
lj_lex.c:lex_number:
   96|  39.4k|{
   97|  39.4k|  StrScanFmt fmt;
   98|  39.4k|  LexChar c, xp = 'e';
   99|  39.4k|  lj_assertLS(lj_char_isdigit(ls->c), "bad usage");
  ------------------
  |  |   89|  39.4k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  39.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  39.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 39.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  39.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  100|  39.4k|  if ((c = ls->c) == '0' && (lex_savenext(ls) | 0x20) == 'x')
  ------------------
  |  Branch (100:7): [True: 4.29k, False: 35.1k]
  |  Branch (100:29): [True: 621, False: 3.67k]
  ------------------
  101|    621|    xp = 'p';
  102|   441k|  while (lj_char_isident(ls->c) || ls->c == '.' ||
  ------------------
  |  |   32|   441k|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|   883k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 399k, False: 42.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (102:36): [True: 2.75k, False: 39.5k]
  ------------------
  103|   441k|	 ((ls->c == '-' || ls->c == '+') && (c | 0x20) == xp)) {
  ------------------
  |  Branch (103:5): [True: 1.58k, False: 37.9k]
  |  Branch (103:21): [True: 635, False: 37.3k]
  |  Branch (103:38): [True: 131, False: 2.09k]
  ------------------
  104|   402k|    c = ls->c;
  105|   402k|    lex_savenext(ls);
  106|   402k|  }
  107|  39.4k|  lex_save(ls, '\0');
  108|  39.4k|  fmt = lj_strscan_scan((const uint8_t *)ls->sb.b, sbuflen(&ls->sb)-1, tv,
  ------------------
  |  |   36|  39.4k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  109|  39.4k|	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |  549|  39.4k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   13|  39.4k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  110|  39.4k|	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |  585|  39.4k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   15|  39.4k|#define STRSCAN_OPT_LL		0x08
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   14|  39.4k|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  111|  39.4k|  if (LJ_DUALNUM && fmt == STRSCAN_INT) {
  ------------------
  |  |  549|  78.8k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (111:21): [True: 0, False: 0]
  ------------------
  112|      0|    setitype(tv, LJ_TISNUM);
  ------------------
  |  |  871|      0|#define setitype(o, i)		((o)->it = ((i) << 15))
  ------------------
  113|  39.4k|  } else if (fmt == STRSCAN_NUM) {
  ------------------
  |  Branch (113:14): [True: 32.0k, False: 7.41k]
  ------------------
  114|       |    /* Already in correct format. */
  115|  32.0k|#if LJ_HASFFI
  116|  32.0k|  } else if (fmt != STRSCAN_ERROR) {
  ------------------
  |  Branch (116:14): [True: 7.30k, False: 114]
  ------------------
  117|  7.30k|    lua_State *L = ls->L;
  118|  7.30k|    GCcdata *cd;
  119|  7.30k|    lj_assertLS(fmt == STRSCAN_I64 || fmt == STRSCAN_U64 || fmt == STRSCAN_IMAG,
  ------------------
  |  |   89|  7.30k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  7.30k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  28.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 370, False: 6.93k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 82, False: 6.85k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.85k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  7.30k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|  7.30k|		"unexpected number format %d", fmt);
  121|  7.30k|    ctype_loadffi(L);
  ------------------
  |  |  396|  7.30k|  do { \
  |  |  397|  7.30k|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  384|  7.30k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  7.30k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (397:9): [True: 509, False: 6.79k]
  |  |  ------------------
  |  |  398|    509|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|    509|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  399|    509|      luaopen_ffi(L); \
  |  |  400|    509|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|    509|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|    509|    } \
  |  |  402|  7.30k|  } while (0)
  |  |  ------------------
  |  |  |  Branch (402:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  122|  7.30k|    if (fmt == STRSCAN_IMAG) {
  ------------------
  |  Branch (122:9): [True: 6.85k, False: 452]
  ------------------
  123|  6.85k|      cd = lj_cdata_new_(L, CTID_COMPLEX_DOUBLE, 2*sizeof(double));
  124|  6.85k|      ((double *)cdataptr(cd))[0] = 0;
  ------------------
  |  |  360|  6.85k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  125|  6.85k|      ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  360|  6.85k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
                    ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  866|  6.85k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  6.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  6.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  6.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 6.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  6.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|  6.85k|    } else {
  127|    452|      cd = lj_cdata_new_(L, fmt==STRSCAN_I64 ? CTID_INT64 : CTID_UINT64, 8);
  ------------------
  |  Branch (127:29): [True: 370, False: 82]
  ------------------
  128|    452|      *(uint64_t *)cdataptr(cd) = tv->u64;
  ------------------
  |  |  360|    452|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  129|    452|    }
  130|  7.30k|    lj_parse_keepcdata(ls, tv, cd);
  131|  7.30k|#endif
  132|  7.30k|  } else {
  133|    114|    lj_assertLS(fmt == STRSCAN_ERROR,
  ------------------
  |  |   89|    114|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    114|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    114|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 114, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    114|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|    114|		"unexpected number format %d", fmt);
  135|    114|    lj_lex_error(ls, TK_number, LJ_ERR_XNUMBER);
  136|    114|  }
  137|  39.4k|}
lj_lex.c:lex_savenext:
   76|   979k|{
   77|   979k|  lex_save(ls, ls->c);
   78|   979k|  return lex_next(ls);
   79|   979k|}
lj_lex.c:lex_skipeq:
  141|  2.49k|{
  142|  2.49k|  int count = 0;
  143|  2.49k|  LexChar s = ls->c;
  144|  2.49k|  lj_assertLS(s == '[' || s == ']', "bad usage");
  ------------------
  |  |   89|  2.49k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  2.49k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.09k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.89k, False: 604]
  |  |  |  |  |  |  |  Branch (355:5): [True: 604, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.49k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  145|  7.77k|  while (lex_savenext(ls) == '=' && count < 0x20000000)
  ------------------
  |  Branch (145:10): [True: 5.27k, False: 2.49k]
  |  Branch (145:37): [True: 5.27k, False: 0]
  ------------------
  146|  5.27k|    count++;
  147|  2.49k|  return (ls->c == s) ? count : (-count) - 1;
  ------------------
  |  Branch (147:10): [True: 728, False: 1.76k]
  ------------------
  148|  2.49k|}
lj_lex.c:lex_longstring:
  152|    307|{
  153|    307|  lex_savenext(ls);  /* Skip second '['. */
  154|    307|  if (lex_iseol(ls))  /* Skip initial newline. */
  ------------------
  |  |   43|    307|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 96, False: 211]
  |  |  |  Branch (43:42): [True: 2, False: 209]
  |  |  ------------------
  ------------------
  155|     98|    lex_newline(ls);
  156|  21.8k|  for (;;) {
  157|  21.8k|    switch (ls->c) {
  158|     79|    case LEX_EOF:
  ------------------
  |  |   42|     79|#define LEX_EOF			(-1)
  ------------------
  |  Branch (158:5): [True: 79, False: 21.7k]
  ------------------
  159|     79|      lj_lex_error(ls, TK_eof, tv ? LJ_ERR_XLSTR : LJ_ERR_XLCOM);
  ------------------
  |  Branch (159:32): [True: 68, False: 11]
  ------------------
  160|      0|      break;
  161|    604|    case ']':
  ------------------
  |  Branch (161:5): [True: 604, False: 21.2k]
  ------------------
  162|    604|      if (lex_skipeq(ls) == sep) {
  ------------------
  |  Branch (162:11): [True: 228, False: 376]
  ------------------
  163|    228|	lex_savenext(ls);  /* Skip second ']'. */
  164|    228|	goto endloop;
  165|    228|      }
  166|    376|      break;
  167|  1.99k|    case '\n':
  ------------------
  |  Branch (167:5): [True: 1.99k, False: 19.8k]
  ------------------
  168|  2.35k|    case '\r':
  ------------------
  |  Branch (168:5): [True: 355, False: 21.4k]
  ------------------
  169|  2.35k|      lex_save(ls, '\n');
  170|  2.35k|      lex_newline(ls);
  171|  2.35k|      if (!tv) lj_buf_reset(&ls->sb);  /* Don't waste space for comments. */
  ------------------
  |  Branch (171:11): [True: 195, False: 2.15k]
  ------------------
  172|  2.35k|      break;
  173|  18.8k|    default:
  ------------------
  |  Branch (173:5): [True: 18.8k, False: 3.03k]
  ------------------
  174|  18.8k|      lex_savenext(ls);
  175|  18.8k|      break;
  176|  21.8k|    }
  177|  21.8k|  } endloop:
  178|    228|  if (tv) {
  ------------------
  |  Branch (178:7): [True: 221, False: 7]
  ------------------
  179|    221|    GCstr *str = lj_parse_keepstr(ls, ls->sb.b + (2 + (MSize)sep),
  180|    221|				      sbuflen(&ls->sb) - 2*(2 + (MSize)sep));
  ------------------
  |  |   36|    221|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  181|    221|    setstrV(ls->L, tv, str);
  182|    221|  }
  183|    228|}
lj_lex.c:lex_string:
  187|  60.2k|{
  188|  60.2k|  LexChar delim = ls->c;  /* Delimiter is '\'' or '"'. */
  189|  60.2k|  lex_savenext(ls);
  190|   204k|  while (ls->c != delim) {
  ------------------
  |  Branch (190:10): [True: 144k, False: 59.9k]
  ------------------
  191|   144k|    switch (ls->c) {
  192|    273|    case LEX_EOF:
  ------------------
  |  |   42|    273|#define LEX_EOF			(-1)
  ------------------
  |  Branch (192:5): [True: 273, False: 144k]
  ------------------
  193|    273|      lj_lex_error(ls, TK_eof, LJ_ERR_XSTR);
  194|      0|      continue;
  195|     12|    case '\n':
  ------------------
  |  Branch (195:5): [True: 12, False: 144k]
  ------------------
  196|     20|    case '\r':
  ------------------
  |  Branch (196:5): [True: 8, False: 144k]
  ------------------
  197|     20|      lj_lex_error(ls, TK_string, LJ_ERR_XSTR);
  198|      0|      continue;
  199|  4.20k|    case '\\': {
  ------------------
  |  Branch (199:5): [True: 4.20k, False: 140k]
  ------------------
  200|  4.20k|      LexChar c = lex_next(ls);  /* Skip the '\\'. */
  201|  4.20k|      switch (c) {
  202|     68|      case 'a': c = '\a'; break;
  ------------------
  |  Branch (202:7): [True: 68, False: 4.14k]
  ------------------
  203|     36|      case 'b': c = '\b'; break;
  ------------------
  |  Branch (203:7): [True: 36, False: 4.17k]
  ------------------
  204|     36|      case 'f': c = '\f'; break;
  ------------------
  |  Branch (204:7): [True: 36, False: 4.17k]
  ------------------
  205|     77|      case 'n': c = '\n'; break;
  ------------------
  |  Branch (205:7): [True: 77, False: 4.13k]
  ------------------
  206|     34|      case 'r': c = '\r'; break;
  ------------------
  |  Branch (206:7): [True: 34, False: 4.17k]
  ------------------
  207|     77|      case 't': c = '\t'; break;
  ------------------
  |  Branch (207:7): [True: 77, False: 4.13k]
  ------------------
  208|     66|      case 'v': c = '\v'; break;
  ------------------
  |  Branch (208:7): [True: 66, False: 4.14k]
  ------------------
  209|    313|      case 'x':  /* Hexadecimal escape '\xXX'. */
  ------------------
  |  Branch (209:7): [True: 313, False: 3.89k]
  ------------------
  210|    313|	c = (lex_next(ls) & 15u) << 4;
  211|    313|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    313|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    313|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (211:6): [True: 186, False: 127]
  ------------------
  212|    186|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|    186|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|    186|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (212:8): [True: 4, False: 182]
  ------------------
  213|    182|	  c += 9 << 4;
  214|    182|	}
  215|    309|	c += (lex_next(ls) & 15u);
  216|    309|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    309|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    309|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 92, False: 217]
  ------------------
  217|     92|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|     92|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|     92|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (217:8): [True: 5, False: 87]
  ------------------
  218|     87|	  c += 9;
  219|     87|	}
  220|    304|	break;
  221|    304|      case 'u':  /* Unicode escape '\u{XX...}'. */
  ------------------
  |  Branch (221:7): [True: 13, False: 4.19k]
  ------------------
  222|     13|	if (lex_next(ls) != '{') goto err_xesc;
  ------------------
  |  Branch (222:6): [True: 2, False: 11]
  ------------------
  223|     11|	lex_next(ls);
  224|     11|	c = 0;
  225|     39|	do {
  226|     39|	  c = (c << 4) | (ls->c & 15u);
  227|     39|	  if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|     39|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|     39|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (227:8): [True: 28, False: 11]
  ------------------
  228|     28|	    if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|     28|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|     28|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (228:10): [True: 9, False: 19]
  ------------------
  229|     19|	    c += 9;
  230|     19|	  }
  231|     30|	  if (c >= 0x110000) goto err_xesc;  /* Out of Unicode range. */
  ------------------
  |  Branch (231:8): [True: 2, False: 28]
  ------------------
  232|     30|	} while (lex_next(ls) != '}');
  ------------------
  |  Branch (232:11): [True: 28, False: 0]
  ------------------
  233|      0|	if (c < 0x800) {
  ------------------
  |  Branch (233:6): [True: 0, False: 0]
  ------------------
  234|      0|	  if (c < 0x80) break;
  ------------------
  |  Branch (234:8): [True: 0, False: 0]
  ------------------
  235|      0|	  lex_save(ls, 0xc0 | (c >> 6));
  236|      0|	} else {
  237|      0|	  if (c >= 0x10000) {
  ------------------
  |  Branch (237:8): [True: 0, False: 0]
  ------------------
  238|      0|	    lex_save(ls, 0xf0 | (c >> 18));
  239|      0|	    lex_save(ls, 0x80 | ((c >> 12) & 0x3f));
  240|      0|	  } else {
  241|      0|	    if (c >= 0xd800 && c < 0xe000) goto err_xesc;  /* No surrogates. */
  ------------------
  |  Branch (241:10): [True: 0, False: 0]
  |  Branch (241:25): [True: 0, False: 0]
  ------------------
  242|      0|	    lex_save(ls, 0xe0 | (c >> 12));
  243|      0|	  }
  244|      0|	  lex_save(ls, 0x80 | ((c >> 6) & 0x3f));
  245|      0|	}
  246|      0|	c = 0x80 | (c & 0x3f);
  247|      0|	break;
  248|    409|      case 'z':  /* Skip whitespace. */
  ------------------
  |  Branch (248:7): [True: 409, False: 3.80k]
  ------------------
  249|    409|	lex_next(ls);
  250|    409|	while (lj_char_isspace(ls->c))
  251|  3.04k|	  if (lex_iseol(ls)) lex_newline(ls); else lex_next(ls);
  ------------------
  |  |   43|  3.04k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 244, False: 2.80k]
  |  |  |  Branch (43:42): [True: 98, False: 2.70k]
  |  |  ------------------
  ------------------
  252|    409|	continue;
  253|    204|      case '\n': case '\r': lex_save(ls, '\n'); lex_newline(ls); continue;
  ------------------
  |  Branch (253:7): [True: 70, False: 4.13k]
  |  Branch (253:18): [True: 134, False: 4.07k]
  ------------------
  254|  2.20k|      case '\\': case '\"': case '\'': break;
  ------------------
  |  Branch (254:7): [True: 2.05k, False: 2.15k]
  |  Branch (254:18): [True: 112, False: 4.09k]
  |  Branch (254:29): [True: 38, False: 4.17k]
  ------------------
  255|     16|      case LEX_EOF: continue;
  ------------------
  |  |   42|     16|#define LEX_EOF			(-1)
  ------------------
  |  Branch (255:7): [True: 16, False: 4.19k]
  ------------------
  256|    655|      default:
  ------------------
  |  Branch (256:7): [True: 655, False: 3.55k]
  ------------------
  257|    655|	if (!lj_char_isdigit(c))
  ------------------
  |  |   28|    655|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    655|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (257:6): [True: 8, False: 647]
  ------------------
  258|      8|	  goto err_xesc;
  259|    647|	c -= '0';  /* Decimal escape '\ddd'. */
  260|    647|	if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|    647|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    647|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 443, False: 204]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  261|    443|	  c = c*10 + (ls->c - '0');
  262|    443|	  if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|    443|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    443|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 232, False: 211]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|    232|	    c = c*10 + (ls->c - '0');
  264|    232|	    if (c > 255) {
  ------------------
  |  Branch (264:10): [True: 1, False: 231]
  ------------------
  265|     31|	    err_xesc:
  266|     31|	      lj_lex_error(ls, TK_string, LJ_ERR_XESC);
  267|      1|	    }
  268|    231|	    lex_next(ls);
  269|    231|	  }
  270|    443|	}
  271|    646|	lex_save(ls, c);
  272|    646|	continue;
  273|  4.20k|      }
  274|  2.90k|      lex_save(ls, c);
  275|  2.90k|      lex_next(ls);
  276|  2.90k|      continue;
  277|  4.20k|      }
  278|   139k|    default:
  ------------------
  |  Branch (278:5): [True: 139k, False: 4.50k]
  ------------------
  279|   139k|      lex_savenext(ls);
  280|   139k|      break;
  281|   144k|    }
  282|   144k|  }
  283|  59.9k|  lex_savenext(ls);  /* Skip trailing delimiter. */
  284|  59.9k|  setstrV(ls->L, tv,
  285|  59.9k|	  lj_parse_keepstr(ls, ls->sb.b+1, sbuflen(&ls->sb)-2));
  ------------------
  |  |   36|  59.9k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  286|  59.9k|}
lj_lex.c:lex_save:
   70|  1.02M|{
   71|  1.02M|  lj_buf_putb(&ls->sb, c);
   72|  1.02M|}

lj_lib_register:
   77|  39.2k|{
   78|  39.2k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|  39.2k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  39.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   79|  39.2k|  GCfunc *ofn = NULL;
   80|  39.2k|  int ffid = *p++;
   81|  39.2k|  BCIns *bcff = &L2GG(L)->bcff[*p++];
  ------------------
  |  |  114|  39.2k|#define L2GG(L)		(G2GG(G(L)))
  |  |  ------------------
  |  |  |  |  112|  39.2k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  39.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   82|  39.2k|  GCtab *tab = lib_create_table(L, libname, *p++);
   83|  39.2k|  ptrdiff_t tpos = L->top - L->base;
   84|       |
   85|       |  /* Avoid barriers further down. */
   86|  39.2k|  lj_gc_anybarriert(L, tab);
  ------------------
  |  |   95|  39.2k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  39.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 39.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   87|  39.2k|  tab->nomm = 0;
   88|       |
   89|   700k|  for (;;) {
   90|   700k|    uint32_t tag = *p++;
   91|   700k|    MSize len = tag & LIBINIT_LENMASK;
  ------------------
  |  |  102|   700k|#define LIBINIT_LENMASK	0x3f
  ------------------
   92|   700k|    tag &= LIBINIT_TAGMASK;
  ------------------
  |  |  103|   700k|#define LIBINIT_TAGMASK	0xc0
  ------------------
   93|   700k|    if (tag != LIBINIT_STRING) {
  ------------------
  |  |  107|   700k|#define LIBINIT_STRING	0xc0
  ------------------
  |  Branch (93:9): [True: 467k, False: 233k]
  ------------------
   94|   467k|      const char *name;
   95|   467k|      MSize nuv = (MSize)(L->top - L->base - tpos);
   96|   467k|      GCfunc *fn = lj_func_newC(L, nuv, env);
   97|   467k|      if (nuv) {
  ------------------
  |  Branch (97:11): [True: 21.7k, False: 445k]
  ------------------
   98|  21.7k|	L->top = L->base + tpos;
   99|  21.7k|	memcpy(fn->c.upvalue, L->top, sizeof(TValue)*nuv);
  100|  21.7k|      }
  101|   467k|      fn->c.ffid = (uint8_t)(ffid++);
  102|   467k|      name = (const char *)p;
  103|   467k|      p += len;
  104|   467k|      if (tag == LIBINIT_CF)
  ------------------
  |  |  104|   467k|#define LIBINIT_CF	0x00
  ------------------
  |  Branch (104:11): [True: 293k, False: 173k]
  ------------------
  105|   293k|	setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|   293k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  106|   173k|      else
  107|   173k|	setmref(fn->c.pc, bcff++);
  ------------------
  |  |   39|   173k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|   467k|      if (tag == LIBINIT_ASM_)
  ------------------
  |  |  106|   467k|#define LIBINIT_ASM_	0x80
  ------------------
  |  Branch (108:11): [True: 90.0k, False: 377k]
  ------------------
  109|  90.0k|	fn->c.f = ofn->c.f;  /* Copy handler from previous function. */
  110|   377k|      else
  111|   377k|	fn->c.f = *cf++;  /* Get cf or handler from C function table. */
  112|   467k|      if (len) {
  ------------------
  |  Branch (112:11): [True: 464k, False: 3.10k]
  ------------------
  113|       |	/* NOBARRIER: See above for common barrier. */
  114|   464k|	setfuncV(L, lj_tab_setstr(L, tab, lj_str_new(L, name, len)), fn);
  115|   464k|      }
  116|   467k|      ofn = fn;
  117|   467k|    } else {
  118|   233k|      switch (tag | len) {
  119|  24.8k|      case LIBINIT_LUA:
  ------------------
  |  |  109|  24.8k|#define LIBINIT_LUA	0xf9
  ------------------
  |  Branch (119:7): [True: 24.8k, False: 208k]
  ------------------
  120|  24.8k|	p = lib_read_lfunc(L, p, tab);
  121|  24.8k|	break;
  122|  31.4k|      case LIBINIT_SET:
  ------------------
  |  |  110|  31.4k|#define LIBINIT_SET	0xfa
  ------------------
  |  Branch (122:7): [True: 31.4k, False: 201k]
  ------------------
  123|  31.4k|	L->top -= 2;
  124|  62.9k|	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  795|  62.9k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  31.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  31.4k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 31.4k, False: 0]
  |  |  ------------------
  ------------------
              	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  859|  31.4k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  31.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  31.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  31.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 31.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  31.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (124:27): [True: 4.12k, False: 27.3k]
  ------------------
  125|  4.12k|	  env = tabV(L->top);
  ------------------
  |  |  864|  4.12k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  4.12k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.12k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.12k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|  27.3k|	else  /* NOBARRIER: See above for common barrier. */
  127|  27.3k|	  copyTV(L, lj_tab_set(L, tab, L->top+1), L->top);
  128|  31.4k|	break;
  129|  31.4k|      case LIBINIT_NUMBER:
  ------------------
  |  |  111|  6.20k|#define LIBINIT_NUMBER	0xfb
  ------------------
  |  Branch (129:7): [True: 6.20k, False: 226k]
  ------------------
  130|  6.20k|	memcpy(&L->top->n, p, sizeof(double));
  131|  6.20k|	L->top++;
  132|  6.20k|	p += sizeof(double);
  133|  6.20k|	break;
  134|  40.3k|      case LIBINIT_COPY:
  ------------------
  |  |  112|  40.3k|#define LIBINIT_COPY	0xfc
  ------------------
  |  Branch (134:7): [True: 40.3k, False: 192k]
  ------------------
  135|  40.3k|	copyTV(L, L->top, L->top - *p++);
  136|  40.3k|	L->top++;
  137|  40.3k|	break;
  138|  6.20k|      case LIBINIT_LASTCL:
  ------------------
  |  |  113|  6.20k|#define LIBINIT_LASTCL	0xfd
  ------------------
  |  Branch (138:7): [True: 6.20k, False: 226k]
  ------------------
  139|  6.20k|	setfuncV(L, L->top++, ofn);
  140|  6.20k|	break;
  141|  12.4k|      case LIBINIT_FFID:
  ------------------
  |  |  114|  12.4k|#define LIBINIT_FFID	0xfe
  ------------------
  |  Branch (141:7): [True: 12.4k, False: 220k]
  ------------------
  142|  12.4k|	ffid++;
  143|  12.4k|	break;
  144|  39.2k|      case LIBINIT_END:
  ------------------
  |  |  115|  39.2k|#define LIBINIT_END	0xff
  ------------------
  |  Branch (144:7): [True: 39.2k, False: 193k]
  ------------------
  145|  39.2k|	return;
  146|  72.3k|      default:
  ------------------
  |  Branch (146:7): [True: 72.3k, False: 160k]
  ------------------
  147|  72.3k|	setstrV(L, L->top++, lj_str_new(L, (const char *)p, len));
  148|  72.3k|	p += len;
  149|  72.3k|	break;
  150|   233k|      }
  151|   233k|    }
  152|   700k|  }
  153|  39.2k|}
lj_lib_pushcc:
  157|  15.5k|{
  158|  15.5k|  GCfunc *fn;
  159|  15.5k|  lua_pushcclosure(L, f, n);
  160|  15.5k|  fn = funcV(L->top-1);
  ------------------
  |  |  860|  15.5k|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  15.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  15.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  15.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 15.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  15.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  161|      0|  fn->c.ffid = (uint8_t)id;
  162|  15.5k|  setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|  15.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  163|  15.5k|  return fn;
  164|  15.5k|}
lj_lib_prereg:
  167|  15.5k|{
  168|  15.5k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD", 4);
  ------------------
  |  |   36|  15.5k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  169|  15.5k|  lua_pushcfunction(L, f);
  ------------------
  |  |  262|  15.5k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  170|       |  /* NOBARRIER: The function is new (marked white). */
  171|  15.5k|  setgcref(funcV(L->top-1)->c.env, obj2gco(env));
  ------------------
  |  |   72|  31.0k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 15.5k, False: 0]
  |  |  ------------------
  ------------------
  172|      0|  lua_setfield(L, -2, name);
  173|  15.5k|  L->top--;
  174|  15.5k|}
lj_lib.c:lib_create_table:
   32|  39.2k|{
   33|  39.2k|  if (libname) {
  ------------------
  |  Branch (33:7): [True: 34.1k, False: 5.14k]
  ------------------
   34|  34.1k|    luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  34.1k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   35|  34.1k|    lua_getfield(L, -1, libname);
   36|  34.1k|    if (!tvistab(L->top-1)) {
  ------------------
  |  |  800|  34.1k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  34.1k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  34.1k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  ------------------
  |  Branch (36:9): [True: 34.1k, False: 0]
  ------------------
   37|  34.1k|      L->top--;
   38|  34.1k|      if (luaL_findtable(L, LUA_GLOBALSINDEX, libname, hsize) != NULL)
  ------------------
  |  |   38|  34.1k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (38:11): [True: 0, False: 34.1k]
  ------------------
   39|      0|	lj_err_callerv(L, LJ_ERR_BADMODN, libname);
   40|  34.1k|      settabV(L, L->top, tabV(L->top-1));
  ------------------
  |  |  864|  34.1k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  34.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  34.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  34.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 34.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  34.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   41|      0|      L->top++;
   42|  34.1k|      lua_setfield(L, -3, libname);  /* _LOADED[libname] = new table */
   43|  34.1k|    }
   44|  34.1k|    L->top--;
   45|  34.1k|    settabV(L, L->top-1, tabV(L->top));
  ------------------
  |  |  864|  34.1k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  34.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  34.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  34.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 34.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  34.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   46|  34.1k|  } else {
   47|  5.14k|    lua_createtable(L, 0, hsize);
   48|  5.14k|  }
   49|  39.2k|  return tabV(L->top-1);
  ------------------
  |  |  864|  39.2k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  39.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  39.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  39.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 39.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  39.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   50|  39.2k|}
lj_lib.c:lib_read_lfunc:
   53|  24.8k|{
   54|  24.8k|  int len = *p++;
   55|  24.8k|  GCstr *name = lj_str_new(L, (const char *)p, len);
   56|  24.8k|  LexState ls;
   57|  24.8k|  GCproto *pt;
   58|  24.8k|  GCfunc *fn;
   59|  24.8k|  memset(&ls, 0, sizeof(ls));
   60|  24.8k|  ls.L = L;
   61|  24.8k|  ls.p = (const char *)(p+len);
   62|  24.8k|  ls.pe = (const char *)~(uintptr_t)0;
   63|  24.8k|  ls.c = -1;
   64|  24.8k|  ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |   43|  24.8k|#define BCDUMP_F_STRIP		0x02
  ------------------
                ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |  630|  24.8k|#define LJ_BE			0
  ------------------
                ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |   42|  24.8k|#define BCDUMP_F_BE		0x01
  ------------------
   65|  24.8k|  ls.fr2 = LJ_FR2;
  ------------------
  |  |  569|  24.8k|#define LJ_FR2			1
  ------------------
   66|  24.8k|  ls.chunkname = name;
   67|  24.8k|  pt = lj_bcread_proto(&ls);
   68|  24.8k|  pt->firstline = ~(BCLine)0;
   69|  24.8k|  fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|  24.8k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  24.8k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   70|       |  /* NOBARRIER: See below for common barrier. */
   71|  24.8k|  setfuncV(L, lj_tab_setstr(L, tab, name), fn);
   72|  24.8k|  return (const uint8_t *)ls.p;
   73|  24.8k|}

lua_loadx:
   64|  3.10k|{
   65|  3.10k|  LexState ls;
   66|  3.10k|  int status;
   67|  3.10k|  ls.rfunc = reader;
   68|  3.10k|  ls.rdata = data;
   69|  3.10k|  ls.chunkarg = chunkname ? chunkname : "?";
  ------------------
  |  Branch (69:17): [True: 3.10k, False: 0]
  ------------------
   70|  3.10k|  ls.mode = mode;
   71|  3.10k|  lj_buf_init(L, &ls.sb);
   72|  3.10k|  status = lj_vm_cpcall(L, NULL, &ls, cpparser);
   73|  3.10k|  lj_lex_cleanup(L, &ls);
   74|  3.10k|  lj_gc_check(L);
  ------------------
  |  |   66|  3.10k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  3.10k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 275, False: 2.82k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  3.10k|      lj_gc_step(L); }
  ------------------
   75|  3.10k|  return status;
   76|  3.10k|}
lua_load:
   80|  3.10k|{
   81|  3.10k|  return lua_loadx(L, reader, data, chunkname, NULL);
   82|  3.10k|}
lj_load.c:cpparser:
   29|  3.10k|{
   30|  3.10k|  LexState *ls = (LexState *)ud;
   31|  3.10k|  GCproto *pt;
   32|  3.10k|  GCfunc *fn;
   33|  3.10k|  int bc;
   34|  3.10k|  UNUSED(dummy);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   35|  3.10k|  cframe_errfunc(L->cframe) = -1;  /* Inherit error function. */
  ------------------
  |  |  279|  3.10k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  3.10k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
   36|  3.10k|  bc = lj_lex_setup(L, ls);
   37|  3.10k|  if (ls->mode) {
  ------------------
  |  Branch (37:7): [True: 0, False: 3.10k]
  ------------------
   38|      0|    int xmode = 1;
   39|      0|    const char *mode = ls->mode;
   40|      0|    char c;
   41|      0|    while ((c = *mode++)) {
  ------------------
  |  Branch (41:12): [True: 0, False: 0]
  ------------------
   42|      0|      if (c == (bc ? 'b' : 't')) xmode = 0;
  ------------------
  |  Branch (42:11): [True: 0, False: 0]
  |  Branch (42:17): [True: 0, False: 0]
  ------------------
   43|      0|      if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (43:11): [True: 0, False: 0]
  ------------------
   44|      0|    }
   45|      0|    if (xmode) {
  ------------------
  |  Branch (45:9): [True: 0, False: 0]
  ------------------
   46|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_XMODE));
   47|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
   48|      0|    }
   49|      0|  }
   50|  3.10k|  pt = bc ? lj_bcread(ls) : lj_parse(ls);
  ------------------
  |  Branch (50:8): [True: 2, False: 3.10k]
  ------------------
   51|  3.10k|  if (ls->fr2 == LJ_FR2) {
  ------------------
  |  |  569|  3.10k|#define LJ_FR2			1
  ------------------
  |  Branch (51:7): [True: 829, False: 2.27k]
  ------------------
   52|    829|    fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|    829|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    829|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   53|       |    /* Don't combine above/below into one statement. */
   54|    829|    setfuncV(L, L->top++, fn);
   55|  2.27k|  } else {
   56|       |    /* Non-native generation returns a dumpable, but non-runnable prototype. */
   57|  2.27k|    setprotoV(L, L->top++, pt);
   58|  2.27k|  }
   59|  3.10k|  return NULL;
   60|  3.10k|}

lj_mcode_free:
  287|  3.10k|{
  288|  3.10k|  MCode *mc = J->mcarea;
  289|  3.10k|  J->mcarea = NULL;
  290|  3.10k|  J->szallmcarea = 0;
  291|  3.10k|  while (mc) {
  ------------------
  |  Branch (291:10): [True: 0, False: 3.10k]
  ------------------
  292|      0|    MCode *next = ((MCLink *)mc)->next;
  293|      0|    size_t sz = ((MCLink *)mc)->size;
  294|      0|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  295|      0|    mcode_free(J, mc, sz);
  296|      0|    mc = next;
  297|      0|  }
  298|  3.10k|}

lj_meta_init:
   30|  3.10k|{
   31|  3.10k|#define MMNAME(name)	"__" #name
   32|  3.10k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  3.10k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  3.10k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  3.10k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  3.10k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  3.10k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  3.10k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  3.10k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  3.10k|  /* The following are used in the standard libraries. */ \
  |  |  563|  3.10k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  3.10k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  3.10k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  3.10k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  3.10k|#undef MMNAME
   34|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  3.10k|  const char *p, *q;
   36|  3.10k|  uint32_t mm;
   37|  71.3k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 68.2k, False: 3.10k]
  ------------------
   38|  68.2k|    GCstr *s;
   39|   347k|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 344k, False: 3.10k]
  |  Branch (39:25): [True: 279k, False: 65.1k]
  ------------------
   40|  68.2k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|  68.2k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|  68.2k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|  68.2k|  }
   44|  3.10k|}
lj_meta_cache:
   48|  20.4k|{
   49|  20.4k|  cTValue *mo = lj_tab_getstr(mt, name);
   50|  20.4k|  lj_assertX(mm <= MM_FAST, "bad metamethod %d", mm);
  ------------------
  |  |  366|  20.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  20.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 20.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  20.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   51|  20.4k|  if (!mo || tvisnil(mo)) {  /* No metamethod? */
  ------------------
  |  |  782|  20.4k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 20.4k]
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 20.4k]
  ------------------
   52|      0|    mt->nomm |= (uint8_t)(1u<<mm);  /* Set negative cache flag. */
   53|      0|    return NULL;
   54|      0|  }
   55|  20.4k|  return mo;
   56|  20.4k|}
lj_meta_lookup:
   60|  1.87k|{
   61|  1.87k|  GCtab *mt;
   62|  1.87k|  if (tvistab(o))
  ------------------
  |  |  800|  1.87k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  1.87k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  1.87k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 4, False: 1.87k]
  |  |  ------------------
  ------------------
   63|      4|    mt = tabref(tabV(o)->metatable);
  ------------------
  |  |  514|      4|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      8|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 4, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|  1.87k|  else if (tvisudata(o))
  ------------------
  |  |  801|  1.87k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  1.87k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  1.87k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 1.87k]
  |  |  ------------------
  ------------------
   65|      0|    mt = tabref(udataV(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|  1.87k|  else
   67|  1.87k|    mt = tabref(basemt_obj(G(L), o));
  ------------------
  |  |  514|  1.87k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.74k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 394, False: 1.47k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   68|  1.87k|  if (mt) {
  ------------------
  |  Branch (68:7): [True: 1.06k, False: 807]
  ------------------
   69|  1.06k|    cTValue *mo = lj_tab_getstr(mt, mmname_str(G(L), mm));
  ------------------
  |  |  590|  1.06k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|  1.06k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  1.06k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   70|  1.06k|    if (mo)
  ------------------
  |  Branch (70:9): [True: 839, False: 230]
  ------------------
   71|    839|      return mo;
   72|  1.06k|  }
   73|  1.03k|  return niltv(L);
  ------------------
  |  |  667|  1.03k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.03k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.03k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.03k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.03k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.03k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|  1.03k|}
lj_meta_tget:
  136|  40.3k|{
  137|  40.3k|  int loop;
  138|  40.3k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|  40.3k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (138:18): [True: 40.3k, False: 0]
  ------------------
  139|  40.3k|    cTValue *mo;
  140|  40.3k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|  40.3k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 40.3k, False: 32]
  |  |  ------------------
  ------------------
  141|  40.3k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|  40.3k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  40.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  40.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  40.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 40.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  40.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|      0|      cTValue *tv = lj_tab_get(L, t, k);
  143|  40.3k|      if (!tvisnil(tv) ||
  ------------------
  |  |  782|  80.7k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (143:11): [True: 0, False: 40.3k]
  ------------------
  144|  40.3k|	  !(mo = lj_meta_fast(L, tabref(t->metatable), MM_index)))
  ------------------
  |  |   22|  40.3k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|  40.3k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 40.3k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (144:4): [True: 40.3k, False: 0]
  ------------------
  145|  40.3k|	return tv;
  146|  40.3k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_index))) {
  ------------------
  |  |  782|     32|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 32, False: 0]
  |  |  ------------------
  ------------------
  147|     32|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  148|      0|      return NULL;  /* unreachable */
  149|     32|    }
  150|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  151|      0|      L->top = mmcall(L, lj_cont_ra, mo, o, k);
  152|      0|      return NULL;  /* Trigger metamethod call. */
  153|      0|    }
  154|      0|    o = mo;
  155|      0|  }
  156|      0|  lj_err_msg(L, LJ_ERR_GETLOOP);
  157|      0|  return NULL;  /* unreachable */
  158|  40.3k|}
lj_meta_tset:
  162|   148k|{
  163|   148k|  TValue tmp;
  164|   148k|  int loop;
  165|   148k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|   148k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 148k, False: 0]
  ------------------
  166|   148k|    cTValue *mo;
  167|   148k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|   148k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 148k, False: 3]
  |  |  ------------------
  ------------------
  168|   148k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|   148k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   148k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   148k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   148k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 148k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   148k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|   148k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|   148k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
  171|      0|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|      0|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|      0|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      0|	return (TValue *)tv;
  174|   148k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|   148k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|   148k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 148k, False: 0]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   21|      0|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 148k, False: 0]
  ------------------
  175|   148k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|   148k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   148k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   148k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 148k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|   148k|	if (tv != niltv(L))
  ------------------
  |  |  667|   148k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   148k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   148k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   148k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 148k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   148k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 0, False: 148k]
  ------------------
  178|      0|	  return (TValue *)tv;
  179|   148k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  782|   148k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
  180|   148k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  803|   148k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|   297k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|   148k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  804|   297k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   148k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   148k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   148k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  812|      0|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  182|   148k|	return lj_tab_newkey(L, t, k);
  183|   148k|      }
  184|   148k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  782|      3|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  185|      3|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|      3|    }
  188|      0|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|      0|      return NULL;  /* Trigger metamethod call. */
  192|      0|    }
  193|      0|    copyTV(L, &tmp, mo);
  194|      0|    o = &tmp;
  195|      0|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|   148k|}
lj_meta_arith:
  215|    740|{
  216|    740|  MMS mm = bcmode_mm(op);
  ------------------
  |  |  251|    740|#define bcmode_mm(op)	((MMS)(lj_bc_mode[op]>>11))
  ------------------
  217|    740|  TValue tempb, tempc;
  218|    740|  cTValue *b, *c;
  219|    740|  if ((b = str2num(rb, &tempb)) != NULL &&
  ------------------
  |  Branch (219:7): [True: 381, False: 359]
  ------------------
  220|    740|      (c = str2num(rc, &tempc)) != NULL) {  /* Try coercion first. */
  ------------------
  |  Branch (220:7): [True: 43, False: 338]
  ------------------
  221|     43|    setnumV(ra, lj_vm_foldarith(numV(b), numV(c), (int)mm-MM_add));
  ------------------
  |  |  945|    172|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [True: 43, False: 0]
  |  |  |  Branch (945:35): [True: 43, False: 0]
  |  |  ------------------
  ------------------
  222|      0|    return NULL;
  223|    697|  } else {
  224|    697|    cTValue *mo = lj_meta_lookup(L, rb, mm);
  225|    697|    if (tvisnil(mo)) {
  ------------------
  |  |  782|    697|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 403, False: 294]
  |  |  ------------------
  ------------------
  226|    403|      mo = lj_meta_lookup(L, rc, mm);
  227|    403|      if (tvisnil(mo)) {
  ------------------
  |  |  782|    403|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 61, False: 342]
  |  |  ------------------
  ------------------
  228|     61|	if (str2num(rb, &tempb) == NULL) rc = rb;
  ------------------
  |  Branch (228:6): [True: 50, False: 11]
  ------------------
  229|     61|	lj_err_optype(L, rc, LJ_ERR_OPARITH);
  230|      0|	return NULL;  /* unreachable */
  231|     61|      }
  232|    403|    }
  233|    636|    return mmcall(L, lj_cont_ra, mo, rb, rc);
  234|    697|  }
  235|    740|}
lj_meta_cat:
  239|    338|{
  240|    338|  int fromc = 0;
  241|    338|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 0, False: 338]
  ------------------
  242|    527|  do {
  243|    527|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  795|  1.05k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    527|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    527|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 190, False: 337]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  802|    864|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    337|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    337|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    337|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 324, False: 13]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|     13|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|     26|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|     26|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     13|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|     13|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 13]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|    527|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  795|  1.02k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    514|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    514|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 32, False: 482]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  802|    996|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    482|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    482|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    482|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 289, False: 193]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|    193|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|    386|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|    386|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    193|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|    193|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 193]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|    206|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|    206|      if (tvisnil(mo)) {
  ------------------
  |  |  782|    206|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 198, False: 8]
  |  |  ------------------
  ------------------
  247|    198|	mo = lj_meta_lookup(L, top, MM_concat);
  248|    198|	if (tvisnil(mo)) {
  ------------------
  |  |  782|    198|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 194, False: 4]
  |  |  ------------------
  ------------------
  249|    194|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  795|    388|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    194|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    194|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1, False: 193]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  802|    193|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    193|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    193|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    193|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 1, False: 192]
  |  |  ------------------
  ------------------
  250|    194|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|    194|	}
  253|    198|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|     12|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|     12|#define LJ_FR2			1
  ------------------
  266|     12|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|     12|#define LJ_FR2			1
  ------------------
  267|     12|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|     12|#define LJ_FR2			1
  ------------------
  268|     12|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  895|     12|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|     12|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|     12|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|     12|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|     12|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|     12|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|     12|      return top+1;  /* Trigger metamethod call. */
  271|    321|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|    321|      TValue *e, *o = top;
  280|    321|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|    321|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    321|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    321|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1, False: 320]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|      1|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|    321|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|    320|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|    640|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|    640|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    320|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|    320|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 320]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|    641|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|    321|      SBuf *sb;
  283|  1.49k|      do {
  284|  1.49k|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|  1.49k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.49k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.49k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 46, False: 1.44k]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|     46|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     46|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     46|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     46|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     46|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  1.49k|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|  1.44k|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  2.89k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  2.89k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  1.44k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|  1.44k|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 1.44k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|  2.94k|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|  1.49k|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  795|  2.72k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.36k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.36k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 14, False: 1.34k]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  802|  1.34k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.34k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.34k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.34k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 1.15k, False: 189]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 1.36k, False: 132]
  ------------------
  287|    321|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|    321|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|    321|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 321]
  ------------------
  288|    321|      sb = lj_buf_tmp_(L);
  289|    321|      lj_buf_more(sb, (MSize)tlen);
  290|  2.13k|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 1.81k, False: 321]
  ------------------
  291|  1.81k|	if (tvisstr(o)) {
  ------------------
  |  |  795|  1.81k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.81k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.81k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 47, False: 1.76k]
  |  |  ------------------
  ------------------
  292|     47|	  GCstr *s = strV(o);
  ------------------
  |  |  859|     47|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     47|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     47|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     47|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 47, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     47|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|     47|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|     47|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|  1.76k|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|  1.76k|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  3.53k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  3.53k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  1.76k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|  1.76k|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 1.76k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|  1.76k|	} else if (tvisint(o)) {
  ------------------
  |  |  803|  1.76k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  3.53k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|  1.76k|	} else {
  301|  1.76k|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|  1.76k|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|  1.76k|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  1.76k|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|  1.76k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  866|  1.76k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  1.76k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.76k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.76k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.76k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.76k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|  1.76k|	}
  303|  1.81k|      }
  304|    321|      setstrV(L, top, lj_buf_str(L, sb));
  305|    321|    }
  306|    527|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 189, False: 132]
  ------------------
  307|    132|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|    132|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 12, False: 120]
  |  |  ------------------
  ------------------
  308|     12|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  718|     12|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|     12|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|     12|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|     12|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|     12|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|     12|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 12, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|     12|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 12, False: 0]
  ------------------
  309|     12|    lj_gc_step(L);
  310|     12|  }
  311|    132|  return NULL;
  312|    132|}
lj_meta_len:
  316|      4|{
  317|      4|  cTValue *mo = lj_meta_lookup(L, o, MM_len);
  318|      4|  if (tvisnil(mo)) {
  ------------------
  |  |  782|      4|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 3, False: 1]
  |  |  ------------------
  ------------------
  319|      3|    if (LJ_52 && tvistab(o))
  ------------------
  |  |  697|      6|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_52 && tvistab(o))
  ------------------
  |  |  800|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  320|      0|      tabref(tabV(o)->metatable)->nomm |= (uint8_t)(1u<<MM_len);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  321|      3|    else
  322|      3|      lj_err_optype(L, o, LJ_ERR_OPLEN);
  323|      0|    return NULL;
  324|      3|  }
  325|      1|  return mmcall(L, lj_cont_ra, mo, o, LJ_52 ? o : niltv(L));
  ------------------
  |  |  697|      1|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                return mmcall(L, lj_cont_ra, mo, o, LJ_52 ? o : niltv(L));
  ------------------
  |  |  667|      1|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      1|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      1|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  326|      1|}
lj_meta_equal_cd:
  356|     67|{
  357|     67|  ASMFunction cont = (bc_op(ins) & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  |   34|     67|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (357:22): [True: 61, False: 6]
  ------------------
  358|     67|  int op = (int)bc_op(ins) & ~1;
  ------------------
  |  |   34|     67|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  359|     67|  TValue tv;
  360|     67|  cTValue *mo, *o2, *o1 = &L->base[bc_a(ins)];
  ------------------
  |  |   35|     67|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  361|     67|  cTValue *o1mm = o1;
  362|     67|  if (op == BC_ISEQV) {
  ------------------
  |  Branch (362:7): [True: 64, False: 3]
  ------------------
  363|     64|    o2 = &L->base[bc_d(ins)];
  ------------------
  |  |   38|     64|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  364|     64|    if (!tviscdata(o1mm)) o1mm = o2;
  ------------------
  |  |  799|     64|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|     64|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|     64|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  ------------------
  |  Branch (364:9): [True: 61, False: 3]
  ------------------
  365|     64|  } else if (op == BC_ISEQS) {
  ------------------
  |  Branch (365:14): [True: 0, False: 3]
  ------------------
  366|      0|    setstrV(L, &tv, gco2str(proto_kgc(curr_proto(L), ~(ptrdiff_t)bc_d(ins))));
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  367|      0|    o2 = &tv;
  368|      3|  } else if (op == BC_ISEQN) {
  ------------------
  |  Branch (368:14): [True: 3, False: 0]
  ------------------
  369|      3|    o2 = &mref(curr_proto(L)->k, cTValue)[bc_d(ins)];
  ------------------
  |  |   36|      6|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 3, False: 0]
  |  |  ------------------
  ------------------
                  o2 = &mref(curr_proto(L)->k, cTValue)[bc_d(ins)];
  ------------------
  |  |   38|      3|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  370|      3|  } else {
  371|      0|    lj_assertL(op == BC_ISEQP, "bad bytecode op %d", op);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  372|      0|    setpriV(&tv, ~bc_d(ins));
  ------------------
  |  |  873|      0|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
  373|      0|    o2 = &tv;
  374|      0|  }
  375|     67|  mo = lj_meta_lookup(L, o1mm, MM_eq);
  376|     67|  if (LJ_LIKELY(!tvisnil(mo)))
  ------------------
  |  |  145|     67|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 67, False: 0]
  |  |  ------------------
  ------------------
  377|     67|    return mmcall(L, cont, mo, o1, o2);
  378|      0|  else
  379|      0|    return (TValue *)(intptr_t)(bc_op(ins) & 1);
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  380|     67|}
lj_meta_comp:
  385|    225|{
  386|    225|  if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  585|    450|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  799|    450|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    225|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    225|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 39, False: 186]
  |  |  ------------------
  ------------------
                if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  799|    186|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    186|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    186|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 78, False: 108]
  |  |  ------------------
  ------------------
  387|    117|    ASMFunction cont = (op & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  Branch (387:24): [True: 0, False: 117]
  ------------------
  388|    117|    MMS mm = (op & 2) ? MM_le : MM_lt;
  ------------------
  |  Branch (388:14): [True: 13, False: 104]
  ------------------
  389|    117|    cTValue *mo = lj_meta_lookup(L, tviscdata(o1) ? o1 : o2, mm);
  ------------------
  |  |  799|    117|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|    117|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|    117|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 39, False: 78]
  |  |  ------------------
  ------------------
  390|    117|    if (LJ_UNLIKELY(tvisnil(mo))) goto err;
  ------------------
  |  |  146|    117|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 117]
  |  |  ------------------
  ------------------
  391|    117|    return mmcall(L, cont, mo, o1, o2);
  392|    117|  } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  697|    216|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  781|    108|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  781|    108|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (392:23): [True: 29, False: 79]
  ------------------
  393|       |    /* Never called with two numbers. */
  394|     29|    if (tvisstr(o1) && tvisstr(o2)) {
  ------------------
  |  |  795|     58|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     29|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     29|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 24, False: 5]
  |  |  ------------------
  ------------------
                  if (tvisstr(o1) && tvisstr(o2)) {
  ------------------
  |  |  795|     24|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     24|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     24|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 24, False: 0]
  |  |  ------------------
  ------------------
  395|     24|      int32_t res = lj_str_cmp(strV(o1), strV(o2));
  ------------------
  |  |  859|     24|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     24|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     24|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     24|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 24, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     24|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    int32_t res = lj_str_cmp(strV(o1), strV(o2));
  ------------------
  |  |  859|     24|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|     24|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     24|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     24|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 24, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     24|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  396|     24|      return (TValue *)(intptr_t)(((op&2) ? res <= 0 : res < 0) ^ (op&1));
  ------------------
  |  Branch (396:36): [True: 4, False: 20]
  ------------------
  397|     24|    } else {
  398|      5|    trymt:
  399|      6|      while (1) {
  ------------------
  |  Branch (399:14): [Folded - Ignored]
  ------------------
  400|      6|	ASMFunction cont = (op & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  Branch (400:21): [True: 1, False: 5]
  ------------------
  401|      6|	MMS mm = (op & 2) ? MM_le : MM_lt;
  ------------------
  |  Branch (401:11): [True: 1, False: 5]
  ------------------
  402|      6|	cTValue *mo = lj_meta_lookup(L, o1, mm);
  403|       |#if LJ_52
  404|       |	if (tvisnil(mo) && tvisnil((mo = lj_meta_lookup(L, o2, mm))))
  405|       |#else
  406|      6|	cTValue *mo2 = lj_meta_lookup(L, o2, mm);
  407|      6|	if (tvisnil(mo) || !lj_obj_equal(mo, mo2))
  ------------------
  |  |  782|     12|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 6, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (407:21): [True: 0, False: 0]
  ------------------
  408|      6|#endif
  409|      6|	{
  410|      6|	  if (op & 2) {  /* MM_le not found: retry with MM_lt. */
  ------------------
  |  Branch (410:8): [True: 1, False: 5]
  ------------------
  411|      1|	    cTValue *ot = o1; o1 = o2; o2 = ot;  /* Swap operands. */
  412|      1|	    op ^= 3;  /* Use LT and flip condition. */
  413|      1|	    continue;
  414|      1|	  }
  415|      5|	  goto err;
  416|      6|	}
  417|      0|	return mmcall(L, cont, mo, o1, o2);
  418|      6|      }
  419|      5|    }
  420|     79|  } else if (tvisbool(o1) && tvisbool(o2)) {
  ------------------
  |  |  789|    158|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|    158|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     79|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|     79|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 2, False: 77]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|     77|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     77|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|     77|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 6, False: 71]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (tvisbool(o1) && tvisbool(o2)) {
  ------------------
  |  |  789|      8|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|     16|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      8|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      8|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      8|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      8|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      8|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 8]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  421|      0|    goto trymt;
  422|     79|  } else {
  423|     84|  err:
  424|     84|    lj_err_comp(L, o1, o2);
  425|      0|    return NULL;
  426|     79|  }
  427|    225|}
lj_meta_call:
  443|    137|{
  444|    137|  cTValue *mo = lj_meta_lookup(L, func, MM_call);
  445|    137|  TValue *p;
  446|    137|  if (!tvisfunc(mo))
  ------------------
  |  |  796|    137|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    137|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    137|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (446:7): [True: 131, False: 6]
  ------------------
  447|    131|    lj_err_optype_call(L, func);
  448|     12|  for (p = top; p > func+2*LJ_FR2; p--) copyTV(L, p, p-1);
  ------------------
  |  |  569|     12|#define LJ_FR2			1
  ------------------
  |  Branch (448:17): [True: 6, False: 6]
  ------------------
  449|      6|  if (LJ_FR2) copyTV(L, func+2, func);
  ------------------
  |  |  569|      6|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  450|      6|  copyTV(L, func, mo);
  451|      6|}
lj_meta.c:mmcall:
  108|    821|{
  109|       |  /*
  110|       |  **           |-- framesize -> top       top+1       top+2 top+3
  111|       |  ** before:   [func slots ...]
  112|       |  ** mm setup: [func slots ...] [cont|?]  [mo|tmtype] [a]   [b]
  113|       |  ** in asm:   [func slots ...] [cont|PC] [mo|delta]  [a]   [b]
  114|       |  **           ^-- func base                          ^-- mm base
  115|       |  ** after mm: [func slots ...]           [result]
  116|       |  **                ^-- copy to base[PC_RA] --/     for lj_cont_ra
  117|       |  **                          istruecond + branch   for lj_cont_cond*
  118|       |  **                                       ignore   for lj_cont_nop
  119|       |  ** next PC:  [func slots ...]
  120|       |  */
  121|    821|  TValue *top = L->top;
  122|    821|  if (curr_funcisL(L)) top = curr_topL(L);
  ------------------
  |  |  716|    821|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|    821|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|    821|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 821, False: 0]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) top = curr_topL(L);
  ------------------
  |  |  718|    821|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|    821|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|    821|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|    821|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|    821|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|    821|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 821, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|    821|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|    821|  setcont(top++, cont);  /* Assembler VM stores PC in upper word or FR2. */
  ------------------
  |  |  895|    821|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|    821|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  124|    821|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|    821|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|    821|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  125|    821|  copyTV(L, top++, mo);  /* Store metamethod and two arguments. */
  126|    821|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|    821|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|    821|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  127|    821|  copyTV(L, top, a);
  128|    821|  copyTV(L, top+1, b);
  129|    821|  return top;  /* Return new base. */
  130|    821|}
lj_meta.c:str2num:
  201|  1.18k|{
  202|  1.18k|  if (tvisnum(o))
  ------------------
  |  |  804|  1.18k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.18k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.18k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.18k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 367, False: 815]
  |  |  ------------------
  ------------------
  203|    367|    return o;
  204|    815|  else if (tvisint(o))
  ------------------
  |  |  803|    815|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.63k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  205|      0|    return (setnumV(n, (lua_Number)intV(o)), n);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  206|    815|  else if (tvisstr(o) && lj_strscan_num(strV(o), n))
  ------------------
  |  |  795|  1.63k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    815|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    815|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 125, False: 690]
  |  |  ------------------
  ------------------
                else if (tvisstr(o) && lj_strscan_num(strV(o), n))
  ------------------
  |  |  859|    125|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    125|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    125|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    125|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 125, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    125|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (206:26): [True: 68, False: 57]
  ------------------
  207|     68|    return n;
  208|    747|  else
  209|    747|    return NULL;
  210|  1.18k|}

lj_obj_equal:
   24|  89.7k|{
   25|  89.7k|  if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  89.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  89.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (25:7): [True: 69.9k, False: 19.7k]
  ------------------
   26|  69.9k|    if (tvispri(o1))
  ------------------
  |  |  807|  69.9k|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|  69.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|  69.9k|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  69.9k|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 0, False: 69.9k]
  |  |  ------------------
  ------------------
   27|      0|      return 1;
   28|  69.9k|    if (!tvisnum(o1))
  ------------------
  |  |  804|  69.9k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  69.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  69.9k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  69.9k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (28:9): [True: 63.7k, False: 6.21k]
  ------------------
   29|  63.7k|      return gcrefeq(o1->gcr, o2->gcr);
  ------------------
  |  |   70|  63.7k|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  ------------------
   30|  69.9k|  } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  39.5k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  19.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  19.7k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  19.7k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  4.89k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  4.89k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  4.89k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  4.89k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (30:14): [True: 14.9k, False: 4.89k]
  |  Branch (30:33): [True: 499, False: 4.39k]
  ------------------
   31|  15.4k|    return 0;
   32|  15.4k|  }
   33|  10.6k|  return numberVnum(o1) == numberVnum(o2);
   34|  89.7k|}

lj_state.c:setgcVraw:
  918|  6.20k|{
  919|  6.20k|#if LJ_GC64
  920|  6.20k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  6.20k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  6.20k|}
lj_state.c:setgcV:
  927|  6.20k|{
  928|  6.20k|  setgcVraw(o, v, it);
  929|  6.20k|  checklivetv(L, o, "store to dead GC object");
  930|  6.20k|}
lj_state.c:checklivetv:
  904|  6.20k|{
  905|  6.20k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  6.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  6.20k|#if LUA_USE_ASSERT
  907|  6.20k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  6.20k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  6.20k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  6.20k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  6.20k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  6.20k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  6.20k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  6.20k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 6.20k, False: 0]
  |  |  ------------------
  ------------------
  908|  6.20k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  6.20k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  6.20k|	       "mismatch of TValue type %d vs GC type %d",
  910|  6.20k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  6.20k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  6.20k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  6.20k|  }
  914|  6.20k|#endif
  915|  6.20k|}
lj_state.c:settabV:
  933|  3.10k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.10k|{ \
  935|  3.10k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.10k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.10k|}
lj_state.c:setthreadV:
  933|  3.10k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.10k|{ \
  935|  3.10k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.10k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.10k|}
lj_api.c:copyTV:
  975|   608k|{
  976|   608k|  *o1 = *o2;
  977|   608k|  checklivetv(L, o1, "copy of dead GC object");
  978|   608k|}
lj_api.c:checklivetv:
  904|  1.15M|{
  905|  1.15M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.15M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.15M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.15M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.15M|#if LUA_USE_ASSERT
  907|  1.15M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.15M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.15M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.15M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.15M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.15M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.15M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.15M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.06M, False: 83.8k]
  |  |  ------------------
  ------------------
  908|  1.06M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.06M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.06M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.06M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.06M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.06M|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.06M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.06M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.06M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.06M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.06M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.06M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.06M|  }
  914|  1.15M|#endif
  915|  1.15M|}
lj_api.c:setstrV:
  933|   348k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   348k|{ \
  935|   348k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   348k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   348k|}
lj_api.c:setgcV:
  927|   543k|{
  928|   543k|  setgcVraw(o, v, it);
  929|   543k|  checklivetv(L, o, "store to dead GC object");
  930|   543k|}
lj_api.c:setint64V:
  960|  3.10k|{
  961|  3.10k|  if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  549|  6.20k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  962|      0|    setintV(o, (int32_t)i);
  963|  3.10k|  else
  964|  3.10k|    setnumV(o, (lua_Number)i);
  ------------------
  |  |  945|  3.10k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  965|  3.10k|}
lj_api.c:setfuncV:
  933|  83.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  83.8k|{ \
  935|  83.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  83.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  83.8k|}
lj_api.c:settabV:
  933|  98.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  98.2k|{ \
  935|  98.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  98.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  98.2k|}
lj_api.c:setudataV:
  933|  12.4k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  12.4k|{ \
  935|  12.4k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  12.4k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  12.4k|}
lj_api.c:setgcVraw:
  918|   543k|{
  919|   543k|#if LJ_GC64
  920|   543k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   543k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   543k|}
lj_lex.c:setstrV:
  933|  96.1k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  96.1k|{ \
  935|  96.1k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  96.1k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  96.1k|}
lj_lex.c:setgcV:
  927|  96.1k|{
  928|  96.1k|  setgcVraw(o, v, it);
  929|  96.1k|  checklivetv(L, o, "store to dead GC object");
  930|  96.1k|}
lj_lex.c:setgcVraw:
  918|  96.1k|{
  919|  96.1k|#if LJ_GC64
  920|  96.1k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  96.1k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  96.1k|}
lj_lex.c:checklivetv:
  904|  96.1k|{
  905|  96.1k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  96.1k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  96.1k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  96.1k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  96.1k|#if LUA_USE_ASSERT
  907|  96.1k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  96.1k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  96.1k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  96.1k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  96.1k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  96.1k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  96.1k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  96.1k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 96.1k, False: 0]
  |  |  ------------------
  ------------------
  908|  96.1k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  96.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  96.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 96.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  96.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  96.1k|	       "mismatch of TValue type %d vs GC type %d",
  910|  96.1k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  96.1k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  96.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  96.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 96.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  96.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  96.1k|  }
  914|  96.1k|#endif
  915|  96.1k|}
lj_parse.c:setcdataV:
  933|  7.30k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  7.30k|{ \
  935|  7.30k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  7.30k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  7.30k|}
lj_parse.c:setgcV:
  927|   114k|{
  928|   114k|  setgcVraw(o, v, it);
  929|   114k|  checklivetv(L, o, "store to dead GC object");
  930|   114k|}
lj_parse.c:setgcVraw:
  918|   115k|{
  919|   115k|#if LJ_GC64
  920|   115k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   115k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   115k|}
lj_parse.c:checklivetv:
  904|   153k|{
  905|   153k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   153k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   153k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   153k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   153k|#if LUA_USE_ASSERT
  907|   153k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   153k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   153k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   153k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   153k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   153k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   153k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   153k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 121k, False: 31.7k]
  |  |  ------------------
  ------------------
  908|   121k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   121k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   121k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 121k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   121k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   121k|	       "mismatch of TValue type %d vs GC type %d",
  910|   121k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   121k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   121k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   121k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 121k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   121k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   121k|  }
  914|   153k|#endif
  915|   153k|}
lj_parse.c:setstrV:
  933|  3.10k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.10k|{ \
  935|  3.10k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.10k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.10k|}
lj_parse.c:settabV:
  933|  3.54k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.54k|{ \
  935|  3.54k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.54k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.54k|}
lj_parse.c:copyTV:
  975|  38.9k|{
  976|  38.9k|  *o1 = *o2;
  977|  38.9k|  checklivetv(L, o1, "copy of dead GC object");
  978|  38.9k|}
lj_parse.c:numberVnum:
 1029|  38.7k|{
 1030|  38.7k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  38.7k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  38.7k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  38.7k|  else
 1033|  38.7k|    return numV(o);
  ------------------
  |  |  866|  38.7k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  38.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  38.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  38.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 38.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  38.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  38.7k|}
lj_parse.c:setintV:
  951|  21.0k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  21.0k|  o->n = (lua_Number)i;
  956|  21.0k|#endif
  957|  21.0k|}
lj_load.c:setgcV:
  927|    829|{
  928|    829|  setgcVraw(o, v, it);
  929|    829|  checklivetv(L, o, "store to dead GC object");
  930|    829|}
lj_load.c:setgcVraw:
  918|    829|{
  919|    829|#if LJ_GC64
  920|    829|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    829|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    829|}
lj_load.c:checklivetv:
  904|    829|{
  905|    829|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    829|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    829|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    829|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    829|#if LUA_USE_ASSERT
  907|    829|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    829|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    829|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    829|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    829|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    829|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    829|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    829|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 829, False: 0]
  |  |  ------------------
  ------------------
  908|    829|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    829|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    829|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 829, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    829|	       "mismatch of TValue type %d vs GC type %d",
  910|    829|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    829|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    829|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    829|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 829, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    829|  }
  914|    829|#endif
  915|    829|}
lj_load.c:setfuncV:
  933|    829|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    829|{ \
  935|    829|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    829|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    829|}
lj_ctype.c:setstrV:
  933|  3.10k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.10k|{ \
  935|  3.10k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.10k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.10k|}
lj_ctype.c:setgcV:
  927|  3.10k|{
  928|  3.10k|  setgcVraw(o, v, it);
  929|  3.10k|  checklivetv(L, o, "store to dead GC object");
  930|  3.10k|}
lj_ctype.c:setgcVraw:
  918|  3.10k|{
  919|  3.10k|#if LJ_GC64
  920|  3.10k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.10k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  3.10k|}
lj_ctype.c:checklivetv:
  904|  3.10k|{
  905|  3.10k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.10k|#if LUA_USE_ASSERT
  907|  3.10k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.10k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.10k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.10k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.10k, False: 0]
  |  |  ------------------
  ------------------
  908|  3.10k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.10k|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.10k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.10k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.10k|  }
  914|  3.10k|#endif
  915|  3.10k|}
lib_ffi.c:settabV:
  933|  1.01k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  1.01k|{ \
  935|  1.01k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  1.01k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  1.01k|}
lib_ffi.c:setgcV:
  927|  1.01k|{
  928|  1.01k|  setgcVraw(o, v, it);
  929|  1.01k|  checklivetv(L, o, "store to dead GC object");
  930|  1.01k|}
lib_ffi.c:setgcVraw:
  918|  1.01k|{
  919|  1.01k|#if LJ_GC64
  920|  1.01k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  1.01k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  1.01k|}
lib_ffi.c:checklivetv:
  904|  1.52k|{
  905|  1.52k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.52k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.52k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.52k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.52k|#if LUA_USE_ASSERT
  907|  1.52k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.52k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.52k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.52k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.52k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.52k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.52k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.52k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.52k, False: 0]
  |  |  ------------------
  ------------------
  908|  1.52k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.52k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.52k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.52k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.52k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.52k|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.52k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.52k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.52k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.52k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.52k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.52k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.52k|  }
  914|  1.52k|#endif
  915|  1.52k|}
lib_ffi.c:copyTV:
  975|    509|{
  976|    509|  *o1 = *o2;
  977|    509|  checklivetv(L, o1, "copy of dead GC object");
  978|    509|}
lj_gc.c:setgcV:
  927|  9.82k|{
  928|  9.82k|  setgcVraw(o, v, it);
  929|  9.82k|  checklivetv(L, o, "store to dead GC object");
  930|  9.82k|}
lj_gc.c:setgcVraw:
  918|  9.82k|{
  919|  9.82k|#if LJ_GC64
  920|  9.82k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  9.82k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  9.82k|}
lj_gc.c:checklivetv:
  904|  19.6k|{
  905|  19.6k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  19.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  19.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  19.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  19.6k|#if LUA_USE_ASSERT
  907|  19.6k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  19.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  19.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  19.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  19.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  19.6k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  19.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  19.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 19.6k, False: 0]
  |  |  ------------------
  ------------------
  908|  19.6k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  19.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  19.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 19.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  19.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  19.6k|	       "mismatch of TValue type %d vs GC type %d",
  910|  19.6k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  19.6k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  19.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  19.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 19.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  19.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  19.6k|  }
  914|  19.6k|#endif
  915|  19.6k|}
lj_gc.c:copyTV:
  975|  9.82k|{
  976|  9.82k|  *o1 = *o2;
  977|  9.82k|  checklivetv(L, o1, "copy of dead GC object");
  978|  9.82k|}
lj_err.c:checklivetv:
  904|  2.91k|{
  905|  2.91k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.91k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.91k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.91k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  2.91k|#if LUA_USE_ASSERT
  907|  2.91k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  2.91k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  2.91k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  2.91k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  2.91k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  2.91k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  2.91k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  2.91k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 2.91k, False: 0]
  |  |  ------------------
  ------------------
  908|  2.91k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  2.91k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.91k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.91k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.91k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  2.91k|	       "mismatch of TValue type %d vs GC type %d",
  910|  2.91k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  2.91k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  2.91k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.91k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.91k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.91k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  2.91k|  }
  914|  2.91k|#endif
  915|  2.91k|}
lj_err.c:copyTV:
  975|  2.91k|{
  976|  2.91k|  *o1 = *o2;
  977|  2.91k|  checklivetv(L, o1, "copy of dead GC object");
  978|  2.91k|}
lj_obj.c:numberVnum:
 1029|  21.2k|{
 1030|  21.2k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  21.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  21.2k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  21.2k|  else
 1033|  21.2k|    return numV(o);
  ------------------
  |  |  866|  21.2k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  21.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  21.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  21.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 21.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  21.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  21.2k|}
lj_tab.c:copyTV:
  975|   105k|{
  976|   105k|  *o1 = *o2;
  977|   105k|  checklivetv(L, o1, "copy of dead GC object");
  978|   105k|}
lj_tab.c:checklivetv:
  904|   751k|{
  905|   751k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   751k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   751k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   751k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   751k|#if LUA_USE_ASSERT
  907|   751k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   751k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   751k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   751k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   751k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   751k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   751k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   751k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 708k, False: 43.4k]
  |  |  ------------------
  ------------------
  908|   708k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   708k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   708k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 708k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   708k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   708k|	       "mismatch of TValue type %d vs GC type %d",
  910|   708k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   708k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   708k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   708k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 708k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   708k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   708k|  }
  914|   751k|#endif
  915|   751k|}
lj_tab.c:setstrV:
  933|   646k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   646k|{ \
  935|   646k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   646k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   646k|}
lj_tab.c:setgcV:
  927|   646k|{
  928|   646k|  setgcVraw(o, v, it);
  929|   646k|  checklivetv(L, o, "store to dead GC object");
  930|   646k|}
lj_tab.c:setgcVraw:
  918|   646k|{
  919|   646k|#if LJ_GC64
  920|   646k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   646k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   646k|}
lj_meta.c:copyTV:
  975|  2.51k|{
  976|  2.51k|  *o1 = *o2;
  977|  2.51k|  checklivetv(L, o1, "copy of dead GC object");
  978|  2.51k|}
lj_meta.c:checklivetv:
  904|  2.83k|{
  905|  2.83k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.83k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.83k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  2.83k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  2.83k|#if LUA_USE_ASSERT
  907|  2.83k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  2.83k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  2.83k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  2.83k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  2.83k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  2.83k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  2.83k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  2.83k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 2.16k, False: 676]
  |  |  ------------------
  ------------------
  908|  2.16k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  2.16k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.16k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.16k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.16k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  2.16k|	       "mismatch of TValue type %d vs GC type %d",
  910|  2.16k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  2.16k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  2.16k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.16k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.16k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.16k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  2.16k|  }
  914|  2.83k|#endif
  915|  2.83k|}
lj_meta.c:setgcVraw:
  918|    321|{
  919|    321|#if LJ_GC64
  920|    321|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    321|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    321|}
lj_meta.c:setstrV:
  933|    321|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    321|{ \
  935|    321|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    321|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    321|}
lj_meta.c:setgcV:
  927|    321|{
  928|    321|  setgcVraw(o, v, it);
  929|    321|  checklivetv(L, o, "store to dead GC object");
  930|    321|}
lj_strfmt.c:checklivetv:
  904|  9.78k|{
  905|  9.78k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.78k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.78k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.78k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  9.78k|#if LUA_USE_ASSERT
  907|  9.78k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  9.78k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  9.78k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  9.78k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  9.78k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  9.78k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  9.78k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  9.78k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 9.78k, False: 0]
  |  |  ------------------
  ------------------
  908|  9.78k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  9.78k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.78k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.78k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.78k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  9.78k|	       "mismatch of TValue type %d vs GC type %d",
  910|  9.78k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  9.78k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  9.78k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.78k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.78k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.78k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  9.78k|  }
  914|  9.78k|#endif
  915|  9.78k|}
lj_strfmt.c:setstrV:
  933|  9.78k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  9.78k|{ \
  935|  9.78k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  9.78k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  9.78k|}
lj_strfmt.c:setgcV:
  927|  9.78k|{
  928|  9.78k|  setgcVraw(o, v, it);
  929|  9.78k|  checklivetv(L, o, "store to dead GC object");
  930|  9.78k|}
lj_strfmt.c:setgcVraw:
  918|  9.78k|{
  919|  9.78k|#if LJ_GC64
  920|  9.78k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  9.78k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  9.78k|}
lj_bcread.c:setintV:
  951|  6.20k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  6.20k|  o->n = (lua_Number)i;
  956|  6.20k|#endif
  957|  6.20k|}
lj_cconv.c:lj_num2u64:
 1010|    115|{
 1011|    115|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS
 1012|    115|  int64_t i = (int64_t)n;
 1013|    115|  if (i < 0) i = (int64_t)(n - 18446744073709551616.0);
  ------------------
  |  Branch (1013:7): [True: 24, False: 91]
  ------------------
 1014|    115|  return (uint64_t)i;
 1015|       |#else
 1016|       |  return (uint64_t)n;
 1017|       |#endif
 1018|    115|}
lj_carith.c:setcdataV:
  933|    593|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    593|{ \
  935|    593|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    593|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    593|}
lj_carith.c:setgcV:
  927|    593|{
  928|    593|  setgcVraw(o, v, it);
  929|    593|  checklivetv(L, o, "store to dead GC object");
  930|    593|}
lj_carith.c:setgcVraw:
  918|    593|{
  919|    593|#if LJ_GC64
  920|    593|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    593|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    593|}
lj_carith.c:checklivetv:
  904|  1.23k|{
  905|  1.23k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.23k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.23k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.23k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.23k|#if LUA_USE_ASSERT
  907|  1.23k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.23k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.23k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.23k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.23k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.23k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.23k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.23k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.18k, False: 53]
  |  |  ------------------
  ------------------
  908|  1.18k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.18k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.18k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.18k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.18k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.18k|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.18k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.18k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.18k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.18k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.18k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.18k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.18k|  }
  914|  1.23k|#endif
  915|  1.23k|}
lj_carith.c:copyTV:
  975|    646|{
  976|    646|  *o1 = *o2;
  977|    646|  checklivetv(L, o1, "copy of dead GC object");
  978|    646|}
lj_clib.c:setgcV:
  927|    509|{
  928|    509|  setgcVraw(o, v, it);
  929|    509|  checklivetv(L, o, "store to dead GC object");
  930|    509|}
lj_clib.c:setgcVraw:
  918|    509|{
  919|    509|#if LJ_GC64
  920|    509|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    509|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    509|}
lj_clib.c:checklivetv:
  904|    509|{
  905|    509|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    509|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    509|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    509|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    509|#if LUA_USE_ASSERT
  907|    509|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    509|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    509|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    509|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    509|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    509|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    509|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    509|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 509, False: 0]
  |  |  ------------------
  ------------------
  908|    509|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    509|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    509|	       "mismatch of TValue type %d vs GC type %d",
  910|    509|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    509|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    509|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    509|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 509, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    509|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    509|  }
  914|    509|#endif
  915|    509|}
lj_clib.c:setudataV:
  933|    509|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    509|{ \
  935|    509|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    509|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    509|}
lj_lib.c:settabV:
  933|  68.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  68.2k|{ \
  935|  68.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  68.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  68.2k|}
lj_lib.c:setgcV:
  927|   635k|{
  928|   635k|  setgcVraw(o, v, it);
  929|   635k|  checklivetv(L, o, "store to dead GC object");
  930|   635k|}
lj_lib.c:setgcVraw:
  918|   635k|{
  919|   635k|#if LJ_GC64
  920|   635k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   635k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   635k|}
lj_lib.c:checklivetv:
  904|   703k|{
  905|   703k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   703k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   703k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   703k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   703k|#if LUA_USE_ASSERT
  907|   703k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   703k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   703k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   703k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   703k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   703k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   703k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   703k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 691k, False: 12.4k]
  |  |  ------------------
  ------------------
  908|   691k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   691k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   691k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 691k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   691k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   691k|	       "mismatch of TValue type %d vs GC type %d",
  910|   691k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   691k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   691k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   691k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 691k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   691k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   691k|  }
  914|   703k|#endif
  915|   703k|}
lj_lib.c:setfuncV:
  933|   495k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   495k|{ \
  935|   495k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   495k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   495k|}
lj_lib.c:copyTV:
  975|  67.6k|{
  976|  67.6k|  *o1 = *o2;
  977|  67.6k|  checklivetv(L, o1, "copy of dead GC object");
  978|  67.6k|}
lj_lib.c:setstrV:
  933|  72.3k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  72.3k|{ \
  935|  72.3k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  72.3k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  72.3k|}
lib_base.c:checklivetv:
  904|  9.31k|{
  905|  9.31k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.31k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.31k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.31k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  9.31k|#if LUA_USE_ASSERT
  907|  9.31k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  9.31k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  9.31k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  9.31k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  9.31k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  9.31k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  9.31k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  9.31k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 9.31k, False: 0]
  |  |  ------------------
  ------------------
  908|  9.31k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  9.31k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.31k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.31k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  9.31k|	       "mismatch of TValue type %d vs GC type %d",
  910|  9.31k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  9.31k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  9.31k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.31k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.31k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  9.31k|  }
  914|  9.31k|#endif
  915|  9.31k|}
lib_base.c:settabV:
  933|  6.20k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  6.20k|{ \
  935|  6.20k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  6.20k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  6.20k|}
lib_base.c:setgcV:
  927|  9.31k|{
  928|  9.31k|  setgcVraw(o, v, it);
  929|  9.31k|  checklivetv(L, o, "store to dead GC object");
  930|  9.31k|}
lib_base.c:setgcVraw:
  918|  9.31k|{
  919|  9.31k|#if LJ_GC64
  920|  9.31k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  9.31k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  9.31k|}
lib_base.c:setstrV:
  933|  3.10k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.10k|{ \
  935|  3.10k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.10k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.10k|}
lib_string.c:setgcV:
  927|  3.10k|{
  928|  3.10k|  setgcVraw(o, v, it);
  929|  3.10k|  checklivetv(L, o, "store to dead GC object");
  930|  3.10k|}
lib_string.c:setgcVraw:
  918|  3.10k|{
  919|  3.10k|#if LJ_GC64
  920|  3.10k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.10k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  3.10k|}
lib_string.c:checklivetv:
  904|  3.10k|{
  905|  3.10k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.10k|#if LUA_USE_ASSERT
  907|  3.10k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.10k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.10k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.10k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.10k, False: 0]
  |  |  ------------------
  ------------------
  908|  3.10k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.10k|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.10k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.10k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.10k|  }
  914|  3.10k|#endif
  915|  3.10k|}
lib_string.c:settabV:
  933|  3.10k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.10k|{ \
  935|  3.10k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.10k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.10k|}
lib_io.c:checklivetv:
  904|  3.10k|{
  905|  3.10k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.10k|#if LUA_USE_ASSERT
  907|  3.10k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.10k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.10k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.10k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.10k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.10k, False: 0]
  |  |  ------------------
  ------------------
  908|  3.10k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.10k|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.10k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.10k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.10k|  }
  914|  3.10k|#endif
  915|  3.10k|}
lib_io.c:copyTV:
  975|  3.10k|{
  976|  3.10k|  *o1 = *o2;
  977|  3.10k|  checklivetv(L, o1, "copy of dead GC object");
  978|  3.10k|}

lj_parse_keepstr:
  240|  96.1k|{
  241|       |  /* NOBARRIER: the key is new or kept alive. */
  242|  96.1k|  lua_State *L = ls->L;
  243|  96.1k|  GCstr *s = lj_str_new(L, str, len);
  244|  96.1k|  TValue *tv = lj_tab_setstr(L, ls->fs->kt, s);
  245|  96.1k|  if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  782|  96.1k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 14.2k, False: 81.9k]
  |  |  ------------------
  ------------------
                if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  874|  14.2k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  246|  96.1k|  lj_gc_check(L);
  ------------------
  |  |   66|  96.1k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  96.1k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1.96k, False: 94.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  96.1k|      lj_gc_step(L); }
  ------------------
  247|  96.1k|  return s;
  248|  96.1k|}
lj_parse_keepcdata:
  253|  7.30k|{
  254|       |  /* NOBARRIER: the key is new or kept alive. */
  255|  7.30k|  lua_State *L = ls->L;
  256|  7.30k|  setcdataV(L, tv, cd);
  257|  7.30k|  setboolV(lj_tab_set(L, ls->fs->kt, tv), 1);
  ------------------
  |  |  874|  7.30k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  258|  7.30k|}
lj_parse:
 2730|  3.10k|{
 2731|  3.10k|  FuncState fs;
 2732|  3.10k|  FuncScope bl;
 2733|  3.10k|  GCproto *pt;
 2734|  3.10k|  lua_State *L = ls->L;
 2735|       |#ifdef LUAJIT_DISABLE_DEBUGINFO
 2736|       |  ls->chunkname = lj_str_newlit(L, "=");
 2737|       |#else
 2738|  3.10k|  ls->chunkname = lj_str_newz(L, ls->chunkarg);
  ------------------
  |  |   27|  3.10k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
 2739|  3.10k|#endif
 2740|  3.10k|  setstrV(L, L->top, ls->chunkname);  /* Anchor chunkname string. */
 2741|  3.10k|  incr_top(L);
  ------------------
  |  |   12|  3.10k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  6.20k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 3.10k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2742|  3.10k|  ls->level = 0;
 2743|  3.10k|  fs_init(ls, &fs);
 2744|  3.10k|  fs.linedefined = 0;
 2745|  3.10k|  fs.numparams = 0;
 2746|  3.10k|  fs.bcbase = NULL;
 2747|  3.10k|  fs.bclim = 0;
 2748|  3.10k|  fs.flags |= PROTO_VARARG;  /* Main chunk is always a vararg func. */
  ------------------
  |  |  400|  3.10k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 2749|  3.10k|  fscope_begin(&fs, &bl, 0);
 2750|  3.10k|  bcemit_AD(&fs, BC_FUNCV, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  3.10k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  3.10k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2751|  3.10k|  lj_lex_next(ls);  /* Read-ahead first token. */
 2752|  3.10k|  parse_chunk(ls);
 2753|  3.10k|  if (ls->tok != TK_eof)
  ------------------
  |  Branch (2753:7): [True: 0, False: 3.10k]
  ------------------
 2754|      0|    err_token(ls, TK_eof);
 2755|  3.10k|  pt = fs_finish(ls, ls->linenumber);
 2756|  3.10k|  L->top--;  /* Drop chunkname. */
 2757|  3.10k|  lj_assertL(fs.prev == NULL && ls->fs == NULL, "mismatched frame nesting");
  ------------------
  |  |  365|  3.10k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.93k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 829, False: 2.27k]
  |  |  |  |  |  Branch (355:5): [True: 829, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2758|    829|  lj_assertL(pt->sizeuv == 0, "toplevel proto has upvalues");
  ------------------
  |  |  365|    829|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    829|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 829, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2759|    829|  return pt;
 2760|    829|}
lj_parse.c:fs_init:
 1626|  3.10k|{
 1627|  3.10k|  lua_State *L = ls->L;
 1628|  3.10k|  fs->prev = ls->fs; ls->fs = fs;  /* Append to list. */
 1629|  3.10k|  fs->ls = ls;
 1630|  3.10k|  fs->vbase = ls->vtop;
 1631|  3.10k|  fs->L = L;
 1632|  3.10k|  fs->pc = 0;
 1633|  3.10k|  fs->lasttarget = 0;
 1634|  3.10k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  3.10k|#define NO_JMP		(~(BCPos)0)
  ------------------
 1635|  3.10k|  fs->freereg = 0;
 1636|  3.10k|  fs->nkgc = 0;
 1637|  3.10k|  fs->nkn = 0;
 1638|  3.10k|  fs->nactvar = 0;
 1639|  3.10k|  fs->nuv = 0;
 1640|  3.10k|  fs->bl = NULL;
 1641|  3.10k|  fs->flags = 0;
 1642|  3.10k|  fs->framesize = 1;  /* Minimum frame size. */
 1643|  3.10k|  fs->kt = lj_tab_new(L, 0, 0);
 1644|       |  /* Anchor table of constants in stack to avoid being collected. */
 1645|  3.10k|  settabV(L, L->top, fs->kt);
 1646|  3.10k|  incr_top(L);
  ------------------
  |  |   12|  3.10k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  6.20k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 3.10k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1647|  3.10k|}
lj_parse.c:fscope_begin:
 1283|  3.19k|{
 1284|  3.19k|  bl->nactvar = (uint8_t)fs->nactvar;
 1285|  3.19k|  bl->flags = flags;
 1286|  3.19k|  bl->vstart = fs->ls->vtop;
 1287|  3.19k|  bl->prev = fs->bl;
 1288|  3.19k|  fs->bl = bl;
 1289|  3.19k|  lj_assertFS(fs->freereg == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|  3.19k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.19k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.19k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.19k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.19k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1290|  3.19k|}
lj_parse.c:bcemit_INS:
  416|   265k|{
  417|   265k|  BCPos pc = fs->pc;
  418|   265k|  LexState *ls = fs->ls;
  419|   265k|  jmp_patchval(fs, fs->jpc, pc, NO_REG, pc);
  ------------------
  |  |   30|   265k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|   265k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  420|   265k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|   265k|#define NO_JMP		(~(BCPos)0)
  ------------------
  421|   265k|  if (LJ_UNLIKELY(pc >= fs->bclim)) {
  ------------------
  |  |  146|   265k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 8.79k, False: 257k]
  |  |  ------------------
  ------------------
  422|  8.79k|    ptrdiff_t base = fs->bcbase - ls->bcstack;
  423|  8.79k|    checklimit(fs, ls->sizebcstack, LJ_MAX_BCINS, "bytecode instructions");
  ------------------
  |  |  192|  8.79k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 8.79k]
  |  |  ------------------
  ------------------
  424|  8.79k|    lj_mem_growvec(fs->L, ls->bcstack, ls->sizebcstack, LJ_MAX_BCINS,BCInsLine);
  ------------------
  |  |  129|  8.79k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  425|  8.79k|    fs->bclim = (BCPos)(ls->sizebcstack - base);
  426|  8.79k|    fs->bcbase = ls->bcstack + base;
  427|  8.79k|  }
  428|   265k|  fs->bcbase[pc].ins = ins;
  429|   265k|  fs->bcbase[pc].line = ls->lastline;
  430|   265k|  fs->pc = pc+1;
  431|   265k|  return pc;
  432|   265k|}
lj_parse.c:jmp_patchval:
  347|   281k|{
  348|   289k|  while (list != NO_JMP) {
  ------------------
  |  |   31|   289k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (348:10): [True: 8.30k, False: 281k]
  ------------------
  349|  8.30k|    BCPos next = jmp_next(fs, list);
  350|  8.30k|    if (jmp_patchtestreg(fs, list, reg))
  ------------------
  |  Branch (350:9): [True: 623, False: 7.68k]
  ------------------
  351|    623|      jmp_patchins(fs, list, vtarget);  /* Jump to target with value. */
  352|  7.68k|    else
  353|  7.68k|      jmp_patchins(fs, list, dtarget);  /* Jump to default target. */
  354|  8.30k|    list = next;
  355|  8.30k|  }
  356|   281k|}
lj_parse.c:jmp_next:
  265|  13.8k|{
  266|  13.8k|  ptrdiff_t delta = bc_j(fs->bcbase[pc].ins);
  ------------------
  |  |   39|  13.8k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  13.8k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  13.8k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  267|  13.8k|  if ((BCPos)delta == NO_JMP)
  ------------------
  |  |   31|  13.8k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (267:7): [True: 9.12k, False: 4.74k]
  ------------------
  268|  9.12k|    return NO_JMP;
  ------------------
  |  |   31|  9.12k|#define NO_JMP		(~(BCPos)0)
  ------------------
  269|  4.74k|  else
  270|  4.74k|    return (BCPos)(((ptrdiff_t)pc+1)+delta);
  271|  13.8k|}
lj_parse.c:jmp_patchtestreg:
  286|  8.32k|{
  287|  8.32k|  BCInsLine *ilp = &fs->bcbase[pc >= 1 ? pc-1 : pc];
  ------------------
  |  Branch (287:32): [True: 8.32k, False: 0]
  ------------------
  288|  8.32k|  BCOp op = bc_op(ilp->ins);
  ------------------
  |  |   34|  8.32k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  289|  8.32k|  if (op == BC_ISTC || op == BC_ISFC) {
  ------------------
  |  Branch (289:7): [True: 412, False: 7.91k]
  |  Branch (289:24): [True: 0, False: 7.91k]
  ------------------
  290|    412|    if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   30|    412|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    824|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
                  if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   38|    398|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (290:9): [True: 398, False: 14]
  |  Branch (290:26): [True: 0, False: 398]
  ------------------
  291|      0|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|      0|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|      0|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  292|    412|    } else {  /* Nothing to store or already in the right register. */
  293|    412|      setbc_op(&ilp->ins, op+(BC_IST-BC_ISTC));
  ------------------
  |  |   44|    412|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|    412|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    412|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  294|    412|      setbc_a(&ilp->ins, 0);
  ------------------
  |  |   45|    412|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|    412|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    412|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  295|    412|    }
  296|  7.91k|  } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   35|  7.91k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   30|  7.91k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  7.91k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (296:14): [True: 229, False: 7.68k]
  ------------------
  297|    229|    if (reg == NO_REG) {
  ------------------
  |  |   30|    229|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    229|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (297:9): [True: 4, False: 225]
  ------------------
  298|      4|      ilp->ins = BCINS_AJ(BC_JMP, bc_a(fs->bcbase[pc].ins), 0);
  ------------------
  |  |   57|      4|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   56|      4|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  299|    225|    } else {
  300|    225|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|    225|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|    225|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    225|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  301|    225|      if (reg >= bc_a(ilp[1].ins))
  ------------------
  |  |   35|    225|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (301:11): [True: 225, False: 0]
  ------------------
  302|    225|	setbc_a(&ilp[1].ins, reg+1);
  ------------------
  |  |   45|    225|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|    225|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    225|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  303|    225|    }
  304|  7.68k|  } else {
  305|  7.68k|    return 0;  /* Cannot patch other instructions. */
  306|  7.68k|  }
  307|    641|  return 1;
  308|  8.32k|}
lj_parse.c:jmp_patchins:
  319|  9.26k|{
  320|  9.26k|  BCIns *jmp = &fs->bcbase[pc].ins;
  321|  9.26k|  BCPos offset = dest-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|  9.26k|#define BCBIAS_J	0x8000
  ------------------
  322|  9.26k|  lj_assertFS(dest != NO_JMP, "uninitialized jump target");
  ------------------
  |  |  167|  9.26k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  9.26k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.26k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 9.26k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  9.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  9.26k|  if (offset > BCMAX_D)
  ------------------
  |  |   28|  9.26k|#define BCMAX_D		0xffff
  ------------------
  |  Branch (323:7): [True: 0, False: 9.26k]
  ------------------
  324|      0|    err_syntax(fs->ls, LJ_ERR_XJUMP);
  325|  9.26k|  setbc_d(jmp, offset);
  ------------------
  |  |   49|  9.26k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  9.26k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  326|  9.26k|}
lj_parse.c:err_syntax:
  175|    528|{
  176|    528|  lj_lex_error(ls, ls->tok, em);
  177|    528|}
lj_parse.c:parse_chunk:
 2714|  3.02k|{
 2715|  3.02k|  int islast = 0;
 2716|  3.02k|  synlevel_begin(ls);
 2717|  6.79k|  while (!islast && !parse_isend(ls->tok)) {
  ------------------
  |  Branch (2717:10): [True: 6.79k, False: 0]
  |  Branch (2717:21): [True: 5.95k, False: 837]
  ------------------
 2718|  5.95k|    islast = parse_stmt(ls);
 2719|  5.95k|    lex_opt(ls, ';');
 2720|  5.95k|    lj_assertLS(ls->fs->framesize >= ls->fs->freereg &&
  ------------------
  |  |   89|  5.95k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  5.95k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.72k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.77k, False: 2.18k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.77k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.95k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2721|  5.95k|		ls->fs->freereg >= ls->fs->nactvar,
 2722|  5.95k|		"bad regalloc");
 2723|  3.77k|    ls->fs->freereg = ls->fs->nactvar;  /* Free registers after each stmt. */
 2724|  3.77k|  }
 2725|    837|  synlevel_end(ls);
  ------------------
  |  | 2052|    837|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2726|    837|}
lj_parse.c:synlevel_begin:
 2047|  90.6k|{
 2048|  90.6k|  if (++ls->level >= LJ_MAX_XLEVEL)
  ------------------
  |  |   65|  90.6k|#define LJ_MAX_XLEVEL	200		/* Max. syntactic nesting level. */
  ------------------
  |  Branch (2048:7): [True: 3, False: 90.6k]
  ------------------
 2049|      3|    lj_lex_error(ls, 0, LJ_ERR_XLEVELS);
 2050|  90.6k|}
lj_parse.c:parse_isend:
 2324|  6.87k|{
 2325|  6.87k|  switch (tok) {
 2326|    886|  case TK_else: case TK_elseif: case TK_end: case TK_until: case TK_eof:
  ------------------
  |  Branch (2326:3): [True: 0, False: 6.87k]
  |  Branch (2326:17): [True: 0, False: 6.87k]
  |  Branch (2326:33): [True: 0, False: 6.87k]
  |  Branch (2326:46): [True: 0, False: 6.87k]
  |  Branch (2326:61): [True: 886, False: 5.99k]
  ------------------
 2327|    886|    return 1;
 2328|  5.99k|  default:
  ------------------
  |  Branch (2328:3): [True: 5.99k, False: 886]
  ------------------
 2329|  5.99k|    return 0;
 2330|  6.87k|  }
 2331|  6.87k|}
lj_parse.c:parse_stmt:
 2656|  5.95k|{
 2657|  5.95k|  BCLine line = ls->linenumber;
 2658|  5.95k|  switch (ls->tok) {
 2659|      9|  case TK_if:
  ------------------
  |  Branch (2659:3): [True: 9, False: 5.94k]
  ------------------
 2660|      9|    parse_if(ls, line);
 2661|      9|    break;
 2662|      0|  case TK_while:
  ------------------
  |  Branch (2662:3): [True: 0, False: 5.95k]
  ------------------
 2663|      0|    parse_while(ls, line);
 2664|      0|    break;
 2665|     60|  case TK_do:
  ------------------
  |  Branch (2665:3): [True: 60, False: 5.89k]
  ------------------
 2666|     60|    lj_lex_next(ls);
 2667|     60|    parse_block(ls);
 2668|     60|    lex_match(ls, TK_end, TK_do, line);
 2669|     60|    break;
 2670|     26|  case TK_for:
  ------------------
  |  Branch (2670:3): [True: 26, False: 5.93k]
  ------------------
 2671|     26|    parse_for(ls, line);
 2672|     26|    break;
 2673|      5|  case TK_repeat:
  ------------------
  |  Branch (2673:3): [True: 5, False: 5.95k]
  ------------------
 2674|      5|    parse_repeat(ls, line);
 2675|      5|    break;
 2676|      0|  case TK_function:
  ------------------
  |  Branch (2676:3): [True: 0, False: 5.95k]
  ------------------
 2677|      0|    parse_func(ls, line);
 2678|      0|    break;
 2679|      0|  case TK_local:
  ------------------
  |  Branch (2679:3): [True: 0, False: 5.95k]
  ------------------
 2680|      0|    lj_lex_next(ls);
 2681|      0|    parse_local(ls);
 2682|      0|    break;
 2683|      0|  case TK_return:
  ------------------
  |  Branch (2683:3): [True: 0, False: 5.95k]
  ------------------
 2684|      0|    parse_return(ls);
 2685|      0|    return 1;  /* Must be last. */
 2686|      0|  case TK_break:
  ------------------
  |  Branch (2686:3): [True: 0, False: 5.95k]
  ------------------
 2687|      0|    lj_lex_next(ls);
 2688|      0|    parse_break(ls);
 2689|      0|    return !LJ_52;  /* Must be last in Lua 5.1. */
  ------------------
  |  |  697|      0|#define LJ_52			0
  ------------------
 2690|       |#if LJ_52
 2691|       |  case ';':
 2692|       |    lj_lex_next(ls);
 2693|       |    break;
 2694|       |#endif
 2695|     37|  case TK_label:
  ------------------
  |  Branch (2695:3): [True: 37, False: 5.91k]
  ------------------
 2696|     37|    parse_label(ls);
 2697|     37|    break;
 2698|      0|  case TK_goto:
  ------------------
  |  Branch (2698:3): [True: 0, False: 5.95k]
  ------------------
 2699|      0|    if (LJ_52 || lj_lex_lookahead(ls) == TK_name) {
  ------------------
  |  |  697|      0|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2699:18): [True: 0, False: 0]
  ------------------
 2700|      0|      lj_lex_next(ls);
 2701|      0|      parse_goto(ls);
 2702|      0|      break;
 2703|      0|    }
 2704|       |    /* fallthrough */
 2705|  5.81k|  default:
  ------------------
  |  Branch (2705:3): [True: 5.81k, False: 137]
  ------------------
 2706|  5.81k|    parse_call_assign(ls);
 2707|  5.81k|    break;
 2708|  5.95k|  }
 2709|  3.77k|  return 0;
 2710|  5.95k|}
lj_parse.c:parse_if:
 2630|      9|{
 2631|      9|  FuncState *fs = ls->fs;
 2632|      9|  BCPos flist;
 2633|      9|  BCPos escapelist = NO_JMP;
  ------------------
  |  |   31|      9|#define NO_JMP		(~(BCPos)0)
  ------------------
 2634|      9|  flist = parse_then(ls);
 2635|      9|  while (ls->tok == TK_elseif) {  /* Parse multiple 'elseif' blocks. */
  ------------------
  |  Branch (2635:10): [True: 0, False: 9]
  ------------------
 2636|      0|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2637|      0|    jmp_tohere(fs, flist);
 2638|      0|    flist = parse_then(ls);
 2639|      0|  }
 2640|      9|  if (ls->tok == TK_else) {  /* Parse optional 'else' block. */
  ------------------
  |  Branch (2640:7): [True: 0, False: 9]
  ------------------
 2641|      0|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2642|      0|    jmp_tohere(fs, flist);
 2643|      0|    lj_lex_next(ls);  /* Skip 'else'. */
 2644|      0|    parse_block(ls);
 2645|      9|  } else {
 2646|      9|    jmp_append(fs, &escapelist, flist);
 2647|      9|  }
 2648|      9|  jmp_tohere(fs, escapelist);
 2649|      9|  lex_match(ls, TK_end, TK_if, line);
 2650|      9|}
lj_parse.c:parse_then:
 2619|      9|{
 2620|      9|  BCPos condexit;
 2621|      9|  lj_lex_next(ls);  /* Skip 'if' or 'elseif'. */
 2622|      9|  condexit = expr_cond(ls);
 2623|      9|  lex_check(ls, TK_then);
 2624|      9|  parse_block(ls);
 2625|      9|  return condexit;
 2626|      9|}
lj_parse.c:expr_cond:
 2150|      9|{
 2151|      9|  ExpDesc v;
 2152|      9|  expr(ls, &v);
 2153|      9|  if (v.k == VKNIL) v.k = VKFALSE;
  ------------------
  |  Branch (2153:7): [True: 0, False: 9]
  ------------------
 2154|      9|  bcemit_branch_t(ls->fs, &v);
 2155|      9|  return v.f;
 2156|      9|}
lj_parse.c:expr:
 2136|  42.1k|{
 2137|  42.1k|  expr_binop(ls, v, 0);  /* Priority 0: parse whole expression. */
 2138|  42.1k|}
lj_parse.c:expr_binop:
 2115|  87.5k|{
 2116|  87.5k|  BinOpr op;
 2117|  87.5k|  synlevel_begin(ls);
 2118|  87.5k|  expr_unop(ls, v);
 2119|  87.5k|  op = token2binop(ls->tok);
 2120|   120k|  while (op != OPR_NOBINOPR && priority[op].left > limit) {
  ------------------
  |  Branch (2120:10): [True: 60.9k, False: 59.8k]
  |  Branch (2120:32): [True: 33.2k, False: 27.6k]
  ------------------
 2121|  33.2k|    ExpDesc v2;
 2122|  33.2k|    BinOpr nextop;
 2123|  33.2k|    lj_lex_next(ls);
 2124|  33.2k|    bcemit_binop_left(ls->fs, op, v);
 2125|       |    /* Parse binary expression with higher priority. */
 2126|  33.2k|    nextop = expr_binop(ls, &v2, priority[op].right);
 2127|  33.2k|    bcemit_binop(ls->fs, op, v, &v2);
 2128|  33.2k|    op = nextop;
 2129|  33.2k|  }
 2130|  87.5k|  synlevel_end(ls);
  ------------------
  |  | 2052|  87.5k|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2131|  87.5k|  return op;  /* Return unconsumed binary operator (if any). */
 2132|  87.5k|}
lj_parse.c:expr_unop:
 2096|  87.5k|{
 2097|  87.5k|  BCOp op;
 2098|  87.5k|  if (ls->tok == TK_not) {
  ------------------
  |  Branch (2098:7): [True: 638, False: 86.8k]
  ------------------
 2099|    638|    op = BC_NOT;
 2100|  86.8k|  } else if (ls->tok == '-') {
  ------------------
  |  Branch (2100:14): [True: 4.55k, False: 82.3k]
  ------------------
 2101|  4.55k|    op = BC_UNM;
 2102|  82.3k|  } else if (ls->tok == '#') {
  ------------------
  |  Branch (2102:14): [True: 6.98k, False: 75.3k]
  ------------------
 2103|  6.98k|    op = BC_LEN;
 2104|  75.3k|  } else {
 2105|  75.3k|    expr_simple(ls, v);
 2106|  75.3k|    return;
 2107|  75.3k|  }
 2108|  12.1k|  lj_lex_next(ls);
 2109|  12.1k|  expr_binop(ls, v, UNARY_PRIORITY);
  ------------------
  |  | 2089|  12.1k|#define UNARY_PRIORITY		8  /* Priority for unary operators. */
  ------------------
 2110|  12.1k|  bcemit_unop(ls->fs, op, v);
 2111|  12.1k|}
lj_parse.c:expr_simple:
 2002|  75.3k|{
 2003|  75.3k|  switch (ls->tok) {
 2004|  38.9k|  case TK_number:
  ------------------
  |  Branch (2004:3): [True: 38.9k, False: 36.3k]
  ------------------
 2005|  38.9k|    expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  585|  77.9k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  799|  38.9k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  38.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  38.9k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 7.27k, False: 31.7k]
  |  |  ------------------
  ------------------
 2006|  38.9k|    copyTV(ls->L, &v->u.nval, &ls->tokval);
 2007|  38.9k|    break;
 2008|    288|  case TK_string:
  ------------------
  |  Branch (2008:3): [True: 288, False: 75.0k]
  ------------------
 2009|    288|    expr_init(v, VKSTR, 0);
 2010|    288|    v->u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|    288|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    288|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    288|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    288|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 288, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    288|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2011|      0|    break;
 2012|    310|  case TK_nil:
  ------------------
  |  Branch (2012:3): [True: 310, False: 75.0k]
  ------------------
 2013|    310|    expr_init(v, VKNIL, 0);
 2014|    310|    break;
 2015|      0|  case TK_true:
  ------------------
  |  Branch (2015:3): [True: 0, False: 75.3k]
  ------------------
 2016|      0|    expr_init(v, VKTRUE, 0);
 2017|      0|    break;
 2018|      0|  case TK_false:
  ------------------
  |  Branch (2018:3): [True: 0, False: 75.3k]
  ------------------
 2019|      0|    expr_init(v, VKFALSE, 0);
 2020|      0|    break;
 2021|    132|  case TK_dots: {  /* Vararg. */
  ------------------
  |  Branch (2021:3): [True: 132, False: 75.1k]
  ------------------
 2022|    132|    FuncState *fs = ls->fs;
 2023|    132|    BCReg base;
 2024|    132|    checkcond(ls, fs->flags & PROTO_VARARG, LJ_ERR_XDOTS);
  ------------------
  |  |  194|    132|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:37): [True: 0, False: 132]
  |  |  ------------------
  ------------------
 2025|    132|    bcreg_reserve(fs, 1);
 2026|    132|    base = fs->freereg-1;
 2027|    132|    expr_init(v, VCALL, bcemit_ABC(fs, BC_VARG, base, 2, fs->numparams));
  ------------------
  |  |  434|    132|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    132|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
 2028|    132|    v->u.s.aux = base;
 2029|    132|    break;
 2030|    132|  }
 2031|  6.06k|  case '{':  /* Table constructor. */
  ------------------
  |  Branch (2031:3): [True: 6.06k, False: 69.2k]
  ------------------
 2032|  6.06k|    expr_table(ls, v);
 2033|  6.06k|    return;
 2034|      0|  case TK_function:
  ------------------
  |  Branch (2034:3): [True: 0, False: 75.3k]
  ------------------
 2035|      0|    lj_lex_next(ls);
 2036|      0|    parse_body(ls, v, 0, ls->linenumber);
 2037|      0|    return;
 2038|  29.5k|  default:
  ------------------
  |  Branch (2038:3): [True: 29.5k, False: 45.7k]
  ------------------
 2039|  29.5k|    expr_primary(ls, v);
 2040|  29.5k|    return;
 2041|  75.3k|  }
 2042|  39.7k|  lj_lex_next(ls);
 2043|  39.7k|}
lj_parse.c:expr_init:
   84|   234k|{
   85|   234k|  e->k = k;
   86|   234k|  e->u.s.info = info;
   87|   234k|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|   234k|#define NO_JMP		(~(BCPos)0)
  ------------------
   88|   234k|}
lj_parse.c:bcreg_reserve:
  391|   286k|{
  392|   286k|  bcreg_bump(fs, n);
  393|   286k|  fs->freereg += n;
  394|   286k|}
lj_parse.c:bcreg_bump:
  380|   286k|{
  381|   286k|  BCReg sz = fs->freereg + n;
  382|   286k|  if (sz > fs->framesize) {
  ------------------
  |  Branch (382:7): [True: 25.2k, False: 261k]
  ------------------
  383|  25.2k|    if (sz >= LJ_MAX_SLOTS)
  ------------------
  |  |   67|  25.2k|#define LJ_MAX_SLOTS	250		/* Max. # of slots in a Lua func. */
  ------------------
  |  Branch (383:9): [True: 4, False: 25.2k]
  ------------------
  384|      4|      err_syntax(fs->ls, LJ_ERR_XSLOTS);
  385|  25.2k|    fs->framesize = (uint8_t)sz;
  386|  25.2k|  }
  387|   286k|}
lj_parse.c:expr_table:
 1729|  9.74k|{
 1730|  9.74k|  FuncState *fs = ls->fs;
 1731|  9.74k|  BCLine line = ls->linenumber;
 1732|  9.74k|  GCtab *t = NULL;
 1733|  9.74k|  int vcall = 0, needarr = 0, fixt = 0;
 1734|  9.74k|  uint32_t narr = 1;  /* First array index. */
 1735|  9.74k|  uint32_t nhash = 0;  /* Number of hash entries. */
 1736|  9.74k|  BCReg freg = fs->freereg;
 1737|  9.74k|  BCPos pc = bcemit_AD(fs, BC_TNEW, freg, 0);
  ------------------
  |  |  435|  9.74k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  9.74k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1738|  9.74k|  expr_init(e, VNONRELOC, freg);
 1739|  9.74k|  bcreg_reserve(fs, 1);
 1740|  9.74k|  freg++;
 1741|  9.74k|  lex_check(ls, '{');
 1742|  22.0k|  while (ls->tok != '}') {
  ------------------
  |  Branch (1742:10): [True: 21.7k, False: 370]
  ------------------
 1743|  21.7k|    ExpDesc key, val;
 1744|  21.7k|    vcall = 0;
 1745|  21.7k|    if (ls->tok == '[') {
  ------------------
  |  Branch (1745:9): [True: 127, False: 21.5k]
  ------------------
 1746|    127|      expr_bracket(ls, &key);  /* Already calls expr_toval. */
 1747|    127|      if (!expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|    127|#define expr_isk(e)		((e)->k <= VKLAST)
  ------------------
  |  Branch (1747:11): [True: 34, False: 93]
  ------------------
 1748|    127|      if (expr_isnumk(&key) && expr_numiszero(&key)) needarr = 1; else nhash++;
  ------------------
  |  |   75|    254|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 22, False: 105]
  |  |  ------------------
  ------------------
  |  Branch (1748:32): [True: 1, False: 21]
  ------------------
 1749|    127|      lex_check(ls, '=');
 1750|  21.5k|    } else if ((ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) &&
  ------------------
  |  |  697|  21.5k|#define LJ_52			0
  ------------------
  |  Branch (1750:17): [True: 10.8k, False: 10.7k]
  |  Branch (1750:40): [Folded - Ignored]
  |  Branch (1750:50): [True: 0, False: 10.7k]
  ------------------
 1751|  21.5k|	       lj_lex_lookahead(ls) == '=') {
  ------------------
  |  Branch (1751:9): [True: 535, False: 10.3k]
  ------------------
 1752|    535|      expr_str(ls, &key);
 1753|    535|      lex_check(ls, '=');
 1754|    535|      nhash++;
 1755|  21.0k|    } else {
 1756|  21.0k|      expr_init(&key, VKNUM, 0);
 1757|  21.0k|      setintV(&key.u.nval, (int)narr);
 1758|  21.0k|      narr++;
 1759|  21.0k|      needarr = vcall = 1;
 1760|  21.0k|    }
 1761|  21.7k|    expr(ls, &val);
 1762|  21.7k|    if (expr_isk(&key) && key.k != VKNIL &&
  ------------------
  |  |   73|  43.4k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 14.5k, False: 7.18k]
  |  |  ------------------
  ------------------
  |  Branch (1762:27): [True: 14.5k, False: 0]
  ------------------
 1763|  21.7k|	(key.k == VKSTR || expr_isk_nojump(&val))) {
  ------------------
  |  |   74|  14.0k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  28.1k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 4.50k, False: 9.59k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  4.50k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 4.50k, False: 5]
  |  |  ------------------
  ------------------
  |  Branch (1763:3): [True: 443, False: 14.0k]
  ------------------
 1764|  4.94k|      TValue k, *v;
 1765|  4.94k|      if (!t) {  /* Create template table on demand. */
  ------------------
  |  Branch (1765:11): [True: 1.45k, False: 3.49k]
  ------------------
 1766|  1.45k|	BCReg kidx;
 1767|  1.45k|	t = lj_tab_new(fs->L, needarr ? narr : 0, hsize2hbits(nhash));
  ------------------
  |  |   53|  1.45k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|      5|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 315, False: 1.13k]
  |  |  |  Branch (53:32): [True: 310, False: 5]
  |  |  ------------------
  ------------------
  |  Branch (1767:24): [True: 1.14k, False: 306]
  ------------------
 1768|  1.45k|	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  775|  1.45k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
              	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  271|  1.45k|#define LJ_TTAB			(~11u)
  ------------------
 1769|  1.45k|	fs->bcbase[pc].ins = BCINS_AD(BC_TDUP, freg-1, kidx);
  ------------------
  |  |   56|  1.45k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1770|  1.45k|      }
 1771|  4.94k|      vcall = 0;
 1772|  4.94k|      expr_kvalue(fs, &k, &key);
 1773|  4.94k|      v = lj_tab_set(fs->L, t, &k);
 1774|  4.94k|      lj_gc_anybarriert(fs->L, t);
  ------------------
  |  |   95|  4.94k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  4.94k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1, False: 4.94k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      1|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      1|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1775|  4.94k|      if (expr_isk_nojump(&val)) {  /* Add const key/value to template table. */
  ------------------
  |  |   74|  4.94k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  9.88k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 4.50k, False: 434]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  4.50k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 4.50k, False: 5]
  |  |  ------------------
  ------------------
 1776|  4.50k|	expr_kvalue(fs, v, &val);
 1777|  4.50k|      } else {  /* Otherwise create dummy string key (avoids lj_tab_newkey). */
 1778|    439|	settabV(fs->L, v, t);  /* Preserve key with table itself as value. */
 1779|    439|	fixt = 1;   /* Fix this later, after all resizes. */
 1780|    439|	goto nonconst;
 1781|    439|      }
 1782|  16.7k|    } else {
 1783|  16.7k|    nonconst:
 1784|  10.0k|      if (val.k != VCALL) { expr_toanyreg(fs, &val); vcall = 0; }
  ------------------
  |  Branch (1784:11): [True: 9.23k, False: 818]
  ------------------
 1785|  10.0k|      if (expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|  10.0k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 10.0k, False: 19]
  |  |  ------------------
  ------------------
 1786|  10.0k|      bcemit_store(fs, e, &val);
 1787|  10.0k|    }
 1788|  14.5k|    fs->freereg = freg;
 1789|  14.5k|    if (!lex_opt(ls, ',') && !lex_opt(ls, ';')) break;
  ------------------
  |  Branch (1789:9): [True: 14.0k, False: 509]
  |  Branch (1789:30): [True: 2.20k, False: 11.8k]
  ------------------
 1790|  14.5k|  }
 1791|  2.57k|  lex_match(ls, '}', '{', line);
 1792|  2.57k|  if (vcall) {
  ------------------
  |  Branch (1792:7): [True: 576, False: 1.99k]
  ------------------
 1793|    576|    BCInsLine *ilp = &fs->bcbase[fs->pc-1];
 1794|    576|    ExpDesc en;
 1795|    576|    lj_assertFS(bc_a(ilp->ins) == freg &&
  ------------------
  |  |  167|    576|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    576|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.30k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 576]
  |  |  |  |  |  |  |  Branch (355:5): [True: 576, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 576, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    576|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1796|    576|		bc_op(ilp->ins) == (narr > 256 ? BC_TSETV : BC_TSETB),
 1797|    576|		"bad CALL code generation");
 1798|    576|    expr_init(&en, VKNUM, 0);
 1799|    576|    en.u.nval.u32.lo = narr-1;
 1800|    576|    en.u.nval.u32.hi = 0x43300000;  /* Biased integer to avoid denormals. */
 1801|    576|    if (narr > 256) { fs->pc--; ilp--; }
  ------------------
  |  Branch (1801:9): [True: 0, False: 576]
  ------------------
 1802|    576|    ilp->ins = BCINS_AD(BC_TSETM, freg, const_num(fs, &en));
  ------------------
  |  |   56|    576|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1803|    576|    setbc_b(&ilp[-1].ins, 0);
  ------------------
  |  |   46|    576|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|    576|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    576|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1804|    576|  }
 1805|  2.57k|  if (pc == fs->pc-1) {  /* Make expr relocable if possible. */
  ------------------
  |  Branch (1805:7): [True: 349, False: 2.22k]
  ------------------
 1806|    349|    e->u.s.info = pc;
 1807|    349|    fs->freereg--;
 1808|    349|    e->k = VRELOCABLE;
 1809|  2.22k|  } else {
 1810|  2.22k|    e->k = VNONRELOC;  /* May have been changed by expr_index. */
 1811|  2.22k|  }
 1812|  2.57k|  if (!t) {  /* Construct TNEW RD: hhhhhaaaaaaaaaaa. */
  ------------------
  |  Branch (1812:7): [True: 1.71k, False: 857]
  ------------------
 1813|  1.71k|    BCIns *ip = &fs->bcbase[pc].ins;
 1814|  1.71k|    if (!needarr) narr = 0;
  ------------------
  |  Branch (1814:9): [True: 288, False: 1.42k]
  ------------------
 1815|  1.42k|    else if (narr < 3) narr = 3;
  ------------------
  |  Branch (1815:14): [True: 1.34k, False: 84]
  ------------------
 1816|     84|    else if (narr > 0x7ff) narr = 0x7ff;
  ------------------
  |  Branch (1816:14): [True: 0, False: 84]
  ------------------
 1817|  1.71k|    setbc_d(ip, narr|(hsize2hbits(nhash)<<11));
  ------------------
  |  |   49|  3.44k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  1.71k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  |  |  |  Branch (49:58): [True: 3, False: 0]
  |  |  |  Branch (49:58): [True: 3, False: 1.71k]
  |  |  ------------------
  ------------------
 1818|  1.71k|  } else {
 1819|    857|    if (needarr && t->asize < narr)
  ------------------
  |  Branch (1819:9): [True: 407, False: 450]
  |  Branch (1819:20): [True: 310, False: 97]
  ------------------
 1820|    310|      lj_tab_reasize(fs->L, t, narr-1);
 1821|    857|    if (fixt) {  /* Fix value for dummy keys in template table. */
  ------------------
  |  Branch (1821:9): [True: 261, False: 596]
  ------------------
 1822|    261|      Node *node = noderef(t->node);
  ------------------
  |  |  515|    261|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    261|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1823|    261|      uint32_t i, hmask = t->hmask;
 1824|  1.06k|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1824:19): [True: 808, False: 261]
  ------------------
 1825|    808|	Node *n = &node[i];
 1826|    808|	if (tvistab(&n->val)) {
  ------------------
  |  |  800|    808|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|    808|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|    808|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 342, False: 466]
  |  |  ------------------
  ------------------
 1827|    342|	  lj_assertFS(tabV(&n->val) == t, "bad dummy key in template table");
  ------------------
  |  |  167|    342|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    342|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    684|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 342, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 342, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    342|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1828|    342|	  setnilV(&n->val);  /* Turn value into nil. */
  ------------------
  |  |  872|    342|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1829|    342|	}
 1830|    808|      }
 1831|    261|    }
 1832|    857|    lj_gc_check(fs->L);
  ------------------
  |  |   66|    857|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|    857|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 22, False: 835]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|    857|      lj_gc_step(L); }
  ------------------
 1833|    857|  }
 1834|  2.57k|}
lj_parse.c:expr_bracket:
 1706|  1.49k|{
 1707|  1.49k|  lj_lex_next(ls);  /* Skip '['. */
 1708|  1.49k|  expr(ls, v);
 1709|  1.49k|  expr_toval(ls->fs, v);
 1710|  1.49k|  lex_check(ls, ']');
 1711|  1.49k|}
lj_parse.c:expr_toval:
  614|  36.0k|{
  615|  36.0k|  if (expr_hasjump(e))
  ------------------
  |  |   71|  36.0k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 121, False: 35.8k]
  |  |  ------------------
  ------------------
  616|    121|    expr_toanyreg(fs, e);
  617|  35.8k|  else
  618|  35.8k|    expr_discharge(fs, e);
  619|  36.0k|}
lj_parse.c:expr_discharge:
  444|   526k|{
  445|   526k|  BCIns ins;
  446|   526k|  if (e->k == VUPVAL) {
  ------------------
  |  Branch (446:7): [True: 0, False: 526k]
  ------------------
  447|      0|    ins = BCINS_AD(BC_UGET, 0, e->u.s.info);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  448|   526k|  } else if (e->k == VGLOBAL) {
  ------------------
  |  Branch (448:14): [True: 26.9k, False: 499k]
  ------------------
  449|  26.9k|    ins = BCINS_AD(BC_GGET, 0, const_str(fs, e));
  ------------------
  |  |   56|  26.9k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  450|   499k|  } else if (e->k == VINDEXED) {
  ------------------
  |  Branch (450:14): [True: 2.59k, False: 496k]
  ------------------
  451|  2.59k|    BCReg rc = e->u.s.aux;
  452|  2.59k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (452:9): [True: 1.90k, False: 691]
  ------------------
  453|  1.90k|      ins = BCINS_ABC(BC_TGETS, 0, e->u.s.info, ~rc);
  ------------------
  |  |   54|  1.90k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  454|  1.90k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|    691|#define BCMAX_C		0xff
  ------------------
  |  Branch (454:16): [True: 259, False: 432]
  ------------------
  455|    259|      ins = BCINS_ABC(BC_TGETB, 0, e->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|    259|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  456|    432|    } else {
  457|    432|      bcreg_free(fs, rc);
  458|    432|      ins = BCINS_ABC(BC_TGETV, 0, e->u.s.info, rc);
  ------------------
  |  |   54|    432|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  459|    432|    }
  460|  2.59k|    bcreg_free(fs, e->u.s.info);
  461|   496k|  } else if (e->k == VCALL) {
  ------------------
  |  Branch (461:14): [True: 67.9k, False: 428k]
  ------------------
  462|  67.9k|    e->u.s.info = e->u.s.aux;
  463|  67.9k|    e->k = VNONRELOC;
  464|  67.9k|    return;
  465|   428k|  } else if (e->k == VLOCAL) {
  ------------------
  |  Branch (465:14): [True: 0, False: 428k]
  ------------------
  466|      0|    e->k = VNONRELOC;
  467|      0|    return;
  468|   428k|  } else {
  469|   428k|    return;
  470|   428k|  }
  471|  29.5k|  e->u.s.info = bcemit_INS(fs, ins);
  472|  29.5k|  e->k = VRELOCABLE;
  473|  29.5k|}
lj_parse.c:const_str:
  233|  92.0k|{
  234|  92.0k|  lj_assertFS(expr_isstrk(e) || e->k == VGLOBAL, "bad usage");
  ------------------
  |  |  167|  92.0k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  92.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   120k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 63.2k, False: 28.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 28.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  92.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|  92.0k|  return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|  92.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|  92.0k|#define LJ_TSTR			(~4u)
  ------------------
  236|  92.0k|}
lj_parse.c:bcreg_free:
  398|  93.6k|{
  399|  93.6k|  if (reg >= fs->nactvar) {
  ------------------
  |  Branch (399:7): [True: 93.6k, False: 0]
  ------------------
  400|  93.6k|    fs->freereg--;
  401|  93.6k|    lj_assertFS(reg == fs->freereg, "bad regfree");
  ------------------
  |  |  167|  93.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  93.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  93.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 93.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  93.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|  93.6k|  }
  403|  93.6k|}
lj_parse.c:expr_index:
 1663|  13.1k|{
 1664|       |  /* Already called: expr_toval(fs, e). */
 1665|  13.1k|  t->k = VINDEXED;
 1666|  13.1k|  if (expr_isnumk(e)) {
  ------------------
  |  |   75|  13.1k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 10.1k, False: 3.05k]
  |  |  ------------------
  ------------------
 1667|       |#if LJ_DUALNUM
 1668|       |    if (tvisint(expr_numtv(e))) {
 1669|       |      int32_t k = intV(expr_numtv(e));
 1670|       |      if (checku8(k)) {
 1671|       |	t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
 1672|       |	return;
 1673|       |      }
 1674|       |    }
 1675|       |#else
 1676|  10.1k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|  10.1k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  10.1k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  10.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  10.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  10.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10.1k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  10.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1677|  10.1k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|  10.1k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1678|  10.1k|    if (checku8(k) && n == (lua_Number)k) {
  ------------------
  |  |  102|  20.2k|#define checku8(x)	((x) == (int32_t)(uint8_t)(x))
  |  |  ------------------
  |  |  |  Branch (102:20): [True: 9.75k, False: 387]
  |  |  ------------------
  ------------------
  |  Branch (1678:23): [True: 9.74k, False: 10]
  ------------------
 1679|  9.74k|      t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
  ------------------
  |  |   27|  9.74k|#define BCMAX_C		0xff
  ------------------
 1680|  9.74k|      return;
 1681|  9.74k|    }
 1682|  10.1k|#endif
 1683|  10.1k|  } else if (expr_isstrk(e)) {
  ------------------
  |  |   77|  3.05k|#define expr_isstrk(e)		((e)->k == VKSTR)
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 2.85k, False: 197]
  |  |  ------------------
  ------------------
 1684|  2.85k|    BCReg idx = const_str(fs, e);
 1685|  2.85k|    if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  2.85k|#define BCMAX_C		0xff
  ------------------
  |  Branch (1685:9): [True: 2.85k, False: 0]
  ------------------
 1686|  2.85k|      t->u.s.aux = ~idx;  /* -256..-1: const string key */
 1687|  2.85k|      return;
 1688|  2.85k|    }
 1689|  2.85k|  }
 1690|    594|  t->u.s.aux = expr_toanyreg(fs, e);  /* 0..255: register */
 1691|    594|}
lj_parse.c:expr_numiszero:
   92|  2.57k|{
   93|  2.57k|  TValue *o = expr_numtv(e);
  ------------------
  |  |   79|  2.57k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  2.57k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.57k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.57k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.57k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.57k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|  2.57k|  return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  803|  2.57k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  5.15k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  814|  2.57k|#define tviszero(o)	(((o)->u64 << 1) == 0)
  ------------------
   95|  2.57k|}
lj_parse.c:expr_str:
 1656|  3.40k|{
 1657|  3.40k|  expr_init(e, VKSTR, 0);
 1658|  3.40k|  e->u.sval = lex_str(ls);
 1659|  3.40k|}
lj_parse.c:lex_str:
 1039|  33.1k|{
 1040|  33.1k|  GCstr *s;
 1041|  33.1k|  if (ls->tok != TK_name && (LJ_52 || ls->tok != TK_goto))
  ------------------
  |  |  697|     50|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1041:7): [True: 25, False: 33.0k]
  |  Branch (1041:39): [True: 25, False: 0]
  ------------------
 1042|     25|    err_token(ls, TK_name);
 1043|  33.0k|  s = strV(&ls->tokval);
  ------------------
  |  |  859|  33.0k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  33.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  33.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  33.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 33.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  33.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1044|      0|  lj_lex_next(ls);
 1045|  33.0k|  return s;
 1046|  33.0k|}
lj_parse.c:const_gc:
  219|   100k|{
  220|   100k|  lua_State *L = fs->L;
  221|   100k|  TValue key, *o;
  222|   100k|  setgcV(L, &key, gc, itype);
  223|       |  /* NOBARRIER: the key is new or kept alive. */
  224|   100k|  o = lj_tab_set(L, fs->kt, &key);
  225|   100k|  if (tvhaskslot(o))
  ------------------
  |  |  201|   100k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 79.0k, False: 21.6k]
  |  |  ------------------
  ------------------
  226|  79.0k|    return tvkslot(o);
  ------------------
  |  |  202|  79.0k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  227|  21.6k|  o->u64 = fs->nkgc;
  228|  21.6k|  return fs->nkgc++;
  229|   100k|}
lj_parse.c:expr_kvalue:
 1715|  9.44k|{
 1716|  9.44k|  UNUSED(fs);
  ------------------
  |  |   91|  9.44k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1717|  9.44k|  if (e->k <= VKTRUE) {
  ------------------
  |  Branch (1717:7): [True: 6, False: 9.44k]
  ------------------
 1718|      6|    setpriV(v, ~(uint32_t)e->k);
  ------------------
  |  |  873|      6|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
 1719|  9.44k|  } else if (e->k == VKSTR) {
  ------------------
  |  Branch (1719:14): [True: 477, False: 8.96k]
  ------------------
 1720|    477|    setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|    477|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                  setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|    477|#define LJ_TSTR			(~4u)
  ------------------
 1721|  8.96k|  } else {
 1722|  8.96k|    lj_assertFS(tvisnumber(expr_numtv(e)), "bad number constant");
  ------------------
  |  |  167|  8.96k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  8.96k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  17.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 8.96k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.96k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  8.96k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1723|  8.96k|    *v = *expr_numtv(e);
  ------------------
  |  |   79|  8.96k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  8.96k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  8.96k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  8.96k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.96k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  8.96k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1724|  8.96k|  }
 1725|  9.44k|}
lj_parse.c:expr_toanyreg:
  599|  82.4k|{
  600|  82.4k|  expr_discharge(fs, e);
  601|  82.4k|  if (e->k == VNONRELOC) {
  ------------------
  |  Branch (601:7): [True: 28.4k, False: 54.0k]
  ------------------
  602|  28.4k|    if (!expr_hasjump(e)) return e->u.s.info;  /* Already in a register. */
  ------------------
  |  |   71|  28.4k|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (602:9): [True: 28.3k, False: 93]
  ------------------
  603|     93|    if (e->u.s.info >= fs->nactvar) {
  ------------------
  |  Branch (603:9): [True: 93, False: 0]
  ------------------
  604|     93|      expr_toreg(fs, e, e->u.s.info);  /* Discharge to temp. register. */
  605|     93|      return e->u.s.info;
  606|     93|    }
  607|     93|  }
  608|  54.0k|  expr_tonextreg(fs, e);  /* Discharge to next register. */
  609|  54.0k|  return e->u.s.info;
  610|  82.4k|}
lj_parse.c:expr_toreg:
  565|   201k|{
  566|   201k|  expr_toreg_nobranch(fs, e, reg);
  567|   201k|  if (e->k == VJMP)
  ------------------
  |  Branch (567:7): [True: 7.32k, False: 193k]
  ------------------
  568|  7.32k|    jmp_append(fs, &e->t, e->u.s.info);  /* Add it to the true jump list. */
  569|   201k|  if (expr_hasjump(e)) {  /* Discharge expression with branches. */
  ------------------
  |  |   71|   201k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 7.73k, False: 193k]
  |  |  ------------------
  ------------------
  570|  7.73k|    BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|  7.73k|#define NO_JMP		(~(BCPos)0)
  ------------------
                  BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|  7.73k|#define NO_JMP		(~(BCPos)0)
  ------------------
  571|  7.73k|    if (jmp_novalue(fs, e->t) || jmp_novalue(fs, e->f)) {
  ------------------
  |  Branch (571:9): [True: 7.48k, False: 254]
  |  Branch (571:34): [True: 2, False: 252]
  ------------------
  572|  7.48k|      BCPos jval = (e->k == VJMP) ? NO_JMP : bcemit_jmp(fs);
  ------------------
  |  |   31|  7.32k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (572:20): [True: 7.32k, False: 159]
  ------------------
  573|  7.48k|      jfalse = bcemit_AD(fs, BC_KPRI, reg, VKFALSE);
  ------------------
  |  |  435|  7.48k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  7.48k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  574|  7.48k|      bcemit_AJ(fs, BC_JMP, fs->freereg, 1);
  ------------------
  |  |  436|  7.48k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  7.48k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  7.48k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  575|  7.48k|      jtrue = bcemit_AD(fs, BC_KPRI, reg, VKTRUE);
  ------------------
  |  |  435|  7.48k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  7.48k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  576|  7.48k|      jmp_tohere(fs, jval);
  577|  7.48k|    }
  578|  7.73k|    jend = fs->pc;
  579|  7.73k|    fs->lasttarget = jend;
  580|  7.73k|    jmp_patchval(fs, e->f, jend, reg, jfalse);
  581|  7.73k|    jmp_patchval(fs, e->t, jend, reg, jtrue);
  582|  7.73k|  }
  583|   201k|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|   201k|#define NO_JMP		(~(BCPos)0)
  ------------------
  584|   201k|  e->u.s.info = reg;
  585|   201k|  e->k = VNONRELOC;
  586|   201k|}
lj_parse.c:expr_toreg_nobranch:
  513|   202k|{
  514|   202k|  BCIns ins;
  515|   202k|  expr_discharge(fs, e);
  516|   202k|  if (e->k == VKSTR) {
  ------------------
  |  Branch (516:7): [True: 59.9k, False: 142k]
  ------------------
  517|  59.9k|    ins = BCINS_AD(BC_KSTR, reg, const_str(fs, e));
  ------------------
  |  |   56|  59.9k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  518|   142k|  } else if (e->k == VKNUM) {
  ------------------
  |  Branch (518:14): [True: 11.5k, False: 130k]
  ------------------
  519|       |#if LJ_DUALNUM
  520|       |    cTValue *tv = expr_numtv(e);
  521|       |    if (tvisint(tv) && checki16(intV(tv)))
  522|       |      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)intV(tv));
  523|       |    else
  524|       |#else
  525|  11.5k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|  11.5k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  11.5k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  11.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  11.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  11.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11.5k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  11.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|  11.5k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|  11.5k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  527|  11.5k|    if (checki16(k) && n == (lua_Number)k)
  ------------------
  |  |  103|  23.0k|#define checki16(x)	((x) == (int32_t)(int16_t)(x))
  |  |  ------------------
  |  |  |  Branch (103:21): [True: 4.64k, False: 6.90k]
  |  |  ------------------
  ------------------
  |  Branch (527:24): [True: 3.07k, False: 1.57k]
  ------------------
  528|  3.07k|      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)k);
  ------------------
  |  |   56|  3.07k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  529|  8.47k|    else
  530|  8.47k|#endif
  531|  8.47k|      ins = BCINS_AD(BC_KNUM, reg, const_num(fs, e));
  ------------------
  |  |   56|  8.47k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  532|  11.5k|#if LJ_HASFFI
  533|   130k|  } else if (e->k == VKCDATA) {
  ------------------
  |  Branch (533:14): [True: 7.26k, False: 123k]
  ------------------
  534|  7.26k|    fs->flags |= PROTO_FFI;
  ------------------
  |  |  401|  7.26k|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
  535|  7.26k|    ins = BCINS_AD(BC_KCDATA, reg,
  ------------------
  |  |   56|  14.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 7.26k, False: 0]
  |  |  ------------------
  ------------------
  536|  7.26k|		   const_gc(fs, obj2gco(cdataV(&e->u.nval)), LJ_TCDATA));
  537|  7.26k|#endif
  538|   123k|  } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (538:14): [True: 48.5k, False: 74.9k]
  ------------------
  539|  48.5k|    setbc_a(bcptr(fs, e), reg);
  ------------------
  |  |   45|  48.5k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  48.5k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  48.5k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  540|  48.5k|    goto noins;
  541|  74.9k|  } else if (e->k == VNONRELOC) {
  ------------------
  |  Branch (541:14): [True: 67.1k, False: 7.77k]
  ------------------
  542|  67.1k|    if (reg == e->u.s.info)
  ------------------
  |  Branch (542:9): [True: 67.1k, False: 0]
  ------------------
  543|  67.1k|      goto noins;
  544|      0|    ins = BCINS_AD(BC_MOV, reg, e->u.s.info);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  545|  7.77k|  } else if (e->k == VKNIL) {
  ------------------
  |  Branch (545:14): [True: 310, False: 7.46k]
  ------------------
  546|    310|    bcemit_nil(fs, reg, 1);
  547|    310|    goto noins;
  548|  7.46k|  } else if (e->k <= VKTRUE) {
  ------------------
  |  Branch (548:14): [True: 139, False: 7.32k]
  ------------------
  549|    139|    ins = BCINS_AD(BC_KPRI, reg, const_pri(e));
  ------------------
  |  |   56|    278|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 139, False: 0]
  |  |  ------------------
  ------------------
  550|  7.32k|  } else {
  551|  7.32k|    lj_assertFS(e->k == VVOID || e->k == VJMP, "bad expr type %d", e->k);
  ------------------
  |  |  167|  7.32k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  7.32k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  14.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 7.32k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 7.32k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  7.32k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|  7.32k|    return;
  553|  7.32k|  }
  554|  78.9k|  bcemit_INS(fs, ins);
  555|   194k|noins:
  556|   194k|  e->u.s.info = reg;
  557|   194k|  e->k = VNONRELOC;
  558|   194k|}
lj_parse.c:bcemit_nil:
  477|    593|{
  478|    593|  if (fs->pc > fs->lasttarget) {  /* No jumps to current position? */
  ------------------
  |  Branch (478:7): [True: 482, False: 111]
  ------------------
  479|    482|    BCIns *ip = &fs->bcbase[fs->pc-1].ins;
  480|    482|    BCReg pto, pfrom = bc_a(*ip);
  ------------------
  |  |   35|    482|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  481|    482|    switch (bc_op(*ip)) {  /* Try to merge with the previous instruction. */
  ------------------
  |  |   34|    482|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  482|    104|    case BC_KPRI:
  ------------------
  |  Branch (482:5): [True: 104, False: 378]
  ------------------
  483|    104|      if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |   38|    104|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
                    if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |  260|    104|#define LJ_TNIL			(~0u)
  ------------------
  |  Branch (483:11): [True: 0, False: 104]
  ------------------
  484|    104|      if (from == pfrom) {
  ------------------
  |  Branch (484:11): [True: 0, False: 104]
  ------------------
  485|      0|	if (n == 1) return;
  ------------------
  |  Branch (485:6): [True: 0, False: 0]
  ------------------
  486|    104|      } else if (from == pfrom+1) {
  ------------------
  |  Branch (486:18): [True: 104, False: 0]
  ------------------
  487|    104|	from = pfrom;
  488|    104|	n++;
  489|    104|      } else {
  490|      0|	break;
  491|      0|      }
  492|    104|      *ip = BCINS_AD(BC_KNIL, from, from+n-1);  /* Replace KPRI. */
  ------------------
  |  |   56|    104|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  493|    104|      return;
  494|     39|    case BC_KNIL:
  ------------------
  |  Branch (494:5): [True: 39, False: 443]
  ------------------
  495|     39|      pto = bc_d(*ip);
  ------------------
  |  |   38|     39|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  496|     39|      if (pfrom <= from && from <= pto+1) {  /* Can we connect both ranges? */
  ------------------
  |  Branch (496:11): [True: 39, False: 0]
  |  Branch (496:28): [True: 39, False: 0]
  ------------------
  497|     39|	if (from+n-1 > pto)
  ------------------
  |  Branch (497:6): [True: 39, False: 0]
  ------------------
  498|     39|	  setbc_d(ip, from+n-1);  /* Patch previous instruction range. */
  ------------------
  |  |   49|     39|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|     39|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  499|     39|	return;
  500|     39|      }
  501|      0|      break;
  502|    339|    default:
  ------------------
  |  Branch (502:5): [True: 339, False: 143]
  ------------------
  503|    339|      break;
  504|    482|    }
  505|    482|  }
  506|       |  /* Emit new instruction or replace old instruction. */
  507|    450|  bcemit_INS(fs, n == 1 ? BCINS_AD(BC_KPRI, from, VKNIL) :
  ------------------
  |  |   56|    271|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  |  Branch (507:18): [True: 271, False: 179]
  ------------------
  508|    450|			  BCINS_AD(BC_KNIL, from, from+n-1));
  ------------------
  |  |   56|    179|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  509|    450|}
lj_parse.c:jmp_novalue:
  275|  7.99k|{
  276|  8.55k|  for (; list != NO_JMP; list = jmp_next(fs, list)) {
  ------------------
  |  |   31|  8.55k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (276:10): [True: 8.04k, False: 506]
  ------------------
  277|  8.04k|    BCIns p = fs->bcbase[list >= 1 ? list-1 : list].ins;
  ------------------
  |  Branch (277:26): [True: 8.04k, False: 0]
  ------------------
  278|  8.04k|    if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|  8.04k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|  7.65k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   35|  7.65k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   30|  7.65k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  7.65k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (278:11): [True: 391, False: 7.65k]
  |  Branch (278:34): [True: 0, False: 7.65k]
  |  Branch (278:57): [True: 168, False: 7.48k]
  ------------------
  279|  7.48k|      return 1;
  280|  8.04k|  }
  281|    506|  return 0;
  282|  7.99k|}
lj_parse.c:expr_tonextreg:
  590|   200k|{
  591|   200k|  expr_discharge(fs, e);
  592|   200k|  expr_free(fs, e);
  593|   200k|  bcreg_reserve(fs, 1);
  594|   200k|  expr_toreg(fs, e, fs->freereg - 1);
  595|   200k|}
lj_parse.c:expr_free:
  407|   224k|{
  408|   224k|  if (e->k == VNONRELOC)
  ------------------
  |  Branch (408:7): [True: 90.4k, False: 133k]
  ------------------
  409|  90.4k|    bcreg_free(fs, e->u.s.info);
  410|   224k|}
lj_parse.c:bcemit_store:
  623|  12.3k|{
  624|  12.3k|  BCIns ins;
  625|  12.3k|  if (var->k == VLOCAL) {
  ------------------
  |  Branch (625:7): [True: 0, False: 12.3k]
  ------------------
  626|      0|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|      0|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  627|      0|    expr_free(fs, e);
  628|      0|    expr_toreg(fs, e, var->u.s.info);
  629|      0|    return;
  630|  12.3k|  } else if (var->k == VUPVAL) {
  ------------------
  |  Branch (630:14): [True: 0, False: 12.3k]
  ------------------
  631|      0|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|      0|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  632|      0|    expr_toval(fs, e);
  633|      0|    if (e->k <= VKTRUE)
  ------------------
  |  Branch (633:9): [True: 0, False: 0]
  ------------------
  634|      0|      ins = BCINS_AD(BC_USETP, var->u.s.info, const_pri(e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  635|      0|    else if (e->k == VKSTR)
  ------------------
  |  Branch (635:14): [True: 0, False: 0]
  ------------------
  636|      0|      ins = BCINS_AD(BC_USETS, var->u.s.info, const_str(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  637|      0|    else if (e->k == VKNUM)
  ------------------
  |  Branch (637:14): [True: 0, False: 0]
  ------------------
  638|      0|      ins = BCINS_AD(BC_USETN, var->u.s.info, const_num(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  639|      0|    else
  640|      0|      ins = BCINS_AD(BC_USETV, var->u.s.info, expr_toanyreg(fs, e));
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  641|  12.3k|  } else if (var->k == VGLOBAL) {
  ------------------
  |  Branch (641:14): [True: 1.79k, False: 10.5k]
  ------------------
  642|  1.79k|    BCReg ra = expr_toanyreg(fs, e);
  643|  1.79k|    ins = BCINS_AD(BC_GSET, ra, const_str(fs, var));
  ------------------
  |  |   56|  1.79k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  644|  10.5k|  } else {
  645|  10.5k|    BCReg ra, rc;
  646|  10.5k|    lj_assertFS(var->k == VINDEXED, "bad expr type %d", var->k);
  ------------------
  |  |  167|  10.5k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  10.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  10.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 10.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|  10.5k|    ra = expr_toanyreg(fs, e);
  648|  10.5k|    rc = var->u.s.aux;
  649|  10.5k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (649:9): [True: 917, False: 9.61k]
  ------------------
  650|    917|      ins = BCINS_ABC(BC_TSETS, ra, var->u.s.info, ~rc);
  ------------------
  |  |   54|    917|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  651|  9.61k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|  9.61k|#define BCMAX_C		0xff
  ------------------
  |  Branch (651:16): [True: 9.48k, False: 131]
  ------------------
  652|  9.48k|      ins = BCINS_ABC(BC_TSETB, ra, var->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|  9.48k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  653|  9.48k|    } else {
  654|    131|#ifdef LUA_USE_ASSERT
  655|       |      /* Free late alloced key reg to avoid assert on free of value reg. */
  656|       |      /* This can only happen when called from expr_table(). */
  657|    131|      if (e->k == VNONRELOC && ra >= fs->nactvar && rc >= ra)
  ------------------
  |  Branch (657:11): [True: 131, False: 0]
  |  Branch (657:32): [True: 131, False: 0]
  |  Branch (657:53): [True: 112, False: 19]
  ------------------
  658|    112|	bcreg_free(fs, rc);
  659|    131|#endif
  660|    131|      ins = BCINS_ABC(BC_TSETV, ra, var->u.s.info, rc);
  ------------------
  |  |   54|    131|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  661|    131|    }
  662|  10.5k|  }
  663|  12.3k|  bcemit_INS(fs, ins);
  664|  12.3k|  expr_free(fs, e);
  665|  12.3k|}
lj_parse.c:const_num:
  206|  15.2k|{
  207|  15.2k|  lua_State *L = fs->L;
  208|  15.2k|  TValue *o;
  209|  15.2k|  lj_assertFS(expr_isnumk(e), "bad usage");
  ------------------
  |  |  167|  15.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  15.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  15.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 15.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  15.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  210|  15.2k|  o = lj_tab_set(L, fs->kt, &e->u.nval);
  211|  15.2k|  if (tvhaskslot(o))
  ------------------
  |  |  201|  15.2k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 9.89k, False: 5.33k]
  |  |  ------------------
  ------------------
  212|  9.89k|    return tvkslot(o);
  ------------------
  |  |  202|  9.89k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  213|  5.33k|  o->u64 = fs->nkn;
  214|  5.33k|  return fs->nkn++;
  215|  15.2k|}
lj_parse.c:var_new:
 1054|    328|{
 1055|    328|  FuncState *fs = ls->fs;
 1056|    328|  MSize vtop = ls->vtop;
 1057|    328|  checklimit(fs, fs->nactvar+n, LJ_MAX_LOCVAR, "local variables");
  ------------------
  |  |  192|    328|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 328]
  |  |  ------------------
  ------------------
 1058|    328|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|    328|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 42, False: 286]
  |  |  ------------------
  ------------------
 1059|     42|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|     42|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|     42|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1059:9): [True: 0, False: 42]
  ------------------
 1060|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1061|     42|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|     42|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1062|     42|  }
 1063|    328|  lj_assertFS((uintptr_t)name < VARNAME__MAX ||
  ------------------
  |  |  167|    328|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    328|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    590|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 66, False: 262]
  |  |  |  |  |  |  |  Branch (355:5): [True: 262, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    328|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|    328|	      lj_tab_getstr(fs->kt, name) != NULL,
 1065|    328|	      "unanchored variable name");
 1066|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1067|    328|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|    328|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1068|    328|  fs->varmap[fs->nactvar+n] = (uint16_t)vtop;
 1069|    328|  ls->vtop = vtop+1;
 1070|    328|}
lj_parse.c:var_add:
 1080|      2|{
 1081|      2|  FuncState *fs = ls->fs;
 1082|      2|  BCReg nactvar = fs->nactvar;
 1083|      8|  while (nvars--) {
  ------------------
  |  Branch (1083:10): [True: 6, False: 2]
  ------------------
 1084|      6|    VarInfo *v = &var_get(ls, fs, nactvar);
  ------------------
  |  | 1050|      6|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1085|      6|    v->startpc = fs->pc;
 1086|      6|    v->slot = nactvar++;
 1087|      6|    v->info = 0;
 1088|      6|  }
 1089|      2|  fs->nactvar = nactvar;
 1090|      2|}
lj_parse.c:expr_primary:
 1962|  36.0k|{
 1963|  36.0k|  FuncState *fs = ls->fs;
 1964|       |  /* Parse prefix expression. */
 1965|  36.0k|  if (ls->tok == '(') {
  ------------------
  |  Branch (1965:7): [True: 6.27k, False: 29.7k]
  ------------------
 1966|  6.27k|    BCLine line = ls->linenumber;
 1967|  6.27k|    lj_lex_next(ls);
 1968|  6.27k|    expr(ls, v);
 1969|  6.27k|    lex_match(ls, ')', '(', line);
 1970|  6.27k|    expr_discharge(ls->fs, v);
 1971|  29.7k|  } else if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|    954|#define LJ_52			0
  ------------------
  |  Branch (1971:14): [True: 29.2k, False: 477]
  |  Branch (1971:37): [Folded - Ignored]
  |  Branch (1971:47): [True: 0, False: 477]
  ------------------
 1972|  29.2k|    var_lookup(ls, v);
  ------------------
  |  | 1157|  29.2k|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 1973|  29.2k|  } else {
 1974|    477|    err_syntax(ls, LJ_ERR_XSYMBOL);
 1975|    477|  }
 1976|   103k|  for (;;) {  /* Parse multiple expression suffixes. */
 1977|   103k|    if (ls->tok == '.') {
  ------------------
  |  Branch (1977:9): [True: 2.42k, False: 101k]
  ------------------
 1978|  2.42k|      expr_field(ls, v);
 1979|   101k|    } else if (ls->tok == '[') {
  ------------------
  |  Branch (1979:16): [True: 1.36k, False: 99.9k]
  ------------------
 1980|  1.36k|      ExpDesc key;
 1981|  1.36k|      expr_toanyreg(fs, v);
 1982|  1.36k|      expr_bracket(ls, &key);
 1983|  1.36k|      expr_index(fs, v, &key);
 1984|  99.9k|    } else if (ls->tok == ':') {
  ------------------
  |  Branch (1984:16): [True: 447, False: 99.5k]
  ------------------
 1985|    447|      ExpDesc key;
 1986|    447|      lj_lex_next(ls);
 1987|    447|      expr_str(ls, &key);
 1988|    447|      bcemit_method(fs, v, &key);
 1989|    447|      parse_args(ls, v);
 1990|  99.5k|    } else if (ls->tok == '(' || ls->tok == TK_string || ls->tok == '{') {
  ------------------
  |  Branch (1990:16): [True: 10.6k, False: 88.8k]
  |  Branch (1990:34): [True: 59.7k, False: 29.1k]
  |  Branch (1990:58): [True: 3.39k, False: 25.7k]
  ------------------
 1991|  73.7k|      expr_tonextreg(fs, v);
 1992|  73.7k|      if (ls->fr2) bcreg_reserve(fs, 1);
  ------------------
  |  Branch (1992:11): [True: 73.7k, False: 1]
  ------------------
 1993|  73.7k|      parse_args(ls, v);
 1994|  73.7k|    } else {
 1995|  25.7k|      break;
 1996|  25.7k|    }
 1997|   103k|  }
 1998|  35.5k|}
lj_parse.c:var_lookup_:
 1132|  58.2k|{
 1133|  58.2k|  if (fs) {
  ------------------
  |  Branch (1133:7): [True: 29.1k, False: 29.1k]
  ------------------
 1134|  29.1k|    BCReg reg = var_lookup_local(fs, name);
 1135|  29.1k|    if ((int32_t)reg >= 0) {  /* Local in this function? */
  ------------------
  |  Branch (1135:9): [True: 0, False: 29.1k]
  ------------------
 1136|      0|      expr_init(e, VLOCAL, reg);
 1137|      0|      if (!first)
  ------------------
  |  Branch (1137:11): [True: 0, False: 0]
  ------------------
 1138|      0|	fscope_uvmark(fs, reg);  /* Scope now has an upvalue. */
 1139|      0|      return (MSize)(e->u.s.aux = (uint32_t)fs->varmap[reg]);
 1140|  29.1k|    } else {
 1141|  29.1k|      MSize vidx = var_lookup_(fs->prev, name, e, 0);  /* Var in outer func? */
 1142|  29.1k|      if ((int32_t)vidx >= 0) {  /* Yes, make it an upvalue here. */
  ------------------
  |  Branch (1142:11): [True: 0, False: 29.1k]
  ------------------
 1143|      0|	e->u.s.info = (uint8_t)var_lookup_uv(fs, vidx, e);
 1144|      0|	e->k = VUPVAL;
 1145|      0|	return vidx;
 1146|      0|      }
 1147|  29.1k|    }
 1148|  29.1k|  } else {  /* Not found in any function, must be a global. */
 1149|  29.1k|    expr_init(e, VGLOBAL, 0);
 1150|  29.1k|    e->u.sval = name;
 1151|  29.1k|  }
 1152|  58.2k|  return (MSize)-1;  /* Global. */
 1153|  58.2k|}
lj_parse.c:var_lookup_local:
 1102|  29.1k|{
 1103|  29.1k|  int i;
 1104|  29.1k|  for (i = fs->nactvar-1; i >= 0; i--) {
  ------------------
  |  Branch (1104:27): [True: 0, False: 29.1k]
  ------------------
 1105|      0|    if (n == strref(var_get(fs->ls, fs, i).name))
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (1105:9): [True: 0, False: 0]
  ------------------
 1106|      0|      return (BCReg)i;
 1107|      0|  }
 1108|  29.1k|  return (BCReg)-1;  /* Not found. */
 1109|  29.1k|}
lj_parse.c:expr_field:
 1695|  2.42k|{
 1696|  2.42k|  FuncState *fs = ls->fs;
 1697|  2.42k|  ExpDesc key;
 1698|  2.42k|  expr_toanyreg(fs, v);
 1699|  2.42k|  lj_lex_next(ls);  /* Skip dot or colon. */
 1700|  2.42k|  expr_str(ls, &key);
 1701|  2.42k|  expr_index(fs, v, &key);
 1702|  2.42k|}
lj_parse.c:bcemit_method:
  669|    441|{
  670|    441|  BCReg idx, func, fr2, obj = expr_toanyreg(fs, e);
  671|    441|  expr_free(fs, e);
  672|    441|  func = fs->freereg;
  673|    441|  fr2 = fs->ls->fr2;
  674|    441|  bcemit_AD(fs, BC_MOV, func+1+fr2, obj);  /* Copy object to 1st argument. */
  ------------------
  |  |  435|    441|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    441|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  675|    441|  lj_assertFS(expr_isstrk(key), "bad usage");
  ------------------
  |  |  167|    441|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    441|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    441|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 441, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    441|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  676|    441|  idx = const_str(fs, key);
  677|    441|  if (idx <= BCMAX_C) {
  ------------------
  |  |   27|    441|#define BCMAX_C		0xff
  ------------------
  |  Branch (677:7): [True: 441, False: 0]
  ------------------
  678|    441|    bcreg_reserve(fs, 2+fr2);
  679|    441|    bcemit_ABC(fs, BC_TGETS, func, obj, idx);
  ------------------
  |  |  434|    441|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    441|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  680|    441|  } else {
  681|      0|    bcreg_reserve(fs, 3+fr2);
  682|      0|    bcemit_AD(fs, BC_KSTR, func+2+fr2, idx);
  ------------------
  |  |  435|      0|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  683|      0|    bcemit_ABC(fs, BC_TGETV, func, obj, func+2+fr2);
  ------------------
  |  |  434|      0|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  684|      0|    fs->freereg--;
  685|      0|  }
  686|    441|  e->u.s.info = func;
  687|    441|  e->k = VNONRELOC;
  688|    441|}
lj_parse.c:parse_args:
 1915|  74.2k|{
 1916|  74.2k|  FuncState *fs = ls->fs;
 1917|  74.2k|  ExpDesc args;
 1918|  74.2k|  BCIns ins;
 1919|  74.2k|  BCReg base;
 1920|  74.2k|  BCLine line = ls->linenumber;
 1921|  74.2k|  if (ls->tok == '(') {
  ------------------
  |  Branch (1921:7): [True: 10.6k, False: 63.5k]
  ------------------
 1922|  10.6k|#if !LJ_52
 1923|  10.6k|    if (line != ls->lastline)
  ------------------
  |  Branch (1923:9): [True: 4, False: 10.6k]
  ------------------
 1924|      4|      err_syntax(ls, LJ_ERR_XAMBIG);
 1925|  10.6k|#endif
 1926|  10.6k|    lj_lex_next(ls);
 1927|  10.6k|    if (ls->tok == ')') {  /* f(). */
  ------------------
  |  Branch (1927:9): [True: 461, False: 10.2k]
  ------------------
 1928|    461|      args.k = VVOID;
 1929|  10.2k|    } else {
 1930|  10.2k|      expr_list(ls, &args);
 1931|  10.2k|      if (args.k == VCALL)  /* f(a, b, g()) or f(a, b, ...). */
  ------------------
  |  Branch (1931:11): [True: 278, False: 9.94k]
  ------------------
 1932|  10.2k|	setbc_b(bcptr(fs, &args), 0);  /* Pass on multiple results. */
  ------------------
  |  |   46|    278|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|    278|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    278|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1933|  10.2k|    }
 1934|  10.6k|    lex_match(ls, ')', '(', line);
 1935|  63.5k|  } else if (ls->tok == '{') {
  ------------------
  |  Branch (1935:14): [True: 3.67k, False: 59.8k]
  ------------------
 1936|  3.67k|    expr_table(ls, &args);
 1937|  59.8k|  } else if (ls->tok == TK_string) {
  ------------------
  |  Branch (1937:14): [True: 59.8k, False: 21]
  ------------------
 1938|  59.8k|    expr_init(&args, VKSTR, 0);
 1939|  59.8k|    args.u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|  59.8k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  59.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  59.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  59.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 59.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  59.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1940|      0|    lj_lex_next(ls);
 1941|  59.8k|  } else {
 1942|     21|    err_syntax(ls, LJ_ERR_XFUNARG);
 1943|      0|    return;  /* Silence compiler. */
 1944|     21|  }
 1945|  74.2k|  lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|  74.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  74.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  74.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 70.3k, False: 3.85k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  74.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1946|  70.3k|  base = e->u.s.info;  /* Base register for call. */
 1947|  70.3k|  if (args.k == VCALL) {
  ------------------
  |  Branch (1947:7): [True: 265, False: 70.0k]
  ------------------
 1948|    265|    ins = BCINS_ABC(BC_CALLM, base, 2, args.u.s.aux - base - 1 - ls->fr2);
  ------------------
  |  |   54|    265|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1949|  70.0k|  } else {
 1950|  70.0k|    if (args.k != VVOID)
  ------------------
  |  Branch (1950:9): [True: 69.6k, False: 460]
  ------------------
 1951|  69.6k|      expr_tonextreg(fs, &args);
 1952|  70.0k|    ins = BCINS_ABC(BC_CALL, base, 2, fs->freereg - base - ls->fr2);
  ------------------
  |  |   54|  70.0k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1953|  70.0k|  }
 1954|  70.3k|  expr_init(e, VCALL, bcemit_INS(fs, ins));
 1955|  70.3k|  e->u.s.aux = base;
 1956|  70.3k|  fs->bcbase[fs->pc - 1].line = line;
 1957|  70.3k|  fs->freereg = base+1;  /* Leave one result by default. */
 1958|  70.3k|}
lj_parse.c:expr_list:
 1902|  11.9k|{
 1903|  11.9k|  BCReg n = 1;
 1904|  11.9k|  expr(ls, v);
 1905|  12.7k|  while (lex_opt(ls, ',')) {
  ------------------
  |  Branch (1905:10): [True: 751, False: 11.9k]
  ------------------
 1906|    751|    expr_tonextreg(ls->fs, v);
 1907|    751|    expr(ls, v);
 1908|    751|    n++;
 1909|    751|  }
 1910|  11.9k|  return n;
 1911|  11.9k|}
lj_parse.c:bcemit_unop:
  943|  11.7k|{
  944|  11.7k|  if (op == BC_NOT) {
  ------------------
  |  Branch (944:7): [True: 482, False: 11.2k]
  ------------------
  945|       |    /* Swap true and false lists. */
  946|    482|    { BCPos temp = e->f; e->f = e->t; e->t = temp; }
  947|    482|    jmp_dropval(fs, e->f);
  948|    482|    jmp_dropval(fs, e->t);
  949|    482|    expr_discharge(fs, e);
  950|    482|    if (e->k == VKNIL || e->k == VKFALSE) {
  ------------------
  |  Branch (950:9): [True: 0, False: 482]
  |  Branch (950:26): [True: 88, False: 394]
  ------------------
  951|     88|      e->k = VKTRUE;
  952|     88|      return;
  953|    394|    } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |   73|    788|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 262, False: 132]
  |  |  ------------------
  ------------------
                  } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |  585|    264|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (953:45): [True: 1, False: 131]
  ------------------
  954|    263|      e->k = VKFALSE;
  955|    263|      return;
  956|    263|    } else if (e->k == VJMP) {
  ------------------
  |  Branch (956:16): [True: 6, False: 125]
  ------------------
  957|      6|      invertcond(fs, e);
  958|      6|      return;
  959|    125|    } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (959:16): [True: 94, False: 31]
  ------------------
  960|     94|      bcreg_reserve(fs, 1);
  961|     94|      setbc_a(bcptr(fs, e), fs->freereg-1);
  ------------------
  |  |   45|     94|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|     94|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     94|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  962|     94|      e->u.s.info = fs->freereg-1;
  963|     94|      e->k = VNONRELOC;
  964|     94|    } else {
  965|     31|      lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|     31|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     31|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     31|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 31, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     31|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  966|     31|    }
  967|  11.2k|  } else {
  968|  11.2k|    lj_assertFS(op == BC_UNM || op == BC_LEN, "bad unop %d", op);
  ------------------
  |  |  167|  11.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  11.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  18.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.44k, False: 6.80k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.80k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  969|  11.2k|    if (op == BC_UNM && !expr_hasjump(e)) {  /* Constant-fold negations. */
  ------------------
  |  |   71|  4.44k|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (969:9): [True: 4.44k, False: 6.80k]
  |  Branch (969:25): [True: 4.39k, False: 52]
  ------------------
  970|  4.39k|#if LJ_HASFFI
  971|  4.39k|      if (e->k == VKCDATA) {  /* Fold in-place since cdata is not interned. */
  ------------------
  |  Branch (971:11): [True: 1.40k, False: 2.99k]
  ------------------
  972|  1.40k|	GCcdata *cd = cdataV(&e->u.nval);
  ------------------
  |  |  863|  1.40k|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|  1.40k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.40k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.40k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.40k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.40k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  973|  1.40k|	uint64_t *p = (uint64_t *)cdataptr(cd);
  ------------------
  |  |  360|  1.40k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  974|  1.40k|	if (cd->ctypeid == CTID_COMPLEX_DOUBLE)
  ------------------
  |  Branch (974:6): [True: 1.28k, False: 117]
  ------------------
  975|  1.28k|	  p[1] ^= U64x(80000000,00000000);
  ------------------
  |  |   94|  1.28k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  976|    117|	else
  977|    117|	  *p = ~*p+1u;
  978|  1.40k|	return;
  979|  1.40k|      } else
  980|  2.99k|#endif
  981|  2.99k|      if (expr_isnumk(e) && !expr_numiszero(e)) {  /* Avoid folding to -0. */
  ------------------
  |  |   75|  5.98k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 2.55k, False: 440]
  |  |  ------------------
  ------------------
  |  Branch (981:29): [True: 2.49k, False: 56]
  ------------------
  982|  2.49k|	TValue *o = expr_numtv(e);
  ------------------
  |  |   79|  2.49k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|  2.49k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.49k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.49k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.49k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.49k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  983|  2.49k|	if (tvisint(o)) {
  ------------------
  |  |  803|  2.49k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  4.99k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  984|      0|	  int32_t k = intV(o), negk = (int32_t)(~(uint32_t)k+1u);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  985|      0|	  if (k == negk)
  ------------------
  |  Branch (985:8): [True: 0, False: 0]
  ------------------
  986|      0|	    setnumV(o, -(lua_Number)k);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  987|      0|	  else
  988|      0|	    setintV(o, negk);
  989|      0|	  return;
  990|  2.49k|	} else {
  991|  2.49k|	  o->u64 ^= U64x(80000000,00000000);
  ------------------
  |  |   94|  2.49k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  992|  2.49k|	  return;
  993|  2.49k|	}
  994|  2.49k|      }
  995|  4.39k|    }
  996|  7.35k|    expr_toanyreg(fs, e);
  997|  7.35k|  }
  998|  7.48k|  expr_free(fs, e);
  999|  7.48k|  e->u.s.info = bcemit_AD(fs, op, 0, e->u.s.info);
  ------------------
  |  |  435|  7.48k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  7.48k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1000|  7.48k|  e->k = VRELOCABLE;
 1001|  7.48k|}
lj_parse.c:jmp_dropval:
  312|    964|{
  313|    983|  for (; list != NO_JMP; list = jmp_next(fs, list))
  ------------------
  |  |   31|    983|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (313:10): [True: 19, False: 964]
  ------------------
  314|     19|    jmp_patchtestreg(fs, list, NO_REG);
  ------------------
  |  |   30|     19|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|     19|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  315|    964|}
lj_parse.c:invertcond:
  711|      7|{
  712|      7|  BCIns *ip = &fs->bcbase[e->u.s.info - 1].ins;
  713|      7|  setbc_op(ip, bc_op(*ip)^1);
  ------------------
  |  |   44|      7|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|      7|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      7|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|      7|}
lj_parse.c:token2binop:
 2056|  73.0k|{
 2057|  73.0k|  switch (tok) {
 2058|  1.15k|  case '+':	return OPR_ADD;
  ------------------
  |  Branch (2058:3): [True: 1.15k, False: 71.8k]
  ------------------
 2059|  3.40k|  case '-':	return OPR_SUB;
  ------------------
  |  Branch (2059:3): [True: 3.40k, False: 69.6k]
  ------------------
 2060|  4.59k|  case '*':	return OPR_MUL;
  ------------------
  |  Branch (2060:3): [True: 4.59k, False: 68.4k]
  ------------------
 2061|  4.84k|  case '/':	return OPR_DIV;
  ------------------
  |  Branch (2061:3): [True: 4.84k, False: 68.1k]
  ------------------
 2062|  11.4k|  case '%':	return OPR_MOD;
  ------------------
  |  Branch (2062:3): [True: 11.4k, False: 61.5k]
  ------------------
 2063|    711|  case '^':	return OPR_POW;
  ------------------
  |  Branch (2063:3): [True: 711, False: 72.3k]
  ------------------
 2064|  2.17k|  case TK_concat: return OPR_CONCAT;
  ------------------
  |  Branch (2064:3): [True: 2.17k, False: 70.8k]
  ------------------
 2065|    467|  case TK_ne:	return OPR_NE;
  ------------------
  |  Branch (2065:3): [True: 467, False: 72.5k]
  ------------------
 2066|  1.06k|  case TK_eq:	return OPR_EQ;
  ------------------
  |  Branch (2066:3): [True: 1.06k, False: 71.9k]
  ------------------
 2067|  3.32k|  case '<':	return OPR_LT;
  ------------------
  |  Branch (2067:3): [True: 3.32k, False: 69.6k]
  ------------------
 2068|    479|  case TK_le:	return OPR_LE;
  ------------------
  |  Branch (2068:3): [True: 479, False: 72.5k]
  ------------------
 2069|  2.96k|  case '>':	return OPR_GT;
  ------------------
  |  Branch (2069:3): [True: 2.96k, False: 70.0k]
  ------------------
 2070|    872|  case TK_ge:	return OPR_GE;
  ------------------
  |  Branch (2070:3): [True: 872, False: 72.1k]
  ------------------
 2071|      0|  case TK_and:	return OPR_AND;
  ------------------
  |  Branch (2071:3): [True: 0, False: 73.0k]
  ------------------
 2072|  2.09k|  case TK_or:	return OPR_OR;
  ------------------
  |  Branch (2072:3): [True: 2.09k, False: 70.9k]
  ------------------
 2073|  33.4k|  default:	return OPR_NOBINOPR;
  ------------------
  |  Branch (2073:3): [True: 33.4k, False: 39.6k]
  ------------------
 2074|  73.0k|  }
 2075|  73.0k|}
lj_parse.c:bcemit_binop_left:
  884|  33.1k|{
  885|  33.1k|  if (op == OPR_AND) {
  ------------------
  |  Branch (885:7): [True: 0, False: 33.1k]
  ------------------
  886|      0|    bcemit_branch_t(fs, e);
  887|  33.1k|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (887:14): [True: 1.69k, False: 31.5k]
  ------------------
  888|  1.69k|    bcemit_branch_f(fs, e);
  889|  31.5k|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (889:14): [True: 1.99k, False: 29.5k]
  ------------------
  890|  1.99k|    expr_tonextreg(fs, e);
  891|  29.5k|  } else if (op == OPR_EQ || op == OPR_NE) {
  ------------------
  |  Branch (891:14): [True: 795, False: 28.7k]
  |  Branch (891:30): [True: 465, False: 28.2k]
  ------------------
  892|  1.26k|    if (!expr_isk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   74|  1.26k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  2.52k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 214, False: 1.04k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|    214|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 214, False: 0]
  |  |  ------------------
  ------------------
  893|  28.2k|  } else {
  894|  28.2k|    if (!expr_isnumk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   76|  28.2k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  56.5k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 12.2k, False: 15.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  12.2k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 12.2k, False: 22]
  |  |  ------------------
  ------------------
  895|  28.2k|  }
  896|  33.1k|}
lj_parse.c:bcemit_branch_f:
  757|  1.69k|{
  758|  1.69k|  BCPos pc;
  759|  1.69k|  expr_discharge(fs, e);
  760|  1.69k|  if (e->k == VKNIL || e->k == VKFALSE)
  ------------------
  |  Branch (760:7): [True: 0, False: 1.69k]
  |  Branch (760:24): [True: 10, False: 1.68k]
  ------------------
  761|     10|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|     10|#define NO_JMP		(~(BCPos)0)
  ------------------
  762|  1.68k|  else if (e->k == VJMP)
  ------------------
  |  Branch (762:12): [True: 244, False: 1.43k]
  ------------------
  763|    244|    pc = e->u.s.info;
  764|  1.43k|  else if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (764:12): [True: 82, False: 1.35k]
  |  Branch (764:29): [True: 299, False: 1.05k]
  |  Branch (764:46): [True: 11, False: 1.04k]
  ------------------
  765|    392|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|    392|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    392|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  766|  1.04k|  else
  767|  1.04k|    pc = bcemit_branch(fs, e, 1);
  768|  1.69k|  jmp_append(fs, &e->t, pc);
  769|  1.69k|  jmp_tohere(fs, e->f);
  770|  1.69k|  e->f = NO_JMP;
  ------------------
  |  |   31|  1.69k|#define NO_JMP		(~(BCPos)0)
  ------------------
  771|  1.69k|}
lj_parse.c:bcemit_branch:
  718|  1.05k|{
  719|  1.05k|  BCPos pc;
  720|  1.05k|  if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (720:7): [True: 839, False: 212]
  ------------------
  721|    839|    BCIns *ip = bcptr(fs, e);
  ------------------
  |  |  438|    839|#define bcptr(fs, e)			(&(fs)->bcbase[(e)->u.s.info].ins)
  ------------------
  722|    839|    if (bc_op(*ip) == BC_NOT) {
  ------------------
  |  |   34|    839|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (722:9): [True: 10, False: 829]
  ------------------
  723|     10|      *ip = BCINS_AD(cond ? BC_ISF : BC_IST, 0, bc_d(*ip));
  ------------------
  |  |   56|     20|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:13): [True: 10, False: 0]
  |  |  ------------------
  ------------------
  724|     10|      return bcemit_jmp(fs);
  725|     10|    }
  726|    839|  }
  727|  1.04k|  if (e->k != VNONRELOC) {
  ------------------
  |  Branch (727:7): [True: 829, False: 212]
  ------------------
  728|    829|    bcreg_reserve(fs, 1);
  729|    829|    expr_toreg_nobranch(fs, e, fs->freereg-1);
  730|    829|  }
  731|  1.04k|  bcemit_AD(fs, cond ? BC_ISTC : BC_ISFC, NO_REG, e->u.s.info);
  ------------------
  |  |  435|  1.04k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  2.08k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (56:13): [True: 1.03k, False: 6]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  732|  1.04k|  pc = bcemit_jmp(fs);
  733|  1.04k|  expr_free(fs, e);
  734|  1.04k|  return pc;
  735|  1.05k|}
lj_parse.c:bcemit_binop:
  900|  30.4k|{
  901|  30.4k|  if (op <= OPR_POW) {
  ------------------
  |  Branch (901:7): [True: 19.4k, False: 10.9k]
  ------------------
  902|  19.4k|    bcemit_arith(fs, op, e1, e2);
  903|  19.4k|  } else if (op == OPR_AND) {
  ------------------
  |  Branch (903:14): [True: 0, False: 10.9k]
  ------------------
  904|      0|    lj_assertFS(e1->t == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|      0|    expr_discharge(fs, e2);
  906|      0|    jmp_append(fs, &e2->f, e1->f);
  907|      0|    *e1 = *e2;
  908|  10.9k|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (908:14): [True: 1.42k, False: 9.54k]
  ------------------
  909|  1.42k|    lj_assertFS(e1->f == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|  1.42k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.42k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.42k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.42k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.42k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|  1.42k|    expr_discharge(fs, e2);
  911|  1.42k|    jmp_append(fs, &e2->t, e1->t);
  912|  1.42k|    *e1 = *e2;
  913|  9.54k|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (913:14): [True: 1.76k, False: 7.77k]
  ------------------
  914|  1.76k|    expr_toval(fs, e2);
  915|  1.76k|    if (e2->k == VRELOCABLE && bc_op(*bcptr(fs, e2)) == BC_CAT) {
  ------------------
  |  |   34|  1.41k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (915:9): [True: 1.41k, False: 353]
  |  Branch (915:32): [True: 1.37k, False: 33]
  ------------------
  916|  1.37k|      lj_assertFS(e1->u.s.info == bc_b(*bcptr(fs, e2))-1,
  ------------------
  |  |  167|  1.37k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.37k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.37k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.37k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.37k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  917|  1.37k|		  "bad CAT stack layout");
  918|  1.37k|      expr_free(fs, e1);
  919|  1.37k|      setbc_b(bcptr(fs, e2), e1->u.s.info);
  ------------------
  |  |   46|  1.37k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  1.37k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.37k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  920|  1.37k|      e1->u.s.info = e2->u.s.info;
  921|  1.37k|    } else {
  922|    386|      expr_tonextreg(fs, e2);
  923|    386|      expr_free(fs, e2);
  924|    386|      expr_free(fs, e1);
  925|    386|      e1->u.s.info = bcemit_ABC(fs, BC_CAT, 0, e1->u.s.info, e2->u.s.info);
  ------------------
  |  |  434|    386|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|    386|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  926|    386|    }
  927|  1.76k|    e1->k = VRELOCABLE;
  928|  7.77k|  } else {
  929|  7.77k|    lj_assertFS(op == OPR_NE || op == OPR_EQ ||
  ------------------
  |  |  167|  7.77k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  7.77k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  62.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 376, False: 7.40k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 667, False: 6.73k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.88k, False: 3.85k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 845, False: 3.00k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 460, False: 2.54k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.54k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  7.77k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  930|  7.77k|	       op == OPR_LT || op == OPR_GE || op == OPR_LE || op == OPR_GT,
  931|  7.77k|	       "bad binop %d", op);
  932|  7.77k|    bcemit_comp(fs, op, e1, e2);
  933|  7.77k|  }
  934|  30.4k|}
lj_parse.c:bcemit_arith:
  797|  19.4k|{
  798|  19.4k|  BCReg rb, rc, t;
  799|  19.4k|  uint32_t op;
  800|  19.4k|  if (foldarith(opr, e1, e2))
  ------------------
  |  Branch (800:7): [True: 8.35k, False: 11.1k]
  ------------------
  801|  8.35k|    return;
  802|  11.1k|  if (opr == OPR_POW) {
  ------------------
  |  Branch (802:7): [True: 520, False: 10.6k]
  ------------------
  803|    520|    op = BC_POW;
  804|    520|    rc = expr_toanyreg(fs, e2);
  805|    520|    rb = expr_toanyreg(fs, e1);
  806|  10.6k|  } else {
  807|  10.6k|    op = opr-OPR_ADD+BC_ADDVV;
  808|       |    /* Must discharge 2nd operand first since VINDEXED might free regs. */
  809|  10.6k|    expr_toval(fs, e2);
  810|  10.6k|    if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   75|  21.2k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 3.39k, False: 7.21k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   27|  3.39k|#define BCMAX_C		0xff
  ------------------
  |  Branch (810:28): [True: 3.39k, False: 0]
  ------------------
  811|  3.39k|      op -= BC_ADDVV-BC_ADDVN;
  812|  7.21k|    else
  813|  7.21k|      rc = expr_toanyreg(fs, e2);
  814|       |    /* 1st operand discharged by bcemit_binop_left, but need KNUM/KSHORT. */
  815|  10.6k|    lj_assertFS(expr_isnumk(e1) || e1->k == VNONRELOC,
  ------------------
  |  |  167|  10.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  10.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  18.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.45k, False: 8.15k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.15k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  816|  10.6k|		"bad expr type %d", e1->k);
  817|  10.6k|    expr_toval(fs, e1);
  818|       |    /* Avoid two consts to satisfy bytecode constraints. */
  819|  10.6k|    if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|  21.2k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 2.45k, False: 8.15k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|  13.0k|#define expr_isnumk(e)		((e)->k == VKNUM)
  ------------------
  |  Branch (819:28): [True: 2.27k, False: 178]
  ------------------
  820|  10.6k|	(t = const_num(fs, e1)) <= BCMAX_B) {
  ------------------
  |  |   26|  2.27k|#define BCMAX_B		0xff
  ------------------
  |  Branch (820:2): [True: 2.27k, False: 0]
  ------------------
  821|  2.27k|      rb = rc; rc = t; op -= BC_ADDVV-BC_ADDNV;
  822|  8.33k|    } else {
  823|  8.33k|      rb = expr_toanyreg(fs, e1);
  824|  8.33k|    }
  825|  10.6k|  }
  826|       |  /* Using expr_free might cause asserts if the order is wrong. */
  827|  11.1k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (827:7): [True: 8.85k, False: 2.27k]
  |  Branch (827:29): [True: 8.85k, False: 0]
  ------------------
  828|  11.1k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (828:7): [True: 7.73k, False: 3.39k]
  |  Branch (828:29): [True: 7.73k, False: 0]
  ------------------
  829|  11.1k|  e1->u.s.info = bcemit_ABC(fs, op, 0, rb, rc);
  ------------------
  |  |  434|  11.1k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  11.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  830|  11.1k|  e1->k = VRELOCABLE;
  831|  11.1k|}
lj_parse.c:foldarith:
  777|  19.4k|{
  778|  19.4k|  TValue o;
  779|  19.4k|  lua_Number n;
  780|  19.4k|  if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|  38.9k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  38.9k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 10.9k, False: 8.56k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  10.9k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 10.9k, False: 0]
  |  |  ------------------
  ------------------
                if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|  10.9k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  21.8k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 8.58k, False: 2.33k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  8.58k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 8.53k, False: 46]
  |  |  ------------------
  ------------------
  781|  8.53k|  n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|  8.53k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  8.53k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  8.53k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  8.53k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  8.53k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.53k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  8.53k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|  8.53k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  8.53k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  8.53k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  8.53k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  8.53k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 8.53k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  8.53k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  782|  8.53k|  setnumV(&o, n);
  ------------------
  |  |  945|  8.53k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  783|  8.53k|  if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  812|  17.0k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 143, False: 8.39k]
  |  |  ------------------
  ------------------
                if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  819|  8.39k|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|  8.39k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  |  |  |  Branch (819:22): [True: 35, False: 8.35k]
  |  |  ------------------
  ------------------
  784|  8.35k|  if (LJ_DUALNUM) {
  ------------------
  |  |  549|  8.35k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  785|      0|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  786|      0|    if ((lua_Number)k == n) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      setintV(&e1->u.nval, k);
  788|      0|      return 1;
  789|      0|    }
  790|      0|  }
  791|  8.35k|  setnumV(&e1->u.nval, n);
  ------------------
  |  |  945|  8.35k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  792|  8.35k|  return 1;
  793|  8.35k|}
lj_parse.c:bcemit_comp:
  835|  7.77k|{
  836|  7.77k|  ExpDesc *eret = e1;
  837|  7.77k|  BCIns ins;
  838|  7.77k|  expr_toval(fs, e1);
  839|  7.77k|  if (opr == OPR_EQ || opr == OPR_NE) {
  ------------------
  |  Branch (839:7): [True: 667, False: 7.11k]
  |  Branch (839:24): [True: 376, False: 6.73k]
  ------------------
  840|  1.04k|    BCOp op = opr == OPR_EQ ? BC_ISEQV : BC_ISNEV;
  ------------------
  |  Branch (840:15): [True: 667, False: 376]
  ------------------
  841|  1.04k|    BCReg ra;
  842|  1.04k|    if (expr_isk(e1)) { e1 = e2; e2 = eret; }  /* Need constant in 2nd arg. */
  ------------------
  |  |   73|  1.04k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 179, False: 864]
  |  |  ------------------
  ------------------
  843|  1.04k|    ra = expr_toanyreg(fs, e1);  /* First arg must be in a reg. */
  844|  1.04k|    expr_toval(fs, e2);
  845|  1.04k|    switch (e2->k) {
  846|     95|    case VKNIL: case VKFALSE: case VKTRUE:
  ------------------
  |  Branch (846:5): [True: 0, False: 1.04k]
  |  Branch (846:17): [True: 55, False: 988]
  |  Branch (846:31): [True: 40, False: 1.00k]
  ------------------
  847|     95|      ins = BCINS_AD(op+(BC_ISEQP-BC_ISEQV), ra, const_pri(e2));
  ------------------
  |  |   56|    190|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 95, False: 0]
  |  |  ------------------
  ------------------
  848|      0|      break;
  849|      3|    case VKSTR:
  ------------------
  |  Branch (849:5): [True: 3, False: 1.04k]
  ------------------
  850|      3|      ins = BCINS_AD(op+(BC_ISEQS-BC_ISEQV), ra, const_str(fs, e2));
  ------------------
  |  |   56|      3|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  851|      3|      break;
  852|    511|    case VKNUM:
  ------------------
  |  Branch (852:5): [True: 511, False: 532]
  ------------------
  853|    511|      ins = BCINS_AD(op+(BC_ISEQN-BC_ISEQV), ra, const_num(fs, e2));
  ------------------
  |  |   56|    511|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  854|    511|      break;
  855|    434|    default:
  ------------------
  |  Branch (855:5): [True: 434, False: 609]
  ------------------
  856|    434|      ins = BCINS_AD(op, ra, expr_toanyreg(fs, e2));
  ------------------
  |  |   56|    434|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  857|    434|      break;
  858|  1.04k|    }
  859|  6.73k|  } else {
  860|  6.73k|    uint32_t op = opr-OPR_LT+BC_ISLT;
  861|  6.73k|    BCReg ra, rd;
  862|  6.73k|    if ((op-BC_ISLT) & 1) {  /* GT -> LT, GE -> LE */
  ------------------
  |  Branch (862:9): [True: 3.39k, False: 3.34k]
  ------------------
  863|  3.39k|      e1 = e2; e2 = eret;  /* Swap operands. */
  864|  3.39k|      op = ((op-BC_ISLT)^3)+BC_ISLT;
  865|  3.39k|      expr_toval(fs, e1);
  866|  3.39k|      ra = expr_toanyreg(fs, e1);
  867|  3.39k|      rd = expr_toanyreg(fs, e2);
  868|  3.39k|    } else {
  869|  3.34k|      rd = expr_toanyreg(fs, e2);
  870|  3.34k|      ra = expr_toanyreg(fs, e1);
  871|  3.34k|    }
  872|  6.73k|    ins = BCINS_AD(op, ra, rd);
  ------------------
  |  |   56|  6.73k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  873|  6.73k|  }
  874|       |  /* Using expr_free might cause asserts if the order is wrong. */
  875|  7.77k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (875:7): [True: 7.77k, False: 0]
  |  Branch (875:29): [True: 7.77k, False: 0]
  ------------------
  876|  7.77k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (876:7): [True: 7.17k, False: 609]
  |  Branch (876:29): [True: 7.17k, False: 0]
  ------------------
  877|  7.77k|  bcemit_INS(fs, ins);
  878|  7.77k|  eret->u.s.info = bcemit_jmp(fs);
  879|  7.77k|  eret->k = VJMP;
  880|  7.77k|}
lj_parse.c:bcemit_branch_t:
  739|      9|{
  740|      9|  BCPos pc;
  741|      9|  expr_discharge(fs, e);
  742|      9|  if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (742:7): [True: 1, False: 8]
  |  Branch (742:24): [True: 1, False: 7]
  |  Branch (742:41): [True: 0, False: 7]
  ------------------
  743|      2|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|      2|#define NO_JMP		(~(BCPos)0)
  ------------------
  744|      7|  else if (e->k == VJMP)
  ------------------
  |  Branch (744:12): [True: 1, False: 6]
  ------------------
  745|      1|    invertcond(fs, e), pc = e->u.s.info;
  746|      6|  else if (e->k == VKFALSE || e->k == VKNIL)
  ------------------
  |  Branch (746:12): [True: 0, False: 6]
  |  Branch (746:31): [True: 0, False: 6]
  ------------------
  747|      0|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|      0|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|      0|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  748|      6|  else
  749|      6|    pc = bcemit_branch(fs, e, 0);
  750|      9|  jmp_append(fs, &e->f, pc);
  751|      9|  jmp_tohere(fs, e->t);
  752|      9|  e->t = NO_JMP;
  ------------------
  |  |   31|      9|#define NO_JMP		(~(BCPos)0)
  ------------------
  753|      9|}
lj_parse.c:lex_check:
 1017|  13.2k|{
 1018|  13.2k|  if (ls->tok != tok)
  ------------------
  |  Branch (1018:7): [True: 263, False: 12.9k]
  ------------------
 1019|    263|    err_token(ls, tok);
 1020|  12.9k|  lj_lex_next(ls);
 1021|  12.9k|}
lj_parse.c:jmp_append:
  330|  29.0k|{
  331|  29.0k|  if (l2 == NO_JMP) {
  ------------------
  |  |   31|  29.0k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (331:7): [True: 18.4k, False: 10.5k]
  ------------------
  332|  18.4k|    return;
  333|  18.4k|  } else if (*l1 == NO_JMP) {
  ------------------
  |  |   31|  10.5k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (333:14): [True: 9.62k, False: 962]
  ------------------
  334|  9.62k|    *l1 = l2;
  335|  9.62k|  } else {
  336|    962|    BCPos list = *l1;
  337|    962|    BCPos next;
  338|  4.98k|    while ((next = jmp_next(fs, list)) != NO_JMP)  /* Find last element. */
  ------------------
  |  |   31|  4.98k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (338:12): [True: 4.02k, False: 962]
  ------------------
  339|  4.02k|      list = next;
  340|    962|    jmp_patchins(fs, list, l2);
  341|    962|  }
  342|  29.0k|}
lj_parse.c:bcemit_jmp:
  694|  9.38k|{
  695|  9.38k|  BCPos jpc = fs->jpc;
  696|  9.38k|  BCPos j = fs->pc - 1;
  697|  9.38k|  BCIns *ip = &fs->bcbase[j].ins;
  698|  9.38k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  9.38k|#define NO_JMP		(~(BCPos)0)
  ------------------
  699|  9.38k|  if ((int32_t)j >= (int32_t)fs->lasttarget && bc_op(*ip) == BC_UCLO) {
  ------------------
  |  |   34|  9.38k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (699:7): [True: 9.38k, False: 0]
  |  Branch (699:48): [True: 0, False: 9.38k]
  ------------------
  700|      0|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|      0|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|      0|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  701|      0|    fs->lasttarget = j+1;
  702|  9.38k|  } else {
  703|  9.38k|    j = bcemit_AJ(fs, BC_JMP, fs->freereg, NO_JMP);
  ------------------
  |  |  436|  9.38k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  9.38k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  9.38k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  704|  9.38k|  }
  705|  9.38k|  jmp_append(fs, &j, jpc);
  706|  9.38k|  return j;
  707|  9.38k|}
lj_parse.c:jmp_tohere:
  360|  9.18k|{
  361|  9.18k|  fs->lasttarget = fs->pc;
  362|  9.18k|  jmp_append(fs, &fs->jpc, list);
  363|  9.18k|}
lj_parse.c:fscope_end:
 1294|    834|{
 1295|    834|  FuncScope *bl = fs->bl;
 1296|    834|  LexState *ls = fs->ls;
 1297|    834|  fs->bl = bl->prev;
 1298|    834|  var_remove(ls, bl->nactvar);
 1299|    834|  fs->freereg = fs->nactvar;
 1300|    834|  lj_assertFS(bl->nactvar == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|    834|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    834|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    834|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 834, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    834|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1301|    834|  if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|    834|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  109|    834|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|    834|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1301:7): [True: 0, False: 834]
  ------------------
 1302|      0|    bcemit_AJ(fs, BC_UCLO, bl->nactvar, 0);
  ------------------
  |  |  436|      0|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      0|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|    834|  if ((bl->flags & FSCOPE_BREAK)) {
  ------------------
  |  |  106|    834|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
  |  Branch (1303:7): [True: 0, False: 834]
  ------------------
 1304|      0|    if ((bl->flags & FSCOPE_LOOP)) {
  ------------------
  |  |  105|      0|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
  |  Branch (1304:9): [True: 0, False: 0]
  ------------------
 1305|      0|      MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  111|      0|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                    MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|      0|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 1306|      0|      ls->vtop = idx;  /* Drop break label immediately. */
 1307|      0|      gola_resolve(ls, bl, idx);
 1308|      0|    } else {  /* Need the fixup step to propagate the breaks. */
 1309|      0|      gola_fixup(ls, bl);
 1310|      0|      return;
 1311|      0|    }
 1312|      0|  }
 1313|    834|  if ((bl->flags & FSCOPE_GOLA)) {
  ------------------
  |  |  107|    834|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1313:7): [True: 10, False: 824]
  ------------------
 1314|     10|    gola_fixup(ls, bl);
 1315|     10|  }
 1316|    834|}
lj_parse.c:var_remove:
 1094|    834|{
 1095|    834|  FuncState *fs = ls->fs;
 1096|    834|  while (fs->nactvar > tolevel)
  ------------------
  |  Branch (1096:10): [True: 0, False: 834]
  ------------------
 1097|      0|    var_get(ls, fs, --fs->nactvar).endpc = fs->pc;
  ------------------
  |  | 1050|      0|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1098|    834|}
lj_parse.c:gola_new:
 1163|    135|{
 1164|    135|  FuncState *fs = ls->fs;
 1165|    135|  MSize vtop = ls->vtop;
 1166|    135|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|    135|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 38, False: 97]
  |  |  ------------------
  ------------------
 1167|     38|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|     38|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|     38|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1167:9): [True: 0, False: 38]
  ------------------
 1168|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1169|     38|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|     38|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1170|     38|  }
 1171|    135|  lj_assertFS(name == NAME_BREAK || lj_tab_getstr(fs->kt, name) != NULL,
  ------------------
  |  |  167|    135|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    135|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    270|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 135]
  |  |  |  |  |  |  |  Branch (355:5): [True: 135, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    135|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1172|    135|	      "unanchored label name");
 1173|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1174|    135|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|    135|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1175|    135|  ls->vstack[vtop].startpc = pc;
 1176|    135|  ls->vstack[vtop].slot = (uint8_t)fs->nactvar;
 1177|    135|  ls->vstack[vtop].info = info;
 1178|    135|  ls->vtop = vtop+1;
 1179|    135|  return vtop;
 1180|    135|}
lj_parse.c:gola_resolve:
 1216|     86|{
 1217|     86|  VarInfo *vg = ls->vstack + bl->vstart;
 1218|     86|  VarInfo *vl = ls->vstack + idx;
 1219|    318|  for (; vg < vl; vg++)
  ------------------
  |  Branch (1219:10): [True: 232, False: 86]
  ------------------
 1220|    232|    if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  |   70|    464|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  |  |  ------------------
  |  |  |  Branch (70:25): [True: 0, False: 232]
  |  |  ------------------
  ------------------
                  if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  | 1182|      0|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|      0|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1221|      0|      if (vg->slot < vl->slot) {
  ------------------
  |  Branch (1221:11): [True: 0, False: 0]
  ------------------
 1222|      0|	GCstr *name = strref(var_get(ls, ls->fs, vg->slot).name);
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1223|      0|	lj_assertLS((uintptr_t)name >= VARNAME__MAX, "expected goto name");
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|      0|	ls->linenumber = ls->fs->bcbase[vg->startpc].line;
 1225|      0|	lj_assertLS(strref(vg->name) != NAME_BREAK, "unexpected break");
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1226|      0|	lj_lex_error(ls, 0, LJ_ERR_XGSCOPE,
 1227|      0|		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
              		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1228|      0|      }
 1229|      0|      gola_patch(ls, vg, vl);
 1230|      0|    }
 1231|     86|}
lj_parse.c:gola_fixup:
 1235|     10|{
 1236|     10|  VarInfo *v = ls->vstack + bl->vstart;
 1237|     10|  VarInfo *ve = ls->vstack + ls->vtop;
 1238|     59|  for (; v < ve; v++) {
  ------------------
  |  Branch (1238:10): [True: 49, False: 10]
  ------------------
 1239|     49|    GCstr *name = strref(v->name);
  ------------------
  |  |  315|     49|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|     49|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1240|     49|    if (name != NULL) {  /* Only consider remaining valid gotos/labels. */
  ------------------
  |  Branch (1240:9): [True: 49, False: 0]
  ------------------
 1241|     49|      if (gola_islabel(v)) {
  ------------------
  |  | 1183|     49|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|     49|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 49, False: 0]
  |  |  ------------------
  ------------------
 1242|     49|	VarInfo *vg;
 1243|     49|	setgcrefnull(v->name);  /* Invalidate label that goes out of scope. */
  ------------------
  |  |   76|     49|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1244|    187|	for (vg = v+1; vg < ve; vg++)  /* Resolve pending backward gotos. */
  ------------------
  |  Branch (1244:17): [True: 138, False: 49]
  ------------------
 1245|    138|	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  |  315|    138|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|    138|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
              	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  | 1182|      0|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|      0|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1245:8): [True: 0, False: 138]
  ------------------
 1246|      0|	    if ((bl->flags&FSCOPE_UPVAL) && vg->slot > v->slot)
  ------------------
  |  |  108|      0|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1246:10): [True: 0, False: 0]
  |  Branch (1246:38): [True: 0, False: 0]
  ------------------
 1247|      0|	      gola_close(ls, vg);
 1248|      0|	    gola_patch(ls, vg, v);
 1249|      0|	  }
 1250|     49|      } else if (gola_isgoto(v)) {
  ------------------
  |  | 1182|      0|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|      0|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1251|      0|	if (bl->prev) {  /* Propagate goto or break to outer scope. */
  ------------------
  |  Branch (1251:6): [True: 0, False: 0]
  ------------------
 1252|      0|	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  111|      0|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  106|      0|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  107|      0|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1252:23): [True: 0, False: 0]
  ------------------
 1253|      0|	  v->slot = bl->nactvar;
 1254|      0|	  if ((bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|      0|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1254:8): [True: 0, False: 0]
  ------------------
 1255|      0|	    gola_close(ls, v);
 1256|      0|	} else {  /* No outer scope: undefined goto label or no loop. */
 1257|      0|	  ls->linenumber = ls->fs->bcbase[v->startpc].line;
 1258|      0|	  if (name == NAME_BREAK)
  ------------------
  |  |  111|      0|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
  |  Branch (1258:8): [True: 0, False: 0]
  ------------------
 1259|      0|	    lj_lex_error(ls, 0, LJ_ERR_XBREAK);
 1260|      0|	  else
 1261|      0|	    lj_lex_error(ls, 0, LJ_ERR_XLUNDEF, strdata(name));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1262|      0|	}
 1263|      0|      }
 1264|     49|    }
 1265|     49|  }
 1266|     10|}
lj_parse.c:parse_block:
 2430|     60|{
 2431|     60|  FuncState *fs = ls->fs;
 2432|     60|  FuncScope bl;
 2433|     60|  fscope_begin(fs, &bl, 0);
 2434|     60|  parse_chunk(ls);
 2435|     60|  fscope_end(fs);
 2436|     60|}
lj_parse.c:lex_match:
 1025|  13.3k|{
 1026|  13.3k|  if (!lex_opt(ls, what)) {
  ------------------
  |  Branch (1026:7): [True: 918, False: 12.4k]
  ------------------
 1027|    918|    if (line == ls->linenumber) {
  ------------------
  |  Branch (1027:9): [True: 771, False: 147]
  ------------------
 1028|    771|      err_token(ls, what);
 1029|    771|    } else {
 1030|    147|      const char *swhat = lj_lex_token2str(ls, what);
 1031|    147|      const char *swho = lj_lex_token2str(ls, who);
 1032|    147|      lj_lex_error(ls, ls->tok, LJ_ERR_XMATCH, swhat, swho, line);
 1033|    147|    }
 1034|    918|  }
 1035|  13.3k|}
lj_parse.c:parse_for:
 2600|     26|{
 2601|     26|  FuncState *fs = ls->fs;
 2602|     26|  GCstr *varname;
 2603|     26|  FuncScope bl;
 2604|     26|  fscope_begin(fs, &bl, FSCOPE_LOOP);
  ------------------
  |  |  105|     26|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2605|     26|  lj_lex_next(ls);  /* Skip 'for'. */
 2606|     26|  varname = lex_str(ls);  /* Get first variable name. */
 2607|     26|  if (ls->tok == '=')
  ------------------
  |  Branch (2607:7): [True: 5, False: 21]
  ------------------
 2608|      5|    parse_for_num(ls, varname, line);
 2609|     21|  else if (ls->tok == ',' || ls->tok == TK_in)
  ------------------
  |  Branch (2609:12): [True: 19, False: 2]
  |  Branch (2609:30): [True: 0, False: 2]
  ------------------
 2610|     17|    parse_for_iter(ls, varname);
 2611|      4|  else
 2612|      4|    err_syntax(ls, LJ_ERR_XFOR);
 2613|     22|  lex_match(ls, TK_end, TK_for, line);
 2614|     22|  fscope_end(fs);  /* Resolve break list. */
 2615|     22|}
lj_parse.c:parse_for_num:
 2487|      5|{
 2488|      5|  FuncState *fs = ls->fs;
 2489|      5|  BCReg base = fs->freereg;
 2490|      5|  FuncScope bl;
 2491|      5|  BCPos loop, loopend;
 2492|       |  /* Hidden control variables. */
 2493|      5|  var_new_fixed(ls, FORL_IDX, VARNAME_FOR_IDX);
  ------------------
  |  | 1076|      5|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2494|      5|  var_new_fixed(ls, FORL_STOP, VARNAME_FOR_STOP);
  ------------------
  |  | 1076|      5|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2495|      5|  var_new_fixed(ls, FORL_STEP, VARNAME_FOR_STEP);
  ------------------
  |  | 1076|      5|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2496|       |  /* Visible copy of index variable. */
 2497|      5|  var_new(ls, FORL_EXT, varname);
 2498|      5|  lex_check(ls, '=');
 2499|      5|  expr_next(ls);
 2500|      5|  lex_check(ls, ',');
 2501|      5|  expr_next(ls);
 2502|      5|  if (lex_opt(ls, ',')) {
  ------------------
  |  Branch (2502:7): [True: 1, False: 4]
  ------------------
 2503|      1|    expr_next(ls);
 2504|      4|  } else {
 2505|      4|    bcemit_AD(fs, BC_KSHORT, fs->freereg, 1);  /* Default step is 1. */
  ------------------
  |  |  435|      4|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      4|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2506|      4|    bcreg_reserve(fs, 1);
 2507|      4|  }
 2508|      5|  var_add(ls, 3);  /* Hidden control variables. */
 2509|      5|  lex_check(ls, TK_do);
 2510|      5|  loop = bcemit_AJ(fs, BC_FORI, base, NO_JMP);
  ------------------
  |  |  436|      5|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      5|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      5|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2511|      5|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2512|      5|  var_add(ls, 1);
 2513|      5|  bcreg_reserve(fs, 1);
 2514|      5|  parse_block(ls);
 2515|      5|  fscope_end(fs);
 2516|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2517|      5|  loopend = bcemit_AJ(fs, BC_FORL, base, NO_JMP);
  ------------------
  |  |  436|      5|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      5|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      5|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2518|      5|  fs->bcbase[loopend].line = line;  /* Fix line for control ins. */
 2519|      5|  jmp_patchins(fs, loopend, loop+1);
 2520|      5|  jmp_patchins(fs, loop, fs->pc);
 2521|      5|}
lj_parse.c:expr_next:
 2142|      9|{
 2143|      9|  ExpDesc e;
 2144|      9|  expr(ls, &e);
 2145|      9|  expr_tonextreg(ls->fs, &e);
 2146|      9|}
lj_parse.c:parse_for_iter:
 2558|     17|{
 2559|     17|  FuncState *fs = ls->fs;
 2560|     17|  ExpDesc e;
 2561|     17|  BCReg nvars = 0;
 2562|     17|  BCLine line;
 2563|     17|  BCReg base = fs->freereg + 3;
 2564|     17|  BCPos loop, loopend, exprpc = fs->pc;
 2565|     17|  FuncScope bl;
 2566|     17|  int isnext;
 2567|       |  /* Hidden control variables. */
 2568|     17|  var_new_fixed(ls, nvars++, VARNAME_FOR_GEN);
  ------------------
  |  | 1076|     17|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2569|     17|  var_new_fixed(ls, nvars++, VARNAME_FOR_STATE);
  ------------------
  |  | 1076|     17|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2570|     17|  var_new_fixed(ls, nvars++, VARNAME_FOR_CTL);
  ------------------
  |  | 1076|     17|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2571|       |  /* Visible variables returned from iterator. */
 2572|     17|  var_new(ls, nvars++, indexname);
 2573|    259|  while (lex_opt(ls, ','))
  ------------------
  |  Branch (2573:10): [True: 242, False: 17]
  ------------------
 2574|    242|    var_new(ls, nvars++, lex_str(ls));
 2575|     17|  lex_check(ls, TK_in);
 2576|     17|  line = ls->linenumber;
 2577|     17|  assign_adjust(ls, 3, expr_list(ls, &e), &e);
 2578|       |  /* The iterator needs another 3 [4] slots (func [pc] | state ctl). */
 2579|     17|  bcreg_bump(fs, 3+ls->fr2);
 2580|     17|  isnext = (nvars <= 5 && fs->pc > exprpc && predict_next(ls, fs, exprpc));
  ------------------
  |  Branch (2580:13): [True: 0, False: 17]
  |  Branch (2580:27): [True: 0, False: 0]
  |  Branch (2580:46): [True: 0, False: 0]
  ------------------
 2581|     17|  var_add(ls, 3);  /* Hidden control variables. */
 2582|     17|  lex_check(ls, TK_do);
 2583|     17|  loop = bcemit_AJ(fs, isnext ? BC_ISNEXT : BC_JMP, base, NO_JMP);
  ------------------
  |  |  436|     17|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|     17|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     34|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (56:13): [True: 0, False: 17]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2584|     17|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2585|     17|  var_add(ls, nvars-3);
 2586|     17|  bcreg_reserve(fs, nvars-3);
 2587|     17|  parse_block(ls);
 2588|     17|  fscope_end(fs);
 2589|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2590|     17|  jmp_patchins(fs, loop, fs->pc);
 2591|     17|  bcemit_ABC(fs, isnext ? BC_ITERN : BC_ITERC, base, nvars-3+1, 2+1);
  ------------------
  |  |  434|     17|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|     34|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (54:13): [True: 0, False: 17]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2592|     17|  loopend = bcemit_AJ(fs, BC_ITERL, base, NO_JMP);
  ------------------
  |  |  436|     17|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|     17|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     17|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2593|     17|  fs->bcbase[loopend-1].line = line;  /* Fix line for control ins. */
 2594|     17|  fs->bcbase[loopend].line = line;
 2595|     17|  jmp_patchins(fs, loopend, loop+1);
 2596|     17|}
lj_parse.c:assign_adjust:
 2193|    408|{
 2194|    408|  FuncState *fs = ls->fs;
 2195|    408|  int32_t extra = (int32_t)nvars - (int32_t)nexps;
 2196|    408|  if (e->k == VCALL) {
  ------------------
  |  Branch (2196:7): [True: 55, False: 353]
  ------------------
 2197|     55|    extra++;  /* Compensate for the VCALL itself. */
 2198|     55|    if (extra < 0) extra = 0;
  ------------------
  |  Branch (2198:9): [True: 12, False: 43]
  ------------------
 2199|     55|    setbc_b(bcptr(fs, e), extra+1);  /* Fixup call results. */
  ------------------
  |  |   46|     55|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|     55|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     55|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2200|     55|    if (extra > 1) bcreg_reserve(fs, (BCReg)extra-1);
  ------------------
  |  Branch (2200:9): [True: 42, False: 13]
  ------------------
 2201|    353|  } else {
 2202|    353|    if (e->k != VVOID)
  ------------------
  |  Branch (2202:9): [True: 353, False: 0]
  ------------------
 2203|    353|      expr_tonextreg(fs, e);  /* Close last expression. */
 2204|    353|    if (extra > 0) {  /* Leftover LHS are set to nil. */
  ------------------
  |  Branch (2204:9): [True: 283, False: 70]
  ------------------
 2205|    283|      BCReg reg = fs->freereg;
 2206|    283|      bcreg_reserve(fs, (BCReg)extra);
 2207|    283|      bcemit_nil(fs, reg, (BCReg)extra);
 2208|    283|    }
 2209|    353|  }
 2210|    408|  if (nexps > nvars)
  ------------------
  |  Branch (2210:7): [True: 83, False: 325]
  ------------------
 2211|     83|    ls->fs->freereg -= nexps - nvars;  /* Drop leftover regs. */
 2212|    408|}
lj_parse.c:parse_repeat:
 2460|      5|{
 2461|      5|  FuncState *fs = ls->fs;
 2462|      5|  BCPos loop = fs->lasttarget = fs->pc;
 2463|      5|  BCPos condexit;
 2464|      5|  FuncScope bl1, bl2;
 2465|      5|  fscope_begin(fs, &bl1, FSCOPE_LOOP);  /* Breakable loop scope. */
  ------------------
  |  |  105|      5|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2466|      5|  fscope_begin(fs, &bl2, 0);  /* Inner scope. */
 2467|      5|  lj_lex_next(ls);  /* Skip 'repeat'. */
 2468|      5|  bcemit_AD(fs, BC_LOOP, fs->nactvar, 0);
  ------------------
  |  |  435|      5|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      5|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2469|      5|  parse_chunk(ls);
 2470|      5|  lex_match(ls, TK_until, TK_repeat, line);
 2471|      5|  condexit = expr_cond(ls);  /* Parse condition (still inside inner scope). */
 2472|      5|  if (!(bl2.flags & FSCOPE_UPVAL)) {  /* No upvalues? Just end inner scope. */
  ------------------
  |  |  108|      5|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (2472:7): [True: 0, False: 5]
  ------------------
 2473|      0|    fscope_end(fs);
 2474|      5|  } else {  /* Otherwise generate: cond: UCLO+JMP out, !cond: UCLO+JMP loop. */
 2475|      5|    parse_break(ls);  /* Break from loop and close upvalues. */
 2476|      5|    jmp_tohere(fs, condexit);
 2477|      5|    fscope_end(fs);  /* End inner scope and close upvalues. */
 2478|      5|    condexit = bcemit_jmp(fs);
 2479|      5|  }
 2480|      5|  jmp_patch(fs, condexit, loop);  /* Jump backwards if !cond. */
 2481|      5|  jmp_patchins(fs, loop, fs->pc);
 2482|      5|  fscope_end(fs);  /* End loop scope. */
 2483|      5|}
lj_parse.c:parse_label:
 2396|    144|{
 2397|    144|  FuncState *fs = ls->fs;
 2398|    144|  GCstr *name;
 2399|    144|  MSize idx;
 2400|    144|  fs->lasttarget = fs->pc;
 2401|    144|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|    144|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2402|    144|  lj_lex_next(ls);  /* Skip '::'. */
 2403|    144|  name = lex_str(ls);
 2404|    144|  if (gola_findlabel(ls, name))
  ------------------
  |  Branch (2404:7): [True: 3, False: 141]
  ------------------
 2405|      3|    lj_lex_error(ls, 0, LJ_ERR_XLDUP, strdata(name));
  ------------------
  |  |  316|      3|#define strdata(s)	((const char *)((s)+1))
  ------------------
 2406|    141|  idx = gola_new(ls, name, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|    141|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 2407|    141|  lex_check(ls, TK_label);
 2408|       |  /* Recursively parse trailing statements: labels and ';' (Lua 5.2 only). */
 2409|    193|  for (;;) {
 2410|    193|    if (ls->tok == TK_label) {
  ------------------
  |  Branch (2410:9): [True: 107, False: 86]
  ------------------
 2411|    107|      synlevel_begin(ls);
 2412|    107|      parse_label(ls);
 2413|    107|      synlevel_end(ls);
  ------------------
  |  | 2052|    107|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2414|    107|    } else if (LJ_52 && ls->tok == ';') {
  ------------------
  |  |  697|    172|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2414:25): [True: 0, False: 0]
  ------------------
 2415|      0|      lj_lex_next(ls);
 2416|     86|    } else {
 2417|     86|      break;
 2418|     86|    }
 2419|    193|  }
 2420|       |  /* Trailing label is considered to be outside of scope. */
 2421|    141|  if (parse_isend(ls->tok) && ls->tok != TK_until)
  ------------------
  |  Branch (2421:7): [True: 49, False: 92]
  |  Branch (2421:31): [True: 49, False: 0]
  ------------------
 2422|     49|    ls->vstack[idx].slot = fs->bl->nactvar;
 2423|    141|  gola_resolve(ls, fs->bl, idx);
 2424|    141|}
lj_parse.c:gola_findlabel:
 1270|    138|{
 1271|    138|  VarInfo *v = ls->vstack + ls->fs->bl->vstart;
 1272|    138|  VarInfo *ve = ls->vstack + ls->vtop;
 1273|    480|  for (; v < ve; v++)
  ------------------
  |  Branch (1273:10): [True: 345, False: 135]
  ------------------
 1274|    345|    if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  |  315|    345|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|    345|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                  if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  | 1183|      3|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|      3|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1274:9): [True: 3, False: 342]
  ------------------
 1275|      3|      return v;
 1276|    135|  return NULL;
 1277|    138|}
lj_parse.c:parse_call_assign:
 2253|  5.81k|{
 2254|  5.81k|  FuncState *fs = ls->fs;
 2255|  5.81k|  LHSVarList vl;
 2256|  5.81k|  expr_primary(ls, &vl.v);
 2257|  5.81k|  if (vl.v.k == VCALL) {  /* Function call statement. */
  ------------------
  |  Branch (2257:7): [True: 2.14k, False: 3.67k]
  ------------------
 2258|  2.14k|    setbc_b(bcptr(fs, &vl.v), 1);  /* No results. */
  ------------------
  |  |   46|  2.14k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  2.14k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  2.14k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2259|  3.67k|  } else {  /* Start of an assignment. */
 2260|  3.67k|    vl.prev = NULL;
 2261|  3.67k|    parse_assignment(ls, &vl, 1);
 2262|  3.67k|  }
 2263|  5.81k|}
lj_parse.c:parse_assignment:
 2216|  2.61k|{
 2217|  2.61k|  ExpDesc e;
 2218|  2.61k|  checkcond(ls, VLOCAL <= lh->v.k && lh->v.k <= VINDEXED, LJ_ERR_XSYNTAX);
  ------------------
  |  |  194|  5.21k|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:39): [True: 2.60k, False: 11]
  |  |  |  Branch (194:39): [True: 2.59k, False: 9]
  |  |  ------------------
  ------------------
 2219|  2.59k|  if (lex_opt(ls, ',')) {  /* Collect LHS list and recurse upwards. */
  ------------------
  |  Branch (2219:7): [True: 685, False: 1.90k]
  ------------------
 2220|    685|    LHSVarList vl;
 2221|    685|    vl.prev = lh;
 2222|    685|    expr_primary(ls, &vl.v);
 2223|    685|    if (vl.v.k == VLOCAL)
  ------------------
  |  Branch (2223:9): [True: 0, False: 685]
  ------------------
 2224|      0|      assign_hazard(ls, lh, &vl.v);
 2225|    685|    checklimit(ls->fs, ls->level + nvars, LJ_MAX_XLEVEL, "variable names");
  ------------------
  |  |  192|    685|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 685]
  |  |  ------------------
  ------------------
 2226|    685|    parse_assignment(ls, &vl, nvars+1);
 2227|  1.90k|  } else {  /* Parse RHS. */
 2228|  1.90k|    BCReg nexps;
 2229|  1.90k|    lex_check(ls, '=');
 2230|  1.90k|    nexps = expr_list(ls, &e);
 2231|  1.90k|    if (nexps == nvars) {
  ------------------
  |  Branch (2231:9): [True: 1.19k, False: 711]
  ------------------
 2232|  1.19k|      if (e.k == VCALL) {
  ------------------
  |  Branch (2232:11): [True: 79, False: 1.11k]
  ------------------
 2233|     79|	if (bc_op(*bcptr(ls->fs, &e)) == BC_VARG) {  /* Vararg assignment. */
  ------------------
  |  |   34|     79|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2233:6): [True: 28, False: 51]
  ------------------
 2234|     28|	  ls->fs->freereg--;
 2235|     28|	  e.k = VRELOCABLE;
 2236|     51|	} else {  /* Multiple call results. */
 2237|     51|	  e.u.s.info = e.u.s.aux;  /* Base of call is not relocatable. */
 2238|     51|	  e.k = VNONRELOC;
 2239|     51|	}
 2240|     79|      }
 2241|  1.19k|      bcemit_store(ls->fs, &lh->v, &e);
 2242|  1.19k|      return;
 2243|  1.19k|    }
 2244|    711|    assign_adjust(ls, nvars, nexps, &e);
 2245|    711|  }
 2246|       |  /* Assign RHS to LHS and recurse downwards. */
 2247|  1.39k|  expr_init(&e, VNONRELOC, ls->fs->freereg-1);
 2248|  1.39k|  bcemit_store(ls->fs, &lh->v, &e);
 2249|  1.39k|}
lj_parse.c:lex_opt:
 1007|  59.6k|{
 1008|  59.6k|  if (ls->tok == tok) {
  ------------------
  |  Branch (1008:7): [True: 26.5k, False: 33.0k]
  ------------------
 1009|  26.5k|    lj_lex_next(ls);
 1010|  26.5k|    return 1;
 1011|  26.5k|  }
 1012|  33.0k|  return 0;
 1013|  59.6k|}
lj_parse.c:err_token:
  180|  1.05k|{
  181|  1.05k|  lj_lex_error(ls, ls->tok, LJ_ERR_XTOKEN, lj_lex_token2str(ls, tok));
  182|  1.05k|}
lj_parse.c:fs_finish:
 1577|    829|{
 1578|    829|  lua_State *L = ls->L;
 1579|    829|  FuncState *fs = ls->fs;
 1580|    829|  BCLine numline = line - fs->linedefined;
 1581|    829|  size_t sizept, ofsk, ofsuv, ofsli, ofsdbg, ofsvar;
 1582|    829|  GCproto *pt;
 1583|       |
 1584|       |  /* Apply final fixups. */
 1585|    829|  fs_fixup_ret(fs);
 1586|       |
 1587|       |  /* Calculate total size of prototype including all colocated arrays. */
 1588|    829|  sizept = sizeof(GCproto) + fs->pc*sizeof(BCIns) + fs->nkgc*sizeof(GCRef);
 1589|    829|  sizept = (sizept + sizeof(TValue)-1) & ~(sizeof(TValue)-1);
 1590|    829|  ofsk = sizept; sizept += fs->nkn*sizeof(TValue);
 1591|    829|  ofsuv = sizept; sizept += ((fs->nuv+1)&~1)*2;
 1592|    829|  ofsli = sizept; sizept += fs_prep_line(fs, numline);
 1593|    829|  ofsdbg = sizept; sizept += fs_prep_var(ls, fs, &ofsvar);
 1594|       |
 1595|       |  /* Allocate prototype and initialize its fields. */
 1596|    829|  pt = (GCproto *)lj_mem_newgco(L, (MSize)sizept);
 1597|    829|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|    829|#define LJ_TPROTO		(~7u)
  ------------------
 1598|    829|  pt->sizept = (MSize)sizept;
 1599|    829|  pt->trace = 0;
 1600|    829|  pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  405|    829|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
                pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  406|    829|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1601|    829|  pt->numparams = fs->numparams;
 1602|    829|  pt->framesize = fs->framesize;
 1603|    829|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|    829|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1604|       |
 1605|       |  /* Close potentially uninitialized gap between bc and kgc. */
 1606|    829|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(fs->nkgc+1)) = 0;
 1607|    829|  fs_fixup_bc(fs, pt, (BCIns *)((char *)pt + sizeof(GCproto)), fs->pc);
 1608|    829|  fs_fixup_k(fs, pt, (void *)((char *)pt + ofsk));
 1609|    829|  fs_fixup_uv1(fs, pt, (uint16_t *)((char *)pt + ofsuv));
 1610|    829|  fs_fixup_line(fs, pt, (void *)((char *)pt + ofsli), numline);
 1611|    829|  fs_fixup_var(ls, pt, (uint8_t *)((char *)pt + ofsdbg), ofsvar);
 1612|       |
 1613|    829|  lj_vmevent_send(L, BC,
  ------------------
  |  |   39|    829|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|    829|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    829|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|    829|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 829]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
 1614|    829|    setprotoV(L, L->top++, pt);
 1615|    829|  );
 1616|       |
 1617|    829|  L->top--;  /* Pop table of constants. */
 1618|    829|  ls->vtop = fs->vbase;  /* Reset variable stack. */
 1619|    829|  ls->fs = fs->prev;
 1620|    829|  lj_assertL(ls->fs != NULL || ls->tok == TK_eof, "bad parser state");
  ------------------
  |  |  365|    829|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.65k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 829]
  |  |  |  |  |  Branch (355:5): [True: 829, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1621|    829|  return pt;
 1622|    829|}
lj_parse.c:fs_fixup_ret:
 1539|    829|{
 1540|    829|  BCPos lastpc = fs->pc;
 1541|    829|  if (lastpc <= fs->lasttarget || !bcopisret(bc_op(fs->bcbase[lastpc-1].ins))) {
  ------------------
  |  |   34|    819|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1541:7): [True: 10, False: 819]
  |  Branch (1541:35): [True: 819, False: 0]
  ------------------
 1542|    829|    if ((fs->bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|    829|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1542:9): [True: 0, False: 829]
  ------------------
 1543|      0|      bcemit_AJ(fs, BC_UCLO, 0, 0);
  ------------------
  |  |  436|      0|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|      0|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1544|    829|    bcemit_AD(fs, BC_RET0, 0, 1);  /* Need final return. */
  ------------------
  |  |  435|    829|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    829|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1545|    829|  }
 1546|    829|  fs->bl->flags |= FSCOPE_NOCLOSE;  /* Handled above. */
  ------------------
  |  |  109|    829|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
 1547|    829|  fscope_end(fs);
 1548|    829|  lj_assertFS(fs->bl == NULL, "bad scope nesting");
  ------------------
  |  |  167|    829|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    829|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    829|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 829, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    829|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1549|       |  /* May need to fixup returns encoded before first function was created. */
 1550|    829|  if (fs->flags & PROTO_FIXUP_RETURN) {
  ------------------
  |  |  406|    829|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
  |  Branch (1550:7): [True: 0, False: 829]
  ------------------
 1551|      0|    BCPos pc;
 1552|      0|    for (pc = 1; pc < lastpc; pc++) {
  ------------------
  |  Branch (1552:18): [True: 0, False: 0]
  ------------------
 1553|      0|      BCIns ins = fs->bcbase[pc].ins;
 1554|      0|      BCPos offset;
 1555|      0|      switch (bc_op(ins)) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 1556|      0|      case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1556:7): [True: 0, False: 0]
  |  Branch (1556:23): [True: 0, False: 0]
  ------------------
 1557|      0|      case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1557:7): [True: 0, False: 0]
  |  Branch (1557:21): [True: 0, False: 0]
  |  Branch (1557:34): [True: 0, False: 0]
  |  Branch (1557:48): [True: 0, False: 0]
  ------------------
 1558|      0|	offset = bcemit_INS(fs, ins);  /* Copy original instruction. */
 1559|      0|	fs->bcbase[offset].line = fs->bcbase[pc].line;
 1560|      0|	offset = offset-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|      0|#define BCBIAS_J	0x8000
  ------------------
 1561|      0|	if (offset > BCMAX_D)
  ------------------
  |  |   28|      0|#define BCMAX_D		0xffff
  ------------------
  |  Branch (1561:6): [True: 0, False: 0]
  ------------------
 1562|      0|	  err_syntax(fs->ls, LJ_ERR_XFIXUP);
 1563|       |	/* Replace with UCLO plus branch. */
 1564|      0|	fs->bcbase[pc].ins = BCINS_AD(BC_UCLO, 0, offset);
  ------------------
  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1565|      0|	break;
 1566|      0|      case BC_FNEW:
  ------------------
  |  Branch (1566:7): [True: 0, False: 0]
  ------------------
 1567|      0|	return;  /* We're done. */
 1568|      0|      default:
  ------------------
  |  Branch (1568:7): [True: 0, False: 0]
  ------------------
 1569|      0|	break;
 1570|      0|      }
 1571|      0|    }
 1572|      0|  }
 1573|    829|}
lj_parse.c:bcopisret:
 1527|    819|{
 1528|    819|  switch (op) {
 1529|      0|  case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1529:3): [True: 0, False: 819]
  |  Branch (1529:19): [True: 0, False: 819]
  ------------------
 1530|      0|  case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1530:3): [True: 0, False: 819]
  |  Branch (1530:17): [True: 0, False: 819]
  |  Branch (1530:30): [True: 0, False: 819]
  |  Branch (1530:44): [True: 0, False: 819]
  ------------------
 1531|      0|    return 1;
 1532|    819|  default:
  ------------------
  |  Branch (1532:3): [True: 819, False: 0]
  ------------------
 1533|    819|    return 0;
 1534|    819|  }
 1535|    819|}
lj_parse.c:fs_prep_line:
 1426|    829|{
 1427|    829|  return (fs->pc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (1427:25): [True: 819, False: 10]
  |  Branch (1427:45): [True: 10, False: 0]
  ------------------
 1428|    829|}
lj_parse.c:fs_prep_var:
 1466|    829|{
 1467|    829|  VarInfo *vs =ls->vstack, *ve;
 1468|    829|  MSize i, n;
 1469|    829|  BCPos lastpc;
 1470|    829|  lj_buf_reset(&ls->sb);  /* Copy to temp. string buffer. */
 1471|       |  /* Store upvalue names. */
 1472|    829|  for (i = 0, n = fs->nuv; i < n; i++) {
  ------------------
  |  Branch (1472:28): [True: 0, False: 829]
  ------------------
 1473|      0|    GCstr *s = strref(vs[fs->uvmap[i]].name);
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1474|      0|    MSize len = s->len+1;
 1475|      0|    char *p = lj_buf_more(&ls->sb, len);
 1476|      0|    p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1477|      0|    ls->sb.w = p;
 1478|      0|  }
 1479|    829|  *ofsvar = sbuflen(&ls->sb);
  ------------------
  |  |   36|    829|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1480|    829|  lastpc = 0;
 1481|       |  /* Store local variable names and compressed ranges. */
 1482|    878|  for (ve = vs + ls->vtop, vs += fs->vbase; vs < ve; vs++) {
  ------------------
  |  Branch (1482:45): [True: 49, False: 829]
  ------------------
 1483|     49|    if (!gola_isgotolabel(vs)) {
  ------------------
  |  | 1184|     49|#define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  119|     49|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |               #define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  120|     49|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  ------------------
  |  Branch (1483:9): [True: 0, False: 49]
  ------------------
 1484|      0|      GCstr *s = strref(vs->name);
  ------------------
  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1485|      0|      BCPos startpc;
 1486|      0|      char *p;
 1487|      0|      if ((uintptr_t)s < VARNAME__MAX) {
  ------------------
  |  Branch (1487:11): [True: 0, False: 0]
  ------------------
 1488|      0|	p = lj_buf_more(&ls->sb, 1 + 2*5);
 1489|      0|	*p++ = (char)(uintptr_t)s;
 1490|      0|      } else {
 1491|      0|	MSize len = s->len+1;
 1492|      0|	p = lj_buf_more(&ls->sb, len + 2*5);
 1493|      0|	p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1494|      0|      }
 1495|      0|      startpc = vs->startpc;
 1496|      0|      p = lj_strfmt_wuleb128(p, startpc-lastpc);
 1497|      0|      p = lj_strfmt_wuleb128(p, vs->endpc-startpc);
 1498|      0|      ls->sb.w = p;
 1499|      0|      lastpc = startpc;
 1500|      0|    }
 1501|     49|  }
 1502|    829|  lj_buf_putb(&ls->sb, '\0');  /* Terminator for varinfo. */
 1503|    829|  return sbuflen(&ls->sb);
  ------------------
  |  |   36|    829|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1504|    829|}
lj_parse.c:fs_fixup_bc:
 1332|    829|{
 1333|    829|  BCInsLine *base = fs->bcbase;
 1334|    829|  MSize i;
 1335|    829|  BCIns op;
 1336|    829|  pt->sizebc = n;
 1337|    829|  if (fs->ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|    829|#define LJ_FR2			1
  ------------------
  |  Branch (1337:7): [True: 0, False: 829]
  ------------------
 1338|    829|  else if ((fs->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|    829|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (1338:12): [True: 829, False: 0]
  ------------------
 1339|      0|  else op = BC_FUNCF;
 1340|    829|  bc[0] = BCINS_AD(op, fs->framesize, 0);
  ------------------
  |  |   56|    829|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1341|  47.8k|  for (i = 1; i < n; i++)
  ------------------
  |  Branch (1341:15): [True: 47.0k, False: 829]
  ------------------
 1342|  47.0k|    bc[i] = base[i].ins;
 1343|    829|}
lj_parse.c:fs_fixup_k:
 1364|    829|{
 1365|    829|  GCtab *kt;
 1366|    829|  TValue *array;
 1367|    829|  Node *node;
 1368|    829|  MSize i, hmask;
 1369|    829|  checklimitgt(fs, fs->nkn, BCMAX_D+1, "constants");
  ------------------
  |  |  193|    829|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 829]
  |  |  ------------------
  ------------------
 1370|    829|  checklimitgt(fs, fs->nkgc, BCMAX_D+1, "constants");
  ------------------
  |  |  193|    829|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 829]
  |  |  ------------------
  ------------------
 1371|    829|  setmref(pt->k, kptr);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1372|    829|  pt->sizekn = fs->nkn;
 1373|    829|  pt->sizekgc = fs->nkgc;
 1374|    829|  kt = fs->kt;
 1375|    829|  array = tvref(kt->array);
  ------------------
  |  |  217|    829|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    829|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1376|    990|  for (i = 0; i < kt->asize; i++)
  ------------------
  |  Branch (1376:15): [True: 161, False: 829]
  ------------------
 1377|    161|    if (tvhaskslot(&array[i])) {
  ------------------
  |  |  201|    161|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 60, False: 101]
  |  |  ------------------
  ------------------
 1378|     60|      TValue *tv = &((TValue *)kptr)[tvkslot(&array[i])];
  ------------------
  |  |  202|     60|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1379|     60|      if (LJ_DUALNUM)
  ------------------
  |  |  549|     60|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1380|      0|	setintV(tv, (int32_t)i);
 1381|     60|      else
 1382|     60|	setnumV(tv, (lua_Number)i);
  ------------------
  |  |  945|     60|#define setnumV(o, x)		((o)->n = (x))
  ------------------
 1383|     60|    }
 1384|    829|  node = noderef(kt->node);
  ------------------
  |  |  515|    829|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    829|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1385|    829|  hmask = kt->hmask;
 1386|  8.78k|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1386:15): [True: 7.95k, False: 829]
  ------------------
 1387|  7.95k|    Node *n = &node[i];
 1388|  7.95k|    if (tvhaskslot(&n->val)) {
  ------------------
  |  |  201|  7.95k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 5.58k, False: 2.37k]
  |  |  ------------------
  ------------------
 1389|  5.58k|      ptrdiff_t kidx = (ptrdiff_t)tvkslot(&n->val);
  ------------------
  |  |  202|  5.58k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1390|  5.58k|      lj_assertFS(!tvisint(&n->key), "unexpected integer key");
  ------------------
  |  |  167|  5.58k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  5.58k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  5.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.58k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|  5.58k|      if (tvisnum(&n->key)) {
  ------------------
  |  |  804|  5.58k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  5.58k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  5.58k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  5.58k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 1.57k, False: 4.00k]
  |  |  ------------------
  ------------------
 1392|  1.57k|	TValue *tv = &((TValue *)kptr)[kidx];
 1393|  1.57k|	if (LJ_DUALNUM) {
  ------------------
  |  |  549|  1.57k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1394|      0|	  lua_Number nn = numV(&n->key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|	  int32_t k = lj_num2int(nn);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1396|      0|	  lj_assertFS(!tvismzero(&n->key), "unexpected -0 key");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1397|      0|	  if ((lua_Number)k == nn)
  ------------------
  |  Branch (1397:8): [True: 0, False: 0]
  ------------------
 1398|      0|	    setintV(tv, k);
 1399|      0|	  else
 1400|      0|	    *tv = n->key;
 1401|  1.57k|	} else {
 1402|  1.57k|	  *tv = n->key;
 1403|  1.57k|	}
 1404|  4.00k|      } else {
 1405|  4.00k|	GCobj *o = gcV(&n->key);
  ------------------
  |  |  858|  4.00k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|  4.00k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.00k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.00k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.00k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.00k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1406|  4.00k|	setgcref(((GCRef *)kptr)[~kidx], o);
  ------------------
  |  |   72|  4.00k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1407|  4.00k|	lj_gc_objbarrier(fs->L, pt, o);
  ------------------
  |  |  108|  4.00k|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|  8.01k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.00k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.00k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.00k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.43k, False: 571]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|  3.43k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  3.43k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 3.43k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|  4.00k|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1408|  4.00k|	if (tvisproto(&n->key))
  ------------------
  |  |  798|  4.00k|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|  4.00k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|  4.00k|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 4.00k]
  |  |  ------------------
  ------------------
 1409|      0|	  fs_fixup_uv2(fs, gco2pt(o));
  ------------------
  |  |  768|      0|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|  4.00k|      }
 1411|  5.58k|    }
 1412|  7.95k|  }
 1413|    829|}
lj_parse.c:fs_fixup_uv1:
 1417|    829|{
 1418|    829|  setmref(pt->uv, uv);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1419|    829|  pt->sizeuv = fs->nuv;
 1420|    829|  memcpy(uv, fs->uvtmp, fs->nuv*sizeof(VarIndex));
 1421|    829|}
lj_parse.c:fs_fixup_line:
 1433|    829|{
 1434|    829|  BCInsLine *base = fs->bcbase + 1;
 1435|    829|  BCLine first = fs->linedefined;
 1436|    829|  MSize i = 0, n = fs->pc-1;
 1437|    829|  pt->firstline = fs->linedefined;
 1438|    829|  pt->numline = numline;
 1439|    829|  setmref(pt->lineinfo, lineinfo);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1440|    829|  if (LJ_LIKELY(numline < 256)) {
  ------------------
  |  |  145|    829|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 819, False: 10]
  |  |  ------------------
  ------------------
 1441|    819|    uint8_t *li = (uint8_t *)lineinfo;
 1442|  46.2k|    do {
 1443|  46.2k|      BCLine delta = base[i].line - first;
 1444|  46.2k|      lj_assertFS(delta >= 0 && delta < 256, "bad line delta");
  ------------------
  |  |  167|  46.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  46.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  92.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 46.2k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 46.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  46.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|  46.2k|      li[i] = (uint8_t)delta;
 1446|  46.2k|    } while (++i < n);
  ------------------
  |  Branch (1446:14): [True: 45.4k, False: 819]
  ------------------
 1447|    819|  } else if (LJ_LIKELY(numline < 65536)) {
  ------------------
  |  |  145|     10|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 10, False: 0]
  |  |  ------------------
  ------------------
 1448|     10|    uint16_t *li = (uint16_t *)lineinfo;
 1449|    793|    do {
 1450|    793|      BCLine delta = base[i].line - first;
 1451|    793|      lj_assertFS(delta >= 0 && delta < 65536, "bad line delta");
  ------------------
  |  |  167|    793|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|    793|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.58k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 793, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 793, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    793|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1452|    793|      li[i] = (uint16_t)delta;
 1453|    793|    } while (++i < n);
  ------------------
  |  Branch (1453:14): [True: 783, False: 10]
  ------------------
 1454|     10|  } else {
 1455|      0|    uint32_t *li = (uint32_t *)lineinfo;
 1456|      0|    do {
 1457|      0|      BCLine delta = base[i].line - first;
 1458|      0|      lj_assertFS(delta >= 0, "bad line delta");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1459|      0|      li[i] = (uint32_t)delta;
 1460|      0|    } while (++i < n);
  ------------------
  |  Branch (1460:14): [True: 0, False: 0]
  ------------------
 1461|      0|  }
 1462|    829|}
lj_parse.c:fs_fixup_var:
 1508|    829|{
 1509|    829|  setmref(pt->uvinfo, p);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1510|    829|  setmref(pt->varinfo, (char *)p + ofsvar);
  ------------------
  |  |   39|    829|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1511|    829|  memcpy(p, ls->sb.b, sbuflen(&ls->sb));  /* Copy from temp. buffer. */
  ------------------
  |  |   36|    829|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1512|    829|}

lj_prng_u64:
   48|  14.7k|{
   49|  14.7k|  uint64_t z, r = 0;
   50|  14.7k|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|  14.7k|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|  14.7k|  z = rs->u[i]; \
  |  |  |  |   37|  14.7k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  14.7k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|  14.7k|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|  14.7k|  z = rs->u[i]; \
  |  |  |  |   37|  14.7k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  14.7k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|  14.7k|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|  14.7k|  z = rs->u[i]; \
  |  |  |  |   37|  14.7k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  14.7k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|  14.7k|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|  14.7k|  z = rs->u[i]; \
  |  |  |  |   37|  14.7k|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  14.7k|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|  14.7k|  return r;
   52|  14.7k|}
lj_prng_seed_secure:
  167|  3.10k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  3.10k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  3.10k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 3.10k, False: 0]
  ------------------
  211|  3.10k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  3.10k|ok:
  253|  3.10k|  lj_prng_condition(rs);
  254|  3.10k|  (void)lj_prng_u64(rs);
  255|  3.10k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  3.10k|{
   66|  3.10k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 3.10k]
  ------------------
   67|  3.10k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 3.10k]
  ------------------
   68|  3.10k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 3.10k]
  ------------------
   69|  3.10k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 3.10k]
  ------------------
   70|  3.10k|}

lib_math.c:lj_prng_seed_fixed:
   17|  3.10k|{
   18|  3.10k|  rs->u[0] = U64x(a0d27757,0a345b8c);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   19|  3.10k|  rs->u[1] = U64x(764a296c,5d4aa64f);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   20|  3.10k|  rs->u[2] = U64x(51220704,070adeaa);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   21|  3.10k|  rs->u[3] = U64x(2a2717b5,a7b7b927);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   22|  3.10k|}

luaJIT_profile_stop:
  341|  3.10k|{
  342|  3.10k|  ProfileState *ps = &profile_state;
  343|  3.10k|  global_State *g = ps->g;
  344|  3.10k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 3.10k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  677|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  3.10k|}

lj_state_relimitstack:
   85|  2.91k|{
   86|  2.91k|  if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   39|  5.82k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  2.91k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   92|  2.91k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  2.91k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  2.91k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   92|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (86:7): [True: 0, False: 2.91k]
  |  Branch (86:40): [True: 0, False: 0]
  ------------------
   87|      0|    resizestack(L, LJ_STACK_MAX);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   92|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
   88|  2.91k|}
lj_state_shrinkstack:
   92|    244|{
   93|    244|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|    244|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|    244|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   92|    244|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|    244|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|    244|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 0, False: 244]
  ------------------
   94|      0|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|    244|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 244, False: 0]
  ------------------
   96|    244|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|    244|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|    244|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|    244|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|    244|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|    244|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 0, False: 244]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|    244|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 0, False: 0]
  |  Branch (98:41): [True: 0, False: 0]
  ------------------
   99|      0|    resizestack(L, L->stacksize >> 1);
  100|    244|}
lj_state_growstack:
  104|     16|{
  105|     16|  MSize n = L->stacksize + need;
  106|     16|  if (LJ_LIKELY(n < LJ_STACK_MAX)) {  /* The stack can grow as requested. */
  ------------------
  |  |  145|     16|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  107|     16|    if (n < 2 * L->stacksize) {  /* Try to double the size. */
  ------------------
  |  Branch (107:9): [True: 13, False: 3]
  ------------------
  108|     13|      n = 2 * L->stacksize;
  109|     13|      if (n > LJ_STACK_MAX)
  ------------------
  |  |   37|     13|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   92|     13|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (109:11): [True: 0, False: 13]
  ------------------
  110|      0|	n = LJ_STACK_MAX;
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   92|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  111|     13|    }
  112|     16|    resizestack(L, n);
  113|     16|  } else {  /* Request would overflow. Raise a stack overflow error. */
  114|      0|    if (LJ_HASJIT) {
  ------------------
  |  |  578|      0|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  115|      0|      TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  116|      0|      if (base) L->base = base;
  ------------------
  |  Branch (116:11): [True: 0, False: 0]
  ------------------
  117|      0|    }
  118|      0|    if (curr_funcisL(L)) {
  ------------------
  |  |  716|      0|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  119|      0|      L->top = curr_topL(L);
  ------------------
  |  |  718|      0|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|      0|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|      0|      if (L->top > tvref(L->maxstack)) {
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (120:11): [True: 0, False: 0]
  ------------------
  121|       |	/* The current Lua frame violates the stack, so replace it with a
  122|       |	** dummy. This can happen when BC_IFUNCF is trying to grow the stack.
  123|       |	*/
  124|      0|	L->top = L->base;
  125|      0|	setframe_gc(L->base - 1 - LJ_FR2, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|      0|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  126|      0|      }
  127|      0|    }
  128|      0|    if (L->stacksize <= LJ_STACK_MAXEX) {
  ------------------
  |  |   39|      0|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   92|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|      0|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (128:9): [True: 0, False: 0]
  ------------------
  129|       |      /* An error handler might want to inspect the stack overflow error, but
  130|       |      ** will need some stack space to run in. We give it a stack size beyond
  131|       |      ** the normal limit in order to do so, then rely on lj_state_relimitstack
  132|       |      ** calls during unwinding to bring us back to a convential stack size.
  133|       |      ** The + 1 is space for the error message, and 2 * LUA_MINSTACK is for
  134|       |      ** the lj_state_checkstack() call in lj_err_run().
  135|       |      */
  136|      0|      resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   37|      0|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   92|      0|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
                    resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   88|      0|#define LUA_MINSTACK	20
  ------------------
  137|      0|      lj_err_stkov(L);  /* May invoke an error handler. */
  138|      0|    } else {
  139|       |      /* If we're here, then the stack overflow error handler is requesting
  140|       |      ** to grow the stack even further. We have no choice but to abort the
  141|       |      ** error handler.
  142|       |      */
  143|      0|      GCstr *em = lj_err_str(L, LJ_ERR_STKOV);  /* Might OOM. */
  144|      0|      setstrV(L, L->top++, em);  /* There is always space to push an error. */
  145|      0|      lj_err_throw(L, LUA_ERRERR);  /* Does not invoke an error handler. */
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  146|      0|    }
  147|      0|  }
  148|     16|}
lj_state_growstack1:
  151|      4|{
  152|      4|  lj_state_growstack(L, 1);
  153|      4|}
lua_newstate:
  244|  3.10k|{
  245|  3.10k|  PRNGState prng;
  246|  3.10k|  GG_State *GG;
  247|  3.10k|  lua_State *L;
  248|  3.10k|  global_State *g;
  249|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  250|  3.10k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (250:7): [True: 0, False: 3.10k]
  ------------------
  251|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  252|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  253|      0|    return NULL;
  254|      0|  }
  255|  3.10k|#ifndef LUAJIT_USE_SYSMALLOC
  256|  3.10k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  3.10k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (256:7): [True: 3.10k, False: 0]
  ------------------
  257|  3.10k|    allocd = lj_alloc_create(&prng);
  258|  3.10k|    if (!allocd) return NULL;
  ------------------
  |  Branch (258:9): [True: 0, False: 3.10k]
  ------------------
  259|  3.10k|    allocf = lj_alloc_f;
  260|  3.10k|  }
  261|  3.10k|#endif
  262|  3.10k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  263|  3.10k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  3.10k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  3.10k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  3.10k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (263:7): [True: 0, False: 3.10k]
  |  Branch (263:21): [True: 0, False: 3.10k]
  ------------------
  264|  3.10k|  memset(GG, 0, sizeof(GG_State));
  265|  3.10k|  L = &GG->L;
  266|  3.10k|  g = &GG->g;
  267|  3.10k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  3.10k|#define LJ_TTHREAD		(~6u)
  ------------------
  268|  3.10k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  3.10k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  3.10k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  3.10k|#define LJ_GC_SFIXED	0x40
  ------------------
  269|  3.10k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  3.10k|#define FF_C		1
  ------------------
  270|  3.10k|  setmref(L->glref, g);
  ------------------
  |  |   39|  3.10k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  3.10k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  3.10k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  3.10k|#define LJ_GC_FIXED	0x20
  ------------------
  272|  3.10k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  3.10k|#define LJ_GC_WHITE0	0x01
  ------------------
  273|  3.10k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  3.10k|#define LJ_TSTR			(~4u)
  ------------------
  274|  3.10k|  g->allocf = allocf;
  275|  3.10k|  g->allocd = allocd;
  276|  3.10k|  g->prng = prng;
  277|  3.10k|#ifndef LUAJIT_USE_SYSMALLOC
  278|  3.10k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (278:7): [True: 3.10k, False: 0]
  ------------------
  279|  3.10k|    lj_alloc_setprng(allocd, &g->prng);
  280|  3.10k|  }
  281|  3.10k|#endif
  282|  3.10k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  283|  3.10k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  284|  3.10k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  285|  3.10k|  g->str.mask = ~(MSize)0;
  286|  3.10k|  setnilV(registry(L));
  ------------------
  |  |  872|  3.10k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  287|  3.10k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  872|  3.10k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  288|  3.10k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  872|  3.10k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  289|       |#if !LJ_GC64
  290|       |  setmref(g->nilnode.freetop, &g->nilnode);
  291|       |#endif
  292|  3.10k|  lj_buf_init(NULL, &g->tmpbuf);
  293|  3.10k|  g->gc.state = GCSpause;
  294|  3.10k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  295|  3.10k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  3.10k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  296|  3.10k|  g->gc.total = sizeof(GG_State);
  297|  3.10k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   94|  3.10k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  298|  3.10k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   95|  3.10k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  299|  3.10k|  lj_dispatch_init((GG_State *)L);
  300|  3.10k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  3.10k|#define LUA_ERRERR	5
  ------------------
  301|  3.10k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (301:7): [True: 0, False: 3.10k]
  ------------------
  302|       |    /* Memory allocation error: free partial state. */
  303|      0|    close_state(L);
  304|      0|    return NULL;
  305|      0|  }
  306|  3.10k|  L->status = LUA_OK;
  ------------------
  |  |   43|  3.10k|#define LUA_OK		0
  ------------------
  307|  3.10k|  return L;
  308|  3.10k|}
lua_close:
  321|  3.10k|{
  322|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  323|  3.10k|  int i;
  324|  3.10k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  665|  3.10k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  325|  3.10k|#if LJ_HASPROFILE
  326|  3.10k|  luaJIT_profile_stop(L);
  327|  3.10k|#endif
  328|  3.10k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  3.10k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  329|  3.10k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  3.10k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  330|  3.10k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  331|  3.10k|#if LJ_HASJIT
  332|  3.10k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  3.10k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  3.10k|#define JIT_F_ON		0x00000001
  ------------------
  333|  3.10k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  3.10k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|  3.10k|  lj_dispatch_update(g);
  335|  3.10k|#endif
  336|  3.10k|  for (i = 0;;) {
  337|  3.10k|    hook_enter(g);
  ------------------
  |  |  679|  3.10k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  3.10k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  338|  3.10k|    L->status = LUA_OK;
  ------------------
  |  |   43|  3.10k|#define LUA_OK		0
  ------------------
  339|  3.10k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  3.10k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  3.10k|#define LJ_FR2			1
  ------------------
  340|  3.10k|    L->cframe = NULL;
  341|  3.10k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  3.10k|#define LUA_OK		0
  ------------------
  |  Branch (341:9): [True: 3.10k, False: 0]
  ------------------
  342|  3.10k|      if (++i >= 10) break;
  ------------------
  |  Branch (342:11): [True: 0, False: 3.10k]
  ------------------
  343|  3.10k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  344|  3.10k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  3.10k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (344:11): [True: 3.10k, False: 0]
  ------------------
  345|  3.10k|	break;
  346|  3.10k|    }
  347|  3.10k|  }
  348|  3.10k|  close_state(L);
  349|  3.10k|}
lj_state.c:resizestack:
   58|     16|{
   59|     16|  TValue *st, *oldst = tvref(L->stack);
  ------------------
  |  |  217|     16|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     16|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   60|     16|  ptrdiff_t delta;
   61|     16|  MSize oldsize = L->stacksize;
   62|     16|  MSize realsize = n + 1 + LJ_STACK_EXTRA;
  ------------------
  |  |   72|     16|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|     16|#define LJ_FR2			1
  |  |  ------------------
  ------------------
   63|     16|  GCobj *up;
   64|     16|  lj_assertL((MSize)(tvref(L->maxstack)-oldst) == L->stacksize-LJ_STACK_EXTRA-1,
  ------------------
  |  |  365|     16|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     16|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     16|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   65|     16|	     "inconsistent stack size");
   66|     16|  st = (TValue *)lj_mem_realloc(L, tvref(L->stack),
  ------------------
  |  |  217|     16|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     16|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|     16|				(MSize)(oldsize*sizeof(TValue)),
   68|     16|				(MSize)(realsize*sizeof(TValue)));
   69|     16|  setmref(L->stack, st);
  ------------------
  |  |   39|     16|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   70|     16|  delta = (char *)st - (char *)oldst;
   71|     16|  setmref(L->maxstack, st + n);
  ------------------
  |  |   39|     16|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   72|    939|  while (oldsize < realsize)  /* Clear new slots. */
  ------------------
  |  Branch (72:10): [True: 923, False: 16]
  ------------------
   73|    923|    setnilV(st + oldsize++);
  ------------------
  |  |  872|    939|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   74|     16|  L->stacksize = realsize;
   75|     16|  if ((size_t)(mref(G(L)->jit_base, char) - (char *)oldst) < oldsize)
  ------------------
  |  |   36|     16|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (75:7): [True: 0, False: 16]
  ------------------
   76|      0|    setmref(G(L)->jit_base, mref(G(L)->jit_base, char) + delta);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   77|     16|  L->base = (TValue *)((char *)L->base + delta);
   78|     16|  L->top = (TValue *)((char *)L->top + delta);
   79|     16|  for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   67|     16|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (79:34): [True: 0, False: 16]
  ------------------
   80|      0|    setmref(gco2uv(up)->v, (TValue *)((char *)uvval(gco2uv(up)) + delta));
  ------------------
  |  |   39|     16|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  Branch (39:55): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   81|     16|}
lj_state.c:cpluaopen:
  186|  3.10k|{
  187|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|  3.10k|  UNUSED(dummy);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  189|  3.10k|  UNUSED(ud);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  190|  3.10k|  stack_init(L, L);
  191|       |  /* NOBARRIER: State initialization, all objects are white. */
  192|  3.10k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  3.10k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  193|  3.10k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  706|  3.10k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  3.10k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  194|  3.10k|  lj_str_init(L);
  195|  3.10k|  lj_meta_init(L);
  196|  3.10k|  lj_lex_init(L);
  197|  3.10k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  3.10k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  3.10k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  198|  3.10k|  g->gc.threshold = 4*g->gc.total;
  199|  3.10k|#if LJ_HASFFI
  200|  3.10k|  lj_ctype_initfin(L);
  201|  3.10k|#endif
  202|  3.10k|  lj_trace_initstate(g);
  203|  3.10k|  lj_err_verify();
  204|  3.10k|  return NULL;
  205|  3.10k|}
lj_state.c:close_state:
  208|  3.10k|{
  209|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  3.10k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  3.10k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  3.10k|  lj_gc_freeall(g);
  212|  3.10k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  3.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  213|  3.10k|	     "main thread is not first GC object");
  214|  3.10k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  3.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  3.10k|  lj_trace_freestate(g);
  216|  3.10k|#if LJ_HASFFI
  217|  3.10k|  lj_ctype_freestate(g);
  218|  3.10k|#endif
  219|  3.10k|  lj_str_freetab(g);
  ------------------
  |  |   25|  3.10k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  220|  3.10k|  lj_buf_free(g, &g->tmpbuf);
  221|  3.10k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|  3.10k|#if LJ_64
  223|  3.10k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 3.10k]
  |  |  ------------------
  ------------------
  224|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (224:20): [True: 0, False: 0]
  ------------------
  225|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  226|      0|  }
  227|  3.10k|#endif
  228|  3.10k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  3.10k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.10k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.10k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  229|  3.10k|	     "memory leak of %lld bytes",
  230|  3.10k|	     (long long)(g->gc.total - sizeof(GG_State)));
  231|  3.10k|#ifndef LUAJIT_USE_SYSMALLOC
  232|  3.10k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (232:7): [True: 3.10k, False: 0]
  ------------------
  233|  3.10k|    lj_alloc_destroy(g->allocd);
  234|      0|  else
  235|      0|#endif
  236|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  237|  3.10k|}
lj_state.c:cpfinalize:
  311|  3.10k|{
  312|  3.10k|  UNUSED(dummy);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  313|  3.10k|  UNUSED(ud);
  ------------------
  |  |   91|  3.10k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  314|  3.10k|  lj_gc_finalize_cdata(L);
  315|  3.10k|  lj_gc_finalize_udata(L);
  316|       |  /* Frame pop omitted. */
  317|  3.10k|  return NULL;
  318|  3.10k|}
lj_state.c:stack_init:
  169|  3.10k|{
  170|  3.10k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  3.10k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  3.10k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  171|  3.10k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  3.10k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  172|  3.10k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  3.10k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  3.10k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  3.10k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  3.10k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  173|  3.10k|  stend = st + L1->stacksize;
  174|  3.10k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  3.10k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  175|  3.10k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  176|  3.10k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  3.10k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  872|  3.10k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  177|  3.10k|  L1->base = L1->top = st;
  178|   145k|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (178:10): [True: 142k, False: 3.10k]
  ------------------
  179|   142k|    setnilV(st++);
  ------------------
  |  |  872|   142k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  180|  3.10k|}

lj_str_cmp:
   29|     24|{
   30|     24|  MSize i, n = a->len > b->len ? b->len : a->len;
  ------------------
  |  Branch (30:16): [True: 16, False: 8]
  ------------------
   31|     48|  for (i = 0; i < n; i += 4) {
  ------------------
  |  Branch (31:15): [True: 45, False: 3]
  ------------------
   32|       |    /* Note: innocuous access up to end of string + 3. */
   33|     45|    uint32_t va = *(const uint32_t *)(strdata(a)+i);
  ------------------
  |  |  316|     45|#define strdata(s)	((const char *)((s)+1))
  ------------------
   34|     45|    uint32_t vb = *(const uint32_t *)(strdata(b)+i);
  ------------------
  |  |  316|     45|#define strdata(s)	((const char *)((s)+1))
  ------------------
   35|     45|    if (va != vb) {
  ------------------
  |  Branch (35:9): [True: 21, False: 24]
  ------------------
   36|     21|#if LJ_LE
   37|     21|      va = lj_bswap(va); vb = lj_bswap(vb);
   38|     21|#endif
   39|     21|      i -= n;
   40|     21|      if ((int32_t)i >= -3) {
  ------------------
  |  Branch (40:11): [True: 3, False: 18]
  ------------------
   41|      3|	va >>= 32+(i<<3); vb >>= 32+(i<<3);
   42|      3|	if (va == vb) break;
  ------------------
  |  Branch (42:6): [True: 1, False: 2]
  ------------------
   43|      3|      }
   44|     20|      return va < vb ? -1 : 1;
  ------------------
  |  Branch (44:14): [True: 13, False: 7]
  ------------------
   45|     21|    }
   46|     45|  }
   47|      4|  return (int32_t)(a->len - b->len);
   48|     24|}
lj_str_resize:
  139|  3.91k|{
  140|  3.91k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.91k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.91k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|  3.91k|  GCRef *newtab, *oldtab = g->str.tab;
  142|  3.91k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|  3.91k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|  3.91k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 0, False: 3.91k]
  |  Branch (145:40): [True: 0, False: 3.91k]
  ------------------
  146|      0|    return;
  147|       |
  148|  3.91k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|  3.91k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  3.91k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|  3.91k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|  3.91k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|  3.91k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 0, False: 3.91k]
  ------------------
  154|      0|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|      0|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 0, False: 0]
  ------------------
  157|      0|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|      0|      while (o) {
  ------------------
  |  Branch (158:14): [True: 0, False: 0]
  ------------------
  159|      0|	GCstr *s = gco2str(o);
  ------------------
  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|      0|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 0, False: 0]
  ------------------
  161|      0|				  s->hash;
  162|      0|	hash &= newmask;
  163|      0|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|      0|	o = gcnext(o);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|      0|      }
  166|      0|    }
  167|       |    /* Mark secondary chains. */
  168|      0|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 0, False: 0]
  ------------------
  169|      0|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|      0|#define LJ_STR_MAXCOLL		32
  ------------------
  170|      0|      newsecond |= secondary;
  171|      0|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|      0|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|      0|    }
  173|      0|    g->str.second = newsecond;
  174|      0|  }
  175|  3.91k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|   212k|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 208k, False: 3.91k]
  ------------------
  179|   208k|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|   208k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|   417k|    while (o) {
  ------------------
  |  Branch (180:12): [True: 208k, False: 208k]
  ------------------
  181|   208k|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|   208k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   208k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|   208k|      GCstr *s = gco2str(o);
  ------------------
  |  |  765|   208k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   208k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   208k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   208k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 208k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   208k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|   208k|#if LUAJIT_SECURITY_STRHASH
  185|   208k|      uintptr_t u;
  186|   208k|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|   208k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 208k, False: 0]
  |  |  ------------------
  ------------------
  187|   208k|	hash &= newmask;
  188|   208k|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|   208k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|   208k|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|   208k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 208k]
  |  |  ------------------
  ------------------
  190|      0|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|      0|	  s->hashalg = 1;
  192|      0|	  hash &= newmask;
  193|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|      0|	}
  195|   208k|      } else {  /* String hashed with secondary hash. */
  196|      0|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|      0|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|      0|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 0, False: 0]
  ------------------
  199|      0|	  hash &= newmask;
  200|      0|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|      0|	} else {  /* Revert string back to primary hash. */
  202|      0|	  s->hash = shash;
  203|      0|	  s->hashalg = 0;
  204|      0|	  hash = (shash & newmask);
  205|      0|	}
  206|      0|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|   208k|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   208k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|   208k|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|   208k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|   208k|      o = next;
  217|   208k|    }
  218|   208k|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|  3.91k|  lj_str_freetab(g);
  ------------------
  |  |   25|  3.91k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  3.91k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|  3.91k|  g->str.tab = newtab;
  223|  3.91k|  g->str.mask = newmask;
  224|  3.91k|}
lj_str_new:
  324|  1.21M|{
  325|  1.21M|  global_State *g = G(L);
  ------------------
  |  |  705|  1.21M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.21M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|  1.21M|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|  1.21M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|  1.21M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 1.15M, False: 62.8k]
  ------------------
  327|  1.15M|    MSize len = (MSize)lenx;
  328|  1.15M|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|  1.15M|    MSize coll = 0;
  330|  1.15M|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|  1.15M|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|  1.15M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|  1.15M|#if LUAJIT_SECURITY_STRHASH
  334|  1.15M|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|  1.15M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.15M]
  |  |  ------------------
  ------------------
  335|      0|      hashalg = 1;
  336|      0|      hash = hash_dense(g->str.seed, hash, str, len);
  337|      0|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|      0|    }
  339|  1.15M|#endif
  340|  1.62M|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 801k, False: 823k]
  ------------------
  341|   801k|      GCstr *sx = gco2str(o);
  ------------------
  |  |  765|   801k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   801k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   801k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   801k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 801k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   801k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|   801k|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 330k, False: 470k]
  |  Branch (342:31): [True: 330k, False: 86]
  ------------------
  343|   330k|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|   330k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 330k, False: 226]
  ------------------
  344|   330k|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|   330k|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|   330k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   330k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   330k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   330k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   330k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   330k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   330k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 4, False: 330k]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|      4|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      4|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      4|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      4|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|   330k|	  return sx;  /* Return existing string. */
  346|   330k|	}
  347|    226|	coll++;
  348|    226|      }
  349|   471k|      coll++;
  350|   471k|      o = gcnext(o);
  ------------------
  |  |   90|   471k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   471k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|   471k|    }
  352|   823k|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|   823k|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  1.64M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 823k]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 0, False: 0]
  ------------------
  355|      0|      return lj_str_rehash_chain(L, hash, str, len);
  356|      0|    }
  357|   823k|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|   823k|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|   823k|  } else {
  361|  62.8k|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 62.8k]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|  62.8k|    return &g->strempty;
  364|  62.8k|  }
  365|  1.21M|}
lj_str_free:
  368|   823k|{
  369|   823k|  g->str.num--;
  370|   823k|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|   823k|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|   823k|}
lj_str_init:
  374|  3.10k|{
  375|  3.10k|  global_State *g = G(L);
  ------------------
  |  |  705|  3.10k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.10k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  3.10k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  3.10k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  3.10k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  3.10k|}
lj_str.c:hash_sparse:
   86|  1.15M|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|  1.15M|  StrHash a, b, h = len ^ (StrHash)seed;
   89|  1.15M|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 935k, False: 217k]
  ------------------
   90|   935k|    a = lj_getu32(str);
   91|   935k|    h ^= lj_getu32(str+len-4);
   92|   935k|    b = lj_getu32(str+(len>>1)-2);
   93|   935k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   935k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|   935k|    b += lj_getu32(str+(len>>2)-1);
   95|   935k|  } else {
   96|   217k|    a = *(const uint8_t *)str;
   97|   217k|    h ^= *(const uint8_t *)(str+len-1);
   98|   217k|    b = *(const uint8_t *)(str+(len>>1));
   99|   217k|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   217k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|   217k|  }
  101|  1.15M|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  1.15M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|  1.15M|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  1.15M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|  1.15M|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  1.15M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|  1.15M|  return h;
  105|  1.15M|}
lj_str.c:lj_str_alloc:
  286|   823k|{
  287|   823k|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|   823k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|   823k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|   823k|  global_State *g = G(L);
  ------------------
  |  |  705|   823k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   823k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|   823k|  uintptr_t u;
  290|   823k|  newwhite(g, s);
  ------------------
  |  |   40|   823k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|   823k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   823k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   823k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   823k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   823k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|   823k|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|   823k|#define LJ_TSTR			(~4u)
  ------------------
  292|   823k|  s->len = len;
  293|   823k|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|   823k|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 8.54k, False: 814k]
  ------------------
  298|  8.54k|    uint64_t r = lj_prng_u64(&g->prng);
  299|  8.54k|    g->str.id = (StrID)r;
  300|  8.54k|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  8.54k|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  8.54k|  }
  302|   823k|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|   823k|  s->reserved = 0;
  307|   823k|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|   823k|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|   823k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|   823k|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|   823k|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|   823k|  hash &= g->str.mask;
  313|   823k|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|   823k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|   823k|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   823k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|   823k|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|   823k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|   823k|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 813, False: 822k]
  ------------------
  318|    813|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|   823k|  return s;  /* Return newly interned string. */
  320|   823k|}

lj_strfmt_parse:
   35|  44.9k|{
   36|  44.9k|  const uint8_t *p = fs->p, *e = fs->e;
   37|  44.9k|  fs->str = (const char *)p;
   38|   124k|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 109k, False: 14.8k]
  ------------------
   39|   109k|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 30.0k, False: 79.7k]
  ------------------
   40|  30.0k|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 30.0k]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|  30.0k|      } else {
   44|  30.0k|	SFormat sf = 0;
   45|  30.0k|	uint32_t c;
   46|  30.0k|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 11.5k, False: 18.4k]
  ------------------
   47|  11.5k|	  break;
   48|  18.4k|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 0, False: 18.4k]
  ------------------
   49|       |	  /* Parse flags. */
   50|      0|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 0, False: 0]
  ------------------
   51|      0|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 0, False: 0]
  ------------------
   52|      0|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 0, False: 0]
  ------------------
   53|      0|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 0, False: 0]
  ------------------
   54|      0|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 0, False: 0]
  ------------------
   55|      0|	  else break;
   56|      0|	}
   57|  18.4k|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 0, False: 18.4k]
  ------------------
   58|      0|	  uint32_t width = (uint32_t)*p++ - '0';
   59|      0|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 0, False: 0]
  ------------------
   60|      0|	    width = (uint32_t)*p++ - '0' + width*10;
   61|      0|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|      0|#define STRFMT_SH_WIDTH	16
  ------------------
   62|      0|	}
   63|  18.4k|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 0, False: 18.4k]
  ------------------
   64|      0|	  uint32_t prec = 0;
   65|      0|	  p++;
   66|      0|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 0, False: 0]
  ------------------
   67|      0|	    prec = (uint32_t)*p++ - '0';
   68|      0|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 0, False: 0]
  ------------------
   69|      0|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|      0|	  }
   71|      0|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|      0|#define STRFMT_SH_PREC	24
  ------------------
   72|      0|	}
   73|       |	/* Parse conversion. */
   74|  18.4k|	c = (uint32_t)*p - 'A';
   75|  18.4k|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|  18.4k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 18.4k, False: 0]
  |  |  ------------------
  ------------------
   76|  18.4k|	  uint32_t sx = strfmt_map[c];
   77|  18.4k|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 18.4k, False: 0]
  ------------------
   78|  18.4k|	    fs->p = p+1;
   79|  18.4k|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 18.4k, False: 0]
  ------------------
   80|  18.4k|	  }
   81|  18.4k|	}
   82|       |	/* Return error location. */
   83|      0|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 0, False: 0]
  ------------------
   84|      0|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      0|	fs->p = fs->e;
   86|      0|	return STRFMT_ERR;
   87|  18.4k|      }
   88|  30.0k|    }
   89|   109k|  }
   90|  26.4k|  fs->p = p;
   91|  26.4k|retlit:
   92|  26.4k|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|  26.4k|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 16.6k, False: 9.78k]
  ------------------
   94|  26.4k|}
lj_strfmt_wint:
  108|  2.79k|{
  109|  2.79k|  uint32_t u = (uint32_t)k;
  110|  2.79k|  if (k < 0) { u = ~u+1u; *p++ = '-'; }
  ------------------
  |  Branch (110:7): [True: 0, False: 2.79k]
  ------------------
  111|  2.79k|  if (u < 10000) {
  ------------------
  |  Branch (111:7): [True: 2.02k, False: 771]
  ------------------
  112|  2.02k|    if (u < 10) goto dig1;
  ------------------
  |  Branch (112:9): [True: 344, False: 1.68k]
  ------------------
  113|  1.68k|    if (u < 100) goto dig2;
  ------------------
  |  Branch (113:9): [True: 1.22k, False: 462]
  ------------------
  114|    462|    if (u < 1000) goto dig3;
  ------------------
  |  Branch (114:9): [True: 235, False: 227]
  ------------------
  115|    771|  } else {
  116|    771|    uint32_t v = u / 10000; u -= v * 10000;
  117|    771|    if (v < 10000) {
  ------------------
  |  Branch (117:9): [True: 610, False: 161]
  ------------------
  118|    610|      if (v < 10) goto dig5;
  ------------------
  |  Branch (118:11): [True: 124, False: 486]
  ------------------
  119|    486|      if (v < 100) goto dig6;
  ------------------
  |  Branch (119:11): [True: 120, False: 366]
  ------------------
  120|    366|      if (v < 1000) goto dig7;
  ------------------
  |  Branch (120:11): [True: 145, False: 221]
  ------------------
  121|    366|    } else {
  122|    161|      uint32_t w = v / 10000; v -= w * 10000;
  123|    161|      if (w >= 10) WINT_R(w, 10, 10)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  |  Branch (123:11): [True: 0, False: 161]
  ------------------
  124|    161|      *p++ = (char)('0'+w);
  125|    161|    }
  126|    382|    WINT_R(v, 23, 1000)
  ------------------
  |  |   99|    382|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  127|    527|    dig7: WINT_R(v, 12, 100)
  ------------------
  |  |   99|    527|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  128|    647|    dig6: WINT_R(v, 10, 10)
  ------------------
  |  |   99|    647|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  129|    771|    dig5: *p++ = (char)('0'+v);
  130|    771|  }
  131|    998|  WINT_R(u, 23, 1000)
  ------------------
  |  |   99|    998|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  132|  1.23k|  dig3: WINT_R(u, 12, 100)
  ------------------
  |  |   99|  1.23k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  133|  2.45k|  dig2: WINT_R(u, 10, 10)
  ------------------
  |  |   99|  2.45k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  134|  2.79k|  dig1: *p++ = (char)('0'+u);
  135|  2.79k|  return p;
  136|  2.45k|}
lj_strfmt_putfxint:
  285|  3.05k|{
  286|  3.05k|  char buf[STRFMT_MAXBUF_XINT], *q = buf + sizeof(buf), *w;
  287|  3.05k|#ifdef LUA_USE_ASSERT
  288|  3.05k|  char *ws;
  289|  3.05k|#endif
  290|  3.05k|  MSize prefix = 0, len, prec, pprec, width, need;
  291|       |
  292|       |  /* Figure out signed prefixes. */
  293|  3.05k|  if (STRFMT_TYPE(sf) == STRFMT_INT) {
  ------------------
  |  |   48|  3.05k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  |  Branch (293:7): [True: 3.05k, False: 0]
  ------------------
  294|  3.05k|    if ((int64_t)k < 0) {
  ------------------
  |  Branch (294:9): [True: 0, False: 3.05k]
  ------------------
  295|      0|      k = ~k+1u;
  296|      0|      prefix = 256 + '-';
  297|  3.05k|    } else if ((sf & STRFMT_F_PLUS)) {
  ------------------
  |  |   38|  3.05k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (297:16): [True: 0, False: 3.05k]
  ------------------
  298|      0|      prefix = 256 + '+';
  299|  3.05k|    } else if ((sf & STRFMT_F_SPACE)) {
  ------------------
  |  |   40|  3.05k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:16): [True: 0, False: 3.05k]
  ------------------
  300|      0|      prefix = 256 + ' ';
  301|      0|    }
  302|  3.05k|  }
  303|       |
  304|       |  /* Convert number and store to fixed-size buffer in reverse order. */
  305|  3.05k|  prec = STRFMT_PREC(sf);
  ------------------
  |  |   50|  3.05k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  3.05k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  306|  3.05k|  if ((int32_t)prec >= 0) sf &= ~STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (306:7): [True: 0, False: 3.05k]
  ------------------
  307|  3.05k|  if (k == 0) {  /* Special-case zero argument. */
  ------------------
  |  Branch (307:7): [True: 0, False: 3.05k]
  ------------------
  308|      0|    if (prec != 0 ||
  ------------------
  |  Branch (308:9): [True: 0, False: 0]
  ------------------
  309|      0|	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (309:2): [True: 0, False: 0]
  ------------------
  310|      0|      *--q = '0';
  311|  3.05k|  } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   28|  3.05k|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
                } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   29|  3.05k|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
  |  Branch (311:14): [True: 3.05k, False: 0]
  ------------------
  312|  3.05k|    uint32_t k2;
  313|  3.05k|    while ((k >> 32)) { *--q = (char)('0' + k % 10); k /= 10; }
  ------------------
  |  Branch (313:12): [True: 0, False: 3.05k]
  ------------------
  314|  3.05k|    k2 = (uint32_t)k;
  315|  3.37k|    do { *--q = (char)('0' + k2 % 10); k2 /= 10; } while (k2);
  ------------------
  |  Branch (315:59): [True: 315, False: 3.05k]
  ------------------
  316|  3.05k|  } else if ((sf & STRFMT_T_HEX)) {  /* Hex. */
  ------------------
  |  |   28|      0|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
  |  Branch (316:14): [True: 0, False: 0]
  ------------------
  317|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEF" :
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (317:26): [True: 0, False: 0]
  ------------------
  318|      0|						 "0123456789abcdef";
  319|      0|    do { *--q = hexdig[(k & 15)]; k >>= 4; } while (k);
  ------------------
  |  Branch (319:53): [True: 0, False: 0]
  ------------------
  320|      0|    if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
                  if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (320:9): [True: 0, False: 0]
  |  Branch (320:46): [True: 0, False: 0]
  ------------------
  321|      0|  } else {  /* Octal. */
  322|      0|    do { *--q = (char)('0' + (uint32_t)(k & 7)); k >>= 3; } while (k);
  ------------------
  |  Branch (322:68): [True: 0, False: 0]
  ------------------
  323|      0|    if ((sf & STRFMT_F_ALT)) *--q = '0';
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (323:9): [True: 0, False: 0]
  ------------------
  324|      0|  }
  325|       |
  326|       |  /* Calculate sizes. */
  327|  3.05k|  len = (MSize)(buf + sizeof(buf) - q);
  328|  3.05k|  if ((int32_t)len >= (int32_t)prec) prec = len;
  ------------------
  |  Branch (328:7): [True: 3.05k, False: 0]
  ------------------
  329|  3.05k|  width = STRFMT_WIDTH(sf);
  ------------------
  |  |   49|  3.05k|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  3.05k|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
  330|  3.05k|  pprec = prec + (prefix >> 8);
  331|  3.05k|  need = width > pprec ? width : pprec;
  ------------------
  |  Branch (331:10): [True: 0, False: 3.05k]
  ------------------
  332|  3.05k|  w = lj_buf_more(sb, need);
  333|  3.05k|#ifdef LUA_USE_ASSERT
  334|  3.05k|  ws = w;
  335|  3.05k|#endif
  336|       |
  337|       |  /* Format number with leading/trailing whitespace and zeros. */
  338|  3.05k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   37|  3.05k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   39|  3.05k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (338:7): [True: 3.05k, False: 0]
  ------------------
  339|  3.05k|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (339:12): [True: 0, False: 3.05k]
  ------------------
  340|  3.05k|  if (prefix) {
  ------------------
  |  Branch (340:7): [True: 0, False: 3.05k]
  ------------------
  341|      0|    if ((char)prefix >= 'X') *w++ = '0';
  ------------------
  |  Branch (341:9): [True: 0, False: 0]
  ------------------
  342|      0|    *w++ = (char)prefix;
  343|      0|  }
  344|  3.05k|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   37|  3.05k|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  3.05k|#define STRFMT_F_ZERO	0x0400
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  3.05k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (344:7): [True: 0, False: 3.05k]
  ------------------
  345|      0|    while (width-- > pprec) *w++ = '0';
  ------------------
  |  Branch (345:12): [True: 0, False: 0]
  ------------------
  346|  3.05k|  while (prec-- > len) *w++ = '0';
  ------------------
  |  Branch (346:10): [True: 0, False: 3.05k]
  ------------------
  347|  6.43k|  while (q < buf + sizeof(buf)) *w++ = *q++;  /* Add number itself. */
  ------------------
  |  Branch (347:10): [True: 3.37k, False: 3.05k]
  ------------------
  348|  3.05k|  if ((sf & STRFMT_F_LEFT))
  ------------------
  |  |   37|  3.05k|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (348:7): [True: 0, False: 3.05k]
  ------------------
  349|      0|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (349:12): [True: 0, False: 0]
  ------------------
  350|       |
  351|  3.05k|  lj_assertX(need == (MSize)(w - ws), "miscalculated format size");
  ------------------
  |  |  366|  3.05k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.05k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.05k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.05k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  352|  3.05k|  sb->w = w;
  353|  3.05k|  return sb;
  354|  3.05k|}
lj_strfmt_pushvf:
  556|  9.78k|{
  557|  9.78k|  SBuf *sb = lj_buf_tmp_(L);
  558|  9.78k|  FormatState fs;
  559|  9.78k|  SFormat sf;
  560|  9.78k|  GCstr *str;
  561|  9.78k|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  562|  44.9k|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (562:10): [True: 35.1k, False: 9.78k]
  ------------------
  563|  35.1k|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|  35.1k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  564|  16.6k|    case STRFMT_LIT:
  ------------------
  |  Branch (564:5): [True: 16.6k, False: 18.4k]
  ------------------
  565|  16.6k|      lj_buf_putmem(sb, fs.str, fs.len);
  566|  16.6k|      break;
  567|  3.05k|    case STRFMT_INT:
  ------------------
  |  Branch (567:5): [True: 3.05k, False: 32.0k]
  ------------------
  568|  3.05k|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  569|  3.05k|      break;
  570|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (570:5): [True: 0, False: 35.1k]
  ------------------
  571|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  572|      0|      break;
  573|      0|    case STRFMT_NUM:
  ------------------
  |  Branch (573:5): [True: 0, False: 35.1k]
  ------------------
  574|      0|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  575|      0|      break;
  576|  13.7k|    case STRFMT_STR: {
  ------------------
  |  Branch (576:5): [True: 13.7k, False: 21.4k]
  ------------------
  577|  13.7k|      const char *s = va_arg(argp, char *);
  578|  13.7k|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (578:11): [True: 0, False: 13.7k]
  ------------------
  579|  13.7k|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  580|  13.7k|      break;
  581|      0|      }
  582|  1.69k|    case STRFMT_CHAR:
  ------------------
  |  Branch (582:5): [True: 1.69k, False: 33.4k]
  ------------------
  583|  1.69k|      lj_buf_putb(sb, va_arg(argp, int));
  584|  1.69k|      break;
  585|      0|    case STRFMT_PTR:
  ------------------
  |  Branch (585:5): [True: 0, False: 35.1k]
  ------------------
  586|      0|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  587|      0|      break;
  588|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (588:5): [True: 0, False: 35.1k]
  ------------------
  589|      0|    default:
  ------------------
  |  Branch (589:5): [True: 0, False: 35.1k]
  ------------------
  590|      0|      lj_buf_putb(sb, '?');
  591|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  592|      0|      break;
  593|  35.1k|    }
  594|  35.1k|  }
  595|  9.78k|  str = lj_buf_str(L, sb);
  596|  9.78k|  setstrV(L, L->top, str);
  597|  9.78k|  incr_top(L);
  ------------------
  |  |   12|  9.78k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  19.5k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  9.78k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 4, False: 9.77k]
  |  |  |  Branch (12:38): [True: 0, False: 4]
  |  |  ------------------
  ------------------
  598|  9.78k|  return strdata(str);
  ------------------
  |  |  316|  9.78k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  599|  9.78k|}
lj_strfmt_pushf:
  603|  6.87k|{
  604|  6.87k|  const char *msg;
  605|  6.87k|  va_list argp;
  606|  6.87k|  va_start(argp, fmt);
  607|  6.87k|  msg = lj_strfmt_pushvf(L, fmt, argp);
  608|  6.87k|  va_end(argp);
  609|  6.87k|  return msg;
  610|  6.87k|}

lj_strfmt.c:lj_strfmt_init:
   79|  9.78k|{
   80|  9.78k|  fs->p = (const uint8_t *)p;
   81|  9.78k|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|  9.78k|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|  9.78k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.78k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.78k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.78k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  9.78k|}

lj_strfmt_putfnum:
  579|  1.76k|{
  580|  1.76k|  sb->w = lj_strfmt_wfnum(sb, sf, n, NULL);
  581|  1.76k|  return sb;
  582|  1.76k|}
lj_strfmt_num.c:lj_strfmt_wfnum:
  270|  1.76k|{
  271|  1.76k|  MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   49|  1.76k|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  1.76k|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
                MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   50|  1.76k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  1.76k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  272|  1.76k|  TValue t;
  273|  1.76k|  t.n = n;
  274|  1.76k|  if (LJ_UNLIKELY((t.u32.hi << 1) >= 0xffe00000)) {
  ------------------
  |  |  146|  1.76k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 39, False: 1.72k]
  |  |  ------------------
  ------------------
  275|       |    /* Handle non-finite values uniformly for %a, %e, %f, %g. */
  276|     39|    int prefix = 0, ch = (sf & STRFMT_F_UPPER) ? 0x202020 : 0;
  ------------------
  |  |   42|     39|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (276:26): [True: 0, False: 39]
  ------------------
  277|     39|    if (((t.u32.hi & 0x000fffff) | t.u32.lo) != 0) {
  ------------------
  |  Branch (277:9): [True: 10, False: 29]
  ------------------
  278|     10|      ch ^= ('n' << 16) | ('a' << 8) | 'n';
  279|     10|      if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|     10|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (279:11): [True: 0, False: 10]
  ------------------
  280|     29|    } else {
  281|     29|      ch ^= ('i' << 16) | ('n' << 8) | 'f';
  282|     29|      if ((t.u32.hi & 0x80000000)) prefix = '-';
  ------------------
  |  Branch (282:11): [True: 17, False: 12]
  ------------------
  283|     12|      else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|     12|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (283:16): [True: 0, False: 12]
  ------------------
  284|     12|      else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|     12|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (284:16): [True: 0, False: 12]
  ------------------
  285|     29|    }
  286|     39|    len = 3 + (prefix != 0);
  287|     39|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (287:9): [True: 39, False: 0]
  |  Branch (287:33): [True: 0, False: 39]
  ------------------
  288|     39|    if (!(sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|     39|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (288:9): [True: 39, False: 0]
  |  Branch (288:39): [True: 0, False: 39]
  ------------------
  289|     39|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (289:9): [True: 17, False: 22]
  ------------------
  290|     39|    *p++ = (char)(ch >> 16); *p++ = (char)(ch >> 8); *p++ = (char)ch;
  291|  1.72k|  } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|  1.72k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|  1.72k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (291:14): [True: 0, False: 1.72k]
  ------------------
  292|       |    /* %a */
  293|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEFPX"
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (293:26): [True: 0, False: 0]
  ------------------
  294|      0|					       : "0123456789abcdefpx";
  295|      0|    int32_t e = (t.u32.hi >> 20) & 0x7ff;
  296|      0|    char prefix = 0, eprefix = '+';
  297|      0|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (297:9): [True: 0, False: 0]
  ------------------
  298|      0|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|      0|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (298:14): [True: 0, False: 0]
  ------------------
  299|      0|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|      0|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:14): [True: 0, False: 0]
  ------------------
  300|      0|    t.u32.hi &= 0xfffff;
  301|      0|    if (e) {
  ------------------
  |  Branch (301:9): [True: 0, False: 0]
  ------------------
  302|      0|      t.u32.hi |= 0x100000;
  303|      0|      e -= 1023;
  304|      0|    } else if (t.u32.lo | t.u32.hi) {
  ------------------
  |  Branch (304:16): [True: 0, False: 0]
  ------------------
  305|       |      /* Non-zero denormal - normalise it. */
  306|      0|      uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
                    uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (306:24): [True: 0, False: 0]
  ------------------
  307|      0|      e = -1022 - shift;
  308|      0|      t.u64 <<= shift;
  309|      0|    }
  310|       |    /* abs(n) == t.u64 * 2^(e - 52) */
  311|       |    /* If n != 0, bit 52 of t.u64 is set, and is the highest set bit. */
  312|      0|    if ((int32_t)prec < 0) {
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|       |      /* Default precision: use smallest precision giving exact result. */
  314|      0|      prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
                    prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  |  Branch (314:14): [True: 0, False: 0]
  ------------------
  315|      0|    } else if (prec < 13) {
  ------------------
  |  Branch (315:16): [True: 0, False: 0]
  ------------------
  316|       |      /* Precision is sufficiently low as to maybe require rounding. */
  317|      0|      t.u64 += (((uint64_t)1) << (51 - prec*4));
  318|      0|    }
  319|      0|    if (e < 0) {
  ------------------
  |  Branch (319:9): [True: 0, False: 0]
  ------------------
  320|      0|      eprefix = '-';
  321|      0|      e = -e;
  322|      0|    }
  323|      0|    len = 5 + ndigits_dec((uint32_t)e) + prec + (prefix != 0)
  324|      0|	    + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  325|      0|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (325:9): [True: 0, False: 0]
  |  Branch (325:33): [True: 0, False: 0]
  ------------------
  326|      0|    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (326:9): [True: 0, False: 0]
  ------------------
  327|      0|      while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (327:14): [True: 0, False: 0]
  ------------------
  328|      0|    }
  329|      0|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (329:9): [True: 0, False: 0]
  ------------------
  330|      0|    *p++ = '0';
  331|      0|    *p++ = hexdig[17]; /* x or X */
  332|      0|    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|      0|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (332:9): [True: 0, False: 0]
  ------------------
  333|      0|      while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (333:14): [True: 0, False: 0]
  ------------------
  334|      0|    }
  335|      0|    *p++ = '0' + (t.u32.hi >> 20); /* Usually '1', sometimes '0' or '2'. */
  336|      0|    if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (336:9): [True: 0, False: 0]
  ------------------
  337|       |      /* Emit fractional part. */
  338|      0|      char *q = p + 1 + prec;
  339|      0|      *p = '.';
  340|      0|      if (prec < 13) t.u64 >>= (52 - prec*4);
  ------------------
  |  Branch (340:11): [True: 0, False: 0]
  ------------------
  341|      0|      else while (prec > 13) p[prec--] = '0';
  ------------------
  |  Branch (341:19): [True: 0, False: 0]
  ------------------
  342|      0|      while (prec) { p[prec--] = hexdig[t.u64 & 15]; t.u64 >>= 4; }
  ------------------
  |  Branch (342:14): [True: 0, False: 0]
  ------------------
  343|      0|      p = q;
  344|      0|    }
  345|      0|    *p++ = hexdig[16]; /* p or P */
  346|      0|    *p++ = eprefix; /* + or - */
  347|      0|    p = lj_strfmt_wint(p, e);
  348|  1.72k|  } else {
  349|       |    /* %e or %f or %g - begin by converting n to "nd" format. */
  350|  1.72k|    uint32_t nd[64];
  351|  1.72k|    uint32_t ndhi = 0, ndlo, i;
  352|  1.72k|    int32_t e = (t.u32.hi >> 20) & 0x7ff, ndebias = 0;
  353|  1.72k|    char prefix = 0, *q;
  354|  1.72k|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (354:9): [True: 354, False: 1.37k]
  ------------------
  355|  1.37k|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|  1.37k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (355:14): [True: 0, False: 1.37k]
  ------------------
  356|  1.37k|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|  1.37k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (356:14): [True: 0, False: 1.37k]
  ------------------
  357|  1.72k|    prec += ((int32_t)prec >> 31) & 7; /* Default precision is 6. */
  358|  1.72k|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|  1.72k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|  1.72k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (358:9): [True: 1.72k, False: 0]
  ------------------
  359|       |      /* %g - decrement precision if non-zero (to make it like %e). */
  360|  1.72k|      prec--;
  361|  1.72k|      prec ^= (uint32_t)((int32_t)prec >> 31);
  362|  1.72k|    }
  363|  1.72k|    if ((sf & STRFMT_T_FP_E) && prec < 14 && n != 0) {
  ------------------
  |  |   31|  1.72k|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (363:9): [True: 1.72k, False: 0]
  |  Branch (363:33): [True: 1.72k, False: 0]
  |  Branch (363:46): [True: 1.67k, False: 52]
  ------------------
  364|       |      /* Precision is sufficiently low that rescaling will probably work. */
  365|  1.67k|      if ((ndebias = rescale_e[e >> 6])) {
  ------------------
  |  Branch (365:11): [True: 739, False: 937]
  ------------------
  366|    739|	t.n = n * rescale_n[e >> 6];
  367|    739|	if (LJ_UNLIKELY(!e)) t.n *= 1e10, ndebias -= 10;
  ------------------
  |  |  146|    739|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2, False: 737]
  |  |  ------------------
  ------------------
  368|    739|	t.u64 -= 2; /* Convert 2ulp below (later we convert 2ulp above). */
  369|    739|	nd[0] = 0x100000 | (t.u32.hi & 0xfffff);
  370|    739|	e = ((t.u32.hi >> 20) & 0x7ff) - 1075 - (ND_MUL2K_MAX_SHIFT < 29);
  ------------------
  |  |  116|    739|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  371|    739|	goto load_t_lo; rescale_failed:
  372|    700|	t.n = n;
  373|    700|	e = (t.u32.hi >> 20) & 0x7ff;
  374|    700|	ndebias = ndhi = 0;
  375|    700|      }
  376|  1.67k|    }
  377|  1.68k|    nd[0] = t.u32.hi & 0xfffff;
  378|  1.68k|    if (e == 0) e++; else nd[0] |= 0x100000;
  ------------------
  |  Branch (378:9): [True: 53, False: 1.63k]
  ------------------
  379|  1.68k|    e -= 1043;
  380|  1.68k|    if (t.u32.lo) {
  ------------------
  |  Branch (380:9): [True: 1.31k, False: 375]
  ------------------
  381|  2.05k|      e -= 32 + (ND_MUL2K_MAX_SHIFT < 29); load_t_lo:
  ------------------
  |  |  116|  1.31k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  382|  2.05k|#if ND_MUL2K_MAX_SHIFT >= 29
  383|  2.05k|      nd[0] = (nd[0] << 3) | (t.u32.lo >> 29);
  384|  2.05k|      ndhi = nd_mul2k(nd, ndhi, 29, t.u32.lo & 0x1fffffff, sf);
  385|       |#elif ND_MUL2K_MAX_SHIFT >= 11
  386|       |      ndhi = nd_mul2k(nd, ndhi, 11, t.u32.lo >> 21, sf);
  387|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo >> 10) & 0x7ff, sf);
  388|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo <<  1) & 0x7ff, sf);
  389|       |#else
  390|       |#error "ND_MUL2K_MAX_SHIFT too small"
  391|       |#endif
  392|  2.05k|    }
  393|  2.42k|    if (e >= 0) {
  ------------------
  |  Branch (393:9): [True: 879, False: 1.54k]
  ------------------
  394|    879|      ndhi = nd_mul2k(nd, ndhi, (uint32_t)e, 0, sf);
  395|    879|      ndlo = 0;
  396|  1.54k|    } else {
  397|  1.54k|      ndlo = nd_div2k(nd, ndhi, (uint32_t)-e, sf);
  398|  1.54k|      if (ndhi && !nd[ndhi]) ndhi--;
  ------------------
  |  Branch (398:11): [True: 1.18k, False: 368]
  |  Branch (398:19): [True: 848, False: 333]
  ------------------
  399|  1.54k|    }
  400|       |    /* abs(n) == nd * 10^ndebias (for slightly loose interpretation of ==) */
  401|  2.42k|    if ((sf & STRFMT_T_FP_E)) {
  ------------------
  |  |   31|  2.42k|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (401:9): [True: 2.42k, False: 0]
  ------------------
  402|       |      /* %e or %g - assume %e and start by calculating nd's exponent (nde). */
  403|  2.42k|      char eprefix = '+';
  404|  2.42k|      int32_t nde = -1;
  405|  2.42k|      MSize hilen;
  406|  2.42k|      if (ndlo && !nd[ndhi]) {
  ------------------
  |  Branch (406:11): [True: 1.03k, False: 1.39k]
  |  Branch (406:19): [True: 372, False: 659]
  ------------------
  407|  1.54k|	ndhi = 64; do {} while (!nd[--ndhi]);
  ------------------
  |  Branch (407:26): [True: 1.17k, False: 372]
  ------------------
  408|    372|	nde -= 64 * 9;
  409|    372|      }
  410|  2.42k|      hilen = ndigits_dec(nd[ndhi]);
  411|  2.42k|      nde += ndhi * 9 + hilen;
  412|  2.42k|      if (ndebias) {
  ------------------
  |  Branch (412:11): [True: 739, False: 1.68k]
  ------------------
  413|       |	/*
  414|       |	** Rescaling was performed, but this introduced some error, and might
  415|       |	** have pushed us across a rounding boundary. We check whether this
  416|       |	** error affected the result by introducing even more error (2ulp in
  417|       |	** either direction), and seeing whether a rounding boundary was
  418|       |	** crossed. Having already converted the -2ulp case, we save off its
  419|       |	** most significant digits, convert the +2ulp case, and compare them.
  420|       |	*/
  421|    739|	int32_t eidx = e + 70 + (ND_MUL2K_MAX_SHIFT < 29)
  ------------------
  |  |  116|    739|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  422|    739|			 + (t.u32.lo >= 0xfffffffe && !(~t.u32.hi << 12));
  ------------------
  |  Branch (422:8): [True: 110, False: 629]
  |  Branch (422:34): [True: 0, False: 110]
  ------------------
  423|    739|	const int8_t *m_e = four_ulp_m_e + eidx * 2;
  424|    739|	lj_assertG_(G(sbufL(sb)), 0 <= eidx && eidx < 128, "bad eidx %d", eidx);
  ------------------
  |  |  363|    739|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.47k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 739, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 739, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    739|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  425|    739|	nd[33] = nd[ndhi];
  426|    739|	nd[32] = nd[(ndhi - 1) & 0x3f];
  427|    739|	nd[31] = nd[(ndhi - 2) & 0x3f];
  428|    739|	nd_add_m10e(nd, ndhi, (uint8_t)*m_e, m_e[1]);
  429|    739|	if (LJ_UNLIKELY(!nd_similar(nd, ndhi, nd + 33, hilen, prec + 1))) {
  ------------------
  |  |  146|    739|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 700, False: 39]
  |  |  ------------------
  ------------------
  430|    700|	  goto rescale_failed;
  431|    700|	}
  432|    739|      }
  433|  1.72k|      if ((int32_t)(prec - nde) < (0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (433:11): [True: 1.20k, False: 522]
  ------------------
  434|       |	/* Precision is sufficiently low as to maybe require rounding. */
  435|  1.20k|	ndhi = nd_add_m10e(nd, ndhi, 5, nde - prec - 1);
  436|  1.20k|	nde += (hilen != ndigits_dec(nd[ndhi]));
  437|  1.20k|      }
  438|  1.72k|      nde += ndebias;
  439|  1.72k|      if ((sf & STRFMT_T_FP_F)) {
  ------------------
  |  |   32|  1.72k|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
  |  Branch (439:11): [True: 1.72k, False: 0]
  ------------------
  440|       |	/* %g */
  441|  1.72k|	if ((int32_t)prec >= nde && nde >= -4) {
  ------------------
  |  Branch (441:6): [True: 907, False: 821]
  |  Branch (441:30): [True: 657, False: 250]
  ------------------
  442|    657|	  if (nde < 0) ndhi = 0;
  ------------------
  |  Branch (442:8): [True: 117, False: 540]
  ------------------
  443|    657|	  prec -= nde;
  444|    657|	  goto g_format_like_f;
  445|  1.07k|	} else if (!(sf & STRFMT_F_ALT) && prec && width > 5) {
  ------------------
  |  |   41|  1.07k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (445:13): [True: 1.07k, False: 0]
  |  Branch (445:37): [True: 1.07k, False: 0]
  |  Branch (445:45): [True: 0, False: 1.07k]
  ------------------
  446|       |	  /* Decrease precision in order to strip trailing zeroes. */
  447|      0|	  char tail[9];
  448|      0|	  uint32_t maxprec = hilen - 1 + ((ndhi - ndlo) & 0x3f) * 9;
  449|      0|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (449:8): [True: 0, False: 0]
  ------------------
  450|      0|	  else ndlo = (ndhi - (((int32_t)(prec - hilen) + 9) / 9)) & 0x3f;
  451|      0|	  i = prec - hilen - (((ndhi - ndlo) & 0x3f) * 9) + 10;
  452|      0|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  453|      0|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (453:11): [True: 0, False: 0]
  |  Branch (453:19): [True: 0, False: 0]
  ------------------
  454|      0|	    prec--;
  455|      0|	    if (!i) {
  ------------------
  |  Branch (455:10): [True: 0, False: 0]
  ------------------
  456|      0|	      if (ndlo == ndhi) { prec = 0; break; }
  ------------------
  |  Branch (456:12): [True: 0, False: 0]
  ------------------
  457|      0|	      ndlo = (ndlo + 1) & 0x3f;
  458|      0|	      lj_strfmt_wuint9(tail, nd[ndlo]);
  459|      0|	      i = 9;
  460|      0|	    }
  461|      0|	  }
  462|      0|	}
  463|  1.72k|      }
  464|  1.07k|      if (nde < 0) {
  ------------------
  |  Branch (464:11): [True: 250, False: 821]
  ------------------
  465|       |	/* Make nde non-negative. */
  466|    250|	eprefix = '-';
  467|    250|	nde = -nde;
  468|    250|      }
  469|  1.07k|      len = 3 + prec + (prefix != 0) + ndigits_dec((uint32_t)nde) + (nde < 10)
  470|  1.07k|	      + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|  1.07k|#define STRFMT_F_ALT	0x1000
  ------------------
  471|  1.07k|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 5);
  ------------------
  |  Branch (471:11): [True: 1.07k, False: 0]
  |  Branch (471:36): [True: 0, False: 1.07k]
  ------------------
  472|  1.07k|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|  1.07k|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|  1.07k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (472:11): [True: 1.07k, False: 0]
  ------------------
  473|  1.07k|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (473:9): [True: 0, False: 1.07k]
  ------------------
  474|  1.07k|      }
  475|  1.07k|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (475:11): [True: 306, False: 765]
  ------------------
  476|  1.07k|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|  1.07k|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  1.07k|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  1.07k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (476:11): [True: 0, False: 1.07k]
  ------------------
  477|      0|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (477:9): [True: 0, False: 0]
  ------------------
  478|      0|      }
  479|  1.07k|      q = lj_strfmt_wint(p + 1, nd[ndhi]);
  480|  1.07k|      p[0] = p[1]; /* Put leading digit in the correct place. */
  481|  1.07k|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|  1.07k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (481:11): [True: 1.07k, False: 0]
  ------------------
  482|       |	/* Emit fractional part. */
  483|  1.07k|	p[1] = '.'; p += 2;
  484|  1.07k|	prec -= (MSize)(q - p); p = q; /* Account for digits already emitted. */
  485|       |	/* Then emit chunks of 9 digits (this may emit 8 digits too many). */
  486|  2.61k|	for (i = ndhi; (int32_t)prec > 0 && i != ndlo; prec -= 9) {
  ------------------
  |  Branch (486:17): [True: 1.54k, False: 1.07k]
  |  Branch (486:38): [True: 1.54k, False: 1]
  ------------------
  487|  1.54k|	  i = (i - 1) & 0x3f;
  488|  1.54k|	  p = lj_strfmt_wuint9(p, nd[i]);
  489|  1.54k|	}
  490|  1.07k|	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   32|  1.07k|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|  1.07k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (490:6): [True: 1.07k, False: 0]
  |  Branch (490:30): [True: 1.07k, False: 0]
  ------------------
  491|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  492|  1.07k|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  493|  7.86k|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (493:11): [True: 6.79k, False: 1.07k]
  ------------------
  494|  1.07k|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (494:8): [True: 97, False: 974]
  ------------------
  495|  1.07k|	} else {
  496|       |	  /* %e (or %#g) - emit trailing zeroes. */
  497|      0|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (497:11): [True: 0, False: 0]
  ------------------
  498|      0|	  p += (int32_t)prec;
  499|      0|	}
  500|  1.07k|      } else {
  501|      0|	p++;
  502|      0|      }
  503|  1.07k|      *p++ = (sf & STRFMT_F_UPPER) ? 'E' : 'e';
  ------------------
  |  |   42|  1.07k|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (503:14): [True: 0, False: 1.07k]
  ------------------
  504|  1.07k|      *p++ = eprefix; /* + or - */
  505|  1.07k|      if (nde < 10) *p++ = '0'; /* Always at least two digits of exponent. */
  ------------------
  |  Branch (505:11): [True: 41, False: 1.03k]
  ------------------
  506|  1.07k|      p = lj_strfmt_wint(p, nde);
  507|  1.07k|    } else {
  508|       |      /* %f (or, shortly, %g in %f style) */
  509|      0|      if (prec < (MSize)(0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (509:11): [True: 0, False: 0]
  ------------------
  510|       |	/* Precision is sufficiently low as to maybe require rounding. */
  511|      0|	ndhi = nd_add_m10e(nd, ndhi, 5, 0 - prec - 1);
  512|      0|      }
  513|    657|      g_format_like_f:
  514|    657|      if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   31|    657|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
                    if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   41|    657|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (514:11): [True: 657, False: 0]
  |  Branch (514:35): [True: 657, False: 0]
  |  Branch (514:59): [True: 612, False: 45]
  |  Branch (514:67): [True: 0, False: 612]
  ------------------
  515|       |	/* Decrease precision in order to strip trailing zeroes. */
  516|      0|	if (ndlo) {
  ------------------
  |  Branch (516:6): [True: 0, False: 0]
  ------------------
  517|       |	  /* nd has a fractional part; we need to look at its digits. */
  518|      0|	  char tail[9];
  519|      0|	  uint32_t maxprec = (64 - ndlo) * 9;
  520|      0|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (520:8): [True: 0, False: 0]
  ------------------
  521|      0|	  else ndlo = 64 - (prec + 8) / 9;
  522|      0|	  i = prec - ((63 - ndlo) * 9);
  523|      0|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  524|      0|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (524:11): [True: 0, False: 0]
  |  Branch (524:19): [True: 0, False: 0]
  ------------------
  525|      0|	    prec--;
  526|      0|	    if (!i) {
  ------------------
  |  Branch (526:10): [True: 0, False: 0]
  ------------------
  527|      0|	      if (ndlo == 63) { prec = 0; break; }
  ------------------
  |  Branch (527:12): [True: 0, False: 0]
  ------------------
  528|      0|	      lj_strfmt_wuint9(tail, nd[++ndlo]);
  529|      0|	      i = 9;
  530|      0|	    }
  531|      0|	  }
  532|      0|	} else {
  533|       |	  /* nd has no fractional part, so precision goes straight to zero. */
  534|      0|	  prec = 0;
  535|      0|	}
  536|      0|      }
  537|    657|      len = ndhi * 9 + ndigits_dec(nd[ndhi]) + prec + (prefix != 0)
  538|    657|		     + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|    657|#define STRFMT_F_ALT	0x1000
  ------------------
  539|    657|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 8);
  ------------------
  |  Branch (539:11): [True: 657, False: 0]
  |  Branch (539:36): [True: 0, False: 657]
  ------------------
  540|    657|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|    657|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|    657|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (540:11): [True: 657, False: 0]
  ------------------
  541|    657|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (541:9): [True: 0, False: 657]
  ------------------
  542|    657|      }
  543|    657|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (543:11): [True: 48, False: 609]
  ------------------
  544|    657|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|    657|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|    657|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|    657|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (544:11): [True: 0, False: 657]
  ------------------
  545|      0|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (545:9): [True: 0, False: 0]
  ------------------
  546|      0|      }
  547|       |      /* Emit integer part. */
  548|    657|      p = lj_strfmt_wint(p, nd[ndhi]);
  549|    657|      i = ndhi;
  550|    755|      while (i) p = lj_strfmt_wuint9(p, nd[--i]);
  ------------------
  |  Branch (550:14): [True: 98, False: 657]
  ------------------
  551|    657|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|    657|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (551:11): [True: 612, False: 45]
  ------------------
  552|       |	/* Emit fractional part. */
  553|    612|	*p++ = '.';
  554|       |	/* Emit chunks of 9 digits (this may emit 8 digits too many). */
  555|    873|	while ((int32_t)prec > 0 && i != ndlo) {
  ------------------
  |  Branch (555:9): [True: 738, False: 135]
  |  Branch (555:30): [True: 261, False: 477]
  ------------------
  556|    261|	  i = (i - 1) & 0x3f;
  557|    261|	  p = lj_strfmt_wuint9(p, nd[i]);
  558|    261|	  prec -= 9;
  559|    261|	}
  560|    612|	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   31|    612|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|    612|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (560:6): [True: 612, False: 0]
  |  Branch (560:30): [True: 612, False: 0]
  ------------------
  561|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  562|    612|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  563|    863|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (563:11): [True: 251, False: 612]
  ------------------
  564|    612|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (564:8): [True: 474, False: 138]
  ------------------
  565|    612|	} else {
  566|       |	  /* %f (or %#g) - emit trailing zeroes. */
  567|      0|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (567:11): [True: 0, False: 0]
  ------------------
  568|      0|	  p += (int32_t)prec;
  569|      0|	}
  570|    612|      }
  571|    657|    }
  572|  2.42k|  }
  573|  1.76k|  if ((sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|  1.76k|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (573:7): [True: 0, False: 1.76k]
  |  Branch (573:36): [True: 0, False: 0]
  ------------------
  574|  1.76k|  return p;
  575|  1.76k|}
lj_strfmt_num.c:ndigits_dec:
   64|  5.36k|{
   65|  5.36k|  MSize t = ((lj_fls(x | 1) * 77) >> 8) + 1; /* 2^8/77 is roughly log2(10) */
  ------------------
  |  |  149|  5.36k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
   66|  5.36k|  return t + (x > ndigits_dec_threshold[t]);
   67|  5.36k|}
lj_strfmt_num.c:nd_mul2k:
  126|  2.93k|{
  127|  2.93k|  uint32_t i, ndlo = 0, start = 1;
  128|       |  /* Performance hacks. */
  129|  2.93k|  if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |  116|  2.93k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
                if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|    569|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|    569|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (129:7): [True: 569, False: 2.36k]
  |  Branch (129:35): [True: 569, False: 0]
  ------------------
  130|    569|    start = ndhi - (STRFMT_PREC(sf) + 17) / 8;
  ------------------
  |  |   50|    569|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|    569|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  131|    569|  }
  132|       |  /* Real logic. */
  133|  8.89k|  while (k >= ND_MUL2K_MAX_SHIFT) {
  ------------------
  |  |  116|  8.89k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  |  Branch (133:10): [True: 5.96k, False: 2.93k]
  ------------------
  134|  21.7k|    for (i = ndlo; i <= ndhi; i++) {
  ------------------
  |  Branch (134:20): [True: 15.8k, False: 5.96k]
  ------------------
  135|  15.8k|      uint64_t val = ((uint64_t)nd[i] << ND_MUL2K_MAX_SHIFT) | carry_in;
  ------------------
  |  |  116|  15.8k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  136|  15.8k|      carry_in = ND_MUL2K_DIV1E9(val);
  ------------------
  |  |  117|  15.8k|#define ND_MUL2K_DIV1E9(val)	((uint32_t)((val) / 1000000000))
  ------------------
  137|  15.8k|      nd[i] = (uint32_t)val - carry_in * 1000000000;
  138|  15.8k|    }
  139|  5.96k|    if (carry_in) {
  ------------------
  |  Branch (139:9): [True: 5.94k, False: 18]
  ------------------
  140|  5.94k|      nd[++ndhi] = carry_in; carry_in = 0;
  141|  5.94k|      if (start++ == ndlo) ++ndlo;
  ------------------
  |  Branch (141:11): [True: 2.66k, False: 3.27k]
  ------------------
  142|  5.94k|    }
  143|  5.96k|    k -= ND_MUL2K_MAX_SHIFT;
  ------------------
  |  |  116|  5.96k|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  144|  5.96k|  }
  145|  2.93k|  if (k) {
  ------------------
  |  Branch (145:7): [True: 848, False: 2.08k]
  ------------------
  146|  3.71k|    for (i = ndlo; i <= ndhi; i++) {
  ------------------
  |  Branch (146:20): [True: 2.86k, False: 848]
  ------------------
  147|  2.86k|      uint64_t val = ((uint64_t)nd[i] << k) | carry_in;
  148|  2.86k|      carry_in = ND_MUL2K_DIV1E9(val);
  ------------------
  |  |  117|  2.86k|#define ND_MUL2K_DIV1E9(val)	((uint32_t)((val) / 1000000000))
  ------------------
  149|  2.86k|      nd[i] = (uint32_t)val - carry_in * 1000000000;
  150|  2.86k|    }
  151|    848|    if (carry_in) nd[++ndhi] = carry_in;
  ------------------
  |  Branch (151:9): [True: 447, False: 401]
  ------------------
  152|    848|  }
  153|  2.93k|  return ndhi;
  154|  2.93k|}
lj_strfmt_num.c:nd_div2k:
  158|  1.54k|{
  159|  1.54k|  uint32_t ndlo = 0, stop1 = ~0, stop2 = ~0;
  160|       |  /* Performance hacks. */
  161|  1.54k|  if (!ndhi) {
  ------------------
  |  Branch (161:7): [True: 368, False: 1.18k]
  ------------------
  162|    368|    if (!nd[0]) {
  ------------------
  |  Branch (162:9): [True: 52, False: 316]
  ------------------
  163|     52|      return 0;
  164|    316|    } else {
  165|    316|      uint32_t s = lj_ffs(nd[0]);
  ------------------
  |  |  148|    316|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  166|    316|      if (s >= k) { nd[0] >>= k; return 0; }
  ------------------
  |  Branch (166:11): [True: 305, False: 11]
  ------------------
  167|     11|      nd[0] >>= s; k -= s;
  168|     11|    }
  169|    368|  }
  170|  1.19k|  if (k > 18) {
  ------------------
  |  Branch (170:7): [True: 973, False: 219]
  ------------------
  171|    973|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|    973|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|    973|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (171:9): [True: 0, False: 973]
  ------------------
  172|      0|      stop1 = 63 - (int32_t)STRFMT_PREC(sf) / 9;
  ------------------
  |  |   50|      0|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  173|    973|    } else {
  174|    973|      int32_t floorlog2 = ndhi * 29 + lj_fls(nd[ndhi]) - k;
  ------------------
  |  |  149|    973|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  175|    973|      int32_t floorlog10 = (int32_t)(floorlog2 * 0.30102999566398114);
  176|    973|      stop1 = 62 + (floorlog10 - (int32_t)STRFMT_PREC(sf)) / 9;
  ------------------
  |  |   50|    973|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|    973|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  177|    973|      stop2 = 61 + ndhi - (int32_t)STRFMT_PREC(sf) / 8;
  ------------------
  |  |   50|    973|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|    973|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  178|    973|    }
  179|    973|  }
  180|       |  /* Real logic. */
  181|  9.51k|  while (k >= 9) {
  ------------------
  |  Branch (181:10): [True: 8.32k, False: 1.19k]
  ------------------
  182|  8.32k|    uint32_t i = ndhi, carry = 0;
  183|  32.9k|    for (;;) {
  184|  32.9k|      uint32_t val = nd[i];
  185|  32.9k|      nd[i] = (val >> 9) + carry;
  186|  32.9k|      carry = (val & 0x1ff) * 1953125;
  187|  32.9k|      if (i == ndlo) break;
  ------------------
  |  Branch (187:11): [True: 8.32k, False: 24.5k]
  ------------------
  188|  24.5k|      i = (i - 1) & 0x3f;
  189|  24.5k|    }
  190|  8.32k|    if (ndlo != stop1 && ndlo != stop2) {
  ------------------
  |  Branch (190:9): [True: 6.34k, False: 1.98k]
  |  Branch (190:26): [True: 4.02k, False: 2.31k]
  ------------------
  191|  4.02k|      if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (191:11): [True: 3.80k, False: 217]
  ------------------
  192|  4.02k|      if (!nd[ndhi]) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (192:11): [True: 729, False: 3.29k]
  ------------------
  193|  4.30k|    } else if (!nd[ndhi]) {
  ------------------
  |  Branch (193:16): [True: 1.43k, False: 2.87k]
  ------------------
  194|  1.43k|      if (ndhi != ndlo) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (194:11): [True: 1.43k, False: 0]
  ------------------
  195|      0|      else return ndlo;
  196|  1.43k|    }
  197|  8.32k|    k -= 9;
  198|  8.32k|  }
  199|  1.19k|  if (k) {
  ------------------
  |  Branch (199:7): [True: 1.02k, False: 172]
  ------------------
  200|  1.02k|    uint32_t mask = (1U << k) - 1, mul = 1000000000 >> k, i = ndhi, carry = 0;
  201|  3.47k|    for (;;) {
  202|  3.47k|      uint32_t val = nd[i];
  203|  3.47k|      nd[i] = (val >> k) + carry;
  204|  3.47k|      carry = (val & mask) * mul;
  205|  3.47k|      if (i == ndlo) break;
  ------------------
  |  Branch (205:11): [True: 1.02k, False: 2.45k]
  ------------------
  206|  2.45k|      i = (i - 1) & 0x3f;
  207|  2.45k|    }
  208|  1.02k|    if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (208:9): [True: 744, False: 276]
  ------------------
  209|  1.02k|  }
  210|  1.19k|  return ndlo;
  211|  1.19k|}
lj_strfmt_num.c:nd_add_m10e:
  215|  1.94k|{
  216|  1.94k|  uint32_t i, carry;
  217|  1.94k|  if (e >= 0) {
  ------------------
  |  Branch (217:7): [True: 926, False: 1.01k]
  ------------------
  218|    926|    i = (uint32_t)e/9;
  219|    926|    carry = m * (ndigits_dec_threshold[e - (int32_t)i*9] + 1);
  220|  1.01k|  } else {
  221|  1.01k|    int32_t f = (e-8)/9;
  222|  1.01k|    i = (uint32_t)(64 + f);
  223|  1.01k|    carry = m * (ndigits_dec_threshold[e - f*9] + 1);
  224|  1.01k|  }
  225|  3.11k|  for (;;) {
  226|  3.11k|    uint32_t val = nd[i] + carry;
  227|  3.11k|    if (LJ_UNLIKELY(val >= 1000000000)) {
  ------------------
  |  |  146|  3.11k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.19k, False: 1.92k]
  |  |  ------------------
  ------------------
  228|  1.19k|      val -= 1000000000;
  229|  1.19k|      nd[i] = val;
  230|  1.19k|      if (LJ_UNLIKELY(i == ndhi)) {
  ------------------
  |  |  146|  1.19k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 25, False: 1.16k]
  |  |  ------------------
  ------------------
  231|     25|	ndhi = (ndhi + 1) & 0x3f;
  232|     25|	nd[ndhi] = 1;
  233|     25|	break;
  234|     25|      }
  235|  1.16k|      carry = 1;
  236|  1.16k|      i = (i + 1) & 0x3f;
  237|  1.92k|    } else {
  238|  1.92k|      nd[i] = val;
  239|  1.92k|      break;
  240|  1.92k|    }
  241|  3.11k|  }
  242|  1.94k|  return ndhi;
  243|  1.94k|}
lj_strfmt_num.c:nd_similar:
  248|    739|{
  249|    739|  char nd9[9], ref9[9];
  250|    739|  if (hilen <= prec) {
  ------------------
  |  Branch (250:7): [True: 739, False: 0]
  ------------------
  251|    739|    if (LJ_UNLIKELY(nd[ndhi] != *ref)) return 0;
  ------------------
  |  |  146|    739|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 226, False: 513]
  |  |  ------------------
  ------------------
  252|    513|    prec -= hilen; ref--; ndhi = (ndhi - 1) & 0x3f;
  253|    513|    if (prec >= 9) {
  ------------------
  |  Branch (253:9): [True: 396, False: 117]
  ------------------
  254|    396|      if (LJ_UNLIKELY(nd[ndhi] != *ref)) return 0;
  ------------------
  |  |  146|    396|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 283, False: 113]
  |  |  ------------------
  ------------------
  255|    113|      prec -= 9; ref--; ndhi = (ndhi - 1) & 0x3f;
  256|    113|    }
  257|    513|  } else {
  258|      0|    prec -= hilen - 9;
  259|      0|  }
  260|    230|  lj_assertX(prec < 9, "bad precision %d", prec);
  ------------------
  |  |  366|    230|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    230|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 230, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    230|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  261|    230|  lj_strfmt_wuint9(nd9, nd[ndhi]);
  262|    230|  lj_strfmt_wuint9(ref9, *ref);
  263|    230|  return !memcmp(nd9, ref9, prec) && (nd9[prec] < '5') == (ref9[prec] < '5');
  ------------------
  |  Branch (263:10): [True: 67, False: 163]
  |  Branch (263:38): [True: 39, False: 28]
  ------------------
  264|    230|}
lj_strfmt_num.c:lj_strfmt_wuint9:
   74|  2.36k|{
   75|  2.36k|  uint32_t v = u / 10000, w;
   76|  2.36k|  u -= v * 10000;
   77|  2.36k|  w = v / 10000;
   78|  2.36k|  v -= w * 10000;
   79|  2.36k|  *p++ = (char)('0'+w);
   80|  2.36k|  WINT_R(v, 23, 1000)
  ------------------
  |  |   70|  2.36k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   81|  2.36k|  WINT_R(v, 12, 100)
  ------------------
  |  |   70|  2.36k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   82|  2.36k|  WINT_R(v, 10, 10)
  ------------------
  |  |   70|  2.36k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   83|  2.36k|  *p++ = (char)('0'+v);
   84|  2.36k|  WINT_R(u, 23, 1000)
  ------------------
  |  |   70|  2.36k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   85|  2.36k|  WINT_R(u, 12, 100)
  ------------------
  |  |   70|  2.36k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   86|  2.36k|  WINT_R(u, 10, 10)
  ------------------
  |  |   70|  2.36k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   87|  2.36k|  *p++ = (char)('0'+u);
   88|  2.36k|  return p;
   89|  2.36k|}

lj_strscan_scan:
  377|  39.5k|{
  378|  39.5k|  int32_t neg = 0;
  379|  39.5k|  const uint8_t *pe = p + len;
  380|       |
  381|       |  /* Remove leading space, parse sign and non-numbers. */
  382|  39.5k|  if (LJ_UNLIKELY(!lj_char_isdigit(*p))) {
  ------------------
  |  |  146|  39.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 536, False: 39.0k]
  |  |  ------------------
  ------------------
  383|    594|    while (lj_char_isspace(*p)) p++;
  384|    536|    if (*p == '+' || *p == '-') neg = (*p++ == '-');
  ------------------
  |  Branch (384:9): [True: 3, False: 533]
  |  Branch (384:22): [True: 54, False: 479]
  ------------------
  385|    536|    if (LJ_UNLIKELY(*p >= 'A')) {  /* Parse "inf", "infinity" or "nan". */
  ------------------
  |  |  146|    536|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 15, False: 521]
  |  |  ------------------
  ------------------
  386|     15|      TValue tmp;
  387|     15|      setnanV(&tmp);
  ------------------
  |  |  946|     15|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|     15|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  388|     15|      if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|     30|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 3, False: 12]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|     18|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 3]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  389|      0|	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
              	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  947|      0|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p += 3;
  391|      0|	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  392|      0|	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  393|     15|      } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|     30|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 5, False: 10]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|     20|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2, False: 3]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      2|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 2]
  |  |  ------------------
  ------------------
  394|      0|	p += 3;
  395|      0|      }
  396|     15|      while (lj_char_isspace(*p)) p++;
  397|     15|      if (*p || p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (397:11): [True: 15, False: 0]
  |  Branch (397:17): [True: 0, False: 0]
  ------------------
  398|      0|      o->u64 = tmp.u64;
  399|      0|      return STRSCAN_NUM;
  400|     15|    }
  401|    536|  }
  402|       |
  403|       |  /* Parse regular number. */
  404|  39.5k|  {
  405|  39.5k|    StrScanFmt fmt = STRSCAN_INT;
  406|  39.5k|    int cmask = LJ_CHAR_DIGIT;
  ------------------
  |  |   14|  39.5k|#define LJ_CHAR_DIGIT	0x08
  ------------------
  407|  39.5k|    int base = (opt & STRSCAN_OPT_C) && *p == '0' ? 0 : 10;
  ------------------
  |  |   16|  39.5k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (407:16): [True: 0, False: 39.5k]
  |  Branch (407:41): [True: 0, False: 0]
  ------------------
  408|  39.5k|    const uint8_t *sp, *dp = NULL;
  409|  39.5k|    uint32_t dig = 0, hasdig = 0, x = 0;
  410|  39.5k|    int32_t ex = 0;
  411|       |
  412|       |    /* Determine base and skip leading zeros. */
  413|  39.5k|    if (LJ_UNLIKELY(*p <= '0')) {
  ------------------
  |  |  146|  39.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 4.69k, False: 34.8k]
  |  |  ------------------
  ------------------
  414|  4.69k|      if (*p == '0') {
  ------------------
  |  Branch (414:11): [True: 4.26k, False: 437]
  ------------------
  415|  4.26k|	if (casecmp(p[1], 'x'))
  ------------------
  |  |   73|  4.26k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 621, False: 3.63k]
  |  |  ------------------
  ------------------
  416|    621|	  base = 16, cmask = LJ_CHAR_XDIGIT, p += 2;
  ------------------
  |  |   15|    621|#define LJ_CHAR_XDIGIT	0x10
  ------------------
  417|  3.63k|	else if (casecmp(p[1], 'b'))
  ------------------
  |  |   73|  3.63k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 26, False: 3.61k]
  |  |  ------------------
  ------------------
  418|     26|	  base = 2, cmask = LJ_CHAR_DIGIT, p += 2;
  ------------------
  |  |   14|     26|#define LJ_CHAR_DIGIT	0x08
  ------------------
  419|  4.26k|      }
  420|  19.9k|      for ( ; ; p++) {
  421|  19.9k|	if (*p == '0') {
  ------------------
  |  Branch (421:6): [True: 14.7k, False: 5.17k]
  ------------------
  422|  14.7k|	  hasdig = 1;
  423|  14.7k|	} else if (*p == '.') {
  ------------------
  |  Branch (423:13): [True: 484, False: 4.69k]
  ------------------
  424|    484|	  if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (424:8): [True: 3, False: 481]
  ------------------
  425|    481|	  dp = p;
  426|  4.69k|	} else {
  427|  4.69k|	  break;
  428|  4.69k|	}
  429|  19.9k|      }
  430|  4.69k|    }
  431|       |
  432|       |    /* Preliminary digit and decimal point scan. */
  433|   416k|    for (sp = p; ; p++) {
  434|   416k|      if (LJ_LIKELY(lj_char_isa(*p, cmask))) {
  ------------------
  |  |  145|   416k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 374k, False: 42.0k]
  |  |  ------------------
  ------------------
  435|   374k|	x = x * 10 + (*p & 15);  /* For fast path below. */
  436|   374k|	dig++;
  437|   374k|      } else if (*p == '.') {
  ------------------
  |  Branch (437:18): [True: 2.47k, False: 39.5k]
  ------------------
  438|  2.47k|	if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (438:6): [True: 9, False: 2.46k]
  ------------------
  439|  2.46k|	dp = p;
  440|  39.5k|      } else {
  441|  39.5k|	break;
  442|  39.5k|      }
  443|   416k|    }
  444|  39.5k|    if (!(hasdig | dig)) return STRSCAN_ERROR;
  ------------------
  |  Branch (444:9): [True: 18, False: 39.5k]
  ------------------
  445|       |
  446|       |    /* Handle decimal point. */
  447|  39.5k|    if (dp) {
  ------------------
  |  Branch (447:9): [True: 2.93k, False: 36.5k]
  ------------------
  448|  2.93k|      if (base == 2) return STRSCAN_ERROR;
  ------------------
  |  Branch (448:11): [True: 2, False: 2.93k]
  ------------------
  449|  2.93k|      fmt = STRSCAN_NUM;
  450|  2.93k|      if (dig) {
  ------------------
  |  Branch (450:11): [True: 2.90k, False: 29]
  ------------------
  451|  2.90k|	ex = (int32_t)(dp-(p-1)); dp = p-1;
  452|  3.48k|	while (ex < 0 && *dp-- == '0') ex++, dig--;  /* Skip trailing zeros. */
  ------------------
  |  Branch (452:9): [True: 3.39k, False: 86]
  |  Branch (452:19): [True: 578, False: 2.82k]
  ------------------
  453|  2.90k|	if (ex <= -STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|  2.90k|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (453:6): [True: 0, False: 2.90k]
  ------------------
  454|  2.90k|	if (base == 16) ex *= 4;
  ------------------
  |  Branch (454:6): [True: 232, False: 2.67k]
  ------------------
  455|  2.90k|      }
  456|  2.93k|    }
  457|       |
  458|       |    /* Parse exponent. */
  459|  39.5k|    if (base >= 10 && casecmp(*p, (uint32_t)(base == 16 ? 'p' : 'e'))) {
  ------------------
  |  |   73|  78.9k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 658, False: 38.8k]
  |  |  |  Branch (73:40): [True: 619, False: 38.8k]
  |  |  ------------------
  ------------------
  |  Branch (459:9): [True: 39.4k, False: 24]
  ------------------
  460|    658|      uint32_t xx;
  461|    658|      int negx = 0;
  462|    658|      fmt = STRSCAN_NUM; p++;
  463|    658|      if (*p == '+' || *p == '-') negx = (*p++ == '-');
  ------------------
  |  Branch (463:11): [True: 6, False: 652]
  |  Branch (463:24): [True: 128, False: 524]
  ------------------
  464|    658|      if (!lj_char_isdigit(*p)) return STRSCAN_ERROR;
  ------------------
  |  |   28|    658|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    658|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (464:11): [True: 11, False: 647]
  ------------------
  465|    647|      xx = (*p++ & 15);
  466|    965|      while (lj_char_isdigit(*p)) {
  467|    965|	xx = xx * 10 + (*p & 15);
  468|    965|	if (xx >= STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|    965|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (468:6): [True: 7, False: 958]
  ------------------
  469|    958|	p++;
  470|    958|      }
  471|    640|      ex += negx ? (int32_t)(~xx+1u) : (int32_t)xx;
  ------------------
  |  Branch (471:13): [True: 127, False: 513]
  ------------------
  472|    640|    }
  473|       |
  474|       |    /* Parse suffix. */
  475|  39.4k|    if (*p) {
  ------------------
  |  Branch (475:9): [True: 7.45k, False: 32.0k]
  ------------------
  476|       |      /* I (IMAG), U (U32), LL (I64), ULL/LLU (U64), L (long), UL/LU (ulong). */
  477|       |      /* NYI: f (float). Not needed until cp_number() handles non-integers. */
  478|  7.45k|      if (casecmp(*p, 'i')) {
  ------------------
  |  |   73|  7.45k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 6.87k, False: 584]
  |  |  ------------------
  ------------------
  479|  6.87k|	if (!(opt & STRSCAN_OPT_IMAG)) return STRSCAN_ERROR;
  ------------------
  |  |   14|  6.87k|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  |  Branch (479:6): [True: 2, False: 6.87k]
  ------------------
  480|  6.87k|	p++; fmt = STRSCAN_IMAG;
  481|  6.87k|      } else if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (481:18): [True: 573, False: 11]
  ------------------
  482|    573|	if (casecmp(*p, 'u')) p++, fmt = STRSCAN_U32;
  ------------------
  |  |   73|    573|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 63, False: 510]
  |  |  ------------------
  ------------------
  483|    573|	if (casecmp(*p, 'l')) {
  ------------------
  |  |   73|    573|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 464, False: 109]
  |  |  ------------------
  ------------------
  484|    464|	  p++;
  485|    464|	  if (casecmp(*p, 'l')) p++, fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  |   73|    464|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 457, False: 7]
  |  |  ------------------
  ------------------
  486|      7|	  else if (!(opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|      7|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (486:13): [True: 7, False: 0]
  ------------------
  487|      0|	  else if (sizeof(long) == 8) fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  Branch (487:13): [Folded - Ignored]
  ------------------
  488|    464|	}
  489|    566|	if (casecmp(*p, 'u') && (fmt == STRSCAN_INT || fmt == STRSCAN_I64))
  ------------------
  |  |   73|  1.13k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 34, False: 532]
  |  |  ------------------
  ------------------
  |  Branch (489:27): [True: 0, False: 34]
  |  Branch (489:49): [True: 28, False: 6]
  ------------------
  490|     28|	  p++, fmt += STRSCAN_U32 - STRSCAN_INT;
  491|    566|	if ((fmt == STRSCAN_U32 && !(opt & STRSCAN_OPT_C)) ||
  ------------------
  |  |   16|      9|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (491:7): [True: 9, False: 557]
  |  Branch (491:29): [True: 9, False: 0]
  ------------------
  492|    566|	    (fmt >= STRSCAN_I64 && !(opt & STRSCAN_OPT_LL)))
  ------------------
  |  |   15|    457|#define STRSCAN_OPT_LL		0x08
  ------------------
  |  Branch (492:7): [True: 457, False: 100]
  |  Branch (492:29): [True: 2, False: 455]
  ------------------
  493|     11|	  return STRSCAN_ERROR;
  494|    566|      }
  495|  7.43k|      while (lj_char_isspace(*p)) p++;
  496|  7.43k|      if (*p) return STRSCAN_ERROR;
  ------------------
  |  Branch (496:11): [True: 80, False: 7.35k]
  ------------------
  497|  7.43k|    }
  498|  39.3k|    if (p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (498:9): [True: 2, False: 39.3k]
  ------------------
  499|       |
  500|       |    /* Fast path for decimal 32 bit integers. */
  501|  39.3k|    if (fmt == STRSCAN_INT && base == 10 &&
  ------------------
  |  Branch (501:9): [True: 28.5k, False: 10.8k]
  |  Branch (501:31): [True: 28.1k, False: 398]
  ------------------
  502|  39.3k|	(dig < 10 || (dig == 10 && *sp <= '2' && x < 0x80000000u+neg))) {
  ------------------
  |  Branch (502:3): [True: 19.6k, False: 8.55k]
  |  Branch (502:16): [True: 872, False: 7.68k]
  |  Branch (502:29): [True: 317, False: 555]
  |  Branch (502:43): [True: 294, False: 23]
  ------------------
  503|  19.8k|      if ((opt & STRSCAN_OPT_TONUM)) {
  ------------------
  |  |   13|  19.8k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (503:11): [True: 19.8k, False: 0]
  ------------------
  504|  19.8k|	o->n = neg ? -(double)x : (double)x;
  ------------------
  |  Branch (504:9): [True: 42, False: 19.8k]
  ------------------
  505|  19.8k|	return STRSCAN_NUM;
  506|  19.8k|      } else if (x == 0 && neg) {
  ------------------
  |  Branch (506:18): [True: 0, False: 0]
  |  Branch (506:28): [True: 0, False: 0]
  ------------------
  507|      0|	o->n = -0.0;
  508|      0|	return STRSCAN_NUM;
  509|      0|      } else {
  510|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (510:9): [True: 0, False: 0]
  ------------------
  511|      0|	return STRSCAN_INT;
  512|      0|      }
  513|  19.8k|    }
  514|       |
  515|       |    /* Dispatch to base-specific parser. */
  516|  19.5k|    if (base == 0 && !(fmt == STRSCAN_NUM || fmt == STRSCAN_IMAG))
  ------------------
  |  Branch (516:9): [True: 0, False: 19.5k]
  |  Branch (516:24): [True: 0, False: 0]
  |  Branch (516:46): [True: 0, False: 0]
  ------------------
  517|      0|      return strscan_oct(sp, o, fmt, neg, dig);
  518|  19.5k|    if (base == 16)
  ------------------
  |  Branch (518:9): [True: 618, False: 18.8k]
  ------------------
  519|    618|      fmt = strscan_hex(sp, o, fmt, opt, ex, neg, dig);
  520|  18.8k|    else if (base == 2)
  ------------------
  |  Branch (520:14): [True: 24, False: 18.8k]
  ------------------
  521|     24|      fmt = strscan_bin(sp, o, fmt, opt, ex, neg, dig);
  522|  18.8k|    else
  523|  18.8k|      fmt = strscan_dec(sp, o, fmt, opt, ex, neg, dig);
  524|       |
  525|       |    /* Try to convert number to integer, if requested. */
  526|  19.5k|    if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |   12|  12.1k|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
                  if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (526:9): [True: 12.1k, False: 7.30k]
  |  Branch (526:31): [True: 0, False: 12.1k]
  |  Branch (526:60): [True: 0, False: 0]
  ------------------
  527|      0|      double n = o->n;
  528|      0|      int32_t i = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  529|      0|      if (n == (lua_Number)i) { o->i = i; return STRSCAN_INT; }
  ------------------
  |  Branch (529:11): [True: 0, False: 0]
  ------------------
  530|      0|    }
  531|  19.5k|    return fmt;
  532|  19.5k|  }
  533|  19.5k|}
lj_strscan_num:
  536|    125|{
  537|    125|  StrScanFmt fmt = lj_strscan_scan((const uint8_t *)strdata(str), str->len, o,
  ------------------
  |  |  316|    125|#define strdata(s)	((const char *)((s)+1))
  ------------------
  538|    125|				   STRSCAN_OPT_TONUM);
  ------------------
  |  |   13|    125|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  539|    125|  lj_assertX(fmt == STRSCAN_ERROR || fmt == STRSCAN_NUM, "bad scan format");
  ------------------
  |  |  366|    125|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    193|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 57, False: 68]
  |  |  |  |  |  Branch (355:5): [True: 68, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    125|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|    125|  return (fmt != STRSCAN_ERROR);
  541|    125|}
lj_strscan.c:strscan_hex:
  108|    618|{
  109|    618|  uint64_t x = 0;
  110|    618|  uint32_t i;
  111|       |
  112|       |  /* Scan hex digits. */
  113|  6.92k|  for (i = dig > 16 ? 16 : dig ; i; i--, p++) {
  ------------------
  |  Branch (113:12): [True: 220, False: 398]
  |  Branch (113:34): [True: 6.30k, False: 618]
  ------------------
  114|  6.30k|    uint32_t d = (*p != '.' ? *p : *++p); if (d > '9') d += 9;
  ------------------
  |  Branch (114:19): [True: 6.13k, False: 173]
  |  Branch (114:47): [True: 140, False: 6.16k]
  ------------------
  115|  6.30k|    x = (x << 4) + (d & 15);
  116|  6.30k|  }
  117|       |
  118|       |  /* Summarize rounding-effect of excess digits. */
  119|  5.50k|  for (i = 16; i < dig; i++, p++)
  ------------------
  |  Branch (119:16): [True: 4.88k, False: 618]
  ------------------
  120|  4.88k|    x |= ((*p != '.' ? *p : *++p) != '0'), ex2 += 4;
  ------------------
  |  Branch (120:12): [True: 4.83k, False: 55]
  ------------------
  121|       |
  122|       |  /* Format-specific handling. */
  123|    618|  switch (fmt) {
  124|    376|  case STRSCAN_INT:
  ------------------
  |  Branch (124:3): [True: 376, False: 242]
  ------------------
  125|    376|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg &&
  ------------------
  |  |   13|    376|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (125:9): [True: 0, False: 376]
  |  Branch (125:39): [True: 0, False: 0]
  ------------------
  126|    376|	!(x == 0 && neg)) {
  ------------------
  |  Branch (126:4): [True: 0, False: 0]
  |  Branch (126:14): [True: 0, False: 0]
  ------------------
  127|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (127:14): [True: 0, False: 0]
  ------------------
  128|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  129|      0|    }
  130|    376|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|    376|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (130:9): [True: 376, False: 0]
  ------------------
  131|       |    /* fallthrough */
  132|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (132:3): [True: 0, False: 618]
  ------------------
  133|      0|    if (dig > 8) return STRSCAN_ERROR;
  ------------------
  |  Branch (133:9): [True: 0, False: 0]
  ------------------
  134|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (134:12): [True: 0, False: 0]
  ------------------
  135|      0|    return STRSCAN_U32;
  136|      3|  case STRSCAN_I64:
  ------------------
  |  Branch (136:3): [True: 3, False: 615]
  ------------------
  137|      4|  case STRSCAN_U64:
  ------------------
  |  Branch (137:3): [True: 1, False: 617]
  ------------------
  138|      4|    if (dig > 16) return STRSCAN_ERROR;
  ------------------
  |  Branch (138:9): [True: 1, False: 3]
  ------------------
  139|      3|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (139:14): [True: 0, False: 3]
  ------------------
  140|      3|    return fmt;
  141|    238|  default:
  ------------------
  |  Branch (141:3): [True: 238, False: 380]
  ------------------
  142|    238|    break;
  143|    618|  }
  144|       |
  145|       |  /* Reduce range, then convert to double. */
  146|    614|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|    614|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (146:7): [True: 256, False: 358]
  ------------------
  147|    614|  strscan_double(x, o, ex2, neg);
  148|    614|  return fmt;
  149|    618|}
lj_strscan.c:strscan_double:
   77|  7.97k|{
   78|  7.97k|  double n;
   79|       |
   80|       |  /* Avoid double rounding for denormals. */
   81|  7.97k|  if (LJ_UNLIKELY(ex2 <= -1075 && x != 0)) {
  ------------------
  |  |  146|  8.05k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 80, False: 7.89k]
  |  |  |  Branch (146:44): [True: 80, False: 7.89k]
  |  |  |  Branch (146:44): [True: 80, False: 0]
  |  |  ------------------
  ------------------
   82|       |    /* NYI: all of this generates way too much code on 32 bit CPUs. */
   83|     80|#if (defined(__GNUC__) || defined(__clang__)) && LJ_64
   84|     80|    int32_t b = (int32_t)(__builtin_clzll(x)^63);
   85|       |#else
   86|       |    int32_t b = (x>>32) ? 32+(int32_t)lj_fls((uint32_t)(x>>32)) :
   87|       |			  (int32_t)lj_fls((uint32_t)x);
   88|       |#endif
   89|     80|    if ((int32_t)b + ex2 <= -1023 && (int32_t)b + ex2 >= -1075) {
  ------------------
  |  Branch (89:9): [True: 68, False: 12]
  |  Branch (89:38): [True: 62, False: 6]
  ------------------
   90|     62|      uint64_t rb = (uint64_t)1 << (-1075-ex2);
   91|     62|      if ((x & rb) && ((x & (rb+rb+rb-1)))) x += rb+rb;
  ------------------
  |  Branch (91:11): [True: 25, False: 37]
  |  Branch (91:23): [True: 25, False: 0]
  ------------------
   92|     62|      x = (x & ~(rb+rb-1));
   93|     62|    }
   94|     80|  }
   95|       |
   96|       |  /* Convert to double using a signed int64_t conversion, then rescale. */
   97|  7.97k|  lj_assertX((int64_t)x >= 0, "bad double conversion");
  ------------------
  |  |  366|  7.97k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.97k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.97k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.97k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   98|  7.97k|  n = (double)(int64_t)x;
   99|  7.97k|  if (neg) n = -n;
  ------------------
  |  Branch (99:7): [True: 3, False: 7.96k]
  ------------------
  100|  7.97k|  if (ex2) n = ldexp(n, ex2);
  ------------------
  |  Branch (100:7): [True: 7.72k, False: 242]
  ------------------
  101|  7.97k|  o->n = n;
  102|  7.97k|}
lj_strscan.c:strscan_bin:
  335|     24|{
  336|     24|  uint64_t x = 0;
  337|     24|  uint32_t i;
  338|       |
  339|     24|  if (ex2 || dig > 64) return STRSCAN_ERROR;
  ------------------
  |  Branch (339:7): [True: 0, False: 24]
  |  Branch (339:14): [True: 1, False: 23]
  ------------------
  340|       |
  341|       |  /* Scan binary digits. */
  342|    270|  for (i = dig; i; i--, p++) {
  ------------------
  |  Branch (342:17): [True: 248, False: 22]
  ------------------
  343|    248|    if ((*p & ~1) != '0') return STRSCAN_ERROR;
  ------------------
  |  Branch (343:9): [True: 1, False: 247]
  ------------------
  344|    247|    x = (x << 1) | (*p & 1);
  345|    247|  }
  346|       |
  347|       |  /* Format-specific handling. */
  348|     22|  switch (fmt) {
  349|     20|  case STRSCAN_INT:
  ------------------
  |  Branch (349:3): [True: 20, False: 2]
  ------------------
  350|     20|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|     20|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (350:9): [True: 0, False: 20]
  |  Branch (350:39): [True: 0, False: 0]
  ------------------
  351|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (351:14): [True: 0, False: 0]
  ------------------
  352|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  353|      0|    }
  354|     20|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|     20|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (354:9): [True: 20, False: 0]
  ------------------
  355|       |    /* fallthrough */
  356|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (356:3): [True: 0, False: 22]
  ------------------
  357|      0|    if (dig > 32) return STRSCAN_ERROR;
  ------------------
  |  Branch (357:9): [True: 0, False: 0]
  ------------------
  358|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (358:12): [True: 0, False: 0]
  ------------------
  359|      0|    return STRSCAN_U32;
  360|      1|  case STRSCAN_I64:
  ------------------
  |  Branch (360:3): [True: 1, False: 21]
  ------------------
  361|      1|  case STRSCAN_U64:
  ------------------
  |  Branch (361:3): [True: 0, False: 22]
  ------------------
  362|      1|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (362:14): [True: 0, False: 1]
  ------------------
  363|      1|    return fmt;
  364|      1|  default:
  ------------------
  |  Branch (364:3): [True: 1, False: 21]
  ------------------
  365|      1|    break;
  366|     22|  }
  367|       |
  368|       |  /* Reduce range, then convert to double. */
  369|     21|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|     21|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (369:7): [True: 1, False: 20]
  ------------------
  370|     21|  strscan_double(x, o, ex2, neg);
  371|     21|  return fmt;
  372|     22|}
lj_strscan.c:strscan_dec:
  186|  18.8k|{
  187|  18.8k|  uint8_t xi[STRSCAN_DDIG], *xip = xi;
  188|       |
  189|  18.8k|  if (dig) {
  ------------------
  |  Branch (189:7): [True: 18.8k, False: 49]
  ------------------
  190|  18.8k|    uint32_t i = dig;
  191|  18.8k|    if (i > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|  18.8k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (191:9): [True: 22, False: 18.7k]
  ------------------
  192|     22|      ex10 += (int32_t)(i - STRSCAN_MAXDIG);
  ------------------
  |  |   63|     22|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  193|     22|      i = STRSCAN_MAXDIG;
  ------------------
  |  |   63|     22|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  194|     22|    }
  195|       |    /* Scan unaligned leading digit. */
  196|  18.8k|    if (((ex10^i) & 1))
  ------------------
  |  Branch (196:9): [True: 9.52k, False: 9.28k]
  ------------------
  197|  9.52k|      *xip++ = ((*p != '.' ? *p : *++p) & 15), i--, p++;
  ------------------
  |  Branch (197:18): [True: 9.52k, False: 0]
  ------------------
  198|       |    /* Scan aligned double-digits. */
  199|   164k|    for ( ; i > 1; i -= 2) {
  ------------------
  |  Branch (199:13): [True: 145k, False: 18.8k]
  ------------------
  200|   145k|      uint32_t d = 10 * ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (200:27): [True: 143k, False: 1.61k]
  ------------------
  201|   145k|      *xip++ = d + ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (201:22): [True: 145k, False: 12]
  ------------------
  202|   145k|    }
  203|       |    /* Scan and realign trailing digit. */
  204|  18.8k|    if (i) *xip++ = 10 * ((*p != '.' ? *p : *++p) & 15), ex10--, dig++, p++;
  ------------------
  |  Branch (204:9): [True: 1.98k, False: 16.8k]
  |  Branch (204:28): [True: 1.47k, False: 509]
  ------------------
  205|       |
  206|       |    /* Summarize rounding-effect of excess digits. */
  207|  18.8k|    if (dig > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|  18.8k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (207:9): [True: 22, False: 18.7k]
  ------------------
  208|    414|      do {
  209|    414|	if ((*p != '.' ? *p : *++p) != '0') { xip[-1] |= 1; break; }
  ------------------
  |  Branch (209:6): [True: 19, False: 395]
  |  Branch (209:7): [True: 413, False: 1]
  ------------------
  210|    395|	p++;
  211|    395|      } while (--dig > STRSCAN_MAXDIG);
  ------------------
  |  |   63|    395|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (211:16): [True: 392, False: 3]
  ------------------
  212|     22|      dig = STRSCAN_MAXDIG;
  ------------------
  |  |   63|     22|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  213|  18.7k|    } else {  /* Simplify exponent. */
  214|  20.4k|      while (ex10 > 0 && dig <= 18) *xip++ = 0, ex10 -= 2, dig += 2;
  ------------------
  |  Branch (214:14): [True: 2.03k, False: 18.3k]
  |  Branch (214:26): [True: 1.64k, False: 397]
  ------------------
  215|  18.7k|    }
  216|  18.8k|  } else {  /* Only got zeros. */
  217|     49|    ex10 = 0;
  218|     49|    xi[0] = 0;
  219|     49|  }
  220|       |
  221|       |  /* Fast path for numbers in integer format (but handles e.g. 1e6, too). */
  222|  18.8k|  if (dig <= 20 && ex10 == 0) {
  ------------------
  |  Branch (222:7): [True: 14.3k, False: 4.52k]
  |  Branch (222:20): [True: 11.7k, False: 2.58k]
  ------------------
  223|  11.7k|    uint8_t *xis;
  224|  11.7k|    uint64_t x = xi[0];
  225|  11.7k|    double n;
  226|  47.8k|    for (xis = xi+1; xis < xip; xis++) x = x * 100 + *xis;
  ------------------
  |  Branch (226:22): [True: 36.1k, False: 11.7k]
  ------------------
  227|  11.7k|    if (!(dig == 20 && (xi[0] > 18 || (int64_t)x >= 0))) {  /* No overflow? */
  ------------------
  |  Branch (227:11): [True: 443, False: 11.3k]
  |  Branch (227:25): [True: 362, False: 81]
  |  Branch (227:39): [True: 1, False: 80]
  ------------------
  228|       |      /* Format-specific handling. */
  229|  11.3k|      switch (fmt) {
  230|  4.11k|      case STRSCAN_INT:
  ------------------
  |  Branch (230:7): [True: 4.11k, False: 7.27k]
  ------------------
  231|  4.11k|	if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|  4.11k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (231:6): [True: 0, False: 4.11k]
  |  Branch (231:36): [True: 0, False: 0]
  ------------------
  232|      0|	  o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (232:11): [True: 0, False: 0]
  ------------------
  233|      0|	  return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  234|      0|	}
  235|  4.11k|	if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; goto plainnumber; }
  ------------------
  |  |   16|  4.11k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (235:6): [True: 4.11k, False: 0]
  ------------------
  236|       |	/* fallthrough */
  237|      0|      case STRSCAN_U32:
  ------------------
  |  Branch (237:7): [True: 0, False: 11.3k]
  ------------------
  238|      0|	if ((x >> 32) != 0) return STRSCAN_ERROR;
  ------------------
  |  Branch (238:6): [True: 0, False: 0]
  ------------------
  239|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (239:9): [True: 0, False: 0]
  ------------------
  240|      0|	return STRSCAN_U32;
  241|    367|      case STRSCAN_I64:
  ------------------
  |  Branch (241:7): [True: 367, False: 11.0k]
  ------------------
  242|    448|      case STRSCAN_U64:
  ------------------
  |  Branch (242:7): [True: 81, False: 11.3k]
  ------------------
  243|    448|	o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (243:11): [True: 0, False: 448]
  ------------------
  244|    448|	return fmt;
  245|  6.82k|      default:
  ------------------
  |  Branch (245:7): [True: 6.82k, False: 4.56k]
  ------------------
  246|  10.9k|      plainnumber:  /* Fast path for plain numbers < 2^63. */
  247|  10.9k|	if ((int64_t)x < 0) break;
  ------------------
  |  Branch (247:6): [True: 86, False: 10.8k]
  ------------------
  248|  10.8k|	n = (double)(int64_t)x;
  249|  10.8k|	if (neg) n = -n;
  ------------------
  |  Branch (249:6): [True: 3, False: 10.8k]
  ------------------
  250|  10.8k|	o->n = n;
  251|  10.8k|	return fmt;
  252|  11.3k|      }
  253|  11.3k|    }
  254|  11.7k|  }
  255|       |
  256|       |  /* Slow non-integer path. */
  257|  7.56k|  if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (257:7): [True: 4.14k, False: 3.41k]
  ------------------
  258|  4.14k|    if ((opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|  4.14k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (258:9): [True: 0, False: 4.14k]
  ------------------
  259|  4.14k|    fmt = STRSCAN_NUM;
  260|  4.14k|  } else if (fmt > STRSCAN_INT) {
  ------------------
  |  Branch (260:14): [True: 1, False: 3.41k]
  ------------------
  261|      1|    return STRSCAN_ERROR;
  262|      1|  }
  263|  7.55k|  {
  264|  7.55k|    uint32_t hi = 0, lo = (uint32_t)(xip-xi);
  265|  7.55k|    int32_t ex2 = 0, idig = (int32_t)lo + (ex10 >> 1);
  266|       |
  267|  7.55k|    lj_assertX(lo > 0 && (ex10 & 1) == 0, "bad lo %d ex10 %d", lo, ex10);
  ------------------
  |  |  366|  7.55k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  15.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 7.55k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 7.55k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.55k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  268|       |
  269|       |    /* Handle simple overflow/underflow. */
  270|  7.55k|    if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
                  if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  947|    196|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|    196|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (270:9): [True: 196, False: 7.36k]
  |  Branch (270:29): [True: 0, False: 196]
  ------------------
  271|  7.36k|    else if (idig < -326/2) { o->n = neg ? -0.0 : 0.0; return fmt; }
  ------------------
  |  Branch (271:14): [True: 28, False: 7.33k]
  |  Branch (271:38): [True: 0, False: 28]
  ------------------
  272|       |
  273|       |    /* Scale up until we have at least 17 or 18 integer part digits. */
  274|  37.9k|    while (idig < 9 && idig < DLEN(lo, hi)) {
  ------------------
  |  |   71|  30.8k|#define DLEN(lo, hi)	((int32_t)(((lo)-(hi)) & STRSCAN_DMASK))
  |  |  ------------------
  |  |  |  |   65|  30.8k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  30.8k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.8k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (274:12): [True: 30.8k, False: 7.11k]
  |  Branch (274:24): [True: 30.6k, False: 220]
  ------------------
  275|  30.6k|      uint32_t i, cy = 0;
  276|  30.6k|      ex2 -= 6;
  277|  1.77M|      for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|  30.6k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  30.6k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  30.6k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  30.6k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|  1.74M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  1.74M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  1.74M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  1.74M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  278|  1.77M|	uint32_t d = (xi[i] << 6) + cy;
  279|  1.77M|	cy = (((d >> 2) * 5243) >> 17); d = d - cy * 100;  /* Div/mod 100. */
  280|  1.77M|	xi[i] = (uint8_t)d;
  281|  1.77M|	if (i == hi) break;
  ------------------
  |  Branch (281:6): [True: 30.6k, False: 1.74M]
  ------------------
  282|  1.74M|	if (d == 0 && i == DPREV(lo)) lo = i;
  ------------------
  |  |   70|   246k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   246k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   246k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   246k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (282:6): [True: 246k, False: 1.49M]
  |  Branch (282:16): [True: 140, False: 246k]
  ------------------
  283|  1.74M|      }
  284|  30.6k|      if (cy) {
  ------------------
  |  Branch (284:11): [True: 27.5k, False: 3.12k]
  ------------------
  285|  27.5k|	hi = DPREV(hi);
  ------------------
  |  |   70|  27.5k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  27.5k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  27.5k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.5k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  286|  27.5k|	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|  27.5k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  27.5k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  27.5k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  27.5k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|    137|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    137|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    137|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    137|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (286:6): [True: 137, False: 27.3k]
  ------------------
  287|  27.3k|	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|     85|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|     85|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|     85|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     85|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|     85|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|     85|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|     85|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|     85|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 85, False: 27.2k]
  ------------------
  288|  27.5k|	xi[hi] = (uint8_t)cy; idig++;
  289|  27.5k|      }
  290|  30.6k|    }
  291|       |
  292|       |    /* Scale down until no more than 17 or 18 integer part digits remain. */
  293|  59.0k|    while (idig > 9) {
  ------------------
  |  Branch (293:12): [True: 51.6k, False: 7.33k]
  ------------------
  294|  51.6k|      uint32_t i = hi, cy = 0;
  295|  51.6k|      ex2 += 6;
  296|  2.81M|      do {
  297|  2.81M|	cy += xi[i];
  298|  2.81M|	xi[i] = (cy >> 6);
  299|  2.81M|	cy = 100 * (cy & 0x3f);
  300|  2.81M|	if (xi[i] == 0 && i == hi) hi = DNEXT(hi), idig--;
  ------------------
  |  |   69|  46.5k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  46.5k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  46.5k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  46.5k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (300:6): [True: 203k, False: 2.61M]
  |  Branch (300:20): [True: 46.5k, False: 156k]
  ------------------
  301|  2.81M|	i = DNEXT(i);
  ------------------
  |  |   69|  2.81M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  2.81M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  2.81M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  2.81M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|  2.81M|      } while (i != lo);
  ------------------
  |  Branch (302:16): [True: 2.76M, False: 51.6k]
  ------------------
  303|   202k|      while (cy) {
  ------------------
  |  Branch (303:14): [True: 151k, False: 51.4k]
  ------------------
  304|   151k|	if (hi == lo) { xi[DPREV(lo)] |= 1; break; }
  ------------------
  |  |   70|    218|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    218|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    218|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    218|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (304:6): [True: 218, False: 151k]
  ------------------
  305|   151k|	xi[lo] = (cy >> 6); lo = DNEXT(lo);
  ------------------
  |  |   69|   151k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   151k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   151k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   151k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|   151k|	cy = 100 * (cy & 0x3f);
  307|   151k|      }
  308|  51.6k|    }
  309|       |
  310|       |    /* Collect integer part digits and convert to rescaled double. */
  311|  7.33k|    {
  312|  7.33k|      uint64_t x = xi[hi];
  313|  7.33k|      uint32_t i;
  314|  64.3k|      for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|  7.33k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  7.33k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  7.33k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  7.33k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|  57.0k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  57.0k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  57.0k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  57.0k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (314:27): [True: 57.0k, False: 7.32k]
  |  Branch (314:41): [True: 57.0k, False: 9]
  ------------------
  315|  57.0k|	x = x * 100 + xi[i];
  316|  7.33k|      if (i == lo) {
  ------------------
  |  Branch (316:11): [True: 234, False: 7.10k]
  ------------------
  317|    244|	while (--idig >= 0) x = x * 100;
  ------------------
  |  Branch (317:9): [True: 10, False: 234]
  ------------------
  318|  7.10k|      } else {  /* Gather round bit from remaining digits. */
  319|  7.10k|	x <<= 1; ex2--;
  320|  7.45k|	do {
  321|  7.45k|	  if (xi[i]) { x |= 1; break; }
  ------------------
  |  Branch (321:8): [True: 7.10k, False: 354]
  ------------------
  322|    354|	  i = DNEXT(i);
  ------------------
  |  |   69|    354|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    354|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    354|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    354|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|    354|	} while (i != lo);
  ------------------
  |  Branch (323:11): [True: 353, False: 1]
  ------------------
  324|  7.10k|      }
  325|      0|      strscan_double(x, o, ex2, neg);
  326|  7.33k|    }
  327|  7.33k|  }
  328|      0|  return fmt;
  329|  7.55k|}

lj_tab_new:
  140|  76.1k|{
  141|  76.1k|  GCtab *t = newtab(L, asize, hbits);
  142|  76.1k|  clearapart(t);
  143|  76.1k|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 68.0k, False: 8.07k]
  ------------------
  144|  76.1k|  return t;
  145|  76.1k|}
lj_tab_new_ah:
  149|  51.7k|{
  150|  51.7k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|  51.7k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  45.4k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 48.5k, False: 3.10k]
  |  |  |  Branch (53:32): [True: 3.10k, False: 45.4k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 3.10k, False: 48.5k]
  ------------------
  151|  51.7k|}
lj_tab_dup:
  165|     55|{
  166|     55|  GCtab *t;
  167|     55|  uint32_t asize, hmask;
  168|     55|  t = newtab(L, kt->asize, kt->hmask > 0 ? lj_fls(kt->hmask)+1 : 0);
  ------------------
  |  |  149|     44|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (168:28): [True: 44, False: 11]
  ------------------
  169|     55|  lj_assertL(kt->asize == t->asize && kt->hmask == t->hmask,
  ------------------
  |  |  365|     55|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    110|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 55, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 55, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     55|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  170|     55|	     "mismatched size of table and template");
  171|     55|  t->nomm = 0;  /* Keys with metamethod names may be present. */
  172|     55|  asize = kt->asize;
  173|     55|  if (asize > 0) {
  ------------------
  |  Branch (173:7): [True: 14, False: 41]
  ------------------
  174|     14|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|     14|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     14|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  175|     14|    TValue *karray = tvref(kt->array);
  ------------------
  |  |  217|     14|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|     14|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  176|     14|    if (asize < 64) {  /* An inlined loop beats memcpy for < 512 bytes. */
  ------------------
  |  Branch (176:9): [True: 14, False: 0]
  ------------------
  177|     14|      uint32_t i;
  178|     77|      for (i = 0; i < asize; i++)
  ------------------
  |  Branch (178:19): [True: 63, False: 14]
  ------------------
  179|     63|	copyTV(L, &array[i], &karray[i]);
  180|     14|    } else {
  181|      0|      memcpy(array, karray, asize*sizeof(TValue));
  182|      0|    }
  183|     14|  }
  184|     55|  hmask = kt->hmask;
  185|     55|  if (hmask > 0) {
  ------------------
  |  Branch (185:7): [True: 44, False: 11]
  ------------------
  186|     44|    uint32_t i;
  187|     44|    Node *node = noderef(t->node);
  ------------------
  |  |  515|     44|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|     44|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|     44|    Node *knode = noderef(kt->node);
  ------------------
  |  |  515|     44|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|     44|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  189|     44|    ptrdiff_t d = (char *)node - (char *)knode;
  190|     44|    setfreetop(t, node, (Node *)((char *)getfreetop(kt, knode) + d));
  ------------------
  |  |  519|     44|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|     44|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  191|    132|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (191:17): [True: 88, False: 44]
  ------------------
  192|     88|      Node *kn = &knode[i];
  193|     88|      Node *n = &node[i];
  194|     88|      Node *next = nextnode(kn);
  ------------------
  |  |  516|     88|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|     88|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  195|       |      /* Don't use copyTV here, since it asserts on a copy of a dead key. */
  196|     88|      n->val = kn->val; n->key = kn->key;
  197|     88|      setmref(n->next, next == NULL? next : (Node *)((char *)next + d));
  ------------------
  |  |   39|    176|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:55): [True: 74, False: 14]
  |  |  ------------------
  ------------------
  198|     88|    }
  199|     44|  }
  200|     55|  return t;
  201|     55|}
lj_tab_free:
  216|  76.1k|{
  217|  76.1k|  if (t->hmask > 0)
  ------------------
  |  Branch (217:7): [True: 71.2k, False: 4.93k]
  ------------------
  218|  71.2k|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|  71.2k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  219|  76.1k|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|  4.46k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (219:7): [True: 4.46k, False: 71.7k]
  |  Branch (219:23): [Folded - Ignored]
  |  Branch (219:47): [True: 877, False: 3.59k]
  ------------------
  220|    877|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|    877|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  221|  76.1k|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|  76.1k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (221:7): [Folded - Ignored]
  |  Branch (221:31): [True: 4.46k, False: 71.7k]
  ------------------
  222|  4.46k|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|  4.46k|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  223|  71.7k|  else
  224|  71.7k|    lj_mem_freet(g, t);
  ------------------
  |  |  134|  71.7k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  225|  76.1k|}
lj_tab_resize:
  231|  22.5k|{
  232|  22.5k|  Node *oldnode = noderef(t->node);
  ------------------
  |  |  515|  22.5k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  22.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  233|  22.5k|  uint32_t oldasize = t->asize;
  234|  22.5k|  uint32_t oldhmask = t->hmask;
  235|  22.5k|  if (asize > oldasize) {  /* Array part grows? */
  ------------------
  |  Branch (235:7): [True: 1.22k, False: 21.3k]
  ------------------
  236|  1.22k|    TValue *array;
  237|  1.22k|    uint32_t i;
  238|  1.22k|    if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|  1.22k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|  1.22k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (238:9): [True: 0, False: 1.22k]
  ------------------
  239|      0|      lj_err_msg(L, LJ_ERR_TABOV);
  240|  1.22k|    if (LJ_MAX_COLOSIZE != 0 && t->colo > 0) {
  ------------------
  |  |   62|  1.22k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (240:9): [Folded - Ignored]
  |  Branch (240:33): [True: 658, False: 563]
  ------------------
  241|       |      /* A colocated array must be separated and copied. */
  242|    658|      TValue *oarray = tvref(t->array);
  ------------------
  |  |  217|    658|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    658|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  243|    658|      array = lj_mem_newvec(L, asize, TValue);
  ------------------
  |  |  125|    658|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|    658|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  244|    658|      t->colo = (int8_t)(t->colo | 0x80);  /* Mark as separated (colo < 0). */
  245|  1.25k|      for (i = 0; i < oldasize; i++)
  ------------------
  |  Branch (245:19): [True: 600, False: 658]
  ------------------
  246|    600|	copyTV(L, &array[i], &oarray[i]);
  247|    658|    } else {
  248|    563|      array = (TValue *)lj_mem_realloc(L, tvref(t->array),
  ------------------
  |  |  217|    563|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    563|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  249|    563|			  oldasize*sizeof(TValue), asize*sizeof(TValue));
  250|    563|    }
  251|  1.22k|    setmref(t->array, array);
  ------------------
  |  |   39|  1.22k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  252|  1.22k|    t->asize = asize;
  253|  11.2k|    for (i = oldasize; i < asize; i++)  /* Clear newly allocated slots. */
  ------------------
  |  Branch (253:24): [True: 10.0k, False: 1.22k]
  ------------------
  254|  10.0k|      setnilV(&array[i]);
  ------------------
  |  |  872|  11.2k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  255|  1.22k|  }
  256|       |  /* Create new (empty) hash part. */
  257|  22.5k|  if (hbits) {
  ------------------
  |  Branch (257:7): [True: 21.8k, False: 773]
  ------------------
  258|  21.8k|    newhpart(L, t, hbits);
  259|  21.8k|    clearhpart(t);
  260|  21.8k|  } else {
  261|    773|    global_State *g = G(L);
  ------------------
  |  |  705|    773|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    773|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  262|    773|    setmref(t->node, &g->nilnode);
  ------------------
  |  |   39|    773|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  263|    773|#if LJ_GC64
  264|    773|    setmref(t->freetop, &g->nilnode);
  ------------------
  |  |   39|    773|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  265|    773|#endif
  266|    773|    t->hmask = 0;
  267|    773|  }
  268|  22.5k|  if (asize < oldasize) {  /* Array part shrinks? */
  ------------------
  |  Branch (268:7): [True: 646, False: 21.9k]
  ------------------
  269|    646|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|    646|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    646|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  270|    646|    uint32_t i;
  271|    646|    t->asize = asize;  /* Note: This 'shrinks' even colocated arrays. */
  272|  3.53k|    for (i = asize; i < oldasize; i++)  /* Reinsert old array values. */
  ------------------
  |  Branch (272:21): [True: 2.89k, False: 646]
  ------------------
  273|  2.89k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  2.89k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (273:11): [True: 642, False: 2.24k]
  ------------------
  274|    642|	copyTV(L, lj_tab_setinth(L, t, (int32_t)i), &array[i]);
  275|       |    /* Physically shrink only separated arrays. */
  276|    646|    if (LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|    646|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (276:9): [Folded - Ignored]
  |  Branch (276:33): [True: 20, False: 626]
  ------------------
  277|     20|      setmref(t->array, lj_mem_realloc(L, array,
  ------------------
  |  |   39|     20|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  278|    646|	      oldasize*sizeof(TValue), asize*sizeof(TValue)));
  279|    646|  }
  280|  22.5k|  if (oldhmask > 0) {  /* Reinsert pairs from old hash part. */
  ------------------
  |  Branch (280:7): [True: 18.6k, False: 3.93k]
  ------------------
  281|  18.6k|    global_State *g;
  282|  18.6k|    uint32_t i;
  283|   123k|    for (i = 0; i <= oldhmask; i++) {
  ------------------
  |  Branch (283:17): [True: 104k, False: 18.6k]
  ------------------
  284|   104k|      Node *n = &oldnode[i];
  285|   104k|      if (!tvisnil(&n->val))
  ------------------
  |  |  782|   104k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (285:11): [True: 104k, False: 201]
  ------------------
  286|   104k|	copyTV(L, lj_tab_set(L, t, &n->key), &n->val);
  287|   104k|    }
  288|  18.6k|    g = G(L);
  ------------------
  |  |  705|  18.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  18.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  18.6k|    lj_mem_freevec(g, oldnode, oldhmask+1, Node);
  ------------------
  |  |  130|  18.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  290|  18.6k|  }
  291|  22.5k|}
lj_tab_reasize:
  378|    310|{
  379|    310|  lj_tab_resize(L, t, nasize+1, t->hmask > 0 ? lj_fls(t->hmask)+1 : 0);
  ------------------
  |  |  149|    165|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (379:33): [True: 165, False: 145]
  ------------------
  380|    310|}
lj_tab_getinth:
  385|    196|{
  386|    196|  TValue k;
  387|    196|  Node *n;
  388|    196|  k.n = (lua_Number)key;
  389|    196|  n = hashnum(t, &k);
  ------------------
  |  |   45|    196|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|    196|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  390|    196|  do {
  391|    196|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|    392|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    196|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    196|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    196|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 196]
  |  |  ------------------
  ------------------
  |  Branch (391:29): [True: 0, False: 0]
  ------------------
  392|      0|      return &n->val;
  393|    196|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|    196|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|    196|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (393:12): [True: 0, False: 196]
  ------------------
  394|    196|  return NULL;
  395|    196|}
lj_tab_getstr:
  398|   317k|{
  399|   317k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|   317k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  400|   394k|  do {
  401|   518k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|   789k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   394k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   394k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 259k, False: 135k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|   259k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   259k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   259k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   259k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 259k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   259k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (401:29): [True: 84.2k, False: 175k]
  ------------------
  402|  84.2k|      return &n->val;
  403|   394k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   310k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   310k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (403:12): [True: 77.4k, False: 233k]
  ------------------
  404|   233k|  return NULL;
  405|   317k|}
lj_tab_get:
  408|   294k|{
  409|   294k|  if (tvisstr(key)) {
  ------------------
  |  |  795|   294k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   294k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   294k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 294k, False: 0]
  |  |  ------------------
  ------------------
  410|   294k|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  859|   294k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   294k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   294k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   294k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 294k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   294k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|   294k|    if (tv)
  ------------------
  |  Branch (411:9): [True: 62.0k, False: 232k]
  ------------------
  412|  62.0k|      return tv;
  413|   294k|  } else if (tvisint(key)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  414|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (85:71): [Folded - Ignored]
  |  |  |  Branch (85:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  415|      0|    if (tv)
  ------------------
  |  Branch (415:9): [True: 0, False: 0]
  ------------------
  416|      0|      return tv;
  417|      0|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  418|      0|    lua_Number nk = numV(key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|      0|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  420|      0|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (420:9): [True: 0, False: 0]
  ------------------
  421|      0|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   85|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  422|      0|      if (tv)
  ------------------
  |  Branch (422:11): [True: 0, False: 0]
  ------------------
  423|      0|	return tv;
  424|      0|    } else {
  425|      0|      goto genlookup;  /* Else use the generic lookup. */
  426|      0|    }
  427|      0|  } else if (!tvisnil(key)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (427:14): [True: 0, False: 0]
  ------------------
  428|      0|    Node *n;
  429|      0|  genlookup:
  430|      0|    n = hashkey(t, key);
  431|      0|    do {
  432|      0|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (432:11): [True: 0, False: 0]
  ------------------
  433|      0|	return &n->val;
  434|      0|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (434:14): [True: 0, False: 0]
  ------------------
  435|      0|  }
  436|   232k|  return niltv(L);
  ------------------
  |  |  667|   232k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   232k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   232k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   232k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 232k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   232k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|   232k|}
lj_tab_newkey:
  443|   841k|{
  444|   841k|  Node *n = hashkey(t, key);
  445|   841k|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  782|  1.68M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (445:7): [True: 148k, False: 692k]
  |  Branch (445:28): [True: 3.78k, False: 688k]
  ------------------
  446|   152k|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|   152k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   152k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  447|   152k|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|   152k|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|   152k|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   152k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  448|   152k|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|   152k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   304k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 152k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 152k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   152k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|   152k|	       "bad freenode");
  450|   331k|    do {
  451|   331k|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (451:11): [True: 22.2k, False: 309k]
  ------------------
  452|  22.2k|	rehashtab(L, t, key);  /* Rehash table. */
  453|  22.2k|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  454|  22.2k|      }
  455|   331k|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  782|   309k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (455:14): [True: 179k, False: 129k]
  ------------------
  456|   129k|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|   129k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   129k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  457|   129k|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|   129k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   129k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 129k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   129k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  458|   129k|    collide = hashkey(t, &n->key);
  459|   129k|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (459:9): [True: 15.7k, False: 114k]
  ------------------
  460|  18.1k|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|  18.1k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  18.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (460:14): [True: 2.38k, False: 15.7k]
  ------------------
  461|  2.38k|	collide = nextnode(collide);
  ------------------
  |  |  516|  2.38k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  2.38k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  462|  15.7k|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|  15.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  463|       |      /* Copy colliding node into free node and free main node. */
  464|  15.7k|      freenode->val = n->val;
  465|  15.7k|      freenode->key = n->key;
  466|  15.7k|      freenode->next = n->next;
  467|  15.7k|      setmref(n->next, NULL);
  ------------------
  |  |   39|  15.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  468|  15.7k|      setnilV(&n->val);
  ------------------
  |  |  872|  15.7k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  469|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  470|  17.7k|      while (nextnode(freenode)) {
  ------------------
  |  |  516|  17.7k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  17.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 2.01k, False: 15.7k]
  |  |  ------------------
  ------------------
  471|  2.01k|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|  2.01k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  2.01k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  472|  2.01k|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  782|  4.02k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (472:6): [True: 2.01k, False: 0]
  |  Branch (472:28): [True: 0, False: 2.01k]
  ------------------
  473|      0|	  freenode->next = nn->next;
  474|      0|	  nn->next = n->next;
  475|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  476|       |	  /*
  477|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  478|       |	  ** Another string key may have originally been resurrected via
  479|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  480|       |	  ** a node that had to be moved, which makes them unreachable.
  481|       |	  ** It's not feasible to check for all previous nodes, so rechain
  482|       |	  ** any string key that's currently in a non-main positions.
  483|       |	  */
  484|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (484:11): [True: 0, False: 0]
  ------------------
  485|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (485:10): [True: 0, False: 0]
  ------------------
  486|      0|	      Node *mn = hashkey(t, &nn->key);
  487|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (487:12): [True: 0, False: 0]
  |  Branch (487:30): [True: 0, False: 0]
  ------------------
  488|      0|		freenode->next = nn->next;
  489|      0|		nn->next = mn->next;
  490|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  491|      0|	      } else {
  492|      0|		freenode = nn;
  493|      0|	      }
  494|      0|	    } else {
  495|      0|	      freenode = nn;
  496|      0|	    }
  497|      0|	  }
  498|      0|	  break;
  499|  2.01k|	} else {
  500|  2.01k|	  freenode = nn;
  501|  2.01k|	}
  502|  2.01k|      }
  503|   114k|    } else {  /* Otherwise use free node. */
  504|   114k|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|   114k|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  505|   114k|      setmref(n->next, freenode);
  ------------------
  |  |   39|   114k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  506|   114k|      n = freenode;
  507|   114k|    }
  508|   129k|  }
  509|   818k|  n->key.u64 = key->u64;
  510|   818k|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|   818k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 818k]
  |  |  ------------------
  ------------------
  511|      0|    n->key.u64 = 0;
  512|   818k|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   818k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   818k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 190, False: 818k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|    190|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    190|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  513|   818k|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|   818k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   818k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 818k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   818k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  514|   818k|  return &n->val;
  515|   818k|}
lj_tab_setinth:
  518|  17.3k|{
  519|  17.3k|  TValue k;
  520|  17.3k|  Node *n;
  521|  17.3k|  k.n = (lua_Number)key;
  522|  17.3k|  n = hashnum(t, &k);
  ------------------
  |  |   45|  17.3k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  17.3k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  523|  19.7k|  do {
  524|  19.7k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|  39.5k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  19.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  19.7k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  19.7k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 8.37k, False: 11.4k]
  |  |  ------------------
  ------------------
  |  Branch (524:29): [True: 3.71k, False: 4.66k]
  ------------------
  525|  3.71k|      return &n->val;
  526|  19.7k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  16.0k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  16.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (526:12): [True: 2.41k, False: 13.6k]
  ------------------
  527|  13.6k|  return lj_tab_newkey(L, t, &k);
  528|  17.3k|}
lj_tab_setstr:
  531|   820k|{
  532|   820k|  TValue k;
  533|   820k|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|   820k|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  534|   854k|  do {
  535|   854k|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  1.70M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   854k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   854k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 258k, False: 595k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|   258k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   258k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   258k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   258k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 258k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   258k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (535:29): [True: 173k, False: 84.6k]
  ------------------
  536|   173k|      return &n->val;
  537|   854k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   680k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   680k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (537:12): [True: 34.0k, False: 646k]
  ------------------
  538|   646k|  setstrV(L, &k, key);
  539|   646k|  return lj_tab_newkey(L, t, &k);
  540|   820k|}
lj_tab_set:
  543|   282k|{
  544|   282k|  Node *n;
  545|   282k|  t->nomm = 0;  /* Invalidate negative metamethod cache. */
  546|   282k|  if (tvisstr(key)) {
  ------------------
  |  |  795|   282k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   282k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   282k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 218k, False: 63.7k]
  |  |  ------------------
  ------------------
  547|   218k|    return lj_tab_setstr(L, t, strV(key));
  ------------------
  |  |  859|   218k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   218k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   218k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   218k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 218k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   218k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  548|   218k|  } else if (tvisint(key)) {
  ------------------
  |  |  803|  63.7k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|   127k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  549|      0|    return lj_tab_setint(L, t, intV(key));
  ------------------
  |  |   87|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (82:35): [Folded - Ignored]
  |  |  |  |  |  Branch (82:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (83:47): [Folded - Ignored]
  |  |  |  |  |  Branch (83:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (87:74): [Folded - Ignored]
  |  |  |  Branch (87:74): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  550|  63.7k|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|  63.7k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  63.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  63.7k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  63.7k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 33.0k, False: 30.7k]
  |  |  ------------------
  ------------------
  551|  33.0k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|  33.0k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  33.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  33.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  33.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 33.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  33.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|  33.0k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|  33.0k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  553|  33.0k|    if (nk == (lua_Number)k)
  ------------------
  |  Branch (553:9): [True: 18.4k, False: 14.6k]
  ------------------
  554|  18.4k|      return lj_tab_setint(L, t, k);
  ------------------
  |  |   87|  18.4k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   82|  18.4k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (82:26): [True: 4.76k, False: 13.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   83|  4.76k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  4.76k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  4.76k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|  14.6k|    if (tvisnan(key))
  ------------------
  |  |  812|  14.6k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
  556|      0|      lj_err_msg(L, LJ_ERR_NANIDX);
  557|       |    /* Else use the generic lookup. */
  558|  30.7k|  } else if (tvisnil(key)) {
  ------------------
  |  |  782|  30.7k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 30.7k]
  |  |  ------------------
  ------------------
  559|      0|    lj_err_msg(L, LJ_ERR_NILIDX);
  560|      0|  }
  561|  45.3k|  n = hashkey(t, key);
  562|  89.7k|  do {
  563|  89.7k|    if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (563:9): [True: 13.2k, False: 76.4k]
  ------------------
  564|  13.2k|      return &n->val;
  565|  89.7k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  76.4k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  76.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (565:12): [True: 44.3k, False: 32.1k]
  ------------------
  566|  32.1k|  return lj_tab_newkey(L, t, key);
  567|  45.3k|}
lj_tab_len:
  662|      2|{
  663|      2|  size_t hi = (size_t)t->asize;
  664|      2|  if (hi) hi--;
  ------------------
  |  Branch (664:7): [True: 2, False: 0]
  ------------------
  665|       |  /* In a growing array the last array element is very likely nil. */
  666|      2|  if (hi > 0 && LJ_LIKELY(tvisnil(arrayslot(t, hi)))) {
  ------------------
  |  |  145|      2|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1, False: 1]
  |  |  ------------------
  ------------------
  |  Branch (666:7): [True: 2, False: 0]
  ------------------
  667|       |    /* Binary search to find a non-nil to nil transition in the array. */
  668|      1|    size_t lo = 0;
  669|      2|    while (hi - lo > 1) {
  ------------------
  |  Branch (669:12): [True: 1, False: 1]
  ------------------
  670|      1|      size_t mid = (lo+hi) >> 1;
  671|      1|      if (tvisnil(arrayslot(t, mid))) hi = mid; else lo = mid;
  ------------------
  |  |  782|      1|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 1]
  |  |  ------------------
  ------------------
  672|      1|    }
  673|      1|    return (MSize)lo;
  674|      1|  }
  675|       |  /* Without a hash part, there's an implicit nil after the last element. */
  676|      1|  return t->hmask ? tab_len_slow(t, hi) : (MSize)hi;
  ------------------
  |  Branch (676:10): [True: 0, False: 1]
  ------------------
  677|      2|}
lj_tab.c:newtab:
   82|  76.1k|{
   83|  76.1k|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|  76.1k|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  76.1k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  4.48k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 4.48k, False: 71.6k]
  |  Branch (85:44): [True: 4.46k, False: 22]
  ------------------
   86|  4.46k|    Node *nilnode;
   87|  4.46k|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|  4.46k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.46k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.46k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|  4.46k|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|  4.46k|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|  4.46k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  4.46k|#define LJ_TTAB			(~11u)
  ------------------
   90|  4.46k|    t->nomm = (uint8_t)~0;
   91|  4.46k|    t->colo = (int8_t)asize;
   92|  4.46k|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|  4.46k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|  4.46k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  4.46k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|  4.46k|    t->asize = asize;
   95|  4.46k|    t->hmask = 0;
   96|  4.46k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|  4.46k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.46k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|  4.46k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  4.46k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|  4.46k|#if LJ_GC64
   99|  4.46k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  4.46k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|  4.46k|#endif
  101|  71.7k|  } else {  /* Otherwise separately allocate the array part. */
  102|  71.7k|    Node *nilnode;
  103|  71.7k|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|  71.7k|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|  71.7k|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  71.7k|#define LJ_TTAB			(~11u)
  ------------------
  105|  71.7k|    t->nomm = (uint8_t)~0;
  106|  71.7k|    t->colo = 0;
  107|  71.7k|    setmref(t->array, NULL);
  ------------------
  |  |   39|  71.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|  71.7k|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  71.7k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|  71.7k|    t->asize = 0;  /* In case the array allocation fails. */
  110|  71.7k|    t->hmask = 0;
  111|  71.7k|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|  71.7k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  71.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|  71.7k|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  71.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|  71.7k|#if LJ_GC64
  114|  71.7k|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  71.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|  71.7k|#endif
  116|  71.7k|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 22, False: 71.6k]
  ------------------
  117|     22|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|     22|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|     22|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 22]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|     22|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|     22|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|     22|      t->asize = asize;
  121|     22|    }
  122|  71.7k|  }
  123|  76.1k|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 68.0k, False: 8.08k]
  ------------------
  124|  68.0k|    newhpart(L, t, hbits);
  125|  76.1k|  return t;
  126|  76.1k|}
lj_tab.c:clearapart:
   73|  76.1k|{
   74|  76.1k|  uint32_t i, asize = t->asize;
   75|  76.1k|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|  76.1k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  76.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|  96.5k|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 20.4k, False: 76.1k]
  ------------------
   77|  20.4k|    setnilV(&array[i]);
  ------------------
  |  |  872|  20.4k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|  76.1k|}
lj_tab.c:clearhpart:
   59|  89.8k|{
   60|  89.8k|  uint32_t i, hmask = t->hmask;
   61|  89.8k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  89.8k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  89.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|  89.8k|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|  89.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  89.8k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 89.8k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  89.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|  1.18M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 1.09M, False: 89.8k]
  ------------------
   64|  1.09M|    Node *n = &node[i];
   65|  1.09M|    setmref(n->next, NULL);
  ------------------
  |  |   39|  1.09M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|  1.09M|    setnilV(&n->key);
  ------------------
  |  |  872|  1.09M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|  1.09M|    setnilV(&n->val);
  ------------------
  |  |  872|  1.09M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|  1.09M|  }
   69|  89.8k|}
lj_tab.c:newhpart:
   38|  89.9k|{
   39|  89.9k|  uint32_t hsize;
   40|  89.9k|  Node *node;
   41|  89.9k|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|  89.9k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  89.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 89.9k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  89.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|  89.9k|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|  89.9k|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 89.9k]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|  89.9k|  hsize = 1u << hbits;
   45|  89.9k|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|  89.9k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  89.9k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|  89.9k|  setmref(t->node, node);
  ------------------
  |  |   39|  89.9k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|  89.9k|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|  89.9k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|  89.9k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|  89.9k|  t->hmask = hsize-1;
   49|  89.9k|}
lj_tab.c:rehashtab:
  357|  22.2k|{
  358|  22.2k|  uint32_t bins[LJ_MAX_ABITS];
  359|  22.2k|  uint32_t total, asize, na, i;
  360|   645k|  for (i = 0; i < LJ_MAX_ABITS; i++) bins[i] = 0;
  ------------------
  |  |   60|   645k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (360:15): [True: 623k, False: 22.2k]
  ------------------
  361|  22.2k|  asize = countarray(t, bins);
  362|  22.2k|  total = 1 + asize;
  363|  22.2k|  total += counthash(t, bins, &asize);
  364|  22.2k|  asize += countint(ek, bins);
  365|  22.2k|  na = bestasize(bins, &asize);
  366|  22.2k|  total -= na;
  367|  22.2k|  lj_tab_resize(L, t, asize, hsize2hbits(total));
  ------------------
  |  |   53|  22.2k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  18.7k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 21.6k, False: 628]
  |  |  |  Branch (53:32): [True: 2.91k, False: 18.7k]
  |  |  ------------------
  ------------------
  368|  22.2k|}
lj_tab.c:countarray:
  308|  22.2k|{
  309|  22.2k|  uint32_t na, b, i;
  310|  22.2k|  if (t->asize == 0) return 0;
  ------------------
  |  Branch (310:7): [True: 20.2k, False: 2.03k]
  ------------------
  311|  6.79k|  for (na = i = b = 0; b < LJ_MAX_ABITS; b++) {
  ------------------
  |  |   60|  6.79k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (311:24): [True: 6.79k, False: 0]
  ------------------
  312|  6.79k|    uint32_t n, top = 2u << b;
  313|  6.79k|    TValue *array;
  314|  6.79k|    if (top >= t->asize) {
  ------------------
  |  Branch (314:9): [True: 2.82k, False: 3.97k]
  ------------------
  315|  2.82k|      top = t->asize-1;
  316|  2.82k|      if (i > top)
  ------------------
  |  Branch (316:11): [True: 2.03k, False: 793]
  ------------------
  317|  2.03k|	break;
  318|  2.82k|    }
  319|  4.76k|    array = tvref(t->array);
  ------------------
  |  |  217|  4.76k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.76k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  320|  32.3k|    for (n = 0; i <= top; i++)
  ------------------
  |  Branch (320:17): [True: 27.5k, False: 4.76k]
  ------------------
  321|  27.5k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  27.5k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (321:11): [True: 10.0k, False: 17.5k]
  ------------------
  322|  10.0k|	n++;
  323|  4.76k|    bins[b] += n;
  324|  4.76k|    na += n;
  325|  4.76k|  }
  326|  2.03k|  return na;
  327|  22.2k|}
lj_tab.c:counthash:
  330|  22.2k|{
  331|  22.2k|  uint32_t total, na, i, hmask = t->hmask;
  332|  22.2k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  22.2k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  22.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  333|   129k|  for (total = na = 0, i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (333:31): [True: 107k, False: 22.2k]
  ------------------
  334|   107k|    Node *n = &node[i];
  335|   107k|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|   107k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (335:9): [True: 103k, False: 3.78k]
  ------------------
  336|   103k|      na += countint(&n->key, bins);
  337|   103k|      total++;
  338|   103k|    }
  339|   107k|  }
  340|  22.2k|  *narray += na;
  341|  22.2k|  return total;
  342|  22.2k|}
lj_tab.c:countint:
  294|   126k|{
  295|   126k|  lj_assertX(!tvisint(key), "bad integer key");
  ------------------
  |  |  366|   126k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   126k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   126k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  296|   126k|  if (tvisnum(key)) {
  ------------------
  |  |  804|   126k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   126k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   126k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   126k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 12.7k, False: 113k]
  |  |  ------------------
  ------------------
  297|  12.7k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|  12.7k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  12.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  12.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  12.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 12.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  12.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|  12.7k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|  12.7k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  299|  12.7k|    if ((uint32_t)k < LJ_MAX_ASIZE && nk == (lua_Number)k) {
  ------------------
  |  |   61|  25.5k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|  12.7k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (299:9): [True: 8.28k, False: 4.51k]
  |  Branch (299:39): [True: 7.09k, False: 1.18k]
  ------------------
  300|  7.09k|      bins[(k > 2 ? lj_fls((uint32_t)(k-1)) : 0)]++;
  ------------------
  |  |  149|  6.73k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (300:13): [True: 6.73k, False: 366]
  ------------------
  301|  7.09k|      return 1;
  302|  7.09k|    }
  303|  12.7k|  }
  304|   118k|  return 0;
  305|   126k|}
lj_tab.c:bestasize:
  345|  22.2k|{
  346|  22.2k|  uint32_t b, sum, na = 0, sz = 0, nn = *narray;
  347|  31.3k|  for (b = 0, sum = 0; 2*nn > (1u<<b) && sum != nn; b++)
  ------------------
  |  Branch (347:24): [True: 9.28k, False: 22.0k]
  |  Branch (347:42): [True: 9.03k, False: 246]
  ------------------
  348|  9.03k|    if (bins[b] > 0 && 2*(sum += bins[b]) > (1u<<b)) {
  ------------------
  |  Branch (348:9): [True: 5.30k, False: 3.73k]
  |  Branch (348:24): [True: 2.73k, False: 2.56k]
  ------------------
  349|  2.73k|      sz = (2u<<b)+1;
  350|  2.73k|      na = sum;
  351|  2.73k|    }
  352|  22.2k|  *narray = sz;
  353|  22.2k|  return na;
  354|  22.2k|}
lj_tab.c:hashkey:
   21|  1.01M|{
   22|  1.01M|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|  1.01M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.01M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.01M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|  1.01M|  if (tvisstr(key))
  ------------------
  |  |  795|  1.01M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.01M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.01M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 902k, False: 115k]
  |  |  ------------------
  ------------------
   24|  1.01M|    return hashstr(t, strV(key));
  ------------------
  |  |   42|  1.80M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 902k, False: 0]
  |  |  ------------------
  ------------------
   25|   115k|  else if (tvisnum(key))
  ------------------
  |  |  804|   115k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   115k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   115k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   115k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 42.1k, False: 73.4k]
  |  |  ------------------
  ------------------
   26|  42.1k|    return hashnum(t, key);
  ------------------
  |  |   45|  42.1k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  42.1k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|  73.4k|  else if (tvisbool(key))
  ------------------
  |  |  789|  73.4k|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|   146k|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  73.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  73.4k|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 73.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|  73.4k|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  73.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  73.4k|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 73.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      0|    return hashmask(t, boolV(key));
  ------------------
  |  |  837|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|  73.4k|  else
   30|  73.4k|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|  73.4k|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|  73.4k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|  1.01M|}

lj_ctype.c:hashrot:
   19|  48.8k|{
   20|  48.8k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  48.8k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  48.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  48.8k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  48.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  48.8k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  48.8k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  48.8k|  return hi;
   32|  48.8k|}
lj_tab.c:hashmask:
   36|  2.17M|{
   37|  2.17M|  Node *n = noderef(t->node);
  ------------------
  |  |  515|  2.17M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  2.17M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|  2.17M|  return &n[hash & t->hmask];
   39|  2.17M|}
lj_tab.c:hashrot:
   19|   133k|{
   20|   133k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|   133k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|   133k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|   133k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|   133k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|   133k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|   133k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|   133k|  return hi;
   32|   133k|}

lj_trace_initstate:
  314|  3.10k|{
  315|  3.10k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  3.10k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|  3.10k|  TValue *tv;
  317|       |
  318|       |  /* Initialize aligned SIMD constants. */
  319|  3.10k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  3.10k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  320|  3.10k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  321|  3.10k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|  3.10k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  3.10k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  323|  3.10k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  324|  3.10k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  325|       |
  326|       |  /* Initialize 32/64 bit constants. */
  327|  3.10k|#if LJ_TARGET_X86ORX64
  328|  3.10k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  329|       |#if LJ_32
  330|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  331|       |#endif
  332|  3.10k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  333|  3.10k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  3.10k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  334|  3.10k|#endif
  335|  3.10k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  336|  3.10k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  3.10k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  337|  3.10k|#endif
  338|       |#if LJ_TARGET_PPC
  339|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  340|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  341|       |#endif
  342|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  343|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  344|       |#endif
  345|       |#if LJ_TARGET_MIPS
  346|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  347|       |#if LJ_64
  348|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  349|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  350|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  351|       |#endif
  352|       |#endif
  353|  3.10k|}
lj_trace_freestate:
  357|  3.10k|{
  358|  3.10k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  3.10k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  3.10k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  3.10k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|  3.10k|#ifdef LUA_USE_ASSERT
  360|  3.10k|  {  /* This assumes all traces have already been freed. */
  361|  3.10k|    ptrdiff_t i;
  362|  3.10k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (362:17): [True: 0, False: 3.10k]
  ------------------
  363|  3.10k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  364|  3.10k|		 "trace still allocated");
  365|  3.10k|  }
  366|  3.10k|#endif
  367|  3.10k|  lj_mcode_free(J);
  368|  3.10k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  369|  3.10k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  370|  3.10k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  371|  3.10k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  3.10k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  372|  3.10k|}

lj_udata_new:
   15|  12.9k|{
   16|  12.9k|  GCudata *ud = lj_mem_newt(L, sizeof(GCudata) + sz, GCudata);
  ------------------
  |  |  133|  12.9k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  12.9k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   17|  12.9k|  global_State *g = G(L);
  ------------------
  |  |  705|  12.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  12.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   18|  12.9k|  newwhite(g, ud);  /* Not finalized. */
  ------------------
  |  |   40|  12.9k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  12.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  12.9k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  12.9k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  12.9k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  12.9k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   19|  12.9k|  ud->gct = ~LJ_TUDATA;
  ------------------
  |  |  272|  12.9k|#define LJ_TUDATA		(~12u)
  ------------------
   20|  12.9k|  ud->udtype = UDTYPE_USERDATA;
   21|  12.9k|  ud->len = sz;
   22|       |  /* NOBARRIER: The GCudata is new (marked white). */
   23|  12.9k|  setgcrefnull(ud->metatable);
  ------------------
  |  |   76|  12.9k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   24|  12.9k|  setgcref(ud->env, obj2gco(env));
  ------------------
  |  |   72|  12.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   25|       |  /* Chain to userdata list (after main thread). */
   26|  12.9k|  setgcrefr(ud->nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  12.9k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   27|  12.9k|  setgcref(mainthread(g)->nextgc, obj2gco(ud));
  ------------------
  |  |   72|  12.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   28|  12.9k|  return ud;
   29|  12.9k|}
lj_udata_free:
   32|  12.9k|{
   33|  12.9k|  lj_mem_free(g, ud, sizeudata(ud));
  ------------------
  |  |  343|  12.9k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  ------------------
   34|  12.9k|}

lj_vm_foldarith:
   51|  8.58k|{
   52|  8.58k|  switch (op) {
   53|    513|  case IR_ADD - IR_ADD: return x+y; break;
  ------------------
  |  Branch (53:3): [True: 513, False: 8.06k]
  ------------------
   54|  1.32k|  case IR_SUB - IR_ADD: return x-y; break;
  ------------------
  |  Branch (54:3): [True: 1.32k, False: 7.25k]
  ------------------
   55|  2.99k|  case IR_MUL - IR_ADD: return x*y; break;
  ------------------
  |  Branch (55:3): [True: 2.99k, False: 5.59k]
  ------------------
   56|  2.88k|  case IR_DIV - IR_ADD: return x/y; break;
  ------------------
  |  Branch (56:3): [True: 2.88k, False: 5.69k]
  ------------------
   57|    699|  case IR_MOD - IR_ADD: return x-lj_vm_floormul(x, y); break;
  ------------------
  |  Branch (57:3): [True: 699, False: 7.88k]
  ------------------
   58|    151|  case IR_POW - IR_ADD: return pow(x, y); break;
  ------------------
  |  Branch (58:3): [True: 151, False: 8.42k]
  ------------------
   59|     20|  case IR_NEG - IR_ADD: return -x; break;
  ------------------
  |  Branch (59:3): [True: 20, False: 8.56k]
  ------------------
   60|      0|  case IR_ABS - IR_ADD: return fabs(x); break;
  ------------------
  |  Branch (60:3): [True: 0, False: 8.58k]
  ------------------
   61|      0|#if LJ_HASJIT
   62|      0|  case IR_LDEXP - IR_ADD: return ldexp(x, (int)y); break;
  ------------------
  |  Branch (62:3): [True: 0, False: 8.58k]
  ------------------
   63|      0|  case IR_MIN - IR_ADD: return x < y ? x : y; break;
  ------------------
  |  Branch (63:3): [True: 0, False: 8.58k]
  |  Branch (63:32): [True: 0, False: 0]
  ------------------
   64|      0|  case IR_MAX - IR_ADD: return x > y ? x : y; break;
  ------------------
  |  Branch (64:3): [True: 0, False: 8.58k]
  |  Branch (64:32): [True: 0, False: 0]
  ------------------
   65|      0|#endif
   66|      0|  default: return x;
  ------------------
  |  Branch (66:3): [True: 0, False: 8.58k]
  ------------------
   67|  8.58k|  }
   68|  8.58k|}
lj_vmmath.c:lj_vm_floormul:
   46|    699|{
   47|    699|  return lj_vm_floor(x / y) * y;
   48|    699|}

LLVMFuzzerTestOneInput:
   51|  3.10k|{
   52|  3.10k|	lua_State *L = luaL_newstate();
   53|  3.10k|	if (L == NULL)
  ------------------
  |  Branch (53:6): [True: 0, False: 3.10k]
  ------------------
   54|      0|		return 0;
   55|       |
   56|  3.10k|	luaL_openlibs(L);
   57|       |
   58|  3.10k|	FuzzedDataProvider fdp(data, size);
   59|  3.10k|	dt test_data;
   60|  3.10k|	test_data.fdp = &fdp;
   61|       |
   62|  3.10k|	const char *mode = "t";
   63|  3.10k|#if LUA_VERSION_NUM == 501
   64|  3.10k|	int res = lua_load(L, Reader, &test_data, "libFuzzer");
   65|       |#else /* Lua 5.3+ */
   66|       |	int res = lua_load(L, Reader, &test_data, "libFuzzer", mode);
   67|       |#endif /* LUA_VERSION_NUM */
   68|  3.10k|	if (res == LUA_OK) {
  ------------------
  |  |   43|  3.10k|#define LUA_OK		0
  ------------------
  |  Branch (68:6): [True: 829, False: 2.27k]
  ------------------
   69|    829|		lua_pcall(L, 0, 0, 0);
   70|    829|	}
   71|       |
   72|  3.10k|	lua_settop(L, 0);
   73|  3.10k|	lua_close(L);
   74|       |
   75|  3.10k|	return 0;
   76|  3.10k|}
lua_load_test.cc:_ZL6ReaderP9lua_StatePvPm:
   30|  41.8k|{
   31|  41.8k|	dt *test_data = (dt *)data;
   32|  41.8k|	static char *buf = NULL;
   33|       |
   34|  41.8k|	FuzzedDataProvider *fdp = test_data->fdp;
   35|  41.8k|	uint8_t max_str_size = fdp->ConsumeIntegral<uint8_t>();
   36|  41.8k|	if (fdp->remaining_bytes() < max_str_size)
  ------------------
  |  Branch (36:6): [True: 1.55k, False: 40.2k]
  ------------------
   37|  1.55k|		return NULL;
   38|  40.2k|	auto str = fdp->ConsumeRandomLengthString(max_str_size);
   39|  40.2k|	*size = str.size();
   40|       |
   41|  40.2k|	free(buf);
   42|  40.2k|	buf = (char *)malloc(*size);
   43|  40.2k|	assert(buf);
   44|  40.2k|	memcpy(buf, str.c_str(), *size);
   45|       |
   46|  40.2k|	return buf;
   47|  40.2k|}

