luaL_fileresult:
   33|   404k|{
   34|   404k|  if (stat) {
  ------------------
  |  Branch (34:7): [True: 404k, False: 0]
  ------------------
   35|   404k|    setboolV(L->top++, 1);
  ------------------
  |  |  874|   404k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
   36|   404k|    return 1;
   37|   404k|  } else {
   38|      0|    int en = errno;  /* Lua API calls may change this value. */
   39|      0|    setnilV(L->top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   40|      0|    if (fname)
  ------------------
  |  Branch (40:9): [True: 0, False: 0]
  ------------------
   41|      0|      lua_pushfstring(L, "%s: %s", fname, strerror(en));
   42|      0|    else
   43|      0|      lua_pushfstring(L, "%s", strerror(en));
   44|      0|    setintV(L->top++, en);
   45|      0|    lj_trace_abort(G(L));
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   46|      0|    return 3;
   47|      0|  }
   48|   404k|}
luaL_findtable:
   84|   451k|{
   85|   451k|  const char *e;
   86|   451k|  lua_pushvalue(L, idx);
   87|   465k|  do {
   88|   465k|    e = strchr(fname, '.');
   89|   465k|    if (e == NULL) e = fname + strlen(fname);
  ------------------
  |  Branch (89:9): [True: 451k, False: 13.6k]
  ------------------
   90|   465k|    lua_pushlstring(L, fname, (size_t)(e - fname));
   91|   465k|    lua_rawget(L, -2);
   92|   465k|    if (lua_isnil(L, -1)) {  /* no such field? */
  ------------------
  |  |  269|   465k|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|   465k|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 191k, False: 273k]
  |  |  ------------------
  ------------------
   93|   191k|      lua_pop(L, 1);  /* remove this nil */
  ------------------
  |  |  256|   191k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   94|   191k|      lua_createtable(L, 0, (*e == '.' ? 1 : szhint)); /* new table for field */
  ------------------
  |  Branch (94:30): [True: 0, False: 191k]
  ------------------
   95|   191k|      lua_pushlstring(L, fname, (size_t)(e - fname));
   96|   191k|      lua_pushvalue(L, -2);
   97|   191k|      lua_settable(L, -4);  /* set new table into field */
   98|   273k|    } else if (!lua_istable(L, -1)) {  /* field has a non-table value? */
  ------------------
  |  |  267|   273k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|   273k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (98:16): [True: 0, False: 273k]
  ------------------
   99|      0|      lua_pop(L, 2);  /* remove table and value */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  100|      0|      return fname;  /* return problematic part of the name */
  101|      0|    }
  102|   465k|    lua_remove(L, -2);  /* remove previous table */
  103|   465k|    fname = e + 1;
  104|   465k|  } while (*e == '.');
  ------------------
  |  Branch (104:12): [True: 13.6k, False: 451k]
  ------------------
  105|   451k|  return NULL;
  106|   451k|}
luaL_pushmodule:
  116|  13.6k|{
  117|  13.6k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  118|  13.6k|  lua_getfield(L, -1, modname);
  119|  13.6k|  if (!lua_istable(L, -1)) {
  ------------------
  |  |  267|  13.6k|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|  13.6k|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (119:7): [True: 13.6k, False: 0]
  ------------------
  120|  13.6k|    lua_pop(L, 1);
  ------------------
  |  |  256|  13.6k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  121|  13.6k|    if (luaL_findtable(L, LUA_GLOBALSINDEX, modname, sizehint) != NULL)
  ------------------
  |  |   38|  13.6k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (121:9): [True: 0, False: 13.6k]
  ------------------
  122|      0|      lj_err_callerv(L, LJ_ERR_BADMODN, modname);
  123|  13.6k|    lua_pushvalue(L, -1);
  124|  13.6k|    lua_setfield(L, -3, modname);  /* _LOADED[modname] = new table. */
  125|  13.6k|  }
  126|  13.6k|  lua_remove(L, -2);  /* Remove _LOADED table. */
  127|  13.6k|}
luaL_openlib:
  131|  27.3k|{
  132|  27.3k|  lj_lib_checkfpu(L);
  ------------------
  |  |   74|  27.3k|#define lj_lib_checkfpu(L)	UNUSED(L)
  |  |  ------------------
  |  |  |  |   91|  27.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  133|  27.3k|  if (libname) {
  ------------------
  |  Branch (133:7): [True: 13.6k, False: 13.6k]
  ------------------
  134|  13.6k|    luaL_pushmodule(L, libname, libsize(l));
  135|  13.6k|    lua_insert(L, -(nup + 1));  /* Move module table below upvalues. */
  136|  13.6k|  }
  137|  27.3k|  if (l)
  ------------------
  |  Branch (137:7): [True: 27.3k, False: 0]
  ------------------
  138|  27.3k|    luaL_setfuncs(L, l, nup);
  139|      0|  else
  140|      0|    lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  141|  27.3k|}
luaL_register:
  145|  27.3k|{
  146|  27.3k|  luaL_openlib(L, libname, l, 0);
  147|  27.3k|}
luaL_setfuncs:
  150|  27.3k|{
  151|  27.3k|  luaL_checkstack(L, nup, "too many upvalues");
  152|  95.8k|  for (; l->name; l++) {
  ------------------
  |  Branch (152:10): [True: 68.4k, False: 27.3k]
  ------------------
  153|  68.4k|    int i;
  154|  68.4k|    for (i = 0; i < nup; i++)  /* Copy upvalues to the top. */
  ------------------
  |  Branch (154:17): [True: 0, False: 68.4k]
  ------------------
  155|      0|      lua_pushvalue(L, -nup);
  156|  68.4k|    lua_pushcclosure(L, l->func, nup);
  157|  68.4k|    lua_setfield(L, -(nup + 2), l->name);
  158|  68.4k|  }
  159|  27.3k|  lua_pop(L, nup);  /* Remove upvalues. */
  ------------------
  |  |  256|  27.3k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  160|  27.3k|}
luaL_gsub:
  164|     98|{
  165|     98|  const char *wild;
  166|     98|  size_t l = strlen(p);
  167|     98|  luaL_Buffer b;
  168|     98|  luaL_buffinit(L, &b);
  169|    162|  while ((wild = strstr(s, p)) != NULL) {
  ------------------
  |  Branch (169:10): [True: 64, False: 98]
  ------------------
  170|     64|    luaL_addlstring(&b, s, (size_t)(wild - s));  /* push prefix */
  171|     64|    luaL_addstring(&b, r);  /* push replacement in place of pattern */
  172|     64|    s = wild + l;  /* continue after `p' */
  173|     64|  }
  174|     98|  luaL_addstring(&b, s);  /* push last suffix */
  175|     98|  luaL_pushresult(&b);
  176|     98|  return lua_tostring(L, -1);
  ------------------
  |  |  281|     98|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  177|     98|}
luaL_addlstring:
  221|   925k|{
  222|   925k|  if (l <= bufffree(B)) {
  ------------------
  |  |  182|   925k|#define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  113|   925k|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (113:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  181|   925k|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  |  |  ------------------
  ------------------
  |  Branch (222:7): [True: 925k, False: 0]
  ------------------
  223|   925k|    memcpy(B->p, s, l);
  224|   925k|    B->p += l;
  225|   925k|  } else {
  226|      0|    emptybuffer(B);
  227|      0|    lua_pushlstring(B->L, s, l);
  228|      0|    B->lvl++;
  229|      0|    adjuststack(B);
  230|      0|  }
  231|   925k|}
luaL_addstring:
  234|    162|{
  235|    162|  luaL_addlstring(B, s, strlen(s));
  236|    162|}
luaL_pushresult:
  239|   925k|{
  240|   925k|  emptybuffer(B);
  241|   925k|  lua_concat(B->L, B->lvl);
  242|   925k|  B->lvl = 1;
  243|   925k|}
luaL_addvalue:
  246|   875k|{
  247|   875k|  lua_State *L = B->L;
  248|   875k|  size_t vl;
  249|   875k|  const char *s = lua_tolstring(L, -1, &vl);
  250|   875k|  if (vl <= bufffree(B)) {  /* fit into buffer? */
  ------------------
  |  |  182|   875k|#define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  113|   875k|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (113:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define bufffree(B)	((size_t)(LUAL_BUFFERSIZE - bufflen(B)))
  |  |  ------------------
  |  |  |  |  181|   875k|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  |  |  ------------------
  ------------------
  |  Branch (250:7): [True: 875k, False: 0]
  ------------------
  251|   875k|    memcpy(B->p, s, vl);  /* put it there */
  252|   875k|    B->p += vl;
  253|   875k|    lua_pop(L, 1);  /* remove from stack */
  ------------------
  |  |  256|   875k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  254|   875k|  } else {
  255|      0|    if (emptybuffer(B))
  ------------------
  |  Branch (255:9): [True: 0, False: 0]
  ------------------
  256|      0|      lua_insert(L, -2);  /* put buffer before new value */
  257|      0|    B->lvl++;  /* add new value into B stack */
  258|      0|    adjuststack(B);
  259|      0|  }
  260|   875k|}
luaL_buffinit:
  263|   925k|{
  264|   925k|  B->L = L;
  265|   925k|  B->p = B->buffer;
  266|   925k|  B->lvl = 0;
  267|   925k|}
luaL_newstate:
  371|  13.6k|{
  372|  13.6k|  lua_State *L;
  373|       |#if LJ_64 && !LJ_GC64
  374|       |  L = lj_state_newstate(LJ_ALLOCF_INTERNAL, NULL);
  375|       |#else
  376|  13.6k|  L = lua_newstate(LJ_ALLOCF_INTERNAL, NULL);
  ------------------
  |  |   36|  13.6k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  377|  13.6k|#endif
  378|  13.6k|  if (L) {
  ------------------
  |  Branch (378:7): [True: 13.6k, False: 0]
  ------------------
  379|  13.6k|    G(L)->panic = panic;
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  380|  13.6k|#ifndef LUAJIT_DISABLE_VMEVENT
  381|  13.6k|    luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   12|  13.6k|#define LJ_VMEVENTS_REGKEY	"_VMEVENTS"
  ------------------
                  luaL_findtable(L, LUA_REGISTRYINDEX, LJ_VMEVENTS_REGKEY, LJ_VMEVENTS_HSIZE);
  ------------------
  |  |   13|  13.6k|#define LJ_VMEVENTS_HSIZE	4
  ------------------
  382|  13.6k|    lua_pushcfunction(L, error_finalizer);
  ------------------
  |  |  262|  13.6k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  383|  13.6k|    lua_rawseti(L, -2, VMEVENT_HASH(LJ_VMEVENT_ERRFIN));
  ------------------
  |  |   16|  13.6k|#define VMEVENT_HASH(ev)	((int)(ev) & ~7)
  ------------------
  384|  13.6k|    G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  G(L)->vmevmask = VMEVENT_MASK(LJ_VMEVENT_ERRFIN);
  ------------------
  |  |   15|  13.6k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  ------------------
  385|  13.6k|    L->top--;
  386|  13.6k|#endif
  387|  13.6k|  }
  388|  13.6k|  return L;
  389|  13.6k|}
lib_aux.c:libsize:
  109|  13.6k|{
  110|  13.6k|  int size = 0;
  111|  54.7k|  for (; l && l->name; l++) size++;
  ------------------
  |  Branch (111:10): [True: 54.7k, False: 0]
  |  Branch (111:15): [True: 41.0k, False: 13.6k]
  ------------------
  112|  13.6k|  return size;
  113|  13.6k|}
lib_aux.c:emptybuffer:
  185|   925k|{
  186|   925k|  size_t l = bufflen(B);
  ------------------
  |  |  181|   925k|#define bufflen(B)	((size_t)((B)->p - (B)->buffer))
  ------------------
  187|   925k|  if (l == 0)
  ------------------
  |  Branch (187:7): [True: 0, False: 925k]
  ------------------
  188|      0|    return 0;  /* put nothing on stack */
  189|   925k|  lua_pushlstring(B->L, B->buffer, l);
  190|   925k|  B->p = B->buffer;
  191|   925k|  B->lvl++;
  192|   925k|  return 1;
  193|   925k|}

luaopen_base:
  697|  13.6k|{
  698|       |  /* NOBARRIER: Table and value are the same. */
  699|  13.6k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|  13.6k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  700|  13.6k|  settabV(L, lj_tab_setstr(L, env, lj_str_newlit(L, "_G")), env);
  ------------------
  |  |   28|  13.6k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  701|  13.6k|  lua_pushliteral(L, LUA_VERSION);  /* top-3. */
  ------------------
  |  |  276|  13.6k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  702|  13.6k|  newproxy_weaktable(L);  /* top-2. */
  703|  13.6k|  LJ_LIB_REG(L, "_G", base);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  704|  13.6k|  LJ_LIB_REG(L, LUA_COLIBNAME, coroutine);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  705|  13.6k|  return 2;
  706|  13.6k|}
lib_base.c:newproxy_weaktable:
  686|  13.6k|{
  687|       |  /* NOBARRIER: The table is new (marked white). */
  688|  13.6k|  GCtab *t = lj_tab_new(L, 0, 1);
  689|  13.6k|  settabV(L, L->top++, t);
  690|  13.6k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  691|  13.6k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  13.6k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  692|  13.6k|	    lj_str_newlit(L, "kv"));
  ------------------
  |  |   28|  13.6k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  693|  13.6k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  694|  13.6k|}
lib_base.c:lj_ffh_assert:
   45|    502|{
   46|    502|  lj_lib_checkany(L, 1);
   47|    502|  if (L->top == L->base+1)
  ------------------
  |  Branch (47:7): [True: 486, False: 16]
  ------------------
   48|    486|    lj_err_caller(L, LJ_ERR_ASSERT);
   49|     16|  else if (tvisstr(L->base+1) || tvisnumber(L->base+1))
  ------------------
  |  |  795|     32|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     16|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     16|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 14, False: 2]
  |  |  ------------------
  ------------------
                else if (tvisstr(L->base+1) || tvisnumber(L->base+1))
  ------------------
  |  |  802|      2|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      2|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      2|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      2|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 1, False: 1]
  |  |  ------------------
  ------------------
   50|     15|    lj_err_callermsg(L, strdata(lj_lib_checkstr(L, 2)));
  ------------------
  |  |  316|     15|#define strdata(s)	((const char *)((s)+1))
  ------------------
   51|      1|  else
   52|      1|    lj_err_run(L);
   53|      0|  return FFH_UNREACHABLE;
  ------------------
  |  |   29|      0|#define FFH_UNREACHABLE	FFH_RETRY
  |  |  ------------------
  |  |  |  |   28|      0|#define FFH_RETRY	0
  |  |  ------------------
  ------------------
   54|    502|}
lib_base.c:lj_ffh_next:
   80|      5|{
   81|      5|  lj_lib_checktab(L, 1);
   82|      5|  lj_err_msg(L, LJ_ERR_NEXTIDX);
   83|      0|  return FFH_UNREACHABLE;
  ------------------
  |  |   29|      0|#define FFH_UNREACHABLE	FFH_RETRY
  |  |  ------------------
  |  |  |  |   28|      0|#define FFH_RETRY	0
  |  |  ------------------
  ------------------
   84|      5|}
lib_base.c:lj_ffh_pairs:
  109|      1|{
  110|      1|  return ffh_pairs(L, MM_pairs);
  111|      1|}
lib_base.c:ffh_pairs:
   88|      4|{
   89|      4|  TValue *o = lj_lib_checkany(L, 1);
   90|      4|  cTValue *mo = lj_meta_lookup(L, o, mm);
   91|      4|  if ((LJ_52 || tviscdata(o)) && !tvisnil(mo)) {
  ------------------
  |  |  697|      8|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if ((LJ_52 || tviscdata(o)) && !tvisnil(mo)) {
  ------------------
  |  |  799|      4|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      4|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 4]
  |  |  ------------------
  ------------------
                if ((LJ_52 || tviscdata(o)) && !tvisnil(mo)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (91:34): [True: 0, False: 0]
  ------------------
   92|      0|    L->top = o+1;  /* Only keep one argument. */
   93|      0|    copyTV(L, L->base-1-LJ_FR2, mo);  /* Replace callable. */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
   94|      0|    return FFH_TAILCALL;
  ------------------
  |  |   31|      0|#define FFH_TAILCALL	(-1)
  ------------------
   95|      4|  } else {
   96|      4|    if (!tvistab(o)) lj_err_argt(L, 1, LUA_TTABLE);
  ------------------
  |  |  800|      4|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      4|#define LJ_TTAB			(~11u)
  |  |  ------------------
  ------------------
                  if (!tvistab(o)) lj_err_argt(L, 1, LUA_TTABLE);
  ------------------
  |  |   80|      4|#define LUA_TTABLE		5
  ------------------
  |  Branch (96:9): [True: 4, False: 0]
  ------------------
   97|      0|    if (LJ_FR2) { copyTV(L, o-1, o); o--; }
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
   98|      0|    setfuncV(L, o-1, funcV(lj_lib_upvalue(L, 1)));
  ------------------
  |  |  860|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   99|      0|    if (mm == MM_pairs) setnilV(o+1); else setintV(o+1, 0);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (99:9): [True: 0, False: 0]
  ------------------
  100|      0|    return FFH_RES(3);
  ------------------
  |  |   30|      0|#define FFH_RES(n)	((n)+1)
  ------------------
  101|      0|  }
  102|      4|}
lib_base.c:lj_ffh_ipairs:
  122|      3|{
  123|      3|  return ffh_pairs(L, MM_ipairs);
  124|      3|}
lib_base.c:lj_ffh_setmetatable:
  132|    802|{
  133|    802|  GCtab *t = lj_lib_checktab(L, 1);
  134|    802|  GCtab *mt = lj_lib_checktabornil(L, 2);
  135|    802|  if (!tvisnil(lj_meta_lookup(L, L->base, MM_metatable)))
  ------------------
  |  |  782|    802|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (135:7): [True: 254, False: 548]
  ------------------
  136|    254|    lj_err_caller(L, LJ_ERR_PROTMT);
  137|    548|  setgcref(t->metatable, obj2gco(mt));
  ------------------
  |  |   72|    548|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  138|    548|  if (mt) { lj_gc_objbarriert(L, t, mt); }
  ------------------
  |  |  100|    280|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   32|    560|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    280|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    280|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    280|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 280, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|    280|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    280|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 280]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  101|    280|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (138:7): [True: 280, False: 268]
  ------------------
  139|    548|  settabV(L, L->base-1-LJ_FR2, t);
  ------------------
  |  |  569|    548|#define LJ_FR2			1
  ------------------
  140|    548|  return FFH_RES(1);
  ------------------
  |  |   30|    548|#define FFH_RES(n)	((n)+1)
  ------------------
  141|    802|}
lib_base.c:lj_cf_getfenv:
  144|     73|{
  145|     73|  GCfunc *fn;
  146|     73|  cTValue *o = L->base;
  147|     73|  if (!(o < L->top && tvisfunc(o))) {
  ------------------
  |  |  796|     73|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     73|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     73|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 73]
  |  |  ------------------
  ------------------
  |  Branch (147:9): [True: 73, False: 0]
  ------------------
  148|     73|    int level = lj_lib_optint(L, 1, 1);
  149|     73|    if (level < 0)
  ------------------
  |  Branch (149:9): [True: 0, False: 73]
  ------------------
  150|      0|      lj_err_arg(L, 1, LJ_ERR_INVLVL);
  151|     73|    o = lj_debug_frame(L, level, &level);
  152|     73|    if (o == NULL)
  ------------------
  |  Branch (152:9): [True: 0, False: 73]
  ------------------
  153|      0|      lj_err_arg(L, 1, LJ_ERR_INVLVL);
  154|     73|    if (LJ_FR2) o--;
  ------------------
  |  |  569|     73|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  155|     73|  }
  156|     73|  fn = &gcval(o)->fn;
  ------------------
  |  |  833|     73|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  ------------------
  |  |  |  |   69|     73|#define gcrefu(r)	((r).gcptr64)
  |  |  ------------------
  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  ------------------
  |  |  |  |  291|     73|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  ------------------
  ------------------
  157|     73|  settabV(L, L->top++, isluafunc(fn) ? tabref(fn->l.env) : tabref(L->env));
  ------------------
  |  |  476|     73|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|     73|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 73]
  |  |  ------------------
  ------------------
                settabV(L, L->top++, isluafunc(fn) ? tabref(fn->l.env) : tabref(L->env));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                settabV(L, L->top++, isluafunc(fn) ? tabref(fn->l.env) : tabref(L->env));
  ------------------
  |  |  514|    146|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     73|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  158|     73|  return 1;
  159|     73|}
lib_base.c:lj_cf_setfenv:
  162|    332|{
  163|    332|  GCfunc *fn;
  164|    332|  GCtab *t = lj_lib_checktab(L, 2);
  165|    332|  cTValue *o = L->base;
  166|    332|  if (!(o < L->top && tvisfunc(o))) {
  ------------------
  |  |  796|    332|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|    332|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|    332|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 332]
  |  |  ------------------
  ------------------
  |  Branch (166:9): [True: 332, False: 0]
  ------------------
  167|    332|    int level = lj_lib_checkint(L, 1);
  168|    332|    if (level == 0) {
  ------------------
  |  Branch (168:9): [True: 0, False: 332]
  ------------------
  169|       |      /* NOBARRIER: A thread (i.e. L) is never black. */
  170|      0|      setgcref(L->env, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  171|      0|      return 0;
  172|      0|    }
  173|    332|    if (level < 0)
  ------------------
  |  Branch (173:9): [True: 0, False: 332]
  ------------------
  174|      0|      lj_err_arg(L, 1, LJ_ERR_INVLVL);
  175|    332|    o = lj_debug_frame(L, level, &level);
  176|    332|    if (o == NULL)
  ------------------
  |  Branch (176:9): [True: 0, False: 332]
  ------------------
  177|      0|      lj_err_arg(L, 1, LJ_ERR_INVLVL);
  178|    332|    if (LJ_FR2) o--;
  ------------------
  |  |  569|    332|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  179|    332|  }
  180|    332|  fn = &gcval(o)->fn;
  ------------------
  |  |  833|    332|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  ------------------
  |  |  |  |   69|    332|#define gcrefu(r)	((r).gcptr64)
  |  |  ------------------
  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  ------------------
  |  |  |  |  291|    332|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  ------------------
  ------------------
  181|    332|  if (!isluafunc(fn))
  ------------------
  |  |  476|    332|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    332|#define FF_LUA		0
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 0, False: 332]
  ------------------
  182|      0|    lj_err_caller(L, LJ_ERR_SETFENV);
  183|    332|  setgcref(fn->l.env, obj2gco(t));
  ------------------
  |  |   72|    332|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  184|    332|  lj_gc_objbarrier(L, obj2gco(fn), t);
  ------------------
  |  |  108|    332|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|    664|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    332|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    332|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    332|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 332, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|    332|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    332|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 332]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|    332|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  185|    332|  setfuncV(L, L->top++, fn);
  186|    332|  return 1;
  187|    332|}
lib_base.c:lj_ffh_rawget:
  190|      2|{
  191|      2|  lj_lib_checktab(L, 1);
  192|      2|  lj_lib_checkany(L, 2);
  193|      2|  return FFH_UNREACHABLE;
  ------------------
  |  |   29|      2|#define FFH_UNREACHABLE	FFH_RETRY
  |  |  ------------------
  |  |  |  |   28|      2|#define FFH_RETRY	0
  |  |  ------------------
  ------------------
  194|      2|}
lib_base.c:lj_cf_rawset:
  197|  1.34k|{
  198|  1.34k|  lj_lib_checktab(L, 1);
  199|  1.34k|  lj_lib_checkany(L, 2);
  200|  1.34k|  L->top = 1+lj_lib_checkany(L, 3);
  201|  1.34k|  lua_rawset(L, 1);
  202|  1.34k|  return 1;
  203|  1.34k|}
lib_base.c:lj_cf_rawequal:
  206|    234|{
  207|    234|  cTValue *o1 = lj_lib_checkany(L, 1);
  208|    234|  cTValue *o2 = lj_lib_checkany(L, 2);
  209|    234|  setboolV(L->top-1, lj_obj_equal(o1, o2));
  ------------------
  |  |  874|    234|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  210|    234|  return 1;
  211|    234|}
lib_base.c:lj_cf_unpack:
  228|    619|{
  229|    619|  GCtab *t = lj_lib_checktab(L, 1);
  230|    619|  int32_t n, i = lj_lib_optint(L, 2, 1);
  231|    619|  int32_t e = (L->base+3-1 < L->top && !tvisnil(L->base+3-1)) ?
  ------------------
  |  |  782|    376|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (231:16): [True: 376, False: 243]
  |  Branch (231:40): [True: 130, False: 246]
  ------------------
  232|    489|	      lj_lib_checkint(L, 3) : (int32_t)lj_tab_len(t);
  233|    619|  uint32_t nu;
  234|    619|  if (i > e) return 0;
  ------------------
  |  Branch (234:7): [True: 1, False: 618]
  ------------------
  235|    618|  nu = (uint32_t)e - (uint32_t)i;
  236|    618|  n = (int32_t)(nu+1);
  237|    618|  if (nu >= LUAI_MAXCSTACK || !lua_checkstack(L, n))
  ------------------
  |  |   92|  1.23k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
  |  Branch (237:7): [True: 0, False: 618]
  |  Branch (237:31): [True: 0, False: 618]
  ------------------
  238|      0|    lj_err_caller(L, LJ_ERR_UNPACK);
  239|  3.79k|  do {
  240|  3.79k|    cTValue *tv = lj_tab_getint(t, i);
  ------------------
  |  |   82|  3.79k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|  3.79k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 3.79k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|  3.79k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  3.79k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  3.79k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  241|  3.79k|    if (tv) {
  ------------------
  |  Branch (241:9): [True: 3.79k, False: 0]
  ------------------
  242|  3.79k|      copyTV(L, L->top++, tv);
  243|  3.79k|    } else {
  244|      0|      setnilV(L->top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  245|      0|    }
  246|  3.79k|  } while (i++ < e);
  ------------------
  |  Branch (246:12): [True: 3.17k, False: 618]
  ------------------
  247|    618|  return n;
  248|    618|}
lib_base.c:lj_cf_select:
  251|    547|{
  252|    547|  int32_t n = (int32_t)(L->top - L->base);
  253|    547|  if (n >= 1 && tvisstr(L->base) && *strVdata(L->base) == '#') {
  ------------------
  |  |  795|  1.09k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    547|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    547|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 479, False: 68]
  |  |  ------------------
  ------------------
                if (n >= 1 && tvisstr(L->base) && *strVdata(L->base) == '#') {
  ------------------
  |  |  318|    479|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|    958|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 479, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (253:7): [True: 547, False: 0]
  |  Branch (253:37): [True: 475, False: 4]
  ------------------
  254|    475|    setintV(L->top-1, n-1);
  255|    475|    return 1;
  256|    475|  } else {
  257|     72|    int32_t i = lj_lib_checkint(L, 1);
  258|     72|    if (i < 0) i = n + i; else if (i > n) i = n;
  ------------------
  |  Branch (258:9): [True: 8, False: 64]
  |  Branch (258:36): [True: 0, False: 64]
  ------------------
  259|     72|    if (i < 1)
  ------------------
  |  Branch (259:9): [True: 1, False: 71]
  ------------------
  260|      1|      lj_err_arg(L, 1, LJ_ERR_IDXRNG);
  261|     71|    return n - i;
  262|     72|  }
  263|    547|}
lib_base.c:lj_ffh_tonumber:
  268|  48.9k|{
  269|  48.9k|  int32_t base = lj_lib_optint(L, 2, 10);
  270|  48.9k|  if (base == 10) {
  ------------------
  |  Branch (270:7): [True: 48.9k, False: 0]
  ------------------
  271|  48.9k|    TValue *o = lj_lib_checkany(L, 1);
  272|  48.9k|    if (lj_strscan_numberobj(o)) {
  ------------------
  |  Branch (272:9): [True: 43.7k, False: 5.19k]
  ------------------
  273|  43.7k|      copyTV(L, L->base-1-LJ_FR2, o);
  ------------------
  |  |  569|  43.7k|#define LJ_FR2			1
  ------------------
  274|  43.7k|      return FFH_RES(1);
  ------------------
  |  |   30|  43.7k|#define FFH_RES(n)	((n)+1)
  ------------------
  275|  43.7k|    }
  276|  5.19k|#if LJ_HASFFI
  277|  5.19k|    if (tviscdata(o)) {
  ------------------
  |  |  799|  5.19k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  5.19k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  5.19k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 5.19k]
  |  |  ------------------
  ------------------
  278|      0|      CTState *cts = ctype_cts(L);
  279|      0|      CType *ct = lj_ctype_rawref(cts, cdataV(o)->ctypeid);
  ------------------
  |  |  863|      0|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  280|      0|      if (ctype_isenum(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  207|      0|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  281|      0|      if (ctype_isnum(ct->info) || ctype_iscomplex(ct->info)) {
  ------------------
  |  |  201|      0|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (ctype_isnum(ct->info) || ctype_iscomplex(ct->info)) {
  ------------------
  |  |  236|      0|  (((info) & (CTMASK_NUM|CTF_COMPLEX)) == CTINFO(CT_ARRAY, CTF_COMPLEX))
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_COMPLEX)) == CTINFO(CT_ARRAY, CTF_COMPLEX))
  |  |  ------------------
  |  |  |  |   73|      0|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_COMPLEX)) == CTINFO(CT_ARRAY, CTF_COMPLEX))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (236:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  282|      0|	if (LJ_DUALNUM && ctype_isinteger_or_bool(ct->info) &&
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (LJ_DUALNUM && ctype_isinteger_or_bool(ct->info) &&
  ------------------
  |  |  220|      0|  (((info) & (CTMASK_NUM|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   65|      0|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (220:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  283|      0|	    ct->size <= 4 && !(ct->size == 4 && (ct->info & CTF_UNSIGNED))) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (283:6): [True: 0, False: 0]
  |  Branch (283:25): [True: 0, False: 0]
  |  Branch (283:42): [True: 0, False: 0]
  ------------------
  284|      0|	  int32_t i;
  285|      0|	  lj_cconv_ct_tv(cts, ctype_get(cts, CTID_INT32), (uint8_t *)&i, o, 0);
  286|      0|	  setintV(L->base-1-LJ_FR2, i);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  287|      0|	  return FFH_RES(1);
  ------------------
  |  |   30|      0|#define FFH_RES(n)	((n)+1)
  ------------------
  288|      0|	}
  289|      0|	lj_cconv_ct_tv(cts, ctype_get(cts, CTID_DOUBLE),
  290|      0|		       (uint8_t *)&(L->base-1-LJ_FR2)->n, o, 0);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  291|      0|	return FFH_RES(1);
  ------------------
  |  |   30|      0|#define FFH_RES(n)	((n)+1)
  ------------------
  292|      0|      }
  293|      0|    }
  294|  5.19k|#endif
  295|  5.19k|  } else {
  296|      0|    const char *p = strdata(lj_lib_checkstr(L, 1));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  297|      0|    char *ep;
  298|      0|    unsigned int neg = 0;
  299|      0|    unsigned long ul;
  300|      0|    if (base < 2 || base > 36)
  ------------------
  |  Branch (300:9): [True: 0, False: 0]
  |  Branch (300:21): [True: 0, False: 0]
  ------------------
  301|      0|      lj_err_arg(L, 2, LJ_ERR_BASERNG);
  302|      0|    while (lj_char_isspace((unsigned char)(*p))) p++;
  303|      0|    if (*p == '-') { p++; neg = 1; } else if (*p == '+') { p++; }
  ------------------
  |  Branch (303:9): [True: 0, False: 0]
  |  Branch (303:47): [True: 0, False: 0]
  ------------------
  304|      0|    if (lj_char_isalnum((unsigned char)(*p))) {
  ------------------
  |  |   34|      0|#define lj_char_isalnum(c)	lj_char_isa((c), LJ_CHAR_ALNUM)
  |  |  ------------------
  |  |  |  |   24|      0|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|      0|      ul = strtoul(p, &ep, base);
  306|      0|      if (p != ep) {
  ------------------
  |  Branch (306:11): [True: 0, False: 0]
  ------------------
  307|      0|	while (lj_char_isspace((unsigned char)(*ep))) ep++;
  308|      0|	if (*ep == '\0') {
  ------------------
  |  Branch (308:6): [True: 0, False: 0]
  ------------------
  309|      0|	  if (LJ_DUALNUM && LJ_LIKELY(ul < 0x80000000u+neg)) {
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  if (LJ_DUALNUM && LJ_LIKELY(ul < 0x80000000u+neg)) {
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  310|      0|	    if (neg) ul = ~ul+1u;
  ------------------
  |  Branch (310:10): [True: 0, False: 0]
  ------------------
  311|      0|	    setintV(L->base-1-LJ_FR2, (int32_t)ul);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  312|      0|	  } else {
  313|      0|	    lua_Number n = (lua_Number)ul;
  314|      0|	    if (neg) n = -n;
  ------------------
  |  Branch (314:10): [True: 0, False: 0]
  ------------------
  315|      0|	    setnumV(L->base-1-LJ_FR2, n);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  316|      0|	  }
  317|      0|	  return FFH_RES(1);
  ------------------
  |  |   30|      0|#define FFH_RES(n)	((n)+1)
  ------------------
  318|      0|	}
  319|      0|      }
  320|      0|    }
  321|      0|  }
  322|  5.19k|  setnilV(L->base-1-LJ_FR2);
  ------------------
  |  |  872|  5.19k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  323|  5.19k|  return FFH_RES(1);
  ------------------
  |  |   30|  5.19k|#define FFH_RES(n)	((n)+1)
  ------------------
  324|  48.9k|}
lib_base.c:lj_ffh_tostring:
  327|  6.54k|{
  328|  6.54k|  TValue *o = lj_lib_checkany(L, 1);
  329|  6.54k|  cTValue *mo;
  330|  6.54k|  L->top = o+1;  /* Only keep one argument. */
  331|  6.54k|  if (!tvisnil(mo = lj_meta_lookup(L, o, MM_tostring))) {
  ------------------
  |  |  782|  6.54k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (331:7): [True: 505, False: 6.04k]
  ------------------
  332|    505|    copyTV(L, L->base-1-LJ_FR2, mo);  /* Replace callable. */
  ------------------
  |  |  569|    505|#define LJ_FR2			1
  ------------------
  333|    505|    return FFH_TAILCALL;
  ------------------
  |  |   31|    505|#define FFH_TAILCALL	(-1)
  ------------------
  334|    505|  }
  335|  6.04k|  lj_gc_check(L);
  ------------------
  |  |   66|  6.04k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  6.04k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 279, False: 5.76k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  6.04k|      lj_gc_step(L); }
  ------------------
  336|  6.04k|  setstrV(L, L->base-1-LJ_FR2, lj_strfmt_obj(L, L->base));
  ------------------
  |  |  569|  6.04k|#define LJ_FR2			1
  ------------------
  337|  6.04k|  return FFH_RES(1);
  ------------------
  |  |   30|  6.04k|#define FFH_RES(n)	((n)+1)
  ------------------
  338|  6.54k|}
lib_base.c:lj_cf_error:
  343|    259|{
  344|    259|  int32_t level = lj_lib_optint(L, 2, 1);
  345|    259|  lua_settop(L, 1);
  346|    259|  if (lua_isstring(L, 1) && level > 0) {
  ------------------
  |  Branch (346:7): [True: 259, False: 0]
  |  Branch (346:29): [True: 258, False: 1]
  ------------------
  347|    258|    luaL_where(L, level);
  348|    258|    lua_pushvalue(L, 1);
  349|    258|    lua_concat(L, 2);
  350|    258|  }
  351|    259|  return lua_error(L);
  352|    259|}
lib_base.c:lj_ffh_pcall:
  355|      4|{
  356|      4|  lj_lib_checkany(L, 1);
  357|      4|  lj_lib_checkfunc(L, 2);  /* For xpcall only. */
  358|      4|  return FFH_UNREACHABLE;
  ------------------
  |  |   29|      4|#define FFH_UNREACHABLE	FFH_RETRY
  |  |  ------------------
  |  |  |  |   28|      4|#define FFH_RETRY	0
  |  |  ------------------
  ------------------
  359|      4|}
lib_base.c:load_aux:
  365|  2.95M|{
  366|  2.95M|  if (status == LUA_OK) {
  ------------------
  |  |   43|  2.95M|#define LUA_OK		0
  ------------------
  |  Branch (366:7): [True: 982k, False: 1.97M]
  ------------------
  367|       |    /*
  368|       |    ** Set environment table for top-level function.
  369|       |    ** Don't do this for non-native bytecode, which returns a prototype.
  370|       |    */
  371|   982k|    if (tvistab(L->base+envarg-1) && tvisfunc(L->top-1)) {
  ------------------
  |  |  800|  1.96M|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|   982k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|   982k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 982k]
  |  |  ------------------
  ------------------
                  if (tvistab(L->base+envarg-1) && tvisfunc(L->top-1)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  372|      0|      GCfunc *fn = funcV(L->top-1);
  ------------------
  |  |  860|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  373|      0|      GCtab *t = tabV(L->base+envarg-1);
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  374|      0|      setgcref(fn->c.env, obj2gco(t));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  375|      0|      lj_gc_objbarrier(L, fn, t);
  ------------------
  |  |  108|      0|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|      0|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  376|      0|    }
  377|   982k|    return 1;
  378|  1.97M|  } else {
  379|  1.97M|    setnilV(L->top-2);
  ------------------
  |  |  872|  1.97M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  380|  1.97M|    return 2;
  381|  1.97M|  }
  382|  2.95M|}
lib_base.c:lj_cf_load:
  415|  2.95M|{
  416|  2.95M|  GCstr *name = lj_lib_optstr(L, 2);
  417|  2.95M|  GCstr *mode = lj_lib_optstr(L, 3);
  418|  2.95M|  int status;
  419|  2.95M|  if (L->base < L->top &&
  ------------------
  |  Branch (419:7): [True: 2.95M, False: 0]
  ------------------
  420|  2.95M|      (tvisstr(L->base) || tvisnumber(L->base) || tvisbuf(L->base))) {
  ------------------
  |  |  795|  5.91M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  2.95M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.95M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 2.95M, False: 0]
  |  |  ------------------
  ------------------
                    (tvisstr(L->base) || tvisnumber(L->base) || tvisbuf(L->base))) {
  ------------------
  |  |  802|  2.95M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    (tvisstr(L->base) || tvisnumber(L->base) || tvisbuf(L->base))) {
  ------------------
  |  |   65|      0|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|      0|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  421|  2.95M|    const char *s;
  422|  2.95M|    MSize len;
  423|  2.95M|    if (tvisbuf(L->base)) {
  ------------------
  |  |   65|  2.95M|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  5.91M|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  5.91M|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  2.95M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|  2.95M|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 2.95M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  424|      0|      SBufExt *sbx = bufV(L->base);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  425|      0|      s = sbx->r;
  426|      0|      len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  427|      0|      if (!name) name = &G(L)->strempty;  /* Buffers are not NUL-terminated. */
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (427:11): [True: 0, False: 0]
  ------------------
  428|  2.95M|    } else {
  429|  2.95M|      GCstr *str = lj_lib_checkstr(L, 1);
  430|  2.95M|      s = strdata(str);
  ------------------
  |  |  316|  2.95M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  431|  2.95M|      len = str->len;
  432|  2.95M|    }
  433|  2.95M|    lua_settop(L, 4);  /* Ensure env arg exists. */
  434|  2.95M|    status = luaL_loadbufferx(L, s, len, name ? strdata(name) : s,
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (434:42): [True: 0, False: 2.95M]
  ------------------
  435|  2.95M|			      mode ? strdata(mode) : NULL);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (435:10): [True: 0, False: 2.95M]
  ------------------
  436|  2.95M|  } else {
  437|      0|    lj_lib_checkfunc(L, 1);
  438|      0|    lua_settop(L, 5);  /* Reserve a slot for the string from the reader. */
  439|      0|    status = lua_loadx(L, reader_func, NULL, name ? strdata(name) : "=(load)",
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (439:46): [True: 0, False: 0]
  ------------------
  440|      0|		       mode ? strdata(mode) : NULL);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (440:10): [True: 0, False: 0]
  ------------------
  441|      0|  }
  442|  2.95M|  return load_aux(L, status, 4);
  443|  2.95M|}
lib_base.c:lj_cf_loadstring:
  446|  2.95M|{
  447|  2.95M|  return lj_cf_load(L);
  448|  2.95M|}
lib_base.c:lj_cf_dofile:
  451|    951|{
  452|    951|  GCstr *fname = lj_lib_optstr(L, 1);
  453|    951|  setnilV(L->top);
  ------------------
  |  |  872|    951|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  454|    951|  L->top = L->base+1;
  455|    951|  if (luaL_loadfile(L, fname ? strdata(fname) : NULL) != LUA_OK)
  ------------------
  |  |  316|    945|#define strdata(s)	((const char *)((s)+1))
  ------------------
                if (luaL_loadfile(L, fname ? strdata(fname) : NULL) != LUA_OK)
  ------------------
  |  |   43|    951|#define LUA_OK		0
  ------------------
  |  Branch (455:7): [True: 776, False: 175]
  |  Branch (455:24): [True: 945, False: 6]
  ------------------
  456|    776|    lua_error(L);
  457|    951|  lua_call(L, 0, LUA_MULTRET);
  ------------------
  |  |   30|    951|#define LUA_MULTRET	(-1)
  ------------------
  458|    951|  return (int)(L->top - L->base) - 1;
  459|    951|}
lib_base.c:lj_cf_gcinfo:
  464|  21.5k|{
  465|  21.5k|  setintV(L->top++, (int32_t)(G(L)->gc.total >> 10));
  ------------------
  |  |  705|  21.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  21.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  466|  21.5k|  return 1;
  467|  21.5k|}
lib_base.c:lj_cf_collectgarbage:
  470|  6.74k|{
  471|  6.74k|  int opt = lj_lib_checkopt(L, 1, LUA_GCCOLLECT,  /* ORDER LUA_GC* */
  ------------------
  |  |  224|  6.74k|#define LUA_GCCOLLECT		2
  ------------------
  472|  6.74k|    "\4stop\7restart\7collect\5count\1\377\4step\10setpause\12setstepmul\1\377\11isrunning");
  473|  6.74k|  int32_t data = lj_lib_optint(L, 2, 0);
  474|  6.74k|  if (opt == LUA_GCCOUNT) {
  ------------------
  |  |  225|  6.74k|#define LUA_GCCOUNT		3
  ------------------
  |  Branch (474:7): [True: 0, False: 6.74k]
  ------------------
  475|      0|    setnumV(L->top, (lua_Number)G(L)->gc.total/1024.0);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  476|  6.74k|  } else {
  477|  6.74k|    int res = lua_gc(L, opt, data);
  478|  6.74k|    if (opt == LUA_GCSTEP || opt == LUA_GCISRUNNING)
  ------------------
  |  |  227|  13.4k|#define LUA_GCSTEP		5
  ------------------
                  if (opt == LUA_GCSTEP || opt == LUA_GCISRUNNING)
  ------------------
  |  |  230|  6.74k|#define LUA_GCISRUNNING		9
  ------------------
  |  Branch (478:9): [True: 0, False: 6.74k]
  |  Branch (478:30): [True: 0, False: 6.74k]
  ------------------
  479|      0|      setboolV(L->top, res);
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  480|  6.74k|    else
  481|  6.74k|      setintV(L->top, res);
  482|  6.74k|  }
  483|  6.74k|  L->top++;
  484|  6.74k|  return 1;
  485|  6.74k|}
lib_base.c:lj_cf_newproxy:
  491|    284|{
  492|    284|  lua_settop(L, 1);
  493|    284|  lua_newuserdata(L, 0);
  494|    284|  if (lua_toboolean(L, 1) == 0) {  /* newproxy(): without metatable. */
  ------------------
  |  Branch (494:7): [True: 144, False: 140]
  ------------------
  495|    144|    return 1;
  496|    144|  } else if (lua_isboolean(L, 1)) {  /* newproxy(true): with metatable. */
  ------------------
  |  |  270|    140|#define lua_isboolean(L,n)	(lua_type(L, (n)) == LUA_TBOOLEAN)
  |  |  ------------------
  |  |  |  |   76|    140|#define LUA_TBOOLEAN		1
  |  |  ------------------
  |  |  |  Branch (270:28): [True: 72, False: 68]
  |  |  ------------------
  ------------------
  497|     72|    lua_newtable(L);
  ------------------
  |  |  258|     72|#define lua_newtable(L)		lua_createtable(L, 0, 0)
  ------------------
  498|     72|    lua_pushvalue(L, -1);
  499|     72|    lua_pushboolean(L, 1);
  500|     72|    lua_rawset(L, lua_upvalueindex(1));  /* Remember mt in weak table. */
  ------------------
  |  |   39|     72|#define lua_upvalueindex(i)	(LUA_GLOBALSINDEX-(i))
  |  |  ------------------
  |  |  |  |   38|     72|#define LUA_GLOBALSINDEX	(-10002)
  |  |  ------------------
  ------------------
  501|     72|  } else {  /* newproxy(proxy): inherit metatable. */
  502|     68|    int validproxy = 0;
  503|     68|    if (lua_getmetatable(L, 1)) {
  ------------------
  |  Branch (503:9): [True: 68, False: 0]
  ------------------
  504|     68|      lua_rawget(L, lua_upvalueindex(1));
  ------------------
  |  |   39|     68|#define lua_upvalueindex(i)	(LUA_GLOBALSINDEX-(i))
  |  |  ------------------
  |  |  |  |   38|     68|#define LUA_GLOBALSINDEX	(-10002)
  |  |  ------------------
  ------------------
  505|     68|      validproxy = lua_toboolean(L, -1);
  506|     68|      lua_pop(L, 1);
  ------------------
  |  |  256|     68|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  507|     68|    }
  508|     68|    if (!validproxy)
  ------------------
  |  Branch (508:9): [True: 0, False: 68]
  ------------------
  509|      0|      lj_err_arg(L, 1, LJ_ERR_NOPROXY);
  510|     68|    lua_getmetatable(L, 1);
  511|     68|  }
  512|    140|  lua_setmetatable(L, 2);
  513|    140|  return 1;
  514|    284|}
lib_base.c:lj_cf_print:
  518|  9.01k|{
  519|  9.01k|  ptrdiff_t i, nargs = L->top - L->base;
  520|  9.01k|  cTValue *tv = lj_tab_getstr(tabref(L->env), strV(lj_lib_upvalue(L, 1)));
  ------------------
  |  |  514|  9.01k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  9.01k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                cTValue *tv = lj_tab_getstr(tabref(L->env), strV(lj_lib_upvalue(L, 1)));
  ------------------
  |  |  859|  9.01k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  9.01k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.01k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.01k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.01k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.01k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  521|      0|  int shortcut;
  522|  9.01k|  if (tv && !tvisnil(tv)) {
  ------------------
  |  |  782|  9.01k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (522:7): [True: 9.01k, False: 0]
  |  Branch (522:13): [True: 9.01k, False: 0]
  ------------------
  523|  9.01k|    copyTV(L, L->top++, tv);
  524|  9.01k|  } else {
  525|      0|    setstrV(L, L->top++, strV(lj_lib_upvalue(L, 1)));
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|      0|    lua_gettable(L, LUA_GLOBALSINDEX);
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  527|      0|    tv = L->top-1;
  528|      0|  }
  529|  18.0k|  shortcut = (tvisfunc(tv) && funcV(tv)->c.ffid == FF_tostring) &&
  ------------------
  |  |  796|  18.0k|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|  9.01k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|  9.01k|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 9.01k, False: 0]
  |  |  ------------------
  ------------------
                shortcut = (tvisfunc(tv) && funcV(tv)->c.ffid == FF_tostring) &&
  ------------------
  |  |  860|  9.01k|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  9.01k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.01k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.01k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.01k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.01k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (529:31): [True: 9.01k, False: 0]
  ------------------
  530|  9.01k|	     !gcrefu(basemt_it(G(L), LJ_TNUMX));
  ------------------
  |  |   69|  18.0k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  |  Branch (530:7): [True: 9.01k, False: 0]
  ------------------
  531|  18.1k|  for (i = 0; i < nargs; i++) {
  ------------------
  |  Branch (531:15): [True: 9.08k, False: 9.01k]
  ------------------
  532|  9.08k|    cTValue *o = &L->base[i];
  533|  9.08k|    const char *str;
  534|  9.08k|    size_t size;
  535|  9.08k|    MSize len;
  536|  9.08k|    if (shortcut && (str = lj_strfmt_wstrnum(L, o, &len)) != NULL) {
  ------------------
  |  Branch (536:9): [True: 9.08k, False: 0]
  |  Branch (536:21): [True: 3.04k, False: 6.03k]
  ------------------
  537|  3.04k|      size = len;
  538|  6.03k|    } else {
  539|  6.03k|      copyTV(L, L->top+1, o);
  540|  6.03k|      copyTV(L, L->top, L->top-1);
  541|  6.03k|      L->top += 2;
  542|  6.03k|      lua_call(L, 1, 1);
  543|  6.03k|      str = lua_tolstring(L, -1, &size);
  544|  6.03k|      if (!str)
  ------------------
  |  Branch (544:11): [True: 0, False: 6.03k]
  ------------------
  545|      0|	lj_err_caller(L, LJ_ERR_PRTOSTR);
  546|  6.03k|      L->top--;
  547|  6.03k|    }
  548|  9.08k|    if (i)
  ------------------
  |  Branch (548:9): [True: 71, False: 9.01k]
  ------------------
  549|     71|      putchar('\t');
  550|  9.08k|    fwrite(str, 1, size, stdout);
  551|  9.08k|  }
  552|  9.01k|  putchar('\n');
  553|  9.01k|  return 0;
  554|  9.01k|}
lib_base.c:lj_cf_coroutine_create:
  602|     46|{
  603|     46|  lua_State *L1;
  604|     46|  if (!(L->base < L->top && tvisfunc(L->base)))
  ------------------
  |  |  796|     46|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     46|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     46|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 46, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (604:9): [True: 46, False: 0]
  ------------------
  605|      0|    lj_err_argt(L, 1, LUA_TFUNCTION);
  ------------------
  |  |   81|      0|#define LUA_TFUNCTION		6
  ------------------
  606|     46|  L1 = lua_newthread(L);
  607|     46|  setfuncV(L, L1->top++, funcV(L->base));
  ------------------
  |  |  860|     46|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|     46|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     46|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     46|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     46|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  608|      0|  return 1;
  609|     46|}
lib_base.c:lj_ffh_coroutine_resume:
  635|     12|{
  636|     12|  if (!(L->top > L->base && tvisthread(L->base)))
  ------------------
  |  |  797|     12|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  781|     12|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|     12|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (797:23): [True: 9, False: 3]
  |  |  ------------------
  ------------------
  |  Branch (636:9): [True: 12, False: 0]
  ------------------
  637|      3|    lj_err_arg(L, 1, LJ_ERR_NOCORO);
  638|      9|  return ffh_resume(L, threadV(L->base), 0);
  ------------------
  |  |  861|      9|#define threadV(o)	check_exp(tvisthread(o), &gcval(o)->th)
  |  |  ------------------
  |  |  |  |  367|      9|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      9|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      9|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      9|}
lib_base.c:ffh_resume:
  618|      9|{
  619|      9|  if (co->cframe != NULL || co->status > LUA_YIELD ||
  ------------------
  |  |   44|     18|#define LUA_YIELD	1
  ------------------
  |  Branch (619:7): [True: 0, False: 9]
  |  Branch (619:29): [True: 5, False: 4]
  ------------------
  620|      9|      (co->status == LUA_OK && co->top == co->base)) {
  ------------------
  |  |   43|      8|#define LUA_OK		0
  ------------------
  |  Branch (620:8): [True: 4, False: 0]
  |  Branch (620:32): [True: 4, False: 0]
  ------------------
  621|      9|    ErrMsg em = co->cframe ? LJ_ERR_CORUN : LJ_ERR_CODEAD;
  ------------------
  |  Branch (621:17): [True: 0, False: 9]
  ------------------
  622|      9|    if (wrap) lj_err_caller(L, em);
  ------------------
  |  Branch (622:9): [True: 0, False: 9]
  ------------------
  623|      9|    setboolV(L->base-1-LJ_FR2, 0);
  ------------------
  |  |  874|      9|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  624|      9|    setstrV(L, L->base-LJ_FR2, lj_err_str(L, em));
  ------------------
  |  |  569|      9|#define LJ_FR2			1
  ------------------
  625|      9|    return FFH_RES(2);
  ------------------
  |  |   30|      9|#define FFH_RES(n)	((n)+1)
  ------------------
  626|      9|  }
  627|      0|  if (lj_state_cpgrowstack(co, (MSize)(L->top - L->base)) != LUA_OK) {
  ------------------
  |  |   43|      0|#define LUA_OK		0
  ------------------
  |  Branch (627:7): [True: 0, False: 0]
  ------------------
  628|      0|    cTValue *msg = --co->top;
  629|      0|    lj_err_callermsg(L, strVdata(msg));
  ------------------
  |  |  318|      0|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  630|      0|  }
  631|      0|  return FFH_RETRY;
  ------------------
  |  |   28|      0|#define FFH_RETRY	0
  ------------------
  632|      0|}

luaopen_bit:
  177|  13.6k|{
  178|  13.6k|  LJ_LIB_REG(L, LUA_BITLIBNAME, bit);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  179|  13.6k|  return 1;
  180|  13.6k|}

luaopen_debug:
  402|  13.6k|{
  403|  13.6k|  LJ_LIB_REG(L, LUA_DBLIBNAME, debug);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  404|  13.6k|  return 1;
  405|  13.6k|}
lib_debug.c:lj_cf_debug_setmetatable:
   42|    221|{
   43|    221|  lj_lib_checktabornil(L, 2);
   44|    221|  L->top = L->base+2;
   45|    221|  lua_setmetatable(L, 1);
   46|    221|#if !LJ_52
   47|    221|  setboolV(L->top-1, 1);
  ------------------
  |  |  874|    221|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
   48|    221|#endif
   49|    221|  return 1;
   50|    221|}
lib_debug.c:lj_cf_debug_getinfo:
  111|      3|{
  112|      3|  lj_Debug ar;
  113|      3|  int arg, opt_f = 0, opt_L = 0;
  114|      3|  lua_State *L1 = getthread(L, &arg);
  115|      3|  const char *options = luaL_optstring(L, arg+2, "flnSu");
  ------------------
  |  |  104|      3|#define luaL_optstring(L,n,d)	(luaL_optlstring(L, (n), (d), NULL))
  ------------------
  116|      3|  if (lua_isnumber(L, arg+1)) {
  ------------------
  |  Branch (116:7): [True: 0, False: 3]
  ------------------
  117|      0|    if (!lua_getstack(L1, (int)lua_tointeger(L, arg+1), (lua_Debug *)&ar)) {
  ------------------
  |  Branch (117:9): [True: 0, False: 0]
  ------------------
  118|      0|      setnilV(L->top-1);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  119|      0|      return 1;
  120|      0|    }
  121|      3|  } else if (L->base+arg < L->top && tvisfunc(L->base+arg)) {
  ------------------
  |  |  796|      3|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      3|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (121:14): [True: 3, False: 0]
  ------------------
  122|      3|    options = lua_pushfstring(L, ">%s", options);
  123|      3|    setfuncV(L1, L1->top++, funcV(L->base+arg));
  ------------------
  |  |  860|      3|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  124|      3|  } else {
  125|      0|    lj_err_arg(L, arg+1, LJ_ERR_NOFUNCL);
  126|      0|  }
  127|      3|  if (!lj_debug_getinfo(L1, options, &ar, 1))
  ------------------
  |  Branch (127:7): [True: 0, False: 3]
  ------------------
  128|      0|    lj_err_arg(L, arg+2, LJ_ERR_INVOPT);
  129|      3|  lua_createtable(L, 0, 16);  /* Create result table. */
  130|      9|  for (; *options; options++) {
  ------------------
  |  Branch (130:10): [True: 6, False: 3]
  ------------------
  131|      6|    switch (*options) {
  132|      3|    case 'S':
  ------------------
  |  Branch (132:5): [True: 3, False: 3]
  ------------------
  133|      3|      settabss(L, "source", ar.source);
  134|      3|      settabss(L, "short_src", ar.short_src);
  135|      3|      settabsi(L, "linedefined", ar.linedefined);
  136|      3|      settabsi(L, "lastlinedefined", ar.lastlinedefined);
  137|      3|      settabss(L, "what", ar.what);
  138|      3|      break;
  139|      0|    case 'l':
  ------------------
  |  Branch (139:5): [True: 0, False: 6]
  ------------------
  140|      0|      settabsi(L, "currentline", ar.currentline);
  141|      0|      break;
  142|      0|    case 'u':
  ------------------
  |  Branch (142:5): [True: 0, False: 6]
  ------------------
  143|      0|      settabsi(L, "nups", ar.nups);
  144|      0|      settabsi(L, "nparams", ar.nparams);
  145|      0|      settabsb(L, "isvararg", ar.isvararg);
  146|      0|      break;
  147|      0|    case 'n':
  ------------------
  |  Branch (147:5): [True: 0, False: 6]
  ------------------
  148|      0|      settabss(L, "name", ar.name);
  149|      0|      settabss(L, "namewhat", ar.namewhat);
  150|      0|      break;
  151|      0|    case 'f': opt_f = 1; break;
  ------------------
  |  Branch (151:5): [True: 0, False: 6]
  ------------------
  152|      0|    case 'L': opt_L = 1; break;
  ------------------
  |  Branch (152:5): [True: 0, False: 6]
  ------------------
  153|      3|    default: break;
  ------------------
  |  Branch (153:5): [True: 3, False: 3]
  ------------------
  154|      6|    }
  155|      6|  }
  156|      3|  if (opt_L) treatstackoption(L, L1, "activelines");
  ------------------
  |  Branch (156:7): [True: 0, False: 3]
  ------------------
  157|      3|  if (opt_f) treatstackoption(L, L1, "func");
  ------------------
  |  Branch (157:7): [True: 0, False: 3]
  ------------------
  158|      3|  return 1;  /* Return result table. */
  159|      3|}
lib_debug.c:getthread:
   89|    246|{
   90|    246|  if (L->base < L->top && tvisthread(L->base)) {
  ------------------
  |  |  797|    246|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  781|    246|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|    246|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (797:23): [True: 0, False: 246]
  |  |  ------------------
  ------------------
  |  Branch (90:7): [True: 246, False: 0]
  ------------------
   91|      0|    *arg = 1;
   92|      0|    return threadV(L->base);
  ------------------
  |  |  861|      0|#define threadV(o)	check_exp(tvisthread(o), &gcval(o)->th)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   93|    246|  } else {
   94|    246|    *arg = 0;
   95|    246|    return L;
   96|    246|  }
   97|    246|}
lib_debug.c:settabss:
   71|      9|{
   72|      9|  lua_pushstring(L, v);
   73|      9|  lua_setfield(L, -2, i);
   74|      9|}
lib_debug.c:settabsi:
   77|      6|{
   78|      6|  lua_pushinteger(L, v);
   79|      6|  lua_setfield(L, -2, i);
   80|      6|}
lib_debug.c:lj_cf_debug_sethook:
  324|    203|{
  325|    203|  int arg, mask, count;
  326|    203|  lua_Hook func;
  327|    203|  (void)getthread(L, &arg);
  328|    203|  if (lua_isnoneornil(L, arg+1)) {
  ------------------
  |  |  273|    203|#define lua_isnoneornil(L, n)	(lua_type(L, (n)) <= 0)
  |  |  ------------------
  |  |  |  Branch (273:31): [True: 42, False: 161]
  |  |  ------------------
  ------------------
  329|     42|    lua_settop(L, arg+1);
  330|     42|    func = NULL; mask = 0; count = 0;  /* turn off hooks */
  331|    161|  } else {
  332|    161|    const char *smask = luaL_checkstring(L, arg+2);
  ------------------
  |  |  103|    161|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  333|    161|    luaL_checktype(L, arg+1, LUA_TFUNCTION);
  ------------------
  |  |   81|    161|#define LUA_TFUNCTION		6
  ------------------
  334|    161|    count = luaL_optint(L, arg+3, 0);
  ------------------
  |  |  106|    161|#define luaL_optint(L,n,d)	((int)luaL_optinteger(L, (n), (d)))
  ------------------
  335|    161|    func = hookf; mask = makemask(smask, count);
  336|    161|  }
  337|    203|  (L->top++)->u64 = KEY_HOOK;
  ------------------
  |  |  286|    203|#define KEY_HOOK	(U64x(80000000,00000000)|'h')
  |  |  ------------------
  |  |  |  |   94|    203|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  338|    203|  lua_pushvalue(L, arg+1);
  339|    203|  lua_rawset(L, LUA_REGISTRYINDEX);
  ------------------
  |  |   36|    203|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  340|    203|  lua_sethook(L, func, mask, count);
  341|    203|  return 0;
  342|    203|}
lib_debug.c:hookf:
  289|   348k|{
  290|   348k|  static const char *const hooknames[] =
  291|   348k|    {"call", "return", "line", "count", "tail return"};
  292|   348k|  (L->top++)->u64 = KEY_HOOK;
  ------------------
  |  |  286|   348k|#define KEY_HOOK	(U64x(80000000,00000000)|'h')
  |  |  ------------------
  |  |  |  |   94|   348k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  293|   348k|  lua_rawget(L, LUA_REGISTRYINDEX);
  ------------------
  |  |   36|   348k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  294|   348k|  if (lua_isfunction(L, -1)) {
  ------------------
  |  |  266|   348k|#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
  |  |  ------------------
  |  |  |  |   81|   348k|#define LUA_TFUNCTION		6
  |  |  ------------------
  |  |  |  Branch (266:29): [True: 348k, False: 0]
  |  |  ------------------
  ------------------
  295|   348k|    lua_pushstring(L, hooknames[(int)ar->event]);
  296|   348k|    if (ar->currentline >= 0)
  ------------------
  |  Branch (296:9): [True: 0, False: 348k]
  ------------------
  297|      0|      lua_pushinteger(L, ar->currentline);
  298|   348k|    else lua_pushnil(L);
  299|   348k|    lua_call(L, 2, 0);
  300|   348k|  }
  301|   348k|}
lib_debug.c:makemask:
  304|    161|{
  305|    161|  int mask = 0;
  306|    161|  if (strchr(smask, 'c')) mask |= LUA_MASKCALL;
  ------------------
  |  |  323|      5|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|      5|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
  |  Branch (306:7): [True: 5, False: 156]
  ------------------
  307|    161|  if (strchr(smask, 'r')) mask |= LUA_MASKRET;
  ------------------
  |  |  324|      0|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|      0|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
  |  Branch (307:7): [True: 0, False: 161]
  ------------------
  308|    161|  if (strchr(smask, 'l')) mask |= LUA_MASKLINE;
  ------------------
  |  |  325|      0|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|      0|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
  |  Branch (308:7): [True: 0, False: 161]
  ------------------
  309|    161|  if (count > 0) mask |= LUA_MASKCOUNT;
  ------------------
  |  |  326|    147|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|    147|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
  |  Branch (309:7): [True: 147, False: 14]
  ------------------
  310|    161|  return mask;
  311|    161|}
lib_debug.c:lj_cf_debug_traceback:
  386|     40|{
  387|     40|  int arg;
  388|     40|  lua_State *L1 = getthread(L, &arg);
  389|     40|  const char *msg = lua_tostring(L, arg+1);
  ------------------
  |  |  281|     40|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  390|     40|  if (msg == NULL && L->top > L->base+arg)
  ------------------
  |  Branch (390:7): [True: 0, False: 40]
  |  Branch (390:22): [True: 0, False: 0]
  ------------------
  391|      0|    L->top = L->base+arg+1;
  392|     40|  else
  393|     40|    luaL_traceback(L, L1, msg, lj_lib_optint(L, arg+2, (L == L1)));
  394|     40|  return 1;
  395|     40|}

luaopen_ffi:
  838|  3.31k|{
  839|  3.31k|  CTState *cts = lj_ctype_init(L);
  840|  3.31k|  settabV(L, L->top++, (cts->miscmap = lj_tab_new(L, 0, 1)));
  841|  3.31k|  LJ_LIB_REG(L, NULL, ffi_meta);
  ------------------
  |  |   92|  3.31k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  842|       |  /* NOBARRIER: basemt is a GC root. */
  843|  3.31k|  setgcref(basemt_it(G(L), LJ_TCDATA), obj2gco(tabV(L->top-1)));
  ------------------
  |  |   72|  6.63k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 3.31k, False: 0]
  |  |  ------------------
  ------------------
  844|  3.31k|  LJ_LIB_REG(L, NULL, ffi_clib);
  ------------------
  |  |   92|  3.31k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  845|  3.31k|  LJ_LIB_REG(L, NULL, ffi_callback);
  ------------------
  |  |   92|  3.31k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  846|       |  /* NOBARRIER: the key is new and lj_tab_newkey() handles the barrier. */
  847|  3.31k|  settabV(L, lj_tab_setstr(L, cts->miscmap, &cts->g->strempty), tabV(L->top-1));
  ------------------
  |  |  864|  3.31k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  848|      0|  L->top--;
  849|  3.31k|  lj_clib_default(L, tabV(L->top-1));  /* Create ffi.C default namespace. */
  ------------------
  |  |  864|  3.31k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  850|  3.31k|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|  3.31k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  851|  3.31k|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|  3.31k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  852|  3.31k|  LJ_LIB_REG(L, NULL, ffi);  /* Note: no global "ffi" created! */
  ------------------
  |  |   92|  3.31k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  853|  3.31k|  ffi_register_module(L);
  854|  3.31k|  return 1;
  855|  3.31k|}
lib_ffi.c:lj_cf_ffi_meta___index:
  147|      9|{
  148|      9|  CTState *cts = ctype_cts(L);
  149|      9|  CTInfo qual = 0;
  150|      9|  CType *ct;
  151|      9|  uint8_t *p;
  152|      9|  TValue *o = L->base;
  153|      9|  if (!(o+1 < L->top && tviscdata(o)))  /* Also checks for presence of key. */
  ------------------
  |  |  799|      9|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      9|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 9, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (153:9): [True: 9, False: 0]
  ------------------
  154|      0|    lj_err_argt(L, 1, LUA_TCDATA);
  ------------------
  |  |  222|      0|#define LUA_TCDATA	(LAST_TT+2)
  |  |  ------------------
  |  |  |  |  220|      0|#define LAST_TT		LUA_TTHREAD
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|      0|#define LUA_TTHREAD		8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  155|      9|  ct = lj_cdata_index(cts, cdataV(o), o+1, &p, &qual);
  ------------------
  |  |  863|      9|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      9|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      9|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      9|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  156|      9|  if ((qual & 1))
  ------------------
  |  Branch (156:7): [True: 9, False: 0]
  ------------------
  157|      9|    return ffi_index_meta(L, cts, ct, MM_index);
  158|      0|  if (lj_cdata_get(cts, ct, L->top-1, p))
  ------------------
  |  Branch (158:7): [True: 0, False: 0]
  ------------------
  159|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  160|      0|  return 1;
  161|      9|}
lib_ffi.c:ffi_index_meta:
  108|      9|{
  109|      9|  CTypeID id = ctype_typeid(cts, ct);
  ------------------
  |  |  425|      9|#define ctype_typeid(cts, ct)	((CTypeID)((ct) - (cts)->tab))
  ------------------
  110|      9|  cTValue *tv = lj_ctype_meta(cts, id, mm);
  111|      9|  TValue *base = L->base;
  112|      9|  if (!tv) {
  ------------------
  |  Branch (112:7): [True: 9, False: 0]
  ------------------
  113|      9|    const char *s;
  114|      9|  err_index:
  115|      9|    s = strdata(lj_ctype_repr(L, id, NULL));
  ------------------
  |  |  316|      9|#define strdata(s)	((const char *)((s)+1))
  ------------------
  116|      9|    if (tvisstr(L->base+1)) {
  ------------------
  |  |  795|      9|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      9|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 9, False: 0]
  |  |  ------------------
  ------------------
  117|      9|      lj_err_callerv(L, LJ_ERR_FFI_BADMEMBER, s, strVdata(L->base+1));
  ------------------
  |  |  318|      9|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|     18|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 9, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  118|      9|    } else {
  119|      0|      const char *key = tviscdata(L->base+1) ?
  ------------------
  |  |  799|      0|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      0|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  120|      0|	strdata(lj_ctype_repr(L, cdataV(L->base+1)->ctypeid, NULL)) :
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  121|      0|	lj_typename(L->base+1);
  ------------------
  |  | 1042|      0|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|      0|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|      0|      lj_err_callerv(L, LJ_ERR_FFI_BADIDXW, s, key);
  123|      0|    }
  124|      9|  }
  125|      0|  if (!tvisfunc(tv)) {
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (125:7): [True: 0, False: 0]
  ------------------
  126|      0|    if (mm == MM_index) {
  ------------------
  |  Branch (126:9): [True: 0, False: 0]
  ------------------
  127|      0|      cTValue *o = lj_meta_tget(L, tv, base+1);
  128|      0|      if (o) {
  ------------------
  |  Branch (128:11): [True: 0, False: 0]
  ------------------
  129|      0|	if (tvisnil(o)) goto err_index;
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  130|      0|	copyTV(L, L->top-1, o);
  131|      0|	return 1;
  132|      0|      }
  133|      0|    } else {
  134|      0|      TValue *o = lj_meta_tset(L, tv, base+1);
  135|      0|      if (o) {
  ------------------
  |  Branch (135:11): [True: 0, False: 0]
  ------------------
  136|      0|	copyTV(L, o, base+2);
  137|      0|	return 0;
  138|      0|      }
  139|      0|    }
  140|      0|    copyTV(L, base, L->top);
  141|      0|    tv = L->top-1-LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  142|      0|  }
  143|      0|  return lj_meta_tailcall(L, tv);
  144|      0|}
lib_ffi.c:lj_cf_ffi_meta___eq:
  191|  1.69k|{
  192|  1.69k|  return ffi_arith(L);
  193|  1.69k|}
lib_ffi.c:ffi_arith:
  184|  47.2k|{
  185|  47.2k|  MMS mm = (MMS)(curr_func(L)->c.ffid - (int)FF_ffi_meta___eq + (int)MM_eq);
  ------------------
  |  |  710|  47.2k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  47.2k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  47.2k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  47.2k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  186|  47.2k|  return lj_carith_op(L, mm);
  187|  47.2k|}
lib_ffi.c:lj_cf_ffi_meta___len:
  196|     28|{
  197|     28|  return ffi_arith(L);
  198|     28|}
lib_ffi.c:lj_cf_ffi_meta___lt:
  201|  1.84k|{
  202|  1.84k|  return ffi_arith(L);
  203|  1.84k|}
lib_ffi.c:lj_cf_ffi_meta___le:
  206|    642|{
  207|    642|  return ffi_arith(L);
  208|    642|}
lib_ffi.c:lj_cf_ffi_meta___concat:
  211|    107|{
  212|    107|  return ffi_arith(L);
  213|    107|}
lib_ffi.c:lj_cf_ffi_meta___call:
  219|     61|{
  220|     61|  CTState *cts = ctype_cts(L);
  221|     61|  GCcdata *cd = ffi_checkcdata(L, 1);
  222|     61|  CTypeID id = cd->ctypeid;
  223|     61|  CType *ct;
  224|     61|  cTValue *tv;
  225|     61|  MMS mm = MM_call;
  226|     61|  if (cd->ctypeid == CTID_CTYPEID) {
  ------------------
  |  Branch (226:7): [True: 0, False: 61]
  ------------------
  227|      0|    id = *(CTypeID *)cdataptr(cd);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  228|      0|    mm = MM_new;
  229|     61|  } else {
  230|     61|    int ret = lj_ccall_func(L, cd);
  231|     61|    if (ret >= 0)
  ------------------
  |  Branch (231:9): [True: 0, False: 61]
  ------------------
  232|      0|      return ret;
  233|     61|  }
  234|       |  /* Handle ctype __call/__new metamethod. */
  235|     61|  ct = ctype_raw(cts, id);
  236|     61|  if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  203|     61|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|     61|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     61|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 61]
  |  |  ------------------
  ------------------
                if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  237|     61|  tv = lj_ctype_meta(cts, id, mm);
  238|     61|  if (tv)
  ------------------
  |  Branch (238:7): [True: 0, False: 61]
  ------------------
  239|      0|    return lj_meta_tailcall(L, tv);
  240|     61|  else if (mm == MM_call)
  ------------------
  |  Branch (240:12): [True: 61, False: 0]
  ------------------
  241|     61|    lj_err_callerv(L, LJ_ERR_FFI_BADCALL, strdata(lj_ctype_repr(L, id, NULL)));
  ------------------
  |  |  316|     61|#define strdata(s)	((const char *)((s)+1))
  ------------------
  242|      0|  return lj_cf_ffi_new(L);
  243|     61|}
lib_ffi.c:ffi_checkcdata:
   70|     61|{
   71|     61|  TValue *o = L->base + narg-1;
   72|     61|  if (!(o < L->top && tviscdata(o)))
  ------------------
  |  |  799|     61|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|     61|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|     61|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 61, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (72:9): [True: 61, False: 0]
  ------------------
   73|      0|    lj_err_argt(L, narg, LUA_TCDATA);
  ------------------
  |  |  222|      0|#define LUA_TCDATA	(LAST_TT+2)
  |  |  ------------------
  |  |  |  |  220|      0|#define LAST_TT		LUA_TTHREAD
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|      0|#define LUA_TTHREAD		8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|     61|  return cdataV(o);
  ------------------
  |  |  863|     61|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|     61|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     61|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     61|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 61, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     61|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   75|     61|}
lib_ffi.c:lj_cf_ffi_meta___add:
  246|  1.56k|{
  247|  1.56k|  return ffi_arith(L);
  248|  1.56k|}
lib_ffi.c:lj_cf_ffi_meta___sub:
  251|  3.76k|{
  252|  3.76k|  return ffi_arith(L);
  253|  3.76k|}
lib_ffi.c:lj_cf_ffi_meta___mul:
  256|  1.26k|{
  257|  1.26k|  return ffi_arith(L);
  258|  1.26k|}
lib_ffi.c:lj_cf_ffi_meta___div:
  261|  18.7k|{
  262|  18.7k|  return ffi_arith(L);
  263|  18.7k|}
lib_ffi.c:lj_cf_ffi_meta___mod:
  266|  2.94k|{
  267|  2.94k|  return ffi_arith(L);
  268|  2.94k|}
lib_ffi.c:lj_cf_ffi_meta___pow:
  271|  12.5k|{
  272|  12.5k|  return ffi_arith(L);
  273|  12.5k|}
lib_ffi.c:lj_cf_ffi_meta___unm:
  276|  2.11k|{
  277|  2.11k|  return ffi_arith(L);
  278|  2.11k|}
lib_ffi.c:lj_cf_ffi_clib___gc:
  419|  3.31k|{
  420|  3.31k|  TValue *o = L->base;
  421|  6.63k|  if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  801|  6.63k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  3.31k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  3.31k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 3.31k, False: 0]
  |  |  ------------------
  ------------------
                if (o < L->top && tvisudata(o) && udataV(o)->udtype == UDTYPE_FFI_CLIB)
  ------------------
  |  |  865|  3.31k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  3.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (421:7): [True: 3.31k, False: 0]
  |  Branch (421:37): [True: 3.31k, False: 0]
  ------------------
  422|  3.31k|    lj_clib_unload((CLibrary *)uddata(udataV(o)));
  ------------------
  |  |  342|  6.63k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 3.31k, False: 0]
  |  |  ------------------
  ------------------
  423|  3.31k|  return 0;
  424|  3.31k|}
lib_ffi.c:ffi_register_module:
  828|  3.31k|{
  829|  3.31k|  cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |  864|  3.31k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                cTValue *tmp = lj_tab_getstr(tabV(registry(L)), lj_str_newlit(L, "_LOADED"));
  ------------------
  |  |   28|  3.31k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  830|  3.31k|  if (tmp && tvistab(tmp)) {
  ------------------
  |  |  800|  3.31k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  3.31k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  3.31k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 3.31k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (830:7): [True: 3.31k, False: 0]
  ------------------
  831|  3.31k|    GCtab *t = tabV(tmp);
  ------------------
  |  |  864|  3.31k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.31k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|  3.31k|    copyTV(L, lj_tab_setstr(L, t, lj_str_newlit(L, LUA_FFILIBNAME)), L->top-1);
  ------------------
  |  |   28|  3.31k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  833|  3.31k|    lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  3.31k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  3.31k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 3.31k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  834|  3.31k|  }
  835|  3.31k|}

luaL_openlibs:
   40|  13.6k|{
   41|  13.6k|  const luaL_Reg *lib;
   42|   150k|  for (lib = lj_lib_load; lib->func; lib++) {
  ------------------
  |  Branch (42:27): [True: 136k, False: 13.6k]
  ------------------
   43|   136k|    lua_pushcfunction(L, lib->func);
  ------------------
  |  |  262|   136k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
   44|   136k|    lua_pushstring(L, lib->name);
   45|   136k|    lua_call(L, 1, 0);
   46|   136k|  }
   47|  13.6k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD",
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   48|  13.6k|		 sizeof(lj_lib_preload)/sizeof(lj_lib_preload[0])-1);
   49|  27.3k|  for (lib = lj_lib_preload; lib->func; lib++) {
  ------------------
  |  Branch (49:30): [True: 13.6k, False: 13.6k]
  ------------------
   50|  13.6k|    lua_pushcfunction(L, lib->func);
  ------------------
  |  |  262|  13.6k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
   51|  13.6k|    lua_setfield(L, -2, lib->name);
   52|  13.6k|  }
   53|  13.6k|  lua_pop(L, 1);
  ------------------
  |  |  256|  13.6k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
   54|  13.6k|}

luaopen_io:
  541|  13.6k|{
  542|  13.6k|  LJ_LIB_REG(L, NULL, io_method);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  543|  13.6k|  copyTV(L, L->top, L->top-1); L->top++;
  544|  13.6k|  lua_setfield(L, LUA_REGISTRYINDEX, LUA_FILEHANDLE);
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
                lua_setfield(L, LUA_REGISTRYINDEX, LUA_FILEHANDLE);
  ------------------
  |  |   11|  13.6k|#define LUA_FILEHANDLE	"FILE*"
  ------------------
  545|  13.6k|  LJ_LIB_REG(L, LUA_IOLIBNAME, io);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  546|  13.6k|  setgcref(G(L)->gcroot[GCROOT_IO_INPUT], io_std_new(L, stdin, "stdin"));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  547|  13.6k|  setgcref(G(L)->gcroot[GCROOT_IO_OUTPUT], io_std_new(L, stdout, "stdout"));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  548|  13.6k|  io_std_new(L, stderr, "stderr");
  549|  13.6k|  return 1;
  550|  13.6k|}
lib_io.c:lj_cf_io_method_close:
  286|  1.19k|{
  287|  1.19k|  IOFileUD *iof;
  288|  1.19k|  if (L->base < L->top) {
  ------------------
  |  Branch (288:7): [True: 3, False: 1.19k]
  ------------------
  289|      3|    iof = io_tofile(L);
  290|  1.19k|  } else {
  291|  1.19k|    iof = IOSTDF_IOF(L, GCROOT_IO_OUTPUT);
  ------------------
  |  |   43|  1.19k|#define IOSTDF_IOF(L, id)	((IOFileUD *)uddata(IOSTDF_UD(L, (id))))
  |  |  ------------------
  |  |  |  |  342|  1.19k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  ------------------
  292|  1.19k|    if (iof->fp == NULL)
  ------------------
  |  Branch (292:9): [True: 0, False: 1.19k]
  ------------------
  293|      0|      lj_err_caller(L, LJ_ERR_IOCLFL);
  294|  1.19k|  }
  295|  1.19k|  return io_file_close(L, iof);
  296|  1.19k|}
lib_io.c:io_tofile:
   56|      3|{
   57|      3|  IOFileUD *iof = io_tofilep(L);
   58|      3|  if (iof->fp == NULL)
  ------------------
  |  Branch (58:7): [True: 0, False: 3]
  ------------------
   59|      0|    lj_err_caller(L, LJ_ERR_IOCLFL);
   60|      3|  return iof;
   61|      3|}
lib_io.c:io_tofilep:
   48|  42.3k|{
   49|  42.3k|  if (!(L->base < L->top && tvisudata(L->base) &&
  ------------------
  |  |  801|  84.6k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  42.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  42.3k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 42.3k, False: 3]
  |  |  ------------------
  ------------------
  |  Branch (49:9): [True: 42.3k, False: 0]
  ------------------
   50|  84.6k|	udataV(L->base)->udtype == UDTYPE_IO_FILE))
  ------------------
  |  |  865|  42.3k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  42.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  42.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  42.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 42.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  42.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (50:2): [True: 42.3k, False: 0]
  ------------------
   51|      3|    lj_err_argtype(L, 1, "FILE*");
   52|  42.3k|  return (IOFileUD *)uddata(udataV(L->base));
  ------------------
  |  |  342|  84.6k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 42.3k, False: 0]
  |  |  ------------------
  ------------------
   53|  42.3k|}
lib_io.c:io_file_close:
   94|  1.26k|{
   95|  1.26k|  int ok;
   96|  1.26k|  if ((iof->type & IOFILE_TYPE_MASK) == IOFILE_TYPE_FILE) {
  ------------------
  |  |   38|  1.26k|#define IOFILE_TYPE_MASK	3
  ------------------
                if ((iof->type & IOFILE_TYPE_MASK) == IOFILE_TYPE_FILE) {
  ------------------
  |  |   35|  1.26k|#define IOFILE_TYPE_FILE	0	/* Regular file. */
  ------------------
  |  Branch (96:7): [True: 1.24k, False: 12]
  ------------------
   97|  1.24k|    ok = (fclose(iof->fp) == 0);
   98|  1.24k|  } else if ((iof->type & IOFILE_TYPE_MASK) == IOFILE_TYPE_PIPE) {
  ------------------
  |  |   38|     12|#define IOFILE_TYPE_MASK	3
  ------------------
                } else if ((iof->type & IOFILE_TYPE_MASK) == IOFILE_TYPE_PIPE) {
  ------------------
  |  |   36|     12|#define IOFILE_TYPE_PIPE	1	/* Pipe. */
  ------------------
  |  Branch (98:14): [True: 0, False: 12]
  ------------------
   99|      0|    int stat = -1;
  100|      0|#if LJ_TARGET_POSIX
  101|      0|    stat = pclose(iof->fp);
  102|       |#elif LJ_TARGET_WINDOWS && !LJ_TARGET_XBOXONE && !LJ_TARGET_UWP
  103|       |    stat = _pclose(iof->fp);
  104|       |#endif
  105|       |#if LJ_52
  106|       |    iof->fp = NULL;
  107|       |    return luaL_execresult(L, stat);
  108|       |#else
  109|      0|    ok = (stat != -1);
  110|      0|#endif
  111|     12|  } else {
  112|     12|    lj_assertL((iof->type & IOFILE_TYPE_MASK) == IOFILE_TYPE_STDF,
  ------------------
  |  |  365|     12|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     12|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     12|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  113|     12|	       "close of unknown FILE* type");
  114|     12|    setnilV(L->top++);
  ------------------
  |  |  872|     12|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  115|     12|    lua_pushliteral(L, "cannot close standard file");
  ------------------
  |  |  276|     12|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  116|     12|    return 2;
  117|     12|  }
  118|  1.24k|  iof->fp = NULL;
  119|  1.24k|  return luaL_fileresult(L, ok, NULL);
  120|  1.26k|}
lib_io.c:io_file_write:
  229|   403k|{
  230|   403k|  FILE *fp = iof->fp;
  231|   403k|  cTValue *tv;
  232|   403k|  int status = 1;
  233|  2.39M|  for (tv = L->base+start; tv < L->top; tv++) {
  ------------------
  |  Branch (233:28): [True: 1.99M, False: 403k]
  ------------------
  234|  1.99M|    MSize len;
  235|  1.99M|    const char *p = lj_strfmt_wstrnum(L, tv, &len);
  236|  1.99M|    if (!p)
  ------------------
  |  Branch (236:9): [True: 5, False: 1.99M]
  ------------------
  237|      5|      lj_err_argt(L, (int)(tv - L->base) + 1, LUA_TSTRING);
  ------------------
  |  |   79|      5|#define LUA_TSTRING		4
  ------------------
  238|  1.99M|    status = status && (fwrite(p, 1, len, fp) == len);
  ------------------
  |  Branch (238:14): [True: 1.99M, False: 0]
  |  Branch (238:24): [True: 1.99M, False: 0]
  ------------------
  239|  1.99M|  }
  240|   403k|  if (LJ_52 && status) {
  ------------------
  |  |  697|   807k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (240:16): [True: 0, False: 0]
  ------------------
  241|      0|    L->top = L->base+1;
  242|      0|    if (start == 0)
  ------------------
  |  Branch (242:9): [True: 0, False: 0]
  ------------------
  243|      0|      setudataV(L, L->base, IOSTDF_UD(L, GCROOT_IO_OUTPUT));
  ------------------
  |  |   42|      0|#define IOSTDF_UD(L, id)	(&gcref(G(L)->gcroot[(id)])->ud)
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  244|      0|    return 1;
  245|      0|  }
  246|   403k|  return luaL_fileresult(L, status, NULL);
  247|   403k|}
lib_io.c:lj_cf_io_method___gc:
  382|  42.3k|{
  383|  42.3k|  IOFileUD *iof = io_tofilep(L);
  384|  42.3k|  if (iof->fp != NULL && (iof->type & IOFILE_TYPE_MASK) != IOFILE_TYPE_STDF)
  ------------------
  |  |   38|  41.1k|#define IOFILE_TYPE_MASK	3
  ------------------
                if (iof->fp != NULL && (iof->type & IOFILE_TYPE_MASK) != IOFILE_TYPE_STDF)
  ------------------
  |  |   37|  41.1k|#define IOFILE_TYPE_STDF	2	/* Standard file handle. */
  ------------------
  |  Branch (384:7): [True: 41.1k, False: 1.18k]
  |  Branch (384:26): [True: 66, False: 41.0k]
  ------------------
  385|     66|    io_file_close(L, iof);
  386|  42.3k|  return 0;
  387|  42.3k|}
lib_io.c:io_file_new:
   72|  1.24k|{
   73|  1.24k|  IOFileUD *iof = (IOFileUD *)lua_newuserdata(L, sizeof(IOFileUD));
   74|  1.24k|  GCudata *ud = udataV(L->top-1);
  ------------------
  |  |  865|  1.24k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  1.24k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.24k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.24k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.24k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.24k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   75|      0|  ud->udtype = UDTYPE_IO_FILE;
   76|       |  /* NOBARRIER: The GCudata is new (marked white). */
   77|  1.24k|  setgcrefr(ud->metatable, curr_func(L)->c.env);
  ------------------
  |  |   77|  1.24k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   78|  1.24k|  iof->fp = NULL;
   79|  1.24k|  iof->type = IOFILE_TYPE_FILE;
  ------------------
  |  |   35|  1.24k|#define IOFILE_TYPE_FILE	0	/* Regular file. */
  ------------------
   80|  1.24k|  return iof;
   81|  1.24k|}
lib_io.c:lj_cf_io_close:
  451|  1.19k|{
  452|  1.19k|  return lj_cf_io_method_close(L);
  453|  1.19k|}
lib_io.c:io_stdfile:
   64|   403k|{
   65|   403k|  IOFileUD *iof = IOSTDF_IOF(L, id);
  ------------------
  |  |   43|   403k|#define IOSTDF_IOF(L, id)	((IOFileUD *)uddata(IOSTDF_UD(L, (id))))
  |  |  ------------------
  |  |  |  |  342|   403k|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  ------------------
   66|   403k|  if (iof->fp == NULL)
  ------------------
  |  Branch (66:7): [True: 0, False: 403k]
  ------------------
   67|      0|    lj_err_caller(L, LJ_ERR_IOSTDCL);
   68|   403k|  return iof;
   69|   403k|}
lib_io.c:lj_cf_io_write:
  461|   403k|{
  462|   403k|  return io_file_write(L, io_stdfile(L, GCROOT_IO_OUTPUT), 0);
  463|   403k|}
lib_io.c:io_std_getset:
  471|  1.26k|{
  472|  1.26k|  if (L->base < L->top && !tvisnil(L->base)) {
  ------------------
  |  |  782|  1.26k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (472:7): [True: 1.26k, False: 0]
  |  Branch (472:27): [True: 1.24k, False: 14]
  ------------------
  473|  1.24k|    if (tvisudata(L->base)) {
  ------------------
  |  |  801|  1.24k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  1.24k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  1.24k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
  474|      0|      io_tofile(L);
  475|      0|      L->top = L->base+1;
  476|  1.24k|    } else {
  477|  1.24k|      io_file_open(L, mode);
  478|  1.24k|    }
  479|       |    /* NOBARRIER: The standard I/O handles are GC roots. */
  480|  1.24k|    setgcref(G(L)->gcroot[id], gcV(L->top-1));
  ------------------
  |  |   72|  2.49k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 1.24k, False: 0]
  |  |  ------------------
  ------------------
  481|  1.24k|  } else {
  482|     14|    setudataV(L, L->top++, IOSTDF_UD(L, id));
  ------------------
  |  |   42|     14|#define IOSTDF_UD(L, id)	(&gcref(G(L)->gcroot[(id)])->ud)
  |  |  ------------------
  |  |  |  |   67|     14|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  483|     14|  }
  484|  1.26k|  return 1;
  485|  1.26k|}
lib_io.c:io_file_open:
   84|  1.24k|{
   85|  1.24k|  const char *fname = strdata(lj_lib_checkstr(L, 1));
  ------------------
  |  |  316|  1.24k|#define strdata(s)	((const char *)((s)+1))
  ------------------
   86|  1.24k|  IOFileUD *iof = io_file_new(L);
   87|  1.24k|  iof->fp = fopen(fname, mode);
   88|  1.24k|  if (iof->fp == NULL)
  ------------------
  |  Branch (88:7): [True: 0, False: 1.24k]
  ------------------
   89|      0|    luaL_argerror(L, 1, lj_strfmt_pushf(L, "%s: %s", fname, strerror(errno)));
   90|  1.24k|  return iof;
   91|  1.24k|}
lib_io.c:lj_cf_io_output:
  493|  1.26k|{
  494|  1.26k|  return io_std_getset(L, GCROOT_IO_OUTPUT, "w");
  495|  1.26k|}
lib_io.c:io_std_new:
  528|  41.0k|{
  529|  41.0k|  IOFileUD *iof = (IOFileUD *)lua_newuserdata(L, sizeof(IOFileUD));
  530|  41.0k|  GCudata *ud = udataV(L->top-1);
  ------------------
  |  |  865|  41.0k|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  41.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  41.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  41.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 41.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  41.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  531|      0|  ud->udtype = UDTYPE_IO_FILE;
  532|       |  /* NOBARRIER: The GCudata is new (marked white). */
  533|  41.0k|  setgcref(ud->metatable, gcV(L->top-3));
  ------------------
  |  |   72|  82.1k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 41.0k, False: 0]
  |  |  ------------------
  ------------------
  534|      0|  iof->fp = fp;
  535|  41.0k|  iof->type = IOFILE_TYPE_STDF;
  ------------------
  |  |   37|  41.0k|#define IOFILE_TYPE_STDF	2	/* Standard file handle. */
  ------------------
  536|  41.0k|  lua_setfield(L, -2, name);
  537|  41.0k|  return obj2gco(ud);
  ------------------
  |  |  775|  41.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  538|  41.0k|}

luaopen_jit:
  722|  13.6k|{
  723|  13.6k|#if LJ_HASJIT
  724|  13.6k|  jit_init(L);
  725|  13.6k|#endif
  726|  13.6k|  lua_pushliteral(L, LJ_OS_NAME);
  ------------------
  |  |  276|  13.6k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  727|  13.6k|  lua_pushliteral(L, LJ_ARCH_NAME);
  ------------------
  |  |  276|  13.6k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  728|  13.6k|  lua_pushinteger(L, LUAJIT_VERSION_NUM);  /* Deprecated. */
  ------------------
  |  |   34|  13.6k|#define LUAJIT_VERSION_NUM	20199  /* Deprecated. */
  ------------------
  729|  13.6k|  lua_pushliteral(L, LUAJIT_VERSION);
  ------------------
  |  |  276|  13.6k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  730|  13.6k|  LJ_LIB_REG(L, LUA_JITLIBNAME, jit);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  731|  13.6k|#if LJ_HASPROFILE
  732|  13.6k|  lj_lib_prereg(L, LUA_JITLIBNAME ".profile", luaopen_jit_profile,
  ------------------
  |  |   22|  13.6k|#define LUA_JITLIBNAME	"jit"
  ------------------
  733|  13.6k|		tabref(L->env));
  ------------------
  |  |  514|  13.6k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  734|  13.6k|#endif
  735|  13.6k|#ifndef LUAJIT_DISABLE_JITUTIL
  736|  13.6k|  lj_lib_prereg(L, LUA_JITLIBNAME ".util", luaopen_jit_util, tabref(L->env));
  ------------------
  |  |   22|  13.6k|#define LUA_JITLIBNAME	"jit"
  ------------------
                lj_lib_prereg(L, LUA_JITLIBNAME ".util", luaopen_jit_util, tabref(L->env));
  ------------------
  |  |  514|  13.6k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  737|  13.6k|#endif
  738|  13.6k|#if LJ_HASJIT
  739|  13.6k|  LJ_LIB_REG(L, "jit.opt", jit_opt);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  740|  13.6k|#endif
  741|  13.6k|  L->top -= 2;
  742|  13.6k|  return 1;
  743|  13.6k|}
lib_jit.c:jit_init:
  713|  13.6k|{
  714|  13.6k|  jit_State *J = L2J(L);
  ------------------
  |  |  117|  13.6k|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|  13.6k|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  715|  13.6k|  J->flags = jit_cpudetect() | JIT_F_ON | JIT_F_OPT_DEFAULT;
  ------------------
  |  |   16|  13.6k|#define JIT_F_ON		0x00000001
  ------------------
                J->flags = jit_cpudetect() | JIT_F_ON | JIT_F_OPT_DEFAULT;
  ------------------
  |  |  102|  13.6k|#define JIT_F_OPT_DEFAULT	JIT_F_OPT_3
  |  |  ------------------
  |  |  |  |  100|  13.6k|#define JIT_F_OPT_3	(JIT_F_OPT_2|\
  |  |  |  |  ------------------
  |  |  |  |  |  |   99|  13.6k|#define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   98|  13.6k|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   80|  13.6k|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   81|  13.6k|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   82|  13.6k|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   85|  13.6k|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   86|  13.6k|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  101|  13.6k|  JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|  13.6k|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   84|  13.6k|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   87|  13.6k|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  13.6k|#define JIT_F_OPT_SINK		(JIT_F_OPT << 8)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|  13.6k|#define JIT_F_OPT_FUSE		(JIT_F_OPT << 9)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|  13.6k|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  716|  13.6k|  memcpy(J->param, jit_param_default, sizeof(J->param));
  717|  13.6k|  lj_dispatch_update(G(L));
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  718|  13.6k|}
lib_jit.c:jit_cpudetect:
  636|  13.6k|{
  637|  13.6k|  uint32_t flags = 0;
  638|  13.6k|#if LJ_TARGET_X86ORX64
  639|       |
  640|  13.6k|  uint32_t vendor[4];
  641|  13.6k|  uint32_t features[4];
  642|  13.6k|  if (lj_vm_cpuid(0, vendor) && lj_vm_cpuid(1, features)) {
  ------------------
  |  Branch (642:7): [True: 13.6k, False: 0]
  |  Branch (642:33): [True: 13.6k, False: 0]
  ------------------
  643|  13.6k|    flags |= ((features[2] >> 0)&1) * JIT_F_SSE3;
  ------------------
  |  |   23|  13.6k|#define JIT_F_SSE3		(JIT_F_CPU << 0)
  |  |  ------------------
  |  |  |  |   19|  13.6k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  644|  13.6k|    flags |= ((features[2] >> 19)&1) * JIT_F_SSE4_1;
  ------------------
  |  |   24|  13.6k|#define JIT_F_SSE4_1		(JIT_F_CPU << 1)
  |  |  ------------------
  |  |  |  |   19|  13.6k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  645|  13.6k|    if (vendor[0] >= 7) {
  ------------------
  |  Branch (645:9): [True: 13.6k, False: 0]
  ------------------
  646|  13.6k|      uint32_t xfeatures[4];
  647|  13.6k|      lj_vm_cpuid(7, xfeatures);
  648|  13.6k|      flags |= ((xfeatures[1] >> 8)&1) * JIT_F_BMI2;
  ------------------
  |  |   25|  13.6k|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|  13.6k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  649|  13.6k|    }
  650|  13.6k|  }
  651|       |  /* Don't bother checking for SSE2 -- the VM will crash before getting here. */
  652|       |
  653|       |#elif LJ_TARGET_ARM
  654|       |
  655|       |  int ver = LJ_ARCH_VERSION;  /* Compile-time ARM CPU detection. */
  656|       |#if LJ_TARGET_LINUX
  657|       |  if (ver < 70) {  /* Runtime ARM CPU detection. */
  658|       |    struct utsname ut;
  659|       |    uname(&ut);
  660|       |    if (strncmp(ut.machine, "armv", 4) == 0) {
  661|       |      if (ut.machine[4] >= '8') ver = 80;
  662|       |      else if (ut.machine[4] == '7') ver = 70;
  663|       |      else if (ut.machine[4] == '6') ver = 60;
  664|       |    }
  665|       |  }
  666|       |#endif
  667|       |  flags |= ver >= 70 ? JIT_F_ARMV7 :
  668|       |	   ver >= 61 ? JIT_F_ARMV6T2_ :
  669|       |	   ver >= 60 ? JIT_F_ARMV6_ : 0;
  670|       |  flags |= LJ_ARCH_HASFPU == 0 ? 0 : ver >= 70 ? JIT_F_VFPV3 : JIT_F_VFPV2;
  671|       |
  672|       |#elif LJ_TARGET_ARM64
  673|       |
  674|       |  /* No optional CPU features to detect (for now). */
  675|       |
  676|       |#elif LJ_TARGET_PPC
  677|       |
  678|       |#if LJ_ARCH_SQRT
  679|       |  flags |= JIT_F_SQRT;
  680|       |#endif
  681|       |#if LJ_ARCH_ROUND
  682|       |  flags |= JIT_F_ROUND;
  683|       |#endif
  684|       |
  685|       |#elif LJ_TARGET_MIPS
  686|       |
  687|       |  /* Compile-time MIPS CPU detection. */
  688|       |#if LJ_ARCH_VERSION >= 20
  689|       |  flags |= JIT_F_MIPSXXR2;
  690|       |#endif
  691|       |  /* Runtime MIPS CPU detection. */
  692|       |#if defined(__GNUC__)
  693|       |  if (!(flags & JIT_F_MIPSXXR2)) {
  694|       |    int x;
  695|       |#ifdef __mips16
  696|       |    x = 0;  /* Runtime detection is difficult. Ensure optimal -march flags. */
  697|       |#else
  698|       |    /* On MIPS32R1 rotr is treated as srl. rotr r2,r2,1 -> srl r2,r2,1. */
  699|       |    __asm__("li $2, 1\n\t.long 0x00221042\n\tmove %0, $2" : "=r"(x) : : "$2");
  700|       |#endif
  701|       |    if (x) flags |= JIT_F_MIPSXXR2;  /* Either 0x80000000 (R2) or 0 (R1). */
  702|       |  }
  703|       |#endif
  704|       |
  705|       |#else
  706|       |#error "Missing CPU detection for this architecture"
  707|       |#endif
  708|  13.6k|  return flags;
  709|  13.6k|}
lib_jit.c:setjitmode:
   44|  1.25k|{
   45|  1.25k|  int idx = 0;
   46|  1.25k|  if (L->base == L->top || tvisnil(L->base)) {  /* jit.on/off/flush([nil]) */
  ------------------
  |  |  782|     94|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 4, False: 90]
  |  |  ------------------
  ------------------
  |  Branch (46:7): [True: 1.16k, False: 94]
  ------------------
   47|  1.16k|    mode |= LUAJIT_MODE_ENGINE;
   48|  1.16k|  } else {
   49|       |    /* jit.on/off/flush(func|proto, nil|true|false) */
   50|     90|    if (tvisfunc(L->base) || tvisproto(L->base))
  ------------------
  |  |  796|    180|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     90|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     90|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 90, False: 0]
  |  |  ------------------
  ------------------
                  if (tvisfunc(L->base) || tvisproto(L->base))
  ------------------
  |  |  798|      0|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|      0|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   51|     90|      idx = 1;
   52|      0|    else if (!tvistrue(L->base))  /* jit.on/off/flush(true, nil|true|false) */
  ------------------
  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  ------------------
  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  ------------------
  ------------------
  |  Branch (52:14): [True: 0, False: 0]
  ------------------
   53|      0|      goto err;
   54|     90|    if (L->base+1 < L->top && tvisbool(L->base+1))
  ------------------
  |  |  789|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (54:9): [True: 0, False: 90]
  ------------------
   55|      0|      mode |= boolV(L->base+1) ? LUAJIT_MODE_ALLFUNC : LUAJIT_MODE_ALLSUBFUNC;
  ------------------
  |  |  837|      0|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|     90|    else
   57|     90|      mode |= LUAJIT_MODE_FUNC;
   58|     90|  }
   59|  1.25k|  if (luaJIT_setmode(L, idx, mode) != 1) {
  ------------------
  |  Branch (59:7): [True: 0, False: 1.25k]
  ------------------
   60|      0|    if ((mode & LUAJIT_MODE_MASK) == LUAJIT_MODE_ENGINE)
  ------------------
  |  |   40|      0|#define LUAJIT_MODE_MASK	0x00ff
  ------------------
  |  Branch (60:9): [True: 0, False: 0]
  ------------------
   61|      0|      lj_err_caller(L, LJ_ERR_NOJIT);
   62|      0|  err:
   63|      0|    lj_err_argt(L, 1, LUA_TFUNCTION);
  ------------------
  |  |   81|      0|#define LUA_TFUNCTION		6
  ------------------
   64|      0|  }
   65|  1.25k|  return 0;
   66|  1.25k|}
lib_jit.c:lj_cf_jit_off:
   74|     92|{
   75|     92|  return setjitmode(L, LUAJIT_MODE_OFF);
  ------------------
  |  |   58|     92|#define LUAJIT_MODE_OFF		0x0000	/* Turn feature off. */
  ------------------
   76|     92|}
lib_jit.c:lj_cf_jit_flush:
   79|  1.63k|{
   80|  1.63k|#if LJ_HASJIT
   81|  1.63k|  if (L->base < L->top && tvisnumber(L->base)) {
  ------------------
  |  |  802|    469|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    469|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    469|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    469|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 467, False: 2]
  |  |  ------------------
  ------------------
  |  Branch (81:7): [True: 469, False: 1.16k]
  ------------------
   82|    467|    int traceno = lj_lib_checkint(L, 1);
   83|    467|    luaJIT_setmode(L, traceno, LUAJIT_MODE_FLUSH|LUAJIT_MODE_TRACE);
  ------------------
  |  |   60|    467|#define LUAJIT_MODE_FLUSH	0x0200	/* Flush JIT-compiled code. */
  ------------------
   84|    467|    return 0;
   85|    467|  }
   86|  1.16k|#endif
   87|  1.16k|  return setjitmode(L, LUAJIT_MODE_FLUSH);
  ------------------
  |  |   60|  1.16k|#define LUAJIT_MODE_FLUSH	0x0200	/* Flush JIT-compiled code. */
  ------------------
   88|  1.63k|}
lib_jit.c:lj_cf_jit_status:
  102|    339|{
  103|    339|#if LJ_HASJIT
  104|    339|  jit_State *J = L2J(L);
  ------------------
  |  |  117|    339|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|    339|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|    339|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|    339|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  105|    339|  L->top = L->base;
  106|    339|  setboolV(L->top++, (J->flags & JIT_F_ON) ? 1 : 0);
  ------------------
  |  |  874|    678|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:61): [True: 339, False: 0]
  |  |  ------------------
  ------------------
  107|    339|  flagbits_to_strings(L, J->flags, JIT_F_CPU, JIT_F_CPUSTRING);
  ------------------
  |  |   19|    339|#define JIT_F_CPU		0x00000010
  ------------------
                flagbits_to_strings(L, J->flags, JIT_F_CPU, JIT_F_CPUSTRING);
  ------------------
  |  |   28|    339|#define JIT_F_CPUSTRING		"\4SSE3\6SSE4.1\4BMI2"
  ------------------
  108|    339|  flagbits_to_strings(L, J->flags, JIT_F_OPT, JIT_F_OPTSTRING);
  ------------------
  |  |   77|    339|#define JIT_F_OPT		0x00010000
  ------------------
                flagbits_to_strings(L, J->flags, JIT_F_OPT, JIT_F_OPTSTRING);
  ------------------
  |  |   94|    339|  "\4fold\3cse\3dce\3fwd\3dse\6narrow\4loop\3abc\4sink\4fuse\3fma"
  ------------------
  109|    339|  return (int)(L->top - L->base);
  110|       |#else
  111|       |  setboolV(L->top++, 0);
  112|       |  return 1;
  113|       |#endif
  114|    339|}
lib_jit.c:flagbits_to_strings:
   94|    678|{
   95|  5.42k|  for (; *str; base <<= 1, str += 1+*str)
  ------------------
  |  Branch (95:10): [True: 4.74k, False: 678]
  ------------------
   96|  4.74k|    if (flags & base)
  ------------------
  |  Branch (96:9): [True: 4.40k, False: 339]
  ------------------
   97|  4.40k|      setstrV(L, L->top++, lj_str_new(L, str+1, *(uint8_t *)str));
   98|    678|}
lib_jit.c:luaopen_jit_util:
  419|     20|{
  420|     20|  LJ_LIB_REG(L, NULL, jit_util);
  ------------------
  |  |   92|     20|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  421|     20|  return 1;
  422|     20|}
lib_jit.c:lj_cf_jit_util_traceinfo:
  282|     17|{
  283|     17|  GCtrace *T = jit_checktrace(L);
  284|     17|  if (T) {
  ------------------
  |  Branch (284:7): [True: 0, False: 17]
  ------------------
  285|      0|    GCtab *t;
  286|      0|    lua_createtable(L, 0, 8);  /* Increment hash size if fields are added. */
  287|      0|    t = tabV(L->top-1);
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|      0|    setintfield(L, t, "nins", (int32_t)T->nins - REF_BIAS - 1);
  289|      0|    setintfield(L, t, "nk", REF_BIAS - (int32_t)T->nk);
  290|      0|    setintfield(L, t, "link", T->link);
  291|      0|    setintfield(L, t, "nexit", T->nsnap);
  292|      0|    setstrV(L, L->top++, lj_str_newz(L, jit_trlinkname[T->linktype]));
  ------------------
  |  |   27|      0|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  293|      0|    lua_setfield(L, -2, "linktype");
  294|       |    /* There are many more fields. Add them only when needed. */
  295|      0|    return 1;
  296|      0|  }
  297|     17|  return 0;
  298|     17|}
lib_jit.c:jit_checktrace:
  266|     17|{
  267|     17|  TraceNo tr = (TraceNo)lj_lib_checkint(L, 1);
  268|     17|  jit_State *J = L2J(L);
  ------------------
  |  |  117|     17|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|     17|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|     17|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|     17|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  269|     17|  if (tr > 0 && tr < J->sizetrace)
  ------------------
  |  Branch (269:7): [True: 14, False: 3]
  |  Branch (269:17): [True: 12, False: 2]
  ------------------
  270|     17|    return traceref(J, tr);
  ------------------
  |  |  298|     12|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|     12|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     12|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     24|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 12, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 12, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     12|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  271|      5|  return NULL;
  272|     17|}
lib_jit.c:lj_cf_jit_opt_start:
  499|     11|{
  500|     11|  jit_State *J = L2J(L);
  ------------------
  |  |  117|     11|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|     11|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|     11|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|     11|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  501|     11|  int nargs = (int)(L->top - L->base);
  502|     11|  if (nargs == 0) {
  ------------------
  |  Branch (502:7): [True: 0, False: 11]
  ------------------
  503|      0|    J->flags = (J->flags & ~JIT_F_OPT_MASK) | JIT_F_OPT_DEFAULT;
  ------------------
  |  |   78|      0|#define JIT_F_OPT_MASK		0x0fff0000
  ------------------
                  J->flags = (J->flags & ~JIT_F_OPT_MASK) | JIT_F_OPT_DEFAULT;
  ------------------
  |  |  102|      0|#define JIT_F_OPT_DEFAULT	JIT_F_OPT_3
  |  |  ------------------
  |  |  |  |  100|      0|#define JIT_F_OPT_3	(JIT_F_OPT_2|\
  |  |  |  |  ------------------
  |  |  |  |  |  |   99|      0|#define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   98|      0|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   81|      0|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   82|      0|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   85|      0|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   86|      0|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  101|      0|  JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|      0|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   84|      0|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   87|      0|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|      0|#define JIT_F_OPT_SINK		(JIT_F_OPT << 8)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   89|      0|#define JIT_F_OPT_FUSE		(JIT_F_OPT << 9)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  504|     11|  } else {
  505|     11|    int i;
  506|     17|    for (i = 1; i <= nargs; i++) {
  ------------------
  |  Branch (506:17): [True: 11, False: 6]
  ------------------
  507|     11|      const char *str = strdata(lj_lib_checkstr(L, i));
  ------------------
  |  |  316|     11|#define strdata(s)	((const char *)((s)+1))
  ------------------
  508|     11|      if (!jitopt_level(J, str) &&
  ------------------
  |  Branch (508:11): [True: 11, False: 0]
  ------------------
  509|     11|	  !jitopt_flag(J, str) &&
  ------------------
  |  Branch (509:4): [True: 5, False: 6]
  ------------------
  510|     11|	  !jitopt_param(J, str))
  ------------------
  |  Branch (510:4): [True: 5, False: 0]
  ------------------
  511|      5|	lj_err_callerv(L, LJ_ERR_JITOPT, str);
  512|     11|    }
  513|     11|  }
  514|      6|  return 0;
  515|     11|}
lib_jit.c:jitopt_level:
  432|     11|{
  433|     11|  if (str[0] >= '0' && str[0] <= '9' && str[1] == '\0') {
  ------------------
  |  Branch (433:7): [True: 3, False: 8]
  |  Branch (433:24): [True: 0, False: 3]
  |  Branch (433:41): [True: 0, False: 0]
  ------------------
  434|      0|    uint32_t flags;
  435|      0|    if (str[0] == '0') flags = JIT_F_OPT_0;
  ------------------
  |  |   97|      0|#define JIT_F_OPT_0	0
  ------------------
  |  Branch (435:9): [True: 0, False: 0]
  ------------------
  436|      0|    else if (str[0] == '1') flags = JIT_F_OPT_1;
  ------------------
  |  |   98|      0|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  ------------------
  |  |  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  ------------------
  |  |  |  |   81|      0|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  ------------------
  |  |  |  |   82|      0|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (436:14): [True: 0, False: 0]
  ------------------
  437|      0|    else if (str[0] == '2') flags = JIT_F_OPT_2;
  ------------------
  |  |   99|      0|#define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  ------------------
  |  |  |  |   98|      0|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   81|      0|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   82|      0|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  ------------------
  |  |  |  |   85|      0|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  ------------------
  |  |  |  |   86|      0|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (437:14): [True: 0, False: 0]
  ------------------
  438|      0|    else flags = JIT_F_OPT_3;
  ------------------
  |  |  100|      0|#define JIT_F_OPT_3	(JIT_F_OPT_2|\
  |  |  ------------------
  |  |  |  |   99|      0|#define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   98|      0|#define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   81|      0|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define JIT_F_OPT_1	(JIT_F_OPT_FOLD|JIT_F_OPT_CSE|JIT_F_OPT_DCE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   82|      0|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define JIT_F_OPT_2	(JIT_F_OPT_1|JIT_F_OPT_NARROW|JIT_F_OPT_LOOP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   86|      0|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  101|      0|  JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  ------------------
  |  |  |  |   83|      0|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  ------------------
  |  |  |  |   84|      0|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  ------------------
  |  |  |  |   87|      0|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  ------------------
  |  |  |  |   88|      0|#define JIT_F_OPT_SINK		(JIT_F_OPT << 8)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 JIT_F_OPT_FWD|JIT_F_OPT_DSE|JIT_F_OPT_ABC|JIT_F_OPT_SINK|JIT_F_OPT_FUSE)
  |  |  ------------------
  |  |  |  |   89|      0|#define JIT_F_OPT_FUSE		(JIT_F_OPT << 9)
  |  |  |  |  ------------------
  |  |  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  439|      0|    J->flags = (J->flags & ~JIT_F_OPT_MASK) | flags;
  ------------------
  |  |   78|      0|#define JIT_F_OPT_MASK		0x0fff0000
  ------------------
  440|      0|    return 1;  /* Ok. */
  441|      0|  }
  442|     11|  return 0;  /* No match. */
  443|     11|}
lib_jit.c:jitopt_flag:
  447|     11|{
  448|     11|  const char *lst = JIT_F_OPTSTRING;
  ------------------
  |  |   94|     11|  "\4fold\3cse\3dce\3fwd\3dse\6narrow\4loop\3abc\4sink\4fuse\3fma"
  ------------------
  449|     11|  uint32_t opt;
  450|     11|  int set = 1;
  451|     11|  if (str[0] == '+') {
  ------------------
  |  Branch (451:7): [True: 0, False: 11]
  ------------------
  452|      0|    str++;
  453|     11|  } else if (str[0] == '-') {
  ------------------
  |  Branch (453:14): [True: 8, False: 3]
  ------------------
  454|      8|    str++;
  455|      8|    set = 0;
  456|      8|  } else if (str[0] == 'n' && str[1] == 'o') {
  ------------------
  |  Branch (456:14): [True: 0, False: 3]
  |  Branch (456:31): [True: 0, False: 0]
  ------------------
  457|      0|    str += str[2] == '-' ? 3 : 2;
  ------------------
  |  Branch (457:12): [True: 0, False: 0]
  ------------------
  458|      0|    set = 0;
  459|      0|  }
  460|    114|  for (opt = JIT_F_OPT; ; opt <<= 1) {
  ------------------
  |  |   77|     11|#define JIT_F_OPT		0x00010000
  ------------------
  461|    114|    size_t len = *(const uint8_t *)lst;
  462|    114|    if (len == 0)
  ------------------
  |  Branch (462:9): [True: 5, False: 109]
  ------------------
  463|      5|      break;
  464|    109|    if (strncmp(str, lst+1, len) == 0 && str[len] == '\0') {
  ------------------
  |  Branch (464:9): [True: 8, False: 101]
  |  Branch (464:42): [True: 6, False: 2]
  ------------------
  465|      6|      if (set) J->flags |= opt; else J->flags &= ~opt;
  ------------------
  |  Branch (465:11): [True: 0, False: 6]
  ------------------
  466|      6|      return 1;  /* Ok. */
  467|      6|    }
  468|    103|    lst += 1+len;
  469|    103|  }
  470|      5|  return 0;  /* No match. */
  471|     11|}
lib_jit.c:jitopt_param:
  475|      5|{
  476|      5|  const char *lst = JIT_P_STRING;
  ------------------
  |  |  147|      5|#define JIT_P_STRING	JIT_PARAMDEF(JIT_PARAMSTR)
  |  |  ------------------
  |  |  |  |  117|      5|  _(\010, maxtrace,	1000)	/* Max. # of traces in cache. */ \
  |  |  |  |  ------------------
  |  |  |  |  |  |  147|      5|#define JIT_P_STRING	JIT_PARAMDEF(JIT_PARAMSTR)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  146|      5|#define JIT_PARAMSTR(len, name, value)	#len #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  118|      5|  _(\011, maxrecord,	4000)	/* Max. # of recorded IR instructions. */ \
  |  |  |  |  119|      5|  _(\012, maxirconst,	500)	/* Max. # of IR constants of a trace. */ \
  |  |  |  |  120|      5|  _(\007, maxside,	100)	/* Max. # of side traces of a root trace. */ \
  |  |  |  |  121|      5|  _(\007, maxsnap,	500)	/* Max. # of snapshots for a trace. */ \
  |  |  |  |  122|      5|  _(\011, minstitch,	0)	/* Min. # of IR ins for a stitched trace. */ \
  |  |  |  |  123|      5|  \
  |  |  |  |  124|      5|  _(\007, hotloop,	56)	/* # of iter. to detect a hot loop/call. */ \
  |  |  |  |  125|      5|  _(\007, hotexit,	10)	/* # of taken exits to start a side trace. */ \
  |  |  |  |  126|      5|  _(\007, tryside,	4)	/* # of attempts to compile a side trace. */ \
  |  |  |  |  127|      5|  \
  |  |  |  |  128|      5|  _(\012, instunroll,	4)	/* Max. unroll for instable loops. */ \
  |  |  |  |  129|      5|  _(\012, loopunroll,	15)	/* Max. unroll for loop ops in side traces. */ \
  |  |  |  |  130|      5|  _(\012, callunroll,	3)	/* Max. unroll for recursive calls. */ \
  |  |  |  |  131|      5|  _(\011, recunroll,	2)	/* Min. unroll for true recursion. */ \
  |  |  |  |  132|      5|  \
  |  |  |  |  133|      5|  /* Size of each machine code area (in KBytes). */ \
  |  |  |  |  134|      5|  _(\011, sizemcode,	JIT_P_sizemcode_DEFAULT) \
  |  |  |  |  135|      5|  /* Max. total size of all machine code areas (in KBytes). */ \
  |  |  |  |  136|      5|  _(\010, maxmcode,	512) \
  |  |  |  |  ------------------
  |  |  |  |  |  |  147|      5|#define JIT_P_STRING	JIT_PARAMDEF(JIT_PARAMSTR)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  146|      5|#define JIT_PARAMSTR(len, name, value)	#len #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|      5|  int i;
  478|     80|  for (i = 0; i < JIT_P__MAX; i++) {
  ------------------
  |  Branch (478:15): [True: 75, False: 5]
  ------------------
  479|     75|    size_t len = *(const uint8_t *)lst;
  480|     75|    lj_assertJ(len != 0, "bad JIT_P_STRING");
  ------------------
  |  |  527|     75|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     75|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     75|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 75, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     75|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  481|     75|    if (strncmp(str, lst+1, len) == 0 && str[len] == '=') {
  ------------------
  |  Branch (481:9): [True: 0, False: 75]
  |  Branch (481:42): [True: 0, False: 0]
  ------------------
  482|      0|      int32_t n = 0;
  483|      0|      const char *p = &str[len+1];
  484|      0|      while (*p >= '0' && *p <= '9')
  ------------------
  |  Branch (484:14): [True: 0, False: 0]
  |  Branch (484:27): [True: 0, False: 0]
  ------------------
  485|      0|	n = n*10 + (*p++ - '0');
  486|      0|      if (*p) return 0;  /* Malformed number. */
  ------------------
  |  Branch (486:11): [True: 0, False: 0]
  ------------------
  487|      0|      J->param[i] = n;
  488|      0|      if (i == JIT_P_hotloop)
  ------------------
  |  Branch (488:11): [True: 0, False: 0]
  ------------------
  489|      0|	lj_dispatch_init_hotcount(J2G(J));
  ------------------
  |  |  115|      0|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  490|      0|      return 1;  /* Ok. */
  491|      0|    }
  492|     75|    lst += 1+len;
  493|     75|  }
  494|      5|  return 0;  /* No match. */
  495|      5|}

luaopen_math:
  199|  13.6k|{
  200|  13.6k|  PRNGState *rs = (PRNGState *)lua_newuserdata(L, sizeof(PRNGState));
  201|  13.6k|  lj_prng_seed_fixed(rs);
  202|  13.6k|  LJ_LIB_REG(L, LUA_MATHLIBNAME, math);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  203|  13.6k|  return 1;
  204|  13.6k|}
lib_math.c:lj_ffh_math_atan2:
   72|      1|{
   73|      1|  lj_lib_checknum(L, 1);
   74|      1|  lj_lib_checknum(L, 2);
   75|      1|  return FFH_RETRY;
  ------------------
  |  |   28|      1|#define FFH_RETRY	0
  ------------------
   76|      1|}
lib_math.c:lj_ffh_math_min:
   92|      3|{
   93|      3|  int i = 0;
   94|      4|  do { lj_lib_checknumber(L, ++i); } while (L->base+i < L->top);
  ------------------
  |  |   39|      4|#define lj_lib_checknumber(L, narg)	lj_lib_checknum((L), (narg))
  ------------------
  |  Branch (94:45): [True: 1, False: 3]
  ------------------
   95|      3|  return FFH_RETRY;
  ------------------
  |  |   28|      3|#define FFH_RETRY	0
  ------------------
   96|      3|}

luaopen_os:
  288|  13.6k|{
  289|  13.6k|  LJ_LIB_REG(L, LUA_OSLIBNAME, os);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  290|  13.6k|  return 1;
  291|  13.6k|}
lib_os.c:lj_cf_os_remove:
   65|     69|{
   66|     69|  const char *filename = luaL_checkstring(L, 1);
  ------------------
  |  |  103|     69|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
   67|     69|  return luaL_fileresult(L, remove(filename) == 0, filename);
   68|     69|}
lib_os.c:lj_cf_os_tmpname:
   78|  1.26k|{
   79|       |#if LJ_TARGET_PS3 || LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA || LJ_TARGET_NX
   80|       |  lj_err_caller(L, LJ_ERR_OSUNIQF);
   81|       |  return 0;
   82|       |#else
   83|  1.26k|#if LJ_TARGET_POSIX
   84|  1.26k|  char buf[15+1];
   85|  1.26k|  int fp;
   86|  1.26k|  strcpy(buf, "/tmp/lua_XXXXXX");
   87|  1.26k|  fp = mkstemp(buf);
   88|  1.26k|  if (fp != -1)
  ------------------
  |  Branch (88:7): [True: 1.26k, False: 0]
  ------------------
   89|  1.26k|    close(fp);
   90|      0|  else
   91|      0|    lj_err_caller(L, LJ_ERR_OSUNIQF);
   92|       |#else
   93|       |  char buf[L_tmpnam];
   94|       |  if (tmpnam(buf) == NULL)
   95|       |    lj_err_caller(L, LJ_ERR_OSUNIQF);
   96|       |#endif
   97|  1.26k|  lua_pushstring(L, buf);
   98|  1.26k|  return 1;
   99|  1.26k|#endif
  100|  1.26k|}

luaopen_package:
  594|  13.6k|{
  595|  13.6k|  int i;
  596|  13.6k|  int noenv;
  597|  13.6k|  luaL_newmetatable(L, "_LOADLIB");
  598|  13.6k|  lj_lib_pushcf(L, lj_cf_package_unloadlib, 1);
  ------------------
  |  |   78|  13.6k|#define lj_lib_pushcf(L, fn, id)	(lj_lib_pushcc(L, (fn), (id), 0))
  ------------------
  599|  13.6k|  lua_setfield(L, -2, "__gc");
  600|  13.6k|  luaL_register(L, LUA_LOADLIBNAME, package_lib);
  ------------------
  |  |   19|  13.6k|#define LUA_LOADLIBNAME	"package"
  ------------------
  601|  13.6k|  lua_copy(L, -1, LUA_ENVIRONINDEX);
  ------------------
  |  |   37|  13.6k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  602|  13.6k|  lua_createtable(L, sizeof(package_loaders)/sizeof(package_loaders[0])-1, 0);
  603|  68.4k|  for (i = 0; package_loaders[i] != NULL; i++) {
  ------------------
  |  Branch (603:15): [True: 54.7k, False: 13.6k]
  ------------------
  604|  54.7k|    lj_lib_pushcf(L, package_loaders[i], 1);
  ------------------
  |  |   78|  54.7k|#define lj_lib_pushcf(L, fn, id)	(lj_lib_pushcc(L, (fn), (id), 0))
  ------------------
  605|  54.7k|    lua_rawseti(L, -2, i+1);
  606|  54.7k|  }
  607|       |#if LJ_52
  608|       |  lua_pushvalue(L, -1);
  609|       |  lua_setfield(L, -3, "searchers");
  610|       |#endif
  611|  13.6k|  lua_setfield(L, -2, "loaders");
  612|  13.6k|  lua_getfield(L, LUA_REGISTRYINDEX, "LUA_NOENV");
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  613|  13.6k|  noenv = lua_toboolean(L, -1);
  614|  13.6k|  lua_pop(L, 1);
  ------------------
  |  |  256|  13.6k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  615|  13.6k|  setpath(L, "path", LUA_PATH, LUA_PATH_DEFAULT, noenv);
  ------------------
  |  |   68|  13.6k|#define LUA_PATH	"LUA_PATH"
  ------------------
                setpath(L, "path", LUA_PATH, LUA_PATH_DEFAULT, noenv);
  ------------------
  |  |   63|  13.6k|#define LUA_PATH_DEFAULT	"./?.lua" LUA_JPATH LUA_LLPATH LUA_RLPATH
  |  |  ------------------
  |  |  |  |   59|  13.6k|#define LUA_LLPATH	";" LUA_LLDIR "?.lua;" LUA_LLDIR "?/init.lua"
  |  |  ------------------
  ------------------
  616|  13.6k|  setpath(L, "cpath", LUA_CPATH, LUA_CPATH_DEFAULT, noenv);
  ------------------
  |  |   69|  13.6k|#define LUA_CPATH	"LUA_CPATH"
  ------------------
                setpath(L, "cpath", LUA_CPATH, LUA_CPATH_DEFAULT, noenv);
  ------------------
  |  |   64|  13.6k|#define LUA_CPATH_DEFAULT	"./?.so" LUA_LCPATH1 LUA_RCPATH LUA_LCPATH2
  |  |  ------------------
  |  |  |  |   61|  13.6k|#define LUA_LCPATH2	";" LUA_LCDIR "loadall.so"
  |  |  ------------------
  ------------------
  617|  13.6k|  lua_pushliteral(L, LUA_PATH_CONFIG);
  ------------------
  |  |  276|  13.6k|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  618|  13.6k|  lua_setfield(L, -2, "config");
  619|  13.6k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  620|  13.6k|  lua_setfield(L, -2, "loaded");
  621|  13.6k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD", 4);
  ------------------
  |  |   36|  13.6k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  622|  13.6k|  lua_setfield(L, -2, "preload");
  623|  13.6k|  lua_pushvalue(L, LUA_GLOBALSINDEX);
  ------------------
  |  |   38|  13.6k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  624|  13.6k|  luaL_register(L, NULL, package_global);
  625|  13.6k|  lua_pop(L, 1);
  ------------------
  |  |  256|  13.6k|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  626|  13.6k|  return 1;
  627|  13.6k|}
lib_package.c:mksymname:
  228|      9|{
  229|      9|  const char *funcname;
  230|      9|  const char *mark = strchr(modname, *LUA_IGMARK);
  ------------------
  |  |   81|      9|#define LUA_IGMARK	"-"
  ------------------
  231|      9|  if (mark) modname = mark + 1;
  ------------------
  |  Branch (231:7): [True: 0, False: 9]
  ------------------
  232|      9|  funcname = luaL_gsub(L, modname, ".", "_");
  233|      9|  funcname = lua_pushfstring(L, prefix, funcname);
  234|      9|  lua_remove(L, -2);  /* remove 'gsub' result */
  235|      9|  return funcname;
  236|      9|}
lib_package.c:ll_bcsym:
   59|      9|{
   60|       |#if defined(RTLD_DEFAULT) && !defined(NO_RTLD_DEFAULT)
   61|       |  if (lib == NULL) lib = RTLD_DEFAULT;
   62|       |#elif LJ_TARGET_OSX || LJ_TARGET_BSD
   63|       |  if (lib == NULL) lib = (void *)(intptr_t)-2;
   64|       |#endif
   65|      9|  return (const char *)dlsym(lib, sym);
   66|      9|}
lib_package.c:searchpath:
  319|     20|{
  320|     20|  luaL_Buffer msg;  /* to build error message */
  321|     20|  luaL_buffinit(L, &msg);
  322|     20|  if (*sep != '\0')  /* non-empty separator? */
  ------------------
  |  Branch (322:7): [True: 20, False: 0]
  ------------------
  323|     20|    name = luaL_gsub(L, name, sep, dirsep);  /* replace it by 'dirsep' */
  324|     89|  while ((path = pushnexttemplate(L, path)) != NULL) {
  ------------------
  |  Branch (324:10): [True: 69, False: 20]
  ------------------
  325|     69|    const char *filename = luaL_gsub(L, lua_tostring(L, -1),
  ------------------
  |  |  281|     69|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  326|     69|				     LUA_PATH_MARK, name);
  ------------------
  |  |   79|     69|#define LUA_PATH_MARK	"?"
  ------------------
  327|     69|    lua_remove(L, -2);  /* remove path template */
  328|     69|    if (readable(filename))  /* does file exist and is readable? */
  ------------------
  |  Branch (328:9): [True: 0, False: 69]
  ------------------
  329|      0|      return filename;  /* return that file name */
  330|     69|    lua_pushfstring(L, "\n\tno file " LUA_QS, filename);
  ------------------
  |  |   88|     69|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   87|     69|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  331|     69|    lua_remove(L, -2);  /* remove file name */
  332|     69|    luaL_addvalue(&msg);  /* concatenate error msg. entry */
  333|     69|  }
  334|     20|  luaL_pushresult(&msg);  /* create error message */
  335|     20|  return NULL;  /* not found */
  336|     20|}
lib_package.c:pushnexttemplate:
  306|     89|{
  307|     89|  const char *l;
  308|    138|  while (*path == *LUA_PATHSEP) path++;  /* skip separators */
  ------------------
  |  |   78|    138|#define LUA_PATHSEP	";"
  ------------------
  |  Branch (308:10): [True: 49, False: 89]
  ------------------
  309|     89|  if (*path == '\0') return NULL;  /* no more templates */
  ------------------
  |  Branch (309:7): [True: 20, False: 69]
  ------------------
  310|     69|  l = strchr(path, *LUA_PATHSEP);  /* find next separator */
  ------------------
  |  |   78|     69|#define LUA_PATHSEP	";"
  ------------------
  311|     69|  if (l == NULL) l = path + strlen(path);
  ------------------
  |  Branch (311:7): [True: 20, False: 49]
  ------------------
  312|     69|  lua_pushlstring(L, path, (size_t)(l - path));  /* template */
  313|     69|  return l;
  314|     89|}
lib_package.c:readable:
  298|     69|{
  299|     69|  FILE *f = fopen(filename, "r");  /* try to open file */
  300|     69|  if (f == NULL) return 0;  /* open failed */
  ------------------
  |  Branch (300:7): [True: 69, False: 0]
  ------------------
  301|      0|  fclose(f);
  302|      0|  return 1;
  303|     69|}
lib_package.c:lj_cf_package_loader_preload:
  411|     29|{
  412|     29|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|     29|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  413|     29|  lua_getfield(L, LUA_ENVIRONINDEX, "preload");
  ------------------
  |  |   37|     29|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  414|     29|  if (!lua_istable(L, -1))
  ------------------
  |  |  267|     29|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|     29|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (414:7): [True: 0, False: 29]
  ------------------
  415|      0|    luaL_error(L, LUA_QL("package.preload") " must be a table");
  ------------------
  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  ------------------
  416|     29|  lua_getfield(L, -1, name);
  417|     29|  if (lua_isnil(L, -1)) {  /* Not found? */
  ------------------
  |  |  269|     29|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|     29|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 9, False: 20]
  |  |  ------------------
  ------------------
  418|      9|    const char *bcname = mksymname(L, name, SYMPREFIX_BC);
  ------------------
  |  |   33|      9|#define SYMPREFIX_BC		"luaJIT_BC_%s"
  ------------------
  419|      9|    const char *bcdata = ll_bcsym(NULL, bcname);
  420|      9|    if (bcdata == NULL || luaL_loadbuffer(L, bcdata, ~(size_t)0, name) != 0)
  ------------------
  |  Branch (420:9): [True: 9, False: 0]
  |  Branch (420:27): [True: 0, False: 0]
  ------------------
  421|      9|      lua_pushfstring(L, "\n\tno field package.preload['%s']", name);
  422|      9|  }
  423|     29|  return 1;
  424|     29|}
lib_package.c:lj_cf_package_loader_lua:
  371|      9|{
  372|      9|  const char *filename;
  373|      9|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|      9|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  374|      9|  filename = findfile(L, name, "path");
  375|      9|  if (filename == NULL) return 1;  /* library not found in this path */
  ------------------
  |  Branch (375:7): [True: 9, False: 0]
  ------------------
  376|      0|  if (luaL_loadfile(L, filename) != 0)
  ------------------
  |  Branch (376:7): [True: 0, False: 0]
  ------------------
  377|      0|    loaderror(L, filename);
  378|      0|  return 1;  /* library loaded successfully */
  379|      9|}
lib_package.c:findfile:
  355|     20|{
  356|     20|  const char *path;
  357|     20|  lua_getfield(L, LUA_ENVIRONINDEX, pname);
  ------------------
  |  |   37|     20|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  358|     20|  path = lua_tostring(L, -1);
  ------------------
  |  |  281|     20|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  359|     20|  if (path == NULL)
  ------------------
  |  Branch (359:7): [True: 0, False: 20]
  ------------------
  360|      0|    luaL_error(L, LUA_QL("package.%s") " must be a string", pname);
  ------------------
  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  ------------------
  361|     20|  return searchpath(L, name, path, ".", LUA_DIRSEP);
  ------------------
  |  |   76|     20|#define LUA_DIRSEP	"/"
  ------------------
  362|     20|}
lib_package.c:lj_cf_package_loader_c:
  382|      9|{
  383|      9|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|      9|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  384|      9|  const char *filename = findfile(L, name, "cpath");
  385|      9|  if (filename == NULL) return 1;  /* library not found in this path */
  ------------------
  |  Branch (385:7): [True: 9, False: 0]
  ------------------
  386|      0|  if (ll_loadfunc(L, filename, name, 0) != 0)
  ------------------
  |  Branch (386:7): [True: 0, False: 0]
  ------------------
  387|      0|    loaderror(L, filename);
  388|      0|  return 1;  /* library loaded successfully */
  389|      9|}
lib_package.c:lj_cf_package_loader_croot:
  392|      9|{
  393|      9|  const char *filename;
  394|      9|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|      9|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  395|      9|  const char *p = strchr(name, '.');
  396|      9|  int st;
  397|      9|  if (p == NULL) return 0;  /* is root */
  ------------------
  |  Branch (397:7): [True: 7, False: 2]
  ------------------
  398|      2|  lua_pushlstring(L, name, (size_t)(p - name));
  399|      2|  filename = findfile(L, lua_tostring(L, -1), "cpath");
  ------------------
  |  |  281|      2|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  400|      2|  if (filename == NULL) return 1;  /* root not found */
  ------------------
  |  Branch (400:7): [True: 2, False: 0]
  ------------------
  401|      0|  if ((st = ll_loadfunc(L, filename, name, 0)) != 0) {
  ------------------
  |  Branch (401:7): [True: 0, False: 0]
  ------------------
  402|      0|    if (st != PACKAGE_ERR_FUNC) loaderror(L, filename);  /* real error */
  ------------------
  |  |   24|      0|#define PACKAGE_ERR_FUNC	2
  ------------------
  |  Branch (402:9): [True: 0, False: 0]
  ------------------
  403|      0|    lua_pushfstring(L, "\n\tno module " LUA_QS " in file " LUA_QS,
  ------------------
  |  |   88|      0|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  404|      0|		    name, filename);
  405|      0|    return 1;  /* function not found */
  406|      0|  }
  407|      0|  return 1;
  408|      0|}
lib_package.c:setpath:
  552|  27.3k|{
  553|       |#if LJ_TARGET_CONSOLE
  554|       |  const char *path = NULL;
  555|       |  UNUSED(envname);
  556|       |#else
  557|  27.3k|  const char *path = getenv(envname);
  558|  27.3k|#endif
  559|  27.3k|  if (path == NULL || noenv) {
  ------------------
  |  Branch (559:7): [True: 27.3k, False: 0]
  |  Branch (559:23): [True: 0, False: 0]
  ------------------
  560|  27.3k|    lua_pushstring(L, def);
  561|  27.3k|  } else {
  562|      0|    path = luaL_gsub(L, path, LUA_PATHSEP LUA_PATHSEP,
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
                  path = luaL_gsub(L, path, LUA_PATHSEP LUA_PATHSEP,
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
  563|      0|			      LUA_PATHSEP AUXMARK LUA_PATHSEP);
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
              			      LUA_PATHSEP AUXMARK LUA_PATHSEP);
  ------------------
  |  |   78|      0|#define LUA_PATHSEP	";"
  ------------------
  564|      0|    luaL_gsub(L, path, AUXMARK, def);
  ------------------
  |  |  548|      0|#define AUXMARK		"\1"
  ------------------
  565|      0|    lua_remove(L, -2);
  566|      0|  }
  567|  27.3k|  setprogdir(L);
  ------------------
  |  |   29|  27.3k|#define setprogdir(L)		((void)0)
  ------------------
  568|  27.3k|  lua_setfield(L, -2, fieldname);
  569|  27.3k|}
lib_package.c:lj_cf_package_require:
  431|    177|{
  432|    177|  const char *name = luaL_checkstring(L, 1);
  ------------------
  |  |  103|    177|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  433|    177|  int i;
  434|    177|  lua_settop(L, 1);  /* _LOADED table will be at index 2 */
  435|    177|  lua_getfield(L, LUA_REGISTRYINDEX, "_LOADED");
  ------------------
  |  |   36|    177|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  436|    177|  lua_getfield(L, 2, name);
  437|    177|  if (lua_toboolean(L, -1)) {  /* is it there? */
  ------------------
  |  Branch (437:7): [True: 148, False: 29]
  ------------------
  438|    148|    if ((L->top-1)->u64 == KEY_SENTINEL)  /* check loops */
  ------------------
  |  |  428|    148|#define KEY_SENTINEL	(U64x(80000000,00000000)|'s')
  |  |  ------------------
  |  |  |  |   94|    148|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (438:9): [True: 0, False: 148]
  ------------------
  439|      0|      luaL_error(L, "loop or previous error loading module " LUA_QS, name);
  ------------------
  |  |   88|      0|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  440|    148|    return 1;  /* package is already loaded */
  441|    148|  }
  442|       |  /* else must load it; iterate over available loaders */
  443|     29|  lua_getfield(L, LUA_ENVIRONINDEX, "loaders");
  ------------------
  |  |   37|     29|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  444|     29|  if (!lua_istable(L, -1))
  ------------------
  |  |  267|     29|#define lua_istable(L,n)	(lua_type(L, (n)) == LUA_TTABLE)
  |  |  ------------------
  |  |  |  |   80|     29|#define LUA_TTABLE		5
  |  |  ------------------
  ------------------
  |  Branch (444:7): [True: 0, False: 29]
  ------------------
  445|      0|    luaL_error(L, LUA_QL("package.loaders") " must be a table");
  ------------------
  |  |   87|      0|#define LUA_QL(x)	"'" x "'"
  ------------------
  446|     29|  lua_pushliteral(L, "");  /* error message accumulator */
  ------------------
  |  |  276|     29|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  447|     65|  for (i = 1; ; i++) {
  448|     65|    lua_rawgeti(L, -2, i);  /* get a loader */
  449|     65|    if (lua_isnil(L, -1))
  ------------------
  |  |  269|     65|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|     65|#define LUA_TNIL		0
  |  |  ------------------
  |  |  |  Branch (269:25): [True: 9, False: 56]
  |  |  ------------------
  ------------------
  450|      9|      luaL_error(L, "module " LUA_QS " not found:%s",
  451|      9|		 name, lua_tostring(L, -2));
  ------------------
  |  |  281|      9|#define lua_tostring(L,i)	lua_tolstring(L, (i), NULL)
  ------------------
  452|     65|    lua_pushstring(L, name);
  453|     65|    lua_call(L, 1, 1);  /* call it */
  454|     65|    if (lua_isfunction(L, -1))  /* did it find module? */
  ------------------
  |  |  266|     65|#define lua_isfunction(L,n)	(lua_type(L, (n)) == LUA_TFUNCTION)
  |  |  ------------------
  |  |  |  |   81|     65|#define LUA_TFUNCTION		6
  |  |  ------------------
  |  |  |  Branch (266:29): [True: 20, False: 45]
  |  |  ------------------
  ------------------
  455|     20|      break;  /* module loaded successfully */
  456|     45|    else if (lua_isstring(L, -1))  /* loader returned error message? */
  ------------------
  |  Branch (456:14): [True: 29, False: 16]
  ------------------
  457|     29|      lua_concat(L, 2);  /* accumulate it */
  458|     16|    else
  459|     16|      lua_pop(L, 1);
  ------------------
  |  |  256|     16|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  460|     65|  }
  461|     29|  (L->top++)->u64 = KEY_SENTINEL;
  ------------------
  |  |  428|     29|#define KEY_SENTINEL	(U64x(80000000,00000000)|'s')
  |  |  ------------------
  |  |  |  |   94|     29|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  462|     29|  lua_setfield(L, 2, name);  /* _LOADED[name] = sentinel */
  463|     29|  lua_pushstring(L, name);  /* pass name as argument to module */
  464|     29|  lua_call(L, 1, 1);  /* run loaded module */
  465|     29|  if (!lua_isnil(L, -1))  /* non-nil return? */
  ------------------
  |  |  269|     29|#define lua_isnil(L,n)		(lua_type(L, (n)) == LUA_TNIL)
  |  |  ------------------
  |  |  |  |   75|     29|#define LUA_TNIL		0
  |  |  ------------------
  ------------------
  |  Branch (465:7): [True: 20, False: 9]
  ------------------
  466|     20|    lua_setfield(L, 2, name);  /* _LOADED[name] = returned value */
  467|     29|  lua_getfield(L, 2, name);
  468|     29|  if ((L->top-1)->u64 == KEY_SENTINEL) {   /* module did not set a value? */
  ------------------
  |  |  428|     29|#define KEY_SENTINEL	(U64x(80000000,00000000)|'s')
  |  |  ------------------
  |  |  |  |   94|     29|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (468:7): [True: 0, False: 29]
  ------------------
  469|      0|    lua_pushboolean(L, 1);  /* use true as result */
  470|      0|    lua_pushvalue(L, -1);  /* extra copy to be returned */
  471|      0|    lua_setfield(L, 2, name);  /* _LOADED[name] = true */
  472|      0|  }
  473|     29|  lj_lib_checkfpu(L);
  ------------------
  |  |   74|     29|#define lj_lib_checkfpu(L)	UNUSED(L)
  |  |  ------------------
  |  |  |  |   91|     29|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  474|     29|  return 1;
  475|    177|}

luaopen_string:
  675|  13.6k|{
  676|  13.6k|  GCtab *mt;
  677|  13.6k|  global_State *g;
  678|  13.6k|  LJ_LIB_REG(L, LUA_STRLIBNAME, string);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  679|  13.6k|  mt = lj_tab_new(L, 0, 1);
  680|       |  /* NOBARRIER: basemt is a GC root. */
  681|  13.6k|  g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  682|  13.6k|  setgcref(basemt_it(g, LJ_TSTR), obj2gco(mt));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  683|  13.6k|  settabV(L, lj_tab_setstr(L, mt, mmname_str(g, MM_index)), tabV(L->top-1));
  ------------------
  |  |  590|  13.6k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|  13.6k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, lj_tab_setstr(L, mt, mmname_str(g, MM_index)), tabV(L->top-1));
  ------------------
  |  |  864|  13.6k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  684|      0|  mt->nomm = (uint8_t)(~(1u<<MM_index));
  685|  13.6k|#if LJ_HASBUFFER
  686|  13.6k|  lj_lib_prereg(L, LUA_STRLIBNAME ".buffer", luaopen_string_buffer, tabV(L->top-1));
  ------------------
  |  |   15|  13.6k|#define LUA_STRLIBNAME	"string"
  ------------------
                lj_lib_prereg(L, LUA_STRLIBNAME ".buffer", luaopen_string_buffer, tabV(L->top-1));
  ------------------
  |  |  864|  13.6k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  687|      0|#endif
  688|      0|  return 1;
  689|  13.6k|}
lib_string.c:lj_ffh_string_char:
   66|  60.5k|{
   67|  60.5k|  int i, nargs = (int)(L->top - L->base);
   68|  60.5k|  char *buf = lj_buf_tmp(L, (MSize)nargs);
   69|   210k|  for (i = 1; i <= nargs; i++) {
  ------------------
  |  Branch (69:15): [True: 150k, False: 60.5k]
  ------------------
   70|   150k|    int32_t k = lj_lib_checkint(L, i);
   71|   150k|    if (!checku8(k))
  ------------------
  |  |  102|   150k|#define checku8(x)	((x) == (int32_t)(uint8_t)(x))
  ------------------
  |  Branch (71:9): [True: 0, False: 150k]
  ------------------
   72|      0|      lj_err_arg(L, i, LJ_ERR_BADVAL);
   73|   150k|    buf[i-1] = (char)k;
   74|   150k|  }
   75|  60.5k|  setstrV(L, L->base-1-LJ_FR2, lj_str_new(L, buf, (size_t)nargs));
  ------------------
  |  |  569|  60.5k|#define LJ_FR2			1
  ------------------
   76|  60.5k|  return FFH_RES(1);
  ------------------
  |  |   30|  60.5k|#define FFH_RES(n)	((n)+1)
  ------------------
   77|  60.5k|}
lib_string.c:lj_ffh_string_sub:
   80|      2|{
   81|      2|  lj_lib_checkstr(L, 1);
   82|      2|  lj_lib_checkint(L, 2);
   83|      2|  setintV(L->base+2, lj_lib_optint(L, 3, -1));
   84|      2|  return FFH_RETRY;
  ------------------
  |  |   28|      2|#define FFH_RETRY	0
  ------------------
   85|      2|}
lib_string.c:lj_cf_string_rep:
   88|  7.49k|{
   89|  7.49k|  GCstr *s = lj_lib_checkstr(L, 1);
   90|  7.49k|  int32_t rep = lj_lib_checkint(L, 2);
   91|  7.49k|  GCstr *sep = lj_lib_optstr(L, 3);
   92|  7.49k|  SBuf *sb = lj_buf_tmp_(L);
   93|  7.49k|  if (sep && rep > 1) {
  ------------------
  |  Branch (93:7): [True: 0, False: 7.49k]
  |  Branch (93:14): [True: 0, False: 0]
  ------------------
   94|      0|    GCstr *s2 = lj_buf_cat2str(L, sep, s);
   95|      0|    lj_buf_reset(sb);
   96|      0|    lj_buf_putstr(sb, s);
   97|      0|    s = s2;
   98|      0|    rep--;
   99|      0|  }
  100|  7.49k|  sb = lj_buf_putstr_rep(sb, s, rep);
  101|  7.49k|  setstrV(L, L->top-1, lj_buf_str(L, sb));
  102|  7.49k|  lj_gc_check(L);
  ------------------
  |  |   66|  7.49k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  7.49k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 163, False: 7.32k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  7.49k|      lj_gc_step(L); }
  ------------------
  103|  7.49k|  return 1;
  104|  7.49k|}
lib_string.c:lj_cf_string_find:
  518|  1.22k|{
  519|  1.22k|  return str_find_aux(L, 1);
  520|  1.22k|}
lib_string.c:str_find_aux:
  465|  1.29k|{
  466|  1.29k|  GCstr *s = lj_lib_checkstr(L, 1);
  467|  1.29k|  GCstr *p = lj_lib_checkstr(L, 2);
  468|  1.29k|  int32_t start = lj_lib_optint(L, 3, 1);
  469|  1.29k|  MSize st;
  470|  1.29k|  if (start < 0) start += (int32_t)s->len; else start--;
  ------------------
  |  Branch (470:7): [True: 0, False: 1.29k]
  ------------------
  471|  1.29k|  if (start < 0) start = 0;
  ------------------
  |  Branch (471:7): [True: 0, False: 1.29k]
  ------------------
  472|  1.29k|  st = (MSize)start;
  473|  1.29k|  if (st > s->len) {
  ------------------
  |  Branch (473:7): [True: 0, False: 1.29k]
  ------------------
  474|       |#if LJ_52
  475|       |    setnilV(L->top-1);
  476|       |    return 1;
  477|       |#else
  478|      0|    st = s->len;
  479|      0|#endif
  480|      0|  }
  481|  1.29k|  if (find && ((L->base+3 < L->top && tvistruecond(L->base+3)) ||
  ------------------
  |  |  806|      0|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      0|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (806:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (481:7): [True: 1.22k, False: 72]
  |  Branch (481:17): [True: 0, False: 1.22k]
  ------------------
  482|  1.22k|	       !lj_str_haspattern(p))) {  /* Search for fixed string. */
  ------------------
  |  Branch (482:9): [True: 75, False: 1.15k]
  ------------------
  483|     75|    const char *q = lj_str_find(strdata(s)+st, strdata(p), s->len-st, p->len);
  ------------------
  |  |  316|     75|#define strdata(s)	((const char *)((s)+1))
  ------------------
                  const char *q = lj_str_find(strdata(s)+st, strdata(p), s->len-st, p->len);
  ------------------
  |  |  316|     75|#define strdata(s)	((const char *)((s)+1))
  ------------------
  484|     75|    if (q) {
  ------------------
  |  Branch (484:9): [True: 65, False: 10]
  ------------------
  485|     65|      setintV(L->top-2, (int32_t)(q-strdata(s)) + 1);
  ------------------
  |  |  316|     65|#define strdata(s)	((const char *)((s)+1))
  ------------------
  486|     65|      setintV(L->top-1, (int32_t)(q-strdata(s)) + (int32_t)p->len);
  ------------------
  |  |  316|     65|#define strdata(s)	((const char *)((s)+1))
  ------------------
  487|     65|      return 2;
  488|     65|    }
  489|  1.22k|  } else {  /* Search for pattern. */
  490|  1.22k|    MatchState ms;
  491|  1.22k|    const char *pstr = strdata(p);
  ------------------
  |  |  316|  1.22k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  492|  1.22k|    const char *sstr = strdata(s) + st;
  ------------------
  |  |  316|  1.22k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  493|  1.22k|    int anchor = 0;
  494|  1.22k|    if (*pstr == '^') { pstr++; anchor = 1; }
  ------------------
  |  Branch (494:9): [True: 2, False: 1.22k]
  ------------------
  495|  1.22k|    ms.L = L;
  496|  1.22k|    ms.src_init = strdata(s);
  ------------------
  |  |  316|  1.22k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  497|  1.22k|    ms.src_end = strdata(s) + s->len;
  ------------------
  |  |  316|  1.22k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  498|  17.7k|    do {  /* Loop through string and try to match the pattern. */
  499|  17.7k|      const char *q;
  500|  17.7k|      ms.level = ms.depth = 0;
  501|  17.7k|      q = match(&ms, sstr, pstr);
  502|  17.7k|      if (q) {
  ------------------
  |  Branch (502:11): [True: 988, False: 16.7k]
  ------------------
  503|    988|	if (find) {
  ------------------
  |  Branch (503:6): [True: 947, False: 41]
  ------------------
  504|    947|	  setintV(L->top++, (int32_t)(sstr-(strdata(s)-1)));
  ------------------
  |  |  316|    947|#define strdata(s)	((const char *)((s)+1))
  ------------------
  505|    947|	  setintV(L->top++, (int32_t)(q-strdata(s)));
  ------------------
  |  |  316|    947|#define strdata(s)	((const char *)((s)+1))
  ------------------
  506|    947|	  return push_captures(&ms, NULL, NULL) + 2;
  507|    947|	} else {
  508|     41|	  return push_captures(&ms, sstr, q);
  509|     41|	}
  510|    988|      }
  511|  17.7k|    } while (sstr++ < ms.src_end && !anchor);
  ------------------
  |  Branch (511:14): [True: 16.4k, False: 234]
  |  Branch (511:37): [True: 16.4k, False: 2]
  ------------------
  512|  1.22k|  }
  513|    246|  setnilV(L->top-1);  /* Not found. */
  ------------------
  |  |  872|    246|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  514|    246|  return 1;
  515|  1.29k|}
lib_string.c:match:
  353|  7.39M|{
  354|  7.39M|  if (++ms->depth > LJ_MAX_XLEVEL)
  ------------------
  |  |   65|  7.39M|#define LJ_MAX_XLEVEL	200		/* Max. syntactic nesting level. */
  ------------------
  |  Branch (354:7): [True: 0, False: 7.39M]
  ------------------
  355|      0|    lj_err_caller(ms->L, LJ_ERR_STRPATX);
  356|  8.28M|  init: /* using goto's to optimize tail recursion */
  357|  8.28M|  switch (*p) {
  358|  2.63M|  case '(':  /* start capture */
  ------------------
  |  Branch (358:3): [True: 2.63M, False: 5.65M]
  ------------------
  359|  2.63M|    if (*(p+1) == ')')  /* position capture? */
  ------------------
  |  Branch (359:9): [True: 0, False: 2.63M]
  ------------------
  360|      0|      s = start_capture(ms, s, p+2, CAP_POSITION);
  ------------------
  |  |  156|      0|#define CAP_POSITION	(-2)
  ------------------
  361|  2.63M|    else
  362|  2.63M|      s = start_capture(ms, s, p+1, CAP_UNFINISHED);
  ------------------
  |  |  155|  2.63M|#define CAP_UNFINISHED	(-1)
  ------------------
  363|  2.63M|    break;
  364|   883k|  case ')':  /* end capture */
  ------------------
  |  Branch (364:3): [True: 883k, False: 7.40M]
  ------------------
  365|   883k|    s = end_capture(ms, s, p+1);
  366|   883k|    break;
  367|  3.50M|  case L_ESC:
  ------------------
  |  |  170|  3.50M|#define L_ESC		'%'
  ------------------
  |  Branch (367:3): [True: 3.50M, False: 4.77M]
  ------------------
  368|  3.50M|    switch (*(p+1)) {
  369|      0|    case 'b':  /* balanced string? */
  ------------------
  |  Branch (369:5): [True: 0, False: 3.50M]
  ------------------
  370|      0|      s = matchbalance(ms, s, p+2);
  371|      0|      if (s == NULL) break;
  ------------------
  |  Branch (371:11): [True: 0, False: 0]
  ------------------
  372|      0|      p+=4;
  373|      0|      goto init;  /* else s = match(ms, s, p+4); */
  374|      0|    case 'f': {  /* frontier? */
  ------------------
  |  Branch (374:5): [True: 0, False: 3.50M]
  ------------------
  375|      0|      const char *ep; char previous;
  376|      0|      p += 2;
  377|      0|      if (*p != '[')
  ------------------
  |  Branch (377:11): [True: 0, False: 0]
  ------------------
  378|      0|	lj_err_caller(ms->L, LJ_ERR_STRPATB);
  379|      0|      ep = classend(ms, p);  /* points to what is next */
  380|      0|      previous = (s == ms->src_init) ? '\0' : *(s-1);
  ------------------
  |  Branch (380:18): [True: 0, False: 0]
  ------------------
  381|      0|      if (matchbracketclass(uchar(previous), p, ep-1) ||
  ------------------
  |  |  153|      0|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (381:11): [True: 0, False: 0]
  ------------------
  382|      0|	 !matchbracketclass(uchar(*s), p, ep-1)) { s = NULL; break; }
  ------------------
  |  |  153|      0|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (382:3): [True: 0, False: 0]
  ------------------
  383|      0|      p=ep;
  384|      0|      goto init;  /* else s = match(ms, s, ep); */
  385|      0|      }
  386|  3.50M|    default:
  ------------------
  |  Branch (386:5): [True: 3.50M, False: 0]
  ------------------
  387|  3.50M|      if (lj_char_isdigit(uchar(*(p+1)))) {  /* capture results (%0-%9)? */
  ------------------
  |  |   28|  3.50M|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  3.50M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 0, False: 3.50M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  388|      0|	s = match_capture(ms, s, uchar(*(p+1)));
  ------------------
  |  |  153|      0|#define uchar(c)	((unsigned char)(c))
  ------------------
  389|      0|	if (s == NULL) break;
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p+=2;
  391|      0|	goto init;  /* else s = match(ms, s, p+2) */
  392|      0|      }
  393|  3.50M|      goto dflt;  /* case default */
  394|  3.50M|    }
  395|      0|    break;
  396|   885k|  case '\0':  /* end of pattern */
  ------------------
  |  Branch (396:3): [True: 885k, False: 7.40M]
  ------------------
  397|   885k|    break;  /* match succeeded */
  398|  42.2k|  case '$':
  ------------------
  |  Branch (398:3): [True: 42.2k, False: 8.24M]
  ------------------
  399|       |    /* is the `$' the last char in pattern? */
  400|  42.2k|    if (*(p+1) != '\0') goto dflt;
  ------------------
  |  Branch (400:9): [True: 42.2k, False: 0]
  ------------------
  401|      0|    if (s != ms->src_end) s = NULL;  /* check end of string */
  ------------------
  |  Branch (401:9): [True: 0, False: 0]
  ------------------
  402|      0|    break;
  403|  3.88M|  default: dflt: {  /* it is a pattern item */
  ------------------
  |  Branch (403:3): [True: 333k, False: 7.95M]
  ------------------
  404|  3.88M|    const char *ep = classend(ms, p);  /* points to what is next */
  405|  3.88M|    int m = s<ms->src_end && singlematch(uchar(*s), p, ep);
  ------------------
  |  |  153|  2.95M|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (405:13): [True: 2.95M, False: 927k]
  |  Branch (405:30): [True: 1.77M, False: 1.18M]
  ------------------
  406|  3.88M|    switch (*ep) {
  407|      0|    case '?': {  /* optional */
  ------------------
  |  Branch (407:5): [True: 0, False: 3.88M]
  ------------------
  408|      0|      const char *res;
  409|      0|      if (m && ((res=match(ms, s+1, ep+1)) != NULL)) {
  ------------------
  |  Branch (409:11): [True: 0, False: 0]
  |  Branch (409:16): [True: 0, False: 0]
  ------------------
  410|      0|	s = res;
  411|      0|	break;
  412|      0|      }
  413|      0|      p=ep+1;
  414|      0|      goto init;  /* else s = match(ms, s, ep+1); */
  415|      0|      }
  416|   875k|    case '*':  /* 0 or more repetitions */
  ------------------
  |  Branch (416:5): [True: 875k, False: 3.00M]
  ------------------
  417|   875k|      s = max_expand(ms, s, p, ep);
  418|   875k|      break;
  419|  8.62k|    case '+':  /* 1 or more repetitions */
  ------------------
  |  Branch (419:5): [True: 8.62k, False: 3.87M]
  ------------------
  420|  8.62k|      s = (m ? max_expand(ms, s+1, p, ep) : NULL);
  ------------------
  |  Branch (420:12): [True: 8.20k, False: 418]
  ------------------
  421|  8.62k|      break;
  422|      0|    case '-':  /* 0 or more repetitions (minimum) */
  ------------------
  |  Branch (422:5): [True: 0, False: 3.88M]
  ------------------
  423|      0|      s = min_expand(ms, s, p, ep);
  424|      0|      break;
  425|  2.99M|    default:
  ------------------
  |  Branch (425:5): [True: 2.99M, False: 884k]
  ------------------
  426|  2.99M|      if (m) { s++; p=ep; goto init; }  /* else s = match(ms, s+1, ep); */
  ------------------
  |  Branch (426:11): [True: 888k, False: 2.10M]
  ------------------
  427|  2.10M|      s = NULL;
  428|  2.10M|      break;
  429|  3.88M|    }
  430|  2.99M|    break;
  431|  3.88M|    }
  432|  8.28M|  }
  433|  7.39M|  ms->depth--;
  434|  7.39M|  return s;
  435|  8.28M|}
lib_string.c:start_capture:
  317|  2.63M|{
  318|  2.63M|  const char *res;
  319|  2.63M|  int level = ms->level;
  320|  2.63M|  if (level >= LUA_MAXCAPTURES) lj_err_caller(ms->L, LJ_ERR_STRCAPN);
  ------------------
  |  |   95|  2.63M|#define LUA_MAXCAPTURES	32	/* Max. pattern captures. */
  ------------------
  |  Branch (320:7): [True: 0, False: 2.63M]
  ------------------
  321|  2.63M|  ms->capture[level].init = s;
  322|  2.63M|  ms->capture[level].len = what;
  323|  2.63M|  ms->level = level+1;
  324|  2.63M|  if ((res=match(ms, s, p)) == NULL)  /* match failed? */
  ------------------
  |  Branch (324:7): [True: 1.75M, False: 883k]
  ------------------
  325|  1.75M|    ms->level--;  /* undo capture */
  326|  2.63M|  return res;
  327|  2.63M|}
lib_string.c:end_capture:
  331|   883k|{
  332|   883k|  int l = capture_to_close(ms);
  333|   883k|  const char *res;
  334|   883k|  ms->capture[l].len = s - ms->capture[l].init;  /* close capture */
  335|   883k|  if ((res = match(ms, s, p)) == NULL)  /* match failed? */
  ------------------
  |  Branch (335:7): [True: 0, False: 883k]
  ------------------
  336|      0|    ms->capture[l].len = CAP_UNFINISHED;  /* undo capture */
  ------------------
  |  |  155|      0|#define CAP_UNFINISHED	(-1)
  ------------------
  337|   883k|  return res;
  338|   883k|}
lib_string.c:capture_to_close:
  181|   883k|{
  182|   883k|  int level = ms->level;
  183|   883k|  for (level--; level>=0; level--)
  ------------------
  |  Branch (183:17): [True: 883k, False: 5]
  ------------------
  184|   883k|    if (ms->capture[level].len == CAP_UNFINISHED) return level;
  ------------------
  |  |  155|   883k|#define CAP_UNFINISHED	(-1)
  ------------------
  |  Branch (184:9): [True: 883k, False: 3]
  ------------------
  185|      5|  lj_err_caller(ms->L, LJ_ERR_STRPATC);
  186|      0|  return 0;  /* unreachable */
  187|   883k|}
lib_string.c:classend:
  190|  3.88M|{
  191|  3.88M|  switch (*p++) {
  192|  3.50M|  case L_ESC:
  ------------------
  |  |  170|  3.50M|#define L_ESC		'%'
  ------------------
  |  Branch (192:3): [True: 3.50M, False: 375k]
  ------------------
  193|  3.50M|    if (*p == '\0')
  ------------------
  |  Branch (193:9): [True: 0, False: 3.50M]
  ------------------
  194|      0|      lj_err_caller(ms->L, LJ_ERR_STRPATE);
  195|  3.50M|    return p+1;
  196|  25.5k|  case '[':
  ------------------
  |  Branch (196:3): [True: 25.5k, False: 3.85M]
  ------------------
  197|  25.5k|    if (*p == '^') p++;
  ------------------
  |  Branch (197:9): [True: 8.93k, False: 16.5k]
  ------------------
  198|  42.4k|    do {  /* look for a `]' */
  199|  42.4k|      if (*p == '\0')
  ------------------
  |  Branch (199:11): [True: 28, False: 42.4k]
  ------------------
  200|     28|	lj_err_caller(ms->L, LJ_ERR_STRPATM);
  201|  42.4k|      if (*(p++) == L_ESC && *p != '\0')
  ------------------
  |  |  170|  84.8k|#define L_ESC		'%'
  ------------------
  |  Branch (201:11): [True: 15.9k, False: 26.4k]
  |  Branch (201:30): [True: 15.9k, False: 0]
  ------------------
  202|  15.9k|	p++;  /* skip escapes (e.g. `%]') */
  203|  42.4k|    } while (*p != ']');
  ------------------
  |  Branch (203:14): [True: 16.9k, False: 25.4k]
  ------------------
  204|  25.4k|    return p+1;
  205|   349k|  default:
  ------------------
  |  Branch (205:3): [True: 349k, False: 3.53M]
  ------------------
  206|   349k|    return p;
  207|  3.88M|  }
  208|  3.88M|}
lib_string.c:matchbracketclass:
  231|  1.22M|{
  232|  1.22M|  int sig = 1;
  233|  1.22M|  if (*(p+1) == '^') {
  ------------------
  |  Branch (233:7): [True: 1.21M, False: 16.3k]
  ------------------
  234|  1.21M|    sig = 0;
  235|  1.21M|    p++;  /* skip the `^' */
  236|  1.21M|  }
  237|  2.46M|  while (++p < ec) {
  ------------------
  |  Branch (237:10): [True: 1.24M, False: 1.21M]
  ------------------
  238|  1.24M|    if (*p == L_ESC) {
  ------------------
  |  |  170|  1.24M|#define L_ESC		'%'
  ------------------
  |  Branch (238:9): [True: 15.2k, False: 1.22M]
  ------------------
  239|  15.2k|      p++;
  240|  15.2k|      if (match_class(c, uchar(*p)))
  ------------------
  |  |  153|  15.2k|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (240:11): [True: 3, False: 15.2k]
  ------------------
  241|      3|	return sig;
  242|  15.2k|    }
  243|  1.22M|    else if ((*(p+1) == '-') && (p+2 < ec)) {
  ------------------
  |  Branch (243:14): [True: 0, False: 1.22M]
  |  Branch (243:33): [True: 0, False: 0]
  ------------------
  244|      0|      p+=2;
  245|      0|      if (uchar(*(p-2)) <= c && c <= uchar(*p))
  ------------------
  |  |  153|      0|#define uchar(c)	((unsigned char)(c))
  ------------------
                    if (uchar(*(p-2)) <= c && c <= uchar(*p))
  ------------------
  |  |  153|      0|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (245:11): [True: 0, False: 0]
  |  Branch (245:33): [True: 0, False: 0]
  ------------------
  246|      0|	return sig;
  247|      0|    }
  248|  1.22M|    else if (uchar(*p) == c) return sig;
  ------------------
  |  |  153|  1.22M|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (248:14): [True: 8.63k, False: 1.21M]
  ------------------
  249|  1.24M|  }
  250|  1.21M|  return !sig;
  251|  1.22M|}
lib_string.c:match_class:
  217|  5.95M|{
  218|  5.95M|  if ((cl & 0xc0) == 0x40) {
  ------------------
  |  Branch (218:7): [True: 5.94M, False: 5.03k]
  ------------------
  219|  5.94M|    int t = match_class_map[(cl&0x1f)];
  220|  5.94M|    if (t) {
  ------------------
  |  Branch (220:9): [True: 5.93M, False: 15.2k]
  ------------------
  221|  5.93M|      t = lj_char_isa(c, t);
  ------------------
  |  |   24|  5.93M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  ------------------
  222|  5.93M|      return (cl & 0x20) ? t : !t;
  ------------------
  |  Branch (222:14): [True: 5.93M, False: 0]
  ------------------
  223|  5.93M|    }
  224|  15.2k|    if (cl == 'z') return c == 0;
  ------------------
  |  Branch (224:9): [True: 0, False: 15.2k]
  ------------------
  225|  15.2k|    if (cl == 'Z') return c != 0;
  ------------------
  |  Branch (225:9): [True: 0, False: 15.2k]
  ------------------
  226|  15.2k|  }
  227|  20.2k|  return (cl == c);
  228|  5.95M|}
lib_string.c:singlematch:
  254|  7.46M|{
  255|  7.46M|  switch (*p) {
  256|      9|  case '.': return 1;  /* matches any char */
  ------------------
  |  Branch (256:3): [True: 9, False: 7.46M]
  ------------------
  257|  5.93M|  case L_ESC: return match_class(c, uchar(*(p+1)));
  ------------------
  |  |  170|  5.93M|#define L_ESC		'%'
  ------------------
                case L_ESC: return match_class(c, uchar(*(p+1)));
  ------------------
  |  |  153|  5.93M|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (257:3): [True: 5.93M, False: 1.52M]
  ------------------
  258|  1.22M|  case '[': return matchbracketclass(c, p, ep-1);
  ------------------
  |  Branch (258:3): [True: 1.22M, False: 6.23M]
  ------------------
  259|   298k|  default:  return (uchar(*p) == c);
  ------------------
  |  |  153|   298k|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (259:3): [True: 298k, False: 7.16M]
  ------------------
  260|  7.46M|  }
  261|  7.46M|}
lib_string.c:max_expand:
  288|   884k|{
  289|   884k|  ptrdiff_t i = 0;  /* counts maximum expand for item */
  290|  4.50M|  while ((s+i)<ms->src_end && singlematch(uchar(*(s+i)), p, ep))
  ------------------
  |  |  153|  4.50M|#define uchar(c)	((unsigned char)(c))
  ------------------
  |  Branch (290:10): [True: 4.50M, False: 1.23k]
  |  Branch (290:31): [True: 3.62M, False: 882k]
  ------------------
  291|  3.62M|    i++;
  292|       |  /* keeps trying to match with the maximum repetitions */
  293|   897k|  while (i>=0) {
  ------------------
  |  Branch (293:10): [True: 897k, False: 116]
  ------------------
  294|   897k|    const char *res = match(ms, (s+i), ep+1);
  295|   897k|    if (res) return res;
  ------------------
  |  Branch (295:9): [True: 883k, False: 13.7k]
  ------------------
  296|  13.7k|    i--;  /* else didn't match; reduce 1 repetition to try again */
  297|  13.7k|  }
  298|    116|  return NULL;
  299|   884k|}
lib_string.c:push_captures:
  455|   884k|{
  456|   884k|  int i;
  457|   884k|  int nlevels = (ms->level == 0 && s) ? 1 : ms->level;
  ------------------
  |  Branch (457:18): [True: 988, False: 883k]
  |  Branch (457:36): [True: 41, False: 947]
  ------------------
  458|   884k|  luaL_checkstack(ms->L, nlevels, "too many captures");
  459|  1.76M|  for (i = 0; i < nlevels; i++)
  ------------------
  |  Branch (459:15): [True: 883k, False: 884k]
  ------------------
  460|   883k|    push_onecapture(ms, i, s, e);
  461|   884k|  return nlevels;  /* number of strings pushed */
  462|   884k|}
lib_string.c:push_onecapture:
  438|   883k|{
  439|   883k|  if (i >= ms->level) {
  ------------------
  |  Branch (439:7): [True: 41, False: 883k]
  ------------------
  440|     41|    if (i == 0)  /* ms->level == 0, too */
  ------------------
  |  Branch (440:9): [True: 41, False: 0]
  ------------------
  441|     41|      lua_pushlstring(ms->L, s, (size_t)(e - s));  /* add whole match */
  442|      0|    else
  443|      0|      lj_err_caller(ms->L, LJ_ERR_STRCAPI);
  444|   883k|  } else {
  445|   883k|    ptrdiff_t l = ms->capture[i].len;
  446|   883k|    if (l == CAP_UNFINISHED) lj_err_caller(ms->L, LJ_ERR_STRCAPU);
  ------------------
  |  |  155|   883k|#define CAP_UNFINISHED	(-1)
  ------------------
  |  Branch (446:9): [True: 4, False: 883k]
  ------------------
  447|   883k|    if (l == CAP_POSITION)
  ------------------
  |  |  156|   883k|#define CAP_POSITION	(-2)
  ------------------
  |  Branch (447:9): [True: 0, False: 883k]
  ------------------
  448|      0|      lua_pushinteger(ms->L, ms->capture[i].init - ms->src_init + 1);
  449|   883k|    else
  450|   883k|      lua_pushlstring(ms->L, ms->capture[i].init, (size_t)l);
  451|   883k|  }
  452|   883k|}
lib_string.c:lj_cf_string_match:
  523|     72|{
  524|     72|  return str_find_aux(L, 0);
  525|     72|}
lib_string.c:lj_cf_string_gmatch:
  552|  1.25k|{
  553|  1.25k|  lj_lib_checkstr(L, 1);
  554|  1.25k|  lj_lib_checkstr(L, 2);
  555|  1.25k|  L->top = L->base+3;
  556|  1.25k|  (L->top-1)->u64 = 0;
  557|  1.25k|  lj_lib_pushcc(L, lj_cf_string_gmatch_aux, FF_string_gmatch_aux, 3);
  558|  1.25k|  return 1;
  559|  1.25k|}
lib_string.c:lj_cf_string_gmatch_aux:
  528|  9.85k|{
  529|  9.85k|  const char *p = strVdata(lj_lib_upvalue(L, 2));
  ------------------
  |  |  318|  9.85k|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  19.7k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 9.85k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  530|  9.85k|  GCstr *str = strV(lj_lib_upvalue(L, 1));
  ------------------
  |  |  859|  9.85k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  9.85k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.85k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.85k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  531|  9.85k|  const char *s = strdata(str);
  ------------------
  |  |  316|  9.85k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  532|  9.85k|  TValue *tvpos = lj_lib_upvalue(L, 3);
  ------------------
  |  |   59|  9.85k|  (&gcval(L->base-2)->fn.c.upvalue[(n)-1])
  |  |  ------------------
  |  |  |  |  833|  9.85k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  9.85k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  9.85k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  533|  9.85k|  const char *src = s + tvpos->u32.lo;
  534|  9.85k|  MatchState ms;
  535|  9.85k|  ms.L = L;
  536|  9.85k|  ms.src_init = s;
  537|  9.85k|  ms.src_end = s + str->len;
  538|  44.8k|  for (; src <= ms.src_end; src++) {
  ------------------
  |  Branch (538:10): [True: 43.6k, False: 1.22k]
  ------------------
  539|  43.6k|    const char *e;
  540|  43.6k|    ms.level = ms.depth = 0;
  541|  43.6k|    if ((e = match(&ms, src, p)) != NULL) {
  ------------------
  |  Branch (541:9): [True: 8.63k, False: 35.0k]
  ------------------
  542|  8.63k|      int32_t pos = (int32_t)(e - s);
  543|  8.63k|      if (e == src) pos++;  /* Ensure progress for empty match. */
  ------------------
  |  Branch (543:11): [True: 0, False: 8.63k]
  ------------------
  544|  8.63k|      tvpos->u32.lo = (uint32_t)pos;
  545|  8.63k|      return push_captures(&ms, src, e);
  546|  8.63k|    }
  547|  43.6k|  }
  548|  1.22k|  return 0;  /* not found */
  549|  9.85k|}
lib_string.c:lj_cf_string_gsub:
  615|   925k|{
  616|   925k|  size_t srcl;
  617|   925k|  const char *src = luaL_checklstring(L, 1, &srcl);
  618|   925k|  const char *p = luaL_checkstring(L, 2);
  ------------------
  |  |  103|   925k|#define luaL_checkstring(L,n)	(luaL_checklstring(L, (n), NULL))
  ------------------
  619|   925k|  int  tr = lua_type(L, 3);
  620|   925k|  int max_s = luaL_optint(L, 4, (int)(srcl+1));
  ------------------
  |  |  106|   925k|#define luaL_optint(L,n,d)	((int)luaL_optinteger(L, (n), (d)))
  ------------------
  621|   925k|  int anchor = (*p == '^') ? (p++, 1) : 0;
  ------------------
  |  Branch (621:16): [True: 0, False: 925k]
  ------------------
  622|   925k|  int n = 0;
  623|   925k|  MatchState ms;
  624|   925k|  luaL_Buffer b;
  625|   925k|  if (!(tr == LUA_TNUMBER || tr == LUA_TSTRING ||
  ------------------
  |  |   78|  1.85M|#define LUA_TNUMBER		3
  ------------------
                if (!(tr == LUA_TNUMBER || tr == LUA_TSTRING ||
  ------------------
  |  |   79|  1.85M|#define LUA_TSTRING		4
  ------------------
  |  Branch (625:9): [True: 0, False: 925k]
  |  Branch (625:30): [True: 480, False: 925k]
  ------------------
  626|   925k|	tr == LUA_TFUNCTION || tr == LUA_TTABLE))
  ------------------
  |  |   81|  1.85M|#define LUA_TFUNCTION		6
  ------------------
              	tr == LUA_TFUNCTION || tr == LUA_TTABLE))
  ------------------
  |  |   80|      1|#define LUA_TTABLE		5
  ------------------
  |  Branch (626:2): [True: 925k, False: 1]
  |  Branch (626:25): [True: 0, False: 1]
  ------------------
  627|      1|    lj_err_arg(L, 3, LJ_ERR_NOSFT);
  628|   925k|  luaL_buffinit(L, &b);
  629|   925k|  ms.L = L;
  630|   925k|  ms.src_init = src;
  631|   925k|  ms.src_end = src+srcl;
  632|  2.91M|  while (n < max_s) {
  ------------------
  |  Branch (632:10): [True: 2.91M, False: 0]
  ------------------
  633|  2.91M|    const char *e;
  634|  2.91M|    ms.level = ms.depth = 0;
  635|  2.91M|    e = match(&ms, src, p);
  636|  2.91M|    if (e) {
  ------------------
  |  Branch (636:9): [True: 875k, False: 2.04M]
  ------------------
  637|   875k|      n++;
  638|   875k|      add_value(&ms, &b, src, e);
  639|   875k|    }
  640|  2.91M|    if (e && e>src) /* non empty match? */
  ------------------
  |  Branch (640:9): [True: 875k, False: 2.04M]
  |  Branch (640:14): [True: 875k, False: 0]
  ------------------
  641|   875k|      src = e;  /* skip it */
  642|  2.04M|    else if (src < ms.src_end)
  ------------------
  |  Branch (642:14): [True: 1.11M, False: 925k]
  ------------------
  643|  1.11M|      luaL_addchar(&b, *src++);
  ------------------
  |  |  143|  1.11M|  ((void)((B)->p < ((B)->buffer+LUAL_BUFFERSIZE) || luaL_prepbuffer(B)), \
  |  |  ------------------
  |  |  |  |  113|  1.11M|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (113:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (143:11): [True: 1.11M, False: 0]
  |  |  |  Branch (143:53): [True: 0, False: 0]
  |  |  ------------------
  |  |  144|  1.11M|   (*(B)->p++ = (char)(c)))
  ------------------
  644|   925k|    else
  645|   925k|      break;
  646|  1.99M|    if (anchor)
  ------------------
  |  Branch (646:9): [True: 0, False: 1.99M]
  ------------------
  647|      0|      break;
  648|  1.99M|  }
  649|   925k|  luaL_addlstring(&b, src, (size_t)(ms.src_end-src));
  650|   925k|  luaL_pushresult(&b);
  651|   925k|  lua_pushinteger(L, n);  /* number of substitutions */
  652|   925k|  return 2;
  653|   925k|}
lib_string.c:add_value:
  584|   875k|{
  585|   875k|  lua_State *L = ms->L;
  586|   875k|  switch (lua_type(L, 3)) {
  ------------------
  |  Branch (586:11): [True: 0, False: 875k]
  ------------------
  587|      0|    case LUA_TNUMBER:
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  |  Branch (587:5): [True: 0, False: 875k]
  ------------------
  588|    471|    case LUA_TSTRING: {
  ------------------
  |  |   79|    471|#define LUA_TSTRING		4
  ------------------
  |  Branch (588:5): [True: 471, False: 875k]
  ------------------
  589|    471|      add_s(ms, b, s, e);
  590|    471|      return;
  591|      0|    }
  592|   875k|    case LUA_TFUNCTION: {
  ------------------
  |  |   81|   875k|#define LUA_TFUNCTION		6
  ------------------
  |  Branch (592:5): [True: 875k, False: 471]
  ------------------
  593|   875k|      int n;
  594|   875k|      lua_pushvalue(L, 3);
  595|   875k|      n = push_captures(ms, s, e);
  596|   875k|      lua_call(L, n, 1);
  597|   875k|      break;
  598|      0|    }
  599|      0|    case LUA_TTABLE: {
  ------------------
  |  |   80|      0|#define LUA_TTABLE		5
  ------------------
  |  Branch (599:5): [True: 0, False: 875k]
  ------------------
  600|      0|      push_onecapture(ms, 0, s, e);
  601|      0|      lua_gettable(L, 3);
  602|      0|      break;
  603|      0|    }
  604|   875k|  }
  605|   875k|  if (!lua_toboolean(L, -1)) {  /* nil or false? */
  ------------------
  |  Branch (605:7): [True: 0, False: 875k]
  ------------------
  606|      0|    lua_pop(L, 1);
  ------------------
  |  |  256|      0|#define lua_pop(L,n)		lua_settop(L, -(n)-1)
  ------------------
  607|      0|    lua_pushlstring(L, s, (size_t)(e - s));  /* keep original text */
  608|   875k|  } else if (!lua_isstring(L, -1)) {
  ------------------
  |  Branch (608:14): [True: 0, False: 875k]
  ------------------
  609|      0|    lj_err_callerv(L, LJ_ERR_STRGSRV, luaL_typename(L, -1));
  ------------------
  |  |  110|      0|#define luaL_typename(L,i)	lua_typename(L, lua_type(L,(i)))
  ------------------
  610|      0|  }
  611|   875k|  luaL_addvalue(b);  /* add result to accumulator */
  612|   875k|}
lib_string.c:add_s:
  562|    471|{
  563|    471|  size_t l, i;
  564|    471|  const char *news = lua_tolstring(ms->L, 3, &l);
  565|  1.31k|  for (i = 0; i < l; i++) {
  ------------------
  |  Branch (565:15): [True: 844, False: 471]
  ------------------
  566|    844|    if (news[i] != L_ESC) {
  ------------------
  |  |  170|    844|#define L_ESC		'%'
  ------------------
  |  Branch (566:9): [True: 422, False: 422]
  ------------------
  567|    422|      luaL_addchar(b, news[i]);
  ------------------
  |  |  143|    422|  ((void)((B)->p < ((B)->buffer+LUAL_BUFFERSIZE) || luaL_prepbuffer(B)), \
  |  |  ------------------
  |  |  |  |  113|    422|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (113:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (143:11): [True: 422, False: 0]
  |  |  |  Branch (143:53): [True: 0, False: 0]
  |  |  ------------------
  |  |  144|    422|   (*(B)->p++ = (char)(c)))
  ------------------
  568|    422|    } else {
  569|    422|      i++;  /* skip ESC */
  570|    422|      if (!lj_char_isdigit(uchar(news[i]))) {
  ------------------
  |  |   28|    422|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    422|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (570:11): [True: 422, False: 0]
  ------------------
  571|    422|	luaL_addchar(b, news[i]);
  ------------------
  |  |  143|    422|  ((void)((B)->p < ((B)->buffer+LUAL_BUFFERSIZE) || luaL_prepbuffer(B)), \
  |  |  ------------------
  |  |  |  |  113|    422|#define LUAL_BUFFERSIZE	(BUFSIZ > 16384 ? 8192 : BUFSIZ)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (113:26): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (143:11): [True: 422, False: 0]
  |  |  |  Branch (143:53): [True: 0, False: 0]
  |  |  ------------------
  |  |  144|    422|   (*(B)->p++ = (char)(c)))
  ------------------
  572|    422|      } else if (news[i] == '0') {
  ------------------
  |  Branch (572:18): [True: 0, False: 0]
  ------------------
  573|      0|	luaL_addlstring(b, s, (size_t)(e - s));
  574|      0|      } else {
  575|      0|	push_onecapture(ms, news[i] - '1', s, e);
  576|      0|	luaL_addvalue(b);  /* add capture to accumulated result */
  577|      0|      }
  578|    422|    }
  579|    844|  }
  580|    471|}
lib_string.c:lj_cf_string_format:
  658|   951k|{
  659|   951k|  int retry = 0;
  660|   951k|  SBuf *sb;
  661|   951k|  do {
  662|   951k|    sb = lj_buf_tmp_(L);
  663|   951k|    retry = lj_strfmt_putarg(L, sb, 1, -retry);
  664|   951k|  } while (retry > 0);
  ------------------
  |  Branch (664:12): [True: 0, False: 951k]
  ------------------
  665|   951k|  setstrV(L, L->top-1, lj_buf_str(L, sb));
  666|   951k|  lj_gc_check(L);
  ------------------
  |  |   66|   951k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   951k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1.29k, False: 950k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   951k|      lj_gc_step(L); }
  ------------------
  667|   951k|  return 1;
  668|   951k|}

luaopen_table:
  317|  13.6k|{
  318|  13.6k|  LJ_LIB_REG(L, LUA_TABLIBNAME, table);
  ------------------
  |  |   92|  13.6k|  lj_lib_register(L, regname, lj_lib_init_##name, lj_lib_cf_##name)
  ------------------
  319|       |#if LJ_52
  320|       |  lua_getglobal(L, "unpack");
  321|       |  lua_setfield(L, -2, "unpack");
  322|       |#endif
  323|  13.6k|  lj_lib_prereg(L, LUA_TABLIBNAME ".new", luaopen_table_new, tabV(L->top-1));
  ------------------
  |  |   16|  13.6k|#define LUA_TABLIBNAME	"table"
  ------------------
                lj_lib_prereg(L, LUA_TABLIBNAME ".new", luaopen_table_new, tabV(L->top-1));
  ------------------
  |  |  864|  13.6k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  324|  13.6k|  lj_lib_prereg(L, LUA_TABLIBNAME ".clear", luaopen_table_clear, tabV(L->top-1));
  ------------------
  |  |   16|  13.6k|#define LUA_TABLIBNAME	"table"
  ------------------
                lj_lib_prereg(L, LUA_TABLIBNAME ".clear", luaopen_table_clear, tabV(L->top-1));
  ------------------
  |  |  864|  13.6k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  325|      0|  return 1;
  326|  13.6k|}
lib_table.c:lj_cf_table_insert:
   80|      2|{
   81|      2|  GCtab *t = lj_lib_checktab(L, 1);
   82|      2|  int32_t n, i = (int32_t)lj_tab_len(t) + 1;
   83|      2|  int nargs = (int)((char *)L->top - (char *)L->base);
   84|      2|  if (nargs != 2*sizeof(TValue)) {
  ------------------
  |  Branch (84:7): [True: 0, False: 2]
  ------------------
   85|      0|    if (nargs != 3*sizeof(TValue))
  ------------------
  |  Branch (85:9): [True: 0, False: 0]
  ------------------
   86|      0|      lj_err_caller(L, LJ_ERR_TABINS);
   87|       |    /* NOBARRIER: This just moves existing elements around. */
   88|      0|    for (n = lj_lib_checkint(L, 2); i > n; i--) {
  ------------------
  |  Branch (88:37): [True: 0, False: 0]
  ------------------
   89|       |      /* The set may invalidate the get pointer, so need to do it first! */
   90|      0|      TValue *dst = lj_tab_setint(L, t, i);
  ------------------
  |  |   84|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   91|      0|      cTValue *src = lj_tab_getint(t, i-1);
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|      0|      if (src) {
  ------------------
  |  Branch (92:11): [True: 0, False: 0]
  ------------------
   93|      0|	copyTV(L, dst, src);
   94|      0|      } else {
   95|      0|	setnilV(dst);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   96|      0|      }
   97|      0|    }
   98|      0|    i = n;
   99|      0|  }
  100|      2|  {
  101|      2|    TValue *dst = lj_tab_setint(L, t, i);
  ------------------
  |  |   84|      2|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|      2|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 1, False: 1]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|      1|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      1|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      1|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  102|      2|    copyTV(L, dst, L->top-1);  /* Set new value. */
  103|      2|    lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|      2|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|      4|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      4|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      2|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      2|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      2|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      2|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      2|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      2|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|      2|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  104|      2|  }
  105|      0|  return 0;
  106|      2|}
lib_table.c:lj_cf_table_concat:
  153|     33|{
  154|     33|  GCtab *t = lj_lib_checktab(L, 1);
  155|     33|  GCstr *sep = lj_lib_optstr(L, 2);
  156|     33|  int32_t i = lj_lib_optint(L, 3, 1);
  157|     33|  int32_t e = (L->base+3 < L->top && !tvisnil(L->base+3)) ?
  ------------------
  |  |  782|     10|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (157:16): [True: 10, False: 23]
  |  Branch (157:38): [True: 8, False: 2]
  ------------------
  158|     25|	      lj_lib_checkint(L, 4) : (int32_t)lj_tab_len(t);
  159|     33|  SBuf *sb = lj_buf_tmp_(L);
  160|     33|  SBuf *sbx = lj_buf_puttab(sb, t, sep, i, e);
  161|     33|  if (LJ_UNLIKELY(!sbx)) {  /* Error: bad element type. */
  ------------------
  |  |  146|     33|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1, False: 32]
  |  |  ------------------
  ------------------
  162|      1|    int32_t idx = (int32_t)(intptr_t)sb->w;
  163|      1|    cTValue *o = lj_tab_getint(t, idx);
  ------------------
  |  |   82|      1|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      1|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      1|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      1|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      1|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  164|      1|    lj_err_callerv(L, LJ_ERR_TABCAT,
  165|      1|		   lj_obj_itypename[o ? itypemap(o) : ~LJ_TNIL], idx);
  ------------------
  |  |  828|      1|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  ------------------
  |  |  |  |  802|      1|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      1|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  280|      1|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      1|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (802:23): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  ------------------
  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  ------------------
  |  |  |  |  781|      1|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  ------------------
              		   lj_obj_itypename[o ? itypemap(o) : ~LJ_TNIL], idx);
  ------------------
  |  |  260|      0|#define LJ_TNIL			(~0u)
  ------------------
  |  Branch (165:23): [True: 1, False: 0]
  ------------------
  166|      1|  }
  167|     32|  setstrV(L, L->top-1, lj_buf_str(L, sbx));
  168|     32|  lj_gc_check(L);
  ------------------
  |  |   66|     32|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|     32|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 32]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|     32|      lj_gc_step(L); }
  ------------------
  169|     32|  return 1;
  170|     33|}

lj_alloc_create:
 1392|  13.6k|{
 1393|  13.6k|  size_t tsize = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|  13.6k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1394|       |#if LUAJIT_USE_ASAN
 1395|       |  tsize -= TOTAL_REDZONE_SIZE;
 1396|       |#endif
 1397|  13.6k|  char *tbase;
 1398|  13.6k|  INIT_MMAP();
  ------------------
  |  |  527|  13.6k|#define INIT_MMAP()		((void)0)
  ------------------
 1399|  13.6k|  UNUSED(rs);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1400|  13.6k|  tbase = (char *)(CALL_MMAP(rs, tsize));
  ------------------
  |  |  438|  13.6k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1401|  13.6k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  13.6k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  13.6k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  13.6k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1401:7): [True: 13.6k, False: 0]
  ------------------
 1402|  13.6k|    size_t msize = pad_request(sizeof(struct malloc_state));
  ------------------
  |  |  587|  13.6k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  13.6k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  13.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1403|  13.6k|    mchunkptr mn;
 1404|       |#if LUAJIT_USE_ASAN
 1405|       |    mchunkptr msp = (mchunkptr)(tbase + align_offset(chunk2mem(tbase) - REDZONE_SIZE));
 1406|       |    mstate m = (mstate)(chunk2mem(msp) - REDZONE_SIZE);
 1407|       |#else
 1408|  13.6k|    mchunkptr msp = align_as_chunk(tbase);
  ------------------
  |  |  579|  13.6k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  13.6k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  13.6k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1409|  13.6k|    mstate m = (mstate)(chunk2mem(msp));
  ------------------
  |  |  575|  13.6k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  13.6k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  13.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|  13.6k|#endif
 1411|  13.6k|    memset(m, 0, msize);
 1412|  13.6k|    msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  595|  13.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  msp->head = (msize|PINUSE_BIT|CINUSE_BIT);
  ------------------
  |  |  596|  13.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  13.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1413|  13.6k|    m->seg.base = tbase;
 1414|  13.6k|    m->seg.size = tsize;
 1415|  13.6k|    m->release_checks = MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  13.6k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1416|  13.6k|    init_bins(m);
 1417|       |#if LUAJIT_USE_ASAN
 1418|       |    mn = next_chunk((mchunkptr)((char *)(m) - TWO_SIZE_T_SIZES));
 1419|       |#else
 1420|  13.6k|    mn = next_chunk(mem2chunk(m));
  ------------------
  |  |  615|  13.6k|#define next_chunk(p)	((mchunkptr)(((char *)(p)) + ((p)->head & ~INUSE_BITS)))
  |  |  ------------------
  |  |  |  |  597|  13.6k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  13.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  13.6k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  13.6k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1421|  13.6k|#endif
 1422|  13.6k|    init_top(m, mn, (size_t)((tbase + tsize) - (char *)mn) - TOP_FOOT_SIZE);
  ------------------
  |  |  754|  13.6k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  13.6k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  13.6k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  13.6k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  13.6k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  13.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  13.6k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  13.6k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  13.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  13.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  13.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1423|  13.6k|    return m;
 1424|  13.6k|  }
 1425|      0|  return NULL;
 1426|  13.6k|}
lj_alloc_setprng:
 1429|  13.6k|{
 1430|  13.6k|  mstate ms = (mstate)msp;
 1431|  13.6k|  ms->prng = rs;
 1432|  13.6k|}
lj_alloc_destroy:
 1435|  13.6k|{
 1436|  13.6k|  mstate ms = (mstate)msp;
 1437|  13.6k|  msegmentptr sp = &ms->seg;
 1438|  31.1k|  while (sp != 0) {
  ------------------
  |  Branch (1438:10): [True: 17.4k, False: 13.6k]
  ------------------
 1439|  17.4k|    char *base = sp->base;
 1440|  17.4k|    size_t size = sp->size;
 1441|  17.4k|    sp = sp->next;
 1442|       |#if LUAJIT_USE_ASAN
 1443|       |    ASAN_UNPOISON_MEMORY_REGION(base, size);
 1444|       |#endif
 1445|  17.4k|    CALL_MUNMAP(base, size);
 1446|  17.4k|  }
 1447|  13.6k|}
lj_alloc_f:
 1711|  1.60G|{
 1712|  1.60G|  (void)osize;
 1713|  1.60G|  if (nsize == 0) {
  ------------------
  |  Branch (1713:7): [True: 803M, False: 802M]
  ------------------
 1714|   803M|    return lj_alloc_free(msp, ptr);
 1715|   803M|  } else if (ptr == NULL) {
  ------------------
  |  Branch (1715:14): [True: 801M, False: 362k]
  ------------------
 1716|   801M|    return lj_alloc_malloc(msp, nsize);
 1717|   801M|  } else {
 1718|   362k|    return lj_alloc_realloc(msp, ptr, nsize);
 1719|   362k|  }
 1720|  1.60G|}
lj_alloc.c:mmap_probe:
  334|  84.9k|{
  335|       |  /* Hint for next allocation. Doesn't need to be thread-safe. */
  336|  84.9k|  static uintptr_t hint_addr = 0;
  337|  84.9k|  int olderr = errno;
  338|  84.9k|  int retry;
  339|       |#if LUAJIT_USE_ASAN
  340|       |  size_t mem_size = size;
  341|       |  size = (size_t)align_up((void *)size, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
  342|       |#endif
  343|  84.9k|  for (retry = 0; retry < LJ_ALLOC_MMAP_PROBE_MAX; retry++) {
  ------------------
  |  |  228|  84.9k|#define LJ_ALLOC_MMAP_PROBE_MAX		30
  ------------------
  |  Branch (343:19): [True: 84.9k, False: 0]
  ------------------
  344|  84.9k|    void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  214|  84.9k|#define MMAP_PROT		(PROT_READ|PROT_WRITE)
  ------------------
                  void *p = mmap((void *)hint_addr, size, MMAP_PROT, MMAP_FLAGS_PROBE, -1, 0);
  ------------------
  |  |  225|  84.9k|#define MMAP_FLAGS_PROBE	MMAP_FLAGS
  |  |  ------------------
  |  |  |  |  218|  84.9k|#define MMAP_FLAGS		(MAP_PRIVATE|MAP_ANONYMOUS)
  |  |  ------------------
  ------------------
  345|  84.9k|    uintptr_t addr = (uintptr_t)p;
  346|  84.9k|    if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  102|  84.9k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                  if ((addr >> LJ_ALLOC_MBITS) == 0 && addr >= LJ_ALLOC_MMAP_PROBE_LOWER &&
  ------------------
  |  |  231|   169k|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (346:9): [True: 84.9k, False: 0]
  |  Branch (346:42): [True: 84.9k, False: 0]
  ------------------
  347|  84.9k|	((addr + size) >> LJ_ALLOC_MBITS) == 0) {
  ------------------
  |  |  102|  84.9k|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (347:2): [True: 84.9k, False: 0]
  ------------------
  348|       |      /* We got a suitable address. Bump the hint address. */
  349|  84.9k|      hint_addr = addr + size;
  350|  84.9k|      errno = olderr;
  351|       |#if LUAJIT_USE_ASAN
  352|       |      p = mark_memory_region(p, mem_size, size);
  353|       |#endif
  354|  84.9k|      return p;
  355|  84.9k|    }
  356|      0|    if (p != MFAIL) {
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (356:9): [True: 0, False: 0]
  ------------------
  357|      0|      munmap(p, size);
  358|      0|    } else if (errno == ENOMEM) {
  ------------------
  |  Branch (358:16): [True: 0, False: 0]
  ------------------
  359|      0|      return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  360|      0|    }
  361|      0|    if (hint_addr) {
  ------------------
  |  Branch (361:9): [True: 0, False: 0]
  ------------------
  362|       |      /* First, try linear probing. */
  363|      0|      if (retry < LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (363:11): [True: 0, False: 0]
  ------------------
  364|      0|	hint_addr += 0x1000000;
  365|      0|	if (((hint_addr + size) >> LJ_ALLOC_MBITS) != 0)
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
  |  Branch (365:6): [True: 0, False: 0]
  ------------------
  366|      0|	  hint_addr = 0;
  367|      0|	continue;
  368|      0|      } else if (retry == LJ_ALLOC_MMAP_PROBE_LINEAR) {
  ------------------
  |  |  229|      0|#define LJ_ALLOC_MMAP_PROBE_LINEAR	5
  ------------------
  |  Branch (368:18): [True: 0, False: 0]
  ------------------
  369|       |	/* Next, try a no-hint probe to get back an ASLR address. */
  370|      0|	hint_addr = 0;
  371|      0|	continue;
  372|      0|      }
  373|      0|    }
  374|       |    /* Finally, try pseudo-random probing. */
  375|      0|    do {
  376|      0|      hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  102|      0|#define LJ_ALLOC_MBITS		47	/* 128 TB in LJ_GC64 mode. */
  ------------------
                    hint_addr = lj_prng_u64(rs) & (((uintptr_t)1<<LJ_ALLOC_MBITS)-LJ_PAGESIZE);
  ------------------
  |  |  648|      0|#define LJ_PAGESIZE		4096
  ------------------
  377|      0|    } while (hint_addr < LJ_ALLOC_MMAP_PROBE_LOWER);
  ------------------
  |  |  231|      0|#define LJ_ALLOC_MMAP_PROBE_LOWER	((uintptr_t)0x4000)
  ------------------
  |  Branch (377:14): [True: 0, False: 0]
  ------------------
  378|      0|  }
  379|      0|  errno = olderr;
  380|      0|  return MFAIL;
  ------------------
  |  |   71|      0|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  381|  84.9k|}
lj_alloc.c:init_bins:
 1051|  13.6k|{
 1052|       |  /* Establish circular links for smallbins */
 1053|  13.6k|  bindex_t i;
 1054|   451k|  for (i = 0; i < NSMALLBINS; i++) {
  ------------------
  |  |  675|   451k|#define NSMALLBINS		(32U)
  ------------------
  |  Branch (1054:15): [True: 438k, False: 13.6k]
  ------------------
 1055|   438k|    sbinptr bin = smallbin_at(m,i);
  ------------------
  |  |  764|   438k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1056|   438k|    bin->fd = bin->bk = bin;
 1057|   438k|  }
 1058|  13.6k|}
lj_alloc.c:init_top:
 1030|  30.6k|{
 1031|       |  /* Ensure alignment */
 1032|  30.6k|  void *t = chunk2mem(p);
  ------------------
  |  |  575|  30.6k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  30.6k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  30.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1033|       |#if LUAJIT_USE_ASAN
 1034|       |  t -= REDZONE_SIZE;
 1035|       |#endif
 1036|  30.6k|  size_t offset = align_offset(t);
  ------------------
  |  |   66|  30.6k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  30.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  30.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 30.6k, False: 0]
  |  |  ------------------
  |  |   67|  30.6k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1037|       |
 1038|  30.6k|  p = (mchunkptr)((char *)p + offset);
 1039|  30.6k|  psize -= offset;
 1040|       |
 1041|  30.6k|  m->top = p;
 1042|  30.6k|  m->topsize = psize;
 1043|  30.6k|  p->head = psize | PINUSE_BIT;
  ------------------
  |  |  595|  30.6k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1044|       |  /* set size of fake trailing chunk holding overhead space only once */
 1045|  30.6k|  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  611|  30.6k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
  ------------------
  |  |  754|  30.6k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  30.6k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  30.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  30.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  30.6k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  30.6k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  30.6k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  30.6k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  30.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  30.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  30.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  30.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  30.6k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  30.6k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  30.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  30.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  30.6k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  30.6k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  30.6k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1046|  30.6k|  m->trim_check = DEFAULT_TRIM_THRESHOLD; /* reset on each update */
  ------------------
  |  |   42|  30.6k|#define DEFAULT_TRIM_THRESHOLD	((size_t)2U * (size_t)1024U * (size_t)1024U)
  ------------------
 1047|  30.6k|}
lj_alloc.c:CALL_MUNMAP:
  472|  30.8k|{
  473|  30.8k|  int olderr = errno;
  474|       |#if LUAJIT_USE_ASAN
  475|       |  memmove(ptr, ptr, size); /* check that memory is not poisoned */
  476|       |  size = asan_get_size(ptr, POISON_SIZE);
  477|       |  ptr -= REDZONE_SIZE;
  478|       |#endif
  479|  30.8k|  int ret = munmap(ptr, size);
  480|       |#if LUAJIT_USE_ASAN
  481|       |  if (ret == 0) {
  482|       |    ASAN_POISON_MEMORY_REGION(ptr, size);
  483|       |  }
  484|       |#endif
  485|  30.8k|  errno = olderr;
  486|  30.8k|  return ret;
  487|  30.8k|}
lj_alloc.c:lj_alloc_free:
 1560|   804M|{
 1561|       |#if LUAJIT_USE_ASAN
 1562|       |  if (ptr != 0) {    
 1563|       |    size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1564|       |    size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1565|       |
 1566|       |    memmove(ptr, ptr, mem_size);
 1567|       |    ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1568|       |  }
 1569|       |  return NULL;
 1570|       |#else
 1571|   804M|  if (ptr != 0) {
  ------------------
  |  Branch (1571:7): [True: 802M, False: 2.07M]
  ------------------
 1572|   802M|    mchunkptr p = mem2chunk(ptr);
  ------------------
  |  |  576|   802M|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   802M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   802M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1573|   802M|    mstate fm = (mstate)msp;
 1574|   802M|    size_t psize = chunksize(p);
  ------------------
  |  |  605|   802M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   802M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   802M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   802M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   802M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   802M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1575|   802M|    mchunkptr next = chunk_plus_offset(p, psize);
  ------------------
  |  |  611|   802M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1576|   802M|    if (!pinuse(p)) {
  ------------------
  |  |  604|   802M|#define pinuse(p)		((p)->head & PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|   802M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   802M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1576:9): [True: 291M, False: 510M]
  ------------------
 1577|   291M|      size_t prevsize = p->prev_foot;
 1578|   291M|      if ((prevsize & IS_DIRECT_BIT) != 0) {
  ------------------
  |  |   74|   291M|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   291M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  |  Branch (1578:11): [True: 12.7k, False: 291M]
  ------------------
 1579|  12.7k|	prevsize &= ~IS_DIRECT_BIT;
  ------------------
  |  |   74|  12.7k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1580|  12.7k|	psize += prevsize + DIRECT_FOOT_PAD;
  ------------------
  |  |  563|  12.7k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  12.7k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1581|  12.7k|	CALL_MUNMAP((char *)p - prevsize, psize);
 1582|  12.7k|	return NULL;
 1583|   291M|      } else {
 1584|   291M|	mchunkptr prev = chunk_minus_offset(p, prevsize);
  ------------------
  |  |  612|   291M|#define chunk_minus_offset(p, s)	((mchunkptr)(((char *)(p)) - (s)))
  ------------------
 1585|   291M|	psize += prevsize;
 1586|   291M|	p = prev;
 1587|       |	/* consolidate backward */
 1588|   291M|	if (p != fm->dv) {
  ------------------
  |  Branch (1588:6): [True: 291M, False: 321k]
  ------------------
 1589|   291M|	  unlink_chunk(fm, p, prevsize);
  ------------------
  |  |  974|   291M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|   291M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|   291M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|   291M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 242M, False: 48.9M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|   242M|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|   242M|  mchunkptr F = P->fd;\
  |  |  |  |  846|   242M|  mchunkptr B = P->bk;\
  |  |  |  |  847|   242M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|   242M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|   242M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|   242M|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 2.27M, False: 239M]
  |  |  |  |  ------------------
  |  |  |  |  849|  2.27M|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|  2.27M|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  2.27M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|   239M|  } else {\
  |  |  |  |  851|   239M|    F->bk = B;\
  |  |  |  |  852|   239M|    B->fd = F;\
  |  |  |  |  853|   239M|  }\
  |  |  |  |  854|   242M|}
  |  |  ------------------
  |  |  975|   242M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|  48.9M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|  48.9M|  tchunkptr XP = X->parent;\
  |  |  |  |  923|  48.9M|  tchunkptr R;\
  |  |  |  |  924|  48.9M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 42.4M, False: 6.46M]
  |  |  |  |  ------------------
  |  |  |  |  925|  42.4M|    tchunkptr F = X->fd;\
  |  |  |  |  926|  42.4M|    R = X->bk;\
  |  |  |  |  927|  42.4M|    F->bk = R;\
  |  |  |  |  928|  42.4M|    R->fd = F;\
  |  |  |  |  929|  42.4M|  } else {\
  |  |  |  |  930|  6.46M|    tchunkptr *RP;\
  |  |  |  |  931|  6.46M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 1.69M, False: 4.76M]
  |  |  |  |  ------------------
  |  |  |  |  932|  6.46M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 937k, False: 3.82M]
  |  |  |  |  ------------------
  |  |  |  |  933|  2.63M|      tchunkptr *CP;\
  |  |  |  |  934|  3.83M|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 701k, False: 3.13M]
  |  |  |  |  ------------------
  |  |  |  |  935|  3.83M|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 494k, False: 2.63M]
  |  |  |  |  ------------------
  |  |  |  |  936|  1.19M|	R = *(RP = CP);\
  |  |  |  |  937|  1.19M|      }\
  |  |  |  |  938|  2.63M|      *RP = 0;\
  |  |  |  |  939|  2.63M|    }\
  |  |  |  |  940|  6.46M|  }\
  |  |  |  |  941|  48.9M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 11.3M, False: 37.5M]
  |  |  |  |  ------------------
  |  |  |  |  942|  11.3M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  11.3M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|  11.3M|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 2.42M, False: 8.90M]
  |  |  |  |  ------------------
  |  |  |  |  944|  2.42M|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 701k, False: 1.72M]
  |  |  |  |  ------------------
  |  |  |  |  945|  2.42M|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|   701k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   701k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|  8.90M|    } else {\
  |  |  |  |  947|  8.90M|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 4.56M, False: 4.34M]
  |  |  |  |  ------------------
  |  |  |  |  948|  8.90M|	XP->child[0] = R;\
  |  |  |  |  949|  8.90M|      else \
  |  |  |  |  950|  8.90M|	XP->child[1] = R;\
  |  |  |  |  951|  8.90M|    }\
  |  |  |  |  952|  11.3M|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 7.50M, False: 3.82M]
  |  |  |  |  ------------------
  |  |  |  |  953|  7.50M|      tchunkptr C0, C1;\
  |  |  |  |  954|  7.50M|      R->parent = XP;\
  |  |  |  |  955|  7.50M|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 3.90M, False: 3.60M]
  |  |  |  |  ------------------
  |  |  |  |  956|  3.90M|	R->child[0] = C0;\
  |  |  |  |  957|  3.90M|	C0->parent = R;\
  |  |  |  |  958|  3.90M|      }\
  |  |  |  |  959|  7.50M|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 3.19M, False: 4.31M]
  |  |  |  |  ------------------
  |  |  |  |  960|  3.19M|	R->child[1] = C1;\
  |  |  |  |  961|  3.19M|	C1->parent = R;\
  |  |  |  |  962|  3.19M|      }\
  |  |  |  |  963|  7.50M|    }\
  |  |  |  |  964|  11.3M|  }\
  |  |  |  |  965|  48.9M|}
  |  |  ------------------
  ------------------
 1590|   291M|	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|   321k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|   321k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   321k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|   321k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   321k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	} else if ((next->head & INUSE_BITS) == INUSE_BITS) {
  ------------------
  |  |  597|   321k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|   321k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   321k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|   321k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   321k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1590:13): [True: 173k, False: 148k]
  ------------------
 1591|   173k|	  fm->dvsize = psize;
 1592|   173k|	  set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|   173k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|   173k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   173k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   173k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|   173k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   173k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   173k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|   173k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1593|   173k|	  return NULL;
 1594|   173k|	}
 1595|   291M|      }
 1596|   291M|    }
 1597|   802M|    if (!cinuse(next)) {  /* consolidate forward */
  ------------------
  |  |  603|   802M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|   802M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   802M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1597:9): [True: 301M, False: 500M]
  ------------------
 1598|   301M|      if (next == fm->top) {
  ------------------
  |  Branch (1598:11): [True: 964k, False: 300M]
  ------------------
 1599|   964k|	size_t tsize = fm->topsize += psize;
 1600|   964k|	fm->top = p;
 1601|   964k|	p->head = tsize | PINUSE_BIT;
  ------------------
  |  |  595|   964k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   964k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1602|   964k|	if (p == fm->dv) {
  ------------------
  |  Branch (1602:6): [True: 8.22k, False: 956k]
  ------------------
 1603|  8.22k|	  fm->dv = 0;
 1604|  8.22k|	  fm->dvsize = 0;
 1605|  8.22k|	}
 1606|   964k|	if (tsize > fm->trim_check)
  ------------------
  |  Branch (1606:6): [True: 158, False: 964k]
  ------------------
 1607|    158|	  alloc_trim(fm, 0);
 1608|   964k|	return NULL;
 1609|   300M|      } else if (next == fm->dv) {
  ------------------
  |  Branch (1609:18): [True: 1.05M, False: 299M]
  ------------------
 1610|  1.05M|	size_t dsize = fm->dvsize += psize;
 1611|  1.05M|	fm->dv = p;
 1612|  1.05M|	set_size_and_pinuse_of_free_chunk(p, dsize);
  ------------------
  |  |  627|  1.05M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  1.05M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.05M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  1.05M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1613|  1.05M|	return NULL;
 1614|   299M|      } else {
 1615|   299M|	size_t nsize = chunksize(next);
  ------------------
  |  |  605|   299M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   299M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   299M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   299M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   299M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   299M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1616|   299M|	psize += nsize;
 1617|   299M|	unlink_chunk(fm, next, nsize);
  ------------------
  |  |  974|   299M|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|   299M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|   299M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|   299M|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 244M, False: 55.2M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|   244M|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|   244M|  mchunkptr F = P->fd;\
  |  |  |  |  846|   244M|  mchunkptr B = P->bk;\
  |  |  |  |  847|   244M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|   244M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|   244M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|   244M|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 3.89M, False: 240M]
  |  |  |  |  ------------------
  |  |  |  |  849|  3.89M|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|  3.89M|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  3.89M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|   240M|  } else {\
  |  |  |  |  851|   240M|    F->bk = B;\
  |  |  |  |  852|   240M|    B->fd = F;\
  |  |  |  |  853|   240M|  }\
  |  |  |  |  854|   244M|}
  |  |  ------------------
  |  |  975|   244M|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|  55.2M|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|  55.2M|  tchunkptr XP = X->parent;\
  |  |  |  |  923|  55.2M|  tchunkptr R;\
  |  |  |  |  924|  55.2M|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 42.8M, False: 12.4M]
  |  |  |  |  ------------------
  |  |  |  |  925|  42.8M|    tchunkptr F = X->fd;\
  |  |  |  |  926|  42.8M|    R = X->bk;\
  |  |  |  |  927|  42.8M|    F->bk = R;\
  |  |  |  |  928|  42.8M|    R->fd = F;\
  |  |  |  |  929|  42.8M|  } else {\
  |  |  |  |  930|  12.4M|    tchunkptr *RP;\
  |  |  |  |  931|  12.4M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 1.72M, False: 10.6M]
  |  |  |  |  ------------------
  |  |  |  |  932|  12.4M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 965k, False: 9.72M]
  |  |  |  |  ------------------
  |  |  |  |  933|  2.69M|      tchunkptr *CP;\
  |  |  |  |  934|  3.89M|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 701k, False: 3.19M]
  |  |  |  |  ------------------
  |  |  |  |  935|  3.89M|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 496k, False: 2.69M]
  |  |  |  |  ------------------
  |  |  |  |  936|  1.19M|	R = *(RP = CP);\
  |  |  |  |  937|  1.19M|      }\
  |  |  |  |  938|  2.69M|      *RP = 0;\
  |  |  |  |  939|  2.69M|    }\
  |  |  |  |  940|  12.4M|  }\
  |  |  |  |  941|  55.2M|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 17.2M, False: 38.0M]
  |  |  |  |  ------------------
  |  |  |  |  942|  17.2M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  17.2M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|  17.2M|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 5.74M, False: 11.5M]
  |  |  |  |  ------------------
  |  |  |  |  944|  5.74M|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 3.99M, False: 1.74M]
  |  |  |  |  ------------------
  |  |  |  |  945|  5.74M|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|  3.99M|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  3.99M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|  11.5M|    } else {\
  |  |  |  |  947|  11.5M|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 5.93M, False: 5.59M]
  |  |  |  |  ------------------
  |  |  |  |  948|  11.5M|	XP->child[0] = R;\
  |  |  |  |  949|  11.5M|      else \
  |  |  |  |  950|  11.5M|	XP->child[1] = R;\
  |  |  |  |  951|  11.5M|    }\
  |  |  |  |  952|  17.2M|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 7.54M, False: 9.72M]
  |  |  |  |  ------------------
  |  |  |  |  953|  7.54M|      tchunkptr C0, C1;\
  |  |  |  |  954|  7.54M|      R->parent = XP;\
  |  |  |  |  955|  7.54M|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 3.89M, False: 3.65M]
  |  |  |  |  ------------------
  |  |  |  |  956|  3.89M|	R->child[0] = C0;\
  |  |  |  |  957|  3.89M|	C0->parent = R;\
  |  |  |  |  958|  3.89M|      }\
  |  |  |  |  959|  7.54M|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 3.18M, False: 4.36M]
  |  |  |  |  ------------------
  |  |  |  |  960|  3.18M|	R->child[1] = C1;\
  |  |  |  |  961|  3.18M|	C1->parent = R;\
  |  |  |  |  962|  3.18M|      }\
  |  |  |  |  963|  7.54M|    }\
  |  |  |  |  964|  17.2M|  }\
  |  |  |  |  965|  55.2M|}
  |  |  ------------------
  ------------------
 1618|   299M|	set_size_and_pinuse_of_free_chunk(p, psize);
  ------------------
  |  |  627|   299M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|   299M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   299M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|   299M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1619|   299M|	if (p == fm->dv) {
  ------------------
  |  Branch (1619:6): [True: 139k, False: 299M]
  ------------------
 1620|   139k|	  fm->dvsize = psize;
 1621|   139k|	  return NULL;
 1622|   139k|	}
 1623|   299M|      }
 1624|   500M|    } else {
 1625|   500M|      set_free_with_pinuse(p, psize, next);
  ------------------
  |  |  631|   500M|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|   500M|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   500M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   500M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|   500M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   500M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   500M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|   500M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1626|   500M|    }
 1627|       |
 1628|   799M|    if (is_small(psize)) {
  ------------------
  |  |  758|   799M|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  677|   799M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  675|   799M|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (758:22): [True: 667M, False: 132M]
  |  |  ------------------
  ------------------
 1629|   667M|      insert_small_chunk(fm, p, psize);
  ------------------
  |  |  829|   667M|#define insert_small_chunk(M, P, S) {\
  |  |  830|   667M|  bindex_t I = small_index(S);\
  |  |  ------------------
  |  |  |  |  759|   667M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|   667M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  831|   667M|  mchunkptr B = smallbin_at(M, I);\
  |  |  ------------------
  |  |  |  |  764|   667M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  ------------------
  |  |  832|   667M|  mchunkptr F = B;\
  |  |  833|   667M|  if (!smallmap_is_marked(M, I))\
  |  |  ------------------
  |  |  |  |  803|   667M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   667M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (833:7): [True: 16.5M, False: 651M]
  |  |  ------------------
  |  |  834|   667M|    mark_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  801|  16.5M|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  16.5M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  835|   667M|  else\
  |  |  836|   667M|    F = B->fd;\
  |  |  837|   667M|  B->fd = P;\
  |  |  838|   667M|  F->bk = P;\
  |  |  839|   667M|  P->fd = F;\
  |  |  840|   667M|  P->bk = B;\
  |  |  841|   667M|}
  ------------------
 1630|   667M|    } else {
 1631|   132M|      tchunkptr tp = (tchunkptr)p;
 1632|   132M|      insert_large_chunk(fm, tp, psize);
  ------------------
  |  |  882|   132M|#define insert_large_chunk(M, X, S) {\
  |  |  883|   132M|  tbinptr *H;\
  |  |  884|   132M|  bindex_t I;\
  |  |  885|   132M|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|   132M|#define compute_tree_index(S, I)\
  |  |  |  |  769|   132M|{\
  |  |  |  |  770|   132M|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|   132M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|   132M|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 132M]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|   132M|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 75, False: 132M]
  |  |  |  |  ------------------
  |  |  |  |  774|     75|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|     75|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|   132M|  } else {\
  |  |  |  |  776|   132M|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   132M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|   132M|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|   132M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|   132M|  }\
  |  |  |  |  779|   132M|}
  |  |  ------------------
  |  |  886|   132M|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|   132M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|   132M|  X->index = I;\
  |  |  888|   132M|  X->child[0] = X->child[1] = 0;\
  |  |  889|   132M|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|   132M|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   132M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 6.47M, False: 125M]
  |  |  ------------------
  |  |  890|  6.47M|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|  6.47M|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  6.47M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|  6.47M|    *H = X;\
  |  |  892|  6.47M|    X->parent = (tchunkptr)H;\
  |  |  893|  6.47M|    X->fd = X->bk = X;\
  |  |  894|   125M|  } else {\
  |  |  895|   125M|    tchunkptr T = *H;\
  |  |  896|   125M|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|   125M|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|   125M|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 75, False: 125M]
  |  |  |  |  ------------------
  |  |  |  |  788|   125M|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   125M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   125M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|   125M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|   323M|    for (;;) {\
  |  |  898|   323M|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|   323M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|   323M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|   323M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   323M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|   323M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|   323M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 220M, False: 103M]
  |  |  ------------------
  |  |  899|   220M|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|   220M|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|   220M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|   220M|	K <<= 1;\
  |  |  901|   220M|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 198M, False: 22.4M]
  |  |  ------------------
  |  |  902|   198M|	  T = *C;\
  |  |  903|   198M|	} else {\
  |  |  904|  22.4M|	  *C = X;\
  |  |  905|  22.4M|	  X->parent = T;\
  |  |  906|  22.4M|	  X->fd = X->bk = X;\
  |  |  907|  22.4M|	  break;\
  |  |  908|  22.4M|	}\
  |  |  909|   220M|      } else {\
  |  |  910|   103M|	tchunkptr F = T->fd;\
  |  |  911|   103M|	T->fd = F->bk = X;\
  |  |  912|   103M|	X->fd = F;\
  |  |  913|   103M|	X->bk = T;\
  |  |  914|   103M|	X->parent = 0;\
  |  |  915|   103M|	break;\
  |  |  916|   103M|      }\
  |  |  917|   323M|    }\
  |  |  918|   125M|  }\
  |  |  919|   132M|}
  ------------------
 1633|   132M|      if (--fm->release_checks == 0)
  ------------------
  |  Branch (1633:11): [True: 509k, False: 131M]
  ------------------
 1634|   509k|	release_unused_segments(fm);
 1635|   132M|    }
 1636|   799M|  }
 1637|   801M|  return NULL;
 1638|   804M|#endif
 1639|   804M|}
lj_alloc.c:alloc_trim:
 1253|    158|{
 1254|    158|  size_t released = 0;
 1255|    158|  if (pad < MAX_REQUEST && is_initialized(m)) {
  ------------------
  |  |  582|    316|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|    158|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|    158|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (pad < MAX_REQUEST && is_initialized(m)) {
  ------------------
  |  |  701|    158|#define is_initialized(M)	((M)->top != 0)
  |  |  ------------------
  |  |  |  Branch (701:27): [True: 158, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1255:7): [True: 158, False: 0]
  ------------------
 1256|    158|    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
  ------------------
  |  |  754|    158|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|    158| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|    158|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|    158|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|    158|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|    158|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|    158|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|    158|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|    158|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|    158|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1257|       |
 1258|    158|    if (m->topsize > pad) {
  ------------------
  |  Branch (1258:9): [True: 158, False: 0]
  ------------------
 1259|       |      /* Shrink top space in granularity-size units, keeping at least one */
 1260|    158|      size_t unit = DEFAULT_GRANULARITY;
  ------------------
  |  |   41|    158|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
 1261|    158|      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
  ------------------
  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1262|    158|		      SIZE_T_ONE) * unit;
  ------------------
  |  |   55|    158|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1263|    158|      msegmentptr sp = segment_holding(m, (char *)m->top);
 1264|       |
 1265|    158|      if (sp->size >= extra &&
  ------------------
  |  Branch (1265:11): [True: 158, False: 0]
  ------------------
 1266|    158|	  !has_segment_link(m, sp)) { /* can't shrink if pinned */
  ------------------
  |  Branch (1266:4): [True: 158, False: 0]
  ------------------
 1267|    158|	size_t newsize = sp->size - extra;
 1268|       |	/* Prefer mremap, fall back to munmap */
 1269|    158|	if ((CALL_MREMAP(sp->base, sp->size, newsize, CALL_MREMAP_NOMOVE) != MFAIL) ||
  ------------------
  |  |  513|    158|#define CALL_MREMAP(addr, osz, nsz, mv) CALL_MREMAP_((addr), (osz), (nsz), (mv))
  ------------------
              	if ((CALL_MREMAP(sp->base, sp->size, newsize, CALL_MREMAP_NOMOVE) != MFAIL) ||
  ------------------
  |  |   71|    158|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  ------------------
  |  |  |  |   38|    158|#define MAX_SIZE_T		(~(size_t)0)
  |  |  ------------------
  ------------------
  |  Branch (1269:6): [True: 158, False: 0]
  ------------------
 1270|    158|	    (CALL_MUNMAP(sp->base + newsize, extra) == 0)) {
  ------------------
  |  Branch (1270:6): [True: 0, False: 0]
  ------------------
 1271|    158|	  released = extra;
 1272|    158|	}
 1273|    158|      }
 1274|       |
 1275|    158|      if (released != 0) {
  ------------------
  |  Branch (1275:11): [True: 158, False: 0]
  ------------------
 1276|    158|	sp->size -= released;
 1277|    158|	init_top(m, m->top, m->topsize - released);
 1278|    158|      }
 1279|    158|    }
 1280|       |
 1281|       |    /* Unmap any unused mmapped segments */
 1282|    158|    released += release_unused_segments(m);
 1283|       |
 1284|       |    /* On failure, disable autotrim to avoid repeated failed future calls */
 1285|    158|    if (released == 0 && m->topsize > m->trim_check)
  ------------------
  |  Branch (1285:9): [True: 0, False: 158]
  |  Branch (1285:26): [True: 0, False: 0]
  ------------------
 1286|      0|      m->trim_check = MAX_SIZE_T;
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1287|    158|  }
 1288|       |
 1289|    158|  return (released != 0)? 1 : 0;
  ------------------
  |  Branch (1289:10): [True: 158, False: 0]
  ------------------
 1290|    158|}
lj_alloc.c:segment_holding:
  726|  4.63k|{
  727|  4.63k|  msegmentptr sp = &m->seg;
  728|  4.63k|  for (;;) {
  729|  4.63k|    if (addr >= sp->base && addr < sp->base + sp->size)
  ------------------
  |  Branch (729:9): [True: 4.63k, False: 0]
  |  Branch (729:29): [True: 4.63k, False: 0]
  ------------------
  730|  4.63k|      return sp;
  731|      0|    if ((sp = sp->next) == 0)
  ------------------
  |  Branch (731:9): [True: 0, False: 0]
  ------------------
  732|      0|      return 0;
  733|      0|  }
  734|  4.63k|}
lj_alloc.c:has_segment_link:
  738|    158|{
  739|    158|  msegmentptr sp = &m->seg;
  740|  1.09k|  for (;;) {
  741|  1.09k|    if ((char *)sp >= ss->base && (char *)sp < ss->base + ss->size)
  ------------------
  |  Branch (741:9): [True: 929, False: 166]
  |  Branch (741:35): [True: 0, False: 929]
  ------------------
  742|      0|      return 1;
  743|  1.09k|    if ((sp = sp->next) == 0)
  ------------------
  |  Branch (743:9): [True: 158, False: 937]
  ------------------
  744|    158|      return 0;
  745|  1.09k|  }
  746|    158|}
lj_alloc.c:CALL_MREMAP_:
  492|  1.35k|{
  493|  1.35k|  int olderr = errno;
  494|       |#if LUAJIT_USE_ASAN
  495|       |  void *old_ptr = ptr;
  496|       |  size_t nms = nsz; /* new memory size */
  497|       |  osz = asan_get_size(old_ptr, POISON_SIZE);
  498|       |  nsz = (size_t)align_up((void *)nsz, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
  499|       |  ptr -= REDZONE_SIZE;
  500|       |#endif
  501|  1.35k|  ptr = mremap(ptr, osz, nsz, flags);
  502|       |#if LUAJIT_USE_ASAN
  503|       |  if (ptr != MFAIL) { 
  504|       |    /* can return a pointer to the same memory */
  505|       |    ASAN_POISON_MEMORY_REGION(old_ptr, osz);
  506|       |    ptr = mark_memory_region(ptr, nms, nsz);
  507|       |  }
  508|       |#endif
  509|  1.35k|  errno = olderr;
  510|  1.35k|  return ptr;
  511|  1.35k|}
lj_alloc.c:release_unused_segments:
 1211|   509k|{
 1212|   509k|  size_t released = 0;
 1213|   509k|  size_t nsegs = 0;
 1214|   509k|  msegmentptr pred = &m->seg;
 1215|   509k|  msegmentptr sp = pred->next;
 1216|  1.83M|  while (sp != 0) {
  ------------------
  |  Branch (1216:10): [True: 1.32M, False: 509k]
  ------------------
 1217|  1.32M|    char *base = sp->base;
 1218|  1.32M|    size_t size = sp->size;
 1219|  1.32M|    msegmentptr next = sp->next;
 1220|  1.32M|    nsegs++;
 1221|  1.32M|    {
 1222|  1.32M|      mchunkptr p = align_as_chunk(base);
  ------------------
  |  |  579|  1.32M|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  1.32M| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  1.32M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  1.32M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.32M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 1.32M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  1.32M|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1223|  1.32M|      size_t psize = chunksize(p);
  ------------------
  |  |  605|  1.32M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  1.32M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.32M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.32M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  1.32M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.32M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|       |      /* Can unmap if first chunk holds entire segment and not pinned */
 1225|  1.32M|      if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  603|  2.64M|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  1.32M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.32M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!cinuse(p) && (char *)p + psize == (char *)mem2chunk(sp)) {
  ------------------
  |  |  576|   997k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   997k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   997k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1225:11): [True: 997k, False: 324k]
  |  Branch (1225:25): [True: 696, False: 996k]
  ------------------
 1226|    696|	tchunkptr tp = (tchunkptr)p;
 1227|    696|	if (p == m->dv) {
  ------------------
  |  Branch (1227:6): [True: 16, False: 680]
  ------------------
 1228|     16|	  m->dv = 0;
 1229|     16|	  m->dvsize = 0;
 1230|    680|	} else {
 1231|    680|	  unlink_large_chunk(m, tp);
  ------------------
  |  |  921|    680|#define unlink_large_chunk(M, X) {\
  |  |  922|    680|  tchunkptr XP = X->parent;\
  |  |  923|    680|  tchunkptr R;\
  |  |  924|    680|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 16, False: 664]
  |  |  ------------------
  |  |  925|     16|    tchunkptr F = X->fd;\
  |  |  926|     16|    R = X->bk;\
  |  |  927|     16|    F->bk = R;\
  |  |  928|     16|    R->fd = F;\
  |  |  929|    664|  } else {\
  |  |  930|    664|    tchunkptr *RP;\
  |  |  931|    664|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 106, False: 558]
  |  |  ------------------
  |  |  932|    664|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 68, False: 490]
  |  |  ------------------
  |  |  933|    174|      tchunkptr *CP;\
  |  |  934|    251|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 44, False: 207]
  |  |  ------------------
  |  |  935|    251|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 33, False: 174]
  |  |  ------------------
  |  |  936|     77|	R = *(RP = CP);\
  |  |  937|     77|      }\
  |  |  938|    174|      *RP = 0;\
  |  |  939|    174|    }\
  |  |  940|    664|  }\
  |  |  941|    680|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 670, False: 10]
  |  |  ------------------
  |  |  942|    670|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|    670|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|    670|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 470, False: 200]
  |  |  ------------------
  |  |  944|    470|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 354, False: 116]
  |  |  ------------------
  |  |  945|    470|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|    354|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|    354|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|    470|    } else {\
  |  |  947|    200|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 45, False: 155]
  |  |  ------------------
  |  |  948|    200|	XP->child[0] = R;\
  |  |  949|    200|      else \
  |  |  950|    200|	XP->child[1] = R;\
  |  |  951|    200|    }\
  |  |  952|    670|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 180, False: 490]
  |  |  ------------------
  |  |  953|    180|      tchunkptr C0, C1;\
  |  |  954|    180|      R->parent = XP;\
  |  |  955|    180|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 77, False: 103]
  |  |  ------------------
  |  |  956|     77|	R->child[0] = C0;\
  |  |  957|     77|	C0->parent = R;\
  |  |  958|     77|      }\
  |  |  959|    180|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 40, False: 140]
  |  |  ------------------
  |  |  960|     40|	R->child[1] = C1;\
  |  |  961|     40|	C1->parent = R;\
  |  |  962|     40|      }\
  |  |  963|    180|    }\
  |  |  964|    670|  }\
  |  |  965|    680|}
  ------------------
 1232|    680|	}
 1233|    696|	if (CALL_MUNMAP(base, size) == 0) {
  ------------------
  |  Branch (1233:6): [True: 696, False: 0]
  ------------------
 1234|    696|	  released += size;
 1235|       |	  /* unlink obsoleted record */
 1236|    696|	  sp = pred;
 1237|    696|	  sp->next = next;
 1238|    696|	} else { /* back out if cannot unmap */
 1239|      0|	  insert_large_chunk(m, tp, psize);
  ------------------
  |  |  882|      0|#define insert_large_chunk(M, X, S) {\
  |  |  883|      0|  tbinptr *H;\
  |  |  884|      0|  bindex_t I;\
  |  |  885|      0|  compute_tree_index(S, I);\
  |  |  ------------------
  |  |  |  |  768|      0|#define compute_tree_index(S, I)\
  |  |  |  |  769|      0|{\
  |  |  |  |  770|      0|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  771|      0|  if (X == 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (771:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  773|      0|  } else if (X > 0xFFFF) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (773:14): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  775|      0|  } else {\
  |  |  |  |  776|      0|    unsigned int K = lj_fls(X);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  |  |  777|      0|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  |  |  778|      0|  }\
  |  |  |  |  779|      0|}
  |  |  ------------------
  |  |  886|      0|  H = treebin_at(M, I);\
  |  |  ------------------
  |  |  |  |  765|      0|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  887|      0|  X->index = I;\
  |  |  888|      0|  X->child[0] = X->child[1] = 0;\
  |  |  889|      0|  if (!treemap_is_marked(M, I)) {\
  |  |  ------------------
  |  |  |  |  807|      0|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (889:7): [True: 0, False: 0]
  |  |  ------------------
  |  |  890|      0|    mark_treemap(M, I);\
  |  |  ------------------
  |  |  |  |  805|      0|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  891|      0|    *H = X;\
  |  |  892|      0|    X->parent = (tchunkptr)H;\
  |  |  893|      0|    X->fd = X->bk = X;\
  |  |  894|      0|  } else {\
  |  |  895|      0|    tchunkptr T = *H;\
  |  |  896|      0|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  ------------------
  |  |  |  |  787|      0|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  788|      0|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  679|      0|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  897|      0|    for (;;) {\
  |  |  898|      0|      if (chunksize(T) != S) {\
  |  |  ------------------
  |  |  |  |  605|      0|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  ------------------
  |  |  |  |  |  |  597|      0|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  596|      0|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   56|      0|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (898:11): [True: 0, False: 0]
  |  |  ------------------
  |  |  899|      0|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   50|      0|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  900|      0|	K <<= 1;\
  |  |  901|      0|	if (*C != 0) {\
  |  |  ------------------
  |  |  |  Branch (901:6): [True: 0, False: 0]
  |  |  ------------------
  |  |  902|      0|	  T = *C;\
  |  |  903|      0|	} else {\
  |  |  904|      0|	  *C = X;\
  |  |  905|      0|	  X->parent = T;\
  |  |  906|      0|	  X->fd = X->bk = X;\
  |  |  907|      0|	  break;\
  |  |  908|      0|	}\
  |  |  909|      0|      } else {\
  |  |  910|      0|	tchunkptr F = T->fd;\
  |  |  911|      0|	T->fd = F->bk = X;\
  |  |  912|      0|	X->fd = F;\
  |  |  913|      0|	X->bk = T;\
  |  |  914|      0|	X->parent = 0;\
  |  |  915|      0|	break;\
  |  |  916|      0|      }\
  |  |  917|      0|    }\
  |  |  918|      0|  }\
  |  |  919|      0|}
  ------------------
 1240|      0|	}
 1241|    696|      }
 1242|  1.32M|    }
 1243|  1.32M|    pred = sp;
 1244|  1.32M|    sp = next;
 1245|  1.32M|  }
 1246|       |  /* Reset check counter */
 1247|   509k|  m->release_checks = nsegs > MAX_RELEASE_CHECK_RATE ?
  ------------------
  |  |   44|   509k|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
  |  Branch (1247:23): [True: 0, False: 509k]
  ------------------
 1248|   509k|		      nsegs : MAX_RELEASE_CHECK_RATE;
  ------------------
  |  |   44|  1.01M|#define MAX_RELEASE_CHECK_RATE	255
  ------------------
 1249|   509k|  return released;
 1250|   509k|}
lj_alloc.c:lj_alloc_malloc:
 1450|   802M|{
 1451|       |#if LUAJIT_USE_ASAN
 1452|       |  size_t mem_size = nsize;
 1453|       |  size_t poison_size = (size_t)align_up((void *)nsize, SIZE_ALIGNMENT) + TOTAL_REDZONE_SIZE;
 1454|       |  nsize = poison_size;
 1455|       |#endif
 1456|   802M|  mstate ms = (mstate)msp;
 1457|   802M|  void *mem;
 1458|   802M|  size_t nb;
 1459|   802M|  if (nsize <= MAX_SMALL_REQUEST) {
  ------------------
  |  |  682|   802M|#define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  681|   802M|#define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  680|   802M|#define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   802M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define MIN_LARGE_SIZE		(SIZE_T_ONE << TREEBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|   802M|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MAX_SMALL_SIZE		(MIN_LARGE_SIZE - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   802M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |   62|   802M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   802M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   802M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MAX_SMALL_REQUEST  (MAX_SMALL_SIZE - CHUNK_ALIGN_MASK - CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|   802M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   802M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1459:7): [True: 801M, False: 901k]
  ------------------
 1460|   801M|    bindex_t idx;
 1461|   801M|    binmap_t smallbits;
 1462|   801M|    nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  583|   801M|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  567|   801M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   801M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   801M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   801M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   801M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   801M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   801M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   801M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |  558|   801M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   801M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|   801M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  567|  1.41k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  1.41k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.41k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.41k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.41k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  1.41k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  1.41k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.41k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  nb = (nsize < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(nsize);
  ------------------
  |  |  587|  1.60G|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|   801M|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   801M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   801M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   801M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   801M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   801M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   801M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   801M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1462:10): [True: 1.41k, False: 801M]
  ------------------
 1463|   801M|    idx = small_index(nb);
  ------------------
  |  |  759|   801M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|   801M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1464|   801M|    smallbits = ms->smallmap >> idx;
 1465|       |
 1466|   801M|    if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
  ------------------
  |  Branch (1466:9): [True: 157M, False: 644M]
  ------------------
 1467|   157M|      mchunkptr b, p;
 1468|   157M|      idx += ~smallbits & 1;       /* Uses next bin if idx empty */
 1469|   157M|      b = smallbin_at(ms, idx);
  ------------------
  |  |  764|   157M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1470|   157M|      p = b->fd;
 1471|   157M|      unlink_first_small_chunk(ms, b, p, idx);
  ------------------
  |  |  857|   157M|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|   157M|  mchunkptr F = P->fd;\
  |  |  859|   157M|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 8.79M, False: 148M]
  |  |  ------------------
  |  |  860|  8.79M|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|  8.79M|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  8.79M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|   148M|  } else {\
  |  |  862|   148M|    B->fd = F;\
  |  |  863|   148M|    F->bk = B;\
  |  |  864|   148M|  }\
  |  |  865|   157M|}
  ------------------
 1472|   157M|      set_inuse_and_pinuse(ms, p, small_index2size(idx));
  ------------------
  |  |  819|   157M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|   157M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   157M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|   157M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   157M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|   157M|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|   157M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   157M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1473|   157M|      mem = chunk2mem(p);
  ------------------
  |  |  575|   157M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   157M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   157M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1474|       |#if LUAJIT_USE_ASAN
 1475|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1476|       |#endif
 1477|   157M|      return mem;
 1478|   644M|    } else if (nb > ms->dvsize) {
  ------------------
  |  Branch (1478:16): [True: 117M, False: 526M]
  ------------------
 1479|   117M|      if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
  ------------------
  |  Branch (1479:11): [True: 32.9M, False: 84.3M]
  ------------------
 1480|  32.9M|	mchunkptr b, p, r;
 1481|  32.9M|	size_t rsize;
 1482|  32.9M|	binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
  ------------------
  |  |  810|  32.9M|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1483|  32.9M|	bindex_t i = lj_ffs(leftbits);
  ------------------
  |  |  148|  32.9M|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1484|  32.9M|	b = smallbin_at(ms, i);
  ------------------
  |  |  764|  32.9M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  ------------------
 1485|  32.9M|	p = b->fd;
 1486|  32.9M|	unlink_first_small_chunk(ms, b, p, i);
  ------------------
  |  |  857|  32.9M|#define unlink_first_small_chunk(M, B, P, I) {\
  |  |  858|  32.9M|  mchunkptr F = P->fd;\
  |  |  859|  32.9M|  if (B == F) {\
  |  |  ------------------
  |  |  |  Branch (859:7): [True: 4.65M, False: 28.3M]
  |  |  ------------------
  |  |  860|  4.65M|    clear_smallmap(M, I);\
  |  |  ------------------
  |  |  |  |  802|  4.65M|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  4.65M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  861|  28.3M|  } else {\
  |  |  862|  28.3M|    B->fd = F;\
  |  |  863|  28.3M|    F->bk = B;\
  |  |  864|  28.3M|  }\
  |  |  865|  32.9M|}
  ------------------
 1487|  32.9M|	rsize = small_index2size(i) - nb;
  ------------------
  |  |  760|  32.9M|#define small_index2size(i)	((i)  << SMALLBIN_SHIFT)
  |  |  ------------------
  |  |  |  |  677|  32.9M|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  ------------------
 1488|       |	/* Fit here cannot be remainderless if 4byte sizes */
 1489|  32.9M|	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |   49|  32.9M|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
              	if (SIZE_T_SIZE != 4 && rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  32.9M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  32.9M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  32.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  32.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  32.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  32.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  32.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  32.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1489:6): [Folded - Ignored]
  |  Branch (1489:26): [True: 2.68M, False: 30.2M]
  ------------------
 1490|  2.68M|	  set_inuse_and_pinuse(ms, p, small_index2size(i));
  ------------------
  |  |  819|  2.68M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  2.68M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.68M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  2.68M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  2.68M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  2.68M|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  2.68M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  2.68M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1491|  30.2M|	} else {
 1492|  30.2M|	  set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|  30.2M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  30.2M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  30.2M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  30.2M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  30.2M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1493|  30.2M|	  r = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  30.2M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1494|  30.2M|	  set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|  30.2M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  30.2M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  30.2M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  30.2M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1495|  30.2M|	  replace_dv(ms, r, rsize);
  ------------------
  |  |  869|  30.2M|#define replace_dv(M, P, S) {\
  |  |  870|  30.2M|  size_t DVS = M->dvsize;\
  |  |  871|  30.2M|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 4.83M, False: 25.4M]
  |  |  ------------------
  |  |  872|  4.83M|    mchunkptr DV = M->dv;\
  |  |  873|  4.83M|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|  4.83M|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  4.83M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  4.83M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  4.83M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  4.83M|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  4.83M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  4.83M|  mchunkptr F = B;\
  |  |  |  |  833|  4.83M|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  4.83M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  4.83M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 1.62M, False: 3.21M]
  |  |  |  |  ------------------
  |  |  |  |  834|  4.83M|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  1.62M|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.62M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  4.83M|  else\
  |  |  |  |  836|  4.83M|    F = B->fd;\
  |  |  |  |  837|  4.83M|  B->fd = P;\
  |  |  |  |  838|  4.83M|  F->bk = P;\
  |  |  |  |  839|  4.83M|  P->fd = F;\
  |  |  |  |  840|  4.83M|  P->bk = B;\
  |  |  |  |  841|  4.83M|}
  |  |  ------------------
  |  |  874|  4.83M|  }\
  |  |  875|  30.2M|  M->dvsize = S;\
  |  |  876|  30.2M|  M->dv = P;\
  |  |  877|  30.2M|}
  ------------------
 1496|  30.2M|	}
 1497|  32.9M|	mem = chunk2mem(p);
  ------------------
  |  |  575|  32.9M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  32.9M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  32.9M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1498|       |#if LUAJIT_USE_ASAN
 1499|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1500|       |#endif
 1501|  32.9M|	return mem;
 1502|  84.3M|      } else if (ms->treemap != 0 && (mem = tmalloc_small(ms, nb)) != 0) {
  ------------------
  |  Branch (1502:18): [True: 27.9M, False: 56.3M]
  |  Branch (1502:38): [True: 27.9M, False: 0]
  ------------------
 1503|       |#if LUAJIT_USE_ASAN
 1504|       |  mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1505|       |#endif
 1506|  27.9M|	return mem;
 1507|  27.9M|      }
 1508|   117M|    }
 1509|   801M|  } else if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|   901k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|   901k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   901k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   901k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   901k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   901k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   901k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   901k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   901k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1509:14): [True: 0, False: 901k]
  ------------------
 1510|      0|    nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
  ------------------
  |  |   38|      0|#define MAX_SIZE_T		(~(size_t)0)
  ------------------
 1511|   901k|  } else {
 1512|   901k|    nb = pad_request(nsize);
  ------------------
  |  |  587|   901k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|   901k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   901k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   901k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   901k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   901k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   901k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   901k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   901k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1513|   901k|    if (ms->treemap != 0 && (mem = tmalloc_large(ms, nb)) != 0) {
  ------------------
  |  Branch (1513:9): [True: 577k, False: 323k]
  |  Branch (1513:29): [True: 304k, False: 273k]
  ------------------
 1514|       |#if LUAJIT_USE_ASAN
 1515|       |      mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1516|       |#endif
 1517|   304k|      return mem;
 1518|   304k|    }
 1519|   901k|  }
 1520|       |
 1521|   583M|  if (nb <= ms->dvsize) {
  ------------------
  |  Branch (1521:7): [True: 526M, False: 56.9M]
  ------------------
 1522|   526M|    size_t rsize = ms->dvsize - nb;
 1523|   526M|    mchunkptr p = ms->dv;
 1524|   526M|    if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
  ------------------
  |  |  567|   526M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|   526M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   526M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   526M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   526M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   526M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   526M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   526M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1524:9): [True: 477M, False: 49.2M]
  ------------------
 1525|   477M|      mchunkptr r = ms->dv = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|   477M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1526|   477M|      ms->dvsize = rsize;
 1527|   477M|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|   477M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|   477M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   477M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|   477M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1528|   477M|      set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|   477M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|   477M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   477M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|   477M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   477M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1529|   477M|    } else { /* exhaust dv */
 1530|  49.2M|      size_t dvs = ms->dvsize;
 1531|  49.2M|      ms->dvsize = 0;
 1532|  49.2M|      ms->dv = 0;
 1533|  49.2M|      set_inuse_and_pinuse(ms, p, dvs);
  ------------------
  |  |  819|  49.2M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  49.2M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  49.2M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  49.2M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  49.2M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  49.2M|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  49.2M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  49.2M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1534|  49.2M|    }
 1535|   526M|    mem = chunk2mem(p);
  ------------------
  |  |  575|   526M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   526M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   526M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1536|       |#if LUAJIT_USE_ASAN
 1537|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1538|       |#endif
 1539|   526M|    return mem;
 1540|   526M|  } else if (nb < ms->topsize) { /* Split top */
  ------------------
  |  Branch (1540:14): [True: 56.8M, False: 71.2k]
  ------------------
 1541|  56.8M|    size_t rsize = ms->topsize -= nb;
 1542|  56.8M|    mchunkptr p = ms->top;
 1543|  56.8M|    mchunkptr r = ms->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  56.8M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1544|  56.8M|    r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  595|  56.8M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  56.8M|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1545|  56.8M|    set_size_and_pinuse_of_inuse_chunk(ms, p, nb);
  ------------------
  |  |  824|  56.8M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  56.8M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  56.8M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  56.8M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  56.8M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1546|  56.8M|    mem = chunk2mem(p);
  ------------------
  |  |  575|  56.8M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  56.8M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  56.8M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1547|       |#if LUAJIT_USE_ASAN
 1548|       |    mem = mark_memory_region(mem - REDZONE_SIZE, mem_size, poison_size);
 1549|       |#endif
 1550|  56.8M|    return mem;
 1551|  56.8M|  }
 1552|       |#if LUAJIT_USE_ASAN
 1553|       |  return mark_memory_region(alloc_sys(ms, nb) - REDZONE_SIZE, mem_size, poison_size);
 1554|       |#else
 1555|  71.2k|  return alloc_sys(ms, nb);
 1556|   583M|#endif
 1557|   583M|}
lj_alloc.c:tmalloc_small:
 1360|  27.9M|{
 1361|  27.9M|  tchunkptr t, v;
 1362|  27.9M|  mchunkptr r;
 1363|  27.9M|  size_t rsize;
 1364|  27.9M|  bindex_t i = lj_ffs(m->treemap);
  ------------------
  |  |  148|  27.9M|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
 1365|       |
 1366|  27.9M|  v = t = *treebin_at(m, i);
  ------------------
  |  |  765|  27.9M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1367|  27.9M|  rsize = chunksize(t) - nb;
  ------------------
  |  |  605|  27.9M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  27.9M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  27.9M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  27.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  27.9M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  27.9M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1368|       |
 1369|  75.6M|  while ((t = leftmost_child(t)) != 0) {
  ------------------
  |  |  659|  75.6M|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (659:28): [True: 27.9M, False: 47.7M]
  |  |  ------------------
  ------------------
  |  Branch (1369:10): [True: 47.6M, False: 27.9M]
  ------------------
 1370|  47.6M|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|  47.6M|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  47.6M|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  47.6M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  47.6M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  47.6M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  47.6M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1371|  47.6M|    if (trem < rsize) {
  ------------------
  |  Branch (1371:9): [True: 26.2M, False: 21.4M]
  ------------------
 1372|  26.2M|      rsize = trem;
 1373|  26.2M|      v = t;
 1374|  26.2M|    }
 1375|  47.6M|  }
 1376|       |
 1377|  27.9M|  r = chunk_plus_offset(v, nb);
  ------------------
  |  |  611|  27.9M|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1378|  27.9M|  unlink_large_chunk(m, v);
  ------------------
  |  |  921|  27.9M|#define unlink_large_chunk(M, X) {\
  |  |  922|  27.9M|  tchunkptr XP = X->parent;\
  |  |  923|  27.9M|  tchunkptr R;\
  |  |  924|  27.9M|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 18.1M, False: 9.85M]
  |  |  ------------------
  |  |  925|  18.1M|    tchunkptr F = X->fd;\
  |  |  926|  18.1M|    R = X->bk;\
  |  |  927|  18.1M|    F->bk = R;\
  |  |  928|  18.1M|    R->fd = F;\
  |  |  929|  18.1M|  } else {\
  |  |  930|  9.85M|    tchunkptr *RP;\
  |  |  931|  9.85M|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 3.35M, False: 6.49M]
  |  |  ------------------
  |  |  932|  9.85M|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 267k, False: 6.22M]
  |  |  ------------------
  |  |  933|  3.62M|      tchunkptr *CP;\
  |  |  934|  5.46M|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 1.25M, False: 4.21M]
  |  |  ------------------
  |  |  935|  5.46M|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 587k, False: 3.62M]
  |  |  ------------------
  |  |  936|  1.84M|	R = *(RP = CP);\
  |  |  937|  1.84M|      }\
  |  |  938|  3.62M|      *RP = 0;\
  |  |  939|  3.62M|    }\
  |  |  940|  9.85M|  }\
  |  |  941|  27.9M|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 27.9M, False: 0]
  |  |  ------------------
  |  |  942|  27.9M|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|  27.9M|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|  27.9M|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 10.4M, False: 17.5M]
  |  |  ------------------
  |  |  944|  10.4M|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 1.62M, False: 8.78M]
  |  |  ------------------
  |  |  945|  10.4M|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|  1.62M|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|  1.62M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|  17.5M|    } else {\
  |  |  947|  17.5M|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 12.7M, False: 4.82M]
  |  |  ------------------
  |  |  948|  17.5M|	XP->child[0] = R;\
  |  |  949|  17.5M|      else \
  |  |  950|  17.5M|	XP->child[1] = R;\
  |  |  951|  17.5M|    }\
  |  |  952|  27.9M|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 21.7M, False: 6.22M]
  |  |  ------------------
  |  |  953|  21.7M|      tchunkptr C0, C1;\
  |  |  954|  21.7M|      R->parent = XP;\
  |  |  955|  21.7M|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 4.50M, False: 17.2M]
  |  |  ------------------
  |  |  956|  4.50M|	R->child[0] = C0;\
  |  |  957|  4.50M|	C0->parent = R;\
  |  |  958|  4.50M|      }\
  |  |  959|  21.7M|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 9.96M, False: 11.7M]
  |  |  ------------------
  |  |  960|  9.96M|	R->child[1] = C1;\
  |  |  961|  9.96M|	C1->parent = R;\
  |  |  962|  9.96M|      }\
  |  |  963|  21.7M|    }\
  |  |  964|  27.9M|  }\
  |  |  965|  27.9M|}
  ------------------
 1379|  27.9M|  if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  27.9M|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  27.9M|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  27.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  27.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  27.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  27.9M|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  27.9M|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  27.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1379:7): [True: 494, False: 27.9M]
  ------------------
 1380|    494|    set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  819|    494|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|    494|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    494|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|    494|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    494|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|    494|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|    494|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|    494|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1381|  27.9M|  } else {
 1382|  27.9M|    set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  824|  27.9M|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  27.9M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  27.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  27.9M|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  27.9M|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1383|  27.9M|    set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|  27.9M|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|  27.9M|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  27.9M|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|  27.9M|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1384|  27.9M|    replace_dv(m, r, rsize);
  ------------------
  |  |  869|  27.9M|#define replace_dv(M, P, S) {\
  |  |  870|  27.9M|  size_t DVS = M->dvsize;\
  |  |  871|  27.9M|  if (DVS != 0) {\
  |  |  ------------------
  |  |  |  Branch (871:7): [True: 4.15M, False: 23.8M]
  |  |  ------------------
  |  |  872|  4.15M|    mchunkptr DV = M->dv;\
  |  |  873|  4.15M|    insert_small_chunk(M, DV, DVS);\
  |  |  ------------------
  |  |  |  |  829|  4.15M|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  4.15M|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  4.15M|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  4.15M|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  4.15M|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  4.15M|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  4.15M|  mchunkptr F = B;\
  |  |  |  |  833|  4.15M|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  4.15M|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  4.15M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 1.40M, False: 2.74M]
  |  |  |  |  ------------------
  |  |  |  |  834|  4.15M|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  1.40M|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.40M|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  4.15M|  else\
  |  |  |  |  836|  4.15M|    F = B->fd;\
  |  |  |  |  837|  4.15M|  B->fd = P;\
  |  |  |  |  838|  4.15M|  F->bk = P;\
  |  |  |  |  839|  4.15M|  P->fd = F;\
  |  |  |  |  840|  4.15M|  P->bk = B;\
  |  |  |  |  841|  4.15M|}
  |  |  ------------------
  |  |  874|  4.15M|  }\
  |  |  875|  27.9M|  M->dvsize = S;\
  |  |  876|  27.9M|  M->dv = P;\
  |  |  877|  27.9M|}
  ------------------
 1385|  27.9M|  }
 1386|  27.9M|  return chunk2mem(v);
  ------------------
  |  |  575|  27.9M|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  27.9M|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  27.9M|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1387|  27.9M|}
lj_alloc.c:tmalloc_large:
 1296|   577k|{
 1297|   577k|  tchunkptr v = 0;
 1298|   577k|  size_t rsize = ~nb+1; /* Unsigned negation */
 1299|   577k|  tchunkptr t;
 1300|   577k|  bindex_t idx;
 1301|   577k|  compute_tree_index(nb, idx);
  ------------------
  |  |  768|   577k|#define compute_tree_index(S, I)\
  |  |  769|   577k|{\
  |  |  770|   577k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  ------------------
  |  |  |  |  679|   577k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  771|   577k|  if (X == 0) {\
  |  |  ------------------
  |  |  |  Branch (771:7): [True: 0, False: 577k]
  |  |  ------------------
  |  |  772|      0|    I = 0;\
  |  |  773|   577k|  } else if (X > 0xFFFF) {\
  |  |  ------------------
  |  |  |  Branch (773:14): [True: 0, False: 577k]
  |  |  ------------------
  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  ------------------
  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  775|   577k|  } else {\
  |  |  776|   577k|    unsigned int K = lj_fls(X);\
  |  |  ------------------
  |  |  |  |  149|   577k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  777|   577k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  ------------------
  |  |  |  |  679|   577k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  |  |  778|   577k|  }\
  |  |  779|   577k|}
  ------------------
 1302|       |
 1303|   577k|  if ((t = *treebin_at(m, idx)) != 0) {
  ------------------
  |  |  765|   577k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
  |  Branch (1303:7): [True: 259k, False: 317k]
  ------------------
 1304|       |    /* Traverse tree for this bin looking for node with size == nb */
 1305|   259k|    size_t sizebits = nb << leftshift_for_tree_index(idx);
  ------------------
  |  |  787|   259k|   ((i == NTREEBINS-1)? 0 : \
  |  |  ------------------
  |  |  |  |  676|   259k|#define NTREEBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (787:5): [True: 0, False: 259k]
  |  |  ------------------
  |  |  788|   259k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   50|   259k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |   55|   259k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  ------------------
  |  |  |  |  679|   259k|#define TREEBIN_SHIFT		(8U)
  |  |  ------------------
  ------------------
 1306|   259k|    tchunkptr rst = 0;  /* The deepest untaken right subtree */
 1307|   280k|    for (;;) {
 1308|   280k|      tchunkptr rt;
 1309|   280k|      size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|   280k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   280k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   280k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   280k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   280k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   280k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1310|   280k|      if (trem < rsize) {
  ------------------
  |  Branch (1310:11): [True: 261k, False: 19.4k]
  ------------------
 1311|   261k|	v = t;
 1312|   261k|	if ((rsize = trem) == 0)
  ------------------
  |  Branch (1312:6): [True: 67.2k, False: 193k]
  ------------------
 1313|  67.2k|	  break;
 1314|   261k|      }
 1315|   213k|      rt = t->child[1];
 1316|   213k|      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   50|   213k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  ------------------
                    t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
  ------------------
  |  |   55|   213k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1317|   213k|      if (rt != 0 && rt != t)
  ------------------
  |  Branch (1317:11): [True: 17.1k, False: 196k]
  |  Branch (1317:22): [True: 14.6k, False: 2.44k]
  ------------------
 1318|  14.6k|	rst = rt;
 1319|   213k|      if (t == 0) {
  ------------------
  |  Branch (1319:11): [True: 192k, False: 20.6k]
  ------------------
 1320|   192k|	t = rst; /* set t to least subtree holding sizes > nb */
 1321|   192k|	break;
 1322|   192k|      }
 1323|  20.6k|      sizebits <<= 1;
 1324|  20.6k|    }
 1325|   259k|  }
 1326|       |
 1327|   577k|  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
  ------------------
  |  Branch (1327:7): [True: 502k, False: 75.6k]
  |  Branch (1327:17): [True: 327k, False: 175k]
  ------------------
 1328|   327k|    binmap_t leftbits = left_bits(idx2bit(idx)) & m->treemap;
  ------------------
  |  |  810|   327k|#define left_bits(x)		((x<<1) | (~(x<<1)+1))
  ------------------
 1329|   327k|    if (leftbits != 0)
  ------------------
  |  Branch (1329:9): [True: 83.7k, False: 243k]
  ------------------
 1330|  83.7k|      t = *treebin_at(m, lj_ffs(leftbits));
  ------------------
  |  |  765|  83.7k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  ------------------
 1331|   327k|  }
 1332|       |
 1333|   795k|  while (t != 0) { /* find smallest of tree or subtree */
  ------------------
  |  Branch (1333:10): [True: 217k, False: 577k]
  ------------------
 1334|   217k|    size_t trem = chunksize(t) - nb;
  ------------------
  |  |  605|   217k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   217k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   217k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   217k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   217k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   217k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1335|   217k|    if (trem < rsize) {
  ------------------
  |  Branch (1335:9): [True: 117k, False: 100k]
  ------------------
 1336|   117k|      rsize = trem;
 1337|   117k|      v = t;
 1338|   117k|    }
 1339|   217k|    t = leftmost_child(t);
  ------------------
  |  |  659|   217k|#define leftmost_child(t) ((t)->child[0] != 0? (t)->child[0] : (t)->child[1])
  |  |  ------------------
  |  |  |  Branch (659:28): [True: 37.7k, False: 179k]
  |  |  ------------------
  ------------------
 1340|   217k|  }
 1341|       |
 1342|       |  /*  If dv is a better fit, return NULL so malloc will use it */
 1343|   577k|  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
  ------------------
  |  Branch (1343:7): [True: 334k, False: 243k]
  |  Branch (1343:17): [True: 304k, False: 30.3k]
  ------------------
 1344|   304k|    mchunkptr r = chunk_plus_offset(v, nb);
  ------------------
  |  |  611|   304k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1345|   304k|    unlink_large_chunk(m, v);
  ------------------
  |  |  921|   304k|#define unlink_large_chunk(M, X) {\
  |  |  922|   304k|  tchunkptr XP = X->parent;\
  |  |  923|   304k|  tchunkptr R;\
  |  |  924|   304k|  if (X->bk != X) {\
  |  |  ------------------
  |  |  |  Branch (924:7): [True: 8.25k, False: 295k]
  |  |  ------------------
  |  |  925|  8.25k|    tchunkptr F = X->fd;\
  |  |  926|  8.25k|    R = X->bk;\
  |  |  927|  8.25k|    F->bk = R;\
  |  |  928|  8.25k|    R->fd = F;\
  |  |  929|   295k|  } else {\
  |  |  930|   295k|    tchunkptr *RP;\
  |  |  931|   295k|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (931:9): [True: 7.39k, False: 288k]
  |  |  ------------------
  |  |  932|   295k|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (932:2): [True: 3.33k, False: 285k]
  |  |  ------------------
  |  |  933|  10.7k|      tchunkptr *CP;\
  |  |  934|  13.8k|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  ------------------
  |  |  |  Branch (934:14): [True: 1.82k, False: 12.0k]
  |  |  ------------------
  |  |  935|  13.8k|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  ------------------
  |  |  |  Branch (935:7): [True: 1.34k, False: 10.7k]
  |  |  ------------------
  |  |  936|  3.16k|	R = *(RP = CP);\
  |  |  937|  3.16k|      }\
  |  |  938|  10.7k|      *RP = 0;\
  |  |  939|  10.7k|    }\
  |  |  940|   295k|  }\
  |  |  941|   304k|  if (XP != 0) {\
  |  |  ------------------
  |  |  |  Branch (941:7): [True: 304k, False: 0]
  |  |  ------------------
  |  |  942|   304k|    tbinptr *H = treebin_at(M, X->index);\
  |  |  ------------------
  |  |  |  |  765|   304k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  ------------------
  |  |  943|   304k|    if (X == *H) {\
  |  |  ------------------
  |  |  |  Branch (943:9): [True: 279k, False: 24.3k]
  |  |  ------------------
  |  |  944|   279k|      if ((*H = R) == 0) \
  |  |  ------------------
  |  |  |  Branch (944:11): [True: 270k, False: 9.44k]
  |  |  ------------------
  |  |  945|   279k|	clear_treemap(M, X->index);\
  |  |  ------------------
  |  |  |  |  806|   270k|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  ------------------
  |  |  |  |  |  |  798|   270k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  946|   279k|    } else {\
  |  |  947|  24.3k|      if (XP->child[0] == X) \
  |  |  ------------------
  |  |  |  Branch (947:11): [True: 18.7k, False: 5.57k]
  |  |  ------------------
  |  |  948|  24.3k|	XP->child[0] = R;\
  |  |  949|  24.3k|      else \
  |  |  950|  24.3k|	XP->child[1] = R;\
  |  |  951|  24.3k|    }\
  |  |  952|   304k|    if (R != 0) {\
  |  |  ------------------
  |  |  |  Branch (952:9): [True: 18.9k, False: 285k]
  |  |  ------------------
  |  |  953|  18.9k|      tchunkptr C0, C1;\
  |  |  954|  18.9k|      R->parent = XP;\
  |  |  955|  18.9k|      if ((C0 = X->child[0]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (955:11): [True: 5.07k, False: 13.9k]
  |  |  ------------------
  |  |  956|  5.07k|	R->child[0] = C0;\
  |  |  957|  5.07k|	C0->parent = R;\
  |  |  958|  5.07k|      }\
  |  |  959|  18.9k|      if ((C1 = X->child[1]) != 0) {\
  |  |  ------------------
  |  |  |  Branch (959:11): [True: 5.72k, False: 13.2k]
  |  |  ------------------
  |  |  960|  5.72k|	R->child[1] = C1;\
  |  |  961|  5.72k|	C1->parent = R;\
  |  |  962|  5.72k|      }\
  |  |  963|  18.9k|    }\
  |  |  964|   304k|  }\
  |  |  965|   304k|}
  ------------------
 1346|   304k|    if (rsize < MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|   304k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|   304k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   304k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   304k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   304k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|   304k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|   304k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   304k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1346:9): [True: 73.4k, False: 230k]
  ------------------
 1347|  73.4k|      set_inuse_and_pinuse(m, v, (rsize + nb));
  ------------------
  |  |  819|  73.4k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  73.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  73.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  73.4k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  73.4k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  820|  73.4k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  73.4k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  73.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1348|   230k|    } else {
 1349|   230k|      set_size_and_pinuse_of_inuse_chunk(m, v, nb);
  ------------------
  |  |  824|   230k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|   230k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   230k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|   230k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   230k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1350|   230k|      set_size_and_pinuse_of_free_chunk(r, rsize);
  ------------------
  |  |  627|   230k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|   230k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   230k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|   230k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1351|   230k|      insert_chunk(m, r, rsize);
  ------------------
  |  |  970|   230k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|   230k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|   230k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|   230k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 83.4k, False: 147k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|  83.4k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  83.4k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  83.4k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  83.4k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  83.4k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  83.4k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  83.4k|  mchunkptr F = B;\
  |  |  |  |  833|  83.4k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  83.4k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  83.4k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 73.3k, False: 10.1k]
  |  |  |  |  ------------------
  |  |  |  |  834|  83.4k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|  73.3k|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  73.3k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  83.4k|  else\
  |  |  |  |  836|  83.4k|    F = B->fd;\
  |  |  |  |  837|  83.4k|  B->fd = P;\
  |  |  |  |  838|  83.4k|  F->bk = P;\
  |  |  |  |  839|  83.4k|  P->fd = F;\
  |  |  |  |  840|  83.4k|  P->bk = B;\
  |  |  |  |  841|  83.4k|}
  |  |  ------------------
  |  |  971|   147k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|   147k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|   147k|  tbinptr *H;\
  |  |  |  |  884|   147k|  bindex_t I;\
  |  |  |  |  885|   147k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|   147k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|   147k|{\
  |  |  |  |  |  |  770|   147k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|   147k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|   147k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|   147k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 147k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|   147k|  } else {\
  |  |  |  |  |  |  776|   147k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|   147k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|   147k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|   147k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|   147k|  }\
  |  |  |  |  |  |  779|   147k|}
  |  |  |  |  ------------------
  |  |  |  |  886|   147k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|   147k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|   147k|  X->index = I;\
  |  |  |  |  888|   147k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|   147k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|   147k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|   147k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 80.7k, False: 66.4k]
  |  |  |  |  ------------------
  |  |  |  |  890|  80.7k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|  80.7k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  80.7k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|  80.7k|    *H = X;\
  |  |  |  |  892|  80.7k|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|  80.7k|    X->fd = X->bk = X;\
  |  |  |  |  894|  80.7k|  } else {\
  |  |  |  |  895|  66.4k|    tchunkptr T = *H;\
  |  |  |  |  896|  66.4k|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|  66.4k|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|  66.4k|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 66.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|  66.4k|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|  66.4k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  66.4k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  66.4k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|   143k|    for (;;) {\
  |  |  |  |  898|   143k|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|   143k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|   143k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|   143k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|   143k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|   143k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|   143k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 109k, False: 34.4k]
  |  |  |  |  ------------------
  |  |  |  |  899|   109k|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|   109k|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   109k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|   109k|	K <<= 1;\
  |  |  |  |  901|   109k|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 77.4k, False: 32.0k]
  |  |  |  |  ------------------
  |  |  |  |  902|  77.4k|	  T = *C;\
  |  |  |  |  903|  77.4k|	} else {\
  |  |  |  |  904|  32.0k|	  *C = X;\
  |  |  |  |  905|  32.0k|	  X->parent = T;\
  |  |  |  |  906|  32.0k|	  X->fd = X->bk = X;\
  |  |  |  |  907|  32.0k|	  break;\
  |  |  |  |  908|  32.0k|	}\
  |  |  |  |  909|   109k|      } else {\
  |  |  |  |  910|  34.4k|	tchunkptr F = T->fd;\
  |  |  |  |  911|  34.4k|	T->fd = F->bk = X;\
  |  |  |  |  912|  34.4k|	X->fd = F;\
  |  |  |  |  913|  34.4k|	X->bk = T;\
  |  |  |  |  914|  34.4k|	X->parent = 0;\
  |  |  |  |  915|  34.4k|	break;\
  |  |  |  |  916|  34.4k|      }\
  |  |  |  |  917|   143k|    }\
  |  |  |  |  918|  66.4k|  }\
  |  |  |  |  919|   147k|}
  |  |  ------------------
  ------------------
 1352|   230k|    }
 1353|   304k|    return chunk2mem(v);
  ------------------
  |  |  575|   304k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   304k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   304k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1354|   304k|  }
 1355|   273k|  return NULL;
 1356|   577k|}
lj_alloc.c:alloc_sys:
 1149|  71.2k|{
 1150|  71.2k|  char *tbase = CMFAIL;
  ------------------
  |  |   72|  71.2k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  71.2k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  71.2k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1151|  71.2k|  size_t tsize = 0;
 1152|       |
 1153|       |  /* Directly map large chunks */
 1154|  71.2k|  if (LJ_UNLIKELY(nb >= DEFAULT_MMAP_THRESHOLD)) {
  ------------------
  |  |  146|  71.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 12.7k, False: 58.5k]
  |  |  ------------------
  ------------------
 1155|  12.7k|    void *mem = direct_alloc(m, nb);
 1156|  12.7k|    if (mem != 0)
  ------------------
  |  Branch (1156:9): [True: 12.7k, False: 0]
  ------------------
 1157|  12.7k|      return mem;
 1158|  12.7k|  }
 1159|       |
 1160|  58.5k|  {
 1161|  58.5k|    size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |  754|  58.5k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  58.5k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  58.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  58.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  58.5k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  58.5k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  58.5k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  58.5k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  58.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  58.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  58.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  58.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  58.5k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  58.5k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  58.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  58.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  58.5k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  58.5k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  size_t req = nb + TOP_FOOT_SIZE + SIZE_T_ONE;
  ------------------
  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  ------------------
 1162|  58.5k|    size_t rsize = granularity_align(req);
  ------------------
  |  |  711|  58.5k|  (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   41|  58.5k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                 (((S) + (DEFAULT_GRANULARITY - SIZE_T_ONE))\
  |  |  ------------------
  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  |  |  712|  58.5k|   & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   41|  58.5k|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  |  |  ------------------
  |  |                  & ~(DEFAULT_GRANULARITY - SIZE_T_ONE))
  |  |  ------------------
  |  |  |  |   55|  58.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1163|  58.5k|    if (LJ_LIKELY(rsize > nb)) { /* Fail if wraps around zero */
  ------------------
  |  |  145|  58.5k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 58.5k, False: 0]
  |  |  ------------------
  ------------------
 1164|  58.5k|      char *mp = (char *)(CALL_MMAP(m->prng, rsize));
  ------------------
  |  |  438|  58.5k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  ------------------
 1165|  58.5k|      if (mp != CMFAIL) {
  ------------------
  |  |   72|  58.5k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  58.5k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  58.5k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1165:11): [True: 58.5k, False: 0]
  ------------------
 1166|  58.5k|	tbase = mp;
 1167|  58.5k|	tsize = rsize;
 1168|  58.5k|      }
 1169|  58.5k|    }
 1170|  58.5k|  }
 1171|       |
 1172|  58.5k|  if (tbase != CMFAIL) {
  ------------------
  |  |   72|  58.5k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  58.5k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  58.5k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1172:7): [True: 58.5k, False: 0]
  ------------------
 1173|  58.5k|    msegmentptr sp = &m->seg;
 1174|       |    /* Try to merge with an existing segment */
 1175|   394k|    while (sp != 0 && tbase != sp->base + sp->size)
  ------------------
  |  Branch (1175:12): [True: 347k, False: 46.1k]
  |  Branch (1175:23): [True: 335k, False: 12.3k]
  ------------------
 1176|   335k|      sp = sp->next;
 1177|  58.5k|    if (sp != 0 && segment_holds(sp, m->top)) { /* append */
  ------------------
  |  |  722|  12.3k|  ((char *)(A) >= S->base && (char *)(A) < S->base + S->size)
  |  |  ------------------
  |  |  |  Branch (722:4): [True: 12.3k, False: 4]
  |  |  |  Branch (722:30): [True: 12.3k, False: 65]
  |  |  ------------------
  ------------------
  |  Branch (1177:9): [True: 12.3k, False: 46.1k]
  ------------------
 1178|  12.3k|      sp->size += tsize;
 1179|  12.3k|      init_top(m, m->top, m->topsize + tsize);
 1180|  46.2k|    } else {
 1181|  46.2k|      sp = &m->seg;
 1182|   143k|      while (sp != 0 && sp->base != tbase + tsize)
  ------------------
  |  Branch (1182:14): [True: 139k, False: 4.47k]
  |  Branch (1182:25): [True: 97.6k, False: 41.7k]
  ------------------
 1183|  97.6k|	sp = sp->next;
 1184|  46.2k|      if (sp != 0) {
  ------------------
  |  Branch (1184:11): [True: 41.7k, False: 4.47k]
  ------------------
 1185|  41.7k|	char *oldbase = sp->base;
 1186|  41.7k|	sp->base = tbase;
 1187|  41.7k|	sp->size += tsize;
 1188|  41.7k|	return prepend_alloc(m, tbase, oldbase, nb);
 1189|  41.7k|      } else {
 1190|  4.47k|	add_segment(m, tbase, tsize);
 1191|  4.47k|      }
 1192|  46.2k|    }
 1193|       |
 1194|  16.7k|    if (nb < m->topsize) { /* Allocate from new or extended top space */
  ------------------
  |  Branch (1194:9): [True: 16.7k, False: 0]
  ------------------
 1195|  16.7k|      size_t rsize = m->topsize -= nb;
 1196|  16.7k|      mchunkptr p = m->top;
 1197|  16.7k|      mchunkptr r = m->top = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  16.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1198|  16.7k|      r->head = rsize | PINUSE_BIT;
  ------------------
  |  |  595|  16.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  16.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1199|  16.7k|      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  824|  16.7k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  16.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  16.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  16.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  16.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1200|  16.7k|      return chunk2mem(p);
  ------------------
  |  |  575|  16.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  16.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  16.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1201|  16.7k|    }
 1202|  16.7k|  }
 1203|       |
 1204|      0|  return NULL;
 1205|  58.5k|}
lj_alloc.c:direct_alloc:
  980|  12.7k|{
  981|  12.7k|  size_t mmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |  717|  12.7k|#define mmap_align(S)	page_align(S)
  |  |  ------------------
  |  |  |  |  707|  12.7k| (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  12.7k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  12.7k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  982|  12.7k|  if (LJ_LIKELY(mmsize > nb)) {     /* Check for wrap around 0 */
  ------------------
  |  |  145|  12.7k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 12.7k, False: 0]
  |  |  ------------------
  ------------------
  983|  12.7k|    char *mm = (char *)(DIRECT_MMAP(m->prng, mmsize));
  ------------------
  |  |  531|  12.7k|#define DIRECT_MMAP(prng, s)	CALL_MMAP(prng, s)
  |  |  ------------------
  |  |  |  |  438|  12.7k|#define CALL_MMAP(prng, size)	mmap_probe(prng, size)
  |  |  ------------------
  ------------------
  984|  12.7k|    if (mm != CMFAIL) {
  ------------------
  |  |   72|  12.7k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  12.7k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  12.7k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (984:9): [True: 12.7k, False: 0]
  ------------------
  985|  12.7k|      size_t offset = align_offset(chunk2mem(mm));
  ------------------
  |  |   66|  12.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  12.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  12.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 12.7k, False: 0]
  |  |  ------------------
  |  |   67|  12.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  986|  12.7k|      size_t psize = mmsize - offset - DIRECT_FOOT_PAD;
  ------------------
  |  |  563|  12.7k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  12.7k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  987|  12.7k|      mchunkptr p = (mchunkptr)(mm + offset);
  988|  12.7k|      p->prev_foot = offset | IS_DIRECT_BIT;
  ------------------
  |  |   74|  12.7k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
  989|  12.7k|      p->head = psize|CINUSE_BIT;
  ------------------
  |  |  596|  12.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  12.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
  990|  12.7k|      chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  611|  12.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                    chunk_plus_offset(p, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  600|  12.7k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  597|  12.7k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  12.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  12.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  12.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  12.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|  12.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
  991|  12.7k|      chunk_plus_offset(p, psize+SIZE_T_SIZE)->head = 0;
  ------------------
  |  |  611|  12.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
  992|  12.7k|      return chunk2mem(p);
  ------------------
  |  |  575|  12.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  12.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  12.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  993|  12.7k|    }
  994|  12.7k|  }
  995|      0|  UNUSED(m);
  ------------------
  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  996|      0|  return NULL;
  997|  12.7k|}
lj_alloc.c:prepend_alloc:
 1062|  41.7k|{
 1063|  41.7k|  mchunkptr p = align_as_chunk(newbase);
  ------------------
  |  |  579|  41.7k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  41.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  41.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  41.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  41.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 41.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  41.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|  41.7k|  mchunkptr oldfirst = align_as_chunk(oldbase);
  ------------------
  |  |  579|  41.7k|#define align_as_chunk(A)	(mchunkptr)((A) + align_offset(chunk2mem(A)))
  |  |  ------------------
  |  |  |  |   66|  41.7k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  41.7k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  41.7k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  41.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [True: 41.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |   67|  41.7k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1065|  41.7k|  size_t psize = (size_t)((char *)oldfirst - (char *)p);
 1066|  41.7k|  mchunkptr q = chunk_plus_offset(p, nb);
  ------------------
  |  |  611|  41.7k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1067|  41.7k|  size_t qsize = psize - nb;
 1068|  41.7k|  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
  ------------------
  |  |  824|  41.7k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  41.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  41.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  41.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  41.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1069|       |
 1070|       |  /* consolidate remainder with first chunk of old base */
 1071|  41.7k|  if (oldfirst == m->top) {
  ------------------
  |  Branch (1071:7): [True: 0, False: 41.7k]
  ------------------
 1072|      0|    size_t tsize = m->topsize += qsize;
 1073|      0|    m->top = q;
 1074|      0|    q->head = tsize | PINUSE_BIT;
  ------------------
  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1075|  41.7k|  } else if (oldfirst == m->dv) {
  ------------------
  |  Branch (1075:14): [True: 0, False: 41.7k]
  ------------------
 1076|      0|    size_t dsize = m->dvsize += qsize;
 1077|      0|    m->dv = q;
 1078|      0|    set_size_and_pinuse_of_free_chunk(q, dsize);
  ------------------
  |  |  627|      0|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  595|      0|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  ------------------
  |  |  |  |  623|      0|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  ------------------
  ------------------
 1079|  41.7k|  } else {
 1080|  41.7k|    if (!cinuse(oldfirst)) {
  ------------------
  |  |  603|  41.7k|#define cinuse(p)		((p)->head & CINUSE_BIT)
  |  |  ------------------
  |  |  |  |  596|  41.7k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  41.7k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1080:9): [True: 62, False: 41.6k]
  ------------------
 1081|     62|      size_t nsize = chunksize(oldfirst);
  ------------------
  |  |  605|     62|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|     62|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|     62|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     62|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|     62|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|     62|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1082|     62|      unlink_chunk(m, oldfirst, nsize);
  ------------------
  |  |  974|     62|  if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|     62|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|     62|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|     62|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 1, False: 61]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { unlink_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  844|      1|#define unlink_small_chunk(M, P, S) {\
  |  |  |  |  845|      1|  mchunkptr F = P->fd;\
  |  |  |  |  846|      1|  mchunkptr B = P->bk;\
  |  |  |  |  847|      1|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|      1|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|      1|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  848|      1|  if (F == B) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (848:7): [True: 0, False: 1]
  |  |  |  |  ------------------
  |  |  |  |  849|      0|    clear_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      0|#define clear_smallmap(M,i)	((M)->smallmap &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  850|      1|  } else {\
  |  |  |  |  851|      1|    F->bk = B;\
  |  |  |  |  852|      1|    B->fd = F;\
  |  |  |  |  853|      1|  }\
  |  |  |  |  854|      1|}
  |  |  ------------------
  |  |  975|     61|  } else { tchunkptr TP = (tchunkptr)(P); unlink_large_chunk(M, TP); }
  |  |  ------------------
  |  |  |  |  921|     61|#define unlink_large_chunk(M, X) {\
  |  |  |  |  922|     61|  tchunkptr XP = X->parent;\
  |  |  |  |  923|     61|  tchunkptr R;\
  |  |  |  |  924|     61|  if (X->bk != X) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (924:7): [True: 4, False: 57]
  |  |  |  |  ------------------
  |  |  |  |  925|      4|    tchunkptr F = X->fd;\
  |  |  |  |  926|      4|    R = X->bk;\
  |  |  |  |  927|      4|    F->bk = R;\
  |  |  |  |  928|      4|    R->fd = F;\
  |  |  |  |  929|     57|  } else {\
  |  |  |  |  930|     57|    tchunkptr *RP;\
  |  |  |  |  931|     57|    if (((R = *(RP = &(X->child[1]))) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (931:9): [True: 2, False: 55]
  |  |  |  |  ------------------
  |  |  |  |  932|     57|	((R = *(RP = &(X->child[0]))) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (932:2): [True: 2, False: 53]
  |  |  |  |  ------------------
  |  |  |  |  933|      4|      tchunkptr *CP;\
  |  |  |  |  934|      5|      while ((*(CP = &(R->child[1])) != 0) ||\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (934:14): [True: 0, False: 5]
  |  |  |  |  ------------------
  |  |  |  |  935|      5|	     (*(CP = &(R->child[0])) != 0)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (935:7): [True: 1, False: 4]
  |  |  |  |  ------------------
  |  |  |  |  936|      1|	R = *(RP = CP);\
  |  |  |  |  937|      1|      }\
  |  |  |  |  938|      4|      *RP = 0;\
  |  |  |  |  939|      4|    }\
  |  |  |  |  940|     57|  }\
  |  |  |  |  941|     61|  if (XP != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (941:7): [True: 59, False: 2]
  |  |  |  |  ------------------
  |  |  |  |  942|     59|    tbinptr *H = treebin_at(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|     59|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  943|     59|    if (X == *H) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (943:9): [True: 44, False: 15]
  |  |  |  |  ------------------
  |  |  |  |  944|     44|      if ((*H = R) == 0) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (944:11): [True: 41, False: 3]
  |  |  |  |  ------------------
  |  |  |  |  945|     44|	clear_treemap(M, X->index);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  806|     41|#define clear_treemap(M,i)	((M)->treemap  &= ~idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|     41|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  946|     44|    } else {\
  |  |  |  |  947|     15|      if (XP->child[0] == X) \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (947:11): [True: 11, False: 4]
  |  |  |  |  ------------------
  |  |  |  |  948|     15|	XP->child[0] = R;\
  |  |  |  |  949|     15|      else \
  |  |  |  |  950|     15|	XP->child[1] = R;\
  |  |  |  |  951|     15|    }\
  |  |  |  |  952|     59|    if (R != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (952:9): [True: 6, False: 53]
  |  |  |  |  ------------------
  |  |  |  |  953|      6|      tchunkptr C0, C1;\
  |  |  |  |  954|      6|      R->parent = XP;\
  |  |  |  |  955|      6|      if ((C0 = X->child[0]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (955:11): [True: 2, False: 4]
  |  |  |  |  ------------------
  |  |  |  |  956|      2|	R->child[0] = C0;\
  |  |  |  |  957|      2|	C0->parent = R;\
  |  |  |  |  958|      2|      }\
  |  |  |  |  959|      6|      if ((C1 = X->child[1]) != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (959:11): [True: 1, False: 5]
  |  |  |  |  ------------------
  |  |  |  |  960|      1|	R->child[1] = C1;\
  |  |  |  |  961|      1|	C1->parent = R;\
  |  |  |  |  962|      1|      }\
  |  |  |  |  963|      6|    }\
  |  |  |  |  964|     59|  }\
  |  |  |  |  965|     61|}
  |  |  ------------------
  ------------------
 1083|     62|      oldfirst = chunk_plus_offset(oldfirst, nsize);
  ------------------
  |  |  611|     62|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1084|     62|      qsize += nsize;
 1085|     62|    }
 1086|  41.7k|    set_free_with_pinuse(q, qsize, oldfirst);
  ------------------
  |  |  631|  41.7k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  41.7k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  41.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  41.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  41.7k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  41.7k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  41.7k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  41.7k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1087|  41.7k|    insert_chunk(m, q, qsize);
  ------------------
  |  |  970|  41.7k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  41.7k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  41.7k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  41.7k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 0, False: 41.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|      0|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|      0|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|      0|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|      0|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|      0|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|      0|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|      0|  mchunkptr F = B;\
  |  |  |  |  833|      0|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|      0|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  834|      0|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|      0|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|      0|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|      0|  else\
  |  |  |  |  836|      0|    F = B->fd;\
  |  |  |  |  837|      0|  B->fd = P;\
  |  |  |  |  838|      0|  F->bk = P;\
  |  |  |  |  839|      0|  P->fd = F;\
  |  |  |  |  840|      0|  P->bk = B;\
  |  |  |  |  841|      0|}
  |  |  ------------------
  |  |  971|  41.7k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|  41.7k|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|  41.7k|  tbinptr *H;\
  |  |  |  |  884|  41.7k|  bindex_t I;\
  |  |  |  |  885|  41.7k|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|  41.7k|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|  41.7k|{\
  |  |  |  |  |  |  770|  41.7k|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  41.7k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|  41.7k|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|  41.7k|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 41.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|  41.7k|  } else {\
  |  |  |  |  |  |  776|  41.7k|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|  41.7k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|  41.7k|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|  41.7k|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|  41.7k|  }\
  |  |  |  |  |  |  779|  41.7k|}
  |  |  |  |  ------------------
  |  |  |  |  886|  41.7k|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|  41.7k|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|  41.7k|  X->index = I;\
  |  |  |  |  888|  41.7k|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|  41.7k|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|  41.7k|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  41.7k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 41.7k, False: 41]
  |  |  |  |  ------------------
  |  |  |  |  890|  41.7k|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|  41.7k|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  41.7k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|  41.7k|    *H = X;\
  |  |  |  |  892|  41.7k|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|  41.7k|    X->fd = X->bk = X;\
  |  |  |  |  894|  41.7k|  } else {\
  |  |  |  |  895|     41|    tchunkptr T = *H;\
  |  |  |  |  896|     41|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|     41|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|     41|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 41]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|     41|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|     41|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     41|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|     41|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|     45|    for (;;) {\
  |  |  |  |  898|     45|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|     45|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|     45|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|     45|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|     45|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|     45|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|     45|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 36, False: 9]
  |  |  |  |  ------------------
  |  |  |  |  899|     36|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|     36|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     36|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|     36|	K <<= 1;\
  |  |  |  |  901|     36|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 4, False: 32]
  |  |  |  |  ------------------
  |  |  |  |  902|      4|	  T = *C;\
  |  |  |  |  903|     32|	} else {\
  |  |  |  |  904|     32|	  *C = X;\
  |  |  |  |  905|     32|	  X->parent = T;\
  |  |  |  |  906|     32|	  X->fd = X->bk = X;\
  |  |  |  |  907|     32|	  break;\
  |  |  |  |  908|     32|	}\
  |  |  |  |  909|     36|      } else {\
  |  |  |  |  910|      9|	tchunkptr F = T->fd;\
  |  |  |  |  911|      9|	T->fd = F->bk = X;\
  |  |  |  |  912|      9|	X->fd = F;\
  |  |  |  |  913|      9|	X->bk = T;\
  |  |  |  |  914|      9|	X->parent = 0;\
  |  |  |  |  915|      9|	break;\
  |  |  |  |  916|      9|      }\
  |  |  |  |  917|     45|    }\
  |  |  |  |  918|     41|  }\
  |  |  |  |  919|  41.7k|}
  |  |  ------------------
  ------------------
 1088|  41.7k|  }
 1089|       |
 1090|  41.7k|  return chunk2mem(p);
  ------------------
  |  |  575|  41.7k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  41.7k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  41.7k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1091|  41.7k|}
lj_alloc.c:add_segment:
 1095|  4.47k|{
 1096|       |  /* Determine locations and sizes of segment, fenceposts, old top */
 1097|  4.47k|  char *old_top = (char *)m->top;
 1098|  4.47k|  msegmentptr oldsp = segment_holding(m, old_top);
 1099|       |#if LUAJIT_USE_ASAN
 1100|       |  ASAN_UNPOISON_MEMORY_REGION(oldsp, sizeof(struct malloc_segment));
 1101|       |#endif
 1102|  4.47k|  char *old_end = oldsp->base + oldsp->size;
 1103|  4.47k|  size_t ssize = pad_request(sizeof(struct malloc_segment));
  ------------------
  |  |  587|  4.47k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  558|  4.47k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  4.47k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1104|  4.47k|  char *rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |   58|  4.47k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  ------------------
  |  |  |  |   49|  4.47k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
                char *rawsp = old_end - (ssize + FOUR_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1105|  4.47k|  size_t offset = align_offset(chunk2mem(rawsp));
  ------------------
  |  |   66|  4.47k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (66:3): [True: 0, False: 4.47k]
  |  |  ------------------
  |  |   67|  4.47k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1106|  4.47k|  char *asp = rawsp + offset;
 1107|  4.47k|  char *csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
  ------------------
  |  |  567|  4.47k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  4.47k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1107:15): [True: 3.10k, False: 1.36k]
  ------------------
 1108|  4.47k|  mchunkptr sp = (mchunkptr)csp;
 1109|  4.47k|  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
  ------------------
  |  |  575|  4.47k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  4.47k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  4.47k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1110|       |#if LUAJIT_USE_ASAN
 1111|       |  ss = (msegmentptr)((void *)ss - REDZONE_SIZE);
 1112|       |#endif
 1113|  4.47k|  mchunkptr tnext = chunk_plus_offset(sp, ssize);
  ------------------
  |  |  611|  4.47k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1114|  4.47k|  mchunkptr p = tnext;
 1115|       |
 1116|       |  /* reset top to new space */
 1117|  4.47k|  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
  ------------------
  |  |  754|  4.47k|  (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |   66|  4.47k| ((((size_t)(A) & CHUNK_ALIGN_MASK) == 0)? 0 :\
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (66:3): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |   67|  4.47k|  ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MALLOC_ALIGNMENT - ((size_t)(A) & CHUNK_ALIGN_MASK)) & CHUNK_ALIGN_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  587|  4.47k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|  4.47k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|  4.47k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (align_offset(TWO_SIZE_T_SIZES)+pad_request(sizeof(struct malloc_segment))+MIN_CHUNK_SIZE)
  |  |  ------------------
  |  |  |  |  567|  4.47k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|  4.47k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|  4.47k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|  4.47k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1118|       |
 1119|       |  /* Set up segment record */
 1120|  4.47k|  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
  ------------------
  |  |  824|  4.47k|  ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  595|  4.47k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  4.47k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (s|PINUSE_BIT|CINUSE_BIT))
  |  |  ------------------
  |  |  |  |  596|  4.47k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  4.47k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1121|  4.47k|  *ss = m->seg; /* Push current record */
 1122|  4.47k|  m->seg.base = tbase;
 1123|  4.47k|  m->seg.size = tsize;
 1124|  4.47k|  m->seg.next = ss;
 1125|       |
 1126|       |  /* Insert trailing fenceposts */
 1127|  18.0k|  for (;;) {
 1128|  18.0k|    mchunkptr nextp = chunk_plus_offset(p, SIZE_T_SIZE);
  ------------------
  |  |  611|  18.0k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1129|  18.0k|    p->head = FENCEPOST_HEAD;
  ------------------
  |  |  600|  18.0k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  597|  18.0k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  18.0k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  18.0k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  18.0k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  18.0k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|  18.0k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
 1130|  18.0k|    if ((char *)(&(nextp->head)) < old_end)
  ------------------
  |  Branch (1130:9): [True: 13.5k, False: 4.47k]
  ------------------
 1131|  13.5k|      p = nextp;
 1132|  4.47k|    else
 1133|  4.47k|      break;
 1134|  18.0k|  }
 1135|       |
 1136|       |  /* Insert the rest of old top into a bin as an ordinary free chunk */
 1137|  4.47k|  if (csp != old_top) {
  ------------------
  |  Branch (1137:7): [True: 1.36k, False: 3.10k]
  ------------------
 1138|  1.36k|    mchunkptr q = (mchunkptr)old_top;
 1139|  1.36k|    size_t psize = (size_t)(csp - old_top);
 1140|  1.36k|    mchunkptr tn = chunk_plus_offset(q, psize);
  ------------------
  |  |  611|  1.36k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1141|  1.36k|    set_free_with_pinuse(q, psize, tn);
  ------------------
  |  |  631|  1.36k|  (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  607|  1.36k|#define clear_pinuse(p)		((p)->head &= ~PINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.36k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.36k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (clear_pinuse(n), set_size_and_pinuse_of_free_chunk(p, s))
  |  |  ------------------
  |  |  |  |  627|  1.36k|  ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.36k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.36k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((p)->head = (s|PINUSE_BIT), set_foot(p, s))
  |  |  |  |  ------------------
  |  |  |  |  |  |  623|  1.36k|#define set_foot(p, s)	(((mchunkptr)((char *)(p) + (s)))->prev_foot = (s))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1142|  1.36k|    insert_chunk(m, q, psize);
  ------------------
  |  |  970|  1.36k|  if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  758|  1.36k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  677|  1.36k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  ------------------
  |  |  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  |  |  ------------------
  |  |  |  |  |  |  675|  1.36k|#define NSMALLBINS		(32U)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (758:22): [True: 1.02k, False: 340]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (is_small(S)) { insert_small_chunk(M, P, S)\
  |  |  ------------------
  |  |  |  |  829|  1.02k|#define insert_small_chunk(M, P, S) {\
  |  |  |  |  830|  1.02k|  bindex_t I = small_index(S);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  759|  1.02k|#define small_index(s)		((s)  >> SMALLBIN_SHIFT)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  677|  1.02k|#define SMALLBIN_SHIFT		(3U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  831|  1.02k|  mchunkptr B = smallbin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  764|  1.02k|#define smallbin_at(M, i)	((sbinptr)((char *)&((M)->smallbins[(i)<<1])))
  |  |  |  |  ------------------
  |  |  |  |  832|  1.02k|  mchunkptr F = B;\
  |  |  |  |  833|  1.02k|  if (!smallmap_is_marked(M, I))\
  |  |  |  |  ------------------
  |  |  |  |  |  |  803|  1.02k|#define smallmap_is_marked(M,i)	((M)->smallmap &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|  1.02k|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (833:7): [True: 675, False: 352]
  |  |  |  |  ------------------
  |  |  |  |  834|  1.02k|    mark_smallmap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  801|    675|#define mark_smallmap(M,i)	((M)->smallmap |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|    675|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  835|  1.02k|  else\
  |  |  |  |  836|  1.02k|    F = B->fd;\
  |  |  |  |  837|  1.02k|  B->fd = P;\
  |  |  |  |  838|  1.02k|  F->bk = P;\
  |  |  |  |  839|  1.02k|  P->fd = F;\
  |  |  |  |  840|  1.02k|  P->bk = B;\
  |  |  |  |  841|  1.02k|}
  |  |  ------------------
  |  |  971|  1.02k|  } else { tchunkptr TP = (tchunkptr)(P); insert_large_chunk(M, TP, S); }
  |  |  ------------------
  |  |  |  |  882|    340|#define insert_large_chunk(M, X, S) {\
  |  |  |  |  883|    340|  tbinptr *H;\
  |  |  |  |  884|    340|  bindex_t I;\
  |  |  |  |  885|    340|  compute_tree_index(S, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  768|    340|#define compute_tree_index(S, I)\
  |  |  |  |  |  |  769|    340|{\
  |  |  |  |  |  |  770|    340|  unsigned int X = (unsigned int)(S >> TREEBIN_SHIFT);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|    340|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  771|    340|  if (X == 0) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (771:7): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  772|      0|    I = 0;\
  |  |  |  |  |  |  773|    340|  } else if (X > 0xFFFF) {\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (773:14): [True: 0, False: 340]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  774|      0|    I = NTREEBINS-1;\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|      0|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  775|    340|  } else {\
  |  |  |  |  |  |  776|    340|    unsigned int K = lj_fls(X);\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  149|    340|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  777|    340|    I =  (bindex_t)((K << 1) + ((S >> (K + (TREEBIN_SHIFT-1)) & 1)));\
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|    340|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  778|    340|  }\
  |  |  |  |  |  |  779|    340|}
  |  |  |  |  ------------------
  |  |  |  |  886|    340|  H = treebin_at(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  765|    340|#define treebin_at(M,i)		(&((M)->treebins[i]))
  |  |  |  |  ------------------
  |  |  |  |  887|    340|  X->index = I;\
  |  |  |  |  888|    340|  X->child[0] = X->child[1] = 0;\
  |  |  |  |  889|    340|  if (!treemap_is_marked(M, I)) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  807|    340|#define treemap_is_marked(M,i)	((M)->treemap  &   idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|    340|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (889:7): [True: 279, False: 61]
  |  |  |  |  ------------------
  |  |  |  |  890|    279|    mark_treemap(M, I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  805|    279|#define mark_treemap(M,i)	((M)->treemap  |=  idx2bit(i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  798|    279|#define idx2bit(i)		((binmap_t)(1) << (i))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  891|    279|    *H = X;\
  |  |  |  |  892|    279|    X->parent = (tchunkptr)H;\
  |  |  |  |  893|    279|    X->fd = X->bk = X;\
  |  |  |  |  894|    279|  } else {\
  |  |  |  |  895|     61|    tchunkptr T = *H;\
  |  |  |  |  896|     61|    size_t K = S << leftshift_for_tree_index(I);\
  |  |  |  |  ------------------
  |  |  |  |  |  |  787|     61|   ((i == NTREEBINS-1)? 0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  676|     61|#define NTREEBINS		(32U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (787:5): [True: 0, False: 61]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  788|     61|    ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   50|     61|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|     61|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                   ((SIZE_T_BITSIZE-SIZE_T_ONE) - (((i) >> 1) + TREEBIN_SHIFT - 2)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  679|     61|#define TREEBIN_SHIFT		(8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  897|     77|    for (;;) {\
  |  |  |  |  898|     77|      if (chunksize(T) != S) {\
  |  |  |  |  ------------------
  |  |  |  |  |  |  605|     77|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  597|     77|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  595|     77|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   55|     77|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  596|     77|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |   56|     77|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (898:11): [True: 74, False: 3]
  |  |  |  |  ------------------
  |  |  |  |  899|     74|	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   50|     74|#define SIZE_T_BITSIZE		(sizeof(size_t) << 3)
  |  |  |  |  ------------------
  |  |  |  |               	tchunkptr *C = &(T->child[(K >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1]);\
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|     74|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |  900|     74|	K <<= 1;\
  |  |  |  |  901|     74|	if (*C != 0) {\
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (901:6): [True: 16, False: 58]
  |  |  |  |  ------------------
  |  |  |  |  902|     16|	  T = *C;\
  |  |  |  |  903|     58|	} else {\
  |  |  |  |  904|     58|	  *C = X;\
  |  |  |  |  905|     58|	  X->parent = T;\
  |  |  |  |  906|     58|	  X->fd = X->bk = X;\
  |  |  |  |  907|     58|	  break;\
  |  |  |  |  908|     58|	}\
  |  |  |  |  909|     74|      } else {\
  |  |  |  |  910|      3|	tchunkptr F = T->fd;\
  |  |  |  |  911|      3|	T->fd = F->bk = X;\
  |  |  |  |  912|      3|	X->fd = F;\
  |  |  |  |  913|      3|	X->bk = T;\
  |  |  |  |  914|      3|	X->parent = 0;\
  |  |  |  |  915|      3|	break;\
  |  |  |  |  916|      3|      }\
  |  |  |  |  917|     77|    }\
  |  |  |  |  918|     61|  }\
  |  |  |  |  919|    340|}
  |  |  ------------------
  ------------------
 1143|  1.36k|  }
 1144|  4.47k|}
lj_alloc.c:lj_alloc_realloc:
 1642|   362k|{
 1643|       |#if LUAJIT_USE_ASAN
 1644|       |  if (nsize >= MAX_REQUEST)
 1645|       |    return NULL;
 1646|       |
 1647|       |  mstate m = (mstate)msp;
 1648|       |
 1649|       |  size_t mem_size = asan_get_size(ptr, MEM_SIZE);
 1650|       |  size_t poison_size = asan_get_size(ptr, POISON_SIZE);
 1651|       |
 1652|       |  void *newmem = lj_alloc_malloc(m, nsize);
 1653|       |
 1654|       |  if (newmem == NULL)
 1655|       |    return NULL;
 1656|       |
 1657|       |  memcpy(newmem, ptr, nsize > mem_size ? mem_size : nsize);
 1658|       |  ASAN_POISON_MEMORY_REGION(ptr - REDZONE_SIZE, poison_size);
 1659|       |  return newmem;
 1660|       |#else
 1661|   362k|  if (nsize >= MAX_REQUEST) {
  ------------------
  |  |  582|   362k|#define MAX_REQUEST		((~MIN_CHUNK_SIZE+1) << 2)
  |  |  ------------------
  |  |  |  |  567|   362k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|   362k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   362k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   362k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   362k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   362k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1661:7): [True: 0, False: 362k]
  ------------------
 1662|      0|    return NULL;
 1663|   362k|  } else {
 1664|   362k|    mstate m = (mstate)msp;
 1665|   362k|    mchunkptr oldp = mem2chunk(ptr);
  ------------------
  |  |  576|   362k|#define mem2chunk(mem)		((mchunkptr)((char *)(mem) - TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|   362k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   362k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1666|   362k|    size_t oldsize = chunksize(oldp);
  ------------------
  |  |  605|   362k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|   362k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   362k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|   362k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|   362k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1667|   362k|    mchunkptr next = chunk_plus_offset(oldp, oldsize);
  ------------------
  |  |  611|   362k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1668|   362k|    mchunkptr newp = 0;
 1669|   362k|    size_t nb = request2size(nsize);
  ------------------
  |  |  591|   362k|  (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  583|   362k|#define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  567|   362k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  556|   362k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   362k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|   362k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   362k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   39|   362k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|   362k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   362k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define MIN_REQUEST		(MIN_CHUNK_SIZE - CHUNK_OVERHEAD - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  567|      0|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  556|      0|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|      0|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|      0|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|      0|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (((req) < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(req))
  |  |  ------------------
  |  |  |  |  587|   362k|   (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |  558|   362k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|   362k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   362k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   362k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                  (((req) + CHUNK_OVERHEAD + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   62|   362k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   39|   362k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (591:4): [True: 0, False: 362k]
  |  |  ------------------
  ------------------
 1670|       |
 1671|       |    /* Try to either shrink or extend into top. Else malloc-copy-free */
 1672|   362k|    if (is_direct(oldp)) {
  ------------------
  |  |  634|   362k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |  595|   362k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|   362k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  ------------------
  |  |  |  |   74|  23.1k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  23.1k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (634:4): [True: 23.1k, False: 339k]
  |  |  |  Branch (634:33): [True: 1.45k, False: 21.6k]
  |  |  ------------------
  ------------------
 1673|  1.45k|      newp = direct_resize(oldp, nb);  /* this may return NULL. */
 1674|   360k|    } else if (oldsize >= nb) { /* already big enough */
  ------------------
  |  Branch (1674:16): [True: 8.25k, False: 352k]
  ------------------
 1675|  8.25k|      size_t rsize = oldsize - nb;
 1676|  8.25k|      newp = oldp;
 1677|  8.25k|      if (rsize >= MIN_CHUNK_SIZE) {
  ------------------
  |  |  567|  8.25k|  ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |  556|  8.25k|#define MCHUNK_SIZE		(sizeof(mchunk))
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  8.25k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  8.25k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((MCHUNK_SIZE + CHUNK_ALIGN_MASK) & ~CHUNK_ALIGN_MASK)
  |  |  ------------------
  |  |  |  |   62|  8.25k|#define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   39|  8.25k|#define MALLOC_ALIGNMENT	((size_t)8U)
  |  |  |  |  ------------------
  |  |  |  |               #define CHUNK_ALIGN_MASK	(MALLOC_ALIGNMENT - SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.25k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1677:11): [True: 8.00k, False: 256]
  ------------------
 1678|  8.00k|	mchunkptr rem = chunk_plus_offset(newp, nb);
  ------------------
  |  |  611|  8.00k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1679|  8.00k|	set_inuse(m, newp, nb);
  ------------------
  |  |  814|  8.00k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  8.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  8.00k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  8.00k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  8.00k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  8.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1680|  8.00k|	set_inuse(m, rem, rsize);
  ------------------
  |  |  814|  8.00k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  8.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  8.00k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  8.00k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  8.00k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  8.00k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  8.00k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1681|  8.00k|	lj_alloc_free(m, chunk2mem(rem));
  ------------------
  |  |  575|  8.00k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  8.00k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  8.00k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1682|  8.00k|      }
 1683|   352k|    } else if (next == m->top && oldsize + m->topsize > nb) {
  ------------------
  |  Branch (1683:16): [True: 16.5k, False: 336k]
  |  Branch (1683:34): [True: 16.2k, False: 303]
  ------------------
 1684|       |      /* Expand into top */
 1685|  16.2k|      size_t newsize = oldsize + m->topsize;
 1686|  16.2k|      size_t newtopsize = newsize - nb;
 1687|  16.2k|      mchunkptr newtop = chunk_plus_offset(oldp, nb);
  ------------------
  |  |  611|  16.2k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1688|  16.2k|      set_inuse(m, oldp, nb);
  ------------------
  |  |  814|  16.2k|  ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  595|  16.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  16.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((p)->head = (((p)->head & PINUSE_BIT)|s|CINUSE_BIT),\
  |  |  ------------------
  |  |  |  |  596|  16.2k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  16.2k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  815|  16.2k|  ((mchunkptr)(((char *)(p)) + (s)))->head |= PINUSE_BIT)
  |  |  ------------------
  |  |  |  |  595|  16.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  16.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1689|  16.2k|      newtop->head = newtopsize |PINUSE_BIT;
  ------------------
  |  |  595|  16.2k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  16.2k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1690|  16.2k|      m->top = newtop;
 1691|  16.2k|      m->topsize = newtopsize;
 1692|  16.2k|      newp = oldp;
 1693|  16.2k|    }
 1694|       |
 1695|   362k|    if (newp != 0) {
  ------------------
  |  Branch (1695:9): [True: 25.9k, False: 336k]
  ------------------
 1696|  25.9k|      return chunk2mem(newp);
  ------------------
  |  |  575|  25.9k|#define chunk2mem(p)		((void *)((char *)(p) + TWO_SIZE_T_SIZES))
  |  |  ------------------
  |  |  |  |   57|  25.9k|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  25.9k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1697|   336k|    } else {
 1698|   336k|      void *newmem = lj_alloc_malloc(m, nsize);
 1699|   336k|      if (newmem != 0) {
  ------------------
  |  Branch (1699:11): [True: 336k, False: 0]
  ------------------
 1700|   336k|	size_t oc = oldsize - overhead_for(oldp);
  ------------------
  |  |  638|   336k| (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  634|   336k|  (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|   336k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|   336k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |                 (!((p)->head & PINUSE_BIT) && ((p)->prev_foot & IS_DIRECT_BIT))
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|  19.5k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  19.5k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (634:4): [True: 19.5k, False: 316k]
  |  |  |  |  |  Branch (634:33): [True: 0, False: 19.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  561|      0|#define DIRECT_CHUNK_OVERHEAD	(TWO_SIZE_T_SIZES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   57|      0|#define TWO_SIZE_T_SIZES	(SIZE_T_SIZE<<1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   49|      0|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                (is_direct(p)? DIRECT_CHUNK_OVERHEAD : CHUNK_OVERHEAD)
  |  |  ------------------
  |  |  |  |  558|   336k|#define CHUNK_OVERHEAD		(SIZE_T_SIZE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|   336k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1701|   336k|	memcpy(newmem, ptr, oc < nsize ? oc : nsize);
  ------------------
  |  Branch (1701:22): [True: 336k, False: 0]
  ------------------
 1702|   336k|	lj_alloc_free(m, ptr);
 1703|   336k|      }
 1704|   336k|      return newmem;
 1705|   336k|    }
 1706|   362k|  }
 1707|   362k|#endif
 1708|   362k|}
lj_alloc.c:direct_resize:
 1000|  1.45k|{
 1001|  1.45k|  size_t oldsize = chunksize(oldp);
  ------------------
  |  |  605|  1.45k|#define chunksize(p)		((p)->head & ~(INUSE_BITS))
  |  |  ------------------
  |  |  |  |  597|  1.45k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.45k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.45k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  1.45k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.45k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1002|  1.45k|  if (is_small(nb)) /* Can't shrink direct regions below small size */
  ------------------
  |  |  758|  1.45k|#define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  677|  1.45k|#define SMALLBIN_SHIFT		(3U)
  |  |  ------------------
  |  |               #define is_small(s)		(((s) >> SMALLBIN_SHIFT) < NSMALLBINS)
  |  |  ------------------
  |  |  |  |  675|  1.45k|#define NSMALLBINS		(32U)
  |  |  ------------------
  |  |  |  Branch (758:22): [True: 0, False: 1.45k]
  |  |  ------------------
  ------------------
 1003|      0|    return NULL;
 1004|       |  /* Keep old chunk if big enough but not too big */
 1005|  1.45k|  if (oldsize >= nb + SIZE_T_SIZE &&
  ------------------
  |  |   49|  2.91k|#define SIZE_T_SIZE		(sizeof(size_t))
  ------------------
  |  Branch (1005:7): [True: 277, False: 1.17k]
  ------------------
 1006|  1.45k|      (oldsize - nb) <= (DEFAULT_GRANULARITY >> 1)) {
  ------------------
  |  |   41|    277|#define DEFAULT_GRANULARITY	((size_t)128U * (size_t)1024U)
  ------------------
  |  Branch (1006:7): [True: 262, False: 15]
  ------------------
 1007|    262|    return oldp;
 1008|  1.19k|  } else {
 1009|  1.19k|    size_t offset = oldp->prev_foot & ~IS_DIRECT_BIT;
  ------------------
  |  |   74|  1.19k|#define IS_DIRECT_BIT		(SIZE_T_ONE)
  |  |  ------------------
  |  |  |  |   55|  1.19k|#define SIZE_T_ONE		((size_t)1)
  |  |  ------------------
  ------------------
 1010|  1.19k|    size_t oldmmsize = oldsize + offset + DIRECT_FOOT_PAD;
  ------------------
  |  |  563|  1.19k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  1.19k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.19k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1011|  1.19k|    size_t newmmsize = mmap_align(nb + SIX_SIZE_T_SIZES + CHUNK_ALIGN_MASK);
  ------------------
  |  |  717|  1.19k|#define mmap_align(S)	page_align(S)
  |  |  ------------------
  |  |  |  |  707|  1.19k| (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  1.19k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.19k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |  648|  1.19k|#define LJ_PAGESIZE		4096
  |  |  |  |  ------------------
  |  |  |  |                (((S) + (LJ_PAGESIZE - SIZE_T_ONE)) & ~(LJ_PAGESIZE - SIZE_T_ONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   55|  1.19k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1012|  1.19k|    char *cp = (char *)CALL_MREMAP((char *)oldp - offset,
  ------------------
  |  |  513|  1.19k|#define CALL_MREMAP(addr, osz, nsz, mv) CALL_MREMAP_((addr), (osz), (nsz), (mv))
  ------------------
 1013|  1.19k|				   oldmmsize, newmmsize, CALL_MREMAP_MV);
 1014|  1.19k|    if (cp != CMFAIL) {
  ------------------
  |  |   72|  1.19k|#define CMFAIL			((char *)(MFAIL)) /* defined for convenience */
  |  |  ------------------
  |  |  |  |   71|  1.19k|#define MFAIL			((void *)(MAX_SIZE_T))
  |  |  |  |  ------------------
  |  |  |  |  |  |   38|  1.19k|#define MAX_SIZE_T		(~(size_t)0)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1014:9): [True: 1.19k, False: 0]
  ------------------
 1015|  1.19k|      mchunkptr newp = (mchunkptr)(cp + offset);
 1016|  1.19k|      size_t psize = newmmsize - offset - DIRECT_FOOT_PAD;
  ------------------
  |  |  563|  1.19k|#define DIRECT_FOOT_PAD		(FOUR_SIZE_T_SIZES)
  |  |  ------------------
  |  |  |  |   58|  1.19k|#define FOUR_SIZE_T_SIZES	(SIZE_T_SIZE<<2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   49|  1.19k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1017|  1.19k|      newp->head = psize|CINUSE_BIT;
  ------------------
  |  |  596|  1.19k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  ------------------
  |  |  |  |   56|  1.19k|#define SIZE_T_TWO		((size_t)2)
  |  |  ------------------
  ------------------
 1018|  1.19k|      chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  611|  1.19k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
                    chunk_plus_offset(newp, psize)->head = FENCEPOST_HEAD;
  ------------------
  |  |  600|  1.19k|#define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |  597|  1.19k|#define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  595|  1.19k|#define PINUSE_BIT		(SIZE_T_ONE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   55|  1.19k|#define SIZE_T_ONE		((size_t)1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define INUSE_BITS		(PINUSE_BIT|CINUSE_BIT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  596|  1.19k|#define CINUSE_BIT		(SIZE_T_TWO)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   56|  1.19k|#define SIZE_T_TWO		((size_t)2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define FENCEPOST_HEAD		(INUSE_BITS|SIZE_T_SIZE)
  |  |  ------------------
  |  |  |  |   49|  1.19k|#define SIZE_T_SIZE		(sizeof(size_t))
  |  |  ------------------
  ------------------
 1019|  1.19k|      chunk_plus_offset(newp, psize+SIZE_T_SIZE)->head = 0;
  ------------------
  |  |  611|  1.19k|#define chunk_plus_offset(p, s)		((mchunkptr)(((char *)(p)) + (s)))
  ------------------
 1020|  1.19k|      return newp;
 1021|  1.19k|    }
 1022|  1.19k|  }
 1023|      0|  return NULL;
 1024|  1.45k|}

lua_checkstack:
  103|   912k|{
  104|   912k|  if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   92|  1.82M|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
                if (size > LUAI_MAXCSTACK || (L->top - L->base + size) > LUAI_MAXCSTACK) {
  ------------------
  |  |   92|   912k|#define LUAI_MAXCSTACK	8000	/* Max. # of stack slots for a C func (<10K). */
  ------------------
  |  Branch (104:7): [True: 0, False: 912k]
  |  Branch (104:32): [True: 0, False: 912k]
  ------------------
  105|      0|    return 0;  /* Stack overflow. */
  106|   912k|  } else if (size > 0) {
  ------------------
  |  Branch (106:14): [True: 884k, False: 28.3k]
  ------------------
  107|   884k|    int avail = (int)(mref(L->maxstack, TValue) - L->top);
  ------------------
  |  |   36|   884k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  108|   884k|    if (size > avail &&
  ------------------
  |  Branch (108:9): [True: 0, False: 884k]
  ------------------
  109|   884k|	lj_state_cpgrowstack(L, (MSize)(size - avail)) != LUA_OK) {
  ------------------
  |  |   43|      0|#define LUA_OK		0
  ------------------
  |  Branch (109:2): [True: 0, False: 0]
  ------------------
  110|      0|      L->top--;
  111|      0|      return 0;  /* Out of memory. */
  112|      0|    }
  113|   884k|  }
  114|   912k|  return 1;
  115|   912k|}
luaL_checkstack:
  118|   912k|{
  119|   912k|  if (!lua_checkstack(L, size))
  ------------------
  |  Branch (119:7): [True: 0, False: 912k]
  ------------------
  120|      0|    lj_err_callerv(L, LJ_ERR_STKOVM, msg);
  121|   912k|}
lua_settop:
  151|  4.12M|{
  152|  4.12M|  if (idx >= 0) {
  ------------------
  |  Branch (152:7): [True: 2.97M, False: 1.14M]
  ------------------
  153|  2.97M|    lj_checkapi(idx <= tvref(L->maxstack) - L->base, "bad stack slot %d", idx);
  ------------------
  |  |  357|  2.97M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.97M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.97M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.97M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  154|  2.97M|    if (L->base + idx > L->top) {
  ------------------
  |  Branch (154:9): [True: 2.95M, False: 14.3k]
  ------------------
  155|  2.95M|      if (L->base + idx >= tvref(L->maxstack))
  ------------------
  |  |  217|  2.95M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.95M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (155:11): [True: 0, False: 2.95M]
  ------------------
  156|      0|	lj_state_growstack(L, (MSize)idx - (MSize)(L->top - L->base));
  157|  8.87M|      do { setnilV(L->top++); } while (L->top < L->base + idx);
  ------------------
  |  |  872|  8.87M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  |  Branch (157:40): [True: 5.91M, False: 2.95M]
  ------------------
  158|  2.95M|    } else {
  159|  14.3k|      L->top = L->base + idx;
  160|  14.3k|    }
  161|  2.97M|  } else {
  162|  1.14M|    lj_checkapi(-(idx+1) <= (L->top - L->base), "bad stack slot %d", idx);
  ------------------
  |  |  357|  1.14M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.14M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.14M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.14M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  163|  1.14M|    L->top += idx+1;  /* Shrinks top (idx < 0). */
  164|  1.14M|  }
  165|  4.12M|}
lua_remove:
  168|   479k|{
  169|   479k|  TValue *p = index2adr_stack(L, idx);
  170|   958k|  while (++p < L->top) copyTV(L, p-1, p);
  ------------------
  |  Branch (170:10): [True: 479k, False: 479k]
  ------------------
  171|   479k|  L->top--;
  172|   479k|}
lua_insert:
  175|  13.6k|{
  176|  13.6k|  TValue *q, *p = index2adr_stack(L, idx);
  177|  27.3k|  for (q = L->top; q > p; q--) copyTV(L, q, q-1);
  ------------------
  |  Branch (177:20): [True: 13.6k, False: 13.6k]
  ------------------
  178|  13.6k|  copyTV(L, p, L->top);
  179|  13.6k|}
lua_copy:
  210|  13.6k|{
  211|  13.6k|  copy_slot(L, index2adr(L, fromidx), toidx);
  212|  13.6k|}
lua_pushvalue:
  215|  1.54M|{
  216|  1.54M|  copyTV(L, L->top, index2adr(L, idx));
  217|  1.54M|  incr_top(L);
  ------------------
  |  |   12|  1.54M|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  3.09M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.54M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 1.54M]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  218|  1.54M|}
lua_type:
  223|  2.90M|{
  224|  2.90M|  cTValue *o = index2adr(L, idx);
  225|  2.90M|  if (tvisnumber(o)) {
  ------------------
  |  |  802|  2.90M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  2.90M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  2.90M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  2.90M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 2.90M]
  |  |  ------------------
  ------------------
  226|      0|    return LUA_TNUMBER;
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  227|       |#if LJ_64 && !LJ_GC64
  228|       |  } else if (tvislightud(o)) {
  229|       |    return LUA_TLIGHTUSERDATA;
  230|       |#endif
  231|  2.90M|  } else if (o == niltv(L)) {
  ------------------
  |  |  667|  2.90M|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  2.90M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.90M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.90M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.90M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.90M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:14): [True: 0, False: 2.90M]
  ------------------
  232|      0|    return LUA_TNONE;
  ------------------
  |  |   73|      0|#define LUA_TNONE		(-1)
  ------------------
  233|  2.90M|  } else {  /* Magic internal/external tag conversion. ORDER LJ_T */
  234|  2.90M|    uint32_t t = ~itype(o);
  ------------------
  |  |  781|  2.90M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  235|  2.90M|#if LJ_64
  236|  2.90M|    int tt = (int)((U64x(75a06,98042110) >> 4*t) & 15u);
  ------------------
  |  |   94|  2.90M|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  237|       |#else
  238|       |    int tt = (int)(((t < 8 ? 0x98042110u : 0x75a06u) >> 4*(t&7)) & 15u);
  239|       |#endif
  240|  2.90M|    lj_assertL(tt != LUA_TNIL || tvisnil(o), "bad tag conversion");
  ------------------
  |  |  365|  2.90M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.10M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 2.69M, False: 205k]
  |  |  |  |  |  Branch (355:5): [True: 205k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.90M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  241|  2.90M|    return tt;
  242|  2.90M|  }
  243|  2.90M|}
luaL_checktype:
  246|    161|{
  247|    161|  if (lua_type(L, idx) != tt)
  ------------------
  |  Branch (247:7): [True: 0, False: 161]
  ------------------
  248|      0|    lj_err_argt(L, idx, tt);
  249|    161|}
lua_isnumber:
  270|      3|{
  271|      3|  cTValue *o = index2adr(L, idx);
  272|      3|  TValue tmp;
  273|      3|  return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |  802|      6|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      3|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 3]
  |  |  ------------------
  ------------------
                return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |  795|      6|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      3|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 3]
  |  |  ------------------
  ------------------
                return (tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), &tmp)));
  ------------------
  |  |   31|      0|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 0, False: 0]
  |  |  |  Branch (31:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  274|      3|}
lua_isstring:
  277|   875k|{
  278|   875k|  cTValue *o = index2adr(L, idx);
  279|   875k|  return (tvisstr(o) || tvisnumber(o));
  ------------------
  |  |  795|  1.75M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   875k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   875k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 875k, False: 7]
  |  |  ------------------
  ------------------
                return (tvisstr(o) || tvisnumber(o));
  ------------------
  |  |  802|      7|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      7|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      7|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      7|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 7]
  |  |  ------------------
  ------------------
  280|   875k|}
luaL_optinteger:
  479|   925k|{
  480|   925k|  cTValue *o = index2adr(L, idx);
  481|   925k|  TValue tmp;
  482|   925k|  lua_Number n;
  483|   925k|  if (LJ_LIKELY(tvisint(o))) {
  ------------------
  |  |  145|   925k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  484|      0|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  485|   925k|  } else if (LJ_LIKELY(tvisnum(o))) {
  ------------------
  |  |  145|   925k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 156, False: 925k]
  |  |  ------------------
  ------------------
  486|    156|    n = numV(o);
  ------------------
  |  |  866|    156|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    156|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    156|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    156|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 156, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    156|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  487|   925k|  } else if (tvisnil(o)) {
  ------------------
  |  |  782|   925k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 925k, False: 0]
  |  |  ------------------
  ------------------
  488|   925k|    return def;
  489|   925k|  } else {
  490|      0|    if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(o) && lj_strscan_number(strV(o), &tmp)))
  ------------------
  |  |   31|      0|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 0, False: 0]
  |  |  |  Branch (31:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  491|      0|      lj_err_argt(L, idx, LUA_TNUMBER);
  ------------------
  |  |   78|      0|#define LUA_TNUMBER		3
  ------------------
  492|      0|    if (tvisint(&tmp))
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  493|      0|      return (lua_Integer)intV(&tmp);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  494|      0|    n = numV(&tmp);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  495|      0|  }
  496|    156|#if LJ_64
  497|    156|  return (lua_Integer)n;
  498|       |#else
  499|       |  return lj_num2int(n);
  500|       |#endif
  501|   925k|}
lua_toboolean:
  504|   889k|{
  505|   889k|  cTValue *o = index2adr(L, idx);
  506|   889k|  return tvistruecond(o);
  ------------------
  |  |  806|   889k|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|   889k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|   889k|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|   889k|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|   889k|}
lua_tolstring:
  510|   881k|{
  511|   881k|  TValue *o = index2adr(L, idx);
  512|   881k|  GCstr *s;
  513|   881k|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|   881k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 881k, False: 0]
  |  |  ------------------
  ------------------
  514|   881k|    s = strV(o);
  ------------------
  |  |  859|   881k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   881k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   881k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   881k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 881k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   881k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  515|   881k|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  516|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  517|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  518|      0|    s = lj_strfmt_number(L, o);
  519|      0|    setstrV(L, o, s);
  520|      0|  } else {
  521|      0|    if (len != NULL) *len = 0;
  ------------------
  |  Branch (521:9): [True: 0, False: 0]
  ------------------
  522|      0|    return NULL;
  523|      0|  }
  524|   881k|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (524:7): [True: 881k, False: 238]
  ------------------
  525|   881k|  return strdata(s);
  ------------------
  |  |  316|   881k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  526|   881k|}
luaL_checklstring:
  529|  1.85M|{
  530|  1.85M|  TValue *o = index2adr(L, idx);
  531|  1.85M|  GCstr *s;
  532|  1.85M|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  1.85M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.85M, False: 4]
  |  |  ------------------
  ------------------
  533|  1.85M|    s = strV(o);
  ------------------
  |  |  859|  1.85M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.85M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.85M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.85M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.85M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.85M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  534|  1.85M|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      4|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      4|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      4|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 4]
  |  |  ------------------
  ------------------
  535|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  536|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  537|      0|    s = lj_strfmt_number(L, o);
  538|      0|    setstrV(L, o, s);
  539|      4|  } else {
  540|      4|    lj_err_argt(L, idx, LUA_TSTRING);
  ------------------
  |  |   79|      4|#define LUA_TSTRING		4
  ------------------
  541|      4|  }
  542|  1.85M|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (542:7): [True: 925k, False: 926k]
  ------------------
  543|  1.85M|  return strdata(s);
  ------------------
  |  |  316|  1.85M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  544|  1.85M|}
luaL_optlstring:
  548|      3|{
  549|      3|  TValue *o = index2adr(L, idx);
  550|      3|  GCstr *s;
  551|      3|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|      3|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  552|      3|    s = strV(o);
  ------------------
  |  |  859|      3|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  553|      3|  } else if (tvisnil(o)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  554|      0|    if (len != NULL) *len = def ? strlen(def) : 0;
  ------------------
  |  Branch (554:9): [True: 0, False: 0]
  |  Branch (554:29): [True: 0, False: 0]
  ------------------
  555|      0|    return def;
  556|      0|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  557|      0|    lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  558|      0|    o = index2adr(L, idx);  /* GC may move the stack. */
  559|      0|    s = lj_strfmt_number(L, o);
  560|      0|    setstrV(L, o, s);
  561|      0|  } else {
  562|      0|    lj_err_argt(L, idx, LUA_TSTRING);
  ------------------
  |  |   79|      0|#define LUA_TSTRING		4
  ------------------
  563|      0|  }
  564|      3|  if (len != NULL) *len = s->len;
  ------------------
  |  Branch (564:7): [True: 0, False: 3]
  ------------------
  565|      3|  return strdata(s);
  ------------------
  |  |  316|      3|#define strdata(s)	((const char *)((s)+1))
  ------------------
  566|      3|}
lua_pushnil:
  635|   348k|{
  636|   348k|  setnilV(L->top);
  ------------------
  |  |  872|   348k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  637|   348k|  incr_top(L);
  ------------------
  |  |   12|   348k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   697k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   348k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 348k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  638|   348k|}
lua_pushinteger:
  649|   939k|{
  650|   939k|  setintptrV(L->top, n);
  ------------------
  |  |  968|   939k|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  651|   939k|  incr_top(L);
  ------------------
  |  |   12|   939k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  1.87M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   939k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 939k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  652|   939k|}
lua_pushlstring:
  655|  2.54M|{
  656|  2.54M|  GCstr *s;
  657|  2.54M|  lj_gc_check(L);
  ------------------
  |  |   66|  2.54M|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  2.54M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 12.7k, False: 2.52M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  2.54M|      lj_gc_step(L); }
  ------------------
  658|  2.54M|  s = lj_str_new(L, str, len);
  659|  2.54M|  setstrV(L, L->top, s);
  660|  2.54M|  incr_top(L);
  ------------------
  |  |   12|  2.54M|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  5.08M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  2.54M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 2.54M]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  661|  2.54M|}
lua_pushstring:
  664|   514k|{
  665|   514k|  if (str == NULL) {
  ------------------
  |  Branch (665:7): [True: 0, False: 514k]
  ------------------
  666|      0|    setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  667|   514k|  } else {
  668|   514k|    GCstr *s;
  669|   514k|    lj_gc_check(L);
  ------------------
  |  |   66|   514k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   514k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 37, False: 514k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   514k|      lj_gc_step(L); }
  ------------------
  670|   514k|    s = lj_str_newz(L, str);
  ------------------
  |  |   27|   514k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  671|   514k|    setstrV(L, L->top, s);
  672|   514k|  }
  673|   514k|  incr_top(L);
  ------------------
  |  |   12|   514k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  1.02M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   514k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 514k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  674|   514k|}
lua_pushfstring:
  684|  3.34k|{
  685|  3.34k|  const char *ret;
  686|  3.34k|  va_list argp;
  687|  3.34k|  lj_gc_check(L);
  ------------------
  |  |   66|  3.34k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  3.34k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 556, False: 2.79k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  3.34k|      lj_gc_step(L); }
  ------------------
  688|  3.34k|  va_start(argp, fmt);
  689|  3.34k|  ret = lj_strfmt_pushvf(L, fmt, argp);
  690|  3.34k|  va_end(argp);
  691|  3.34k|  return ret;
  692|  3.34k|}
lua_pushcclosure:
  695|   371k|{
  696|   371k|  GCfunc *fn;
  697|   371k|  lj_gc_check(L);
  ------------------
  |  |   66|   371k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   371k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 371k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   371k|      lj_gc_step(L); }
  ------------------
  698|   371k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|   371k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   371k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   371k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 371k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  699|   371k|  fn = lj_func_newC(L, (MSize)n, getcurrenv(L));
  700|   371k|  fn->c.f = f;
  701|   371k|  L->top -= n;
  702|   374k|  while (n--)
  ------------------
  |  Branch (702:10): [True: 3.77k, False: 371k]
  ------------------
  703|  3.77k|    copyTV(L, &fn->c.upvalue[n], L->top+n);
  704|   371k|  setfuncV(L, L->top, fn);
  705|   371k|  lj_assertL(iswhite(obj2gco(fn)), "new GC object is not white");
  ------------------
  |  |  365|   371k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   371k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 371k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  706|   371k|  incr_top(L);
  ------------------
  |  |   12|   371k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   742k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   371k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 371k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  707|   371k|}
lua_pushboolean:
  710|     72|{
  711|     72|  setboolV(L->top, (b != 0));
  ------------------
  |  |  874|     72|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  712|     72|  incr_top(L);
  ------------------
  |  |   12|     72|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    144|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     72|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 72]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  713|     72|}
lua_createtable:
  725|   232k|{
  726|   232k|  lj_gc_check(L);
  ------------------
  |  |   66|   232k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   232k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 1.35k, False: 231k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   232k|      lj_gc_step(L); }
  ------------------
  727|   232k|  settabV(L, L->top, lj_tab_new_ah(L, narray, nrec));
  728|   232k|  incr_top(L);
  ------------------
  |  |   12|   232k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   464k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   232k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 232k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  729|   232k|}
luaL_newmetatable:
  732|  13.6k|{
  733|  13.6k|  GCtab *regt = tabV(registry(L));
  ------------------
  |  |  864|  13.6k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  13.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  13.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  734|  13.6k|  TValue *tv = lj_tab_setstr(L, regt, lj_str_newz(L, tname));
  ------------------
  |  |   27|  13.6k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  735|  13.6k|  if (tvisnil(tv)) {
  ------------------
  |  |  782|  13.6k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 13.6k, False: 0]
  |  |  ------------------
  ------------------
  736|  13.6k|    GCtab *mt = lj_tab_new(L, 0, 1);
  737|  13.6k|    settabV(L, tv, mt);
  738|  13.6k|    settabV(L, L->top++, mt);
  739|  13.6k|    lj_gc_anybarriert(L, regt);
  ------------------
  |  |   95|  13.6k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  13.6k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 13.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  740|  13.6k|    return 1;
  741|  13.6k|  } else {
  742|      0|    copyTV(L, L->top++, tv);
  743|      0|    return 0;
  744|      0|  }
  745|  13.6k|}
lua_newthread:
  755|     46|{
  756|     46|  lua_State *L1;
  757|     46|  lj_gc_check(L);
  ------------------
  |  |   66|     46|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|     46|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 3, False: 43]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|     46|      lj_gc_step(L); }
  ------------------
  758|     46|  L1 = lj_state_new(L);
  759|     46|  setthreadV(L, L->top, L1);
  760|     46|  incr_top(L);
  ------------------
  |  |   12|     46|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|     92|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     46|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 46]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  761|     46|  return L1;
  762|     46|}
lua_newuserdata:
  765|  56.3k|{
  766|  56.3k|  GCudata *ud;
  767|  56.3k|  lj_gc_check(L);
  ------------------
  |  |   66|  56.3k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  56.3k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 56.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  56.3k|      lj_gc_step(L); }
  ------------------
  768|  56.3k|  if (size > LJ_MAX_UDATA)
  ------------------
  |  |   56|  56.3k|#define LJ_MAX_UDATA	LJ_MAX_MEM32	/* Max. userdata length. */
  |  |  ------------------
  |  |  |  |   49|  56.3k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (768:7): [True: 0, False: 56.3k]
  ------------------
  769|      0|    lj_err_msg(L, LJ_ERR_UDATAOV);
  770|  56.3k|  ud = lj_udata_new(L, (MSize)size, getcurrenv(L));
  771|  56.3k|  setudataV(L, L->top, ud);
  772|  56.3k|  incr_top(L);
  ------------------
  |  |   12|  56.3k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   112k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  56.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 56.3k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  773|  56.3k|  return uddata(ud);
  ------------------
  |  |  342|  56.3k|#define uddata(u)	((void *)((u)+1))
  ------------------
  774|  56.3k|}
lua_concat:
  777|   926k|{
  778|   926k|  lj_checkapi_slot(n);
  ------------------
  |  |   32|   926k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   926k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   926k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 926k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   926k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  779|   926k|  if (n >= 2) {
  ------------------
  |  Branch (779:7): [True: 475, False: 925k]
  ------------------
  780|    475|    n--;
  781|    475|    do {
  782|    475|      TValue *top = lj_meta_cat(L, L->top-1, -n);
  783|    475|      if (top == NULL) {
  ------------------
  |  Branch (783:11): [True: 475, False: 0]
  ------------------
  784|    475|	L->top -= n;
  785|    475|	break;
  786|    475|      }
  787|      0|      n -= (int)(L->top - (top - 2*LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  788|      0|      L->top = top+2;
  789|      0|      lj_vm_call(L, top, 1+1);
  790|      0|      L->top -= 1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  791|      0|      copyTV(L, L->top-1, L->top+LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  792|      0|    } while (--n > 0);
  ------------------
  |  Branch (792:14): [True: 0, False: 0]
  ------------------
  793|   925k|  } else if (n == 0) {  /* Push empty string. */
  ------------------
  |  Branch (793:14): [True: 0, False: 925k]
  ------------------
  794|      0|    setstrV(L, L->top, &G(L)->strempty);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  795|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  796|      0|  }
  797|       |  /* else n == 1: nothing to do. */
  798|   926k|}
lua_getfield:
  816|   178k|{
  817|   178k|  cTValue *v, *t = index2adr_check(L, idx);
  818|   178k|  TValue key;
  819|   178k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|   178k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  820|   178k|  v = lj_meta_tget(L, t, &key);
  821|   178k|  if (v == NULL) {
  ------------------
  |  Branch (821:7): [True: 0, False: 178k]
  ------------------
  822|      0|    L->top += 2;
  823|      0|    lj_vm_call(L, L->top-2, 1+1);
  824|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  825|      0|    v = L->top+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  826|      0|  }
  827|   178k|  copyTV(L, L->top, v);
  828|   178k|  incr_top(L);
  ------------------
  |  |   12|   178k|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|   357k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   178k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 178k]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  829|   178k|}
lua_rawget:
  832|   814k|{
  833|   814k|  cTValue *t = index2adr(L, idx);
  834|   814k|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|   814k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   814k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 814k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   814k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  835|   814k|  copyTV(L, L->top-1, lj_tab_get(L, tabV(t), L->top-1));
  ------------------
  |  |  864|   814k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   814k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   814k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   814k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 814k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   814k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  836|   814k|}
lua_rawgeti:
  839|     65|{
  840|     65|  cTValue *v, *t = index2adr(L, idx);
  841|     65|  lj_checkapi(tvistab(t), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|     65|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     65|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 65, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     65|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  842|     65|  v = lj_tab_getint(tabV(t), n);
  ------------------
  |  |   82|     65|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|    130|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 56, False: 9]
  |  |  |  |  |  Branch (79:50): [True: 65, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|     56|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|     56|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|    112|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (36:35): [True: 56, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:66): [True: 9, False: 0]
  |  |  ------------------
  ------------------
  843|     65|  if (v) {
  ------------------
  |  Branch (843:7): [True: 56, False: 9]
  ------------------
  844|     56|    copyTV(L, L->top, v);
  845|     56|  } else {
  846|      9|    setnilV(L->top);
  ------------------
  |  |  872|      9|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  847|      9|  }
  848|     65|  incr_top(L);
  ------------------
  |  |   12|     65|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    130|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|     65|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 65]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  849|     65|}
lua_getmetatable:
  852|    136|{
  853|    136|  cTValue *o = index2adr(L, idx);
  854|    136|  GCtab *mt = NULL;
  855|    136|  if (tvistab(o))
  ------------------
  |  |  800|    136|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|    136|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|    136|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 136]
  |  |  ------------------
  ------------------
  856|      0|    mt = tabref(tabV(o)->metatable);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|    136|  else if (tvisudata(o))
  ------------------
  |  |  801|    136|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    136|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    136|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 136, False: 0]
  |  |  ------------------
  ------------------
  858|    136|    mt = tabref(udataV(o)->metatable);
  ------------------
  |  |  514|    136|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    272|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 136, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  859|      0|  else
  860|      0|    mt = tabref(basemt_obj(G(L), o));
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  861|    136|  if (mt == NULL)
  ------------------
  |  Branch (861:7): [True: 0, False: 136]
  ------------------
  862|      0|    return 0;
  863|    136|  settabV(L, L->top, mt);
  864|    136|  incr_top(L);
  ------------------
  |  |   12|    136|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|    272|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    136|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 136]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  865|    136|  return 1;
  866|    136|}
lua_settable:
  968|   191k|{
  969|   191k|  TValue *o;
  970|   191k|  cTValue *t = index2adr_check(L, idx);
  971|   191k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|   191k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   191k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   191k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 191k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   191k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|   191k|  o = lj_meta_tset(L, t, L->top-2);
  973|   191k|  if (o) {
  ------------------
  |  Branch (973:7): [True: 191k, False: 0]
  ------------------
  974|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  975|   191k|    L->top -= 2;
  976|   191k|    copyTV(L, o, L->top+1);
  977|   191k|  } else {
  978|      0|    TValue *base = L->top;
  979|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  980|      0|    L->top = base+3;
  981|      0|    lj_vm_call(L, base, 0+1);
  982|      0|    L->top -= 3+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  983|      0|  }
  984|   191k|}
lua_setfield:
  987|   465k|{
  988|   465k|  TValue *o;
  989|   465k|  TValue key;
  990|   465k|  cTValue *t = index2adr_check(L, idx);
  991|   465k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|   465k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|   465k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   465k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 465k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   465k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|   465k|  setstrV(L, &key, lj_str_newz(L, k));
  ------------------
  |  |   27|   465k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  993|   465k|  o = lj_meta_tset(L, t, &key);
  994|   465k|  if (o) {
  ------------------
  |  Branch (994:7): [True: 465k, False: 0]
  ------------------
  995|       |    /* NOBARRIER: lj_meta_tset ensures the table is not black. */
  996|   465k|    copyTV(L, o, --L->top);
  997|   465k|  } else {
  998|      0|    TValue *base = L->top;
  999|      0|    copyTV(L, base+2, base-3-2*LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1000|      0|    L->top = base+3;
 1001|      0|    lj_vm_call(L, base, 0+1);
 1002|      0|    L->top -= 2+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1003|      0|  }
 1004|   465k|}
lua_rawset:
 1007|  1.61k|{
 1008|  1.61k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  1.61k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  1.61k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.61k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.61k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.61k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1009|      0|  TValue *dst, *key;
 1010|  1.61k|  lj_checkapi_slot(2);
  ------------------
  |  |   32|  1.61k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.61k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.61k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1011|  1.61k|  key = L->top-2;
 1012|  1.61k|  dst = lj_tab_set(L, t, key);
 1013|  1.61k|  copyTV(L, dst, key+1);
 1014|  1.61k|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|  1.61k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|  1.61k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 1.61k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1015|  1.61k|  L->top = key;
 1016|  1.61k|}
lua_rawseti:
 1019|  68.4k|{
 1020|  68.4k|  GCtab *t = tabV(index2adr(L, idx));
  ------------------
  |  |  864|  68.4k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  68.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  68.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  68.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 68.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  68.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1021|      0|  TValue *dst, *src;
 1022|  68.4k|  lj_checkapi_slot(1);
  ------------------
  |  |   32|  68.4k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  68.4k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  68.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 68.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  68.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|  68.4k|  dst = lj_tab_setint(L, t, n);
  ------------------
  |  |   84|  68.4k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|  68.4k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 54.7k, False: 13.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|  54.7k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  54.7k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  54.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  68.4k|  src = L->top-1;
 1025|  68.4k|  copyTV(L, dst, src);
 1026|  68.4k|  lj_gc_barriert(L, t, dst);
  ------------------
  |  |   97|  68.4k|  { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   35|   136k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   136k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  68.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  68.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  68.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  68.4k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  68.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  68.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 68.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   136k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  68.4k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  68.4k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  68.4k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 68.4k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 68.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|  68.4k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  68.4k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 68.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   98|  68.4k|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1027|  68.4k|  L->top = src;
 1028|  68.4k|}
lua_setmetatable:
 1031|    361|{
 1032|    361|  global_State *g;
 1033|    361|  GCtab *mt;
 1034|    361|  cTValue *o = index2adr_check(L, idx);
 1035|    361|  lj_checkapi_slot(1);
  ------------------
  |  |   32|    361|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|    361|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    361|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 361, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    361|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1036|    361|  if (tvisnil(L->top-1)) {
  ------------------
  |  |  782|    361|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 87, False: 274]
  |  |  ------------------
  ------------------
 1037|     87|    mt = NULL;
 1038|    274|  } else {
 1039|    274|    lj_checkapi(tvistab(L->top-1), "top stack slot is not a table");
  ------------------
  |  |  357|    274|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    274|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 274, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    274|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1040|    274|    mt = tabV(L->top-1);
  ------------------
  |  |  864|    274|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    274|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    274|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    274|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 274, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    274|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1041|    274|  }
 1042|    361|  g = G(L);
  ------------------
  |  |  705|    361|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    361|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1043|    361|  if (tvistab(o)) {
  ------------------
  |  |  800|    361|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|    361|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|    361|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 361]
  |  |  ------------------
  ------------------
 1044|      0|    setgcref(tabV(o)->metatable, obj2gco(mt));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1045|      0|    if (mt)
  ------------------
  |  Branch (1045:9): [True: 0, False: 0]
  ------------------
 1046|      0|      lj_gc_objbarriert(L, tabV(o), mt);
  ------------------
  |  |  100|      0|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(t))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  |  Branch (33:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  101|      0|      lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (101:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1047|    361|  } else if (tvisudata(o)) {
  ------------------
  |  |  801|    361|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|    361|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|    361|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 140, False: 221]
  |  |  ------------------
  ------------------
 1048|    140|    setgcref(udataV(o)->metatable, obj2gco(mt));
  ------------------
  |  |   72|    280|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 140, False: 0]
  |  |  ------------------
  ------------------
 1049|    140|    if (mt)
  ------------------
  |  Branch (1049:9): [True: 140, False: 0]
  ------------------
 1050|    140|      lj_gc_objbarrier(L, udataV(o), mt);
  ------------------
  |  |  108|    140|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|    280|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    140|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    140|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    140|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 140, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|    280|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    140|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 140]
  |  |  |  |  |  Branch (33:22): [True: 140, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|    140|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1051|    221|  } else {
 1052|       |    /* Flush cache, since traces specialize to basemt. But not during __gc. */
 1053|    221|    if (lj_trace_flushall(L))
  ------------------
  |  Branch (1053:9): [True: 0, False: 221]
  ------------------
 1054|      0|      lj_err_caller(L, LJ_ERR_NOGCMM);
 1055|    221|    o = index2adr(L, idx);  /* Stack may have been reallocated. */
 1056|    221|    if (tvisbool(o)) {
  ------------------
  |  |  789|    221|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|    442|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    221|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|    221|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 42, False: 179]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|    179|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    179|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|    179|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 43, False: 136]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1057|       |      /* NOBARRIER: basemt is a GC root. */
 1058|     85|      setgcref(basemt_it(g, LJ_TTRUE), obj2gco(mt));
  ------------------
  |  |   72|     85|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1059|     85|      setgcref(basemt_it(g, LJ_TFALSE), obj2gco(mt));
  ------------------
  |  |   72|     85|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1060|    136|    } else {
 1061|       |      /* NOBARRIER: basemt is a GC root. */
 1062|    136|      setgcref(basemt_obj(g, o), obj2gco(mt));
  ------------------
  |  |   72|    272|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 94, False: 42]
  |  |  ------------------
  ------------------
 1063|    136|    }
 1064|    221|  }
 1065|    361|  L->top--;
 1066|    361|  return 1;
 1067|    361|}
lua_call:
 1129|  1.36M|{
 1130|  1.36M|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|  1.36M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.36M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.36M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.36M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1131|  1.36M|	      "thread called in wrong state %d", L->status);
 1132|  1.36M|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|  1.36M|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  1.36M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.36M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.36M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.36M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1133|  1.36M|  lj_vm_call(L, api_call_base(L, nargs), nresults+1);
 1134|  1.36M|}
lua_pcall:
 1137|  6.93k|{
 1138|  6.93k|  global_State *g = G(L);
  ------------------
  |  |  705|  6.93k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.93k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1139|  6.93k|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|  6.93k|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|  6.93k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
 1140|  6.93k|  ptrdiff_t ef;
 1141|  6.93k|  int status;
 1142|  6.93k|  lj_checkapi(L->status == LUA_OK || L->status == LUA_ERRERR,
  ------------------
  |  |  357|  6.93k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.93k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 6.93k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.93k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1143|  6.93k|	      "thread called in wrong state %d", L->status);
 1144|  6.93k|  lj_checkapi_slot(nargs+1);
  ------------------
  |  |   32|  6.93k|  lj_checkapi((idx) <= (L->top - L->base), "stack slot %d out of range", (idx))
  |  |  ------------------
  |  |  |  |  357|  6.93k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  6.93k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 6.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  6.93k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1145|  6.93k|  if (errfunc == 0) {
  ------------------
  |  Branch (1145:7): [True: 6.93k, False: 0]
  ------------------
 1146|  6.93k|    ef = 0;
 1147|  6.93k|  } else {
 1148|      0|    cTValue *o = index2adr_stack(L, errfunc);
 1149|      0|    ef = savestack(L, o);
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1150|      0|  }
 1151|  6.93k|  status = lj_vm_pcall(L, api_call_base(L, nargs), nresults+1, ef);
 1152|  6.93k|  if (status) hook_restore(g, oldh);
  ------------------
  |  |  686|  4.52k|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|  4.52k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  |  Branch (1152:7): [True: 4.52k, False: 2.41k]
  ------------------
 1153|  6.93k|  return status;
 1154|  6.93k|}
lua_gc:
 1260|  6.74k|{
 1261|  6.74k|  global_State *g = G(L);
  ------------------
  |  |  705|  6.74k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.74k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1262|  6.74k|  int res = 0;
 1263|  6.74k|  switch (what) {
 1264|      0|  case LUA_GCSTOP:
  ------------------
  |  |  222|      0|#define LUA_GCSTOP		0
  ------------------
  |  Branch (1264:3): [True: 0, False: 6.74k]
  ------------------
 1265|      0|    g->gc.threshold = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
 1266|      0|    break;
 1267|      0|  case LUA_GCRESTART:
  ------------------
  |  |  223|      0|#define LUA_GCRESTART		1
  ------------------
  |  Branch (1267:3): [True: 0, False: 6.74k]
  ------------------
 1268|      0|    g->gc.threshold = data == -1 ? (g->gc.total/100)*g->gc.pause : g->gc.total;
  ------------------
  |  Branch (1268:23): [True: 0, False: 0]
  ------------------
 1269|      0|    break;
 1270|  6.74k|  case LUA_GCCOLLECT:
  ------------------
  |  |  224|  6.74k|#define LUA_GCCOLLECT		2
  ------------------
  |  Branch (1270:3): [True: 6.74k, False: 0]
  ------------------
 1271|  6.74k|    lj_gc_fullgc(L);
 1272|  6.74k|    break;
 1273|      0|  case LUA_GCCOUNT:
  ------------------
  |  |  225|      0|#define LUA_GCCOUNT		3
  ------------------
  |  Branch (1273:3): [True: 0, False: 6.74k]
  ------------------
 1274|      0|    res = (int)(g->gc.total >> 10);
 1275|      0|    break;
 1276|      0|  case LUA_GCCOUNTB:
  ------------------
  |  |  226|      0|#define LUA_GCCOUNTB		4
  ------------------
  |  Branch (1276:3): [True: 0, False: 6.74k]
  ------------------
 1277|      0|    res = (int)(g->gc.total & 0x3ff);
 1278|      0|    break;
 1279|      0|  case LUA_GCSTEP: {
  ------------------
  |  |  227|      0|#define LUA_GCSTEP		5
  ------------------
  |  Branch (1279:3): [True: 0, False: 6.74k]
  ------------------
 1280|      0|    GCSize a = (GCSize)data << 10;
 1281|      0|    g->gc.threshold = (a <= g->gc.total) ? (g->gc.total - a) : 0;
  ------------------
  |  Branch (1281:23): [True: 0, False: 0]
  ------------------
 1282|      0|    while (g->gc.total >= g->gc.threshold)
  ------------------
  |  Branch (1282:12): [True: 0, False: 0]
  ------------------
 1283|      0|      if (lj_gc_step(L) > 0) {
  ------------------
  |  Branch (1283:11): [True: 0, False: 0]
  ------------------
 1284|      0|	res = 1;
 1285|      0|	break;
 1286|      0|      }
 1287|      0|    break;
 1288|      0|  }
 1289|      0|  case LUA_GCSETPAUSE:
  ------------------
  |  |  228|      0|#define LUA_GCSETPAUSE		6
  ------------------
  |  Branch (1289:3): [True: 0, False: 6.74k]
  ------------------
 1290|      0|    res = (int)(g->gc.pause);
 1291|      0|    g->gc.pause = (MSize)data;
 1292|      0|    break;
 1293|      0|  case LUA_GCSETSTEPMUL:
  ------------------
  |  |  229|      0|#define LUA_GCSETSTEPMUL	7
  ------------------
  |  Branch (1293:3): [True: 0, False: 6.74k]
  ------------------
 1294|      0|    res = (int)(g->gc.stepmul);
 1295|      0|    g->gc.stepmul = (MSize)data;
 1296|      0|    break;
 1297|      0|  case LUA_GCISRUNNING:
  ------------------
  |  |  230|      0|#define LUA_GCISRUNNING		9
  ------------------
  |  Branch (1297:3): [True: 0, False: 6.74k]
  ------------------
 1298|      0|    res = (g->gc.threshold != LJ_MAX_MEM);
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
 1299|      0|    break;
 1300|      0|  default:
  ------------------
  |  Branch (1300:3): [True: 0, False: 6.74k]
  ------------------
 1301|      0|    res = -1;  /* Invalid option. */
 1302|  6.74k|  }
 1303|  6.74k|  return res;
 1304|  6.74k|}
lj_api.c:index2adr_stack:
   72|   493k|{
   73|   493k|  if (idx > 0) {
  ------------------
  |  Branch (73:7): [True: 0, False: 493k]
  ------------------
   74|      0|    TValue *o = L->base + (idx - 1);
   75|      0|    if (o < L->top) {
  ------------------
  |  Branch (75:9): [True: 0, False: 0]
  ------------------
   76|      0|      return o;
   77|      0|    } else {
   78|      0|      lj_checkapi(0, "invalid stack slot %d", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|      return niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|      0|    }
   81|      0|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (81:12): [True: 0, False: 0]
  ------------------
   82|   493k|  } else {
   83|   493k|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|   493k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   986k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 493k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 493k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   493k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|   493k|		"invalid stack slot %d", idx);
   85|   493k|    return L->top + idx;
   86|   493k|  }
   87|   493k|}
lj_api.c:copy_slot:
  182|  13.6k|{
  183|  13.6k|  if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|  13.6k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (183:7): [True: 0, False: 13.6k]
  ------------------
  184|      0|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|      0|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  185|       |    /* NOBARRIER: A thread (i.e. L) is never black. */
  186|      0|    setgcref(L->env, obj2gco(tabV(f)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  187|  13.6k|  } else if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|  13.6k|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (187:14): [True: 13.6k, False: 0]
  ------------------
  188|  13.6k|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  13.6k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  13.6k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  13.6k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  13.6k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  189|  13.6k|    if (fn->c.gct != ~LJ_TFUNC)
  ------------------
  |  |  268|  13.6k|#define LJ_TFUNC		(~8u)
  ------------------
  |  Branch (189:9): [True: 0, False: 13.6k]
  ------------------
  190|      0|      lj_err_msg(L, LJ_ERR_NOENV);
  191|  13.6k|    lj_checkapi(tvistab(f), "stack slot %d is not a table", idx);
  ------------------
  |  |  357|  13.6k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  192|  27.3k|    setgcref(fn->c.env, obj2gco(tabV(f)));
  ------------------
  |  |   72|  27.3k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 13.6k, False: 0]
  |  |  ------------------
  ------------------
  193|  13.6k|    lj_gc_barrier(L, fn, f);
  ------------------
  |  |  105|  13.6k|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|  27.3k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  27.3k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  13.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  13.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  13.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  13.6k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  13.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  13.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 13.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  27.3k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  13.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  13.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  13.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 13.6k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 13.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|  13.6k|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  13.6k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 13.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|  13.6k|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  194|  13.6k|  } else {
  195|      0|    TValue *o = index2adr_check(L, idx);
  196|      0|    copyTV(L, o, f);
  197|      0|    if (idx < LUA_GLOBALSINDEX)  /* Need a barrier for upvalues. */
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (197:9): [True: 0, False: 0]
  ------------------
  198|      0|      lj_gc_barrier(L, curr_func(L), f);
  ------------------
  |  |  105|      0|  { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   35|      0|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (tviswhite(tv) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|      0|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  106|      0|      lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  199|      0|  }
  200|  13.6k|}
lj_api.c:index2adr:
   35|  11.6M|{
   36|  11.6M|  if (idx > 0) {
  ------------------
  |  Branch (36:7): [True: 5.45M, False: 6.22M]
  ------------------
   37|  5.45M|    TValue *o = L->base + (idx - 1);
   38|  5.45M|    return o < L->top ? o : niltv(L);
  ------------------
  |  |  667|   925k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   925k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   925k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   925k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 925k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   925k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (38:12): [True: 4.53M, False: 925k]
  ------------------
   39|  6.22M|  } else if (idx > LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|  6.22M|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (39:14): [True: 5.37M, False: 842k]
  ------------------
   40|  5.37M|    lj_checkapi(idx != 0 && -idx <= L->top - L->base,
  ------------------
  |  |  357|  5.37M|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  10.7M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 5.37M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 5.37M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  5.37M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   41|  5.37M|		"bad stack slot %d", idx);
   42|  5.37M|    return L->top + idx;
   43|  5.37M|  } else if (idx == LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|   842k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (43:14): [True: 178k, False: 664k]
  ------------------
   44|   178k|    TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|   178k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   178k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   45|   178k|    settabV(L, o, tabref(L->env));
  ------------------
  |  |  514|   178k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   178k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   46|   178k|    return o;
   47|   664k|  } else if (idx == LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|   664k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (47:14): [True: 664k, False: 290]
  ------------------
   48|   664k|    return registry(L);
  ------------------
  |  |  706|   664k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|   664k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   664k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|   664k|  } else {
   50|    290|    GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|    290|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|    290|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|    290|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|    290|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|    290|    lj_checkapi(fn->c.gct == ~LJ_TFUNC && !isluafunc(fn),
  ------------------
  |  |  357|    290|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    580|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 290, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 290, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    290|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   52|    290|		"calling frame is not a C function");
   53|    290|    if (idx == LUA_ENVIRONINDEX) {
  ------------------
  |  |   37|    290|#define LUA_ENVIRONINDEX	(-10001)
  ------------------
  |  Branch (53:9): [True: 78, False: 212]
  ------------------
   54|     78|      TValue *o = &G(L)->tmptv;
  ------------------
  |  |  705|     78|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     78|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   55|     78|      settabV(L, o, tabref(fn->c.env));
  ------------------
  |  |  514|     78|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     78|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   56|     78|      return o;
   57|    212|    } else {
   58|    212|      idx = LUA_GLOBALSINDEX - idx;
  ------------------
  |  |   38|    212|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
   59|    212|      return idx <= fn->c.nupvalues ? &fn->c.upvalue[idx-1] : niltv(L);
  ------------------
  |  |  667|      0|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (59:14): [True: 212, False: 0]
  ------------------
   60|    212|    }
   61|    290|  }
   62|  11.6M|}
lj_api.c:getcurrenv:
   90|   427k|{
   91|   427k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|   427k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|   427k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|   427k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|   427k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   92|   427k|  return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  268|   427k|#define LJ_TFUNC		(~8u)
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|   262k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   262k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                return fn->c.gct == ~LJ_TFUNC ? tabref(fn->c.env) : tabref(L->env);
  ------------------
  |  |  514|   164k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   164k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (92:10): [True: 262k, False: 164k]
  ------------------
   93|   427k|}
lj_api.c:index2adr_check:
   65|   836k|{
   66|   836k|  TValue *o = index2adr(L, idx);
   67|   836k|  lj_checkapi(o != niltv(L), "invalid stack slot %d", idx);
  ------------------
  |  |  357|   836k|#define lj_checkapi(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.67M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 836k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 836k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   836k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   68|   836k|  return o;
   69|   836k|}
lj_api.c:api_call_base:
 1117|  1.37M|{
 1118|  1.37M|  TValue *o = L->top, *base = o - nargs;
 1119|  1.37M|  L->top = o+1;
 1120|  3.09M|  for (; o > base; o--) copyTV(L, o, o-1);
  ------------------
  |  Branch (1120:10): [True: 1.71M, False: 1.37M]
  ------------------
 1121|  1.37M|  setnilV(o);
  ------------------
  |  |  872|  1.37M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1122|  1.37M|  return o+1;
 1123|  1.37M|}

lj_asm_trace:
 2463|  24.2k|{
 2464|  24.2k|  ASMState as_;
 2465|  24.2k|  ASMState *as = &as_;
 2466|       |
 2467|       |  /* Remove nops/renames left over from ASM restart due to LJ_TRERR_MCODELM. */
 2468|  24.2k|  {
 2469|  24.2k|    IRRef nins = T->nins;
 2470|  24.2k|    IRIns *ir = &T->ir[nins-1];
 2471|  24.2k|    if (ir->o == IR_NOP || ir->o == IR_RENAME) {
  ------------------
  |  Branch (2471:9): [True: 5.56k, False: 18.6k]
  |  Branch (2471:28): [True: 0, False: 18.6k]
  ------------------
 2472|  5.56k|      do { ir--; nins--; } while (ir->o == IR_NOP || ir->o == IR_RENAME);
  ------------------
  |  Branch (2472:35): [True: 0, False: 5.56k]
  |  Branch (2472:54): [True: 0, False: 5.56k]
  ------------------
 2473|  5.56k|      T->nins = nins;
 2474|  5.56k|    }
 2475|  24.2k|  }
 2476|       |
 2477|       |  /* Ensure an initialized instruction beyond the last one for HIOP checks. */
 2478|       |  /* This also allows one RENAME to be added without reallocating curfinal. */
 2479|  24.2k|  as->orignins = lj_ir_nextins(J);
 2480|  24.2k|  lj_ir_nop(&J->cur.ir[as->orignins]);
 2481|       |
 2482|       |  /* Setup initial state. Copy some fields to reduce indirections. */
 2483|  24.2k|  as->J = J;
 2484|  24.2k|  as->T = T;
 2485|  24.2k|  J->curfinal = lj_trace_alloc(J->L, T);  /* This copies the IR, too. */
 2486|  24.2k|  as->flags = J->flags;
 2487|  24.2k|  as->loopref = J->loopref;
 2488|  24.2k|  as->realign = NULL;
 2489|  24.2k|  as->loopinv = 0;
 2490|  24.2k|  as->parent = J->parent ? traceref(J, J->parent) : NULL;
  ------------------
  |  |  298|  10.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  10.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  10.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2490:16): [True: 10.4k, False: 13.7k]
  ------------------
 2491|       |#ifdef LUAJIT_RANDOM_RA
 2492|       |  (void)lj_prng_u64(&J2G(J)->prng);  /* Ensure PRNG step between traces. */
 2493|       |#endif
 2494|       |
 2495|       |  /* Reserve MCode memory. */
 2496|  24.2k|  as->mctop = as->mctoporig = lj_mcode_reserve(J, &as->mcbot);
 2497|  24.2k|  as->mcp = as->mctop;
 2498|  24.2k|  as->mclim = as->mcbot + MCLIM_REDZONE;
  ------------------
  |  |  135|  24.2k|#define MCLIM_REDZONE	64
  ------------------
 2499|  24.2k|  asm_setup_target(as);
 2500|       |
 2501|       |  /*
 2502|       |  ** This is a loop, because the MCode may have to be (re-)assembled
 2503|       |  ** multiple times:
 2504|       |  **
 2505|       |  ** 1. as->realign is set (and the assembly aborted), if the arch-specific
 2506|       |  **    backend wants the MCode to be aligned differently.
 2507|       |  **
 2508|       |  **    This is currently only the case on x86/x64, where small loops get
 2509|       |  **    an aligned loop body plus a short branch. Not much effort is wasted,
 2510|       |  **    because the abort happens very quickly and only once.
 2511|       |  **
 2512|       |  ** 2. The IR is immovable, since the MCode embeds pointers to various
 2513|       |  **    constants inside the IR. But RENAMEs may need to be added to the IR
 2514|       |  **    during assembly, which might grow and reallocate the IR. We check
 2515|       |  **    at the end if the IR (in J->cur.ir) has actually grown, resize the
 2516|       |  **    copy (in J->curfinal.ir) and try again.
 2517|       |  **
 2518|       |  **    95% of all traces have zero RENAMEs, 3% have one RENAME, 1.5% have
 2519|       |  **    2 RENAMEs and only 0.5% have more than that. That's why we opt to
 2520|       |  **    always have one spare slot in the IR (see above), which means we
 2521|       |  **    have to redo the assembly for only ~2% of all traces.
 2522|       |  **
 2523|       |  **    Very, very rarely, this needs to be done repeatedly, since the
 2524|       |  **    location of constants inside the IR (actually, reachability from
 2525|       |  **    a global pointer) may affect register allocation and thus the
 2526|       |  **    number of RENAMEs.
 2527|       |  */
 2528|  27.2k|  for (;;) {
 2529|  27.2k|    as->mcp = as->mctop;
 2530|  27.2k|#ifdef LUA_USE_ASSERT
 2531|  27.2k|    as->mcp_prev = as->mcp;
 2532|  27.2k|#endif
 2533|  27.2k|    as->ir = J->curfinal->ir;  /* Use the copied IR. */
 2534|  27.2k|    as->curins = J->cur.nins = as->orignins;
 2535|       |#ifdef LUAJIT_RANDOM_RA
 2536|       |    as->prngstate = J2G(J)->prng;  /* Must (re)start from identical state. */
 2537|       |    as->prngbits = 0;
 2538|       |#endif
 2539|       |
 2540|  27.2k|    RA_DBG_START();
  ------------------
  |  |  338|  27.2k|#define RA_DBG_START()	((void)0)
  ------------------
 2541|  27.2k|    RA_DBGX((as, "===== STOP ====="));
  ------------------
  |  |  341|  27.2k|#define RA_DBGX(x)	((void)0)
  ------------------
 2542|       |
 2543|       |    /* General trace setup. Emit tail of trace. */
 2544|  27.2k|    asm_tail_prep(as);
 2545|  27.2k|    as->mcloop = NULL;
 2546|  27.2k|    as->flagmcp = NULL;
 2547|  27.2k|    as->topslot = 0;
 2548|  27.2k|    as->gcsteps = 0;
 2549|  27.2k|    as->sectref = as->loopref;
 2550|  27.2k|    as->fuseref = (as->flags & JIT_F_OPT_FUSE) ? as->loopref : FUSE_DISABLED;
  ------------------
  |  |   89|  27.2k|#define JIT_F_OPT_FUSE		(JIT_F_OPT << 9)
  |  |  ------------------
  |  |  |  |   77|  27.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                  as->fuseref = (as->flags & JIT_F_OPT_FUSE) ? as->loopref : FUSE_DISABLED;
  ------------------
  |  |  126|  27.2k|#define FUSE_DISABLED		(~(IRRef)0)
  ------------------
  |  Branch (2550:19): [True: 27.2k, False: 0]
  ------------------
 2551|  27.2k|    asm_setup_regsp(as);
 2552|  27.2k|    if (!as->loopref)
  ------------------
  |  Branch (2552:9): [True: 14.3k, False: 12.8k]
  ------------------
 2553|  14.3k|      asm_tail_link(as);
 2554|       |
 2555|       |    /* Assemble a trace in linear backwards order. */
 2556|   957k|    for (as->curins--; as->curins > as->stopins; as->curins--) {
  ------------------
  |  Branch (2556:24): [True: 930k, False: 27.2k]
  ------------------
 2557|   930k|      IRIns *ir = IR(as->curins);
  ------------------
  |  |  116|   930k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2558|       |      /* 64 bit types handled by SPLIT for 32 bit archs. */
 2559|   930k|      lj_assertA(!(LJ_32 && irt_isint64(ir->t)),
  ------------------
  |  |  111|   930k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   930k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   930k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   930k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2560|   930k|		 "IR %04d has unsplit 64 bit type",
 2561|   930k|		 (int)(ir - as->ir) - REF_BIAS);
 2562|   930k|      asm_snap_prev(as);
 2563|   930k|      if (!ra_used(ir) && !ir_sideeff(ir) && (as->flags & JIT_F_OPT_DCE))
  ------------------
  |  |  351|  1.86M|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  1.86M|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|   930k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 516k, False: 413k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|   413k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|   413k|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 62.0k, False: 351k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (!ra_used(ir) && !ir_sideeff(ir) && (as->flags & JIT_F_OPT_DCE))
  ------------------
  |  |   82|   146k|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  ------------------
  |  |  |  |   77|   146k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (2563:27): [True: 146k, False: 205k]
  |  Branch (2563:46): [True: 146k, False: 0]
  ------------------
 2564|   146k|	continue;  /* Dead-code elimination can be soooo easy. */
 2565|   784k|      if (irt_isguard(ir->t))
  ------------------
  |  |  444|   784k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 431k, False: 352k]
  |  |  ------------------
  ------------------
 2566|   431k|	asm_snap_prep(as);
 2567|   784k|      RA_DBG_REF();
  ------------------
  |  |  340|   784k|#define RA_DBG_REF()	((void)0)
  ------------------
 2568|   784k|      checkmclim(as);
 2569|   784k|      asm_ir(as, ir);
 2570|   784k|    }
 2571|       |
 2572|  27.2k|    if (as->realign && J->curfinal->nins >= T->nins)
  ------------------
  |  Branch (2572:9): [True: 2.59k, False: 24.6k]
  |  Branch (2572:24): [True: 2.59k, False: 0]
  ------------------
 2573|  2.59k|      continue;  /* Retry in case only the MCode needs to be realigned. */
 2574|       |
 2575|       |    /* Emit head of trace. */
 2576|  24.6k|    RA_DBG_REF();
  ------------------
  |  |  340|  24.6k|#define RA_DBG_REF()	((void)0)
  ------------------
 2577|  24.6k|    checkmclim(as);
 2578|  24.6k|    if (as->gcsteps > 0) {
  ------------------
  |  Branch (2578:9): [True: 10.3k, False: 14.2k]
  ------------------
 2579|  10.3k|      as->curins = as->T->snap[0].ref;
 2580|  10.3k|      asm_snap_prep(as);  /* The GC check is a guard. */
 2581|  10.3k|      asm_gc_check(as);
 2582|  10.3k|      as->curins = as->stopins;
 2583|  10.3k|    }
 2584|  24.6k|    ra_evictk(as);
 2585|  24.6k|    if (as->parent)
  ------------------
  |  Branch (2585:9): [True: 10.4k, False: 14.1k]
  ------------------
 2586|  10.4k|      asm_head_side(as);
 2587|  14.1k|    else
 2588|  14.1k|      asm_head_root(as);
 2589|  24.6k|    asm_phi_fixup(as);
 2590|       |
 2591|  24.6k|    if (J->curfinal->nins >= T->nins) {  /* IR didn't grow? */
  ------------------
  |  Branch (2591:9): [True: 24.2k, False: 403]
  ------------------
 2592|  24.2k|      lj_assertA(J->curfinal->nk == T->nk, "unexpected IR constant growth");
  ------------------
  |  |  111|  24.2k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  24.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  24.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 24.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  24.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2593|  24.2k|      memcpy(J->curfinal->ir + as->orignins, T->ir + as->orignins,
 2594|  24.2k|	     (T->nins - as->orignins) * sizeof(IRIns));  /* Copy RENAMEs. */
 2595|  24.2k|      T->nins = J->curfinal->nins;
 2596|       |      /* Fill mcofs of any unprocessed snapshots. */
 2597|  24.2k|      as->curins = REF_FIRST;
 2598|  24.2k|      asm_snap_prev(as);
 2599|  24.2k|      break;  /* Done. */
 2600|  24.2k|    }
 2601|       |
 2602|       |    /* Otherwise try again with a bigger IR. */
 2603|    403|    lj_trace_free(J2G(J), J->curfinal);
  ------------------
  |  |  115|    403|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|    403|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|    403|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2604|    403|    J->curfinal = NULL;  /* In case lj_trace_alloc() OOMs. */
 2605|    403|    J->curfinal = lj_trace_alloc(J->L, T);
 2606|    403|    as->realign = NULL;
 2607|    403|  }
 2608|       |
 2609|  24.2k|  RA_DBGX((as, "===== START ===="));
  ------------------
  |  |  341|  24.2k|#define RA_DBGX(x)	((void)0)
  ------------------
 2610|  24.2k|  RA_DBG_FLUSH();
  ------------------
  |  |  339|  24.2k|#define RA_DBG_FLUSH()	((void)0)
  ------------------
 2611|  24.2k|  if (as->freeset != RSET_ALL)
  ------------------
  |  |   71|  24.2k|#define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  ------------------
  |  |  |  |   67|  24.2k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  24.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  24.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  24.2k|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|  24.2k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|  24.2k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  24.2k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  24.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  24.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2611:7): [True: 0, False: 24.2k]
  ------------------
 2612|      0|    lj_trace_err(as->J, LJ_TRERR_BADRA);  /* Ouch! Should never happen. */
 2613|       |
 2614|       |  /* Set trace entry point before fixing up tail to allow link to self. */
 2615|  24.2k|  T->mcode = as->mcp;
 2616|  24.2k|  T->mcloop = as->mcloop ? (MSize)((char *)as->mcloop - (char *)as->mcp) : 0;
  ------------------
  |  Branch (2616:15): [True: 9.85k, False: 14.3k]
  ------------------
 2617|  24.2k|  if (as->loopref)
  ------------------
  |  Branch (2617:7): [True: 9.85k, False: 14.3k]
  ------------------
 2618|  9.85k|    asm_loop_tail_fixup(as);
 2619|  14.3k|  else
 2620|  14.3k|    asm_tail_fixup(as, T->link);  /* Note: this may change as->mctop! */
 2621|  24.2k|  T->szmcode = (MSize)((char *)as->mctop - (char *)as->mcp);
 2622|  24.2k|  asm_snap_fixup_mcofs(as);
 2623|       |#if LJ_TARGET_MCODE_FIXUP
 2624|       |  asm_mcode_fixup(T->mcode, T->szmcode);
 2625|       |#endif
 2626|  24.2k|  lj_mcode_sync(T->mcode, as->mctoporig);
 2627|  24.2k|}
lj_asm.c:asm_setup_regsp:
 2180|  27.2k|{
 2181|  27.2k|  GCtrace *T = as->T;
 2182|  27.2k|  int sink = T->sinktags;
 2183|  27.2k|  IRRef nins = T->nins;
 2184|  27.2k|  IRIns *ir, *lastir;
 2185|  27.2k|  int inloop;
 2186|       |#if LJ_TARGET_ARM
 2187|       |  uint32_t rload = 0xa6402a64;
 2188|       |#endif
 2189|       |
 2190|  27.2k|  ra_setup(as);
 2191|       |#if LJ_TARGET_ARM64
 2192|       |  ra_setkref(as, RID_GL, (intptr_t)J2G(as->J));
 2193|       |#endif
 2194|       |
 2195|       |  /* Clear reg/sp for constants. */
 2196|   386k|  for (ir = IR(T->nk), lastir = IR(REF_BASE); ir < lastir; ir++) {
  ------------------
  |  |  116|  27.2k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
                for (ir = IR(T->nk), lastir = IR(REF_BASE); ir < lastir; ir++) {
  ------------------
  |  |  116|  27.2k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (2196:47): [True: 359k, False: 27.2k]
  ------------------
 2197|   359k|    ir->prev = REGSP_INIT;
  ------------------
  |  |   46|   359k|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|   359k|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
 2198|   359k|    if (irt_is64(ir->t) && ir->o != IR_KNULL) {
  ------------------
  |  |  409|   718k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|   359k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|   359k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|   359k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|   359k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|   359k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 201k, False: 157k]
  |  |  ------------------
  ------------------
  |  Branch (2198:28): [True: 196k, False: 4.83k]
  ------------------
 2199|   196k|#if LJ_GC64
 2200|       |      /* The false-positive of irt_is64() for ASMREF_L (REF_NIL) is OK here. */
 2201|   196k|      ir->i = 0;  /* Will become non-zero only for RIP-relative addresses. */
 2202|       |#else
 2203|       |      /* Make life easier for backends by putting address of constant in i. */
 2204|       |      ir->i = (int32_t)(intptr_t)(ir+1);
 2205|       |#endif
 2206|   196k|      ir++;
 2207|   196k|    }
 2208|   359k|  }
 2209|       |
 2210|       |  /* REF_BASE is used for implicit references to the BASE register. */
 2211|  27.2k|  lastir->prev = REGSP_HINT(RID_BASE);
  ------------------
  |  |   45|  27.2k|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  27.2k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2212|       |
 2213|  27.2k|  as->snaprename = nins;
 2214|  27.2k|  as->snapref = nins;
 2215|  27.2k|  as->snapno = T->nsnap;
 2216|  27.2k|  as->snapalloc = 0;
 2217|       |
 2218|  27.2k|  as->stopins = REF_BASE;
 2219|  27.2k|  as->orignins = nins;
 2220|  27.2k|  as->curins = nins;
 2221|       |
 2222|       |  /* Setup register hints for parent link instructions. */
 2223|  27.2k|  ir = IR(REF_FIRST);
  ------------------
  |  |  116|  27.2k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2224|  27.2k|  if (as->parent) {
  ------------------
  |  Branch (2224:7): [True: 10.4k, False: 16.7k]
  ------------------
 2225|  10.4k|    uint16_t *p;
 2226|  10.4k|    lastir = lj_snap_regspmap(as->J, as->parent, as->J->exitno, ir);
 2227|  10.4k|    if (lastir - ir > LJ_MAX_JSLOTS)
  ------------------
  |  |   85|  10.4k|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (2227:9): [True: 0, False: 10.4k]
  ------------------
 2228|      0|      lj_trace_err(as->J, LJ_TRERR_NYICOAL);
 2229|  10.4k|    as->stopins = (IRRef)((lastir-1) - as->ir);
 2230|  12.1k|    for (p = as->parentmap; ir < lastir; ir++) {
  ------------------
  |  Branch (2230:29): [True: 1.68k, False: 10.4k]
  ------------------
 2231|  1.68k|      RegSP rs = ir->prev;
 2232|  1.68k|      *p++ = (uint16_t)rs;  /* Copy original parent RegSP to parentmap. */
 2233|  1.68k|      if (!ra_hasspill(regsp_spill(rs)))
  ------------------
  |  |   39|  1.68k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  1.68k|#define SPS_NONE		0
  |  |  ------------------
  ------------------
  |  Branch (2233:11): [True: 1.68k, False: 0]
  ------------------
 2234|  1.68k|	ir->prev = (uint16_t)REGSP_HINT(regsp_reg(rs));
  ------------------
  |  |   45|  1.68k|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  1.68k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2235|      0|      else
 2236|      0|	ir->prev = REGSP_INIT;
  ------------------
  |  |   46|      0|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|      0|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
 2237|  1.68k|    }
 2238|  10.4k|  }
 2239|       |
 2240|  27.2k|  inloop = 0;
 2241|  27.2k|  as->evenspill = SPS_FIRST;
  ------------------
  |  |  142|  27.2k|#define SPS_FIRST	2
  ------------------
 2242|   983k|  for (lastir = IR(nins); ir < lastir; ir++) {
  ------------------
  |  |  116|  27.2k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (2242:27): [True: 956k, False: 27.2k]
  ------------------
 2243|   956k|    if (sink) {
  ------------------
  |  Branch (2243:9): [True: 3.46k, False: 953k]
  ------------------
 2244|  3.46k|      if (ir->r == RID_SINK)
  ------------------
  |  |   24|  3.46k|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|  3.46k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  3.46k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.46k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2244:11): [True: 574, False: 2.89k]
  ------------------
 2245|    574|	continue;
 2246|  2.89k|      if (ir->r == RID_SUNK) {  /* Revert after ASM restart. */
  ------------------
  |  |   25|  2.89k|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|  2.89k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  2.89k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  2.89k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2246:11): [True: 28, False: 2.86k]
  ------------------
 2247|     28|	ir->r = RID_SINK;
  ------------------
  |  |   24|     28|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|     28|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|     28|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     28|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2248|     28|	continue;
 2249|     28|      }
 2250|  2.89k|    }
 2251|   956k|    switch (ir->o) {
 2252|  12.8k|    case IR_LOOP:
  ------------------
  |  Branch (2252:5): [True: 12.8k, False: 943k]
  ------------------
 2253|  12.8k|      inloop = 1;
 2254|  12.8k|      break;
 2255|       |#if LJ_TARGET_ARM
 2256|       |    case IR_SLOAD:
 2257|       |      if (!((ir->op2 & IRSLOAD_TYPECHECK) || (ir+1)->o == IR_HIOP))
 2258|       |	break;
 2259|       |      /* fallthrough */
 2260|       |    case IR_ALOAD: case IR_HLOAD: case IR_ULOAD: case IR_VLOAD:
 2261|       |      if (!LJ_SOFTFP && irt_isnum(ir->t)) break;
 2262|       |      ir->prev = (uint16_t)REGSP_HINT((rload & 15));
 2263|       |      rload = lj_ror(rload, 4);
 2264|       |      continue;
 2265|       |    case IR_TMPREF:
 2266|       |      if ((ir->op2 & IRTMPREF_OUT2) && as->evenspill < 4)
 2267|       |	as->evenspill = 4;  /* TMPREF OUT2 needs two TValues on the stack. */
 2268|       |      break;
 2269|       |#endif
 2270|      0|    case IR_CALLXS: {
  ------------------
  |  Branch (2270:5): [True: 0, False: 956k]
  ------------------
 2271|      0|      CCallInfo ci;
 2272|      0|      ci.flags = asm_callx_flags(as, ir);
 2273|      0|      ir->prev = asm_setup_call_slots(as, ir, &ci);
 2274|      0|      if (inloop)
  ------------------
  |  Branch (2274:11): [True: 0, False: 0]
  ------------------
 2275|      0|	as->modset |= RSET_SCRATCH;
  ------------------
  |  |   98|      0|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|      0|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2276|      0|      continue;
 2277|      0|      }
 2278|  20.8k|    case IR_CALLL:
  ------------------
  |  Branch (2278:5): [True: 20.8k, False: 935k]
  ------------------
 2279|       |      /* lj_vm_next needs two TValues on the stack. */
 2280|       |#if LJ_TARGET_X64 && LJ_ABI_WIN
 2281|       |      if (ir->op2 == IRCALL_lj_vm_next && as->evenspill < SPS_FIRST + 4)
 2282|       |	as->evenspill = SPS_FIRST + 4;
 2283|       |#else
 2284|  20.8k|      if (SPS_FIRST < 4 && ir->op2 == IRCALL_lj_vm_next && as->evenspill < 4)
  ------------------
  |  |  142|  20.8k|#define SPS_FIRST	2
  ------------------
  |  Branch (2284:11): [Folded - Ignored]
  |  Branch (2284:28): [True: 920, False: 19.8k]
  |  Branch (2284:60): [True: 460, False: 460]
  ------------------
 2285|    460|	as->evenspill = 4;
 2286|  20.8k|#endif
 2287|       |      /* fallthrough */
 2288|  51.1k|    case IR_CALLN: case IR_CALLA: case IR_CALLS: {
  ------------------
  |  Branch (2288:5): [True: 0, False: 956k]
  |  Branch (2288:20): [True: 0, False: 956k]
  |  Branch (2288:35): [True: 30.3k, False: 925k]
  ------------------
 2289|  51.1k|      const CCallInfo *ci = &lj_ir_callinfo[ir->op2];
 2290|  51.1k|      ir->prev = asm_setup_call_slots(as, ir, ci);
 2291|  51.1k|      if (inloop)
  ------------------
  |  Branch (2291:11): [True: 24.3k, False: 26.8k]
  ------------------
 2292|  24.3k|	as->modset |= (ci->flags & CCI_NOFPRCLOBBER) ?
  ------------------
  |  |   41|  24.3k|#define CCI_NOFPRCLOBBER	0x0400	/* Does not clobber any FPRs. */
  ------------------
  |  Branch (2292:16): [True: 0, False: 24.3k]
  ------------------
 2293|  24.3k|		      (RSET_SCRATCH & ~RSET_FPR) : RSET_SCRATCH;
  ------------------
  |  |   98|      0|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|      0|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              		      (RSET_SCRATCH & ~RSET_FPR) : RSET_SCRATCH;
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              		      (RSET_SCRATCH & ~RSET_FPR) : RSET_SCRATCH;
  ------------------
  |  |   98|  24.3k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|  24.3k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|  24.3k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  24.3k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  24.3k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  24.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2294|  51.1k|      continue;
 2295|  20.8k|      }
 2296|    908|    case IR_HIOP:
  ------------------
  |  Branch (2296:5): [True: 908, False: 955k]
  ------------------
 2297|    908|      switch ((ir-1)->o) {
 2298|       |#if LJ_SOFTFP && LJ_TARGET_ARM
 2299|       |      case IR_SLOAD: case IR_ALOAD: case IR_HLOAD: case IR_ULOAD: case IR_VLOAD:
 2300|       |	if (ra_hashint((ir-1)->r)) {
 2301|       |	  ir->prev = (ir-1)->prev + 1;
 2302|       |	  continue;
 2303|       |	}
 2304|       |	break;
 2305|       |#endif
 2306|       |#if !LJ_SOFTFP && LJ_NEED_FP64 && LJ_32 && LJ_HASFFI
 2307|       |      case IR_CONV:
 2308|       |	if (irt_isfp((ir-1)->t)) {
 2309|       |	  ir->prev = REGSP_HINT(RID_FPRET);
 2310|       |	  continue;
 2311|       |	}
 2312|       |#endif
 2313|       |      /* fallthrough */
 2314|    908|      case IR_CALLN: case IR_CALLL: case IR_CALLS: case IR_CALLXS:
  ------------------
  |  Branch (2314:7): [True: 0, False: 908]
  |  Branch (2314:22): [True: 908, False: 0]
  |  Branch (2314:37): [True: 0, False: 908]
  |  Branch (2314:52): [True: 0, False: 908]
  ------------------
 2315|       |#if LJ_SOFTFP
 2316|       |      case IR_MIN: case IR_MAX:
 2317|       |#endif
 2318|    908|	(ir-1)->prev = REGSP_HINT(RID_RETLO);
  ------------------
  |  |   45|    908|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|    908|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2319|    908|	ir->prev = REGSP_HINT(RID_RETHI);
  ------------------
  |  |   45|    908|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|    908|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2320|    908|	continue;
 2321|      0|      default:
  ------------------
  |  Branch (2321:7): [True: 0, False: 908]
  ------------------
 2322|      0|	break;
 2323|    908|      }
 2324|      0|      break;
 2325|       |#if LJ_SOFTFP
 2326|       |    case IR_MIN: case IR_MAX:
 2327|       |      if ((ir+1)->o != IR_HIOP) break;
 2328|       |#endif
 2329|       |    /* fallthrough */
 2330|       |    /* C calls evict all scratch regs and return results in RID_RET. */
 2331|   110k|    case IR_SNEW: case IR_XSNEW: case IR_NEWREF: case IR_BUFPUT:
  ------------------
  |  Branch (2331:5): [True: 166, False: 955k]
  |  Branch (2331:19): [True: 0, False: 956k]
  |  Branch (2331:34): [True: 520, False: 955k]
  |  Branch (2331:50): [True: 109k, False: 846k]
  ------------------
 2332|   110k|      if (REGARG_NUMGPR < 3 && as->evenspill < 3)
  ------------------
  |  |  102|   110k|#define REGARG_NUMGPR	6
  ------------------
  |  Branch (2332:11): [Folded - Ignored]
  |  Branch (2332:32): [True: 0, False: 0]
  ------------------
 2333|      0|	as->evenspill = 3;  /* lj_str_new and lj_tab_newkey need 3 args. */
 2334|       |#if LJ_TARGET_X86 && LJ_HASFFI
 2335|       |      if (0) {
 2336|       |    case IR_CNEW:
 2337|       |	if (ir->op2 != REF_NIL && as->evenspill < 4)
 2338|       |	  as->evenspill = 4;  /* lj_cdata_newv needs 4 args. */
 2339|       |      }
 2340|       |      /* fallthrough */
 2341|       |#else
 2342|       |      /* fallthrough */
 2343|   110k|    case IR_CNEW:
  ------------------
  |  Branch (2343:5): [True: 0, False: 956k]
  ------------------
 2344|   110k|#endif
 2345|       |      /* fallthrough */
 2346|   145k|    case IR_TNEW: case IR_TDUP: case IR_CNEWI: case IR_TOSTR:
  ------------------
  |  Branch (2346:5): [True: 160, False: 955k]
  |  Branch (2346:19): [True: 406, False: 955k]
  |  Branch (2346:33): [True: 0, False: 956k]
  |  Branch (2346:48): [True: 34.0k, False: 922k]
  ------------------
 2347|   208k|    case IR_BUFSTR:
  ------------------
  |  Branch (2347:5): [True: 63.6k, False: 892k]
  ------------------
 2348|   208k|      ir->prev = REGSP_HINT(RID_RET);
  ------------------
  |  |   45|   208k|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|   208k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2349|   208k|      if (inloop)
  ------------------
  |  Branch (2349:11): [True: 102k, False: 106k]
  ------------------
 2350|   102k|	as->modset = RSET_SCRATCH;
  ------------------
  |  |   98|   102k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|   102k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   102k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   102k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   102k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|   102k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   102k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|   102k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|   102k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|   102k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2351|   208k|      continue;
 2352|  19.6k|    case IR_STRTO: case IR_OBAR:
  ------------------
  |  Branch (2352:5): [True: 19.6k, False: 936k]
  |  Branch (2352:20): [True: 0, False: 956k]
  ------------------
 2353|  19.6k|      if (inloop)
  ------------------
  |  Branch (2353:11): [True: 8.70k, False: 10.9k]
  ------------------
 2354|  8.70k|	as->modset = RSET_SCRATCH;
  ------------------
  |  |   98|  8.70k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|  8.70k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  8.70k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  8.70k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  8.70k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|  8.70k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  8.70k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  8.70k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  8.70k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  8.70k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2355|  19.6k|      break;
 2356|      0|#if !LJ_SOFTFP
 2357|       |#if !LJ_TARGET_X86ORX64
 2358|       |    case IR_LDEXP:
 2359|       |#endif
 2360|      0|#endif
 2361|       |      /* fallthrough */
 2362|      0|    case IR_POW:
  ------------------
  |  Branch (2362:5): [True: 0, False: 956k]
  ------------------
 2363|      0|      if (!LJ_SOFTFP && irt_isnum(ir->t)) {
  ------------------
  |  |  616|      0|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|      0|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  ------------------
                    if (!LJ_SOFTFP && irt_isnum(ir->t)) {
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2363:11): [Folded - Ignored]
  ------------------
 2364|      0|	if (inloop)
  ------------------
  |  Branch (2364:6): [True: 0, False: 0]
  ------------------
 2365|      0|	  as->modset |= RSET_SCRATCH;
  ------------------
  |  |   98|      0|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|      0|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2366|       |#if LJ_TARGET_X86
 2367|       |	if (irt_isnum(IR(ir->op2)->t)) {
 2368|       |	  if (as->evenspill < 4)  /* Leave room to call pow(). */
 2369|       |	    as->evenspill = 4;
 2370|       |	}
 2371|       |	break;
 2372|       |#else
 2373|      0|	ir->prev = REGSP_HINT(RID_FPRET);
  ------------------
  |  |   45|      0|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2374|      0|	continue;
 2375|      0|#endif
 2376|      0|      }
 2377|       |      /* fallthrough */ /* for integer POW */
 2378|  26.0k|    case IR_DIV: case IR_MOD:
  ------------------
  |  Branch (2378:5): [True: 17.3k, False: 938k]
  |  Branch (2378:18): [True: 8.70k, False: 947k]
  ------------------
 2379|  26.0k|      if ((LJ_64 && LJ_SOFTFP) || !irt_isnum(ir->t)) {
  ------------------
  |  |  640|  52.1k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if ((LJ_64 && LJ_SOFTFP) || !irt_isnum(ir->t)) {
  ------------------
  |  |  616|      0|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|      0|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if ((LJ_64 && LJ_SOFTFP) || !irt_isnum(ir->t)) {
  ------------------
  |  |  377|  26.0k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  26.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (2379:35): [True: 8.70k, False: 17.3k]
  ------------------
 2380|  8.70k|	ir->prev = REGSP_HINT(RID_RET);
  ------------------
  |  |   45|  8.70k|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  8.70k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2381|  8.70k|	if (inloop)
  ------------------
  |  Branch (2381:6): [True: 4.35k, False: 4.35k]
  ------------------
 2382|  4.35k|	  as->modset |= (RSET_SCRATCH & RSET_GPR);
  ------------------
  |  |   98|  4.35k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|  4.35k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|  4.35k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  4.35k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  4.35k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	  as->modset |= (RSET_SCRATCH & RSET_GPR);
  ------------------
  |  |   67|  4.35k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  4.35k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  4.35k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  4.35k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  4.35k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  4.35k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2383|  8.70k|	continue;
 2384|  8.70k|      }
 2385|  17.3k|      break;
 2386|       |#if LJ_64 && LJ_SOFTFP
 2387|       |    case IR_ADD: case IR_SUB: case IR_MUL:
 2388|       |      if (irt_isnum(ir->t)) {
 2389|       |	ir->prev = REGSP_HINT(RID_RET);
 2390|       |	if (inloop)
 2391|       |	  as->modset |= (RSET_SCRATCH & RSET_GPR);
 2392|       |	continue;
 2393|       |      }
 2394|       |      break;
 2395|       |#endif
 2396|  17.3k|    case IR_FPMATH:
  ------------------
  |  Branch (2396:5): [True: 17.2k, False: 938k]
  ------------------
 2397|  17.2k|#if LJ_TARGET_X86ORX64
 2398|  17.2k|      if (ir->op2 <= IRFPM_TRUNC) {
  ------------------
  |  Branch (2398:11): [True: 17.2k, False: 0]
  ------------------
 2399|  17.2k|	if (!(as->flags & JIT_F_SSE4_1)) {
  ------------------
  |  |   24|  17.2k|#define JIT_F_SSE4_1		(JIT_F_CPU << 1)
  |  |  ------------------
  |  |  |  |   19|  17.2k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  |  Branch (2399:6): [True: 0, False: 17.2k]
  ------------------
 2400|      0|	  ir->prev = REGSP_HINT(RID_XMM0);
  ------------------
  |  |   45|      0|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2401|      0|	  if (inloop)
  ------------------
  |  Branch (2401:8): [True: 0, False: 0]
  ------------------
 2402|      0|	    as->modset |= RSET_RANGE(RID_XMM0, RID_XMM3+1)|RID2RSET(RID_EAX);
  ------------------
  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
              	    as->modset |= RSET_RANGE(RID_XMM0, RID_XMM3+1)|RID2RSET(RID_EAX);
  ------------------
  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
 2403|      0|	  continue;
 2404|      0|	}
 2405|  17.2k|	break;
 2406|  17.2k|      }
 2407|      0|#endif
 2408|      0|      if (inloop)
  ------------------
  |  Branch (2408:11): [True: 0, False: 0]
  ------------------
 2409|      0|	as->modset |= RSET_SCRATCH;
  ------------------
  |  |   98|      0|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|      0|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2410|       |#if LJ_TARGET_X86
 2411|       |      break;
 2412|       |#else
 2413|      0|      ir->prev = REGSP_HINT(RID_FPRET);
  ------------------
  |  |   45|      0|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2414|      0|      continue;
 2415|      0|#endif
 2416|      0|#if LJ_TARGET_X86ORX64
 2417|       |    /* Non-constant shift counts need to be in RID_ECX on x86/x64. */
 2418|      0|    case IR_BSHL: case IR_BSHR: case IR_BSAR:
  ------------------
  |  Branch (2418:5): [True: 0, False: 956k]
  |  Branch (2418:19): [True: 0, False: 956k]
  |  Branch (2418:33): [True: 0, False: 956k]
  ------------------
 2419|      0|      if ((as->flags & JIT_F_BMI2))  /* Except if BMI2 is available. */
  ------------------
  |  |   25|      0|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|      0|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  |  Branch (2419:11): [True: 0, False: 0]
  ------------------
 2420|      0|	break;
 2421|       |      /* fallthrough */
 2422|      0|    case IR_BROL: case IR_BROR:
  ------------------
  |  Branch (2422:5): [True: 0, False: 956k]
  |  Branch (2422:19): [True: 0, False: 956k]
  ------------------
 2423|      0|      if (!irref_isk(ir->op2) && !ra_hashint(IR(ir->op2)->r)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
                    if (!irref_isk(ir->op2) && !ra_hashint(IR(ir->op2)->r)) {
  ------------------
  |  |   31|      0|#define ra_hashint(r)		((r) < RID_SUNK)
  |  |  ------------------
  |  |  |  |   25|      0|#define RID_SUNK		(RID_INIT-2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   23|      0|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|      0|#define RID_MASK		0x7f
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2423:11): [True: 0, False: 0]
  |  Branch (2423:34): [True: 0, False: 0]
  ------------------
 2424|      0|	IR(ir->op2)->r = REGSP_HINT(RID_ECX);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
              	IR(ir->op2)->r = REGSP_HINT(RID_ECX);
  ------------------
  |  |   45|      0|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2425|      0|	if (inloop)
  ------------------
  |  Branch (2425:6): [True: 0, False: 0]
  ------------------
 2426|      0|	  rset_set(as->modset, RID_ECX);
  ------------------
  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2427|      0|      }
 2428|      0|      break;
 2429|      0|#endif
 2430|       |    /* Do not propagate hints across type conversions or loads. */
 2431|      0|    case IR_TOBIT:
  ------------------
  |  Branch (2431:5): [True: 0, False: 956k]
  ------------------
 2432|      0|    case IR_XLOAD:
  ------------------
  |  Branch (2432:5): [True: 0, False: 956k]
  ------------------
 2433|      0|#if !LJ_TARGET_ARM
 2434|  17.4k|    case IR_ALOAD: case IR_HLOAD: case IR_ULOAD: case IR_VLOAD:
  ------------------
  |  Branch (2434:5): [True: 2.74k, False: 953k]
  |  Branch (2434:20): [True: 12.6k, False: 943k]
  |  Branch (2434:35): [True: 183, False: 955k]
  |  Branch (2434:50): [True: 1.84k, False: 954k]
  ------------------
 2435|  17.4k|#endif
 2436|  17.4k|      break;
 2437|  36.6k|    case IR_CONV:
  ------------------
  |  Branch (2437:5): [True: 36.6k, False: 919k]
  ------------------
 2438|  36.6k|      if (irt_isfp(ir->t) || (ir->op2 & IRCONV_SRCMASK) == IRT_NUM ||
  ------------------
  |  |  388|  73.3k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|  73.3k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  36.6k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 17.3k, False: 19.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|  19.3k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  19.3k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 19.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (irt_isfp(ir->t) || (ir->op2 & IRCONV_SRCMASK) == IRT_NUM ||
  ------------------
  |  |  252|  19.3k|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
  |  Branch (2438:30): [True: 19.3k, False: 0]
  ------------------
 2439|  36.6k|	  (ir->op2 & IRCONV_SRCMASK) == IRT_FLOAT)
  ------------------
  |  |  252|      0|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
  |  Branch (2439:4): [True: 0, False: 0]
  ------------------
 2440|  36.6k|	break;
 2441|       |      /* fallthrough */
 2442|   565k|    default:
  ------------------
  |  Branch (2442:5): [True: 565k, False: 390k]
  ------------------
 2443|       |      /* Propagate hints across likely 'op reg, imm' or 'op reg'. */
 2444|   565k|      if (irref_isk(ir->op2) && !irref_isk(ir->op1) &&
  ------------------
  |  |  485|  1.13M|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 434k, False: 131k]
  |  |  ------------------
  ------------------
                    if (irref_isk(ir->op2) && !irref_isk(ir->op1) &&
  ------------------
  |  |  485|   999k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (2444:33): [True: 270k, False: 163k]
  ------------------
 2445|   565k|	  ra_hashint(regsp_reg(IR(ir->op1)->prev))) {
  ------------------
  |  |   31|   270k|#define ra_hashint(r)		((r) < RID_SUNK)
  |  |  ------------------
  |  |  |  |   25|   270k|#define RID_SUNK		(RID_INIT-2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   23|   270k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   21|   270k|#define RID_NONE		0x80
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|   270k|#define RID_MASK		0x7f
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (31:24): [True: 37.6k, False: 232k]
  |  |  ------------------
  ------------------
 2446|  37.6k|	ir->prev = IR(ir->op1)->prev;
  ------------------
  |  |  116|  37.6k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2447|  37.6k|	continue;
 2448|  37.6k|      }
 2449|   527k|      break;
 2450|   956k|    }
 2451|   648k|    ir->prev = REGSP_INIT;
  ------------------
  |  |   46|   648k|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|   648k|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
 2452|   648k|  }
 2453|  27.2k|  if ((as->evenspill & 1))
  ------------------
  |  Branch (2453:7): [True: 0, False: 27.2k]
  ------------------
 2454|      0|    as->oddspill = as->evenspill++;
 2455|  27.2k|  else
 2456|  27.2k|    as->oddspill = 0;
 2457|  27.2k|}
lj_asm.c:ra_setup:
  355|  27.2k|{
  356|  27.2k|  Reg r;
  357|       |  /* Initially all regs (except the stack pointer) are free for use. */
  358|  27.2k|  as->freeset = RSET_INIT;
  ------------------
  |  |   72|  27.2k|#define RSET_INIT	RSET_ALL
  |  |  ------------------
  |  |  |  |   71|  27.2k|#define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  27.2k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   72|  27.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   70|  27.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   68|  27.2k|			 - RID2RSET(RID_ESP) \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  27.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  27.2k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  562|  27.2k|#define LJ_GC64			1
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  27.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  27.2k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   72|  27.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   70|  27.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|  27.2k|  as->modset = RSET_EMPTY;
  ------------------
  |  |   71|  27.2k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  360|  27.2k|  as->weakset = RSET_EMPTY;
  ------------------
  |  |   71|  27.2k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  361|  27.2k|  as->phiset = RSET_EMPTY;
  ------------------
  |  |   71|  27.2k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  362|  27.2k|  memset(as->phireg, 0, sizeof(as->phireg));
  363|   897k|  for (r = RID_MIN_GPR; r < RID_MAX; r++)
  ------------------
  |  Branch (363:25): [True: 870k, False: 27.2k]
  ------------------
  364|   870k|    as->cost[r] = REGCOST(~0u, 0u);
  ------------------
  |  |  127|   870k|#define REGCOST(cost, ref)	((RegCost)(ref) + ((RegCost)(cost) << 16))
  ------------------
  365|  27.2k|}
lj_asm.c:asm_collectargs:
 1390|   102k|{
 1391|   102k|  uint32_t n = CCI_XNARGS(ci);
  ------------------
  |  |   60|   102k|#define CCI_XNARGS(ci)		CCI_NARGS((ci))
  |  |  ------------------
  |  |  |  |   19|   102k|#define CCI_NARGS(ci)		((ci)->flags & 0xff)	/* # of args. */
  |  |  ------------------
  ------------------
 1392|       |  /* Account for split args. */
 1393|   102k|  lj_assertA(n <= CCI_NARGS_MAX*2, "too many args %d to collect", n);
  ------------------
  |  |  111|   102k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   102k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   102k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 102k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   102k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1394|   102k|  if ((ci->flags & CCI_L)) { *args++ = ASMREF_L; n--; }
  ------------------
  |  |   39|   102k|#define CCI_L			0x0100	/* Implicit L arg. */
  ------------------
                if ((ci->flags & CCI_L)) { *args++ = ASMREF_L; n--; }
  ------------------
  |  |  120|      0|#define ASMREF_L		REF_NIL		/* Stores register for L. */
  ------------------
  |  Branch (1394:7): [True: 0, False: 102k]
  ------------------
 1395|   325k|  while (n-- > 1) {
  ------------------
  |  Branch (1395:10): [True: 222k, False: 102k]
  ------------------
 1396|   222k|    ir = IR(ir->op1);
  ------------------
  |  |  116|   222k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1397|   222k|    lj_assertA(ir->o == IR_CARG, "malformed CALL arg tree");
  ------------------
  |  |  111|   222k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   222k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   222k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 222k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   222k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1398|   222k|    args[n] = ir->op2 == REF_NIL ? 0 : ir->op2;
  ------------------
  |  Branch (1398:15): [True: 0, False: 222k]
  ------------------
 1399|   222k|  }
 1400|   102k|  args[0] = ir->op1 == REF_NIL ? 0 : ir->op1;
  ------------------
  |  Branch (1400:13): [True: 0, False: 102k]
  ------------------
 1401|   102k|  lj_assertA(IR(ir->op1)->o != IR_CARG, "malformed CALL arg tree");
  ------------------
  |  |  111|   102k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   102k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   102k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 102k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   102k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1402|   102k|}
lj_asm.c:asm_tail_link:
 2123|  14.3k|{
 2124|  14.3k|  SnapNo snapno = as->T->nsnap-1;  /* Last snapshot. */
 2125|  14.3k|  SnapShot *snap = &as->T->snap[snapno];
 2126|  14.3k|  int gotframe = 0;
 2127|  14.3k|  BCReg baseslot = asm_baseslot(as, snap, &gotframe);
 2128|       |
 2129|  14.3k|  as->topslot = snap->topslot;
 2130|  14.3k|  checkmclim(as);
 2131|  14.3k|  ra_allocref(as, REF_BASE, RID2RSET(RID_BASE));
  ------------------
  |  |   70|  14.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
 2132|       |
 2133|  14.3k|  if (as->T->link == 0) {
  ------------------
  |  Branch (2133:7): [True: 7.29k, False: 7.05k]
  ------------------
 2134|       |    /* Setup fixed registers for exit to interpreter. */
 2135|  7.29k|    const BCIns *pc = snap_pc(&as->T->snapmap[snap->mapofs + snap->nent]);
 2136|  7.29k|    int32_t mres;
 2137|  7.29k|    if (bc_op(*pc) == BC_JLOOP) {  /* NYI: find a better way to do this. */
  ------------------
  |  |   34|  7.29k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2137:9): [True: 0, False: 7.29k]
  ------------------
 2138|      0|      BCIns *retpc = &traceref(as->J, bc_d(*pc))->startins;
  ------------------
  |  |  298|      0|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2139|      0|      if (bc_isret(bc_op(*retpc)))
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2139:11): [True: 0, False: 0]
  ------------------
 2140|      0|	pc = retpc;
 2141|      0|    }
 2142|  7.29k|#if LJ_GC64
 2143|  7.29k|    emit_loadu64(as, RID_LPC, u64ptr(pc));
  ------------------
  |  |   98|  7.29k|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
 2144|       |#else
 2145|       |    ra_allockreg(as, i32ptr(J2GG(as->J)->dispatch), RID_DISPATCH);
 2146|       |    ra_allockreg(as, i32ptr(pc), RID_LPC);
 2147|       |#endif
 2148|  7.29k|    mres = (int32_t)(snap->nslots - baseslot - LJ_FR2);
  ------------------
  |  |  569|  7.29k|#define LJ_FR2			1
  ------------------
 2149|  7.29k|    switch (bc_op(*pc)) {
  ------------------
  |  |   34|  7.29k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 2150|      0|    case BC_CALLM: case BC_CALLMT:
  ------------------
  |  Branch (2150:5): [True: 0, False: 7.29k]
  |  Branch (2150:20): [True: 0, False: 7.29k]
  ------------------
 2151|      0|      mres -= (int32_t)(1 + LJ_FR2 + bc_a(*pc) + bc_c(*pc)); break;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                    mres -= (int32_t)(1 + LJ_FR2 + bc_a(*pc) + bc_c(*pc)); break;
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                    mres -= (int32_t)(1 + LJ_FR2 + bc_a(*pc) + bc_c(*pc)); break;
  ------------------
  |  |   37|      0|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
 2152|      0|    case BC_RETM: mres -= (int32_t)(bc_a(*pc) + bc_d(*pc)); break;
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  case BC_RETM: mres -= (int32_t)(bc_a(*pc) + bc_d(*pc)); break;
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2152:5): [True: 0, False: 7.29k]
  ------------------
 2153|      0|    case BC_TSETM: mres -= (int32_t)bc_a(*pc); break;
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (2153:5): [True: 0, False: 7.29k]
  ------------------
 2154|  7.29k|    default: if (bc_op(*pc) < BC_FUNCF) mres = 0; break;
  ------------------
  |  |   34|  7.29k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2154:5): [True: 7.29k, False: 0]
  |  Branch (2154:18): [True: 6.48k, False: 817]
  ------------------
 2155|  7.29k|    }
 2156|  7.29k|    ra_allockreg(as, mres, RID_RET);  /* Return MULTRES or 0. */
  ------------------
  |  |  659|  7.29k|#define ra_allockreg(as, k, r)		emit_loadi(as, (r), (k))
  ------------------
 2157|  7.29k|  } else if (baseslot) {
  ------------------
  |  Branch (2157:14): [True: 2.13k, False: 4.92k]
  ------------------
 2158|       |    /* Save modified BASE for linking to trace with higher start frame. */
 2159|  2.13k|    emit_setgl(as, RID_BASE, jit_base);
  ------------------
  |  |  269|  2.13k|#define emit_setgl(as, r, field) emit_opgl(as, XO_MOVto, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  2.13k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  2.13k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  2.13k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  2.13k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2160|  2.13k|  }
 2161|  14.3k|  emit_addptr(as, RID_BASE, 8*(int32_t)baseslot);
 2162|       |
 2163|  14.3k|  if (as->J->ktrace) {  /* Patch ktrace slot with the final GCtrace pointer. */
  ------------------
  |  Branch (2163:7): [True: 633, False: 13.7k]
  ------------------
 2164|    633|    setgcref(IR(as->J->ktrace)[LJ_GC64].gcr, obj2gco(as->J->curfinal));
  ------------------
  |  |   72|    633|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 2165|    633|    IR(as->J->ktrace)->o = IR_KGC;
  ------------------
  |  |  116|    633|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2166|    633|  }
 2167|       |
 2168|       |  /* Sync the interpreter state with the on-trace state. */
 2169|  14.3k|  asm_stack_restore(as, snap);
 2170|       |
 2171|       |  /* Root traces that add frames need to check the stack at the end. */
 2172|  14.3k|  if (!as->parent && gotframe)
  ------------------
  |  Branch (2172:7): [True: 7.95k, False: 6.40k]
  |  Branch (2172:22): [True: 1.12k, False: 6.82k]
  ------------------
 2173|  1.12k|    asm_stack_check(as, as->topslot, NULL, as->freeset & RSET_GPR, snapno);
  ------------------
  |  |   67|  1.12k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  1.12k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  1.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  1.12k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  1.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  1.12k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  1.12k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  1.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2174|  14.3k|}
lj_asm.c:asm_baseslot:
 2108|  14.3k|{
 2109|  14.3k|  SnapEntry *map = &as->T->snapmap[snap->mapofs];
 2110|  14.3k|  MSize n;
 2111|  37.0k|  for (n = snap->nent; n > 0; n--) {
  ------------------
  |  Branch (2111:24): [True: 25.6k, False: 11.4k]
  ------------------
 2112|  25.6k|    SnapEntry sn = map[n-1];
 2113|  25.6k|    if ((sn & SNAP_FRAME)) {
  ------------------
  |  |  203|  25.6k|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
  |  Branch (2113:9): [True: 2.95k, False: 22.7k]
  ------------------
 2114|  2.95k|      *gotframe = 1;
 2115|  2.95k|      return snap_slot(sn) - LJ_FR2;
  ------------------
  |  |  221|  2.95k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
                    return snap_slot(sn) - LJ_FR2;
  ------------------
  |  |  569|  2.95k|#define LJ_FR2			1
  ------------------
 2116|  2.95k|    }
 2117|  25.6k|  }
 2118|  11.4k|  return 0;
 2119|  14.3k|}
lj_asm.c:ra_allocref:
  667|   863k|{
  668|   863k|  IRIns *ir = IR(ref);
  ------------------
  |  |  116|   863k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  669|   863k|  RegSet pick = as->freeset & allow;
  670|   863k|  Reg r;
  671|   863k|  lj_assertA(ra_noreg(ir->r),
  ------------------
  |  |  111|   863k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   863k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   863k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 863k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   863k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  672|   863k|	     "IR %04d already has reg %d", ref - REF_BIAS, ir->r);
  673|   863k|  if (pick) {
  ------------------
  |  Branch (673:7): [True: 863k, False: 0]
  ------------------
  674|       |    /* First check register hint from propagation or PHI. */
  675|   863k|    if (ra_hashint(ir->r)) {
  ------------------
  |  |   31|   863k|#define ra_hashint(r)		((r) < RID_SUNK)
  |  |  ------------------
  |  |  |  |   25|   863k|#define RID_SUNK		(RID_INIT-2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   23|   863k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   21|   863k|#define RID_NONE		0x80
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|   863k|#define RID_MASK		0x7f
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (31:24): [True: 470k, False: 393k]
  |  |  ------------------
  ------------------
  676|   470k|      r = ra_gethint(ir->r);
  ------------------
  |  |   32|   470k|#define ra_gethint(r)		((Reg)((r) & RID_MASK))
  |  |  ------------------
  |  |  |  |   22|   470k|#define RID_MASK		0x7f
  |  |  ------------------
  ------------------
  677|   470k|      if (rset_test(pick, r))  /* Use hint register if possible. */
  ------------------
  |  |   74|   470k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 213k, False: 256k]
  |  |  ------------------
  ------------------
  678|   213k|	goto found;
  679|       |      /* Rematerialization is cheaper than missing a hint. */
  680|   256k|      if (rset_test(allow, r) && emit_canremat(regcost_ref(as->cost[r]))) {
  ------------------
  |  |   74|   513k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 65.5k, False: 191k]
  |  |  ------------------
  ------------------
                    if (rset_test(allow, r) && emit_canremat(regcost_ref(as->cost[r]))) {
  ------------------
  |  |  571|  65.5k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  |  |  ------------------
  |  |  |  Branch (571:28): [True: 344, False: 65.2k]
  |  |  ------------------
  ------------------
  681|    344|	ra_rematk(as, regcost_ref(as->cost[r]));
  ------------------
  |  |  128|    344|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  682|    344|	goto found;
  683|    344|      }
  684|   256k|      RA_DBGX((as, "hintmiss  $f $r", ref, r));
  ------------------
  |  |  341|   256k|#define RA_DBGX(x)	((void)0)
  ------------------
  685|   256k|    }
  686|       |    /* Invariants should preferably get unmodified registers. */
  687|   649k|    if (ref < as->loopref && !irt_isphi(ir->t)) {
  ------------------
  |  |  448|   365k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (687:9): [True: 365k, False: 283k]
  |  Branch (687:30): [True: 362k, False: 2.88k]
  ------------------
  688|   362k|      if ((pick & ~as->modset))
  ------------------
  |  Branch (688:11): [True: 25.7k, False: 337k]
  ------------------
  689|  25.7k|	pick &= ~as->modset;
  690|   362k|      r = rset_pickbot(pick);  /* Reduce conflicts with inverse allocation. */
  ------------------
  |  |  215|   362k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|   362k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|   362k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  691|   362k|    } else {
  692|       |      /* We've got plenty of regs, so get callee-save regs if possible. */
  693|   286k|      if (RID_NUM_GPR > 8 && (pick & ~RSET_SCRATCH))
  ------------------
  |  |   98|   286k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|   286k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   286k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   286k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   286k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|   286k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   286k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|   286k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|   286k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|   286k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (693:11): [Folded - Ignored]
  |  Branch (693:30): [True: 76.5k, False: 210k]
  ------------------
  694|  76.5k|	pick &= ~RSET_SCRATCH;
  ------------------
  |  |   98|  76.5k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|  76.5k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  76.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  76.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  76.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|  76.5k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  76.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  76.5k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  76.5k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  76.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  695|   286k|      r = rset_picktop(pick);
  ------------------
  |  |  214|   286k|#define rset_picktop(rs)	rset_picktop_(rs)
  |  |  ------------------
  |  |  |  |  120|   286k|#define rset_picktop_(rs)	(lj_fls(lj_bswap(rs)) ^ 0x18)
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   286k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  696|   286k|    }
  697|   649k|  } else {
  698|      0|    r = ra_evict(as, allow);
  699|      0|  }
  700|   863k|found:
  701|   863k|  RA_DBGX((as, "alloc     $f $r", ref, r));
  ------------------
  |  |  341|   863k|#define RA_DBGX(x)	((void)0)
  ------------------
  702|   863k|  ir->r = (uint8_t)r;
  703|   863k|  rset_clear(as->freeset, r);
  ------------------
  |  |   76|   863k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|   863k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  704|   863k|  ra_noweak(as, r);
  ------------------
  |  |  349|   863k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|   863k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   863k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  705|   863k|  as->cost[r] = REGCOST_REF_T(ref, irt_t(ir->t));
  ------------------
  |  |  132|   863k|#define REGCOST_REF_T(ref, t)	(REGCOST((ref), (ref)) + REGCOST_T((t)))
  |  |  ------------------
  |  |  |  |  127|   863k|#define REGCOST(cost, ref)	((RegCost)(ref) + ((RegCost)(cost) << 16))
  |  |  ------------------
  |  |               #define REGCOST_REF_T(ref, t)	(REGCOST((ref), (ref)) + REGCOST_T((t)))
  |  |  ------------------
  |  |  |  |  131|   863k|  ((RegCost)((t)&IRT_ISPHI) * (((RegCost)(REGCOST_PHI_WEIGHT)<<16)/IRT_ISPHI))
  |  |  |  |  ------------------
  |  |  |  |  |  |  121|   863k|#define REGCOST_PHI_WEIGHT	64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  706|   863k|  return r;
  707|   863k|}
lj_asm.c:ra_rematk:
  369|  85.8k|{
  370|  85.8k|  IRIns *ir;
  371|  85.8k|  Reg r;
  372|  85.8k|  if (ra_iskref(ref)) {
  ------------------
  |  |  170|  85.8k|#define ra_iskref(ref)		0
  |  |  ------------------
  |  |  |  Branch (170:25): [Folded - Ignored]
  |  |  ------------------
  ------------------
  373|      0|    r = ra_krefreg(ref);
  ------------------
  |  |  171|      0|#define ra_krefreg(ref)		RID_MIN_GPR
  ------------------
  374|      0|    lj_assertA(!rset_test(as->freeset, r), "rematk of free reg %d", r);
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  375|      0|    ra_free(as, r);
  ------------------
  |  |  346|      0|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  376|      0|    ra_modified(as, r);
  ------------------
  |  |  347|      0|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  377|      0|#if LJ_64
  378|      0|    emit_loadu64(as, r, ra_krefk(as, ref));
  ------------------
  |  |  172|      0|#define ra_krefk(as, ref)	0
  ------------------
  379|       |#else
  380|       |    emit_loadi(as, r, ra_krefk(as, ref));
  381|       |#endif
  382|      0|    return r;
  383|      0|  }
  384|  85.8k|  ir = IR(ref);
  ------------------
  |  |  116|  85.8k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  385|  85.8k|  r = ir->r;
  386|  85.8k|  lj_assertA(ra_hasreg(r), "rematk of K%03d has no reg", REF_BIAS - ref);
  ------------------
  |  |  111|  85.8k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  85.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  85.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 85.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  85.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  387|  85.8k|  lj_assertA(!ra_hasspill(ir->s),
  ------------------
  |  |  111|  85.8k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  85.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  85.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 85.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  85.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  388|  85.8k|	     "rematk of K%03d has spill slot [%x]", REF_BIAS - ref, ir->s);
  389|  85.8k|  ra_free(as, r);
  ------------------
  |  |  346|  85.8k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|  85.8k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  85.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  390|  85.8k|  ra_modified(as, r);
  ------------------
  |  |  347|  85.8k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|  85.8k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  85.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  391|  85.8k|  ir->r = RID_INIT;  /* Do not keep any hint. */
  ------------------
  |  |   23|  85.8k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   21|  85.8k|#define RID_NONE		0x80
  |  |  ------------------
  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   22|  85.8k|#define RID_MASK		0x7f
  |  |  ------------------
  ------------------
  392|  85.8k|  RA_DBGX((as, "remat     $i $r", ir, r));
  ------------------
  |  |  341|  85.8k|#define RA_DBGX(x)	((void)0)
  ------------------
  393|  85.8k|#if !LJ_SOFTFP32
  394|  85.8k|  if (ir->o == IR_KNUM) {
  ------------------
  |  Branch (394:7): [True: 20.2k, False: 65.6k]
  ------------------
  395|  20.2k|    emit_loadk64(as, r, ir);
  396|  20.2k|  } else
  397|  65.6k|#endif
  398|  65.6k|  if (emit_canremat(REF_BASE) && ir->o == IR_BASE) {
  ------------------
  |  |  571|   131k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  |  |  ------------------
  |  |  |  Branch (571:28): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (398:34): [True: 22.4k, False: 43.1k]
  ------------------
  399|  22.4k|    ra_sethint(ir->r, RID_BASE);  /* Restore BASE register hint. */
  ------------------
  |  |   33|  22.4k|#define ra_sethint(rr, r)	rr = (uint8_t)((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  22.4k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
  400|  22.4k|    emit_getgl(as, r, jit_base);
  ------------------
  |  |  268|  22.4k|#define emit_getgl(as, r, field) emit_opgl(as, XO_MOV, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  22.4k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  22.4k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  22.4k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  22.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  401|  43.1k|  } else if (emit_canremat(ASMREF_L) && ir->o == IR_KPRI) {
  ------------------
  |  |  571|  86.2k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  |  |  ------------------
  |  |  |  Branch (571:28): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (401:41): [True: 13.3k, False: 29.8k]
  ------------------
  402|       |    /* REF_NIL stores ASMREF_L register. */
  403|  13.3k|    lj_assertA(irt_isnil(ir->t), "rematk of bad ASMREF_L");
  ------------------
  |  |  111|  13.3k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  13.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  13.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 13.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  13.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  404|  13.3k|    emit_getgl(as, r, cur_L);
  ------------------
  |  |  268|  13.3k|#define emit_getgl(as, r, field) emit_opgl(as, XO_MOV, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  13.3k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  13.3k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  13.3k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  13.3k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|  13.3k|#if LJ_64
  406|  29.8k|  } else if (ir->o == IR_KINT64) {
  ------------------
  |  Branch (406:14): [True: 0, False: 29.8k]
  ------------------
  407|      0|    emit_loadu64(as, r, ir_kint64(ir)->u64);
  ------------------
  |  |  593|      0|#define ir_kint64(ir)	check_exp((ir)->o == IR_KINT64, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|      0|#if LJ_GC64
  409|  29.8k|  } else if (ir->o == IR_KGC) {
  ------------------
  |  Branch (409:14): [True: 29.8k, False: 0]
  ------------------
  410|  29.8k|    emit_loadu64(as, r, (uintptr_t)ir_kgc(ir));
  ------------------
  |  |  587|  29.8k|#define ir_kgc(ir)	check_exp((ir)->o == IR_KGC, gcref((ir)[LJ_GC64].gcr))
  |  |  ------------------
  |  |  |  |  367|  29.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  29.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  29.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 29.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  29.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|  29.8k|  } else if (ir->o == IR_KPTR || ir->o == IR_KKPTR) {
  ------------------
  |  Branch (411:14): [True: 0, False: 0]
  |  Branch (411:34): [True: 0, False: 0]
  ------------------
  412|      0|    emit_loadu64(as, r, (uintptr_t)ir_kptr(ir));
  ------------------
  |  |  596|      0|  check_exp((ir)->o == IR_KPTR || (ir)->o == IR_KKPTR, \
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  597|      0|    mref((ir)[LJ_GC64].ptr, void))
  ------------------
  413|      0|#endif
  414|      0|#endif
  415|      0|  } else {
  416|      0|    lj_assertA(ir->o == IR_KINT || ir->o == IR_KGC ||
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  417|      0|	       ir->o == IR_KPTR || ir->o == IR_KKPTR || ir->o == IR_KNULL,
  418|      0|	       "rematk of bad IR op %d", ir->o);
  419|      0|    emit_loadi(as, r, ir->i);
  420|      0|  }
  421|  85.8k|  return r;
  422|  85.8k|}
lj_asm.c:ra_restore:
  465|   255k|{
  466|   255k|  if (emit_canremat(ref)) {
  ------------------
  |  |  571|   255k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  |  |  ------------------
  |  |  |  Branch (571:28): [True: 59.9k, False: 195k]
  |  |  ------------------
  ------------------
  467|  59.9k|    return ra_rematk(as, ref);
  468|   195k|  } else {
  469|   195k|    IRIns *ir = IR(ref);
  ------------------
  |  |  116|   195k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  470|   195k|    int32_t ofs = ra_spill(as, ir);  /* Force a spill slot. */
  471|   195k|    Reg r = ir->r;
  472|   195k|    lj_assertA(ra_hasreg(r), "restore of IR %04d has no reg", ref - REF_BIAS);
  ------------------
  |  |  111|   195k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   195k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   195k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 195k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   195k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  473|   195k|    ra_sethint(ir->r, r);  /* Keep hint. */
  ------------------
  |  |   33|   195k|#define ra_sethint(rr, r)	rr = (uint8_t)((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|   195k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
  474|   195k|    ra_free(as, r);
  ------------------
  |  |  346|   195k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|   195k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   195k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  475|   195k|    if (!rset_test(as->weakset, r)) {  /* Only restore non-weak references. */
  ------------------
  |  |   74|   195k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (475:9): [True: 173k, False: 21.7k]
  ------------------
  476|   173k|      ra_modified(as, r);
  ------------------
  |  |  347|   173k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|   173k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   173k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|   173k|      RA_DBGX((as, "restore   $i $r", ir, r));
  ------------------
  |  |  341|   173k|#define RA_DBGX(x)	((void)0)
  ------------------
  478|   173k|      emit_spload(as, ir, r, ofs);
  ------------------
  |  |  236|   173k|  emit_loadofs(as, ir, (r), RID_SP, (ofs))
  ------------------
  479|   173k|    }
  480|   195k|    return r;
  481|   195k|  }
  482|   255k|}
lj_asm.c:ra_spill:
  426|   196k|{
  427|   196k|  int32_t slot = ir->s;
  428|   196k|  lj_assertA(ir >= as->ir + REF_TRUE,
  ------------------
  |  |  111|   196k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   196k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   196k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 196k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   196k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  429|   196k|	     "spill of K%03d", REF_BIAS - (int)(ir - as->ir));
  430|   196k|  if (!ra_hasspill(slot)) {
  ------------------
  |  |   39|   196k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|   196k|#define SPS_NONE		0
  |  |  ------------------
  ------------------
  |  Branch (430:7): [True: 111k, False: 85.5k]
  ------------------
  431|   111k|    if (irt_is64(ir->t)) {
  ------------------
  |  |  409|   111k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|   111k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|   111k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|   111k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|   111k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|   111k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 92.1k, False: 19.0k]
  |  |  ------------------
  ------------------
  432|  92.1k|      slot = as->evenspill;
  433|  92.1k|      as->evenspill += 2;
  434|  92.1k|    } else if (as->oddspill) {
  ------------------
  |  Branch (434:16): [True: 6.76k, False: 12.2k]
  ------------------
  435|  6.76k|      slot = as->oddspill;
  436|  6.76k|      as->oddspill = 0;
  437|  12.2k|    } else {
  438|  12.2k|      slot = as->evenspill;
  439|  12.2k|      as->oddspill = slot+1;
  440|  12.2k|      as->evenspill += 2;
  441|  12.2k|    }
  442|   111k|    if (as->evenspill > 256)
  ------------------
  |  Branch (442:9): [True: 0, False: 111k]
  ------------------
  443|      0|      lj_trace_err(as->J, LJ_TRERR_SPILLOV);
  444|   111k|    ir->s = (uint8_t)slot;
  445|   111k|  }
  446|   196k|  return sps_scale(slot);
  ------------------
  |  |  151|   196k|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
  447|   196k|}
lj_asm.c:ra_alloc1:
  711|   270k|{
  712|   270k|  Reg r = IR(ref)->r;
  ------------------
  |  |  116|   270k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  713|       |  /* Note: allow is ignored if the register is already allocated. */
  714|   270k|  if (ra_noreg(r)) r = ra_allocref(as, ref, allow);
  ------------------
  |  |   27|   270k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|   270k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 127k, False: 142k]
  |  |  ------------------
  ------------------
  715|   270k|  ra_noweak(as, r);
  ------------------
  |  |  349|   270k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|   270k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   270k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  716|   270k|  return r;
  717|   270k|}
lj_asm.c:asm_snap_prev:
 1070|   954k|{
 1071|   954k|  if (as->curins < as->snapref) {
  ------------------
  |  Branch (1071:7): [True: 102k, False: 851k]
  ------------------
 1072|   102k|    uintptr_t ofs = (uintptr_t)(as->mctoporig - as->mcp);
 1073|   102k|    if (ofs >= 0x10000) lj_trace_err(as->J, LJ_TRERR_MCODEOV);
  ------------------
  |  Branch (1073:9): [True: 0, False: 102k]
  ------------------
 1074|   111k|    do {
 1075|   111k|      if (as->snapno == 0) return;
  ------------------
  |  Branch (1075:11): [True: 1.01k, False: 110k]
  ------------------
 1076|   110k|      as->snapno--;
 1077|   110k|      as->snapref = as->T->snap[as->snapno].ref;
 1078|   110k|      as->T->snap[as->snapno].mcofs = (uint16_t)ofs;  /* Remember mcode ofs. */
 1079|   110k|    } while (as->curins < as->snapref);  /* May have no ins inbetween. */
  ------------------
  |  Branch (1079:14): [True: 8.79k, False: 101k]
  ------------------
 1080|   101k|    as->snapalloc = 1;
 1081|   101k|  }
 1082|   954k|}
lj_asm.c:asm_snap_prep:
 1052|   455k|{
 1053|   455k|  if (as->snapalloc) {
  ------------------
  |  Branch (1053:7): [True: 96.4k, False: 358k]
  ------------------
 1054|       |    /* Alloc on first invocation for each snapshot. */
 1055|  96.4k|    as->snapalloc = 0;
 1056|  96.4k|    asm_snap_alloc(as, as->snapno);
 1057|  96.4k|    as->snaprename = as->T->nins;
 1058|   358k|  } else {
 1059|       |    /* Check any renames above the highwater mark. */
 1060|   360k|    for (; as->snaprename < as->T->nins; as->snaprename++) {
  ------------------
  |  Branch (1060:12): [True: 1.12k, False: 358k]
  ------------------
 1061|  1.12k|      IRIns *ir = &as->T->ir[as->snaprename];
 1062|  1.12k|      if (asm_snap_checkrename(as, ir->op1))
  ------------------
  |  Branch (1062:11): [True: 1.12k, False: 0]
  ------------------
 1063|  1.12k|	ir->op2 = REF_BIAS-1;  /* Kill rename. */
 1064|  1.12k|    }
 1065|   358k|  }
 1066|   455k|}
lj_asm.c:asm_snap_alloc:
 1011|  96.4k|{
 1012|  96.4k|  SnapShot *snap = &as->T->snap[snapno];
 1013|  96.4k|  SnapEntry *map = &as->T->snapmap[snap->mapofs];
 1014|  96.4k|  MSize n, nent = snap->nent;
 1015|  96.4k|  as->snapfilt1 = as->snapfilt2 = 0;
 1016|   374k|  for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (1016:15): [True: 277k, False: 96.4k]
  ------------------
 1017|   277k|    SnapEntry sn = map[n];
 1018|   277k|    IRRef ref = snap_ref(sn);
  ------------------
  |  |  220|   277k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
 1019|   277k|    if (!irref_isk(ref)) {
  ------------------
  |  |  485|   277k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (1019:9): [True: 189k, False: 87.7k]
  ------------------
 1020|   189k|      asm_snap_alloc1(as, ref);
 1021|   189k|      if (LJ_SOFTFP && (sn & SNAP_SOFTFPNUM)) {
  ------------------
  |  |  616|   379k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|   189k|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_SOFTFP && (sn & SNAP_SOFTFPNUM)) {
  ------------------
  |  |  206|      0|#define SNAP_SOFTFPNUM		0x080000	/* Soft-float number. */
  ------------------
  |  Branch (1021:24): [True: 0, False: 0]
  ------------------
 1022|      0|	lj_assertA(irt_type(IR(ref+1)->t) == IRT_SOFTFP,
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1023|      0|		   "snap %d[%d] points to bad SOFTFP IR %04d",
 1024|      0|		   snapno, n, ref - REF_BIAS);
 1025|      0|	asm_snap_alloc1(as, ref+1);
 1026|      0|      }
 1027|   189k|    }
 1028|   277k|  }
 1029|  96.4k|}
lj_asm.c:asm_snap_alloc1:
  950|   190k|{
  951|   190k|  IRIns *ir = IR(ref);
  ------------------
  |  |  116|   190k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  952|   190k|  if (!irref_isk(ref)) {
  ------------------
  |  |  485|   190k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (952:7): [True: 190k, False: 0]
  ------------------
  953|   190k|    bloomset(as->snapfilt1, ref);
  ------------------
  |  |  120|   190k|#define bloomset(b, x)	((b) |= bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|   190k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|   190k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  954|   190k|    bloomset(as->snapfilt2, hashrot(ref, ref + HASH_BIAS));
  ------------------
  |  |  120|   190k|#define bloomset(b, x)	((b) |= bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|   190k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|   190k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  955|   190k|    if (ra_used(ir)) return;
  ------------------
  |  |  351|   190k|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|   380k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|   190k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 106k, False: 83.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|  83.6k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  83.6k|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 8.90k, False: 74.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  956|  74.7k|    if (ir->r == RID_SINK || ir->r == RID_SUNK) {
  ------------------
  |  |   24|   149k|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|  74.7k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  74.7k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  74.7k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (ir->r == RID_SINK || ir->r == RID_SUNK) {
  ------------------
  |  |   25|  74.6k|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|  74.6k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  74.6k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  74.6k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (956:9): [True: 106, False: 74.6k]
  |  Branch (956:30): [True: 29, False: 74.6k]
  ------------------
  957|    135|      ir->r = RID_SUNK;
  ------------------
  |  |   25|    135|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|    135|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|    135|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    135|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  958|    135|#if LJ_HASFFI
  959|    135|      if (ir->o == IR_CNEWI) {  /* Allocate CNEWI value. */
  ------------------
  |  Branch (959:11): [True: 0, False: 135]
  ------------------
  960|      0|	asm_snap_alloc1(as, ir->op2);
  961|      0|	if (LJ_32 && (ir+1)->o == IR_HIOP)
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (961:15): [True: 0, False: 0]
  ------------------
  962|      0|	  asm_snap_alloc1(as, (ir+1)->op2);
  963|      0|      } else
  964|    135|#endif
  965|    135|      {  /* Allocate stored values for TNEW, TDUP and CNEW. */
  966|    135|	IRIns *irs;
  967|    135|	lj_assertA(ir->o == IR_TNEW || ir->o == IR_TDUP || ir->o == IR_CNEW,
  ------------------
  |  |  111|    135|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    135|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    270|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 135, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    135|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  968|    135|		   "sink of IR %04d has bad op %d", ref - REF_BIAS, ir->o);
  969|  1.57k|	for (irs = IR(as->snapref-1); irs > ir; irs--)
  ------------------
  |  |  116|    135|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (969:32): [True: 1.43k, False: 135]
  ------------------
  970|  1.43k|	  if (irs->r == RID_SINK && asm_sunk_store(as, ir, irs)) {
  ------------------
  |  |   24|  2.87k|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|  1.43k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  1.43k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  1.43k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (970:8): [True: 182, False: 1.25k]
  |  Branch (970:30): [True: 170, False: 12]
  ------------------
  971|    170|	    lj_assertA(irs->o == IR_ASTORE || irs->o == IR_HSTORE ||
  ------------------
  |  |  111|    170|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    170|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    546|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 152, False: 18]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 18]
  |  |  |  |  |  |  |  Branch (355:5): [True: 18, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    170|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  972|    170|		       irs->o == IR_FSTORE || irs->o == IR_XSTORE,
  973|    170|		       "sunk store IR %04d has bad op %d",
  974|    170|		       (int)(irs - as->ir) - REF_BIAS, irs->o);
  975|    170|	    asm_snap_alloc1(as, irs->op2);
  976|    170|	    if (LJ_32 && (irs+1)->o == IR_HIOP)
  ------------------
  |  |  639|    340|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (976:19): [True: 0, False: 0]
  ------------------
  977|      0|	      asm_snap_alloc1(as, (irs+1)->op2);
  978|    170|	  }
  979|    135|      }
  980|  74.6k|    } else {
  981|  74.6k|      RegSet allow;
  982|  74.6k|      if (ir->o == IR_CONV && ir->op2 == IRCONV_NUM_INT) {
  ------------------
  |  |  255|    175|#define IRCONV_NUM_INT		((IRT_NUM<<IRCONV_DSH)|IRT_INT)
  |  |  ------------------
  |  |  |  |  254|    175|#define IRCONV_DSH		5
  |  |  ------------------
  ------------------
  |  Branch (982:11): [True: 175, False: 74.4k]
  |  Branch (982:31): [True: 175, False: 0]
  ------------------
  983|    175|	IRIns *irc;
  984|  1.87k|	for (irc = IR(as->curins); irc > ir; irc--)
  ------------------
  |  |  116|    175|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (984:29): [True: 1.73k, False: 137]
  ------------------
  985|  1.73k|	  if ((irc->op1 == ref || irc->op2 == ref) &&
  ------------------
  |  Branch (985:9): [True: 0, False: 1.73k]
  |  Branch (985:28): [True: 175, False: 1.56k]
  ------------------
  986|  1.73k|	      !(irc->r == RID_SINK || irc->r == RID_SUNK))
  ------------------
  |  |   24|    350|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|    175|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|    175|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    175|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	      !(irc->r == RID_SINK || irc->r == RID_SUNK))
  ------------------
  |  |   25|     38|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|     38|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|     38|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     38|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (986:10): [True: 137, False: 38]
  |  Branch (986:32): [True: 0, False: 38]
  ------------------
  987|     38|	    goto nosink;  /* Don't sink conversion if result is used. */
  988|    137|	asm_snap_alloc1(as, ir->op1);
  989|    137|	return;
  990|    175|      }
  991|  74.4k|    nosink:
  992|  74.4k|      allow = (!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |  616|   148k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|  74.4k|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  ------------------
                    allow = (!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |  388|  74.4k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|   148k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  74.4k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 4.43k, False: 70.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|  70.0k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  70.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 70.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    allow = (!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |   70|  4.43k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  4.43k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.43k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    allow = (!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |   67|   144k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  70.0k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  70.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   144k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  70.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|   144k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  70.0k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  70.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (992:16): [Folded - Ignored]
  ------------------
  993|  74.4k|      if ((as->freeset & allow) ||
  ------------------
  |  Branch (993:11): [True: 74.4k, False: 0]
  ------------------
  994|  74.4k|	       (allow == RSET_FPR && asm_snap_canremat(as))) {
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (994:10): [True: 0, False: 0]
  |  Branch (994:31): [True: 0, False: 0]
  ------------------
  995|       |	/* Get a weak register if we have a free one or can rematerialize. */
  996|  74.4k|	Reg r = ra_allocref(as, ref, allow);  /* Allocate a register. */
  997|  74.4k|	if (!irt_isphi(ir->t))
  ------------------
  |  |  448|  74.4k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (997:6): [True: 70.6k, False: 3.80k]
  ------------------
  998|  74.4k|	  ra_weak(as, r);  /* But mark it as weakly referenced. */
  ------------------
  |  |  348|  70.6k|#define ra_weak(as, r)		rset_set(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   75|  70.6k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  70.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  999|  74.4k|	checkmclim(as);
 1000|  74.4k|	RA_DBGX((as, "snapreg   $f $r", ref, ir->r));
  ------------------
  |  |  341|  74.4k|#define RA_DBGX(x)	((void)0)
  ------------------
 1001|  74.4k|      } else {
 1002|      0|	ra_spill(as, ir);  /* Otherwise force a spill slot. */
 1003|      0|	RA_DBGX((as, "snapspill $f $s", ref, ir->s));
  ------------------
  |  |  341|      0|#define RA_DBGX(x)	((void)0)
  ------------------
 1004|      0|      }
 1005|  74.4k|    }
 1006|  74.7k|  }
 1007|   190k|}
lj_asm.c:asm_sunk_store:
  933|    182|{
  934|    182|  if (irs->s == 255) {
  ------------------
  |  Branch (934:7): [True: 0, False: 182]
  ------------------
  935|      0|    if (irs->o == IR_ASTORE || irs->o == IR_HSTORE ||
  ------------------
  |  Branch (935:9): [True: 0, False: 0]
  |  Branch (935:32): [True: 0, False: 0]
  ------------------
  936|      0|	irs->o == IR_FSTORE || irs->o == IR_XSTORE) {
  ------------------
  |  Branch (936:2): [True: 0, False: 0]
  |  Branch (936:25): [True: 0, False: 0]
  ------------------
  937|      0|      IRIns *irk = IR(irs->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  938|      0|      if (irk->o == IR_AREF || irk->o == IR_HREFK)
  ------------------
  |  Branch (938:11): [True: 0, False: 0]
  |  Branch (938:32): [True: 0, False: 0]
  ------------------
  939|      0|	irk = IR(irk->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  940|      0|      return (IR(irk->op1) == ira);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  941|      0|    }
  942|      0|    return 0;
  943|    182|  } else {
  944|    182|    return (ira + irs->s == irs);  /* Quick check. */
  945|    182|  }
  946|    182|}
lj_asm.c:asm_snap_checkrename:
 1039|  1.12k|{
 1040|  1.12k|  if (bloomtest(as->snapfilt1, ren) &&
  ------------------
  |  |  121|  2.25k|#define bloomtest(b, x)	((b) & bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|  1.12k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|  1.12k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (121:25): [True: 1.12k, False: 0]
  |  |  ------------------
  ------------------
 1041|  1.12k|      bloomtest(as->snapfilt2, hashrot(ren, ren + HASH_BIAS))) {
  ------------------
  |  |  121|  1.12k|#define bloomtest(b, x)	((b) & bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|  1.12k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|  1.12k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (121:25): [True: 1.12k, False: 0]
  |  |  ------------------
  ------------------
 1042|  1.12k|    IRIns *ir = IR(ren);
  ------------------
  |  |  116|  1.12k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1043|  1.12k|    ra_spill(as, ir);  /* Register renamed, so force a spill slot. */
 1044|  1.12k|    RA_DBGX((as, "snaprensp $f $s", ren, ir->s));
  ------------------
  |  |  341|  1.12k|#define RA_DBGX(x)	((void)0)
  ------------------
 1045|  1.12k|    return 1;  /* Found. */
 1046|  1.12k|  }
 1047|      0|  return 0;  /* Not found. */
 1048|  1.12k|}
lj_asm.c:checkmclim:
  143|  1.81M|{
  144|  1.81M|#ifdef LUA_USE_ASSERT
  145|  1.81M|  if (as->mcp + MCLIM_REDZONE < as->mcp_prev) {
  ------------------
  |  |  135|  1.81M|#define MCLIM_REDZONE	64
  ------------------
  |  Branch (145:7): [True: 0, False: 1.81M]
  ------------------
  146|      0|    IRIns *ir = IR(as->curins+1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  147|      0|    lj_assertA(0, "red zone overflow: %p IR %04d  %02d %04d %04d\n", as->mcp,
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  148|      0|      as->curins+1-REF_BIAS, ir->o, ir->op1-REF_BIAS, ir->op2-REF_BIAS);
  149|      0|  }
  150|  1.81M|#endif
  151|  1.81M|  if (LJ_UNLIKELY(as->mcp < as->mclim)) asm_mclimit(as);
  ------------------
  |  |  146|  1.81M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
  152|  1.81M|#ifdef LUA_USE_ASSERT
  153|  1.81M|  as->mcp_prev = as->mcp;
  154|  1.81M|#endif
  155|  1.81M|}
lj_asm.c:asm_ir:
 1777|   784k|{
 1778|   784k|  switch ((IROp)ir->o) {
 1779|       |  /* Miscellaneous ops. */
 1780|  12.8k|  case IR_LOOP: asm_loop(as); break;
  ------------------
  |  Branch (1780:3): [True: 12.8k, False: 771k]
  ------------------
 1781|      0|  case IR_NOP: case IR_XBAR:
  ------------------
  |  Branch (1781:3): [True: 0, False: 784k]
  |  Branch (1781:16): [True: 0, False: 784k]
  ------------------
 1782|      0|    lj_assertA(!ra_used(ir),
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1783|      0|	       "IR %04d not unused", (int)(ir - as->ir) - REF_BIAS);
 1784|      0|    break;
 1785|    497|  case IR_USE:
  ------------------
  |  Branch (1785:3): [True: 497, False: 783k]
  ------------------
 1786|    497|    ra_alloc1(as, ir->op1, irt_isfp(ir->t) ? RSET_FPR : RSET_GPR); break;
  ------------------
  |  |  388|    497|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|    994|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|    497|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 497]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|    497|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|    497|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 497]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  ra_alloc1(as, ir->op1, irt_isfp(ir->t) ? RSET_FPR : RSET_GPR); break;
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  ra_alloc1(as, ir->op1, irt_isfp(ir->t) ? RSET_FPR : RSET_GPR); break;
  ------------------
  |  |   67|    497|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    497|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    497|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    497|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    497|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    497|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    497|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    497|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1787|  15.5k|  case IR_PHI: asm_phi(as, ir); break;
  ------------------
  |  Branch (1787:3): [True: 15.5k, False: 768k]
  ------------------
 1788|    803|  case IR_HIOP: asm_hiop(as, ir); break;
  ------------------
  |  Branch (1788:3): [True: 803, False: 783k]
  ------------------
 1789|      0|  case IR_GCSTEP: asm_gcstep(as, ir); break;
  ------------------
  |  Branch (1789:3): [True: 0, False: 784k]
  ------------------
 1790|      0|  case IR_PROF: asm_prof(as, ir); break;
  ------------------
  |  Branch (1790:3): [True: 0, False: 784k]
  ------------------
 1791|       |
 1792|       |  /* Guarded assertions. */
 1793|  27.7k|  case IR_LT: case IR_GE: case IR_LE: case IR_GT:
  ------------------
  |  Branch (1793:3): [True: 1.00k, False: 783k]
  |  Branch (1793:15): [True: 1.41k, False: 782k]
  |  Branch (1793:27): [True: 25.0k, False: 759k]
  |  Branch (1793:39): [True: 246, False: 783k]
  ------------------
 1794|  51.6k|  case IR_ULT: case IR_UGE: case IR_ULE: case IR_UGT:
  ------------------
  |  Branch (1794:3): [True: 0, False: 784k]
  |  Branch (1794:16): [True: 1.29k, False: 782k]
  |  Branch (1794:29): [True: 22.2k, False: 761k]
  |  Branch (1794:42): [True: 439, False: 783k]
  ------------------
 1795|  54.3k|  case IR_ABC:
  ------------------
  |  Branch (1795:3): [True: 2.65k, False: 781k]
  ------------------
 1796|  54.3k|    asm_comp(as, ir);
 1797|  54.3k|    break;
 1798|  65.7k|  case IR_EQ: case IR_NE: asm_fuseequal(as, ir); break;
  ------------------
  |  Branch (1798:3): [True: 62.2k, False: 721k]
  |  Branch (1798:15): [True: 3.47k, False: 780k]
  ------------------
 1799|       |
 1800|  6.78k|  case IR_RETF: asm_retf(as, ir); break;
  ------------------
  |  Branch (1800:3): [True: 6.78k, False: 777k]
  ------------------
 1801|       |
 1802|       |  /* Bit ops. */
 1803|      0|  case IR_BNOT: asm_bnot(as, ir); break;
  ------------------
  |  | 2279|      0|#define asm_bnot(as, ir)	asm_neg_not(as, ir, XOg_NOT)
  ------------------
  |  Branch (1803:3): [True: 0, False: 784k]
  ------------------
 1804|      0|  case IR_BSWAP: asm_bswap(as, ir); break;
  ------------------
  |  Branch (1804:3): [True: 0, False: 784k]
  ------------------
 1805|      0|  case IR_BAND: asm_band(as, ir); break;
  ------------------
  |  | 2289|      0|#define asm_band(as, ir)	asm_intarith(as, ir, XOg_AND)
  ------------------
  |  Branch (1805:3): [True: 0, False: 784k]
  ------------------
 1806|      0|  case IR_BOR: asm_bor(as, ir); break;
  ------------------
  |  | 2290|      0|#define asm_bor(as, ir)		asm_intarith(as, ir, XOg_OR)
  ------------------
  |  Branch (1806:3): [True: 0, False: 784k]
  ------------------
 1807|      0|  case IR_BXOR: asm_bxor(as, ir); break;
  ------------------
  |  | 2291|      0|#define asm_bxor(as, ir)	asm_intarith(as, ir, XOg_XOR)
  ------------------
  |  Branch (1807:3): [True: 0, False: 784k]
  ------------------
 1808|      0|  case IR_BSHL: asm_bshl(as, ir); break;
  ------------------
  |  | 2348|      0|#define asm_bshl(as, ir)	asm_bitshift(as, ir, XOg_SHL, XV_SHLX)
  ------------------
  |  Branch (1808:3): [True: 0, False: 784k]
  ------------------
 1809|      0|  case IR_BSHR: asm_bshr(as, ir); break;
  ------------------
  |  | 2349|      0|#define asm_bshr(as, ir)	asm_bitshift(as, ir, XOg_SHR, XV_SHRX)
  ------------------
  |  Branch (1809:3): [True: 0, False: 784k]
  ------------------
 1810|      0|  case IR_BSAR: asm_bsar(as, ir); break;
  ------------------
  |  | 2350|      0|#define asm_bsar(as, ir)	asm_bitshift(as, ir, XOg_SAR, XV_SARX)
  ------------------
  |  Branch (1810:3): [True: 0, False: 784k]
  ------------------
 1811|      0|  case IR_BROL: asm_brol(as, ir); break;
  ------------------
  |  | 2351|      0|#define asm_brol(as, ir)	asm_bitshift(as, ir, XOg_ROL, 0)
  ------------------
  |  Branch (1811:3): [True: 0, False: 784k]
  ------------------
 1812|      0|  case IR_BROR: asm_bror(as, ir); break;
  ------------------
  |  | 2352|      0|#define asm_bror(as, ir)	asm_bitshift(as, ir, XOg_ROR, 0)
  ------------------
  |  Branch (1812:3): [True: 0, False: 784k]
  ------------------
 1813|       |
 1814|       |  /* Arithmetic ops. */
 1815|  57.2k|  case IR_ADD: asm_add(as, ir); break;
  ------------------
  |  Branch (1815:3): [True: 57.2k, False: 726k]
  ------------------
 1816|  7.85k|  case IR_SUB: asm_sub(as, ir); break;
  ------------------
  |  Branch (1816:3): [True: 7.85k, False: 776k]
  ------------------
 1817|  10.2k|  case IR_MUL: asm_mul(as, ir); break;
  ------------------
  |  Branch (1817:3): [True: 10.2k, False: 773k]
  ------------------
 1818|  8.70k|  case IR_MOD: asm_mod(as, ir); break;
  ------------------
  |  Branch (1818:3): [True: 8.70k, False: 775k]
  ------------------
 1819|      0|  case IR_NEG: asm_neg(as, ir); break;
  ------------------
  |  Branch (1819:3): [True: 0, False: 784k]
  ------------------
 1820|       |#if LJ_SOFTFP32
 1821|       |  case IR_DIV: case IR_POW: case IR_ABS:
 1822|       |  case IR_LDEXP: case IR_FPMATH: case IR_TOBIT:
 1823|       |    /* Unused for LJ_SOFTFP32. */
 1824|       |    lj_assertA(0, "IR %04d with unused op %d",
 1825|       |		  (int)(ir - as->ir) - REF_BIAS, ir->o);
 1826|       |    break;
 1827|       |#else
 1828|  17.3k|  case IR_DIV: asm_div(as, ir); break;
  ------------------
  |  Branch (1828:3): [True: 17.3k, False: 766k]
  ------------------
 1829|      0|  case IR_POW: asm_pow(as, ir); break;
  ------------------
  |  Branch (1829:3): [True: 0, False: 784k]
  ------------------
 1830|      0|  case IR_ABS: asm_abs(as, ir); break;
  ------------------
  |  | 2245|      0|#define asm_abs(as, ir)		asm_fparith(as, ir, XO_ANDPS)
  ------------------
  |  Branch (1830:3): [True: 0, False: 784k]
  ------------------
 1831|      0|  case IR_LDEXP: asm_ldexp(as, ir); break;
  ------------------
  |  Branch (1831:3): [True: 0, False: 784k]
  ------------------
 1832|  17.2k|  case IR_FPMATH: asm_fpmath(as, ir); break;
  ------------------
  |  Branch (1832:3): [True: 17.2k, False: 766k]
  ------------------
 1833|      0|  case IR_TOBIT: asm_tobit(as, ir); break;
  ------------------
  |  Branch (1833:3): [True: 0, False: 784k]
  ------------------
 1834|      0|#endif
 1835|      0|  case IR_MIN: asm_min(as, ir); break;
  ------------------
  |  Branch (1835:3): [True: 0, False: 784k]
  ------------------
 1836|      0|  case IR_MAX: asm_max(as, ir); break;
  ------------------
  |  Branch (1836:3): [True: 0, False: 784k]
  ------------------
 1837|       |
 1838|       |  /* Overflow-checking arithmetic ops. */
 1839|    569|  case IR_ADDOV: asm_addov(as, ir); break;
  ------------------
  |  | 2275|    569|#define asm_addov(as, ir)	asm_intarith(as, ir, XOg_ADD)
  ------------------
  |  Branch (1839:3): [True: 569, False: 783k]
  ------------------
 1840|  5.99k|  case IR_SUBOV: asm_subov(as, ir); break;
  ------------------
  |  | 2276|  5.99k|#define asm_subov(as, ir)	asm_intarith(as, ir, XOg_SUB)
  ------------------
  |  Branch (1840:3): [True: 5.99k, False: 778k]
  ------------------
 1841|      0|  case IR_MULOV: asm_mulov(as, ir); break;
  ------------------
  |  | 2277|      0|#define asm_mulov(as, ir)	asm_intarith(as, ir, XOg_X_IMUL)
  ------------------
  |  Branch (1841:3): [True: 0, False: 784k]
  ------------------
 1842|       |
 1843|       |  /* Memory references. */
 1844|     20|  case IR_AREF: asm_aref(as, ir); break;
  ------------------
  |  Branch (1844:3): [True: 20, False: 784k]
  ------------------
 1845|     16|  case IR_HREF: asm_href(as, ir, 0); break;
  ------------------
  |  Branch (1845:3): [True: 16, False: 784k]
  ------------------
 1846|  11.9k|  case IR_HREFK: asm_hrefk(as, ir); break;
  ------------------
  |  Branch (1846:3): [True: 11.9k, False: 772k]
  ------------------
 1847|    520|  case IR_NEWREF: asm_newref(as, ir); break;
  ------------------
  |  Branch (1847:3): [True: 520, False: 783k]
  ------------------
 1848|    117|  case IR_UREFO: case IR_UREFC: asm_uref(as, ir); break;
  ------------------
  |  Branch (1848:3): [True: 117, False: 784k]
  |  Branch (1848:18): [True: 0, False: 784k]
  ------------------
 1849|      0|  case IR_FREF: asm_fref(as, ir); break;
  ------------------
  |  Branch (1849:3): [True: 0, False: 784k]
  ------------------
 1850|      9|  case IR_TMPREF: asm_tmpref(as, ir); break;
  ------------------
  |  Branch (1850:3): [True: 9, False: 784k]
  ------------------
 1851|  12.2k|  case IR_STRREF: asm_strref(as, ir); break;
  ------------------
  |  Branch (1851:3): [True: 12.2k, False: 771k]
  ------------------
 1852|      0|  case IR_LREF: asm_lref(as, ir); break;
  ------------------
  |  Branch (1852:3): [True: 0, False: 784k]
  ------------------
 1853|       |
 1854|       |  /* Loads and stores. */
 1855|  15.2k|  case IR_ALOAD: case IR_HLOAD: case IR_ULOAD: case IR_VLOAD:
  ------------------
  |  Branch (1855:3): [True: 2.03k, False: 782k]
  |  Branch (1855:18): [True: 11.4k, False: 772k]
  |  Branch (1855:33): [True: 117, False: 784k]
  |  Branch (1855:48): [True: 1.62k, False: 782k]
  ------------------
 1856|  15.2k|    asm_ahuvload(as, ir);
 1857|  15.2k|    break;
 1858|  35.6k|  case IR_FLOAD: asm_fload(as, ir); break;
  ------------------
  |  | 1457|  35.6k|#define asm_fload(as, ir)	asm_fxload(as, ir)
  ------------------
  |  Branch (1858:3): [True: 35.6k, False: 748k]
  ------------------
 1859|      0|  case IR_XLOAD: asm_xload(as, ir); break;
  ------------------
  |  | 1458|      0|#define asm_xload(as, ir)	asm_fxload(as, ir)
  ------------------
  |  Branch (1859:3): [True: 0, False: 784k]
  ------------------
 1860|  66.9k|  case IR_SLOAD: asm_sload(as, ir); break;
  ------------------
  |  Branch (1860:3): [True: 66.9k, False: 717k]
  ------------------
 1861|      0|  case IR_ALEN: asm_alen(as, ir); break;
  ------------------
  |  Branch (1861:3): [True: 0, False: 784k]
  ------------------
 1862|       |
 1863|  3.63k|  case IR_ASTORE: case IR_HSTORE: case IR_USTORE: asm_ahustore(as, ir); break;
  ------------------
  |  Branch (1863:3): [True: 1.09k, False: 783k]
  |  Branch (1863:19): [True: 2.53k, False: 781k]
  |  Branch (1863:35): [True: 3, False: 784k]
  ------------------
 1864|     27|  case IR_FSTORE: asm_fstore(as, ir); break;
  ------------------
  |  | 1526|     27|#define asm_fstore(as, ir)	asm_fxstore(as, ir)
  ------------------
  |  Branch (1864:3): [True: 27, False: 784k]
  ------------------
 1865|      0|  case IR_XSTORE: asm_xstore(as, ir); break;
  ------------------
  |  | 1527|      0|#define asm_xstore(as, ir)	asm_fxstore(as, ir)
  ------------------
  |  Branch (1865:3): [True: 0, False: 784k]
  ------------------
 1866|       |
 1867|       |  /* Allocations. */
 1868|    166|  case IR_SNEW: case IR_XSNEW: asm_snew(as, ir); break;
  ------------------
  |  Branch (1868:3): [True: 166, False: 784k]
  |  Branch (1868:17): [True: 0, False: 784k]
  ------------------
 1869|    140|  case IR_TNEW: asm_tnew(as, ir); break;
  ------------------
  |  Branch (1869:3): [True: 140, False: 784k]
  ------------------
 1870|    371|  case IR_TDUP: asm_tdup(as, ir); break;
  ------------------
  |  Branch (1870:3): [True: 371, False: 783k]
  ------------------
 1871|      0|  case IR_CNEW: case IR_CNEWI:
  ------------------
  |  Branch (1871:3): [True: 0, False: 784k]
  |  Branch (1871:17): [True: 0, False: 784k]
  ------------------
 1872|      0|#if LJ_HASFFI
 1873|      0|    asm_cnew(as, ir);
 1874|       |#else
 1875|       |    lj_assertA(0, "IR %04d with unused op %d",
 1876|       |		  (int)(ir - as->ir) - REF_BIAS, ir->o);
 1877|       |#endif
 1878|      0|    break;
 1879|       |
 1880|       |  /* Buffer operations. */
 1881|  63.6k|  case IR_BUFHDR: asm_bufhdr(as, ir); break;
  ------------------
  |  Branch (1881:3): [True: 63.6k, False: 720k]
  ------------------
 1882|   109k|  case IR_BUFPUT: asm_bufput(as, ir); break;
  ------------------
  |  Branch (1882:3): [True: 109k, False: 674k]
  ------------------
 1883|  63.6k|  case IR_BUFSTR: asm_bufstr(as, ir); break;
  ------------------
  |  Branch (1883:3): [True: 63.6k, False: 720k]
  ------------------
 1884|       |
 1885|       |  /* Write barriers. */
 1886|    681|  case IR_TBAR: asm_tbar(as, ir); break;
  ------------------
  |  Branch (1886:3): [True: 681, False: 783k]
  ------------------
 1887|      0|  case IR_OBAR: asm_obar(as, ir); break;
  ------------------
  |  Branch (1887:3): [True: 0, False: 784k]
  ------------------
 1888|       |
 1889|       |  /* Type conversions. */
 1890|  34.7k|  case IR_CONV: asm_conv(as, ir); break;
  ------------------
  |  Branch (1890:3): [True: 34.7k, False: 749k]
  ------------------
 1891|  12.1k|  case IR_TOSTR: asm_tostr(as, ir); break;
  ------------------
  |  Branch (1891:3): [True: 12.1k, False: 772k]
  ------------------
 1892|  19.6k|  case IR_STRTO: asm_strto(as, ir); break;
  ------------------
  |  Branch (1892:3): [True: 19.6k, False: 764k]
  ------------------
 1893|       |
 1894|       |  /* Calls. */
 1895|      0|  case IR_CALLA:
  ------------------
  |  Branch (1895:3): [True: 0, False: 784k]
  ------------------
 1896|      0|    as->gcsteps++;
 1897|       |    /* fallthrough */
 1898|  51.0k|  case IR_CALLN: case IR_CALLL: case IR_CALLS: asm_call(as, ir); break;
  ------------------
  |  Branch (1898:3): [True: 0, False: 784k]
  |  Branch (1898:18): [True: 20.6k, False: 763k]
  |  Branch (1898:33): [True: 30.3k, False: 753k]
  ------------------
 1899|      0|  case IR_CALLXS: asm_callx(as, ir); break;
  ------------------
  |  Branch (1899:3): [True: 0, False: 784k]
  ------------------
 1900|      0|  case IR_CARG: break;
  ------------------
  |  Branch (1900:3): [True: 0, False: 784k]
  ------------------
 1901|       |
 1902|      0|  default:
  ------------------
  |  Branch (1902:3): [True: 0, False: 784k]
  ------------------
 1903|      0|    setintV(&as->J->errinfo, ir->o);
 1904|      0|    lj_trace_err_info(as->J, LJ_TRERR_NYIIR);
 1905|      0|    break;
 1906|   784k|  }
 1907|   784k|}
lj_asm.c:asm_loop:
 1678|  12.8k|{
 1679|  12.8k|  MCode *mcspill;
 1680|       |  /* LOOP is a guard, so the snapno is up to date. */
 1681|  12.8k|  as->loopsnapno = as->snapno;
 1682|  12.8k|  if (as->gcsteps)
  ------------------
  |  Branch (1682:7): [True: 7.51k, False: 5.33k]
  ------------------
 1683|  7.51k|    asm_gc_check(as);
 1684|       |  /* LOOP marks the transition from the variant to the invariant part. */
 1685|  12.8k|  as->flagmcp = as->invmcp = NULL;
 1686|  12.8k|  as->sectref = 0;
 1687|  12.8k|  if (!neverfuse(as)) as->fuseref = 0;
  ------------------
  |  |  128|  12.8k|#define neverfuse(as)		(as->fuseref == FUSE_DISABLED)
  |  |  ------------------
  |  |  |  |  126|  12.8k|#define FUSE_DISABLED		(~(IRRef)0)
  |  |  ------------------
  ------------------
  |  Branch (1687:7): [True: 12.8k, False: 0]
  ------------------
 1688|  12.8k|  asm_phi_shuffle(as);
 1689|  12.8k|  mcspill = as->mcp;
 1690|  12.8k|  asm_phi_copyspill(as);
 1691|  12.8k|  asm_loop_fixup(as);
 1692|  12.8k|  as->mcloop = as->mcp;
 1693|  12.8k|  RA_DBGX((as, "===== LOOP ====="));
  ------------------
  |  |  341|  12.8k|#define RA_DBGX(x)	((void)0)
  ------------------
 1694|  12.8k|  if (!as->realign) RA_DBG_FLUSH();
  ------------------
  |  |  339|  10.2k|#define RA_DBG_FLUSH()	((void)0)
  ------------------
  |  Branch (1694:7): [True: 10.2k, False: 2.59k]
  ------------------
 1695|  12.8k|  if (as->mcp != mcspill)
  ------------------
  |  Branch (1695:7): [True: 0, False: 12.8k]
  ------------------
 1696|      0|    emit_jmp(as, mcspill);
 1697|  12.8k|}
lj_asm.c:asm_phi_shuffle:
 1483|  12.8k|{
 1484|  12.8k|  RegSet work;
 1485|       |
 1486|       |  /* Find and resolve PHI register mismatches. */
 1487|  12.8k|  for (;;) {
 1488|  12.8k|    RegSet blocked = RSET_EMPTY;
  ------------------
  |  |   71|  12.8k|#define RSET_EMPTY		((RegSet)0)
  ------------------
 1489|  12.8k|    RegSet blockedby = RSET_EMPTY;
  ------------------
  |  |   71|  12.8k|#define RSET_EMPTY		((RegSet)0)
  ------------------
 1490|  12.8k|    RegSet phiset = as->phiset;
 1491|  28.3k|    while (phiset) {  /* Check all left PHI operand registers. */
  ------------------
  |  Branch (1491:12): [True: 15.5k, False: 12.8k]
  ------------------
 1492|  15.5k|      Reg r = rset_pickbot(phiset);
  ------------------
  |  |  215|  15.5k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|  15.5k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|  15.5k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1493|  15.5k|      IRIns *irl = IR(as->phireg[r]);
  ------------------
  |  |  116|  15.5k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1494|  15.5k|      Reg left = irl->r;
 1495|  15.5k|      if (r != left) {  /* Mismatch? */
  ------------------
  |  Branch (1495:11): [True: 2.08k, False: 13.4k]
  ------------------
 1496|  2.08k|	if (!rset_test(as->freeset, r)) {  /* PHI register blocked? */
  ------------------
  |  |   74|  2.08k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (1496:6): [True: 0, False: 2.08k]
  ------------------
 1497|      0|	  IRRef ref = regcost_ref(as->cost[r]);
  ------------------
  |  |  128|      0|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
 1498|       |	  /* Blocked by other PHI (w/reg)? */
 1499|      0|	  if (!ra_iskref(ref) && irt_ismarked(IR(ref)->t)) {
  ------------------
  |  |  170|      0|#define ra_iskref(ref)		0
  ------------------
              	  if (!ra_iskref(ref) && irt_ismarked(IR(ref)->t)) {
  ------------------
  |  |  445|      0|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1499:8): [Folded - Ignored]
  ------------------
 1500|      0|	    rset_set(blocked, r);
  ------------------
  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1501|      0|	    if (ra_hasreg(left))
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1502|      0|	      rset_set(blockedby, left);
  ------------------
  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1503|      0|	    left = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
 1504|      0|	  } else {  /* Otherwise grab register from invariant. */
 1505|      0|	    ra_restore(as, ref);
 1506|      0|	    checkmclim(as);
 1507|      0|	  }
 1508|      0|	}
 1509|  2.08k|	if (ra_hasreg(left)) {
  ------------------
  |  |   28|  2.08k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  2.08k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 1.62k, False: 459]
  |  |  ------------------
  ------------------
 1510|  1.62k|	  ra_rename(as, left, r);
 1511|  1.62k|	  checkmclim(as);
 1512|  1.62k|	}
 1513|  2.08k|      }
 1514|  15.5k|      rset_clear(phiset, r);
  ------------------
  |  |   76|  15.5k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  15.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1515|  15.5k|    }
 1516|  12.8k|    if (!blocked) break;  /* Finished. */
  ------------------
  |  Branch (1516:9): [True: 12.8k, False: 0]
  ------------------
 1517|      0|    if (!(as->freeset & blocked)) {  /* Break cycles if none are free. */
  ------------------
  |  Branch (1517:9): [True: 0, False: 0]
  ------------------
 1518|      0|      asm_phi_break(as, blocked, blockedby, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1519|      0|      if (!LJ_SOFTFP) asm_phi_break(as, blocked, blockedby, RSET_FPR);
  ------------------
  |  |  616|      0|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|      0|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  ------------------
                    if (!LJ_SOFTFP) asm_phi_break(as, blocked, blockedby, RSET_FPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1519:11): [Folded - Ignored]
  ------------------
 1520|      0|      checkmclim(as);
 1521|      0|    }  /* Else retry some more renames. */
 1522|      0|  }
 1523|       |
 1524|       |  /* Restore/remat invariants whose registers are modified inside the loop. */
 1525|  12.8k|#if !LJ_SOFTFP
 1526|  12.8k|  work = as->modset & ~(as->freeset | as->phiset) & RSET_FPR;
  ------------------
  |  |   70|  12.8k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  12.8k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  12.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1527|  12.8k|  while (work) {
  ------------------
  |  Branch (1527:10): [True: 2, False: 12.8k]
  ------------------
 1528|      2|    Reg r = rset_pickbot(work);
  ------------------
  |  |  215|      2|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|      2|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|      2|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1529|      2|    ra_restore(as, regcost_ref(as->cost[r]));
  ------------------
  |  |  128|      2|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
 1530|      2|    rset_clear(work, r);
  ------------------
  |  |   76|      2|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      2|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1531|      2|    checkmclim(as);
 1532|      2|  }
 1533|  12.8k|#endif
 1534|  12.8k|  work = as->modset & ~(as->freeset | as->phiset);
 1535|  13.3k|  while (work) {
  ------------------
  |  Branch (1535:10): [True: 468, False: 12.8k]
  ------------------
 1536|    468|    Reg r = rset_pickbot(work);
  ------------------
  |  |  215|    468|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|    468|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|    468|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1537|    468|    ra_restore(as, regcost_ref(as->cost[r]));
  ------------------
  |  |  128|    468|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
 1538|    468|    rset_clear(work, r);
  ------------------
  |  |   76|    468|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    468|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1539|    468|    checkmclim(as);
 1540|    468|  }
 1541|       |
 1542|       |  /* Allocate and save all unsaved PHI regs and clear marks. */
 1543|  12.8k|  work = as->phiset;
 1544|  28.3k|  while (work) {
  ------------------
  |  Branch (1544:10): [True: 15.5k, False: 12.8k]
  ------------------
 1545|  15.5k|    Reg r = rset_picktop(work);
  ------------------
  |  |  214|  15.5k|#define rset_picktop(rs)	rset_picktop_(rs)
  |  |  ------------------
  |  |  |  |  120|  15.5k|#define rset_picktop_(rs)	(lj_fls(lj_bswap(rs)) ^ 0x18)
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  15.5k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1546|  15.5k|    IRRef lref = as->phireg[r];
 1547|  15.5k|    IRIns *ir = IR(lref);
  ------------------
  |  |  116|  15.5k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1548|  15.5k|    if (ra_hasspill(ir->s)) {  /* Left PHI gained a spill slot? */
  ------------------
  |  |   39|  15.5k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  15.5k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 1.78k, False: 13.7k]
  |  |  ------------------
  ------------------
 1549|  1.78k|      irt_clearmark(ir->t);  /* Handled here, so clear marker now. */
  ------------------
  |  |  447|  1.78k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
 1550|  1.78k|      ra_alloc1(as, lref, RID2RSET(r));
  ------------------
  |  |   70|  1.78k|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
 1551|  1.78k|      ra_save(as, ir, r);  /* Save to spill slot inside the loop. */
 1552|  1.78k|      checkmclim(as);
 1553|  1.78k|    }
 1554|  15.5k|    rset_clear(work, r);
  ------------------
  |  |   76|  15.5k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  15.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1555|  15.5k|  }
 1556|  12.8k|}
lj_asm.c:ra_rename:
  731|  3.12k|{
  732|  3.12k|  IRRef ref = regcost_ref(as->cost[up] = as->cost[down]);
  ------------------
  |  |  128|  3.12k|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  733|  3.12k|  IRIns *ir = IR(ref);
  ------------------
  |  |  116|  3.12k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  734|  3.12k|  ir->r = (uint8_t)up;
  735|  3.12k|  as->cost[down] = 0;
  736|  3.12k|  lj_assertA((down < RID_MAX_GPR) == (up < RID_MAX_GPR),
  ------------------
  |  |  111|  3.12k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.12k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  737|  3.12k|	     "rename between GPR/FPR %d and %d", down, up);
  738|  3.12k|  lj_assertA(!rset_test(as->freeset, down), "rename from free reg %d", down);
  ------------------
  |  |  111|  3.12k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.12k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  739|  3.12k|  lj_assertA(rset_test(as->freeset, up), "rename to non-free reg %d", up);
  ------------------
  |  |  111|  3.12k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.12k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  740|  3.12k|  ra_free(as, down);  /* 'down' is free ... */
  ------------------
  |  |  346|  3.12k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|  3.12k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  3.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  741|  3.12k|  ra_modified(as, down);
  ------------------
  |  |  347|  3.12k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|  3.12k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  3.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  742|  3.12k|  rset_clear(as->freeset, up);  /* ... and 'up' is now allocated. */
  ------------------
  |  |   76|  3.12k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  3.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  743|  3.12k|  ra_noweak(as, up);
  ------------------
  |  |  349|  3.12k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|  3.12k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  3.12k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  744|  3.12k|  RA_DBGX((as, "rename    $f $r $r", regcost_ref(as->cost[up]), down, up));
  ------------------
  |  |  341|  3.12k|#define RA_DBGX(x)	((void)0)
  ------------------
  745|  3.12k|  emit_movrr(as, ir, down, up);  /* Backwards codegen needs inverse move. */
  746|  3.12k|  if (!ra_hasspill(IR(ref)->s)) {  /* Add the rename to the IR. */
  ------------------
  |  |   39|  3.12k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  3.12k|#define SPS_NONE		0
  |  |  ------------------
  ------------------
  |  Branch (746:7): [True: 2.87k, False: 250]
  ------------------
  747|       |    /*
  748|       |    ** The rename is effective at the subsequent (already emitted) exit
  749|       |    ** branch. This is for the current snapshot (as->snapno). Except if we
  750|       |    ** haven't yet allocated any refs for the snapshot (as->snapalloc == 1),
  751|       |    ** then it belongs to the next snapshot.
  752|       |    ** See also the discussion at asm_snap_checkrename().
  753|       |    */
  754|  2.87k|    ra_addrename(as, down, ref, as->snapno + as->snapalloc);
  755|  2.87k|  }
  756|  3.12k|}
lj_asm.c:ra_addrename:
  721|  3.36k|{
  722|  3.36k|  IRRef ren;
  723|  3.36k|  lj_ir_set(as->J, IRT(IR_RENAME, IRT_NIL), ref, snapno);
  ------------------
  |  |   26|  3.36k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  ------------------
  724|  3.36k|  ren = tref_ref(lj_ir_emit(as->J));
  ------------------
  |  |  504|  3.36k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  725|  3.36k|  as->J->cur.ir[ren].r = (uint8_t)down;
  726|  3.36k|  as->J->cur.ir[ren].s = SPS_NONE;
  ------------------
  |  |   37|  3.36k|#define SPS_NONE		0
  ------------------
  727|  3.36k|}
lj_asm.c:ra_pick:
  521|   121k|{
  522|   121k|  RegSet pick = as->freeset & allow;
  523|   121k|  if (!pick)
  ------------------
  |  Branch (523:7): [True: 0, False: 121k]
  ------------------
  524|      0|    return ra_evict(as, allow);
  525|   121k|  else
  526|   121k|    return rset_picktop(pick);
  ------------------
  |  |  214|   121k|#define rset_picktop(rs)	rset_picktop_(rs)
  |  |  ------------------
  |  |  |  |  120|   121k|#define rset_picktop_(rs)	(lj_fls(lj_bswap(rs)) ^ 0x18)
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|   121k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  527|   121k|}
lj_asm.c:ra_save:
  486|  92.3k|{
  487|  92.3k|  RA_DBGX((as, "save      $i $r", ir, r));
  ------------------
  |  |  341|  92.3k|#define RA_DBGX(x)	((void)0)
  ------------------
  488|  92.3k|  emit_spstore(as, ir, r, sps_scale(ir->s));
  ------------------
  |  |  238|  92.3k|  emit_storeofs(as, ir, (r), RID_SP, (ofs))
  ------------------
  489|  92.3k|}
lj_asm.c:asm_phi_copyspill:
 1560|  12.8k|{
 1561|  12.8k|  int need = 0;
 1562|  12.8k|  IRIns *ir;
 1563|  28.3k|  for (ir = IR(as->orignins-1); ir->o == IR_PHI; ir--)
  ------------------
  |  |  116|  12.8k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (1563:33): [True: 15.5k, False: 12.8k]
  ------------------
 1564|  15.5k|    if (ra_hasspill(ir->s) && ra_hasspill(IR(ir->op1)->s))
  ------------------
  |  |   39|  31.0k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  15.5k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
                  if (ra_hasspill(ir->s) && ra_hasspill(IR(ir->op1)->s))
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1565|      0|      need |= irt_isfp(ir->t) ? 2 : 1;  /* Unsynced spill slot? */
  ------------------
  |  |  388|      0|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1566|  12.8k|  if ((need & 1)) {  /* Copy integer spill slots. */
  ------------------
  |  Branch (1566:7): [True: 0, False: 12.8k]
  ------------------
 1567|       |#if !LJ_TARGET_X86ORX64
 1568|       |    Reg r = RID_TMP;
 1569|       |#else
 1570|      0|    Reg r = RID_RET;
 1571|      0|    if ((as->freeset & RSET_GPR))
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (1571:9): [True: 0, False: 0]
  ------------------
 1572|      0|      r = rset_pickbot((as->freeset & RSET_GPR));
  ------------------
  |  |  215|      0|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|      0|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1573|      0|    else
 1574|      0|      emit_spload(as, IR(regcost_ref(as->cost[r])), r, SPOFS_TMP);
  ------------------
  |  |  236|      0|  emit_loadofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1575|      0|#endif
 1576|      0|    for (ir = IR(as->orignins-1); ir->o == IR_PHI; ir--) {
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (1576:35): [True: 0, False: 0]
  ------------------
 1577|      0|      if (ra_hasspill(ir->s)) {
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1578|      0|	IRIns *irl = IR(ir->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1579|      0|	if (ra_hasspill(irl->s) && !irt_isfp(ir->t)) {
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (ra_hasspill(irl->s) && !irt_isfp(ir->t)) {
  ------------------
  |  |  388|      0|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1580|      0|	  emit_spstore(as, irl, r, sps_scale(irl->s));
  ------------------
  |  |  238|      0|  emit_storeofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1581|      0|	  emit_spload(as, ir, r, sps_scale(ir->s));
  ------------------
  |  |  236|      0|  emit_loadofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1582|      0|	  checkmclim(as);
 1583|      0|	}
 1584|      0|      }
 1585|      0|    }
 1586|      0|#if LJ_TARGET_X86ORX64
 1587|      0|    if (!rset_test(as->freeset, r))
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (1587:9): [True: 0, False: 0]
  ------------------
 1588|      0|      emit_spstore(as, IR(regcost_ref(as->cost[r])), r, SPOFS_TMP);
  ------------------
  |  |  238|      0|  emit_storeofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1589|      0|#endif
 1590|      0|  }
 1591|  12.8k|#if !LJ_SOFTFP
 1592|  12.8k|  if ((need & 2)) {  /* Copy FP spill slots. */
  ------------------
  |  Branch (1592:7): [True: 0, False: 12.8k]
  ------------------
 1593|       |#if LJ_TARGET_X86
 1594|       |    Reg r = RID_XMM0;
 1595|       |#else
 1596|      0|    Reg r = RID_FPRET;
 1597|      0|#endif
 1598|      0|    if ((as->freeset & RSET_FPR))
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1598:9): [True: 0, False: 0]
  ------------------
 1599|      0|      r = rset_pickbot((as->freeset & RSET_FPR));
  ------------------
  |  |  215|      0|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|      0|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1600|      0|    if (!rset_test(as->freeset, r))
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (1600:9): [True: 0, False: 0]
  ------------------
 1601|      0|      emit_spload(as, IR(regcost_ref(as->cost[r])), r, SPOFS_TMP);
  ------------------
  |  |  236|      0|  emit_loadofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1602|      0|    for (ir = IR(as->orignins-1); ir->o == IR_PHI; ir--) {
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (1602:35): [True: 0, False: 0]
  ------------------
 1603|      0|      if (ra_hasspill(ir->s)) {
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1604|      0|	IRIns *irl = IR(ir->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1605|      0|	if (ra_hasspill(irl->s) && irt_isfp(ir->t)) {
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (ra_hasspill(irl->s) && irt_isfp(ir->t)) {
  ------------------
  |  |  388|      0|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1606|      0|	  emit_spstore(as, irl, r, sps_scale(irl->s));
  ------------------
  |  |  238|      0|  emit_storeofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1607|      0|	  emit_spload(as, ir, r, sps_scale(ir->s));
  ------------------
  |  |  236|      0|  emit_loadofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1608|      0|	  checkmclim(as);
 1609|      0|	}
 1610|      0|      }
 1611|      0|    }
 1612|      0|    if (!rset_test(as->freeset, r))
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (1612:9): [True: 0, False: 0]
  ------------------
 1613|      0|      emit_spstore(as, IR(regcost_ref(as->cost[r])), r, SPOFS_TMP);
  ------------------
  |  |  238|      0|  emit_storeofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 1614|      0|  }
 1615|  12.8k|#endif
 1616|  12.8k|}
lj_asm.c:asm_phi:
 1639|  15.5k|{
 1640|  15.5k|  RegSet allow = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) &
  ------------------
  |  |  616|  31.0k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|  15.5k|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  ------------------
                RegSet allow = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) &
  ------------------
  |  |  388|  15.5k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|  31.0k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  15.5k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 2.99k, False: 12.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|  12.5k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  12.5k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 12.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                RegSet allow = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) &
  ------------------
  |  |   70|  2.99k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  2.99k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  2.99k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                RegSet allow = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) &
  ------------------
  |  |   67|  12.5k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  12.5k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  12.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  12.5k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  12.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  12.5k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  12.5k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  12.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (1640:20): [Folded - Ignored]
  ------------------
 1641|  15.5k|		 ~as->phiset;
 1642|  15.5k|  RegSet afree = (as->freeset & allow);
 1643|  15.5k|  IRIns *irl = IR(ir->op1);
  ------------------
  |  |  116|  15.5k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1644|  15.5k|  IRIns *irr = IR(ir->op2);
  ------------------
  |  |  116|  15.5k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1645|  15.5k|  if (ir->r == RID_SINK)  /* Sink PHI. */
  ------------------
  |  |   24|  15.5k|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|  15.5k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  15.5k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  15.5k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1645:7): [True: 14, False: 15.5k]
  ------------------
 1646|     14|    return;
 1647|       |  /* Spill slot shuffling is not implemented yet (but rarely needed). */
 1648|  15.5k|  if (ra_hasspill(irl->s) || ra_hasspill(irr->s))
  ------------------
  |  |   39|  31.0k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  15.5k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
                if (ra_hasspill(irl->s) || ra_hasspill(irr->s))
  ------------------
  |  |   39|  15.5k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  15.5k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 1649|      0|    lj_trace_err(as->J, LJ_TRERR_NYIPHI);
 1650|       |  /* Leave at least one register free for non-PHIs (and PHI cycle breaking). */
 1651|  15.5k|  if ((afree & (afree-1))) {  /* Two or more free registers? */
  ------------------
  |  Branch (1651:7): [True: 15.5k, False: 0]
  ------------------
 1652|  15.5k|    Reg r;
 1653|  15.5k|    if (ra_noreg(irr->r)) {  /* Get a register for the right PHI. */
  ------------------
  |  |   27|  15.5k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  15.5k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 15.5k, False: 0]
  |  |  ------------------
  ------------------
 1654|  15.5k|      r = ra_allocref(as, ir->op2, allow);
 1655|  15.5k|    } else {  /* Duplicate right PHI, need a copy (rare). */
 1656|      0|      r = ra_scratch(as, allow);
 1657|      0|      emit_movrr(as, irr, r, irr->r);
 1658|      0|    }
 1659|  15.5k|    ir->r = (uint8_t)r;
 1660|  15.5k|    rset_set(as->phiset, r);
  ------------------
  |  |   75|  15.5k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  15.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1661|  15.5k|    as->phireg[r] = (IRRef1)ir->op1;
 1662|  15.5k|    irt_setmark(irl->t);  /* Marks left PHIs _with_ register. */
  ------------------
  |  |  446|  15.5k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
 1663|  15.5k|    if (ra_noreg(irl->r))
  ------------------
  |  |   27|  15.5k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  15.5k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 15.5k, False: 0]
  |  |  ------------------
  ------------------
 1664|  15.5k|      ra_sethint(irl->r, r); /* Set register hint for left PHI. */
  ------------------
  |  |   33|  31.0k|#define ra_sethint(rr, r)	rr = (uint8_t)((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  15.5k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 1665|  15.5k|  } else {  /* Otherwise allocate a spill slot. */
 1666|       |    /* This is overly restrictive, but it triggers only on synthetic code. */
 1667|      0|    if (ra_hasreg(irl->r) || ra_hasreg(irr->r))
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (ra_hasreg(irl->r) || ra_hasreg(irr->r))
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1668|      0|      lj_trace_err(as->J, LJ_TRERR_NYIPHI);
 1669|      0|    ra_spill(as, ir);
 1670|      0|    irr->s = ir->s;  /* Set right PHI spill slot. Sync left slot later. */
 1671|      0|  }
 1672|  15.5k|}
lj_asm.c:ra_scratch:
  531|   121k|{
  532|   121k|  Reg r = ra_pick(as, allow);
  533|   121k|  ra_modified(as, r);
  ------------------
  |  |  347|   121k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|   121k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   121k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  534|   121k|  RA_DBGX((as, "scratch        $r", r));
  ------------------
  |  |  341|   121k|#define RA_DBGX(x)	((void)0)
  ------------------
  535|   121k|  return r;
  536|   121k|}
lj_asm.c:asm_fuseequal:
 1757|  65.7k|{
 1758|       |  /* Fuse HREF + EQ/NE. */
 1759|  65.7k|  if ((ir-1)->o == IR_HREF && ir->op1 == as->curins-1) {
  ------------------
  |  Branch (1759:7): [True: 1.01k, False: 64.7k]
  |  Branch (1759:31): [True: 1.01k, False: 0]
  ------------------
 1760|  1.01k|    as->curins--;
 1761|  1.01k|    asm_href(as, ir-1, (IROp)ir->o);
 1762|  64.7k|  } else {
 1763|  64.7k|    asm_equal(as, ir);
  ------------------
  |  | 2538|  64.7k|#define asm_equal(as, ir)	asm_comp(as, ir)
  ------------------
 1764|  64.7k|  }
 1765|  65.7k|}
lj_asm.c:ra_dest:
  763|   558k|{
  764|   558k|  Reg dest = ir->r;
  765|   558k|  if (ra_hasreg(dest)) {
  ------------------
  |  |   28|   558k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|   558k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 495k, False: 62.3k]
  |  |  ------------------
  ------------------
  766|   495k|    ra_free(as, dest);
  ------------------
  |  |  346|   495k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|   495k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   495k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  767|   495k|    ra_modified(as, dest);
  ------------------
  |  |  347|   495k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|   495k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   495k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  768|   495k|  } else {
  769|  62.3k|    if (ra_hashint(dest) && rset_test((as->freeset&allow), ra_gethint(dest))) {
  ------------------
  |  |   31|   124k|#define ra_hashint(r)		((r) < RID_SUNK)
  |  |  ------------------
  |  |  |  |   25|  62.3k|#define RID_SUNK		(RID_INIT-2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   23|  62.3k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   21|  62.3k|#define RID_NONE		0x80
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|  62.3k|#define RID_MASK		0x7f
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (31:24): [True: 61.2k, False: 1.01k]
  |  |  ------------------
  ------------------
                  if (ra_hashint(dest) && rset_test((as->freeset&allow), ra_gethint(dest))) {
  ------------------
  |  |   74|  61.2k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 26.4k, False: 34.8k]
  |  |  ------------------
  ------------------
  770|  26.4k|      dest = ra_gethint(dest);
  ------------------
  |  |   32|  26.4k|#define ra_gethint(r)		((Reg)((r) & RID_MASK))
  |  |  ------------------
  |  |  |  |   22|  26.4k|#define RID_MASK		0x7f
  |  |  ------------------
  ------------------
  771|  26.4k|      ra_modified(as, dest);
  ------------------
  |  |  347|  26.4k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|  26.4k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  26.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  772|  26.4k|      RA_DBGX((as, "dest           $r", dest));
  ------------------
  |  |  341|  26.4k|#define RA_DBGX(x)	((void)0)
  ------------------
  773|  35.8k|    } else {
  774|  35.8k|      dest = ra_scratch(as, allow);
  775|  35.8k|    }
  776|  62.3k|    ir->r = dest;
  777|  62.3k|  }
  778|   558k|  if (LJ_UNLIKELY(ra_hasspill(ir->s))) ra_save(as, ir, dest);
  ------------------
  |  |  146|   558k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 90.0k, False: 467k]
  |  |  ------------------
  ------------------
  779|   558k|  return dest;
  780|   558k|}
lj_asm.c:ra_left:
  798|   162k|{
  799|   162k|  IRIns *ir = IR(lref);
  ------------------
  |  |  116|   162k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  800|   162k|  Reg left = ir->r;
  801|   162k|  if (ra_noreg(left)) {
  ------------------
  |  |   27|   162k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|   162k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 145k, False: 17.1k]
  |  |  ------------------
  ------------------
  802|   145k|    if (irref_isk(lref)) {
  ------------------
  |  |  485|   145k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 63.6k, False: 81.8k]
  |  |  ------------------
  ------------------
  803|  63.6k|      if (ir->o == IR_KNUM) {
  ------------------
  |  Branch (803:11): [True: 0, False: 63.6k]
  ------------------
  804|       |	/* FP remat needs a load except for +0. Still better than eviction. */
  805|      0|	if (tvispzero(ir_knum(ir)) || !(as->freeset & RSET_FPR)) {
  ------------------
  |  |  818|      0|#define tvispzero(o)	((o)->u64 == 0)
  |  |  ------------------
  |  |  |  Branch (818:22): [True: 0, False: 0]
  |  |  |  Branch (818:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (tvispzero(ir_knum(ir)) || !(as->freeset & RSET_FPR)) {
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (805:32): [True: 0, False: 0]
  ------------------
  806|      0|	  emit_loadk64(as, dest, ir);
  807|      0|	  return;
  808|      0|	}
  809|      0|#if LJ_64
  810|  63.6k|      } else if (ir->o == IR_KINT64) {
  ------------------
  |  Branch (810:18): [True: 0, False: 63.6k]
  ------------------
  811|      0|	emit_loadk64(as, dest, ir);
  812|      0|	return;
  813|      0|#if LJ_GC64
  814|  63.6k|      } else if (ir->o == IR_KGC || ir->o == IR_KPTR || ir->o == IR_KKPTR) {
  ------------------
  |  Branch (814:18): [True: 0, False: 63.6k]
  |  Branch (814:37): [True: 63.6k, False: 4]
  |  Branch (814:57): [True: 0, False: 4]
  ------------------
  815|  63.6k|	emit_loadk64(as, dest, ir);
  816|  63.6k|	return;
  817|  63.6k|#endif
  818|  63.6k|#endif
  819|  63.6k|      } else if (ir->o != IR_KPRI) {
  ------------------
  |  Branch (819:18): [True: 4, False: 0]
  ------------------
  820|      4|	lj_assertA(ir->o == IR_KINT || ir->o == IR_KGC ||
  ------------------
  |  |  111|      4|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      4|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     16|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 4, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      4|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  821|      4|		   ir->o == IR_KPTR || ir->o == IR_KKPTR || ir->o == IR_KNULL,
  822|      4|		   "K%03d has bad IR op %d", REF_BIAS - lref, ir->o);
  823|      4|	emit_loadi(as, dest, ir->i);
  824|      4|	return;
  825|      4|      }
  826|  63.6k|    }
  827|  81.8k|    if (!ra_hashint(left) && !iscrossref(as, lref))
  ------------------
  |  |   31|   163k|#define ra_hashint(r)		((r) < RID_SUNK)
  |  |  ------------------
  |  |  |  |   25|  81.8k|#define RID_SUNK		(RID_INIT-2)
  |  |  |  |  ------------------
  |  |  |  |  |  |   23|  81.8k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   21|  81.8k|#define RID_NONE		0x80
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   22|  81.8k|#define RID_MASK		0x7f
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (!ra_hashint(left) && !iscrossref(as, lref))
  ------------------
  |  |  123|  61.4k|#define iscrossref(as, ref)	((ref) < as->sectref)
  ------------------
  |  Branch (827:9): [True: 61.4k, False: 20.3k]
  |  Branch (827:30): [True: 61.4k, False: 2]
  ------------------
  828|  61.4k|      ra_sethint(ir->r, dest);  /* Propagate register hint. */
  ------------------
  |  |   33|   143k|#define ra_sethint(rr, r)	rr = (uint8_t)((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  61.4k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
  829|  81.8k|    left = ra_allocref(as, lref, dest < RID_MAX_GPR ? RSET_GPR : RSET_FPR);
  ------------------
  |  |   67|  29.5k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  29.5k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  29.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  29.5k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  29.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  29.5k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  29.5k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  29.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
                  left = ra_allocref(as, lref, dest < RID_MAX_GPR ? RSET_GPR : RSET_FPR);
  ------------------
  |  |   70|  52.2k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  52.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  52.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (829:34): [True: 29.5k, False: 52.2k]
  ------------------
  830|  81.8k|  }
  831|  98.9k|  ra_noweak(as, left);
  ------------------
  |  |  349|  98.9k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|  98.9k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  98.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  832|       |  /* Move needed for true 3-operand instruction: y=a+b ==> y=a; y+=b. */
  833|  98.9k|  if (dest != left) {
  ------------------
  |  Branch (833:7): [True: 17.1k, False: 81.8k]
  ------------------
  834|       |    /* Use register renaming if dest is the PHI reg. */
  835|  17.1k|    if (irt_isphi(ir->t) && as->phireg[dest] == lref) {
  ------------------
  |  |  448|  34.3k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 4.26k, False: 12.8k]
  |  |  ------------------
  ------------------
  |  Branch (835:29): [True: 1.24k, False: 3.02k]
  ------------------
  836|  1.24k|      ra_modified(as, left);
  ------------------
  |  |  347|  1.24k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|  1.24k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  1.24k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  837|  1.24k|      ra_rename(as, left, dest);
  838|  15.9k|    } else {
  839|  15.9k|      emit_movrr(as, ir, dest, left);
  840|  15.9k|    }
  841|  17.1k|  }
  842|  98.9k|}
lj_asm.c:asm_mod:
 1746|  8.70k|{
 1747|  8.70k|#if LJ_64 && LJ_HASFFI
 1748|  8.70k|  if (!irt_isint(ir->t))
  ------------------
  |  |  378|  8.70k|#define irt_isint(t)		(irt_type(t) == IRT_INT)
  |  |  ------------------
  |  |  |  |  365|  8.70k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1748:7): [True: 0, False: 8.70k]
  ------------------
 1749|      0|    asm_callid(as, ir, irt_isi64(ir->t) ? IRCALL_lj_carith_modi64 :
  ------------------
  |  |  384|      0|#define irt_isi64(t)		(irt_type(t) == IRT_I64)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (384:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1750|      0|					  IRCALL_lj_carith_modu64);
 1751|  8.70k|  else
 1752|  8.70k|#endif
 1753|  8.70k|    asm_callid(as, ir, IRCALL_lj_vm_modi);
 1754|  8.70k|}
lj_asm.c:asm_callid:
 1427|  8.70k|{
 1428|  8.70k|  const CCallInfo *ci = &lj_ir_callinfo[id];
 1429|  8.70k|  IRRef args[2];
 1430|  8.70k|  args[0] = ir->op1;
 1431|  8.70k|  args[1] = ir->op2;
 1432|  8.70k|  asm_setupresult(as, ir, ci);
 1433|  8.70k|  asm_gencall(as, ci, args);
 1434|  8.70k|}
lj_asm.c:ra_evictset:
  540|   283k|{
  541|   283k|  RegSet work;
  542|   283k|  as->modset |= drop;
  543|   283k|#if !LJ_SOFTFP
  544|   283k|  work = (drop & ~as->freeset) & RSET_FPR;
  ------------------
  |  |   70|   283k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|   283k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   283k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  545|   339k|  while (work) {
  ------------------
  |  Branch (545:10): [True: 55.4k, False: 283k]
  ------------------
  546|  55.4k|    Reg r = rset_pickbot(work);
  ------------------
  |  |  215|  55.4k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|  55.4k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|  55.4k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  547|  55.4k|    ra_restore(as, regcost_ref(as->cost[r]));
  ------------------
  |  |  128|  55.4k|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  548|  55.4k|    rset_clear(work, r);
  ------------------
  |  |   76|  55.4k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  55.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  549|  55.4k|    checkmclim(as);
  550|  55.4k|  }
  551|   283k|#endif
  552|   283k|  work = (drop & ~as->freeset);
  553|   483k|  while (work) {
  ------------------
  |  Branch (553:10): [True: 199k, False: 283k]
  ------------------
  554|   199k|    Reg r = rset_pickbot(work);
  ------------------
  |  |  215|   199k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|   199k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|   199k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|   199k|    ra_restore(as, regcost_ref(as->cost[r]));
  ------------------
  |  |  128|   199k|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  556|   199k|    rset_clear(work, r);
  ------------------
  |  |   76|   199k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|   199k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  557|   199k|    checkmclim(as);
  558|   199k|  }
  559|   283k|}
lj_asm.c:ra_destreg:
  784|   215k|{
  785|   215k|  Reg dest = ra_dest(as, ir, RID2RSET(r));
  ------------------
  |  |   70|   215k|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
  786|   215k|  if (dest != r) {
  ------------------
  |  Branch (786:7): [True: 164k, False: 50.5k]
  ------------------
  787|   164k|    lj_assertA(rset_test(as->freeset, r), "dest reg %d is not free", r);
  ------------------
  |  |  111|   164k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   164k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   164k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 164k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   164k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  788|   164k|    ra_modified(as, r);
  ------------------
  |  |  347|   164k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|   164k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   164k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  789|   164k|    emit_movrr(as, ir, dest, r);
  790|   164k|  }
  791|   215k|}
lj_asm.c:ra_destpair:
  869|    803|{
  870|    803|  Reg destlo = ir->r, desthi = (ir+1)->r;
  871|    803|  IRIns *irx = (LJ_64 && !irt_is64(ir->t)) ? ir+1 : ir;
  ------------------
  |  |  640|  1.60k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                IRIns *irx = (LJ_64 && !irt_is64(ir->t)) ? ir+1 : ir;
  ------------------
  |  |  409|    803|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|    803|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|    803|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|    803|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|    803|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|    803|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (871:26): [True: 0, False: 803]
  ------------------
  872|       |  /* First spill unrelated refs blocking the destination registers. */
  873|    803|  if (!rset_test(as->freeset, RID_RETLO) &&
  ------------------
  |  |   74|  1.60k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (873:7): [True: 803, False: 0]
  ------------------
  874|    803|      destlo != RID_RETLO && desthi != RID_RETLO)
  ------------------
  |  Branch (874:7): [True: 0, False: 803]
  |  Branch (874:30): [True: 0, False: 0]
  ------------------
  875|      0|    ra_restore(as, regcost_ref(as->cost[RID_RETLO]));
  ------------------
  |  |  128|      0|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  876|    803|  if (!rset_test(as->freeset, RID_RETHI) &&
  ------------------
  |  |   74|  1.60k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (876:7): [True: 315, False: 488]
  ------------------
  877|    803|      destlo != RID_RETHI && desthi != RID_RETHI)
  ------------------
  |  Branch (877:7): [True: 315, False: 0]
  |  Branch (877:30): [True: 0, False: 315]
  ------------------
  878|      0|    ra_restore(as, regcost_ref(as->cost[RID_RETHI]));
  ------------------
  |  |  128|      0|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  879|       |  /* Next free the destination registers (if any). */
  880|    803|  if (ra_hasreg(destlo)) {
  ------------------
  |  |   28|    803|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|    803|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 803, False: 0]
  |  |  ------------------
  ------------------
  881|    803|    ra_free(as, destlo);
  ------------------
  |  |  346|    803|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|    803|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    803|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  882|    803|    ra_modified(as, destlo);
  ------------------
  |  |  347|    803|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|    803|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    803|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  883|    803|  } else {
  884|      0|    destlo = RID_RETLO;
  885|      0|  }
  886|    803|  if (ra_hasreg(desthi)) {
  ------------------
  |  |   28|    803|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|    803|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 315, False: 488]
  |  |  ------------------
  ------------------
  887|    315|    ra_free(as, desthi);
  ------------------
  |  |  346|    315|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|    315|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    315|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|    315|    ra_modified(as, desthi);
  ------------------
  |  |  347|    315|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|    315|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    315|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  889|    488|  } else {
  890|    488|    desthi = RID_RETHI;
  891|    488|  }
  892|       |  /* Check for conflicts and shuffle the registers as needed. */
  893|    803|  if (destlo == RID_RETHI) {
  ------------------
  |  Branch (893:7): [True: 0, False: 803]
  ------------------
  894|      0|    if (desthi == RID_RETLO) {
  ------------------
  |  Branch (894:9): [True: 0, False: 0]
  ------------------
  895|      0|#if LJ_TARGET_X86ORX64
  896|      0|      *--as->mcp = XI_XCHGa + RID_RETHI;
  897|      0|      if (LJ_64 && irt_is64(irx->t)) *--as->mcp = 0x48;
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_64 && irt_is64(irx->t)) *--as->mcp = 0x48;
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  898|       |#else
  899|       |      emit_movrr(as, irx, RID_RETHI, RID_TMP);
  900|       |      emit_movrr(as, irx, RID_RETLO, RID_RETHI);
  901|       |      emit_movrr(as, irx, RID_TMP, RID_RETLO);
  902|       |#endif
  903|      0|    } else {
  904|      0|      emit_movrr(as, irx, RID_RETHI, RID_RETLO);
  905|      0|      if (desthi != RID_RETHI) emit_movrr(as, irx, desthi, RID_RETHI);
  ------------------
  |  Branch (905:11): [True: 0, False: 0]
  ------------------
  906|      0|    }
  907|    803|  } else if (desthi == RID_RETLO) {
  ------------------
  |  Branch (907:14): [True: 0, False: 803]
  ------------------
  908|      0|    emit_movrr(as, irx, RID_RETLO, RID_RETHI);
  909|      0|    if (destlo != RID_RETLO) emit_movrr(as, irx, destlo, RID_RETLO);
  ------------------
  |  Branch (909:9): [True: 0, False: 0]
  ------------------
  910|    803|  } else {
  911|    803|    if (desthi != RID_RETHI) emit_movrr(as, irx, desthi, RID_RETHI);
  ------------------
  |  Branch (911:9): [True: 0, False: 803]
  ------------------
  912|    803|    if (destlo != RID_RETLO) emit_movrr(as, irx, destlo, RID_RETLO);
  ------------------
  |  Branch (912:9): [True: 0, False: 803]
  ------------------
  913|    803|  }
  914|       |  /* Restore spill slots (if any). */
  915|    803|  if (ra_hasspill((ir+1)->s)) ra_save(as, ir+1, RID_RETHI);
  ------------------
  |  |   39|    803|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|    803|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 488, False: 315]
  |  |  ------------------
  ------------------
  916|    803|  if (ra_hasspill(ir->s)) ra_save(as, ir, RID_RETLO);
  ------------------
  |  |   39|    803|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|    803|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 803]
  |  |  ------------------
  ------------------
  917|    803|}
lj_asm.c:asm_div:
 1734|  17.3k|{
 1735|  17.3k|#if LJ_64 && LJ_HASFFI
 1736|  17.3k|  if (!irt_isnum(ir->t))
  ------------------
  |  |  377|  17.3k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  17.3k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1736:7): [True: 0, False: 17.3k]
  ------------------
 1737|      0|    asm_callid(as, ir, irt_isi64(ir->t) ? IRCALL_lj_carith_divi64 :
  ------------------
  |  |  384|      0|#define irt_isi64(t)		(irt_type(t) == IRT_I64)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (384:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1738|      0|					  IRCALL_lj_carith_divu64);
 1739|  17.3k|  else
 1740|  17.3k|#endif
 1741|  17.3k|    asm_fpdiv(as, ir);
  ------------------
  |  | 2228|  17.3k|#define asm_fpdiv(as, ir)	asm_fparith(as, ir, XO_DIVSD)
  ------------------
 1742|  17.3k|}
lj_asm.c:ir_khash:
 1109|    547|{
 1110|    547|  uint32_t lo, hi;
 1111|    547|  UNUSED(as);
  ------------------
  |  |   91|    547|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1112|    547|  if (irt_isstr(ir->t)) {
  ------------------
  |  |  373|    547|#define irt_isstr(t)		(irt_type(t) == IRT_STR)
  |  |  ------------------
  |  |  |  |  365|    547|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (373:23): [True: 547, False: 0]
  |  |  ------------------
  ------------------
 1113|    547|    return ir_kstr(ir)->sid;
  ------------------
  |  |  588|    547|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|    547|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  1.09k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    547|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  1.09k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 547, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 547, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    547|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 547, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1114|    547|  } else if (irt_isnum(ir->t)) {
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1115|      0|    lo = ir_knum(ir)->u32.lo;
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1116|      0|    hi = ir_knum(ir)->u32.hi << 1;
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1117|      0|  } else if (irt_ispri(ir->t)) {
  ------------------
  |  |  371|      0|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (371:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1118|      0|    lj_assertA(!irt_isnil(ir->t), "hash of nil key");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1119|      0|    return irt_type(ir->t)-IRT_FALSE;
  ------------------
  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
 1120|      0|  } else {
 1121|      0|    lj_assertA(irt_isgcv(ir->t), "hash of bad IR type %d", irt_type(ir->t));
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1122|      0|    lo = u32ptr(ir_kgc(ir));
  ------------------
  |  |   96|      0|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (96:49): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1123|      0|#if LJ_GC64
 1124|      0|    hi = (uint32_t)(u64ptr(ir_kgc(ir)) >> 32) | (irt_toitype(ir->t) << 15);
  ------------------
  |  |   98|      0|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (98:49): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  hi = (uint32_t)(u64ptr(ir_kgc(ir)) >> 32) | (irt_toitype(ir->t) << 15);
  ------------------
  |  |  442|      0|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 1125|       |#else
 1126|       |    hi = lo + HASH_BIAS;
 1127|       |#endif
 1128|      0|  }
 1129|      0|  return hashrot(lo, hi);
 1130|    547|}
lj_asm.c:asm_newref:
 1355|    520|{
 1356|    520|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_tab_newkey];
 1357|    520|  IRRef args[3];
 1358|    520|  if (ir->r == RID_SINK)
  ------------------
  |  |   24|    520|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|    520|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|    520|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|    520|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1358:7): [True: 0, False: 520]
  ------------------
 1359|      0|    return;
 1360|    520|  asm_snap_prep(as);
 1361|    520|  args[0] = ASMREF_L;     /* lua_State *L */
  ------------------
  |  |  120|    520|#define ASMREF_L		REF_NIL		/* Stores register for L. */
  ------------------
 1362|    520|  args[1] = ir->op1;      /* GCtab *t     */
 1363|    520|  args[2] = ASMREF_TMP1;  /* cTValue *key */
  ------------------
  |  |  118|    520|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1364|    520|  asm_setupresult(as, ir, ci);  /* TValue * */
 1365|    520|  asm_gencall(as, ci, args);
 1366|    520|  asm_tvptr(as, ra_releasetmp(as, ASMREF_TMP1), ir->op2, IRTMPREF_IN1);
  ------------------
  |  |  118|    520|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
                asm_tvptr(as, ra_releasetmp(as, ASMREF_TMP1), ir->op2, IRTMPREF_IN1);
  ------------------
  |  |  228|    520|#define IRTMPREF_IN1		0x01	/* First input value. */
  ------------------
 1367|    520|}
lj_asm.c:ra_releasetmp:
  451|  62.5k|{
  452|  62.5k|  IRIns *ir = IR(ref);
  ------------------
  |  |  116|  62.5k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  453|  62.5k|  Reg r = ir->r;
  454|  62.5k|  lj_assertA(ra_hasreg(r), "release of TMP%d has no reg", ref-ASMREF_TMP1+1);
  ------------------
  |  |  111|  62.5k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  62.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  62.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 62.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  62.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|  62.5k|  lj_assertA(!ra_hasspill(ir->s),
  ------------------
  |  |  111|  62.5k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  62.5k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  62.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 62.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  62.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  456|  62.5k|	     "release of TMP%d has spill slot [%x]", ref-ASMREF_TMP1+1, ir->s);
  457|  62.5k|  ra_free(as, r);
  ------------------
  |  |  346|  62.5k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|  62.5k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  62.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  458|  62.5k|  ra_modified(as, r);
  ------------------
  |  |  347|  62.5k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|  62.5k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  62.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  459|  62.5k|  ir->r = RID_INIT;
  ------------------
  |  |   23|  62.5k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   21|  62.5k|#define RID_NONE		0x80
  |  |  ------------------
  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   22|  62.5k|#define RID_MASK		0x7f
  |  |  ------------------
  ------------------
  460|  62.5k|  return r;
  461|  62.5k|}
lj_asm.c:asm_tmpref:
 1370|      9|{
 1371|      9|  Reg r = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|      9|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      9|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      9|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      9|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      9|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      9|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      9|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      9|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1372|      9|  asm_tvptr(as, r, ir->op1, ir->op2);
 1373|      9|}
lj_asm.c:asm_snew:
 1138|    166|{
 1139|    166|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_str_new];
 1140|    166|  IRRef args[3];
 1141|    166|  asm_snap_prep(as);
 1142|    166|  args[0] = ASMREF_L;  /* lua_State *L    */
  ------------------
  |  |  120|    166|#define ASMREF_L		REF_NIL		/* Stores register for L. */
  ------------------
 1143|    166|  args[1] = ir->op1;   /* const char *str */
 1144|    166|  args[2] = ir->op2;   /* size_t len      */
 1145|    166|  as->gcsteps++;
 1146|    166|  asm_setupresult(as, ir, ci);  /* GCstr * */
 1147|    166|  asm_gencall(as, ci, args);
 1148|    166|}
lj_asm.c:asm_tnew:
 1151|    140|{
 1152|    140|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_tab_new1];
 1153|    140|  IRRef args[2];
 1154|    140|  asm_snap_prep(as);
 1155|    140|  args[0] = ASMREF_L;     /* lua_State *L    */
  ------------------
  |  |  120|    140|#define ASMREF_L		REF_NIL		/* Stores register for L. */
  ------------------
 1156|    140|  args[1] = ASMREF_TMP1;  /* uint32_t ahsize */
  ------------------
  |  |  118|    140|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1157|    140|  as->gcsteps++;
 1158|    140|  asm_setupresult(as, ir, ci);  /* GCtab * */
 1159|    140|  asm_gencall(as, ci, args);
 1160|    140|  ra_allockreg(as, ir->op1 | (ir->op2 << 24), ra_releasetmp(as, ASMREF_TMP1));
  ------------------
  |  |  659|    140|#define ra_allockreg(as, k, r)		emit_loadi(as, (r), (k))
  ------------------
 1161|    140|}
lj_asm.c:asm_tdup:
 1164|    371|{
 1165|    371|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_tab_dup];
 1166|    371|  IRRef args[2];
 1167|    371|  asm_snap_prep(as);
 1168|    371|  args[0] = ASMREF_L;  /* lua_State *L    */
  ------------------
  |  |  120|    371|#define ASMREF_L		REF_NIL		/* Stores register for L. */
  ------------------
 1169|    371|  args[1] = ir->op1;   /* const GCtab *kt */
 1170|    371|  as->gcsteps++;
 1171|    371|  asm_setupresult(as, ir, ci);  /* GCtab * */
 1172|    371|  asm_gencall(as, ci, args);
 1173|    371|}
lj_asm.c:asm_bufhdr:
 1199|  63.6k|{
 1200|  63.6k|  Reg sb = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|  63.6k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  63.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  63.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  63.6k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  63.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  63.6k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  63.6k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  63.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1201|  63.6k|  switch (ir->op2) {
 1202|  63.6k|  case IRBUFHDR_RESET: {
  ------------------
  |  |  247|  63.6k|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
  |  Branch (1202:3): [True: 63.6k, False: 0]
  ------------------
 1203|  63.6k|    Reg tmp = ra_scratch(as, rset_exclude(RSET_GPR, sb));
  ------------------
  |  |   77|  63.6k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  63.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1204|  63.6k|    IRIns irbp;
 1205|  63.6k|    irbp.ot = IRT(0, IRT_PTR);  /* Buffer data pointer type. */
  ------------------
  |  |  358|  63.6k|#define IRT(o, t)		((uint32_t)(((o)<<8) | (t)))
  ------------------
 1206|  63.6k|    emit_storeofs(as, &irbp, tmp, sb, offsetof(SBuf, w));
 1207|  63.6k|    emit_loadofs(as, &irbp, tmp, sb, offsetof(SBuf, b));
 1208|  63.6k|    break;
 1209|      0|    }
 1210|      0|  case IRBUFHDR_APPEND: {
  ------------------
  |  |  248|      0|#define IRBUFHDR_APPEND		1	/* Append to buffer. */
  ------------------
  |  Branch (1210:3): [True: 0, False: 63.6k]
  ------------------
 1211|       |    /* Rematerialize const buffer pointer instead of likely spill. */
 1212|      0|    IRIns *irp = IR(ir->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1213|      0|    if (!(ra_hasreg(irp->r) || irp == ir-1 ||
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1213:32): [True: 0, False: 0]
  ------------------
 1214|      0|	  (irp == ir-2 && !ra_used(ir-1)))) {
  ------------------
  |  |  351|      0|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1214:5): [True: 0, False: 0]
  ------------------
 1215|      0|      while (!(irp->o == IR_BUFHDR && irp->op2 == IRBUFHDR_RESET))
  ------------------
  |  |  247|      0|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
  |  Branch (1215:16): [True: 0, False: 0]
  |  Branch (1215:39): [True: 0, False: 0]
  ------------------
 1216|      0|	irp = IR(irp->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1217|      0|      if (irref_isk(irp->op1)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1218|      0|	ra_weak(as, ra_allocref(as, ir->op1, RSET_GPR));
  ------------------
  |  |  348|      0|#define ra_weak(as, r)		rset_set(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1219|      0|	ir = irp;
 1220|      0|      }
 1221|      0|    }
 1222|      0|    break;
 1223|      0|    }
 1224|      0|#if LJ_HASBUFFER
 1225|      0|  case IRBUFHDR_WRITE:
  ------------------
  |  |  249|      0|#define IRBUFHDR_WRITE		2	/* Write to string buffer. */
  ------------------
  |  Branch (1225:3): [True: 0, False: 63.6k]
  ------------------
 1226|      0|    asm_bufhdr_write(as, sb);
 1227|      0|    break;
 1228|      0|#endif
 1229|      0|  default: lj_assertA(0, "bad BUFHDR op2 %d", ir->op2); break;
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1229:3): [True: 0, False: 63.6k]
  ------------------
 1230|  63.6k|  }
 1231|  63.6k|#if LJ_TARGET_X86ORX64
 1232|  63.6k|  ra_left(as, sb, ir->op1);
 1233|       |#else
 1234|       |  ra_leftov(as, sb, ir->op1);
 1235|       |#endif
 1236|  63.6k|}
lj_asm.c:asm_bufput:
 1239|   109k|{
 1240|   109k|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_buf_putstr];
 1241|   109k|  IRRef args[3];
 1242|   109k|  IRIns *irs;
 1243|   109k|  int kchar = -129;
 1244|   109k|  args[0] = ir->op1;  /* SBuf * */
 1245|   109k|  args[1] = ir->op2;  /* GCstr * */
 1246|   109k|  irs = IR(ir->op2);
  ------------------
  |  |  116|   109k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1247|   109k|  lj_assertA(irt_isstr(irs->t),
  ------------------
  |  |  111|   109k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   109k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   109k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 109k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   109k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1248|   109k|	     "BUFPUT of non-string IR %04d", ir->op2 - REF_BIAS);
 1249|   109k|  if (irs->o == IR_KGC) {
  ------------------
  |  Branch (1249:7): [True: 35.4k, False: 74.2k]
  ------------------
 1250|  70.9k|    GCstr *s = ir_kstr(irs);
  ------------------
  |  |  588|  35.4k|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|  35.4k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  70.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  35.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  70.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 35.4k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 35.4k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  35.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 35.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1251|  35.4k|    if (s->len == 1) {  /* Optimize put of single-char string constant. */
  ------------------
  |  Branch (1251:9): [True: 186, False: 35.2k]
  ------------------
 1252|    186|      kchar = (int8_t)strdata(s)[0];  /* Signed! */
  ------------------
  |  |  316|    186|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1253|    186|      args[1] = ASMREF_TMP1;  /* int, truncated to char */
  ------------------
  |  |  118|    186|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1254|    186|      ci = &lj_ir_callinfo[IRCALL_lj_buf_putchar];
 1255|    186|    }
 1256|  74.2k|  } else if (mayfuse(as, ir->op2) && ra_noreg(irs->r)) {
  ------------------
  |  |  127|   148k|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 65.5k, False: 8.70k]
  |  |  ------------------
  ------------------
                } else if (mayfuse(as, ir->op2) && ra_noreg(irs->r)) {
  ------------------
  |  |   27|  65.5k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  65.5k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 65.5k, False: 0]
  |  |  ------------------
  ------------------
 1257|  65.5k|    if (irs->o == IR_TOSTR) {  /* Fuse number to string conversions. */
  ------------------
  |  Branch (1257:9): [True: 21.9k, False: 43.6k]
  ------------------
 1258|  21.9k|      if (irs->op2 == IRTOSTR_NUM) {
  ------------------
  |  |  270|  21.9k|#define IRTOSTR_NUM		1	/* Convert number to string. */
  ------------------
  |  Branch (1258:11): [True: 186, False: 21.7k]
  ------------------
 1259|    186|	args[1] = ASMREF_TMP1;  /* TValue * */
  ------------------
  |  |  118|    186|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1260|    186|	ci = &lj_ir_callinfo[IRCALL_lj_strfmt_putnum];
 1261|  21.7k|      } else {
 1262|  21.7k|	lj_assertA(irt_isinteger(IR(irs->op1)->t),
  ------------------
  |  |  111|  21.7k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  21.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  21.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 21.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  21.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1263|  21.7k|		   "TOSTR of non-numeric IR %04d", irs->op1);
 1264|  21.7k|	args[1] = irs->op1;  /* int */
 1265|  21.7k|	if (irs->op2 == IRTOSTR_INT)
  ------------------
  |  |  269|  21.7k|#define IRTOSTR_INT		0	/* Convert integer to string. */
  ------------------
  |  Branch (1265:6): [True: 0, False: 21.7k]
  ------------------
 1266|      0|	  ci = &lj_ir_callinfo[IRCALL_lj_strfmt_putint];
 1267|  21.7k|	else
 1268|  21.7k|	  ci = &lj_ir_callinfo[IRCALL_lj_buf_putchar];
 1269|  21.7k|      }
 1270|  43.6k|    } else if (irs->o == IR_SNEW) {  /* Fuse string allocation. */
  ------------------
  |  Branch (1270:16): [True: 0, False: 43.6k]
  ------------------
 1271|      0|      args[1] = irs->op1;  /* const void * */
 1272|      0|      args[2] = irs->op2;  /* MSize */
 1273|      0|      ci = &lj_ir_callinfo[IRCALL_lj_buf_putmem];
 1274|      0|    }
 1275|  65.5k|  }
 1276|   109k|  asm_setupresult(as, ir, ci);  /* SBuf * */
 1277|   109k|  asm_gencall(as, ci, args);
 1278|   109k|  if (args[1] == ASMREF_TMP1) {
  ------------------
  |  |  118|   109k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
  |  Branch (1278:7): [True: 372, False: 109k]
  ------------------
 1279|    372|    Reg tmp = ra_releasetmp(as, ASMREF_TMP1);
  ------------------
  |  |  118|    372|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1280|    372|    if (kchar == -129)
  ------------------
  |  Branch (1280:9): [True: 186, False: 186]
  ------------------
 1281|    186|      asm_tvptr(as, tmp, irs->op1, IRTMPREF_IN1);
  ------------------
  |  |  228|    186|#define IRTMPREF_IN1		0x01	/* First input value. */
  ------------------
 1282|    186|    else
 1283|    186|      ra_allockreg(as, kchar, tmp);
  ------------------
  |  |  659|    186|#define ra_allockreg(as, k, r)		emit_loadi(as, (r), (k))
  ------------------
 1284|    372|  }
 1285|   109k|}
lj_asm.c:asm_bufstr:
 1288|  63.6k|{
 1289|  63.6k|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_buf_tostr];
 1290|  63.6k|  IRRef args[1];
 1291|  63.6k|  args[0] = ir->op1;  /* SBuf *sb */
 1292|  63.6k|  as->gcsteps++;
 1293|  63.6k|  asm_setupresult(as, ir, ci);  /* GCstr * */
 1294|  63.6k|  asm_gencall(as, ci, args);
 1295|  63.6k|}
lj_asm.c:asm_tostr:
 1300|  12.1k|{
 1301|  12.1k|  const CCallInfo *ci;
 1302|  12.1k|  IRRef args[2];
 1303|  12.1k|  asm_snap_prep(as);
 1304|  12.1k|  args[0] = ASMREF_L;
  ------------------
  |  |  120|  12.1k|#define ASMREF_L		REF_NIL		/* Stores register for L. */
  ------------------
 1305|  12.1k|  as->gcsteps++;
 1306|  12.1k|  if (ir->op2 == IRTOSTR_NUM) {
  ------------------
  |  |  270|  12.1k|#define IRTOSTR_NUM		1	/* Convert number to string. */
  ------------------
  |  Branch (1306:7): [True: 6.03k, False: 6.09k]
  ------------------
 1307|  6.03k|    args[1] = ASMREF_TMP1;  /* cTValue * */
  ------------------
  |  |  118|  6.03k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1308|  6.03k|    ci = &lj_ir_callinfo[IRCALL_lj_strfmt_num];
 1309|  6.09k|  } else {
 1310|  6.09k|    args[1] = ir->op1;  /* int32_t k */
 1311|  6.09k|    if (ir->op2 == IRTOSTR_INT)
  ------------------
  |  |  269|  6.09k|#define IRTOSTR_INT		0	/* Convert integer to string. */
  ------------------
  |  Branch (1311:9): [True: 6.09k, False: 0]
  ------------------
 1312|  6.09k|      ci = &lj_ir_callinfo[IRCALL_lj_strfmt_int];
 1313|      0|    else
 1314|      0|      ci = &lj_ir_callinfo[IRCALL_lj_strfmt_char];
 1315|  6.09k|  }
 1316|  12.1k|  asm_setupresult(as, ir, ci);  /* GCstr * */
 1317|  12.1k|  asm_gencall(as, ci, args);
 1318|  12.1k|  if (ir->op2 == IRTOSTR_NUM)
  ------------------
  |  |  270|  12.1k|#define IRTOSTR_NUM		1	/* Convert number to string. */
  ------------------
  |  Branch (1318:7): [True: 6.03k, False: 6.09k]
  ------------------
 1319|  6.03k|    asm_tvptr(as, ra_releasetmp(as, ASMREF_TMP1), ir->op1, IRTMPREF_IN1);
  ------------------
  |  |  118|  6.03k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
                  asm_tvptr(as, ra_releasetmp(as, ASMREF_TMP1), ir->op1, IRTMPREF_IN1);
  ------------------
  |  |  228|  6.03k|#define IRTMPREF_IN1		0x01	/* First input value. */
  ------------------
 1320|  12.1k|}
lj_asm.c:asm_call:
 1437|  51.0k|{
 1438|  51.0k|  IRRef args[CCI_NARGS_MAX];
 1439|  51.0k|  const CCallInfo *ci = &lj_ir_callinfo[ir->op2];
 1440|  51.0k|  asm_collectargs(as, ir, ci, args);
 1441|  51.0k|  asm_setupresult(as, ir, ci);
 1442|  51.0k|  asm_gencall(as, ci, args);
 1443|  51.0k|}
lj_asm.c:ra_evictk:
  563|  24.6k|{
  564|  24.6k|  RegSet work;
  565|  24.6k|#if !LJ_SOFTFP
  566|  24.6k|  work = ~as->freeset & RSET_FPR;
  ------------------
  |  |   70|  24.6k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  24.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  567|  39.8k|  while (work) {
  ------------------
  |  Branch (567:10): [True: 15.2k, False: 24.6k]
  ------------------
  568|  15.2k|    Reg r = rset_pickbot(work);
  ------------------
  |  |  215|  15.2k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|  15.2k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|  15.2k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  569|  15.2k|    IRRef ref = regcost_ref(as->cost[r]);
  ------------------
  |  |  128|  15.2k|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  570|  15.2k|    if (emit_canremat(ref) && irref_isk(ref)) {
  ------------------
  |  |  571|  30.4k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  |  |  ------------------
  |  |  |  Branch (571:28): [True: 13.5k, False: 1.64k]
  |  |  ------------------
  ------------------
                  if (emit_canremat(ref) && irref_isk(ref)) {
  ------------------
  |  |  485|  13.5k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
  571|  13.5k|      ra_rematk(as, ref);
  572|  13.5k|      checkmclim(as);
  573|  13.5k|    }
  574|  15.2k|    rset_clear(work, r);
  ------------------
  |  |   76|  15.2k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  15.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  575|  15.2k|  }
  576|  24.6k|#endif
  577|  24.6k|  work = ~as->freeset & RSET_GPR;
  ------------------
  |  |   67|  24.6k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  24.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  24.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  24.6k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  24.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  24.6k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  24.6k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  24.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  578|  50.8k|  while (work) {
  ------------------
  |  Branch (578:10): [True: 26.2k, False: 24.6k]
  ------------------
  579|  26.2k|    Reg r = rset_pickbot(work);
  ------------------
  |  |  215|  26.2k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|  26.2k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|  26.2k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  580|  26.2k|    IRRef ref = regcost_ref(as->cost[r]);
  ------------------
  |  |  128|  26.2k|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
  581|  26.2k|    if (emit_canremat(ref) && irref_isk(ref)) {
  ------------------
  |  |  571|  52.4k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  |  |  ------------------
  |  |  |  Branch (571:28): [True: 26.2k, False: 19]
  |  |  ------------------
  ------------------
                  if (emit_canremat(ref) && irref_isk(ref)) {
  ------------------
  |  |  485|  26.2k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 11.9k, False: 14.2k]
  |  |  ------------------
  ------------------
  582|  11.9k|      ra_rematk(as, ref);
  583|  11.9k|      checkmclim(as);
  584|  11.9k|    }
  585|  26.2k|    rset_clear(work, r);
  ------------------
  |  |   76|  26.2k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  26.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  586|  26.2k|  }
  587|  24.6k|}
lj_asm.c:asm_head_side:
 1933|  10.4k|{
 1934|  10.4k|  IRRef1 sloadins[RID_MAX];
 1935|  10.4k|  RegSet allow = RSET_ALL;  /* Inverse of all coalesced registers. */
  ------------------
  |  |   71|  10.4k|#define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  ------------------
  |  |  |  |   67|  10.4k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  10.4k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|  10.4k|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|  10.4k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|  10.4k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  10.4k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  10.4k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1936|  10.4k|  RegSet live = RSET_EMPTY;  /* Live parent registers. */
  ------------------
  |  |   71|  10.4k|#define RSET_EMPTY		((RegSet)0)
  ------------------
 1937|  10.4k|  RegSet pallow = RSET_GPR;  /* Registers needed by the parent stack check. */
  ------------------
  |  |   67|  10.4k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  10.4k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  10.4k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  10.4k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  10.4k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  10.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1938|  10.4k|  Reg pbase;
 1939|  10.4k|  IRIns *irp = &as->parent->ir[REF_BASE];  /* Parent base. */
 1940|  10.4k|  int32_t spadj, spdelta;
 1941|  10.4k|  int pass2 = 0;
 1942|  10.4k|  int pass3 = 0;
 1943|  10.4k|  IRRef i;
 1944|       |
 1945|  10.4k|  if (as->snapno && as->topslot > as->parent->topslot) {
  ------------------
  |  Branch (1945:7): [True: 249, False: 10.2k]
  |  Branch (1945:21): [True: 3, False: 246]
  ------------------
 1946|       |    /* Force snap #0 alloc to prevent register overwrite in stack check. */
 1947|      3|    asm_snap_alloc(as, 0);
 1948|      3|  }
 1949|  10.4k|  pbase = asm_head_side_base(as, irp);
 1950|  10.4k|  if (pbase != RID_NONE) {
  ------------------
  |  |   21|  10.4k|#define RID_NONE		0x80
  ------------------
  |  Branch (1950:7): [True: 1.32k, False: 9.12k]
  ------------------
 1951|  1.32k|    rset_clear(allow, pbase);
  ------------------
  |  |   76|  1.32k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.32k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1952|  1.32k|    rset_clear(pallow, pbase);
  ------------------
  |  |   76|  1.32k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.32k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1953|  1.32k|  }
 1954|       |
 1955|       |  /* Scan all parent SLOADs and collect register dependencies. */
 1956|  12.1k|  for (i = as->stopins; i > REF_BASE; i--) {
  ------------------
  |  Branch (1956:25): [True: 1.68k, False: 10.4k]
  ------------------
 1957|  1.68k|    IRIns *ir = IR(i);
  ------------------
  |  |  116|  1.68k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1958|  1.68k|    RegSP rs;
 1959|  1.68k|    lj_assertA((ir->o == IR_SLOAD && (ir->op2 & IRSLOAD_PARENT)) ||
  ------------------
  |  |  111|  1.68k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.68k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  6.72k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.68k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.68k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.68k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1960|  1.68k|	       (LJ_SOFTFP && ir->o == IR_HIOP) || ir->o == IR_PVAL,
 1961|  1.68k|	       "IR %04d has bad parent op %d",
 1962|  1.68k|	       (int)(ir - as->ir) - REF_BIAS, ir->o);
 1963|  1.68k|    rs = as->parentmap[i - REF_FIRST];
 1964|  1.68k|    if (ra_hasreg(ir->r)) {
  ------------------
  |  |   28|  1.68k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  1.68k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 1.66k, False: 16]
  |  |  ------------------
  ------------------
 1965|  1.66k|      rset_clear(allow, ir->r);
  ------------------
  |  |   76|  1.66k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.66k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1966|  1.66k|      if (ra_hasspill(ir->s)) {
  ------------------
  |  |   39|  1.66k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  1.66k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 1.66k]
  |  |  ------------------
  ------------------
 1967|      0|	ra_save(as, ir, ir->r);
 1968|      0|	checkmclim(as);
 1969|      0|      }
 1970|  1.66k|    } else if (ra_hasspill(ir->s)) {
  ------------------
  |  |   39|     16|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|     16|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1971|     16|      irt_setmark(ir->t);
  ------------------
  |  |  446|     16|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
 1972|     16|      pass2 = 1;
 1973|     16|    }
 1974|  1.68k|    if (ir->r == rs) {  /* Coalesce matching registers right now. */
  ------------------
  |  Branch (1974:9): [True: 1.15k, False: 525]
  ------------------
 1975|  1.15k|      ra_free(as, ir->r);
  ------------------
  |  |  346|  1.15k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|  1.15k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  1.15k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1976|  1.15k|    } else if (ra_hasspill(regsp_spill(rs))) {
  ------------------
  |  |   39|    525|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|    525|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 525]
  |  |  ------------------
  ------------------
 1977|      0|      if (ra_hasreg(ir->r))
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1978|      0|	pass3 = 1;
 1979|    525|    } else if (ra_used(ir)) {
  ------------------
  |  |  351|    525|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  1.05k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|    525|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 509, False: 16]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|     16|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|     16|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 16, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1980|    525|      sloadins[rs] = (IRRef1)i;
 1981|    525|      rset_set(live, rs);  /* Block live parent register. */
  ------------------
  |  |   75|    525|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    525|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1982|    525|    }
 1983|  1.68k|    if (!ra_hasspill(regsp_spill(rs))) rset_clear(pallow, regsp_reg(rs));
  ------------------
  |  |   39|  1.68k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  1.68k|#define SPS_NONE		0
  |  |  ------------------
  ------------------
                  if (!ra_hasspill(regsp_spill(rs))) rset_clear(pallow, regsp_reg(rs));
  ------------------
  |  |   76|  1.68k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.68k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (1983:9): [True: 1.68k, False: 0]
  ------------------
 1984|  1.68k|  }
 1985|       |
 1986|       |  /* Calculate stack frame adjustment. */
 1987|  10.4k|  spadj = asm_stack_adjust(as);
 1988|  10.4k|  spdelta = spadj - (int32_t)as->parent->spadjust;
 1989|  10.4k|  if (spdelta < 0) {  /* Don't shrink the stack frame. */
  ------------------
  |  Branch (1989:7): [True: 1.96k, False: 8.48k]
  ------------------
 1990|  1.96k|    spadj = (int32_t)as->parent->spadjust;
 1991|  1.96k|    spdelta = 0;
 1992|  1.96k|  }
 1993|  10.4k|  as->T->spadjust = (uint16_t)spadj;
 1994|       |
 1995|       |  /* Reload spilled target registers. */
 1996|  10.4k|  if (pass2) {
  ------------------
  |  Branch (1996:7): [True: 16, False: 10.4k]
  ------------------
 1997|     48|    for (i = as->stopins; i > REF_BASE; i--) {
  ------------------
  |  Branch (1997:27): [True: 32, False: 16]
  ------------------
 1998|     32|      IRIns *ir = IR(i);
  ------------------
  |  |  116|     32|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1999|     32|      if (irt_ismarked(ir->t)) {
  ------------------
  |  |  445|     32|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 16, False: 16]
  |  |  ------------------
  ------------------
 2000|     16|	RegSet mask;
 2001|     16|	Reg r;
 2002|     16|	RegSP rs;
 2003|     16|	irt_clearmark(ir->t);
  ------------------
  |  |  447|     16|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
 2004|     16|	rs = as->parentmap[i - REF_FIRST];
 2005|     16|	if (!ra_hasspill(regsp_spill(rs)))
  ------------------
  |  |   39|     16|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|     16|#define SPS_NONE		0
  |  |  ------------------
  ------------------
  |  Branch (2005:6): [True: 16, False: 0]
  ------------------
 2006|     16|	  ra_sethint(ir->r, rs);  /* Hint may be gone, set it again. */
  ------------------
  |  |   33|     32|#define ra_sethint(rr, r)	rr = (uint8_t)((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|     16|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2007|      0|	else if (sps_scale(regsp_spill(rs))+spdelta == sps_scale(ir->s))
  ------------------
  |  |  151|      0|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
              	else if (sps_scale(regsp_spill(rs))+spdelta == sps_scale(ir->s))
  ------------------
  |  |  151|      0|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
  |  Branch (2007:11): [True: 0, False: 0]
  ------------------
 2008|      0|	  continue;  /* Same spill slot, do nothing. */
 2009|     16|	mask = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) & allow;
  ------------------
  |  |  616|     32|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|     16|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  ------------------
              	mask = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) & allow;
  ------------------
  |  |  388|     16|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|     32|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|     16|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 16]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|     16|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|     16|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 16]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	mask = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) & allow;
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	mask = ((!LJ_SOFTFP && irt_isfp(ir->t)) ? RSET_FPR : RSET_GPR) & allow;
  ------------------
  |  |   67|     16|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     16|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     16|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     16|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     16|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     16|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     16|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     16|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (2009:11): [Folded - Ignored]
  ------------------
 2010|     16|	if (mask == RSET_EMPTY)
  ------------------
  |  |   71|     16|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2010:6): [True: 0, False: 16]
  ------------------
 2011|      0|	  lj_trace_err(as->J, LJ_TRERR_NYICOAL);
 2012|     16|	r = ra_allocref(as, i, mask);
 2013|     16|	ra_save(as, ir, r);
 2014|     16|	rset_clear(allow, r);
  ------------------
  |  |   76|     16|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|     16|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2015|     16|	if (r == rs) {  /* Coalesce matching registers right now. */
  ------------------
  |  Branch (2015:6): [True: 16, False: 0]
  ------------------
 2016|     16|	  ra_free(as, r);
  ------------------
  |  |  346|     16|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|     16|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     16|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2017|     16|	  rset_clear(live, r);
  ------------------
  |  |   76|     16|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|     16|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2018|     16|	} else if (ra_hasspill(regsp_spill(rs))) {
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2019|      0|	  pass3 = 1;
 2020|      0|	}
 2021|     16|	checkmclim(as);
 2022|     16|      }
 2023|     32|    }
 2024|     16|  }
 2025|       |
 2026|       |  /* Store trace number and adjust stack frame relative to the parent. */
 2027|  10.4k|  emit_setvmstate(as, (int32_t)as->T->traceno);
  ------------------
  |  |  272|  10.4k|  (emit_i32(as, i), emit_opgl(as, XO_MOVmi, 0, vmstate))
  |  |  ------------------
  |  |  |  |   30|  10.4k|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  |  |  ------------------
  |  |                 (emit_i32(as, i), emit_opgl(as, XO_MOVmi, 0, vmstate))
  |  |  ------------------
  |  |  |  |  267|  10.4k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  10.4k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  10.4k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  10.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2028|  10.4k|  emit_spsub(as, spdelta);
  ------------------
  |  |  568|  10.4k|#define emit_spsub(as, ofs)	emit_addptr(as, RID_ESP|REX_64, -(ofs))
  |  |  ------------------
  |  |  |  |   15|  10.4k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  10.4k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2029|       |
 2030|       |#if !LJ_TARGET_X86ORX64
 2031|       |  /* Restore BASE register from parent spill slot. */
 2032|       |  if (ra_hasspill(irp->s))
 2033|       |    emit_spload(as, IR(REF_BASE), IR(REF_BASE)->r, sps_scale(irp->s));
 2034|       |#endif
 2035|       |
 2036|       |  /* Restore target registers from parent spill slots. */
 2037|  10.4k|  if (pass3) {
  ------------------
  |  Branch (2037:7): [True: 0, False: 10.4k]
  ------------------
 2038|      0|    RegSet work = ~as->freeset & RSET_ALL;
  ------------------
  |  |   71|      0|#define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  ------------------
  |  |  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define RSET_ALL	(RSET_GPR|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2039|      0|    while (work) {
  ------------------
  |  Branch (2039:12): [True: 0, False: 0]
  ------------------
 2040|      0|      Reg r = rset_pickbot(work);
  ------------------
  |  |  215|      0|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|      0|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2041|      0|      IRRef ref = regcost_ref(as->cost[r]);
  ------------------
  |  |  128|      0|#define regcost_ref(rc)		((IRRef1)(rc))
  ------------------
 2042|      0|      RegSP rs = as->parentmap[ref - REF_FIRST];
 2043|      0|      rset_clear(work, r);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2044|      0|      if (ra_hasspill(regsp_spill(rs))) {
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2045|      0|	int32_t ofs = sps_scale(regsp_spill(rs));
  ------------------
  |  |  151|      0|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
 2046|      0|	ra_free(as, r);
  ------------------
  |  |  346|      0|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2047|      0|	emit_spload(as, IR(ref), r, ofs);
  ------------------
  |  |  236|      0|  emit_loadofs(as, ir, (r), RID_SP, (ofs))
  ------------------
 2048|      0|	checkmclim(as);
 2049|      0|      }
 2050|      0|    }
 2051|      0|  }
 2052|       |
 2053|       |  /* Shuffle registers to match up target regs with parent regs. */
 2054|  10.7k|  for (;;) {
 2055|  10.7k|    RegSet work;
 2056|       |
 2057|       |    /* Repeatedly coalesce free live registers by moving to their target. */
 2058|  11.2k|    while ((work = as->freeset & live) != RSET_EMPTY) {
  ------------------
  |  |   71|  11.2k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2058:12): [True: 509, False: 10.7k]
  ------------------
 2059|    509|      Reg rp = rset_pickbot(work);
  ------------------
  |  |  215|    509|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|    509|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|    509|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2060|    509|      IRIns *ir = IR(sloadins[rp]);
  ------------------
  |  |  116|    509|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2061|    509|      rset_clear(live, rp);
  ------------------
  |  |   76|    509|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    509|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2062|    509|      rset_clear(allow, rp);
  ------------------
  |  |   76|    509|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    509|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2063|    509|      ra_free(as, ir->r);
  ------------------
  |  |  346|    509|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|    509|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    509|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2064|    509|      emit_movrr(as, ir, ir->r, rp);
 2065|    509|      checkmclim(as);
 2066|    509|    }
 2067|       |
 2068|       |    /* We're done if no live registers remain. */
 2069|  10.7k|    if (live == RSET_EMPTY)
  ------------------
  |  |   71|  10.7k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2069:9): [True: 10.4k, False: 253]
  ------------------
 2070|  10.4k|      break;
 2071|       |
 2072|       |    /* Break cycles by renaming one target to a temp. register. */
 2073|    253|    if (live & RSET_GPR) {
  ------------------
  |  |   67|    253|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    253|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    253|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    253|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    253|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    253|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    253|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    253|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (2073:9): [True: 0, False: 253]
  ------------------
 2074|      0|      RegSet tmpset = as->freeset & ~live & allow & RSET_GPR;
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2075|      0|      if (tmpset == RSET_EMPTY)
  ------------------
  |  |   71|      0|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2075:11): [True: 0, False: 0]
  ------------------
 2076|      0|	lj_trace_err(as->J, LJ_TRERR_NYICOAL);
 2077|      0|      ra_rename(as, rset_pickbot(live & RSET_GPR), rset_pickbot(tmpset));
  ------------------
  |  |  215|      0|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|      0|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    ra_rename(as, rset_pickbot(live & RSET_GPR), rset_pickbot(tmpset));
  ------------------
  |  |  215|      0|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|      0|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|      0|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2078|      0|    }
 2079|    253|    if (!LJ_SOFTFP && (live & RSET_FPR)) {
  ------------------
  |  |  616|    506|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  ------------------
  |  |  |  |  611|    253|#define LJ_ARCH_HASFPU		1
  |  |  ------------------
  ------------------
                  if (!LJ_SOFTFP && (live & RSET_FPR)) {
  ------------------
  |  |   70|    253|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|    253|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    253|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2079:9): [Folded - Ignored]
  |  Branch (2079:23): [True: 253, False: 0]
  ------------------
 2080|    253|      RegSet tmpset = as->freeset & ~live & allow & RSET_FPR;
  ------------------
  |  |   70|    253|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|    253|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    253|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2081|    253|      if (tmpset == RSET_EMPTY)
  ------------------
  |  |   71|    253|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2081:11): [True: 0, False: 253]
  ------------------
 2082|      0|	lj_trace_err(as->J, LJ_TRERR_NYICOAL);
 2083|    253|      ra_rename(as, rset_pickbot(live & RSET_FPR), rset_pickbot(tmpset));
  ------------------
  |  |  215|    253|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|    253|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|    253|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    ra_rename(as, rset_pickbot(live & RSET_FPR), rset_pickbot(tmpset));
  ------------------
  |  |  215|    253|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|    253|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|    253|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2084|    253|    }
 2085|    253|    checkmclim(as);
 2086|       |    /* Continue with coalescing to fix up the broken cycle(s). */
 2087|    253|  }
 2088|       |
 2089|       |  /* Inherit top stack slot already checked by parent trace. */
 2090|  10.4k|  as->T->topslot = as->parent->topslot;
 2091|  10.4k|  if (as->topslot > as->T->topslot) {  /* Need to check for higher slot? */
  ------------------
  |  Branch (2091:7): [True: 901, False: 9.54k]
  ------------------
 2092|       |#ifdef EXITSTATE_CHECKEXIT
 2093|       |    /* Highest exit + 1 indicates stack check. */
 2094|       |    ExitNo exitno = as->T->nsnap;
 2095|       |#else
 2096|       |    /* Reuse the parent exit in the context of the parent trace. */
 2097|    901|    ExitNo exitno = as->J->exitno;
 2098|    901|#endif
 2099|    901|    as->T->topslot = (uint8_t)as->topslot;  /* Remember for child traces. */
 2100|    901|    asm_stack_check(as, as->topslot, irp, pallow, exitno);
 2101|    901|  }
 2102|  10.4k|}
lj_asm.c:asm_stack_adjust:
 1101|  24.6k|{
 1102|  24.6k|  if (as->evenspill <= SPS_FIXED)
  ------------------
  |  |  138|  24.6k|#define SPS_FIXED	2
  ------------------
  |  Branch (1102:7): [True: 13.7k, False: 10.8k]
  ------------------
 1103|  13.7k|    return 0;
 1104|  10.8k|  return sps_scale(sps_align(as->evenspill));
  ------------------
  |  |  151|  10.8k|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
 1105|  24.6k|}
lj_asm.c:asm_head_root:
 1913|  14.1k|{
 1914|  14.1k|  int32_t spadj;
 1915|  14.1k|  asm_head_root_base(as);
 1916|  14.1k|  emit_setvmstate(as, (int32_t)as->T->traceno);
  ------------------
  |  |  272|  14.1k|  (emit_i32(as, i), emit_opgl(as, XO_MOVmi, 0, vmstate))
  |  |  ------------------
  |  |  |  |   30|  14.1k|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  |  |  ------------------
  |  |                 (emit_i32(as, i), emit_opgl(as, XO_MOVmi, 0, vmstate))
  |  |  ------------------
  |  |  |  |  267|  14.1k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  14.1k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  14.1k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  14.1k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1917|  14.1k|  spadj = asm_stack_adjust(as);
 1918|  14.1k|  as->T->spadjust = (uint16_t)spadj;
 1919|  14.1k|  emit_spsub(as, spadj);
  ------------------
  |  |  568|  14.1k|#define emit_spsub(as, ofs)	emit_addptr(as, RID_ESP|REX_64, -(ofs))
  |  |  ------------------
  |  |  |  |   15|  14.1k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  14.1k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1920|       |  /* Root traces assume a checked stack for the starting proto. */
 1921|  14.1k|  as->T->topslot = gcref(as->T->startpt)->pt.framesize;
  ------------------
  |  |   67|  14.1k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
 1922|  14.1k|}
lj_asm.c:asm_phi_fixup:
 1620|  24.6k|{
 1621|  24.6k|  RegSet work = as->phiset;
 1622|  36.4k|  while (work) {
  ------------------
  |  Branch (1622:10): [True: 11.8k, False: 24.6k]
  ------------------
 1623|  11.8k|    Reg r = rset_picktop(work);
  ------------------
  |  |  214|  11.8k|#define rset_picktop(rs)	rset_picktop_(rs)
  |  |  ------------------
  |  |  |  |  120|  11.8k|#define rset_picktop_(rs)	(lj_fls(lj_bswap(rs)) ^ 0x18)
  |  |  |  |  ------------------
  |  |  |  |  |  |  149|  11.8k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1624|  11.8k|    IRRef lref = as->phireg[r];
 1625|  11.8k|    IRIns *ir = IR(lref);
  ------------------
  |  |  116|  11.8k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1626|  11.8k|    if (irt_ismarked(ir->t)) {
  ------------------
  |  |  445|  11.8k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 10.8k, False: 1.01k]
  |  |  ------------------
  ------------------
 1627|  10.8k|      irt_clearmark(ir->t);
  ------------------
  |  |  447|  10.8k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
 1628|       |      /* Left PHI gained a spill slot before the loop? */
 1629|  10.8k|      if (ra_hasspill(ir->s)) {
  ------------------
  |  |   39|  10.8k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|  10.8k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 488, False: 10.3k]
  |  |  ------------------
  ------------------
 1630|    488|	ra_addrename(as, r, lref, as->loopsnapno);
 1631|    488|      }
 1632|  10.8k|    }
 1633|  11.8k|    rset_clear(work, r);
  ------------------
  |  |   76|  11.8k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  11.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1634|  11.8k|  }
 1635|  24.6k|}
lj_asm.c:asm_snap_fixup_mcofs:
 1086|  24.2k|{
 1087|  24.2k|  uint32_t sz = (uint32_t)(as->mctoporig - as->mcp);
 1088|  24.2k|  SnapShot *snap = as->T->snap;
 1089|  24.2k|  SnapNo i;
 1090|   115k|  for (i = as->T->nsnap-1; i > 0; i--) {
  ------------------
  |  Branch (1090:28): [True: 91.1k, False: 24.2k]
  ------------------
 1091|       |    /* Compute offset from mcode start and store in correct snapshot. */
 1092|  91.1k|    snap[i].mcofs = (uint16_t)(sz - snap[i-1].mcofs);
 1093|  91.1k|  }
 1094|  24.2k|  snap[0].mcofs = 0;
 1095|  24.2k|}

lj_asm_patchexit:
 3106|  10.4k|{
 3107|  10.4k|  MCode *p = T->mcode;
 3108|  10.4k|  MCode *mcarea = lj_mcode_patch(J, p, 0);
 3109|  10.4k|  MSize len = T->szmcode;
 3110|  10.4k|  MCode *px = exitstub_addr(J, exitno) - 6;
  ------------------
  |  |  161|  10.4k|  ((MCode *)exitstub_addr_((char **)((J)->exitstubgroup), (exitno)))
  ------------------
 3111|  10.4k|  MCode *pe = p+len-6;
 3112|  10.4k|  MCode *pgc = NULL;
 3113|  10.4k|#if LJ_GC64
 3114|  10.4k|  uint32_t statei = (uint32_t)(GG_OFS(g.vmstate) - GG_OFS(dispatch));
  ------------------
  |  |  111|  10.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  ------------------
                uint32_t statei = (uint32_t)(GG_OFS(g.vmstate) - GG_OFS(dispatch));
  ------------------
  |  |  111|  10.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  ------------------
 3115|       |#else
 3116|       |  uint32_t statei = u32ptr(&J2G(J)->vmstate);
 3117|       |#endif
 3118|  10.4k|  if (len > 5 && p[len-5] == XI_JMP && p+len-6 + *(int32_t *)(p+len-4) == px)
  ------------------
  |  Branch (3118:7): [True: 10.4k, False: 0]
  |  Branch (3118:18): [True: 10.4k, False: 21]
  |  Branch (3118:40): [True: 721, False: 9.70k]
  ------------------
 3119|    721|    *(int32_t *)(p+len-4) = jmprel(J, p+len, target);
 3120|       |  /* Do not patch parent exit for a stack check. Skip beyond vmstate update. */
 3121|  12.0k|  for (; p < pe; p += asm_x86_inslen(p)) {
  ------------------
  |  Branch (3121:10): [True: 12.0k, False: 0]
  ------------------
 3122|  12.0k|    intptr_t ofs = LJ_GC64 ? (p[0] & 0xf0) == 0x40 : LJ_64;
  ------------------
  |  |  562|  12.0k|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  intptr_t ofs = LJ_GC64 ? (p[0] & 0xf0) == 0x40 : LJ_64;
  ------------------
  |  |  640|  12.0k|#define LJ_64			1
  ------------------
 3123|  12.0k|    if (*(uint32_t *)(p+2+ofs) == statei && p[ofs+LJ_GC64-LJ_64] == XI_MOVmi)
  ------------------
  |  |  562|  10.4k|#define LJ_GC64			1
  ------------------
                  if (*(uint32_t *)(p+2+ofs) == statei && p[ofs+LJ_GC64-LJ_64] == XI_MOVmi)
  ------------------
  |  |  640|  10.4k|#define LJ_64			1
  ------------------
  |  Branch (3123:9): [True: 10.4k, False: 1.58k]
  |  Branch (3123:45): [True: 10.4k, False: 0]
  ------------------
 3124|  10.4k|      break;
 3125|  12.0k|  }
 3126|  10.4k|  lj_assertJ(p < pe, "instruction length decoder failed");
  ------------------
  |  |  527|  10.4k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  10.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  10.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 10.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 3127|  1.60M|  for (; p < pe; p += asm_x86_inslen(p)) {
  ------------------
  |  Branch (3127:10): [True: 1.59M, False: 10.4k]
  ------------------
 3128|  1.59M|    if ((*(uint16_t *)p & 0xf0ff) == 0x800f && p + *(int32_t *)(p+2) == px &&
  ------------------
  |  Branch (3128:9): [True: 168k, False: 1.42M]
  |  Branch (3128:48): [True: 80.8k, False: 87.9k]
  ------------------
 3129|  1.59M|	p != pgc) {
  ------------------
  |  Branch (3129:2): [True: 74.7k, False: 6.12k]
  ------------------
 3130|  74.7k|      *(int32_t *)(p+2) = jmprel(J, p+6, target);
 3131|  1.52M|    } else if (*p == XI_CALL &&
  ------------------
  |  Branch (3131:16): [True: 222k, False: 1.30M]
  ------------------
 3132|  1.52M|	      (void *)(p+5+*(int32_t *)(p+1)) == (void *)lj_gc_step_jit) {
  ------------------
  |  Branch (3132:8): [True: 12.2k, False: 210k]
  ------------------
 3133|  12.2k|      pgc = p+7;  /* Do not patch GC check exit. */
 3134|  12.2k|    }
 3135|  1.59M|  }
 3136|  10.4k|  lj_mcode_sync(T->mcode, T->mcode + T->szmcode);
 3137|  10.4k|  lj_mcode_patch(J, mcarea, 1);
 3138|  10.4k|}
lj_asm.c:asm_x86_inslen:
 3051|  1.59M|{
 3052|  1.59M|  uint32_t result = 0;
 3053|  1.59M|  uint32_t prefixes = 0;
 3054|  1.59M|  uint32_t x = map_op1[*p];
 3055|  2.97M|  for (;;) {
 3056|  2.97M|    switch (x >> 4) {
  ------------------
  |  Branch (3056:13): [True: 0, False: 2.97M]
  ------------------
 3057|  41.2k|    case 0: return result + x + (prefixes & 4);
  ------------------
  |  Branch (3057:5): [True: 41.2k, False: 2.93M]
  ------------------
 3058|   995k|    case 1: prefixes |= x; x = map_op1[*++p]; result++; break;
  ------------------
  |  Branch (3058:5): [True: 995k, False: 1.97M]
  ------------------
 3059|   377k|    case 2: x = map_op2[*++p]; break;
  ------------------
  |  Branch (3059:5): [True: 377k, False: 2.59M]
  ------------------
 3060|  16.0k|    case 3: p++; goto mrm;
  ------------------
  |  Branch (3060:5): [True: 16.0k, False: 2.95M]
  ------------------
 3061|   391k|    case 4: result -= (prefixes & 2);  /* fallthrough */
  ------------------
  |  Branch (3061:5): [True: 391k, False: 2.58M]
  ------------------
 3062|   405k|    case 5: return result + (x & 15);
  ------------------
  |  Branch (3062:5): [True: 13.4k, False: 2.95M]
  ------------------
 3063|     32|    case 6:  /* Group 3. */
  ------------------
  |  Branch (3063:5): [True: 32, False: 2.97M]
  ------------------
 3064|     32|      if (p[1] & 0x38) x = 2;
  ------------------
  |  Branch (3064:11): [True: 0, False: 32]
  ------------------
 3065|     32|      else if ((prefixes & 2) && (x == 0x66)) x = 4;
  ------------------
  |  Branch (3065:16): [True: 0, False: 32]
  |  Branch (3065:34): [True: 0, False: 0]
  ------------------
 3066|     32|      goto mrm;
 3067|  38.7k|    case 7: /* VEX c4/c5. */
  ------------------
  |  Branch (3067:5): [True: 38.7k, False: 2.93M]
  ------------------
 3068|  38.7k|      if (LJ_32 && p[1] < 0xc0) {
  ------------------
  |  |  639|  77.4k|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (3068:20): [True: 0, False: 0]
  ------------------
 3069|      0|	x = 2;
 3070|      0|	goto mrm;
 3071|      0|      }
 3072|  38.7k|      if (x == 0x70) {
  ------------------
  |  Branch (3072:11): [True: 38.7k, False: 0]
  ------------------
 3073|  38.7k|	x = *++p & 0x1f;
 3074|  38.7k|	result++;
 3075|  38.7k|	if (x >= 2) {
  ------------------
  |  Branch (3075:6): [True: 38.7k, False: 0]
  ------------------
 3076|  38.7k|	  p += 2;
 3077|  38.7k|	  result += 2;
 3078|  38.7k|	  goto mrm;
 3079|  38.7k|	}
 3080|  38.7k|      }
 3081|      0|      p++;
 3082|      0|      result++;
 3083|      0|      x = map_op2[*++p];
 3084|      0|      break;
 3085|  56.5k|    case 8: result -= (prefixes & 2);  /* fallthrough */
  ------------------
  |  Branch (3085:5): [True: 56.5k, False: 2.91M]
  ------------------
 3086|  1.15M|    case 9: mrm:  /* ModR/M and possibly SIB. */
  ------------------
  |  Branch (3086:5): [True: 1.04M, False: 1.93M]
  ------------------
 3087|  1.15M|      result += (x & 15);
 3088|  1.15M|      x = *++p;
 3089|  1.15M|      switch (x >> 6) {
  ------------------
  |  Branch (3089:15): [True: 0, False: 1.15M]
  ------------------
 3090|  66.9k|      case 0: if ((x & 7) == 5) return result + 4; break;
  ------------------
  |  Branch (3090:7): [True: 66.9k, False: 1.08M]
  |  Branch (3090:19): [True: 0, False: 66.9k]
  ------------------
 3091|   332k|      case 1: result++; break;
  ------------------
  |  Branch (3091:7): [True: 332k, False: 820k]
  ------------------
 3092|   285k|      case 2: result += 4; break;
  ------------------
  |  Branch (3092:7): [True: 285k, False: 867k]
  ------------------
 3093|   467k|      case 3: return result;
  ------------------
  |  Branch (3093:7): [True: 467k, False: 685k]
  ------------------
 3094|  1.15M|      }
 3095|   685k|      if ((x & 7) == 4) {
  ------------------
  |  Branch (3095:11): [True: 222k, False: 462k]
  ------------------
 3096|   222k|	result++;
 3097|   222k|	if (x < 0x40 && (p[1] & 7) == 5) result += 4;
  ------------------
  |  Branch (3097:6): [True: 280, False: 222k]
  |  Branch (3097:18): [True: 0, False: 280]
  ------------------
 3098|   222k|      }
 3099|   685k|      return result;
 3100|  2.97M|    }
 3101|  2.97M|  }
 3102|  1.59M|}
lj_asm.c:asm_setup_target:
 2997|  24.2k|{
 2998|  24.2k|  asm_exitstub_setup(as, as->T->nsnap);
 2999|  24.2k|  as->mrm.base = 0;
 3000|  24.2k|}
lj_asm.c:asm_exitstub_setup:
   44|  24.2k|{
   45|  24.2k|  ExitNo i;
   46|  24.2k|  if (nexits >= EXITSTUBS_PER_GROUP*LJ_MAX_EXITSTUBGR)
  ------------------
  |  |  165|  24.2k|#define EXITSTUBS_PER_GROUP	32
  ------------------
                if (nexits >= EXITSTUBS_PER_GROUP*LJ_MAX_EXITSTUBGR)
  ------------------
  |  |   87|  24.2k|#define LJ_MAX_EXITSTUBGR	16	/* Max. # of exit stub groups. */
  ------------------
  |  Branch (46:7): [True: 0, False: 24.2k]
  ------------------
   47|      0|    lj_trace_err(as->J, LJ_TRERR_SNAPOV);
   48|  48.4k|  for (i = 0; i < (nexits+EXITSTUBS_PER_GROUP-1)/EXITSTUBS_PER_GROUP; i++)
  ------------------
  |  |  165|  48.4k|#define EXITSTUBS_PER_GROUP	32
  ------------------
                for (i = 0; i < (nexits+EXITSTUBS_PER_GROUP-1)/EXITSTUBS_PER_GROUP; i++)
  ------------------
  |  |  165|  48.4k|#define EXITSTUBS_PER_GROUP	32
  ------------------
  |  Branch (48:15): [True: 24.2k, False: 24.2k]
  ------------------
   49|  24.2k|    if (as->J->exitstubgroup[i] == NULL)
  ------------------
  |  Branch (49:9): [True: 3.20k, False: 21.0k]
  ------------------
   50|  3.20k|      as->J->exitstubgroup[i] = asm_exitstub_gen(as, i);
   51|  24.2k|}
lj_asm.c:asm_exitstub_gen:
   10|  3.20k|{
   11|  3.20k|  ExitNo i, groupofs = (group*EXITSTUBS_PER_GROUP) & 0xff;
  ------------------
  |  |  165|  3.20k|#define EXITSTUBS_PER_GROUP	32
  ------------------
   12|  3.20k|  MCode *mxp = as->mcbot;
   13|  3.20k|  MCode *mxpstart = mxp;
   14|  3.20k|  if (mxp + (2+2)*EXITSTUBS_PER_GROUP+8+5 >= as->mctop)
  ------------------
  |  |  165|  3.20k|#define EXITSTUBS_PER_GROUP	32
  ------------------
  |  Branch (14:7): [True: 0, False: 3.20k]
  ------------------
   15|      0|    asm_mclimit(as);
   16|       |  /* Push low byte of exitno for each exit stub. */
   17|  3.20k|  *mxp++ = XI_PUSHi8; *mxp++ = (MCode)groupofs;
   18|   102k|  for (i = 1; i < EXITSTUBS_PER_GROUP; i++) {
  ------------------
  |  |  165|   102k|#define EXITSTUBS_PER_GROUP	32
  ------------------
  |  Branch (18:15): [True: 99.2k, False: 3.20k]
  ------------------
   19|  99.2k|    *mxp++ = XI_JMPs; *mxp++ = (MCode)((2+2)*(EXITSTUBS_PER_GROUP - i) - 2);
  ------------------
  |  |  165|  99.2k|#define EXITSTUBS_PER_GROUP	32
  ------------------
   20|  99.2k|    *mxp++ = XI_PUSHi8; *mxp++ = (MCode)(groupofs + i);
   21|  99.2k|  }
   22|       |  /* Push the high byte of the exitno for each exit stub group. */
   23|  3.20k|  *mxp++ = XI_PUSHi8; *mxp++ = (MCode)((group*EXITSTUBS_PER_GROUP)>>8);
  ------------------
  |  |  165|  3.20k|#define EXITSTUBS_PER_GROUP	32
  ------------------
   24|       |#if !LJ_GC64
   25|       |  /* Store DISPATCH at original stack slot 0. Account for the two push ops. */
   26|       |  *mxp++ = XI_MOVmi;
   27|       |  *mxp++ = MODRM(XM_OFS8, 0, RID_ESP);
   28|       |  *mxp++ = MODRM(XM_SCALE1, RID_ESP, RID_ESP);
   29|       |  *mxp++ = 2*sizeof(void *);
   30|       |  *(int32_t *)mxp = ptr2addr(J2GG(as->J)->dispatch); mxp += 4;
   31|       |#endif
   32|       |  /* Jump to exit handler which fills in the ExitState. */
   33|  3.20k|  *mxp++ = XI_JMP; mxp += 4;
   34|  3.20k|  *((int32_t *)(mxp-4)) = jmprel(as->J, mxp, (MCode *)(void *)lj_vm_exit_handler);
   35|       |  /* Commit the code for this group (even if assembly fails later on). */
   36|  3.20k|  lj_mcode_commitbot(as->J, mxp);
  ------------------
  |  |   26|  3.20k|#define lj_mcode_commitbot(J, m)	(J->mcbot = (m))
  ------------------
   37|  3.20k|  as->mcbot = mxp;
   38|  3.20k|  as->mclim = as->mcbot + MCLIM_REDZONE;
  ------------------
  |  |  135|  3.20k|#define MCLIM_REDZONE	64
  ------------------
   39|  3.20k|  return mxpstart;
   40|  3.20k|}
lj_asm.c:asm_tail_prep:
 2955|  27.2k|{
 2956|  27.2k|  MCode *p = as->mctop;
 2957|       |  /* Realign and leave room for backwards loop branch or exit branch. */
 2958|  27.2k|  if (as->realign) {
  ------------------
  |  Branch (2958:7): [True: 2.59k, False: 24.6k]
  ------------------
 2959|  2.59k|    int i = ((int)(intptr_t)as->realign) & 15;
 2960|       |    /* Fill unused mcode tail with NOPs to make the prefetcher happy. */
 2961|  18.2k|    while (i-- > 0)
  ------------------
  |  Branch (2961:12): [True: 15.6k, False: 2.59k]
  ------------------
 2962|  15.6k|      *--p = XI_NOP;
 2963|  2.59k|    as->mctop = p;
 2964|  2.59k|    p -= (as->loopinv ? 5 : 2);  /* Space for short/near jmp. */
  ------------------
  |  Branch (2964:11): [True: 1.86k, False: 730]
  ------------------
 2965|  24.6k|  } else {
 2966|  24.6k|    p -= 5;  /* Space for exit branch (near jmp). */
 2967|  24.6k|  }
 2968|  27.2k|  if (as->loopref) {
  ------------------
  |  Branch (2968:7): [True: 12.8k, False: 14.3k]
  ------------------
 2969|  12.8k|    as->invmcp = as->mcp = p;
 2970|  14.3k|  } else {
 2971|       |    /* Leave room for ESP adjustment: add esp, imm or lea esp, [esp+imm] */
 2972|  14.3k|    as->mcp = p - (LJ_64 ? 7 : 6);
  ------------------
  |  |  640|  14.3k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2973|  14.3k|    as->invmcp = NULL;
 2974|  14.3k|  }
 2975|  27.2k|}
lj_asm.c:asm_setup_call_slots:
 2981|  51.1k|{
 2982|  51.1k|  IRRef args[CCI_NARGS_MAX*2];
 2983|  51.1k|  int nslots;
 2984|  51.1k|  asm_collectargs(as, ir, ci, args);
 2985|  51.1k|  nslots = asm_count_call_slots(as, ci, args);
 2986|  51.1k|  if (nslots > as->evenspill)  /* Leave room for args in stack slots. */
  ------------------
  |  Branch (2986:7): [True: 0, False: 51.1k]
  ------------------
 2987|      0|    as->evenspill = nslots;
 2988|  51.1k|#if LJ_64
 2989|  51.1k|  return irt_isfp(ir->t) ? REGSP_HINT(RID_FPRET) : REGSP_HINT(RID_RET);
  ------------------
  |  |  388|  51.1k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|   102k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  51.1k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 51.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|  51.1k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  51.1k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 51.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return irt_isfp(ir->t) ? REGSP_HINT(RID_FPRET) : REGSP_HINT(RID_RET);
  ------------------
  |  |   45|      0|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
                return irt_isfp(ir->t) ? REGSP_HINT(RID_FPRET) : REGSP_HINT(RID_RET);
  ------------------
  |  |   45|   102k|#define REGSP_HINT(r)		((r)|RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  51.1k|#define RID_NONE		0x80
  |  |  ------------------
  ------------------
 2990|       |#else
 2991|       |  return irt_isfp(ir->t) ? REGSP_INIT : REGSP_HINT(RID_RET);
 2992|       |#endif
 2993|  51.1k|}
lj_asm.c:asm_count_call_slots:
  524|  51.1k|{
  525|  51.1k|  uint32_t i, nargs = CCI_XNARGS(ci);
  ------------------
  |  |   60|  51.1k|#define CCI_XNARGS(ci)		CCI_NARGS((ci))
  |  |  ------------------
  |  |  |  |   19|  51.1k|#define CCI_NARGS(ci)		((ci)->flags & 0xff)	/* # of args. */
  |  |  ------------------
  ------------------
  526|  51.1k|  int nslots = 0;
  527|  51.1k|#if LJ_64
  528|  51.1k|  if (LJ_ABI_WIN) {
  ------------------
  |  |  662|  51.1k|#define LJ_ABI_WIN		0
  |  |  ------------------
  |  |  |  Branch (662:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  529|      0|    nslots = (int)(nargs*2);  /* Only matters for more than four args. */
  530|  51.1k|  } else {
  531|  51.1k|    int ngpr = REGARG_NUMGPR, nfpr = REGARG_NUMFPR;
  ------------------
  |  |  102|  51.1k|#define REGARG_NUMGPR	6
  ------------------
                  int ngpr = REGARG_NUMGPR, nfpr = REGARG_NUMFPR;
  ------------------
  |  |  103|  51.1k|#define REGARG_NUMFPR	8
  ------------------
  532|   213k|    for (i = 0; i < nargs; i++)
  ------------------
  |  Branch (532:17): [True: 162k, False: 51.1k]
  ------------------
  533|   162k|      if (args[i] && irt_isfp(IR(args[i])->t)) {
  ------------------
  |  |  388|   162k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|   325k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   162k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 19.8k, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|   142k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   142k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 142k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (533:11): [True: 162k, False: 0]
  ------------------
  534|  19.8k|	if (nfpr > 0) nfpr--; else nslots += 2;
  ------------------
  |  Branch (534:6): [True: 19.8k, False: 0]
  ------------------
  535|   142k|      } else {
  536|   142k|	if (ngpr > 0) ngpr--; else nslots += 2;
  ------------------
  |  Branch (536:6): [True: 142k, False: 0]
  ------------------
  537|   142k|      }
  538|  51.1k|  }
  539|       |#else
  540|       |  int ngpr = 0;
  541|       |  if ((ci->flags & CCI_CC_MASK) == CCI_CC_FASTCALL)
  542|       |    ngpr = 2;
  543|       |  else if ((ci->flags & CCI_CC_MASK) == CCI_CC_THISCALL)
  544|       |    ngpr = 1;
  545|       |  for (i = 0; i < nargs; i++)
  546|       |    if (args[i] && irt_isfp(IR(args[i])->t)) {
  547|       |      nslots += irt_isnum(IR(args[i])->t) ? 2 : 1;
  548|       |    } else {
  549|       |      if (ngpr > 0) ngpr--; else nslots++;
  550|       |    }
  551|       |#endif
  552|  51.1k|  return nslots;
  553|  51.1k|}
lj_asm.c:asm_stack_restore:
 2715|  14.3k|{
 2716|  14.3k|  SnapEntry *map = &as->T->snapmap[snap->mapofs];
 2717|  14.3k|#if !LJ_FR2 || defined(LUA_USE_ASSERT)
 2718|  14.3k|  SnapEntry *flinks = &as->T->snapmap[snap_nextofs(as->T, snap)-1-LJ_FR2];
  ------------------
  |  |  569|  14.3k|#define LJ_FR2			1
  ------------------
 2719|  14.3k|#endif
 2720|  14.3k|  MSize n, nent = snap->nent;
 2721|       |  /* Store the value of all modified slots to the Lua stack. */
 2722|  54.0k|  for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (2722:15): [True: 39.6k, False: 14.3k]
  ------------------
 2723|  39.6k|    SnapEntry sn = map[n];
 2724|  39.6k|    BCReg s = snap_slot(sn);
  ------------------
  |  |  221|  39.6k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
 2725|  39.6k|    int32_t ofs = 8*((int32_t)s-1-LJ_FR2);
  ------------------
  |  |  569|  39.6k|#define LJ_FR2			1
  ------------------
 2726|  39.6k|    IRRef ref = snap_ref(sn);
  ------------------
  |  |  220|  39.6k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
 2727|  39.6k|    IRIns *ir = IR(ref);
  ------------------
  |  |  116|  39.6k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2728|  39.6k|    if ((sn & SNAP_NORESTORE))
  ------------------
  |  |  205|  39.6k|#define SNAP_NORESTORE		0x040000	/* No need to restore slot. */
  ------------------
  |  Branch (2728:9): [True: 668, False: 38.9k]
  ------------------
 2729|    668|      continue;
 2730|  38.9k|    if ((sn & SNAP_KEYINDEX)) {
  ------------------
  |  |  207|  38.9k|#define SNAP_KEYINDEX		0x100000	/* Traversal key index. */
  ------------------
  |  Branch (2730:9): [True: 0, False: 38.9k]
  ------------------
 2731|      0|      emit_movmroi(as, RID_BASE, ofs+4, LJ_KEYINDEX);
  ------------------
  |  |  288|      0|#define LJ_KEYINDEX		0xfffe7fffu
  ------------------
 2732|      0|      if (irref_isk(ref)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2733|      0|	emit_movmroi(as, RID_BASE, ofs, ir->i);
 2734|      0|      } else {
 2735|      0|	Reg src = ra_alloc1(as, ref, rset_exclude(RSET_GPR, RID_BASE));
  ------------------
  |  |   77|      0|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2736|      0|	emit_movtomro(as, src, RID_BASE, ofs);
  ------------------
  |  |  263|      0|  emit_rmro(as, XO_MOVto, (r), (base), (ofs))
  ------------------
 2737|      0|      }
 2738|  38.9k|    } else if (irt_isnum(ir->t)) {
  ------------------
  |  |  377|  38.9k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  38.9k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 23.9k, False: 15.0k]
  |  |  ------------------
  ------------------
 2739|  23.9k|      Reg src = ra_alloc1(as, ref, RSET_FPR);
  ------------------
  |  |   70|  23.9k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  23.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  23.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2740|  23.9k|      emit_rmro(as, XO_MOVSDto, src, RID_BASE, ofs);
 2741|  23.9k|    } else {
 2742|  15.0k|      lj_assertA(irt_ispri(ir->t) || irt_isaddr(ir->t) ||
  ------------------
  |  |  111|  15.0k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  15.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  44.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 696, False: 14.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 14.3k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  15.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2743|  15.0k|		 (LJ_DUALNUM && irt_isinteger(ir->t)),
 2744|  15.0k|		 "restore of IR type %d", irt_type(ir->t));
 2745|  15.0k|      if (!irref_isk(ref)) {
  ------------------
  |  |  485|  15.0k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (2745:11): [True: 1.69k, False: 13.3k]
  ------------------
 2746|  1.69k|	Reg src = ra_alloc1(as, ref, rset_exclude(RSET_GPR, RID_BASE));
  ------------------
  |  |   77|  1.69k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.69k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2747|  1.69k|#if LJ_GC64
 2748|  1.69k|	if (irt_is64(ir->t)) {
  ------------------
  |  |  409|  1.69k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  1.69k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  1.69k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  1.69k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  1.69k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  1.69k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 1.69k, False: 0]
  |  |  ------------------
  ------------------
 2749|       |	  /* TODO: 64 bit store + 32 bit load-modify-store is suboptimal. */
 2750|  1.69k|	  emit_u32(as, irt_toitype(ir->t) << 15);
  ------------------
  |  |   31|  1.69k|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 2751|  1.69k|	  emit_rmro(as, XO_ARITHi, XOg_OR, RID_BASE, ofs+4);
 2752|  1.69k|	} else if (LJ_DUALNUM && irt_isinteger(ir->t)) {
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	} else if (LJ_DUALNUM && irt_isinteger(ir->t)) {
  ------------------
  |  |  389|      0|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|      0|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2753|      0|	  emit_movmroi(as, RID_BASE, ofs+4, LJ_TISNUM << 15);
  ------------------
  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  ------------------
  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  ------------------
 2754|      0|	} else {
 2755|      0|	  emit_movmroi(as, RID_BASE, ofs+4, (irt_toitype(ir->t)<<15)|0x7fff);
  ------------------
  |  |  442|      0|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 2756|      0|	}
 2757|  1.69k|#endif
 2758|  1.69k|	emit_movtomro(as, REX_64IR(ir, src), RID_BASE, ofs);
  ------------------
  |  |  263|  3.39k|  emit_rmro(as, XO_MOVto, (r), (base), (ofs))
  |  |  ------------------
  |  |  |  Branch (263:28): [True: 1.69k, False: 0]
  |  |  ------------------
  ------------------
 2759|  1.69k|#if LJ_GC64
 2760|  13.3k|      } else {
 2761|  13.3k|	TValue k;
 2762|  13.3k|	lj_ir_kvalue(as->J->L, &k, ir);
 2763|  13.3k|	if (tvisnil(&k)) {
  ------------------
  |  |  782|  13.3k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 696, False: 12.6k]
  |  |  ------------------
  ------------------
 2764|    696|	  emit_i32(as, -1);
  ------------------
  |  |   30|    696|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 2765|    696|	  emit_rmro(as, XO_MOVmi, REX_64, RID_BASE, ofs);
  ------------------
  |  |   15|    696|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|    696|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 2766|  12.6k|	} else {
 2767|  12.6k|	  emit_movmroi(as, RID_BASE, ofs+4, k.u32.hi);
 2768|  12.6k|	  emit_movmroi(as, RID_BASE, ofs, k.u32.lo);
 2769|  12.6k|	}
 2770|       |#else
 2771|       |      } else if (!irt_ispri(ir->t)) {
 2772|       |	emit_movmroi(as, RID_BASE, ofs, ir->i);
 2773|       |#endif
 2774|  13.3k|      }
 2775|  15.0k|      if ((sn & (SNAP_CONT|SNAP_FRAME))) {
  ------------------
  |  |  204|  15.0k|#define SNAP_CONT		0x020000	/* Continuation slot. */
  ------------------
                    if ((sn & (SNAP_CONT|SNAP_FRAME))) {
  ------------------
  |  |  203|  15.0k|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
  |  Branch (2775:11): [True: 0, False: 15.0k]
  ------------------
 2776|       |#if !LJ_FR2
 2777|       |	if (s != 0)  /* Do not overwrite link to previous frame. */
 2778|       |	  emit_movmroi(as, RID_BASE, ofs+4, (int32_t)(*flinks--));
 2779|       |#endif
 2780|       |#if !LJ_GC64
 2781|       |      } else {
 2782|       |	if (!(LJ_64 && irt_islightud(ir->t)))
 2783|       |	  emit_movmroi(as, RID_BASE, ofs+4, irt_toitype(ir->t));
 2784|       |#endif
 2785|      0|      }
 2786|  15.0k|    }
 2787|  38.9k|    checkmclim(as);
 2788|  38.9k|  }
 2789|  14.3k|  lj_assertA(map + nent == flinks, "inconsistent frames in snapshot");
  ------------------
  |  |  111|  14.3k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  14.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  14.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 14.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  14.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2790|  14.3k|}
lj_asm.c:asm_stack_check:
 2687|  2.02k|{
 2688|       |  /* Try to get an unused temp. register, otherwise spill/restore eax. */
 2689|  2.02k|  Reg pbase = irp ? irp->r : RID_BASE;
  ------------------
  |  Branch (2689:15): [True: 901, False: 1.12k]
  ------------------
 2690|  2.02k|  Reg r = allow ? rset_pickbot(allow) : RID_EAX;
  ------------------
  |  |  215|  2.02k|#define rset_pickbot(rs)	rset_pickbot_(rs)
  |  |  ------------------
  |  |  |  |   67|  2.02k|#define rset_pickbot_(rs)	((Reg)lj_ffs(rs))
  |  |  |  |  ------------------
  |  |  |  |  |  |  148|  2.02k|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2690:11): [True: 2.02k, False: 0]
  ------------------
 2691|  2.02k|  emit_jcc(as, CC_B, exitstub_addr(as->J, exitno));
  ------------------
  |  |  161|  2.02k|  ((MCode *)exitstub_addr_((char **)((J)->exitstubgroup), (exitno)))
  ------------------
 2692|  2.02k|  if (allow == RSET_EMPTY)  /* Restore temp. register. */
  ------------------
  |  |   71|  2.02k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2692:7): [True: 0, False: 2.02k]
  ------------------
 2693|      0|    emit_rmro(as, XO_MOV, r|REX_64, RID_ESP, 0);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 2694|  2.02k|  else
 2695|  2.02k|    ra_modified(as, r);
  ------------------
  |  |  347|  2.02k|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|  2.02k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  2.02k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2696|  2.02k|  emit_gri(as, XG_ARITHi(XOg_CMP), r|REX_GC64, (int32_t)(8*topslot));
  ------------------
  |  |  323|  2.02k|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|  2.02k|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
                emit_gri(as, XG_ARITHi(XOg_CMP), r|REX_GC64, (int32_t)(8*topslot));
  ------------------
  |  |   24|  2.02k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  2.02k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  2.02k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2697|  2.02k|  if (ra_hasreg(pbase) && pbase != r)
  ------------------
  |  |   28|  4.05k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  2.02k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 1.58k, False: 446]
  |  |  ------------------
  ------------------
  |  Branch (2697:27): [True: 1.58k, False: 0]
  ------------------
 2698|  1.58k|    emit_rr(as, XO_ARITH(XOg_SUB), r|REX_GC64, pbase);
  ------------------
  |  |  327|  1.58k|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
                  emit_rr(as, XO_ARITH(XOg_SUB), r|REX_GC64, pbase);
  ------------------
  |  |   24|  1.58k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  1.58k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  1.58k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2699|    446|  else
 2700|    446|#if LJ_GC64
 2701|    446|    emit_rmro(as, XO_ARITH(XOg_SUB), r|REX_64, RID_DISPATCH,
  ------------------
  |  |  327|    446|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
                  emit_rmro(as, XO_ARITH(XOg_SUB), r|REX_64, RID_DISPATCH,
  ------------------
  |  |   15|    446|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|    446|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 2702|    446|	      (int32_t)dispofs(as, &J2G(as->J)->jit_base));
  ------------------
  |  |  296|    446|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|    446|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|    446|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2703|       |#else
 2704|       |    emit_rmro(as, XO_ARITH(XOg_SUB), r, RID_NONE,
 2705|       |	      ptr2addr(&J2G(as->J)->jit_base));
 2706|       |#endif
 2707|  2.02k|  emit_rmro(as, XO_MOV, r|REX_GC64, r, offsetof(lua_State, maxstack));
  ------------------
  |  |   24|  2.02k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  2.02k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  2.02k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2708|  2.02k|  emit_getgl(as, r, cur_L);
  ------------------
  |  |  268|  2.02k|#define emit_getgl(as, r, field) emit_opgl(as, XO_MOV, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  2.02k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  2.02k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  2.02k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  2.02k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2709|  2.02k|  if (allow == RSET_EMPTY)  /* Spill temp. register. */
  ------------------
  |  |   71|  2.02k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (2709:7): [True: 0, False: 2.02k]
  ------------------
 2710|      0|    emit_rmro(as, XO_MOVto, r|REX_64, RID_ESP, 0);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 2711|  2.02k|}
lj_asm.c:asm_loop_fixup:
 2828|  12.8k|{
 2829|  12.8k|  MCode *p = as->mctop;
 2830|  12.8k|  MCode *target = as->mcp;
 2831|  12.8k|  if (as->realign) {  /* Realigned loops use short jumps. */
  ------------------
  |  Branch (2831:7): [True: 2.59k, False: 10.2k]
  ------------------
 2832|  2.59k|    as->realign = NULL;  /* Stop another retry. */
 2833|  2.59k|    lj_assertA(((intptr_t)target & 15) == 0, "loop realign failed");
  ------------------
  |  |  111|  2.59k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  2.59k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.59k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.59k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.59k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2834|  2.59k|    if (as->loopinv) {  /* Inverted loop branch? */
  ------------------
  |  Branch (2834:9): [True: 1.86k, False: 730]
  ------------------
 2835|  1.86k|      p -= 5;
 2836|  1.86k|      p[0] = XI_JMP;
 2837|  1.86k|      lj_assertA(target - p >= -128, "loop realign failed");
  ------------------
  |  |  111|  1.86k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.86k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.86k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.86k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.86k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2838|  1.86k|      p[-1] = (MCode)(target - p);  /* Patch sjcc. */
 2839|  1.86k|      if (as->loopinv == 2)
  ------------------
  |  Branch (2839:11): [True: 0, False: 1.86k]
  ------------------
 2840|      0|	p[-3] = (MCode)(target - p + 2);  /* Patch opt. short jp. */
 2841|  1.86k|    } else {
 2842|    730|      lj_assertA(target - p >= -128, "loop realign failed");
  ------------------
  |  |  111|    730|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    730|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    730|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 730, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    730|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2843|    730|      p[-1] = (MCode)(int8_t)(target - p);  /* Patch short jmp. */
 2844|    730|      p[-2] = XI_JMPs;
 2845|    730|    }
 2846|  10.2k|  } else {
 2847|  10.2k|    MCode *newloop;
 2848|  10.2k|    p[-5] = XI_JMP;
 2849|  10.2k|    if (as->loopinv) {  /* Inverted loop branch? */
  ------------------
  |  Branch (2849:9): [True: 9.28k, False: 974]
  ------------------
 2850|       |      /* asm_guardcc already inverted the jcc and patched the jmp. */
 2851|  9.28k|      p -= 5;
 2852|  9.28k|      newloop = target+4;
 2853|  9.28k|      *(int32_t *)(p-4) = (int32_t)(target - p);  /* Patch jcc. */
 2854|  9.28k|      if (as->loopinv == 2) {
  ------------------
  |  Branch (2854:11): [True: 0, False: 9.28k]
  ------------------
 2855|      0|	*(int32_t *)(p-10) = (int32_t)(target - p + 6);  /* Patch opt. jp. */
 2856|      0|	newloop = target+8;
 2857|      0|      }
 2858|  9.28k|    } else {  /* Otherwise just patch jmp. */
 2859|    974|      *(int32_t *)(p-4) = (int32_t)(target - p);
 2860|    974|      newloop = target+3;
 2861|    974|    }
 2862|       |    /* Realign small loops and shorten the loop branch. */
 2863|  10.2k|    if (newloop >= p - 128) {
  ------------------
  |  Branch (2863:9): [True: 2.59k, False: 7.66k]
  ------------------
 2864|  2.59k|      as->realign = newloop;  /* Force a retry and remember alignment. */
 2865|  2.59k|      as->curins = as->stopins;  /* Abort asm_trace now. */
 2866|  2.59k|      as->T->nins = as->orignins;  /* Remove any added renames. */
 2867|  2.59k|    }
 2868|  10.2k|  }
 2869|  12.8k|}
lj_asm.c:asm_hiop:
 2616|    803|{
 2617|       |  /* HIOP is marked as a store because it needs its own DCE logic. */
 2618|    803|  int uselo = ra_used(ir-1), usehi = ra_used(ir);  /* Loword/hiword used? */
  ------------------
  |  |  351|    803|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  1.60k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|    803|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 803, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                int uselo = ra_used(ir-1), usehi = ra_used(ir);  /* Loword/hiword used? */
  ------------------
  |  |  351|    803|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  1.60k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|    803|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 315, False: 488]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|    488|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|    488|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 488, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2619|    803|  if (LJ_UNLIKELY(!(as->flags & JIT_F_OPT_DCE))) uselo = usehi = 1;
  ------------------
  |  |  146|    803|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 803]
  |  |  ------------------
  ------------------
 2620|       |#if LJ_32 && LJ_HASFFI
 2621|       |  if ((ir-1)->o == IR_CONV) {  /* Conversions to/from 64 bit. */
 2622|       |    as->curins--;  /* Always skip the CONV. */
 2623|       |    if (usehi || uselo)
 2624|       |      asm_conv64(as, ir);
 2625|       |    return;
 2626|       |  } else if ((ir-1)->o <= IR_NE) {  /* 64 bit integer comparisons. ORDER IR. */
 2627|       |    asm_comp_int64(as, ir);
 2628|       |    return;
 2629|       |  } else if ((ir-1)->o == IR_XSTORE) {
 2630|       |    if ((ir-1)->r != RID_SINK)
 2631|       |      asm_fxstore(as, ir);
 2632|       |    return;
 2633|       |  }
 2634|       |#endif
 2635|    803|  if (!usehi) return;  /* Skip unused hiword op for all remaining ops. */
  ------------------
  |  Branch (2635:7): [True: 0, False: 803]
  ------------------
 2636|    803|  switch ((ir-1)->o) {
 2637|       |#if LJ_32 && LJ_HASFFI
 2638|       |  case IR_ADD:
 2639|       |    as->flagmcp = NULL;
 2640|       |    as->curins--;
 2641|       |    asm_intarith(as, ir, XOg_ADC);
 2642|       |    asm_intarith(as, ir-1, XOg_ADD);
 2643|       |    break;
 2644|       |  case IR_SUB:
 2645|       |    as->flagmcp = NULL;
 2646|       |    as->curins--;
 2647|       |    asm_intarith(as, ir, XOg_SBB);
 2648|       |    asm_intarith(as, ir-1, XOg_SUB);
 2649|       |    break;
 2650|       |  case IR_NEG: {
 2651|       |    Reg dest = ra_dest(as, ir, RSET_GPR);
 2652|       |    emit_rr(as, XO_GROUP3, XOg_NEG, dest);
 2653|       |    emit_i8(as, 0);
 2654|       |    emit_rr(as, XO_ARITHi8, XOg_ADC, dest);
 2655|       |    ra_left(as, dest, ir->op1);
 2656|       |    as->curins--;
 2657|       |    asm_neg_not(as, ir-1, XOg_NEG);
 2658|       |    break;
 2659|       |    }
 2660|       |  case IR_CNEWI:
 2661|       |    /* Nothing to do here. Handled by CNEWI itself. */
 2662|       |    break;
 2663|       |#endif
 2664|    803|  case IR_CALLN: case IR_CALLL: case IR_CALLS: case IR_CALLXS:
  ------------------
  |  Branch (2664:3): [True: 0, False: 803]
  |  Branch (2664:18): [True: 803, False: 0]
  |  Branch (2664:33): [True: 0, False: 803]
  |  Branch (2664:48): [True: 0, False: 803]
  ------------------
 2665|    803|    if (!uselo)
  ------------------
  |  Branch (2665:9): [True: 0, False: 803]
  ------------------
 2666|      0|      ra_allocref(as, ir->op1, RID2RSET(RID_RETLO));  /* Mark lo op as used. */
  ------------------
  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
 2667|    803|    break;
 2668|      0|  default: lj_assertA(0, "bad HIOP for op %d", (ir-1)->o); break;
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2668:3): [True: 0, False: 803]
  ------------------
 2669|    803|  }
 2670|    803|}
lj_asm.c:asm_guardcc:
   58|   245k|{
   59|   245k|  MCode *target = exitstub_addr(as->J, as->snapno);
  ------------------
  |  |  161|   245k|  ((MCode *)exitstub_addr_((char **)((J)->exitstubgroup), (exitno)))
  ------------------
   60|   245k|  MCode *p = as->mcp;
   61|   245k|  if (LJ_UNLIKELY(p == as->invmcp)) {
  ------------------
  |  |  146|   245k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 11.1k, False: 233k]
  |  |  ------------------
  ------------------
   62|  11.1k|    as->loopinv = 1;
   63|  11.1k|    *(int32_t *)(p+1) = jmprel(as->J, p+5, target);
   64|  11.1k|    target = p;
   65|  11.1k|    cc ^= 1;
   66|  11.1k|    if (as->realign) {
  ------------------
  |  Branch (66:9): [True: 1.86k, False: 9.28k]
  ------------------
   67|  1.86k|      if (LJ_GC64 && LJ_UNLIKELY(as->mrm.base == RID_RIP))
  ------------------
  |  |  562|  3.73k|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_GC64 && LJ_UNLIKELY(as->mrm.base == RID_RIP))
  ------------------
  |  |  146|  1.86k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.86k]
  |  |  ------------------
  ------------------
   68|      0|	as->mrm.ofs += 2;  /* Fixup RIP offset for pending fused load. */
   69|  1.86k|      emit_sjcc(as, cc, target);
   70|  1.86k|      return;
   71|  1.86k|    }
   72|  11.1k|  }
   73|   243k|  if (LJ_GC64 && LJ_UNLIKELY(as->mrm.base == RID_RIP))
  ------------------
  |  |  562|   486k|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_GC64 && LJ_UNLIKELY(as->mrm.base == RID_RIP))
  ------------------
  |  |  146|   243k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 243k]
  |  |  ------------------
  ------------------
   74|      0|    as->mrm.ofs += 6;  /* Fixup RIP offset for pending fused load. */
   75|   243k|  emit_jcc(as, cc, target);
   76|   243k|}
lj_asm.c:asm_comp:
 2381|   119k|{
 2382|   119k|  uint32_t cc = asm_compmap[ir->o];
 2383|   119k|  if (irt_isnum(ir->t)) {
  ------------------
  |  |  377|   119k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|   119k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 8.79k, False: 110k]
  |  |  ------------------
  ------------------
 2384|  8.79k|    IRRef lref = ir->op1;
 2385|  8.79k|    IRRef rref = ir->op2;
 2386|  8.79k|    Reg left, right;
 2387|  8.79k|    MCLabel l_around;
 2388|       |    /*
 2389|       |    ** An extra CC_P branch is required to preserve ordered/unordered
 2390|       |    ** semantics for FP comparisons. This can be avoided by swapping
 2391|       |    ** the operands and inverting the condition (except for EQ and UNE).
 2392|       |    ** So always try to swap if possible.
 2393|       |    **
 2394|       |    ** Another option would be to swap operands to achieve better memory
 2395|       |    ** operand fusion. But it's unlikely that this outweighs the cost
 2396|       |    ** of the extra branches.
 2397|       |    */
 2398|  8.79k|    if (cc & VCC_S) {  /* Swap? */
  ------------------
  |  | 2359|  8.79k|#define VCC_S	0x4000		/* Swap avoids CC_P branch. */
  ------------------
  |  Branch (2398:9): [True: 7.39k, False: 1.40k]
  ------------------
 2399|  7.39k|      IRRef tmp = lref; lref = rref; rref = tmp;
 2400|  7.39k|      cc ^= (VCC_PS|(5<<4));  /* A <-> B, AE <-> BE, PS <-> none */
  ------------------
  |  | 2360|  7.39k|#define VCC_PS	(VCC_P|VCC_S)
  |  |  ------------------
  |  |  |  | 2358|  7.39k|#define VCC_P	0x2000		/* Needs extra CC_P branch. */
  |  |  ------------------
  |  |               #define VCC_PS	(VCC_P|VCC_S)
  |  |  ------------------
  |  |  |  | 2359|  7.39k|#define VCC_S	0x4000		/* Swap avoids CC_P branch. */
  |  |  ------------------
  ------------------
 2401|  7.39k|    }
 2402|  8.79k|    left = ra_alloc1(as, lref, RSET_FPR);
  ------------------
  |  |   70|  8.79k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  8.79k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  8.79k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2403|  8.79k|    l_around = emit_label(as);
  ------------------
  |  |  472|  8.79k|#define emit_label(as)		((as)->mcp)
  ------------------
 2404|  8.79k|    asm_guardcc(as, cc >> 4);
 2405|  8.79k|    if (cc & VCC_P) {  /* Extra CC_P branch required? */
  ------------------
  |  | 2358|  8.79k|#define VCC_P	0x2000		/* Needs extra CC_P branch. */
  ------------------
  |  Branch (2405:9): [True: 749, False: 8.05k]
  ------------------
 2406|    749|      if (!(cc & VCC_U)) {
  ------------------
  |  | 2357|    749|#define VCC_U	0x1000		/* Unordered. */
  ------------------
  |  Branch (2406:11): [True: 497, False: 252]
  ------------------
 2407|    497|	asm_guardcc(as, CC_P);  /* Branch to exit for ordered comparisons. */
 2408|    497|      } else if (l_around != as->invmcp) {
  ------------------
  |  Branch (2408:18): [True: 252, False: 0]
  ------------------
 2409|    252|	emit_sjcc(as, CC_P, l_around);  /* Branch around for unordered. */
 2410|    252|      } else {
 2411|       |	/* Patched to mcloop by asm_loop_fixup. */
 2412|      0|	as->loopinv = 2;
 2413|      0|	if (as->realign)
  ------------------
  |  Branch (2413:6): [True: 0, False: 0]
  ------------------
 2414|      0|	  emit_sjcc(as, CC_P, as->mcp);
 2415|      0|	else
 2416|      0|	  emit_jcc(as, CC_P, as->mcp);
 2417|      0|      }
 2418|    749|    }
 2419|  8.79k|    right = asm_fuseload(as, rref, rset_exclude(RSET_FPR, left));
  ------------------
  |  |   77|  8.79k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  8.79k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2420|  8.79k|    emit_mrm(as, XO_UCOMISD, left, right);
 2421|   110k|  } else {
 2422|   110k|    IRRef lref = ir->op1, rref = ir->op2;
 2423|   110k|    IROp leftop = (IROp)(IR(lref)->o);
  ------------------
  |  |  116|   110k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2424|   110k|    Reg r64 = REX_64IR(ir, 0);
  ------------------
  |  |  525|   110k|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|   110k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|   110k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|   110k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|   110k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|   110k|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   110k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 54.5k, False: 55.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|  54.5k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  54.5k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2425|   110k|    int32_t imm = 0;
 2426|   110k|    lj_assertA(irt_is64(ir->t) || irt_isint(ir->t) ||
  ------------------
  |  |  111|   110k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   110k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   496k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 54.5k, False: 55.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 55.6k, False: 78]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 78]
  |  |  |  |  |  |  |  Branch (355:5): [True: 78, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   110k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2427|   110k|	       irt_isu32(ir->t) || irt_isaddr(ir->t) || irt_isu8(ir->t),
 2428|   110k|	       "bad comparison data type %d", irt_type(ir->t));
 2429|       |    /* Swap constants (only for ABC) and fusable loads to the right. */
 2430|   110k|    if (irref_isk(lref) || (!irref_isk(rref) && opisfusableload(leftop))) {
  ------------------
  |  |  485|   220k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
                  if (irref_isk(lref) || (!irref_isk(rref) && opisfusableload(leftop))) {
  ------------------
  |  |  485|   220k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
                  if (irref_isk(lref) || (!irref_isk(rref) && opisfusableload(leftop))) {
  ------------------
  |  |  131|  23.0k|  ((o) == IR_ALOAD || (o) == IR_HLOAD || (o) == IR_ULOAD || \
  |  |  ------------------
  |  |  |  Branch (131:4): [True: 36, False: 23.0k]
  |  |  |  Branch (131:23): [True: 0, False: 23.0k]
  |  |  |  Branch (131:42): [True: 0, False: 23.0k]
  |  |  ------------------
  |  |  132|  23.0k|   (o) == IR_FLOAD || (o) == IR_XLOAD || (o) == IR_SLOAD || (o) == IR_VLOAD)
  |  |  ------------------
  |  |  |  Branch (132:4): [True: 3.32k, False: 19.7k]
  |  |  |  Branch (132:23): [True: 0, False: 19.7k]
  |  |  |  Branch (132:42): [True: 2.24k, False: 17.4k]
  |  |  |  Branch (132:61): [True: 0, False: 17.4k]
  |  |  ------------------
  ------------------
  |  Branch (2430:29): [True: 23.0k, False: 87.1k]
  ------------------
 2431|  5.59k|      if ((cc & 0xc) == 0xc) cc ^= 0x53;  /* L <-> G, LE <-> GE */
  ------------------
  |  Branch (2431:11): [True: 165, False: 5.43k]
  ------------------
 2432|  5.43k|      else if ((cc & 0xa) == 0x2) cc ^= 0x55;  /* A <-> B, AE <-> BE */
  ------------------
  |  Branch (2432:16): [True: 3.15k, False: 2.27k]
  ------------------
 2433|  5.59k|      lref = ir->op2; rref = ir->op1;
 2434|  5.59k|    }
 2435|   110k|    if (asm_isk32(as, rref, &imm)) {
  ------------------
  |  Branch (2435:9): [True: 57.2k, False: 52.9k]
  ------------------
 2436|  57.2k|      IRIns *irl = IR(lref);
  ------------------
  |  |  116|  57.2k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2437|       |      /* Check wether we can use test ins. Not for unsigned, since CF=0. */
 2438|  57.2k|      int usetest = (imm == 0 && (cc & 0xa) != 0x2);
  ------------------
  |  Branch (2438:22): [True: 5.62k, False: 51.6k]
  |  Branch (2438:34): [True: 5.62k, False: 0]
  ------------------
 2439|  57.2k|      if (usetest && irl->o == IR_BAND && irl+1 == ir && !ra_used(irl)) {
  ------------------
  |  |  351|      0|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2439:11): [True: 5.62k, False: 51.6k]
  |  Branch (2439:22): [True: 0, False: 5.62k]
  |  Branch (2439:43): [True: 0, False: 0]
  ------------------
 2440|       |	/* Combine comp(BAND(ref, r/imm), 0) into test mrm, r/imm. */
 2441|      0|	Reg right, left = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
 2442|      0|	RegSet allow = RSET_GPR;
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2443|      0|	if (!asm_isk32(as, irl->op2, &imm)) {
  ------------------
  |  Branch (2443:6): [True: 0, False: 0]
  ------------------
 2444|      0|	  left = ra_alloc1(as, irl->op2, allow);
 2445|      0|	  rset_clear(allow, left);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2446|      0|	} else {  /* Try to Fuse IRT_I8/IRT_U8 loads, too. See below. */
 2447|      0|	  IRIns *irll = IR(irl->op1);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2448|      0|	  if (opisfusableload((IROp)irll->o) &&
  ------------------
  |  |  131|      0|  ((o) == IR_ALOAD || (o) == IR_HLOAD || (o) == IR_ULOAD || \
  |  |  ------------------
  |  |  |  Branch (131:4): [True: 0, False: 0]
  |  |  |  Branch (131:23): [True: 0, False: 0]
  |  |  |  Branch (131:42): [True: 0, False: 0]
  |  |  ------------------
  |  |  132|      0|   (o) == IR_FLOAD || (o) == IR_XLOAD || (o) == IR_SLOAD || (o) == IR_VLOAD)
  |  |  ------------------
  |  |  |  Branch (132:4): [True: 0, False: 0]
  |  |  |  Branch (132:23): [True: 0, False: 0]
  |  |  |  Branch (132:42): [True: 0, False: 0]
  |  |  |  Branch (132:61): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2449|      0|	      (irt_isi8(irll->t) || irt_isu8(irll->t))) {
  ------------------
  |  |  379|      0|#define irt_isi8(t)		(irt_type(t) == IRT_I8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (379:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	      (irt_isi8(irll->t) || irt_isu8(irll->t))) {
  ------------------
  |  |  380|      0|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2450|      0|	    IRType1 origt = irll->t;  /* Temporarily flip types. */
 2451|      0|	    irll->t.irt = (irll->t.irt & ~IRT_TYPE) | IRT_INT;
 2452|      0|	    as->curins--;  /* Skip to BAND to avoid failing in noconflict(). */
 2453|      0|	    right = asm_fuseload(as, irl->op1, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2454|      0|	    as->curins++;
 2455|      0|	    irll->t = origt;
 2456|      0|	    if (right != RID_MRM) goto test_nofuse;
  ------------------
  |  Branch (2456:10): [True: 0, False: 0]
  ------------------
 2457|       |	    /* Fusion succeeded, emit test byte mrm, imm8. */
 2458|      0|	    asm_guardcc(as, cc);
 2459|      0|	    emit_i8(as, (imm & 0xff));
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 2460|      0|	    emit_mrm(as, XO_GROUP3b, XOg_TEST, RID_MRM);
 2461|      0|	    return;
 2462|      0|	  }
 2463|      0|	}
 2464|      0|	as->curins--;  /* Skip to BAND to avoid failing in noconflict(). */
 2465|      0|	right = asm_fuseloadm(as, irl->op1, allow, r64);
 2466|      0|	as->curins++;  /* Undo the above. */
 2467|      0|      test_nofuse:
 2468|      0|	asm_guardcc(as, cc);
 2469|      0|	if (ra_noreg(left)) {
  ------------------
  |  |   27|      0|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2470|      0|	  emit_i32(as, imm);
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 2471|      0|	  emit_mrm(as, XO_GROUP3, r64 + XOg_TEST, right);
 2472|      0|	} else {
 2473|      0|	  emit_mrm(as, XO_TEST, r64 + left, right);
 2474|      0|	}
 2475|  57.2k|      } else {
 2476|  57.2k|	Reg left;
 2477|  57.2k|	if (opisfusableload((IROp)irl->o) &&
  ------------------
  |  |  131|   114k|  ((o) == IR_ALOAD || (o) == IR_HLOAD || (o) == IR_ULOAD || \
  |  |  ------------------
  |  |  |  Branch (131:4): [True: 0, False: 57.2k]
  |  |  |  Branch (131:23): [True: 0, False: 57.2k]
  |  |  |  Branch (131:42): [True: 0, False: 57.2k]
  |  |  ------------------
  |  |  132|  57.2k|   (o) == IR_FLOAD || (o) == IR_XLOAD || (o) == IR_SLOAD || (o) == IR_VLOAD)
  |  |  ------------------
  |  |  |  Branch (132:4): [True: 14.5k, False: 42.7k]
  |  |  |  Branch (132:23): [True: 0, False: 42.7k]
  |  |  |  Branch (132:42): [True: 348, False: 42.3k]
  |  |  |  Branch (132:61): [True: 0, False: 42.3k]
  |  |  ------------------
  ------------------
 2478|  57.2k|	    ((irt_isu8(irl->t) && checku8(imm)) ||
  ------------------
  |  |  380|  29.7k|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|  14.8k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
              	    ((irt_isu8(irl->t) && checku8(imm)) ||
  ------------------
  |  |  102|      0|#define checku8(x)	((x) == (int32_t)(uint8_t)(x))
  |  |  ------------------
  |  |  |  Branch (102:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2479|  14.8k|	     ((irt_isi8(irl->t) || irt_isi16(irl->t)) && checki8(imm)) ||
  ------------------
  |  |  379|  29.7k|#define irt_isi8(t)		(irt_type(t) == IRT_I8)
  |  |  ------------------
  |  |  |  |  365|  14.8k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (379:22): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
              	     ((irt_isi8(irl->t) || irt_isi16(irl->t)) && checki8(imm)) ||
  ------------------
  |  |  381|  14.8k|#define irt_isi16(t)		(irt_type(t) == IRT_I16)
  |  |  ------------------
  |  |  |  |  365|  14.8k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (381:23): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
              	     ((irt_isi8(irl->t) || irt_isi16(irl->t)) && checki8(imm)) ||
  ------------------
  |  |  101|      0|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2480|  14.8k|	     (irt_isu16(irl->t) && checku16(imm) && checki8((int16_t)imm)))) {
  ------------------
  |  |  382|  29.7k|#define irt_isu16(t)		(irt_type(t) == IRT_U16)
  |  |  ------------------
  |  |  |  |  365|  14.8k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (382:23): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
              	     (irt_isu16(irl->t) && checku16(imm) && checki8((int16_t)imm)))) {
  ------------------
  |  |  104|  14.8k|#define checku16(x)	((x) == (int32_t)(uint16_t)(x))
  |  |  ------------------
  |  |  |  Branch (104:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	     (irt_isu16(irl->t) && checku16(imm) && checki8((int16_t)imm)))) {
  ------------------
  |  |  101|      0|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2481|       |	  /* Only the IRT_INT case is fused by asm_fuseload.
 2482|       |	  ** The IRT_I8/IRT_U8 loads and some IRT_I16/IRT_U16 loads
 2483|       |	  ** are handled here.
 2484|       |	  ** Note that cmp word [mem], imm16 should not be generated,
 2485|       |	  ** since it has a length-changing prefix. Compares of a word
 2486|       |	  ** against a sign-extended imm8 are ok, however.
 2487|       |	  */
 2488|      0|	  IRType1 origt = irl->t;  /* Temporarily flip types. */
 2489|      0|	  irl->t.irt = (irl->t.irt & ~IRT_TYPE) | IRT_INT;
 2490|      0|	  left = asm_fuseload(as, lref, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2491|      0|	  irl->t = origt;
 2492|      0|	  if (left == RID_MRM) {  /* Fusion succeeded? */
  ------------------
  |  Branch (2492:8): [True: 0, False: 0]
  ------------------
 2493|      0|	    if (irt_isu8(irl->t) || irt_isu16(irl->t))
  ------------------
  |  |  380|      0|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    if (irt_isu8(irl->t) || irt_isu16(irl->t))
  ------------------
  |  |  382|      0|#define irt_isu16(t)		(irt_type(t) == IRT_U16)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (382:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2494|      0|	      cc >>= 4;  /* Need unsigned compare. */
 2495|      0|	    asm_guardcc(as, cc);
 2496|      0|	    emit_i8(as, imm);
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 2497|      0|	    emit_mrm(as, (irt_isi8(origt) || irt_isu8(origt)) ?
  ------------------
  |  |  379|      0|#define irt_isi8(t)		(irt_type(t) == IRT_I8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (379:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    emit_mrm(as, (irt_isi8(origt) || irt_isu8(origt)) ?
  ------------------
  |  |  380|      0|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2498|      0|			 XO_ARITHib : XO_ARITHiw8, r64 + XOg_CMP, RID_MRM);
 2499|      0|	    return;
 2500|      0|	  }  /* Otherwise handle register case as usual. */
 2501|  57.2k|	} else {
 2502|  57.2k|	  left = asm_fuseloadm(as, lref,
 2503|  57.2k|			       irt_isu8(ir->t) ? RSET_GPR8 : RSET_GPR, r64);
  ------------------
  |  |  380|  57.2k|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|  57.2k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 57.2k]
  |  |  ------------------
  ------------------
              			       irt_isu8(ir->t) ? RSET_GPR8 : RSET_GPR, r64);
  ------------------
  |  |   76|      0|#define RSET_GPR8	RSET_GPR
  |  |  ------------------
  |  |  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              			       irt_isu8(ir->t) ? RSET_GPR8 : RSET_GPR, r64);
  ------------------
  |  |   67|  57.2k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  57.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  57.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  57.2k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  57.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  57.2k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  57.2k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  57.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2504|  57.2k|	}
 2505|  57.2k|	asm_guardcc(as, cc);
 2506|  57.2k|	if (usetest && left != RID_MRM) {
  ------------------
  |  Branch (2506:6): [True: 5.62k, False: 51.6k]
  |  Branch (2506:17): [True: 4.04k, False: 1.58k]
  ------------------
 2507|       |	  /* Use test r,r instead of cmp r,0. */
 2508|  4.04k|	  x86Op xo = XO_TEST;
 2509|  4.04k|	  if (irt_isu8(ir->t)) {
  ------------------
  |  |  380|  4.04k|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|  4.04k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 4.04k]
  |  |  ------------------
  ------------------
 2510|      0|	    lj_assertA(ir->o == IR_EQ || ir->o == IR_NE, "bad usage");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2511|      0|	    xo = XO_TESTb;
 2512|      0|	    if (!rset_test(RSET_RANGE(RID_EAX, RID_EBX+1), left)) {
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (2512:10): [True: 0, False: 0]
  ------------------
 2513|      0|	      if (LJ_64) {
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2514|      0|		left |= FORCE_REX;
  ------------------
  |  |   14|      0|#define FORCE_REX		0x200
  ------------------
 2515|      0|	      } else {
 2516|      0|		emit_i32(as, 0xff);
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 2517|      0|		emit_mrm(as, XO_GROUP3, XOg_TEST, left);
 2518|      0|		return;
 2519|      0|	      }
 2520|      0|	    }
 2521|      0|	  }
 2522|  4.04k|	  emit_rr(as, xo, r64 + left, left);
 2523|  4.04k|	  if (irl+1 == ir)  /* Referencing previous ins? */
  ------------------
  |  Branch (2523:8): [True: 4.04k, False: 0]
  ------------------
 2524|  4.04k|	    as->flagmcp = as->mcp;  /* Set flag to drop test r,r if possible. */
 2525|  53.2k|	} else {
 2526|  53.2k|	  emit_gmrmi(as, XG_ARITHi(XOg_CMP), r64 + left, imm);
  ------------------
  |  |  323|  53.2k|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|  53.2k|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
 2527|  53.2k|	}
 2528|  57.2k|      }
 2529|  57.2k|    } else {
 2530|  52.9k|      Reg left = ra_alloc1(as, lref, RSET_GPR);
  ------------------
  |  |   67|  52.9k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  52.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  52.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  52.9k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  52.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  52.9k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  52.9k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  52.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2531|  52.9k|      Reg right = asm_fuseloadm(as, rref, rset_exclude(RSET_GPR, left), r64);
  ------------------
  |  |   77|  52.9k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  52.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2532|  52.9k|      asm_guardcc(as, cc);
 2533|  52.9k|      emit_mrm(as, XO_CMP, r64 + left, right);
 2534|  52.9k|    }
 2535|   110k|  }
 2536|   119k|}
lj_asm.c:asm_fuseload:
  420|   235k|{
  421|   235k|  IRIns *ir = IR(ref);
  ------------------
  |  |  116|   235k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  422|   235k|  if (ra_hasreg(ir->r)) {
  ------------------
  |  |   28|   235k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|   235k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 71.4k, False: 164k]
  |  |  ------------------
  ------------------
  423|  71.4k|    if (allow != RSET_EMPTY) {  /* Fast path. */
  ------------------
  |  |   71|  71.4k|#define RSET_EMPTY		((RegSet)0)
  ------------------
  |  Branch (423:9): [True: 71.4k, False: 0]
  ------------------
  424|  71.4k|      ra_noweak(as, ir->r);
  ------------------
  |  |  349|  71.4k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|  71.4k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  71.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  425|  71.4k|      return ir->r;
  426|  71.4k|    }
  427|      0|  fusespill:
  428|       |    /* Force a spill if only memory operands are allowed (asm_x87load). */
  429|      0|    as->mrm.base = RID_ESP;
  430|      0|    as->mrm.ofs = ra_spill(as, ir);
  431|      0|    as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  432|      0|    return RID_MRM;
  433|  71.4k|  }
  434|   164k|  if (ir->o == IR_KNUM) {
  ------------------
  |  Branch (434:7): [True: 40.9k, False: 123k]
  ------------------
  435|  40.9k|    RegSet avail = as->freeset & ~as->modset & RSET_FPR;
  ------------------
  |  |   70|  40.9k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  40.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  40.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  436|  40.9k|    lj_assertA(allow != RSET_EMPTY, "no register allowed");
  ------------------
  |  |  111|  40.9k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  40.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  40.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 40.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  40.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  437|  40.9k|    if (!(avail & (avail-1)))  /* Fuse if less than two regs available. */
  ------------------
  |  Branch (437:9): [True: 33.9k, False: 6.99k]
  ------------------
  438|  33.9k|      return asm_fuseloadk64(as, ir);
  439|   123k|  } else if (ref == REF_BASE || ir->o == IR_KINT64) {
  ------------------
  |  Branch (439:14): [True: 33, False: 123k]
  |  Branch (439:33): [True: 0, False: 123k]
  ------------------
  440|     33|    RegSet avail = as->freeset & ~as->modset & RSET_GPR;
  ------------------
  |  |   67|     33|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     33|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     33|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     33|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     33|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     33|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     33|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     33|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  441|     33|    lj_assertA(allow != RSET_EMPTY, "no register allowed");
  ------------------
  |  |  111|     33|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     33|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     33|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 33, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     33|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  442|     33|    if (!(avail & (avail-1))) {  /* Fuse if less than two regs available. */
  ------------------
  |  Branch (442:9): [True: 0, False: 33]
  ------------------
  443|      0|      if (ref == REF_BASE) {
  ------------------
  |  Branch (443:11): [True: 0, False: 0]
  ------------------
  444|      0|#if LJ_GC64
  445|      0|	as->mrm.ofs = (int32_t)dispofs(as, &J2G(as->J)->jit_base);
  ------------------
  |  |  296|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  446|      0|	as->mrm.base = RID_DISPATCH;
  447|       |#else
  448|       |	as->mrm.ofs = ptr2addr(&J2G(as->J)->jit_base);
  449|       |	as->mrm.base = RID_NONE;
  450|       |#endif
  451|      0|	as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  452|      0|	return RID_MRM;
  453|      0|      } else {
  454|      0|	return asm_fuseloadk64(as, ir);
  455|      0|      }
  456|      0|    }
  457|   123k|  } else if (mayfuse(as, ref)) {
  ------------------
  |  |  127|   123k|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 112k, False: 10.4k]
  |  |  ------------------
  ------------------
  458|   112k|    RegSet xallow = (allow & RSET_GPR) ? allow : RSET_GPR;
  ------------------
  |  |   67|   112k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|   112k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   112k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|   112k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|   112k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|   112k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|   112k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|   112k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
                  RegSet xallow = (allow & RSET_GPR) ? allow : RSET_GPR;
  ------------------
  |  |   67|  44.8k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  44.8k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  44.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  44.8k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  44.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  44.8k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  44.8k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  44.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  |  Branch (458:21): [True: 67.7k, False: 44.8k]
  ------------------
  459|   112k|    if (ir->o == IR_SLOAD) {
  ------------------
  |  Branch (459:9): [True: 12.7k, False: 99.8k]
  ------------------
  460|  12.7k|      if (!(ir->op2 & (IRSLOAD_PARENT|IRSLOAD_CONVERT)) &&
  ------------------
  |  |  233|  12.7k|#define IRSLOAD_PARENT		0x01	/* Coalesce with parent trace. */
  ------------------
                    if (!(ir->op2 & (IRSLOAD_PARENT|IRSLOAD_CONVERT)) &&
  ------------------
  |  |  236|  12.7k|#define IRSLOAD_CONVERT		0x08	/* Number to integer conversion. */
  ------------------
  |  Branch (460:11): [True: 12.2k, False: 501]
  ------------------
  461|  12.7k|	  noconflict(as, ref, IR_RETF, 2) &&
  ------------------
  |  Branch (461:4): [True: 5.73k, False: 6.50k]
  ------------------
  462|  12.7k|	  !(LJ_GC64 && irt_isaddr(ir->t))) {
  ------------------
  |  |  562|  11.4k|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  !(LJ_GC64 && irt_isaddr(ir->t))) {
  ------------------
  |  |  391|  5.73k|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|  5.73k|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 2.23k, False: 3.50k]
  |  |  ------------------
  ------------------
  463|  3.50k|	as->mrm.base = (uint8_t)ra_alloc1(as, REF_BASE, xallow);
  464|  3.50k|	as->mrm.ofs = 8*((int32_t)ir->op1-1-LJ_FR2) +
  ------------------
  |  |  569|  3.50k|#define LJ_FR2			1
  ------------------
  465|  3.50k|		      (!LJ_FR2 && (ir->op2 & IRSLOAD_FRAME) ? 4 : 0);
  ------------------
  |  |  569|  7.00k|#define LJ_FR2			1
  ------------------
              		      (!LJ_FR2 && (ir->op2 & IRSLOAD_FRAME) ? 4 : 0);
  ------------------
  |  |  234|      0|#define IRSLOAD_FRAME		0x02	/* Load 32 bits of ftsz. */
  ------------------
  |  Branch (465:10): [Folded - Ignored]
  |  Branch (465:21): [True: 0, False: 0]
  ------------------
  466|  3.50k|	as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  3.50k|#define RID_NONE		0x80
  ------------------
  467|  3.50k|	return RID_MRM;
  468|  3.50k|      }
  469|  99.8k|    } else if (ir->o == IR_FLOAD) {
  ------------------
  |  Branch (469:16): [True: 12.1k, False: 87.6k]
  ------------------
  470|       |      /* Generic fusion is only ok for 32 bit operand (but see asm_comp). */
  471|  12.1k|      if ((irt_isint(ir->t) || irt_isu32(ir->t) || irt_isaddr(ir->t)) &&
  ------------------
  |  |  378|  24.3k|#define irt_isint(t)		(irt_type(t) == IRT_INT)
  |  |  ------------------
  |  |  |  |  365|  12.1k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (378:23): [True: 10.6k, False: 1.49k]
  |  |  ------------------
  ------------------
                    if ((irt_isint(ir->t) || irt_isu32(ir->t) || irt_isaddr(ir->t)) &&
  ------------------
  |  |  383|  13.6k|#define irt_isu32(t)		(irt_type(t) == IRT_U32)
  |  |  ------------------
  |  |  |  |  365|  1.49k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (383:23): [True: 0, False: 1.49k]
  |  |  ------------------
  ------------------
                    if ((irt_isint(ir->t) || irt_isu32(ir->t) || irt_isaddr(ir->t)) &&
  ------------------
  |  |  391|  1.49k|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|  1.49k|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 1.49k, False: 0]
  |  |  ------------------
  ------------------
  472|  12.1k|	  noconflict(as, ref, IR_FSTORE, 2)) {
  ------------------
  |  Branch (472:4): [True: 11.9k, False: 174]
  ------------------
  473|  11.9k|	asm_fusefref(as, ir, xallow);
  474|  11.9k|	return RID_MRM;
  475|  11.9k|      }
  476|  87.6k|    } else if (ir->o == IR_ALOAD || ir->o == IR_HLOAD || ir->o == IR_ULOAD) {
  ------------------
  |  Branch (476:16): [True: 57, False: 87.6k]
  |  Branch (476:37): [True: 0, False: 87.6k]
  |  Branch (476:58): [True: 0, False: 87.6k]
  ------------------
  477|     57|      if (noconflict(as, ref, ir->o + IRDELTA_L2S, 2+(ir->o != IR_ULOAD)) &&
  ------------------
  |  |  170|     57|#define IRDELTA_L2S		((int)IR_ASTORE - (int)IR_ALOAD)
  ------------------
  |  Branch (477:11): [True: 57, False: 0]
  ------------------
  478|     57|	  !(LJ_GC64 && irt_isaddr(ir->t))) {
  ------------------
  |  |  562|    114|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  !(LJ_GC64 && irt_isaddr(ir->t))) {
  ------------------
  |  |  391|     57|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|     57|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 0, False: 57]
  |  |  ------------------
  ------------------
  479|     57|	asm_fuseahuref(as, ir->op1, xallow);
  480|     57|	return RID_MRM;
  481|     57|      }
  482|  87.6k|    } else if (ir->o == IR_XLOAD) {
  ------------------
  |  Branch (482:16): [True: 0, False: 87.6k]
  ------------------
  483|       |      /* Generic fusion is not ok for 8/16 bit operands (but see asm_comp).
  484|       |      ** Fusing unaligned memory operands is ok on x86 (except for SIMD types).
  485|       |      */
  486|      0|      if ((!irt_typerange(ir->t, IRT_I8, IRT_U16)) &&
  ------------------
  |  |  368|      0|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  ------------------
  |  Branch (486:11): [True: 0, False: 0]
  ------------------
  487|      0|	  noconflict(as, ref, IR_XSTORE, 2)) {
  ------------------
  |  Branch (487:4): [True: 0, False: 0]
  ------------------
  488|      0|	asm_fusexref(as, ir->op1, xallow);
  489|      0|	return RID_MRM;
  490|      0|      }
  491|  87.6k|    } else if (ir->o == IR_VLOAD && IR(ir->op1)->o == IR_AREF &&
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (491:16): [True: 0, False: 87.6k]
  |  Branch (491:37): [True: 0, False: 0]
  ------------------
  492|  87.6k|	       !(LJ_GC64 && irt_isaddr(ir->t))) {
  ------------------
  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	       !(LJ_GC64 && irt_isaddr(ir->t))) {
  ------------------
  |  |  391|      0|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|      0|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  493|      0|      asm_fuseahuref(as, ir->op1, xallow);
  494|      0|      as->mrm.ofs += 8 * ir->op2;
  495|      0|      return RID_MRM;
  496|      0|    }
  497|   112k|  }
  498|   114k|  if (ir->o == IR_FLOAD && ir->op1 == REF_NIL) {
  ------------------
  |  Branch (498:7): [True: 1.81k, False: 112k]
  |  Branch (498:28): [True: 0, False: 1.81k]
  ------------------
  499|      0|    asm_fusefref(as, ir, RSET_EMPTY);
  ------------------
  |  |   71|      0|#define RSET_EMPTY		((RegSet)0)
  ------------------
  500|      0|    return RID_MRM;
  501|      0|  }
  502|   114k|  if (!(as->freeset & allow) && !emit_canremat(ref) &&
  ------------------
  |  |  571|   114k|#define emit_canremat(ref)	((ref) <= REF_BASE)
  ------------------
  |  Branch (502:7): [True: 0, False: 114k]
  |  Branch (502:33): [True: 0, False: 0]
  ------------------
  503|   114k|      (allow == RSET_EMPTY || ra_hasspill(ir->s) || iscrossref(as, ref)))
  ------------------
  |  |   71|      0|#define RSET_EMPTY		((RegSet)0)
  ------------------
                    (allow == RSET_EMPTY || ra_hasspill(ir->s) || iscrossref(as, ref)))
  ------------------
  |  |   39|      0|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|      0|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    (allow == RSET_EMPTY || ra_hasspill(ir->s) || iscrossref(as, ref)))
  ------------------
  |  |  123|      0|#define iscrossref(as, ref)	((ref) < as->sectref)
  |  |  ------------------
  |  |  |  Branch (123:29): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (503:8): [True: 0, False: 0]
  ------------------
  504|      0|    goto fusespill;
  505|   114k|  return ra_allocref(as, ref, allow);
  506|   114k|}
lj_asm.c:asm_fuseloadk64:
  380|  33.9k|{
  381|  33.9k|  const uint64_t *k = &ir_k64(ir)->u64;
  ------------------
  |  |  594|  33.9k|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|  33.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  33.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  67.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 33.9k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  33.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  382|  33.9k|  if (!LJ_GC64 || checki32((intptr_t)k)) {
  ------------------
  |  |  562|  67.9k|#define LJ_GC64			1
  ------------------
                if (!LJ_GC64 || checki32((intptr_t)k)) {
  ------------------
  |  |  105|  33.9k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 33.9k]
  |  |  ------------------
  ------------------
  |  Branch (382:7): [Folded - Ignored]
  ------------------
  383|      0|    as->mrm.ofs = ptr2addr(k);
  384|      0|    as->mrm.base = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  385|      0|#if LJ_GC64
  386|  33.9k|  } else if (checki32(dispofs(as, k))) {
  ------------------
  |  |  105|  33.9k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 33.9k, False: 0]
  |  |  ------------------
  ------------------
  387|  33.9k|    as->mrm.ofs = (int32_t)dispofs(as, k);
  ------------------
  |  |  296|  33.9k|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|  33.9k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  33.9k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  388|  33.9k|    as->mrm.base = RID_DISPATCH;
  389|  33.9k|  } else if (checki32(mcpofs(as, k)) && checki32(mcpofs(as, k+1)) &&
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                } else if (checki32(mcpofs(as, k)) && checki32(mcpofs(as, k+1)) &&
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  390|      0|	     checki32(mctopofs(as, k)) && checki32(mctopofs(as, k+1))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	     checki32(mctopofs(as, k)) && checki32(mctopofs(as, k+1))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  391|      0|    as->mrm.ofs = (int32_t)mcpofs(as, k);
  ------------------
  |  |  298|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)as->mcp))
  ------------------
  392|      0|    as->mrm.base = RID_RIP;
  393|      0|  } else {  /* Intern 64 bit constant at bottom of mcode. */
  394|      0|    if (ir->i) {
  ------------------
  |  Branch (394:9): [True: 0, False: 0]
  ------------------
  395|      0|      lj_assertA(*k == *(uint64_t*)(as->mctop - ir->i),
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  396|      0|		 "bad interned 64 bit constant");
  397|      0|    } else {
  398|      0|      while ((uintptr_t)as->mcbot & 7) *as->mcbot++ = XI_INT3;
  ------------------
  |  Branch (398:14): [True: 0, False: 0]
  ------------------
  399|      0|      *(uint64_t*)as->mcbot = *k;
  400|      0|      ir->i = (int32_t)(as->mctop - as->mcbot);
  401|      0|      as->mcbot += 8;
  402|      0|      as->mclim = as->mcbot + MCLIM_REDZONE;
  ------------------
  |  |  135|      0|#define MCLIM_REDZONE	64
  ------------------
  403|      0|      lj_mcode_commitbot(as->J, as->mcbot);
  ------------------
  |  |   26|      0|#define lj_mcode_commitbot(J, m)	(J->mcbot = (m))
  ------------------
  404|      0|    }
  405|      0|    as->mrm.ofs = (int32_t)mcpofs(as, as->mctop - ir->i);
  ------------------
  |  |  298|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)as->mcp))
  ------------------
  406|      0|    as->mrm.base = RID_RIP;
  407|      0|#endif
  408|      0|  }
  409|  33.9k|  as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  33.9k|#define RID_NONE		0x80
  ------------------
  410|  33.9k|  return RID_MRM;
  411|  33.9k|}
lj_asm.c:noconflict:
  113|  24.5k|{
  114|  24.5k|  IRIns *ir = as->ir;
  115|  24.5k|  IRRef i = as->curins;
  116|  24.5k|  if (i > ref + CONFLICT_SEARCH_LIM)
  ------------------
  |  |   81|  24.5k|#define CONFLICT_SEARCH_LIM	31
  ------------------
  |  Branch (116:7): [True: 0, False: 24.5k]
  ------------------
  117|      0|    return 0;  /* Give up, ref is too far away. */
  118|  76.2k|  while (--i > ref) {
  ------------------
  |  Branch (118:10): [True: 58.3k, False: 17.8k]
  ------------------
  119|  58.3k|    if (ir[i].o == conflict)
  ------------------
  |  Branch (119:9): [True: 0, False: 58.3k]
  ------------------
  120|      0|      return 0;  /* Conflict found. */
  121|  58.3k|    else if ((check & 1) && (ir[i].o == IR_NEWREF || ir[i].o == IR_CALLS))
  ------------------
  |  Branch (121:14): [True: 6, False: 58.3k]
  |  Branch (121:30): [True: 0, False: 6]
  |  Branch (121:54): [True: 0, False: 6]
  ------------------
  122|      0|      return 0;
  123|  58.3k|    else if ((check & 2) && (ir[i].op1 == ref || ir[i].op2 == ref))
  ------------------
  |  Branch (123:14): [True: 57.8k, False: 532]
  |  Branch (123:30): [True: 4.52k, False: 53.3k]
  |  Branch (123:50): [True: 2.15k, False: 51.1k]
  ------------------
  124|  6.68k|      return 0;
  125|  58.3k|  }
  126|  17.8k|  return 1;  /* Ok, no conflict. */
  127|  24.5k|}
lj_asm.c:asm_fusefref:
  243|  47.6k|{
  244|  47.6k|  lj_assertA(ir->o == IR_FLOAD || ir->o == IR_FREF,
  ------------------
  |  |  111|  47.6k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  47.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  47.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 47.6k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  47.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  245|  47.6k|	     "bad IR op %d", ir->o);
  246|  47.6k|  as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  47.6k|#define RID_NONE		0x80
  ------------------
  247|  47.6k|  if (ir->op1 == REF_NIL) {  /* FLOAD from GG_State with offset. */
  ------------------
  |  Branch (247:7): [True: 3.08k, False: 44.5k]
  ------------------
  248|  3.08k|#if LJ_GC64
  249|  3.08k|    as->mrm.ofs = (int32_t)(ir->op2 << 2) - GG_OFS(dispatch);
  ------------------
  |  |  111|  3.08k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  ------------------
  250|  3.08k|    as->mrm.base = RID_DISPATCH;
  251|       |#else
  252|       |    as->mrm.ofs = (int32_t)(ir->op2 << 2) + ptr2addr(J2GG(as->J));
  253|       |    as->mrm.base = RID_NONE;
  254|       |#endif
  255|  3.08k|    return;
  256|  3.08k|  }
  257|  44.5k|  as->mrm.ofs = field_ofs[ir->op2];
  258|  44.5k|  if (irref_isk(ir->op1)) {
  ------------------
  |  |  485|  44.5k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 739, False: 43.8k]
  |  |  ------------------
  ------------------
  259|    739|    IRIns *op1 = IR(ir->op1);
  ------------------
  |  |  116|    739|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  260|    739|#if LJ_GC64
  261|    739|    if (ir->op1 == REF_NIL) {
  ------------------
  |  Branch (261:9): [True: 0, False: 739]
  ------------------
  262|      0|      as->mrm.ofs -= GG_OFS(dispatch);
  ------------------
  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  ------------------
  263|      0|      as->mrm.base = RID_DISPATCH;
  264|      0|      return;
  265|    739|    } else if (op1->o == IR_KPTR || op1->o == IR_KKPTR) {
  ------------------
  |  Branch (265:16): [True: 0, False: 739]
  |  Branch (265:37): [True: 0, False: 739]
  ------------------
  266|      0|      intptr_t ofs = dispofs(as, ir_kptr(op1));
  ------------------
  |  |  296|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (296:27): [True: 0, False: 0]
  |  |  |  Branch (296:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  267|      0|      if (checki32(as->mrm.ofs + ofs)) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  268|      0|	as->mrm.ofs += (int32_t)ofs;
  269|      0|	as->mrm.base = RID_DISPATCH;
  270|      0|	return;
  271|      0|      }
  272|      0|    }
  273|       |#else
  274|       |    as->mrm.ofs += op1->i;
  275|       |    as->mrm.base = RID_NONE;
  276|       |    return;
  277|       |#endif
  278|    739|  }
  279|  44.5k|  as->mrm.base = (uint8_t)ra_alloc1(as, ir->op1, allow);
  280|  44.5k|}
lj_asm.c:asm_fuseahuref:
  185|  18.7k|{
  186|  18.7k|  IRIns *ir = IR(ref);
  ------------------
  |  |  116|  18.7k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  187|  18.7k|  if (ra_noreg(ir->r)) {
  ------------------
  |  |   27|  18.7k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  18.7k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 17.0k, False: 1.66k]
  |  |  ------------------
  ------------------
  188|  17.0k|    switch ((IROp)ir->o) {
  189|  2.96k|    case IR_AREF:
  ------------------
  |  Branch (189:5): [True: 2.96k, False: 14.1k]
  ------------------
  190|  2.96k|      if (mayfuse(as, ref)) {
  ------------------
  |  |  127|  2.96k|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 2.92k, False: 40]
  |  |  ------------------
  ------------------
  191|  2.92k|	asm_fusearef(as, ir, allow);
  192|  2.92k|	return;
  193|  2.92k|      }
  194|     40|      break;
  195|  12.6k|    case IR_HREFK:
  ------------------
  |  Branch (195:5): [True: 12.6k, False: 4.43k]
  ------------------
  196|  12.6k|      if (mayfuse(as, ref)) {
  ------------------
  |  |  127|  12.6k|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 11.8k, False: 834]
  |  |  ------------------
  ------------------
  197|  11.8k|	as->mrm.base = (uint8_t)ra_alloc1(as, ir->op1, allow);
  198|  11.8k|	as->mrm.ofs = (int32_t)(IR(ir->op2)->op2 * sizeof(Node));
  ------------------
  |  |  116|  11.8k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  199|  11.8k|	as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  11.8k|#define RID_NONE		0x80
  ------------------
  200|  11.8k|	return;
  201|  11.8k|      }
  202|    834|      break;
  203|    834|    case IR_UREFC:
  ------------------
  |  Branch (203:5): [True: 0, False: 17.0k]
  ------------------
  204|      0|      if (irref_isk(ir->op1)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  205|      0|	GCfunc *fn = ir_kfunc(IR(ir->op1));
  ------------------
  |  |  590|      0|#define ir_kfunc(ir)	(gco2func(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  769|      0|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  206|      0|	GCupval *uv = &gcref(fn->l.uvptr[(ir->op2 >> 8)])->uv;
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  207|      0|#if LJ_GC64
  208|      0|	int64_t ofs = dispofs(as, &uv->tv);
  ------------------
  |  |  296|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  209|      0|	if (checki32(ofs) && checki32(ofs+4)) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (checki32(ofs) && checki32(ofs+4)) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  210|      0|	  as->mrm.ofs = (int32_t)ofs;
  211|      0|	  as->mrm.base = RID_DISPATCH;
  212|      0|	  as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  213|      0|	  return;
  214|      0|	}
  215|       |#else
  216|       |	as->mrm.ofs = ptr2addr(&uv->tv);
  217|       |	as->mrm.base = as->mrm.idx = RID_NONE;
  218|       |	return;
  219|       |#endif
  220|      0|      }
  221|      0|      break;
  222|      0|    case IR_TMPREF:
  ------------------
  |  Branch (222:5): [True: 0, False: 17.0k]
  ------------------
  223|      0|#if LJ_GC64
  224|      0|      as->mrm.ofs = (int32_t)dispofs(as, &J2G(as->J)->tmptv);
  ------------------
  |  |  296|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  225|      0|      as->mrm.base = RID_DISPATCH;
  226|      0|      as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  227|       |#else
  228|       |      as->mrm.ofs = igcptr(&J2G(as->J)->tmptv);
  229|       |      as->mrm.base = as->mrm.idx = RID_NONE;
  230|       |#endif
  231|      0|      return;
  232|  1.46k|    default:
  ------------------
  |  Branch (232:5): [True: 1.46k, False: 15.6k]
  ------------------
  233|  1.46k|      break;
  234|  17.0k|    }
  235|  17.0k|  }
  236|  4.00k|  as->mrm.base = (uint8_t)ra_alloc1(as, ref, allow);
  237|  4.00k|  as->mrm.ofs = 0;
  238|  4.00k|  as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  4.00k|#define RID_NONE		0x80
  ------------------
  239|  4.00k|}
lj_asm.c:asm_fusearef:
  154|  2.94k|{
  155|  2.94k|  IRIns *irx;
  156|  2.94k|  lj_assertA(ir->o == IR_AREF, "expected AREF");
  ------------------
  |  |  111|  2.94k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  2.94k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.94k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.94k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.94k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  157|  2.94k|  as->mrm.base = (uint8_t)ra_alloc1(as, asm_fuseabase(as, ir->op1), allow);
  158|  2.94k|  irx = IR(ir->op2);
  ------------------
  |  |  116|  2.94k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  159|  2.94k|  if (irref_isk(ir->op2)) {
  ------------------
  |  |  485|  2.94k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 302, False: 2.64k]
  |  |  ------------------
  ------------------
  160|    302|    as->mrm.ofs += 8*irx->i;
  161|    302|    as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|    302|#define RID_NONE		0x80
  ------------------
  162|  2.64k|  } else {
  163|  2.64k|    rset_clear(allow, as->mrm.base);
  ------------------
  |  |   76|  2.64k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  2.64k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  164|  2.64k|    as->mrm.scale = XM_SCALE8;
  165|       |    /* Fuse a constant ADD (e.g. t[i+1]) into the offset.
  166|       |    ** Doesn't help much without ABCelim, but reduces register pressure.
  167|       |    */
  168|  2.64k|    if (!LJ_64 &&  /* Has bad effects with negative index on x64. */
  ------------------
  |  |  640|  5.29k|#define LJ_64			1
  ------------------
  |  Branch (168:9): [Folded - Ignored]
  ------------------
  169|  2.64k|	mayfuse(as, ir->op2) && ra_noreg(irx->r) &&
  ------------------
  |  |  127|  2.64k|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	mayfuse(as, ir->op2) && ra_noreg(irx->r) &&
  ------------------
  |  |   27|  2.64k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  170|  2.64k|	irx->o == IR_ADD && irref_isk(irx->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (170:2): [True: 0, False: 0]
  ------------------
  171|      0|      as->mrm.ofs += 8*IR(irx->op2)->i;
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  172|      0|      as->mrm.idx = (uint8_t)ra_alloc1(as, irx->op1, allow);
  173|  2.64k|    } else {
  174|  2.64k|      as->mrm.idx = (uint8_t)ra_alloc1(as, ir->op2, allow);
  175|  2.64k|    }
  176|  2.64k|  }
  177|  2.94k|}
lj_asm.c:asm_fuseabase:
  131|  2.94k|{
  132|  2.94k|  IRIns *irb = IR(ref);
  ------------------
  |  |  116|  2.94k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  133|  2.94k|  as->mrm.ofs = 0;
  134|  2.94k|  if (irb->o == IR_FLOAD) {
  ------------------
  |  Branch (134:7): [True: 2.94k, False: 0]
  ------------------
  135|  2.94k|    IRIns *ira = IR(irb->op1);
  ------------------
  |  |  116|  2.94k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  136|  2.94k|    lj_assertA(irb->op2 == IRFL_TAB_ARRAY, "expected FLOAD TAB_ARRAY");
  ------------------
  |  |  111|  2.94k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  2.94k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.94k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.94k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.94k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  137|       |    /* We can avoid the FLOAD of t->array for colocated arrays. */
  138|  2.94k|    if (ira->o == IR_TNEW && ira->op1 <= LJ_MAX_COLOSIZE &&
  ------------------
  |  |   62|  3.04k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (138:9): [True: 101, False: 2.84k]
  |  Branch (138:30): [True: 101, False: 0]
  ------------------
  139|  2.94k|	!neverfuse(as) && noconflict(as, irb->op1, IR_NEWREF, 0)) {
  ------------------
  |  |  128|  3.04k|#define neverfuse(as)		(as->fuseref == FUSE_DISABLED)
  |  |  ------------------
  |  |  |  |  126|    101|#define FUSE_DISABLED		(~(IRRef)0)
  |  |  ------------------
  ------------------
  |  Branch (139:2): [True: 101, False: 0]
  |  Branch (139:20): [True: 101, False: 0]
  ------------------
  140|    101|      as->mrm.ofs = (int32_t)sizeof(GCtab);  /* Ofs to colocated array. */
  141|    101|      return irb->op1;  /* Table obj. */
  142|    101|    }
  143|  2.94k|  } else if (irb->o == IR_ADD && irref_isk(irb->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (143:14): [True: 0, False: 0]
  ------------------
  144|       |    /* Fuse base offset (vararg load). */
  145|      0|    IRIns *irk = IR(irb->op2);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  146|      0|    as->mrm.ofs = irk->o == IR_KINT ? irk->i : (int32_t)ir_kint64(irk)->u64;
  ------------------
  |  |  593|      0|#define ir_kint64(ir)	check_exp((ir)->o == IR_KINT64, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (146:19): [True: 0, False: 0]
  ------------------
  147|      0|    return irb->op1;
  148|      0|  }
  149|  2.84k|  return ref;  /* Otherwise use the given array base. */
  150|  2.94k|}
lj_asm.c:asm_isk32:
   85|   146k|{
   86|   146k|  if (irref_isk(ref)) {
  ------------------
  |  |  485|   146k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 114k, False: 31.9k]
  |  |  ------------------
  ------------------
   87|   114k|    IRIns *ir = IR(ref);
  ------------------
  |  |  116|   114k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
   88|   114k|#if LJ_GC64
   89|   114k|    if (ir->o == IR_KNULL || !irt_is64(ir->t)) {
  ------------------
  |  |  409|   110k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|   110k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|   110k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|   110k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|   110k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|   110k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (89:9): [True: 4.70k, False: 110k]
  |  Branch (89:30): [True: 80.0k, False: 30.0k]
  ------------------
   90|  84.7k|      *k = ir->i;
   91|  84.7k|      return 1;
   92|  84.7k|    } else if (checki32((int64_t)ir_k64(ir)->u64)) {
  ------------------
  |  |  105|   299k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 160, False: 29.9k]
  |  |  |  Branch (105:23): [True: 0, False: 30.0k]
  |  |  |  Branch (105:23): [True: 160, False: 29.9k]
  |  |  |  Branch (105:23): [True: 29.9k, False: 0]
  |  |  |  Branch (105:23): [True: 0, False: 0]
  |  |  |  Branch (105:23): [True: 0, False: 0]
  |  |  |  Branch (105:23): [Folded - Ignored]
  |  |  |  Branch (105:39): [True: 0, False: 30.0k]
  |  |  |  Branch (105:39): [True: 160, False: 29.9k]
  |  |  |  Branch (105:39): [True: 29.9k, False: 0]
  |  |  |  Branch (105:39): [True: 0, False: 0]
  |  |  |  Branch (105:39): [True: 0, False: 0]
  |  |  |  Branch (105:39): [Folded - Ignored]
  |  |  ------------------
  ------------------
   93|    160|      *k = (int32_t)ir_k64(ir)->u64;
  ------------------
  |  |  594|    160|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|    160|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    160|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    480|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 160]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 160, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    160|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|      0|      return 1;
   95|    160|    }
   96|       |#else
   97|       |    if (ir->o != IR_KINT64) {
   98|       |      *k = ir->i;
   99|       |      return 1;
  100|       |    } else if (checki32((int64_t)ir_kint64(ir)->u64)) {
  101|       |      *k = (int32_t)ir_kint64(ir)->u64;
  102|       |      return 1;
  103|       |    }
  104|       |#endif
  105|   114k|  }
  106|  61.8k|  return 0;
  107|   146k|}
lj_asm.c:asm_fuseloadm:
  511|   135k|{
  512|   135k|  if (is64 && !irt_is64(IR(ref)->t))
  ------------------
  |  |  409|  54.5k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  54.5k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  54.5k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  54.5k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  54.5k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  54.5k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (512:7): [True: 54.5k, False: 80.5k]
  |  Branch (512:15): [True: 0, False: 54.5k]
  ------------------
  513|      0|    return ra_alloc1(as, ref, allow);
  514|   135k|  return asm_fuseload(as, ref, allow);
  515|   135k|}
lj_asm.c:asm_retf:
  773|  6.78k|{
  774|  6.78k|  Reg base = ra_alloc1(as, REF_BASE, RSET_GPR);
  ------------------
  |  |   67|  6.78k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  6.78k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  6.78k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  6.78k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  6.78k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  6.78k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  6.78k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  6.78k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  775|  6.78k|#if LJ_FR2
  776|  6.78k|  Reg rpc = ra_scratch(as, rset_exclude(RSET_GPR, base));
  ------------------
  |  |   77|  6.78k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  6.78k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  777|  6.78k|#endif
  778|  6.78k|  void *pc = ir_kptr(IR(ir->op2));
  ------------------
  |  |  596|  6.78k|  check_exp((ir)->o == IR_KPTR || (ir)->o == IR_KKPTR, \
  |  |  ------------------
  |  |  |  |  367|  6.78k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  6.78k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  6.78k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 6.78k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  6.78k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  597|  6.78k|    mref((ir)[LJ_GC64].ptr, void))
  ------------------
  779|  6.78k|  int32_t delta = 1+LJ_FR2+bc_a(*((const BCIns *)pc - 1));
  ------------------
  |  |  569|  6.78k|#define LJ_FR2			1
  ------------------
                int32_t delta = 1+LJ_FR2+bc_a(*((const BCIns *)pc - 1));
  ------------------
  |  |   35|  6.78k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  780|  6.78k|  as->topslot -= (BCReg)delta;
  781|  6.78k|  if ((int32_t)as->topslot < 0) as->topslot = 0;
  ------------------
  |  Branch (781:7): [True: 684, False: 6.10k]
  ------------------
  782|  6.78k|  irt_setmark(IR(REF_BASE)->t);  /* Children must not coalesce with BASE reg. */
  ------------------
  |  |  446|  6.78k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  783|  6.78k|  emit_setgl(as, base, jit_base);
  ------------------
  |  |  269|  6.78k|#define emit_setgl(as, r, field) emit_opgl(as, XO_MOVto, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  6.78k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  6.78k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  6.78k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  6.78k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  784|  6.78k|  emit_addptr(as, base, -8*delta);
  785|  6.78k|  asm_guardcc(as, CC_NE);
  786|  6.78k|#if LJ_FR2
  787|  6.78k|  emit_rmro(as, XO_CMP, rpc|REX_GC64, base, -8);
  ------------------
  |  |   24|  6.78k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  6.78k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  6.78k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  788|  6.78k|  emit_loadu64(as, rpc, u64ptr(pc));
  ------------------
  |  |   98|  6.78k|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
  789|       |#else
  790|       |  emit_gmroi(as, XG_ARITHi(XOg_CMP), base, -4, ptr2addr(pc));
  791|       |#endif
  792|  6.78k|}
lj_asm.c:asm_intarith:
 2081|  37.1k|{
 2082|  37.1k|  IRRef lref = ir->op1;
 2083|  37.1k|  IRRef rref = ir->op2;
 2084|  37.1k|  RegSet allow = RSET_GPR;
  ------------------
  |  |   67|  37.1k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  37.1k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  37.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  37.1k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  37.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  37.1k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  37.1k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  37.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2085|  37.1k|  Reg dest, right;
 2086|  37.1k|  int32_t k = 0;
 2087|  37.1k|  if (as->flagmcp == as->mcp) {  /* Drop test r,r instruction. */
  ------------------
  |  Branch (2087:7): [True: 332, False: 36.8k]
  ------------------
 2088|    332|    MCode *p = as->mcp + ((LJ_64 && *as->mcp < XI_TESTb) ? 3 : 2);
  ------------------
  |  |  640|    664|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2088:37): [True: 0, False: 332]
  ------------------
 2089|    332|    MCode *q = p[0] == 0x0f ? p+1 : p;
  ------------------
  |  Branch (2089:16): [True: 332, False: 0]
  ------------------
 2090|    332|    if ((*q & 15) < 14) {
  ------------------
  |  Branch (2090:9): [True: 332, False: 0]
  ------------------
 2091|    332|      if ((*q & 15) >= 12) *q -= 4;  /* L <->S, NL <-> NS */
  ------------------
  |  Branch (2091:11): [True: 332, False: 0]
  ------------------
 2092|    332|      as->flagmcp = NULL;
 2093|    332|      as->mcp = p;
 2094|    332|    }  /* else: cannot transform LE/NLE to cc without use of OF. */
 2095|    332|  }
 2096|  37.1k|  right = IR(rref)->r;
  ------------------
  |  |  116|  37.1k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2097|  37.1k|  if (ra_hasreg(right)) {
  ------------------
  |  |   28|  37.1k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  37.1k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 586, False: 36.5k]
  |  |  ------------------
  ------------------
 2098|    586|    rset_clear(allow, right);
  ------------------
  |  |   76|    586|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    586|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2099|    586|    ra_noweak(as, right);
  ------------------
  |  |  349|    586|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|    586|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    586|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2100|    586|  }
 2101|  37.1k|  dest = ra_dest(as, ir, allow);
 2102|  37.1k|  if (lref == rref) {
  ------------------
  |  Branch (2102:7): [True: 0, False: 37.1k]
  ------------------
 2103|      0|    right = dest;
 2104|  37.1k|  } else if (ra_noreg(right) && !asm_isk32(as, rref, &k)) {
  ------------------
  |  |   27|  74.3k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  37.1k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 36.5k, False: 586]
  |  |  ------------------
  ------------------
  |  Branch (2104:33): [True: 8.90k, False: 27.6k]
  ------------------
 2105|  8.90k|    if (asm_swapops(as, ir)) {
  ------------------
  |  Branch (2105:9): [True: 4.51k, False: 4.38k]
  ------------------
 2106|  4.51k|      IRRef tmp = lref; lref = rref; rref = tmp;
 2107|  4.51k|    }
 2108|  8.90k|    right = asm_fuseloadm(as, rref, rset_clear(allow, dest), irt_is64(ir->t));
  ------------------
  |  |   76|  8.90k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  8.90k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
                  right = asm_fuseloadm(as, rref, rset_clear(allow, dest), irt_is64(ir->t));
  ------------------
  |  |  409|  8.90k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  8.90k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  8.90k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  8.90k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  8.90k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  8.90k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 2109|  8.90k|  }
 2110|  37.1k|  if (irt_isguard(ir->t))  /* For IR_ADDOV etc. */
  ------------------
  |  |  444|  37.1k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 6.56k, False: 30.6k]
  |  |  ------------------
  ------------------
 2111|  6.56k|    asm_guardcc(as, CC_O);
 2112|  37.1k|  if (xa != XOg_X_IMUL) {
  ------------------
  |  Branch (2112:7): [True: 37.1k, False: 0]
  ------------------
 2113|  37.1k|    if (ra_hasreg(right))
  ------------------
  |  |   28|  37.1k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  37.1k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 9.48k, False: 27.6k]
  |  |  ------------------
  ------------------
 2114|  9.48k|      emit_mrm(as, XO_ARITH(xa), REX_64IR(ir, dest), right);
  ------------------
  |  |  327|  9.48k|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
                    emit_mrm(as, XO_ARITH(xa), REX_64IR(ir, dest), right);
  ------------------
  |  |  525|  9.48k|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|  9.48k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|  9.48k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|  9.48k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|  9.48k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|  9.48k|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  9.48k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 117, False: 9.37k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|    117|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|    117|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2115|  27.6k|    else
 2116|  27.6k|      emit_gri(as, XG_ARITHi(xa), REX_64IR(ir, dest), k);
  ------------------
  |  |  323|  27.6k|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|  27.6k|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
                    emit_gri(as, XG_ARITHi(xa), REX_64IR(ir, dest), k);
  ------------------
  |  |  525|  27.6k|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|  27.6k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|  27.6k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|  27.6k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|  27.6k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|  27.6k|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  27.6k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 0, False: 27.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2117|  37.1k|  } else if (ra_hasreg(right)) {  /* IMUL r, mrm. */
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2118|      0|    emit_mrm(as, XO_IMUL, REX_64IR(ir, dest), right);
  ------------------
  |  |  525|      0|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2119|      0|  } else {  /* IMUL r, r, k. */
 2120|       |    /* NYI: use lea/shl/add/sub (FOLD only does 2^k) depending on CPU. */
 2121|      0|    Reg left = asm_fuseloadm(as, lref, RSET_GPR, irt_is64(ir->t));
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
                  Reg left = asm_fuseloadm(as, lref, RSET_GPR, irt_is64(ir->t));
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 2122|      0|    x86Op xo;
 2123|      0|    if (checki8(k)) { emit_i8(as, k); xo = XO_IMULi8;
  ------------------
  |  |  101|      0|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (checki8(k)) { emit_i8(as, k); xo = XO_IMULi8;
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 2124|      0|    } else { emit_i32(as, k); xo = XO_IMULi; }
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 2125|      0|    emit_mrm(as, xo, REX_64IR(ir, dest), left);
  ------------------
  |  |  525|      0|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2126|      0|    return;
 2127|      0|  }
 2128|  37.1k|  ra_left(as, dest, lref);
 2129|  37.1k|}
lj_asm.c:asm_swapops:
 2033|  65.0k|{
 2034|  65.0k|  IRIns *irl = IR(ir->op1);
  ------------------
  |  |  116|  65.0k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2035|  65.0k|  IRIns *irr = IR(ir->op2);
  ------------------
  |  |  116|  65.0k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2036|  65.0k|  lj_assertA(ra_noreg(irr->r), "bad usage");
  ------------------
  |  |  111|  65.0k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  65.0k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  65.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 65.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  65.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2037|  65.0k|  if (!irm_iscomm(lj_ir_mode[ir->o]))
  ------------------
  |  |  302|  65.0k|#define irm_iscomm(m)		((m) & IRM_C)
  |  |  ------------------
  |  |  |  |  285|  65.0k|#define IRM_C			0x10
  |  |  ------------------
  ------------------
  |  Branch (2037:7): [True: 23.4k, False: 41.6k]
  ------------------
 2038|  23.4k|    return 0;  /* Can't swap non-commutative operations. */
 2039|  41.6k|  if (irref_isk(ir->op2))
  ------------------
  |  |  485|  41.6k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 21.5k, False: 20.0k]
  |  |  ------------------
  ------------------
 2040|  21.5k|    return 0;  /* Don't swap constants to the left. */
 2041|  20.0k|  if (ra_hasreg(irl->r))
  ------------------
  |  |   28|  20.0k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  20.0k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 2.38k, False: 17.6k]
  |  |  ------------------
  ------------------
 2042|  2.38k|    return 1;  /* Swap if left already has a register. */
 2043|  17.6k|  if (ra_samehint(ir->r, irr->r))
  ------------------
  |  |   34|  17.6k|#define ra_samehint(r1, r2)	(ra_gethint((r1)^(r2)) == 0)
  |  |  ------------------
  |  |  |  |   32|  17.6k|#define ra_gethint(r)		((Reg)((r) & RID_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  17.6k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:29): [True: 4.40k, False: 13.2k]
  |  |  ------------------
  ------------------
 2044|  4.40k|    return 1;  /* Swap if dest and right have matching hints. */
 2045|  13.2k|  if (as->curins > as->loopref) {  /* In variant part? */
  ------------------
  |  Branch (2045:7): [True: 8.92k, False: 4.37k]
  ------------------
 2046|  8.92k|    if (ir->op2 < as->loopref && !irt_isphi(irr->t))
  ------------------
  |  |  448|  8.75k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (2046:9): [True: 8.75k, False: 166]
  |  Branch (2046:34): [True: 8.75k, False: 2]
  ------------------
 2047|  8.75k|      return 0;  /* Keep invariants on the right. */
 2048|    168|    if (ir->op1 < as->loopref && !irt_isphi(irl->t))
  ------------------
  |  |  448|      2|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (2048:9): [True: 2, False: 166]
  |  Branch (2048:34): [True: 2, False: 0]
  ------------------
 2049|      2|      return 1;  /* Swap invariants to the right. */
 2050|    168|  }
 2051|  4.54k|  if (opisfusableload(irl->o))
  ------------------
  |  |  131|  4.54k|  ((o) == IR_ALOAD || (o) == IR_HLOAD || (o) == IR_ULOAD || \
  |  |  ------------------
  |  |  |  Branch (131:4): [True: 1, False: 4.54k]
  |  |  |  Branch (131:23): [True: 0, False: 4.54k]
  |  |  |  Branch (131:42): [True: 0, False: 4.54k]
  |  |  ------------------
  |  |  132|  4.54k|   (o) == IR_FLOAD || (o) == IR_XLOAD || (o) == IR_SLOAD || (o) == IR_VLOAD)
  |  |  ------------------
  |  |  |  Branch (132:4): [True: 0, False: 4.54k]
  |  |  |  Branch (132:23): [True: 0, False: 4.54k]
  |  |  |  Branch (132:42): [True: 2.38k, False: 2.15k]
  |  |  |  Branch (132:61): [True: 0, False: 2.15k]
  |  |  ------------------
  ------------------
 2052|  2.38k|    return 1;  /* Swap fusable loads to the right. */
 2053|  2.15k|  return 0;  /* Otherwise don't swap. */
 2054|  4.54k|}
lj_asm.c:asm_add:
 2205|  57.2k|{
 2206|  57.2k|  if (irt_isnum(ir->t))
  ------------------
  |  |  377|  57.2k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  57.2k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 26.6k, False: 30.6k]
  |  |  ------------------
  ------------------
 2207|  26.6k|    asm_fparith(as, ir, XO_ADDSD);
 2208|  30.6k|  else if (as->flagmcp == as->mcp || irt_is64(ir->t) || !asm_lea(as, ir))
  ------------------
  |  |  409|  61.0k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  30.4k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  30.4k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  30.4k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  30.4k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  30.4k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 30.4k]
  |  |  ------------------
  ------------------
  |  Branch (2208:12): [True: 166, False: 30.4k]
  |  Branch (2208:57): [True: 30.1k, False: 287]
  ------------------
 2209|  30.3k|    asm_intarith(as, ir, XOg_ADD);
 2210|  57.2k|}
lj_asm.c:asm_lea:
 2148|  30.4k|{
 2149|  30.4k|  IRIns *irl = IR(ir->op1);
  ------------------
  |  |  116|  30.4k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2150|  30.4k|  IRIns *irr = IR(ir->op2);
  ------------------
  |  |  116|  30.4k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2151|  30.4k|  RegSet allow = RSET_GPR;
  ------------------
  |  |   67|  30.4k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  30.4k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  30.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  30.4k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  30.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  30.4k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  30.4k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  30.4k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2152|  30.4k|  Reg dest;
 2153|  30.4k|  as->mrm.base = as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  30.4k|#define RID_NONE		0x80
  ------------------
 2154|  30.4k|  as->mrm.scale = XM_SCALE1;
 2155|  30.4k|  as->mrm.ofs = 0;
 2156|  30.4k|  if (ra_hasreg(irl->r)) {
  ------------------
  |  |   28|  30.4k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  30.4k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 1.41k, False: 29.0k]
  |  |  ------------------
  ------------------
 2157|  1.41k|    rset_clear(allow, irl->r);
  ------------------
  |  |   76|  1.41k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.41k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2158|  1.41k|    ra_noweak(as, irl->r);
  ------------------
  |  |  349|  1.41k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|  1.41k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  1.41k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2159|  1.41k|    as->mrm.base = irl->r;
 2160|  1.41k|    if (irref_isk(ir->op2) || ra_hasreg(irr->r)) {
  ------------------
  |  |  485|  2.82k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 1.41k, False: 0]
  |  |  ------------------
  ------------------
                  if (irref_isk(ir->op2) || ra_hasreg(irr->r)) {
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2161|       |      /* The PHI renaming logic does a better job in some cases. */
 2162|  1.41k|      if (ra_hasreg(ir->r) &&
  ------------------
  |  |   28|  2.82k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  1.41k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 1.41k, False: 0]
  |  |  ------------------
  ------------------
 2163|  1.41k|	  ((irt_isphi(irl->t) && as->phireg[ir->r] == ir->op1) ||
  ------------------
  |  |  448|  2.82k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 1.28k, False: 125]
  |  |  ------------------
  ------------------
  |  Branch (2163:27): [True: 1.12k, False: 162]
  ------------------
 2164|  1.41k|	   (irt_isphi(irr->t) && as->phireg[ir->r] == ir->op2)))
  ------------------
  |  |  448|    574|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 0, False: 287]
  |  |  ------------------
  ------------------
  |  Branch (2164:27): [True: 0, False: 0]
  ------------------
 2165|  1.12k|	return 0;
 2166|    287|      if (irref_isk(ir->op2)) {
  ------------------
  |  |  485|    287|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 287, False: 0]
  |  |  ------------------
  ------------------
 2167|    287|	as->mrm.ofs = irr->i;
 2168|    287|      } else {
 2169|      0|	rset_clear(allow, irr->r);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2170|      0|	ra_noweak(as, irr->r);
  ------------------
  |  |  349|      0|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2171|      0|	as->mrm.idx = irr->r;
 2172|      0|      }
 2173|    287|    } else if (irr->o == IR_ADD && mayfuse(as, ir->op2) &&
  ------------------
  |  |  127|      0|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2173:16): [True: 0, False: 0]
  ------------------
 2174|      0|	       irref_isk(irr->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2175|      0|      Reg idx = ra_alloc1(as, irr->op1, allow);
 2176|      0|      rset_clear(allow, idx);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2177|      0|      as->mrm.idx = (uint8_t)idx;
 2178|      0|      as->mrm.ofs = IR(irr->op2)->i;
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2179|      0|    } else {
 2180|      0|      return 0;
 2181|      0|    }
 2182|  29.0k|  } else if (ir->op1 != ir->op2 && irl->o == IR_ADD && mayfuse(as, ir->op1) &&
  ------------------
  |  |  127|  39.7k|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 0, False: 10.7k]
  |  |  ------------------
  ------------------
  |  Branch (2182:14): [True: 29.0k, False: 0]
  |  Branch (2182:36): [True: 10.7k, False: 18.3k]
  ------------------
 2183|  29.0k|	     (irref_isk(ir->op2) || irref_isk(irl->op2))) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	     (irref_isk(ir->op2) || irref_isk(irl->op2))) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2184|      0|    Reg idx, base = ra_alloc1(as, irl->op1, allow);
 2185|      0|    rset_clear(allow, base);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2186|      0|    as->mrm.base = (uint8_t)base;
 2187|      0|    if (irref_isk(ir->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2188|      0|      as->mrm.ofs = irr->i;
 2189|      0|      idx = ra_alloc1(as, irl->op2, allow);
 2190|      0|    } else {
 2191|      0|      as->mrm.ofs = IR(irl->op2)->i;
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2192|      0|      idx = ra_alloc1(as, ir->op2, allow);
 2193|      0|    }
 2194|      0|    rset_clear(allow, idx);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2195|      0|    as->mrm.idx = (uint8_t)idx;
 2196|  29.0k|  } else {
 2197|  29.0k|    return 0;
 2198|  29.0k|  }
 2199|    287|  dest = ra_dest(as, ir, allow);
 2200|    287|  emit_mrm(as, XO_LEA, dest, RID_MRM);
 2201|    287|  return 1;  /* Success. */
 2202|  30.4k|}
lj_asm.c:asm_sub:
 2213|  7.85k|{
 2214|  7.85k|  if (irt_isnum(ir->t))
  ------------------
  |  |  377|  7.85k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  7.85k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 7.57k, False: 283]
  |  |  ------------------
  ------------------
 2215|  7.57k|    asm_fparith(as, ir, XO_SUBSD);
 2216|    283|  else  /* Note: no need for LEA trick here. i-k is encoded as i+(-k). */
 2217|    283|    asm_intarith(as, ir, XOg_SUB);
 2218|  7.85k|}
lj_asm.c:asm_mul:
 2221|  10.2k|{
 2222|  10.2k|  if (irt_isnum(ir->t))
  ------------------
  |  |  377|  10.2k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  10.2k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 10.2k, False: 0]
  |  |  ------------------
  ------------------
 2223|  10.2k|    asm_fparith(as, ir, XO_MULSD);
 2224|      0|  else
 2225|      0|    asm_intarith(as, ir, XOg_X_IMUL);
 2226|  10.2k|}
lj_asm.c:asm_setupresult:
  664|   246k|{
  665|   246k|  RegSet drop = RSET_SCRATCH;
  ------------------
  |  |   98|   246k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|   246k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   246k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   246k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   246k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|   246k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|   246k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|   246k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|   246k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|   246k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  666|   246k|  int hiop = ((ir+1)->o == IR_HIOP && !irt_isnil((ir+1)->t));
  ------------------
  |  |  370|    803|#define irt_isnil(t)		(irt_type(t) == IRT_NIL)
  |  |  ------------------
  |  |  |  |  365|    803|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (666:15): [True: 803, False: 245k]
  |  Branch (666:39): [True: 803, False: 0]
  ------------------
  667|   246k|  if ((ci->flags & CCI_NOFPRCLOBBER))
  ------------------
  |  |   41|   246k|#define CCI_NOFPRCLOBBER	0x0400	/* Does not clobber any FPRs. */
  ------------------
  |  Branch (667:7): [True: 0, False: 246k]
  ------------------
  668|      0|    drop &= ~RSET_FPR;
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  669|   246k|  if (ra_hasreg(ir->r))
  ------------------
  |  |   28|   246k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|   246k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 185k, False: 60.9k]
  |  |  ------------------
  ------------------
  670|   185k|    rset_clear(drop, ir->r);  /* Dest reg handled below. */
  ------------------
  |  |   76|   185k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|   185k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  671|   246k|  if (hiop && ra_hasreg((ir+1)->r))
  ------------------
  |  |   28|    803|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|    803|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 315, False: 488]
  |  |  ------------------
  ------------------
  |  Branch (671:7): [True: 803, False: 245k]
  ------------------
  672|    315|    rset_clear(drop, (ir+1)->r);  /* Dest reg handled below. */
  ------------------
  |  |   76|    315|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    315|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  673|   246k|  ra_evictset(as, drop);  /* Evictions must be performed first. */
  674|   246k|  if (ra_used(ir)) {
  ------------------
  |  |  351|   246k|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|   492k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|   246k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 185k, False: 60.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|  60.9k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  60.9k|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 30.5k, False: 30.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  675|   216k|    if (irt_isfp(ir->t)) {
  ------------------
  |  |  388|   216k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|   432k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   216k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 216k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|   216k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   216k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 216k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  676|      0|      int32_t ofs = sps_scale(ir->s);  /* Use spill slot or temp slots. */
  ------------------
  |  |  151|      0|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
  677|      0|#if LJ_64
  678|      0|      if ((ci->flags & CCI_CASTU64)) {
  ------------------
  |  |   40|      0|#define CCI_CASTU64		0x0200	/* Cast u64 result to number. */
  ------------------
  |  Branch (678:11): [True: 0, False: 0]
  ------------------
  679|      0|	Reg dest = ir->r;
  680|      0|	if (ra_hasreg(dest)) {
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  681|      0|	  ra_free(as, dest);
  ------------------
  |  |  346|      0|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  682|      0|	  ra_modified(as, dest);
  ------------------
  |  |  347|      0|#define ra_modified(as, r)	rset_set(as->modset, (r))
  |  |  ------------------
  |  |  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  683|      0|	  emit_rr(as, XO_MOVD, dest|REX_64, RID_RET);  /* Really MOVQ. */
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  684|      0|	}
  685|      0|	if (ofs) emit_movtomro(as, RID_RET|REX_64, RID_ESP, ofs);
  ------------------
  |  |  263|      0|  emit_rmro(as, XO_MOVto, (r), (base), (ofs))
  ------------------
  |  Branch (685:6): [True: 0, False: 0]
  ------------------
  686|      0|      } else {
  687|      0|	ra_destreg(as, ir, RID_FPRET);
  688|      0|      }
  689|       |#else
  690|       |      /* Number result is in x87 st0 for x86 calling convention. */
  691|       |      Reg dest = ir->r;
  692|       |      if (ra_hasreg(dest)) {
  693|       |	ra_free(as, dest);
  694|       |	ra_modified(as, dest);
  695|       |	emit_rmro(as, irt_isnum(ir->t) ? XO_MOVSD : XO_MOVSS,
  696|       |		  dest, RID_ESP, ofs);
  697|       |      }
  698|       |      if ((ci->flags & CCI_CASTU64)) {
  699|       |	emit_movtomro(as, RID_RETLO, RID_ESP, ofs);
  700|       |	emit_movtomro(as, RID_RETHI, RID_ESP, ofs+4);
  701|       |      } else {
  702|       |	emit_rmro(as, irt_isnum(ir->t) ? XO_FSTPq : XO_FSTPd,
  703|       |		  irt_isnum(ir->t) ? XOg_FSTPq : XOg_FSTPd, RID_ESP, ofs);
  704|       |      }
  705|       |#endif
  706|   216k|    } else if (hiop) {
  ------------------
  |  Branch (706:16): [True: 803, False: 215k]
  ------------------
  707|    803|      ra_destpair(as, ir);
  708|   215k|    } else {
  709|   215k|      lj_assertA(!irt_ispri(ir->t), "PRI dest");
  ------------------
  |  |  111|   215k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   215k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   215k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 215k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   215k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  710|   215k|      ra_destreg(as, ir, RID_RET);
  711|   215k|    }
  712|   216k|  } else if (LJ_32 && irt_isfp(ir->t) && !(ci->flags & CCI_CASTU64)) {
  ------------------
  |  |  639|  60.7k|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                } else if (LJ_32 && irt_isfp(ir->t) && !(ci->flags & CCI_CASTU64)) {
  ------------------
  |  |  388|  30.3k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (LJ_32 && irt_isfp(ir->t) && !(ci->flags & CCI_CASTU64)) {
  ------------------
  |  |   40|      0|#define CCI_CASTU64		0x0200	/* Cast u64 result to number. */
  ------------------
  |  Branch (712:42): [True: 0, False: 0]
  ------------------
  713|      0|    emit_x87op(as, XI_FPOP);  /* Pop unused result from x87 st0. */
  ------------------
  |  |   34|      0|  (*(uint16_t *)(as->mcp-2) = (uint16_t)(xo), as->mcp -= 2)
  ------------------
  714|      0|  }
  715|   246k|}
lj_asm.c:asm_gencall:
  557|   283k|{
  558|   283k|  uint32_t n, nargs = CCI_XNARGS(ci);
  ------------------
  |  |   60|   283k|#define CCI_XNARGS(ci)		CCI_NARGS((ci))
  |  |  ------------------
  |  |  |  |   19|   283k|#define CCI_NARGS(ci)		((ci)->flags & 0xff)	/* # of args. */
  |  |  ------------------
  ------------------
  559|   283k|  int32_t ofs = STACKARG_OFS;
  ------------------
  |  |  106|   283k|#define STACKARG_OFS	0
  ------------------
  560|   283k|#if LJ_64
  561|   283k|  uint32_t gprs = REGARG_GPRS;
  ------------------
  |  |  100|   283k|  (RID_EDI|((RID_ESI|((RID_EDX|((RID_ECX|((RID_R8D|(RID_R9D \
  |  |  101|   283k|   <<5))<<5))<<5))<<5))<<5))
  ------------------
  562|   283k|  Reg fpr = REGARG_FIRSTFPR;
  ------------------
  |  |  104|   283k|#define REGARG_FIRSTFPR	RID_XMM0
  ------------------
  563|   283k|#if !LJ_ABI_WIN
  564|   283k|  MCode *patchnfpr = NULL;
  565|   283k|#endif
  566|       |#else
  567|       |  uint32_t gprs = 0;
  568|       |  if ((ci->flags & CCI_CC_MASK) != CCI_CC_CDECL) {
  569|       |    if ((ci->flags & CCI_CC_MASK) == CCI_CC_THISCALL)
  570|       |      gprs = (REGARG_GPRS & 31);
  571|       |    else if ((ci->flags & CCI_CC_MASK) == CCI_CC_FASTCALL)
  572|       |      gprs = REGARG_GPRS;
  573|       |  }
  574|       |#endif
  575|   283k|  if ((void *)ci->func)
  ------------------
  |  Branch (575:7): [True: 283k, False: 0]
  ------------------
  576|   283k|    emit_call(as, ci->func);
  ------------------
  |  |  519|   283k|#define emit_call(as, f)	emit_call_(as, (MCode *)(void *)(f))
  ------------------
  577|   283k|#if LJ_64
  578|   283k|  if ((ci->flags & CCI_VARARG)) {  /* Special handling for vararg calls. */
  ------------------
  |  |   42|   283k|#define CCI_VARARG		0x0800	/* Vararg function. */
  ------------------
  |  Branch (578:7): [True: 0, False: 283k]
  ------------------
  579|       |#if LJ_ABI_WIN
  580|       |    for (n = 0; n < 4 && n < nargs; n++) {
  581|       |      IRIns *ir = IR(args[n]);
  582|       |      if (irt_isfp(ir->t))  /* Duplicate FPRs in GPRs. */
  583|       |	emit_rr(as, XO_MOVDto, (irt_isnum(ir->t) ? REX_64 : 0) | (fpr+n),
  584|       |		((gprs >> (n*5)) & 31));  /* Either MOVD or MOVQ. */
  585|       |    }
  586|       |#else
  587|      0|    patchnfpr = --as->mcp;  /* Indicate number of used FPRs in register al. */
  588|      0|    *--as->mcp = XI_MOVrib | RID_EAX;
  589|      0|#endif
  590|      0|  }
  591|   283k|#endif
  592|   849k|  for (n = 0; n < nargs; n++) {  /* Setup args. */
  ------------------
  |  Branch (592:15): [True: 565k, False: 283k]
  ------------------
  593|   565k|    IRRef ref = args[n];
  594|   565k|    IRIns *ir = IR(ref);
  ------------------
  |  |  116|   565k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  595|   565k|    Reg r;
  596|       |#if LJ_64 && LJ_ABI_WIN
  597|       |    /* Windows/x64 argument registers are strictly positional. */
  598|       |    r = irt_isfp(ir->t) ? (fpr <= REGARG_LASTFPR ? fpr : 0) : (gprs & 31);
  599|       |    fpr++; gprs >>= 5;
  600|       |#elif LJ_64
  601|       |    /* POSIX/x64 argument registers are used in order of appearance. */
  602|   565k|    if (irt_isfp(ir->t)) {
  ------------------
  |  |  388|   565k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|  1.13M|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   565k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 19.8k, False: 545k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|   545k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   545k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 545k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  603|  19.8k|      r = fpr <= REGARG_LASTFPR ? fpr++ : 0;
  ------------------
  |  |  105|  19.8k|#define REGARG_LASTFPR	RID_XMM7
  ------------------
  |  Branch (603:11): [True: 19.8k, False: 0]
  ------------------
  604|   545k|    } else {
  605|   545k|      r = gprs & 31; gprs >>= 5;
  606|   545k|    }
  607|       |#else
  608|       |    if (ref && irt_isfp(ir->t)) {
  609|       |      r = 0;
  610|       |    } else {
  611|       |      r = gprs & 31; gprs >>= 5;
  612|       |      if (!ref) continue;
  613|       |    }
  614|       |#endif
  615|   565k|    if (r) {  /* Argument is in a register. */
  ------------------
  |  Branch (615:9): [True: 565k, False: 0]
  ------------------
  616|   565k|      if (r < RID_MAX_GPR && ref < ASMREF_TMP1) {
  ------------------
  |  |  118|   545k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
  |  Branch (616:11): [True: 545k, False: 19.8k]
  |  Branch (616:30): [True: 110k, False: 434k]
  ------------------
  617|   110k|#if LJ_64
  618|   110k|	if (LJ_GC64 ? !(ir->o == IR_KINT || ir->o == IR_KNULL) : ir->o == IR_KINT64)
  ------------------
  |  |  562|   110k|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (618:6): [True: 43.7k, False: 67.0k]
  |  Branch (618:18): [True: 67.0k, False: 43.7k]
  |  Branch (618:38): [True: 0, False: 43.7k]
  ------------------
  619|  43.7k|	  emit_loadu64(as, r, ir_k64(ir)->u64);
  ------------------
  |  |  594|  43.7k|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|  43.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  43.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   366k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 43.7k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 43.7k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 35.6k, False: 8.11k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 8.11k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 8.11k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  43.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  620|  67.0k|	else
  621|  67.0k|#endif
  622|  67.0k|	  emit_loadi(as, r, ir->i);
  623|   454k|      } else {
  624|       |	/* Must have been evicted. */
  625|   454k|	lj_assertA(rset_test(as->freeset, r), "reg %d not free", r);
  ------------------
  |  |  111|   454k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   454k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   454k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 454k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   454k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  626|   454k|	if (ra_hasreg(ir->r)) {
  ------------------
  |  |   28|   454k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|   454k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 19.3k, False: 435k]
  |  |  ------------------
  ------------------
  627|  19.3k|	  ra_noweak(as, ir->r);
  ------------------
  |  |  349|  19.3k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|  19.3k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  628|  19.3k|	  emit_movrr(as, ir, r, ir->r);
  629|   435k|	} else {
  630|   435k|	  ra_allocref(as, ref, RID2RSET(r));
  ------------------
  |  |   70|   435k|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
  631|   435k|	}
  632|   454k|      }
  633|   565k|    } else if (irt_isfp(ir->t)) {  /* FP argument is on stack. */
  ------------------
  |  |  388|      0|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  634|      0|      lj_assertA(!(irt_isfloat(ir->t) && irref_isk(ref)),
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  635|      0|		 "unexpected float constant");
  636|      0|      if (LJ_32 && (ofs & 4) && irref_isk(ref)) {
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_32 && (ofs & 4) && irref_isk(ref)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (636:20): [True: 0, False: 0]
  ------------------
  637|       |	/* Split stores for unaligned FP consts. */
  638|      0|	emit_movmroi(as, RID_ESP, ofs, (int32_t)ir_knum(ir)->u32.lo);
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  639|      0|	emit_movmroi(as, RID_ESP, ofs+4, (int32_t)ir_knum(ir)->u32.hi);
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  640|      0|      } else {
  641|      0|	r = ra_alloc1(as, ref, RSET_FPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  642|      0|	emit_rmro(as, irt_isnum(ir->t) ? XO_MOVSDto : XO_MOVSSto,
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  643|      0|		  r, RID_ESP, ofs);
  644|      0|      }
  645|      0|      ofs += (LJ_32 && irt_isfloat(ir->t)) ? 4 : 8;
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    ofs += (LJ_32 && irt_isfloat(ir->t)) ? 4 : 8;
  ------------------
  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  646|      0|    } else {  /* Non-FP argument is on stack. */
  647|      0|      if (LJ_32 && ref < ASMREF_TMP1) {
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_32 && ref < ASMREF_TMP1) {
  ------------------
  |  |  118|      0|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
  |  Branch (647:20): [True: 0, False: 0]
  ------------------
  648|      0|	emit_movmroi(as, RID_ESP, ofs, ir->i);
  649|      0|      } else {
  650|      0|	r = ra_alloc1(as, ref, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  651|      0|	emit_movtomro(as, REX_64 + r, RID_ESP, ofs);
  ------------------
  |  |  263|      0|  emit_rmro(as, XO_MOVto, (r), (base), (ofs))
  ------------------
  652|      0|      }
  653|      0|      ofs += sizeof(intptr_t);
  654|      0|    }
  655|   565k|    checkmclim(as);
  656|   565k|  }
  657|   283k|#if LJ_64 && !LJ_ABI_WIN
  658|   283k|  if (patchnfpr) *patchnfpr = fpr - REGARG_FIRSTFPR;
  ------------------
  |  |  104|      0|#define REGARG_FIRSTFPR	RID_XMM0
  ------------------
  |  Branch (658:7): [True: 0, False: 283k]
  ------------------
  659|   283k|#endif
  660|   283k|}
lj_asm.c:asm_fparith:
 2057|  61.7k|{
 2058|  61.7k|  IRRef lref = ir->op1;
 2059|  61.7k|  IRRef rref = ir->op2;
 2060|  61.7k|  RegSet allow = RSET_FPR;
  ------------------
  |  |   70|  61.7k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  61.7k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  61.7k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2061|  61.7k|  Reg dest;
 2062|  61.7k|  Reg right = IR(rref)->r;
  ------------------
  |  |  116|  61.7k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2063|  61.7k|  if (ra_hasreg(right)) {
  ------------------
  |  |   28|  61.7k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  61.7k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 5.60k, False: 56.1k]
  |  |  ------------------
  ------------------
 2064|  5.60k|    rset_clear(allow, right);
  ------------------
  |  |   76|  5.60k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  5.60k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2065|  5.60k|    ra_noweak(as, right);
  ------------------
  |  |  349|  5.60k|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|  5.60k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  5.60k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2066|  5.60k|  }
 2067|  61.7k|  dest = ra_dest(as, ir, allow);
 2068|  61.7k|  if (lref == rref) {
  ------------------
  |  Branch (2068:7): [True: 3, False: 61.7k]
  ------------------
 2069|      3|    right = dest;
 2070|  61.7k|  } else if (ra_noreg(right)) {
  ------------------
  |  |   27|  61.7k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|  61.7k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 56.1k, False: 5.60k]
  |  |  ------------------
  ------------------
 2071|  56.1k|    if (asm_swapops(as, ir)) {
  ------------------
  |  Branch (2071:9): [True: 4.65k, False: 51.5k]
  ------------------
 2072|  4.65k|      IRRef tmp = lref; lref = rref; rref = tmp;
 2073|  4.65k|    }
 2074|  56.1k|    right = asm_fuseload(as, rref, rset_clear(allow, dest));
  ------------------
  |  |   76|  56.1k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  56.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2075|  56.1k|  }
 2076|  61.7k|  emit_mrm(as, xo, dest, right);
 2077|  61.7k|  ra_left(as, dest, lref);
 2078|  61.7k|}
lj_asm.c:asm_fpmath:
 1979|  17.2k|{
 1980|  17.2k|  IRFPMathOp fpm = (IRFPMathOp)ir->op2;
 1981|  17.2k|  if (fpm == IRFPM_SQRT) {
  ------------------
  |  Branch (1981:7): [True: 0, False: 17.2k]
  ------------------
 1982|      0|    Reg dest = ra_dest(as, ir, RSET_FPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1983|      0|    Reg left = asm_fuseload(as, ir->op1, RSET_FPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1984|      0|    emit_mrm(as, XO_SQRTSD, dest, left);
 1985|  17.2k|  } else if (fpm <= IRFPM_TRUNC) {
  ------------------
  |  Branch (1985:14): [True: 17.2k, False: 0]
  ------------------
 1986|  17.2k|    if (as->flags & JIT_F_SSE4_1) {  /* SSE4.1 has a rounding instruction. */
  ------------------
  |  |   24|  17.2k|#define JIT_F_SSE4_1		(JIT_F_CPU << 1)
  |  |  ------------------
  |  |  |  |   19|  17.2k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  |  Branch (1986:9): [True: 17.2k, False: 0]
  ------------------
 1987|  17.2k|      Reg dest = ra_dest(as, ir, RSET_FPR);
  ------------------
  |  |   70|  17.2k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  17.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  17.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1988|  17.2k|      Reg left = asm_fuseload(as, ir->op1, RSET_FPR);
  ------------------
  |  |   70|  17.2k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  17.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  17.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1989|       |      /* ROUNDSD has a 4-byte opcode which doesn't fit in x86Op.
 1990|       |      ** Let's pretend it's a 3-byte opcode, and compensate afterwards.
 1991|       |      ** This is atrocious, but the alternatives are much worse.
 1992|       |      */
 1993|       |      /* Round down/up/trunc == 1001/1010/1011. */
 1994|  17.2k|      emit_i8(as, 0x09 + fpm);
  ------------------
  |  |   29|  17.2k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1995|  17.2k|      emit_mrm(as, XO_ROUNDSD, dest, left);
 1996|  17.2k|      if (LJ_64 && as->mcp[1] != (MCode)(XO_ROUNDSD >> 16)) {
  ------------------
  |  |  640|  34.5k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1996:20): [True: 0, False: 17.2k]
  ------------------
 1997|      0|	as->mcp[0] = as->mcp[1]; as->mcp[1] = 0x0f;  /* Swap 0F and REX. */
 1998|      0|      }
 1999|  17.2k|      *--as->mcp = 0x66;  /* 1st byte of ROUNDSD opcode. */
 2000|  17.2k|    } else {  /* Call helper functions for SSE2 variant. */
 2001|       |      /* The modified regs must match with the *.dasc implementation. */
 2002|      0|      RegSet drop = RSET_RANGE(RID_XMM0, RID_XMM3+1)|RID2RSET(RID_EAX);
  ------------------
  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
                    RegSet drop = RSET_RANGE(RID_XMM0, RID_XMM3+1)|RID2RSET(RID_EAX);
  ------------------
  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  ------------------
 2003|      0|      if (ra_hasreg(ir->r))
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2004|      0|	rset_clear(drop, ir->r);  /* Dest reg handled below. */
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 2005|      0|      ra_evictset(as, drop);
 2006|      0|      ra_destreg(as, ir, RID_XMM0);
 2007|      0|      emit_call(as, fpm == IRFPM_FLOOR ? lj_vm_floor_sse :
  ------------------
  |  |  519|      0|#define emit_call(as, f)	emit_call_(as, (MCode *)(void *)(f))
  |  |  ------------------
  |  |  |  Branch (519:59): [True: 0, False: 0]
  |  |  |  Branch (519:59): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2008|      0|		    fpm == IRFPM_CEIL ? lj_vm_ceil_sse : lj_vm_trunc_sse);
 2009|      0|      ra_left(as, RID_XMM0, ir->op1);
 2010|      0|    }
 2011|  17.2k|  } else {
 2012|      0|    asm_callid(as, ir, IRCALL_lj_vm_floor + fpm);
 2013|      0|  }
 2014|  17.2k|}
lj_asm.c:asm_aref:
 1125|     20|{
 1126|     20|  Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|     20|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     20|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     20|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     20|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     20|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     20|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     20|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     20|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1127|     20|  asm_fusearef(as, ir, RSET_GPR);
  ------------------
  |  |   67|     20|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     20|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     20|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     20|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     20|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     20|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     20|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     20|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1128|     20|  if (!(as->mrm.idx == RID_NONE && as->mrm.ofs == 0))
  ------------------
  |  |   21|     40|#define RID_NONE		0x80
  ------------------
  |  Branch (1128:9): [True: 20, False: 0]
  |  Branch (1128:36): [True: 0, False: 20]
  ------------------
 1129|     20|    emit_mrm(as, XO_LEA, dest|REX_GC64, RID_MRM);
  ------------------
  |  |   24|     20|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|     20|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|     20|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1130|      0|  else if (as->mrm.base != dest)
  ------------------
  |  Branch (1130:12): [True: 0, False: 0]
  ------------------
 1131|      0|    emit_rr(as, XO_MOV, dest|REX_GC64, as->mrm.base);
  ------------------
  |  |   24|      0|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1132|     20|}
lj_asm.c:asm_href:
 1143|  1.02k|{
 1144|  1.02k|  RegSet allow = RSET_GPR;
  ------------------
  |  |   67|  1.02k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  1.02k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  1.02k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  1.02k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  1.02k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  1.02k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  1.02k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  1.02k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1145|  1.02k|  int destused = ra_used(ir);
  ------------------
  |  |  351|  1.02k|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  2.05k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  1.02k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 16, False: 1.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|  1.01k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  1.01k|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 0, False: 1.01k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1146|  1.02k|  Reg dest = ra_dest(as, ir, allow);
 1147|  1.02k|  Reg tab = ra_alloc1(as, ir->op1, rset_clear(allow, dest));
  ------------------
  |  |   76|  1.02k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.02k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1148|  1.02k|  Reg key = RID_NONE, tmp = RID_NONE;
  ------------------
  |  |   21|  1.02k|#define RID_NONE		0x80
  ------------------
                Reg key = RID_NONE, tmp = RID_NONE;
  ------------------
  |  |   21|  1.02k|#define RID_NONE		0x80
  ------------------
 1149|  1.02k|  IRIns *irkey = IR(ir->op2);
  ------------------
  |  |  116|  1.02k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1150|  1.02k|  int isk = irref_isk(ir->op2);
  ------------------
  |  |  485|  1.02k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
 1151|  1.02k|  IRType1 kt = irkey->t;
 1152|  1.02k|  uint32_t khash;
 1153|  1.02k|  MCLabel l_end, l_loop, l_next;
 1154|       |
 1155|  1.02k|  if (!isk) {
  ------------------
  |  Branch (1155:7): [True: 482, False: 547]
  ------------------
 1156|    482|    rset_clear(allow, tab);
  ------------------
  |  |   76|    482|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    482|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1157|    482|    key = ra_alloc1(as, ir->op2, irt_isnum(kt) ? RSET_FPR : allow);
  ------------------
  |  |  377|    482|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|    482|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 466, False: 16]
  |  |  ------------------
  ------------------
                  key = ra_alloc1(as, ir->op2, irt_isnum(kt) ? RSET_FPR : allow);
  ------------------
  |  |   70|    466|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|    466|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    466|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1158|    482|    if (LJ_GC64 || !irt_isstr(kt))
  ------------------
  |  |  562|    964|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_GC64 || !irt_isstr(kt))
  ------------------
  |  |  373|      0|#define irt_isstr(t)		(irt_type(t) == IRT_STR)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1158:20): [True: 0, False: 0]
  ------------------
 1159|    482|      tmp = ra_scratch(as, rset_exclude(allow, key));
  ------------------
  |  |   77|    482|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    482|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1160|    482|  }
 1161|       |
 1162|       |  /* Key not found in chain: jump to exit (if merged) or load niltv. */
 1163|  1.02k|  l_end = emit_label(as);
  ------------------
  |  |  472|  1.02k|#define emit_label(as)		((as)->mcp)
  ------------------
 1164|  1.02k|  if (merge == IR_NE)
  ------------------
  |  Branch (1164:7): [True: 0, False: 1.02k]
  ------------------
 1165|      0|    asm_guardcc(as, CC_E);  /* XI_JMP is not found by lj_asm_patchexit. */
 1166|  1.02k|  else if (destused)
  ------------------
  |  Branch (1166:12): [True: 16, False: 1.01k]
  ------------------
 1167|     16|    emit_loada(as, dest, niltvg(J2G(as->J)));
  ------------------
  |  |  303|     32|  emit_loadu64(as, (r), (uintptr_t)(addr))
  |  |  ------------------
  |  |  |  Branch (303:37): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1168|       |
 1169|       |  /* Follow hash chain until the end. */
 1170|  1.02k|  l_loop = emit_sjcc_label(as, CC_NZ);
 1171|  1.02k|  emit_rr(as, XO_TEST, dest|REX_GC64, dest);
  ------------------
  |  |   24|  1.02k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  1.02k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  1.02k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1172|  1.02k|  emit_rmro(as, XO_MOV, dest|REX_GC64, dest, offsetof(Node, next));
  ------------------
  |  |   24|  1.02k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  1.02k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  1.02k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1173|  1.02k|  l_next = emit_label(as);
  ------------------
  |  |  472|  1.02k|#define emit_label(as)		((as)->mcp)
  ------------------
 1174|       |
 1175|       |  /* Type and value comparison. */
 1176|  1.02k|  if (merge == IR_EQ)
  ------------------
  |  Branch (1176:7): [True: 1.01k, False: 16]
  ------------------
 1177|  1.01k|    asm_guardcc(as, CC_E);
 1178|     16|  else
 1179|     16|    emit_sjcc(as, CC_E, l_end);
 1180|  1.02k|  checkmclim(as);
 1181|  1.02k|  if (irt_isnum(kt)) {
  ------------------
  |  |  377|  1.02k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  1.02k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 466, False: 563]
  |  |  ------------------
  ------------------
 1182|    466|    if (isk) {
  ------------------
  |  Branch (1182:9): [True: 0, False: 466]
  ------------------
 1183|       |      /* Assumes -0.0 is already canonicalized to +0.0. */
 1184|      0|      emit_gmroi(as, XG_ARITHi(XOg_CMP), dest, offsetof(Node, key.u32.lo),
  ------------------
  |  |  323|      0|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|      0|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
 1185|      0|		 (int32_t)ir_knum(irkey)->u32.lo);
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1186|      0|      emit_sjcc(as, CC_NE, l_next);
 1187|      0|      emit_gmroi(as, XG_ARITHi(XOg_CMP), dest, offsetof(Node, key.u32.hi),
  ------------------
  |  |  323|      0|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|      0|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
 1188|      0|		 (int32_t)ir_knum(irkey)->u32.hi);
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1189|    466|    } else {
 1190|    466|      emit_sjcc(as, CC_P, l_next);
 1191|    466|      emit_rmro(as, XO_UCOMISD, key, dest, offsetof(Node, key.n));
 1192|    466|      emit_sjcc(as, CC_AE, l_next);
 1193|       |      /* The type check avoids NaN penalties and complaints from Valgrind. */
 1194|       |#if LJ_64 && !LJ_GC64
 1195|       |      emit_u32(as, LJ_TISNUM);
 1196|       |      emit_rmro(as, XO_ARITHi, XOg_CMP, dest, offsetof(Node, key.it));
 1197|       |#else
 1198|    466|      emit_i8(as, LJ_TISNUM);
  ------------------
  |  |   29|    466|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1199|    466|      emit_rmro(as, XO_ARITHi8, XOg_CMP, dest, offsetof(Node, key.it));
 1200|    466|#endif
 1201|    466|    }
 1202|       |#if LJ_64 && !LJ_GC64
 1203|       |  } else if (irt_islightud(kt)) {
 1204|       |    emit_rmro(as, XO_CMP, key|REX_64, dest, offsetof(Node, key.u64));
 1205|       |#endif
 1206|    466|#if LJ_GC64
 1207|    563|  } else if (irt_isaddr(kt)) {
  ------------------
  |  |  391|    563|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|    563|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 563, False: 0]
  |  |  ------------------
  ------------------
 1208|    563|    if (isk) {
  ------------------
  |  Branch (1208:9): [True: 547, False: 16]
  ------------------
 1209|    547|      TValue k;
 1210|    547|      k.u64 = ((uint64_t)irt_toitype(irkey->t) << 47) | irkey[1].tv.u64;
  ------------------
  |  |  442|    547|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|    547|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 1211|    547|      emit_gmroi(as, XG_ARITHi(XOg_CMP), dest, offsetof(Node, key.u32.lo),
  ------------------
  |  |  323|    547|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|    547|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
 1212|    547|		 k.u32.lo);
 1213|    547|      emit_sjcc(as, CC_NE, l_next);
 1214|    547|      emit_gmroi(as, XG_ARITHi(XOg_CMP), dest, offsetof(Node, key.u32.hi),
  ------------------
  |  |  323|    547|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|    547|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
 1215|    547|		 k.u32.hi);
 1216|    547|    } else {
 1217|     16|      emit_rmro(as, XO_CMP, tmp|REX_64, dest, offsetof(Node, key.u64));
  ------------------
  |  |   15|     16|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|     16|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1218|     16|    }
 1219|    563|  } else {
 1220|      0|    lj_assertA(irt_ispri(kt) && !irt_isnil(kt), "bad HREF key type");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1221|      0|    emit_u32(as, (irt_toitype(kt)<<15)|0x7fff);
  ------------------
  |  |   31|      0|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1222|      0|    emit_rmro(as, XO_ARITHi, XOg_CMP, dest, offsetof(Node, key.it));
 1223|       |#else
 1224|       |  } else {
 1225|       |    if (!irt_ispri(kt)) {
 1226|       |      lj_assertA(irt_isaddr(kt), "bad HREF key type");
 1227|       |      if (isk)
 1228|       |	emit_gmroi(as, XG_ARITHi(XOg_CMP), dest, offsetof(Node, key.gcr),
 1229|       |		   ptr2addr(ir_kgc(irkey)));
 1230|       |      else
 1231|       |	emit_rmro(as, XO_CMP, key, dest, offsetof(Node, key.gcr));
 1232|       |      emit_sjcc(as, CC_NE, l_next);
 1233|       |    }
 1234|       |    lj_assertA(!irt_isnil(kt), "bad HREF key type");
 1235|       |    emit_i8(as, irt_toitype(kt));
 1236|       |    emit_rmro(as, XO_ARITHi8, XOg_CMP, dest, offsetof(Node, key.it));
 1237|       |#endif
 1238|      0|  }
 1239|  1.02k|  emit_sfixup(as, l_loop);
 1240|  1.02k|#if LJ_GC64
 1241|  1.02k|  if (!isk && irt_isaddr(kt)) {
  ------------------
  |  |  391|    482|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|    482|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 16, False: 466]
  |  |  ------------------
  ------------------
  |  Branch (1241:7): [True: 482, False: 547]
  ------------------
 1242|     16|    emit_rr(as, XO_OR, tmp|REX_64, key);
  ------------------
  |  |   15|     16|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|     16|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1243|     16|    emit_loadu64(as, tmp, (uint64_t)irt_toitype(kt) << 47);
  ------------------
  |  |  442|     16|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|     16|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 1244|     16|  }
 1245|  1.02k|#endif
 1246|       |
 1247|       |  /* Load main position relative to tab->node into dest. */
 1248|  1.02k|  khash = isk ? ir_khash(as, irkey) : 1;
  ------------------
  |  Branch (1248:11): [True: 547, False: 482]
  ------------------
 1249|  1.02k|  if (khash == 0) {
  ------------------
  |  Branch (1249:7): [True: 0, False: 1.02k]
  ------------------
 1250|      0|    emit_rmro(as, XO_MOV, dest|REX_GC64, tab, offsetof(GCtab, node));
  ------------------
  |  |   24|      0|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1251|  1.02k|  } else {
 1252|  1.02k|    emit_rmro(as, XO_ARITH(XOg_ADD), dest|REX_GC64, tab, offsetof(GCtab,node));
  ------------------
  |  |  327|  1.02k|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
                  emit_rmro(as, XO_ARITH(XOg_ADD), dest|REX_GC64, tab, offsetof(GCtab,node));
  ------------------
  |  |   24|  1.02k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  1.02k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  1.02k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1253|  1.02k|    emit_shifti(as, XOg_SHL, dest, 3);
  ------------------
  |  |  190|  1.02k|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|  1.02k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1254|  1.02k|    emit_rmrxo(as, XO_LEA, dest, dest, dest, XM_SCALE2, 0);
 1255|  1.02k|    if (isk) {
  ------------------
  |  Branch (1255:9): [True: 547, False: 482]
  ------------------
 1256|    547|      emit_gri(as, XG_ARITHi(XOg_AND), dest, (int32_t)khash);
  ------------------
  |  |  323|    547|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|    547|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
 1257|    547|      emit_rmro(as, XO_MOV, dest, tab, offsetof(GCtab, hmask));
 1258|    547|    } else if (irt_isstr(kt)) {
  ------------------
  |  |  373|    482|#define irt_isstr(t)		(irt_type(t) == IRT_STR)
  |  |  ------------------
  |  |  |  |  365|    482|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (373:23): [True: 16, False: 466]
  |  |  ------------------
  ------------------
 1259|     16|      emit_rmro(as, XO_ARITH(XOg_AND), dest, key, offsetof(GCstr, sid));
  ------------------
  |  |  327|     16|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1260|     16|      emit_rmro(as, XO_MOV, dest, tab, offsetof(GCtab, hmask));
 1261|    466|    } else {  /* Must match with hashrot() in lj_tab.c. */
 1262|    466|      emit_rmro(as, XO_ARITH(XOg_AND), dest, tab, offsetof(GCtab, hmask));
  ------------------
  |  |  327|    466|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1263|    466|      emit_rr(as, XO_ARITH(XOg_SUB), dest, tmp);
  ------------------
  |  |  327|    466|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1264|    466|      emit_shifti(as, XOg_ROL, tmp, HASH_ROT3);
  ------------------
  |  |  190|    466|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|    466|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1265|    466|      emit_rr(as, XO_ARITH(XOg_XOR), dest, tmp);
  ------------------
  |  |  327|    466|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1266|    466|      checkmclim(as);
 1267|    466|      emit_shifti(as, XOg_ROL, dest, HASH_ROT2);
  ------------------
  |  |  190|    466|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|    466|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1268|    466|      emit_rr(as, XO_ARITH(XOg_SUB), tmp, dest);
  ------------------
  |  |  327|    466|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1269|    466|      emit_shifti(as, XOg_ROL, dest, HASH_ROT1);
  ------------------
  |  |  190|    466|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|    466|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1270|    466|      emit_rr(as, XO_ARITH(XOg_XOR), tmp, dest);
  ------------------
  |  |  327|    466|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1271|    466|      if (irt_isnum(kt)) {
  ------------------
  |  |  377|    466|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|    466|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 466, False: 0]
  |  |  ------------------
  ------------------
 1272|    466|	emit_rr(as, XO_ARITH(XOg_ADD), dest, dest);
  ------------------
  |  |  327|    466|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
 1273|    466|#if LJ_64
 1274|    466|	emit_shifti(as, XOg_SHR|REX_64, dest, 32);
  ------------------
  |  |  190|    466|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|    466|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1275|    466|	emit_rr(as, XO_MOV, tmp, dest);
 1276|    466|	emit_rr(as, XO_MOVDto, key|REX_64, dest);
  ------------------
  |  |   15|    466|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|    466|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1277|       |#else
 1278|       |	emit_rmro(as, XO_MOV, dest, RID_ESP, ra_spill(as, irkey)+4);
 1279|       |	emit_rr(as, XO_MOVDto, key, tmp);
 1280|       |#endif
 1281|    466|      } else {
 1282|      0|	emit_rr(as, XO_MOV, tmp, key);
 1283|      0|#if LJ_GC64
 1284|      0|	emit_gri(as, XG_ARITHi(XOg_XOR), dest, irt_toitype(kt) << 15);
  ------------------
  |  |  323|      0|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|      0|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
              	emit_gri(as, XG_ARITHi(XOg_XOR), dest, irt_toitype(kt) << 15);
  ------------------
  |  |  442|      0|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 1285|      0|	if ((as->flags & JIT_F_BMI2)) {
  ------------------
  |  |   25|      0|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|      0|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  |  Branch (1285:6): [True: 0, False: 0]
  ------------------
 1286|      0|	  emit_i8(as, 32);
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1287|      0|	  emit_mrm(as, XV_RORX|VEX_64, dest, key);
  ------------------
  |  |   16|      0|#define VEX_64			0x800000
  ------------------
 1288|      0|	} else {
 1289|      0|	  emit_shifti(as, XOg_SHR|REX_64, dest, 32);
  ------------------
  |  |  190|      0|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1290|      0|	  emit_rr(as, XO_MOV, dest|REX_64, key|REX_64);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
              	  emit_rr(as, XO_MOV, dest|REX_64, key|REX_64);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1291|      0|	}
 1292|       |#else
 1293|       |	emit_rmro(as, XO_LEA, dest, key, HASH_BIAS);
 1294|       |#endif
 1295|      0|      }
 1296|    466|    }
 1297|  1.02k|  }
 1298|  1.02k|}
lj_asm.c:asm_hrefk:
 1301|  11.9k|{
 1302|  11.9k|  IRIns *kslot = IR(ir->op2);
  ------------------
  |  |  116|  11.9k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1303|  11.9k|  IRIns *irkey = IR(kslot->op1);
  ------------------
  |  |  116|  11.9k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1304|  11.9k|  int32_t ofs = (int32_t)(kslot->op2 * sizeof(Node));
 1305|  11.9k|  Reg dest = ra_used(ir) ? ra_dest(as, ir, RSET_GPR) : RID_NONE;
  ------------------
  |  |  351|  11.9k|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  23.8k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  11.9k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 417, False: 11.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|  11.5k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  11.5k|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 0, False: 11.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                Reg dest = ra_used(ir) ? ra_dest(as, ir, RSET_GPR) : RID_NONE;
  ------------------
  |  |   67|    417|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    417|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    417|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    417|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    417|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    417|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    417|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    417|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
                Reg dest = ra_used(ir) ? ra_dest(as, ir, RSET_GPR) : RID_NONE;
  ------------------
  |  |   21|  11.5k|#define RID_NONE		0x80
  ------------------
 1306|  11.9k|  Reg node = ra_alloc1(as, ir->op1, RSET_GPR);
  ------------------
  |  |   67|  11.9k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  11.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  11.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  11.9k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  11.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  11.9k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  11.9k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  11.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1307|       |#if !LJ_64
 1308|       |  MCLabel l_exit;
 1309|       |#endif
 1310|  11.9k|  lj_assertA(ofs % sizeof(Node) == 0, "unaligned HREFK slot");
  ------------------
  |  |  111|  11.9k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  11.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 11.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1311|  11.9k|  if (ra_hasreg(dest)) {
  ------------------
  |  |   28|  11.9k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  11.9k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 417, False: 11.5k]
  |  |  ------------------
  ------------------
 1312|    417|    if (ofs != 0) {
  ------------------
  |  Branch (1312:9): [True: 415, False: 2]
  ------------------
 1313|    415|      if (dest == node)
  ------------------
  |  Branch (1313:11): [True: 0, False: 415]
  ------------------
 1314|      0|	emit_gri(as, XG_ARITHi(XOg_ADD), dest|REX_GC64, ofs);
  ------------------
  |  |  323|      0|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|      0|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
              	emit_gri(as, XG_ARITHi(XOg_ADD), dest|REX_GC64, ofs);
  ------------------
  |  |   24|      0|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1315|    415|      else
 1316|    415|	emit_rmro(as, XO_LEA, dest|REX_GC64, node, ofs);
  ------------------
  |  |   24|    415|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|    415|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|    415|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1317|    415|    } else if (dest != node) {
  ------------------
  |  Branch (1317:16): [True: 2, False: 0]
  ------------------
 1318|      2|      emit_rr(as, XO_MOV, dest|REX_GC64, node);
  ------------------
  |  |   24|      2|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      2|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      2|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1319|      2|    }
 1320|    417|  }
 1321|  11.9k|  asm_guardcc(as, CC_NE);
 1322|  11.9k|#if LJ_64
 1323|  11.9k|  if (!irt_ispri(irkey->t)) {
  ------------------
  |  |  371|  11.9k|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|  11.9k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1323:7): [True: 11.9k, False: 0]
  ------------------
 1324|  11.9k|    Reg key = ra_scratch(as, rset_exclude(RSET_GPR, node));
  ------------------
  |  |   77|  11.9k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  11.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1325|  11.9k|    emit_rmro(as, XO_CMP, key|REX_64, node,
  ------------------
  |  |   15|  11.9k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  11.9k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1326|  11.9k|	       ofs + (int32_t)offsetof(Node, key.u64));
 1327|  11.9k|    lj_assertA(irt_isnum(irkey->t) || irt_isgcv(irkey->t),
  ------------------
  |  |  111|  11.9k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  11.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  23.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 11.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 11.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1328|  11.9k|	       "bad HREFK key type");
 1329|       |    /* Assumes -0.0 is already canonicalized to +0.0. */
 1330|  11.9k|    emit_loadu64(as, key, irt_isnum(irkey->t) ? ir_knum(irkey)->u64 :
  ------------------
  |  |  377|  11.9k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  11.9k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
                  emit_loadu64(as, key, irt_isnum(irkey->t) ? ir_knum(irkey)->u64 :
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1331|  11.9k|#if LJ_GC64
 1332|  11.9k|			  ((uint64_t)irt_toitype(irkey->t) << 47) |
  ------------------
  |  |  442|  11.9k|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|  11.9k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 1333|  11.9k|			  (uint64_t)ir_kgc(irkey));
  ------------------
  |  |  587|  11.9k|#define ir_kgc(ir)	check_exp((ir)->o == IR_KGC, gcref((ir)[LJ_GC64].gcr))
  |  |  ------------------
  |  |  |  |  367|  11.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  11.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1334|       |#else
 1335|       |			  ((uint64_t)irt_toitype(irkey->t) << 32) |
 1336|       |			  (uint64_t)(uint32_t)ptr2addr(ir_kgc(irkey)));
 1337|       |#endif
 1338|  11.9k|  } else {
 1339|      0|    lj_assertA(!irt_isnil(irkey->t), "bad HREFK key type");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1340|      0|#if LJ_GC64
 1341|      0|    emit_i32(as, (irt_toitype(irkey->t)<<15)|0x7fff);
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 1342|      0|    emit_rmro(as, XO_ARITHi, XOg_CMP, node,
 1343|      0|	      ofs + (int32_t)offsetof(Node, key.it));
 1344|       |#else
 1345|       |    emit_i8(as, irt_toitype(irkey->t));
 1346|       |    emit_rmro(as, XO_ARITHi8, XOg_CMP, node,
 1347|       |	      ofs + (int32_t)offsetof(Node, key.it));
 1348|       |#endif
 1349|      0|  }
 1350|       |#else
 1351|       |  l_exit = emit_label(as);
 1352|       |  if (irt_isnum(irkey->t)) {
 1353|       |    /* Assumes -0.0 is already canonicalized to +0.0. */
 1354|       |    emit_gmroi(as, XG_ARITHi(XOg_CMP), node,
 1355|       |	       ofs + (int32_t)offsetof(Node, key.u32.lo),
 1356|       |	       (int32_t)ir_knum(irkey)->u32.lo);
 1357|       |    emit_sjcc(as, CC_NE, l_exit);
 1358|       |    emit_gmroi(as, XG_ARITHi(XOg_CMP), node,
 1359|       |	       ofs + (int32_t)offsetof(Node, key.u32.hi),
 1360|       |	       (int32_t)ir_knum(irkey)->u32.hi);
 1361|       |  } else {
 1362|       |    if (!irt_ispri(irkey->t)) {
 1363|       |      lj_assertA(irt_isgcv(irkey->t), "bad HREFK key type");
 1364|       |      emit_gmroi(as, XG_ARITHi(XOg_CMP), node,
 1365|       |		 ofs + (int32_t)offsetof(Node, key.gcr),
 1366|       |		 ptr2addr(ir_kgc(irkey)));
 1367|       |      emit_sjcc(as, CC_NE, l_exit);
 1368|       |    }
 1369|       |    lj_assertA(!irt_isnil(irkey->t), "bad HREFK key type");
 1370|       |    emit_i8(as, irt_toitype(irkey->t));
 1371|       |    emit_rmro(as, XO_ARITHi8, XOg_CMP, node,
 1372|       |	      ofs + (int32_t)offsetof(Node, key.it));
 1373|       |  }
 1374|       |#endif
 1375|  11.9k|}
lj_asm.c:asm_tvptr:
 1081|  6.74k|{
 1082|  6.74k|  if ((mode & IRTMPREF_IN1)) {
  ------------------
  |  |  228|  6.74k|#define IRTMPREF_IN1		0x01	/* First input value. */
  ------------------
  |  Branch (1082:7): [True: 6.74k, False: 0]
  ------------------
 1083|  6.74k|    IRIns *ir = IR(ref);
  ------------------
  |  |  116|  6.74k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1084|  6.74k|    if (irt_isnum(ir->t)) {
  ------------------
  |  |  377|  6.74k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  6.74k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 6.72k, False: 16]
  |  |  ------------------
  ------------------
 1085|  6.72k|      if (irref_isk(ref) && !(mode & IRTMPREF_OUT1)) {
  ------------------
  |  |  485|  13.4k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 6.72k]
  |  |  ------------------
  ------------------
                    if (irref_isk(ref) && !(mode & IRTMPREF_OUT1)) {
  ------------------
  |  |  229|      0|#define IRTMPREF_OUT1		0x02	/* First output value. */
  ------------------
  |  Branch (1085:29): [True: 0, False: 0]
  ------------------
 1086|       |	/* Use the number constant itself as a TValue. */
 1087|      0|	emit_loada(as, dest, ir_knum(ir));
  ------------------
  |  |  303|      0|  emit_loadu64(as, (r), (uintptr_t)(addr))
  |  |  ------------------
  |  |  |  Branch (303:37): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1088|      0|	return;
 1089|      0|      }
 1090|  6.72k|      emit_rmro(as, XO_MOVSDto, ra_alloc1(as, ref, RSET_FPR), dest, 0);
  ------------------
  |  |   70|  6.72k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  6.72k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  6.72k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1091|  6.72k|    } else {
 1092|     16|#if LJ_GC64
 1093|     16|      if (irref_isk(ref)) {
  ------------------
  |  |  485|     16|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 16, False: 0]
  |  |  ------------------
  ------------------
 1094|     16|	TValue k;
 1095|     16|	lj_ir_kvalue(as->J->L, &k, ir);
 1096|     16|	emit_movmroi(as, dest, 4, k.u32.hi);
 1097|     16|	emit_movmroi(as, dest, 0, k.u32.lo);
 1098|     16|      } else {
 1099|       |	/* TODO: 64 bit store + 32 bit load-modify-store is suboptimal. */
 1100|      0|	Reg src = ra_alloc1(as, ref, rset_exclude(RSET_GPR, dest));
  ------------------
  |  |   77|      0|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1101|      0|	if (irt_is64(ir->t)) {
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1102|      0|	  emit_u32(as, irt_toitype(ir->t) << 15);
  ------------------
  |  |   31|      0|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1103|      0|	  emit_rmro(as, XO_ARITHi, XOg_OR, dest, 4);
 1104|      0|	} else {
 1105|      0|	  emit_movmroi(as, dest, 4, (irt_toitype(ir->t) << 15));
  ------------------
  |  |  442|      0|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
 1106|      0|	}
 1107|      0|	emit_movtomro(as, REX_64IR(ir, src), dest, 0);
  ------------------
  |  |  263|      0|  emit_rmro(as, XO_MOVto, (r), (base), (ofs))
  |  |  ------------------
  |  |  |  Branch (263:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1108|      0|      }
 1109|       |#else
 1110|       |      if (!irref_isk(ref)) {
 1111|       |	Reg src = ra_alloc1(as, ref, rset_exclude(RSET_GPR, dest));
 1112|       |	emit_movtomro(as, REX_64IR(ir, src), dest, 0);
 1113|       |      } else if (!irt_ispri(ir->t)) {
 1114|       |	emit_movmroi(as, dest, 0, ir->i);
 1115|       |      }
 1116|       |      if (!(LJ_64 && irt_islightud(ir->t)))
 1117|       |	emit_movmroi(as, dest, 4, irt_toitype(ir->t));
 1118|       |#endif
 1119|     16|    }
 1120|  6.74k|  }
 1121|  6.74k|  emit_loada(as, dest, &J2G(as->J)->tmptv); /* g->tmptv holds the TValue(s). */
  ------------------
  |  |  303|  6.74k|  emit_loadu64(as, (r), (uintptr_t)(addr))
  ------------------
 1122|  6.74k|}
lj_asm.c:asm_uref:
 1378|    117|{
 1379|    117|  Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|    117|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    117|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    117|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    117|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    117|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    117|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    117|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    117|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1380|    117|  int guarded = (irt_t(ir->t) & (IRT_GUARD|IRT_TYPE)) == (IRT_GUARD|IRT_PGC);
  ------------------
  |  |  364|    117|#define irt_t(t)		((IRType)(t).irt)
  ------------------
 1381|    117|  if (irref_isk(ir->op1) && !guarded) {
  ------------------
  |  |  485|    234|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 54, False: 63]
  |  |  ------------------
  ------------------
  |  Branch (1381:29): [True: 54, False: 0]
  ------------------
 1382|    108|    GCfunc *fn = ir_kfunc(IR(ir->op1));
  ------------------
  |  |  590|     54|#define ir_kfunc(ir)	(gco2func(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  769|     54|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    108|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     54|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    108|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 54, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 54, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     54|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 54, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1383|     54|    MRef *v = &gcref(fn->l.uvptr[(ir->op2 >> 8)])->uv.v;
  ------------------
  |  |   67|     54|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
 1384|    108|    emit_rma(as, XO_MOV, dest|REX_GC64, v);
  ------------------
  |  |   24|     54|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|     54|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|     54|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1385|    108|  } else {
 1386|     63|    Reg uv = ra_scratch(as, RSET_GPR);
  ------------------
  |  |   67|     63|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     63|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     63|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     63|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     63|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     63|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     63|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     63|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1387|     63|    if (ir->o == IR_UREFC)
  ------------------
  |  Branch (1387:9): [True: 0, False: 63]
  ------------------
 1388|      0|      emit_rmro(as, XO_LEA, dest|REX_GC64, uv, offsetof(GCupval, tv));
  ------------------
  |  |   24|      0|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1389|     63|    else
 1390|     63|      emit_rmro(as, XO_MOV, dest|REX_GC64, uv, offsetof(GCupval, v));
  ------------------
  |  |   24|     63|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|     63|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|     63|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|     63|    if (guarded) {
  ------------------
  |  Branch (1391:9): [True: 0, False: 63]
  ------------------
 1392|      0|      asm_guardcc(as, ir->o == IR_UREFC ? CC_E : CC_NE);
  ------------------
  |  Branch (1392:23): [True: 0, False: 0]
  ------------------
 1393|      0|      emit_i8(as, 0);
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1394|      0|      emit_rmro(as, XO_ARITHib, XOg_CMP, uv, offsetof(GCupval, closed));
 1395|      0|    }
 1396|     63|    if (irref_isk(ir->op1)) {
  ------------------
  |  |  485|     63|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 63]
  |  |  ------------------
  ------------------
 1397|      0|      GCfunc *fn = ir_kfunc(IR(ir->op1));
  ------------------
  |  |  590|      0|#define ir_kfunc(ir)	(gco2func(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  769|      0|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1398|      0|      GCobj *o = gcref(fn->l.uvptr[(ir->op2 >> 8)]);
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
 1399|      0|      emit_loada(as, uv, o);
  ------------------
  |  |  303|      0|  emit_loadu64(as, (r), (uintptr_t)(addr))
  ------------------
 1400|     63|    } else {
 1401|     63|      emit_rmro(as, XO_MOV, uv|REX_GC64, ra_alloc1(as, ir->op1, RSET_GPR),
  ------------------
  |  |   24|     63|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|     63|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|     63|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    emit_rmro(as, XO_MOV, uv|REX_GC64, ra_alloc1(as, ir->op1, RSET_GPR),
  ------------------
  |  |   67|     63|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     63|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     63|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     63|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     63|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     63|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     63|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     63|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1402|     63|	        (int32_t)offsetof(GCfuncL, uvptr) +
 1403|     63|	        (int32_t)sizeof(MRef) * (int32_t)(ir->op2 >> 8));
 1404|     63|    }
 1405|     63|  }
 1406|    117|}
lj_asm.c:asm_strref:
 1416|  12.2k|{
 1417|  12.2k|  Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|  12.2k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  12.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  12.2k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  12.2k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  12.2k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1418|  12.2k|  asm_fusestrref(as, ir, RSET_GPR);
  ------------------
  |  |   67|  12.2k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  12.2k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  12.2k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  12.2k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  12.2k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1419|  12.2k|  if (as->mrm.base == RID_NONE)
  ------------------
  |  |   21|  12.2k|#define RID_NONE		0x80
  ------------------
  |  Branch (1419:7): [True: 0, False: 12.2k]
  ------------------
 1420|      0|    emit_loadi(as, dest, as->mrm.ofs);
 1421|  12.2k|  else if (as->mrm.base == dest && as->mrm.idx == RID_NONE)
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  |  Branch (1421:12): [True: 0, False: 12.2k]
  |  Branch (1421:36): [True: 0, False: 0]
  ------------------
 1422|      0|    emit_gri(as, XG_ARITHi(XOg_ADD), dest|REX_GC64, as->mrm.ofs);
  ------------------
  |  |  323|      0|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|      0|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
                  emit_gri(as, XG_ARITHi(XOg_ADD), dest|REX_GC64, as->mrm.ofs);
  ------------------
  |  |   24|      0|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1423|  12.2k|  else
 1424|  12.2k|    emit_mrm(as, XO_LEA, dest|REX_GC64, RID_MRM);
  ------------------
  |  |   24|  12.2k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  12.2k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  12.2k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1425|  12.2k|}
lj_asm.c:asm_fusestrref:
  284|  12.2k|{
  285|  12.2k|  IRIns *irr;
  286|  12.2k|  lj_assertA(ir->o == IR_STRREF, "bad IR op %d", ir->o);
  ------------------
  |  |  111|  12.2k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  12.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  12.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 12.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  12.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  287|  12.2k|  as->mrm.base = as->mrm.idx = RID_NONE;
  ------------------
  |  |   21|  12.2k|#define RID_NONE		0x80
  ------------------
  288|  12.2k|  as->mrm.scale = XM_SCALE1;
  289|  12.2k|  as->mrm.ofs = sizeof(GCstr);
  290|  12.2k|  if (!LJ_GC64 && irref_isk(ir->op1)) {
  ------------------
  |  |  562|  24.5k|#define LJ_GC64			1
  ------------------
                if (!LJ_GC64 && irref_isk(ir->op1)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (290:7): [Folded - Ignored]
  ------------------
  291|      0|    as->mrm.ofs += IR(ir->op1)->i;
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  292|  12.2k|  } else {
  293|  12.2k|    Reg r = ra_alloc1(as, ir->op1, allow);
  294|  12.2k|    rset_clear(allow, r);
  ------------------
  |  |   76|  12.2k|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  12.2k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  295|  12.2k|    as->mrm.base = (uint8_t)r;
  296|  12.2k|  }
  297|  12.2k|  irr = IR(ir->op2);
  ------------------
  |  |  116|  12.2k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  298|  12.2k|  if (irref_isk(ir->op2)) {
  ------------------
  |  |  485|  12.2k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 12.1k, False: 166]
  |  |  ------------------
  ------------------
  299|  12.1k|    as->mrm.ofs += irr->i;
  300|  12.1k|  } else {
  301|    166|    Reg r;
  302|       |    /* Fuse a constant add into the offset, e.g. string.sub(s, i+10). */
  303|    166|    if (!LJ_64 &&  /* Has bad effects with negative index on x64. */
  ------------------
  |  |  640|    332|#define LJ_64			1
  ------------------
  |  Branch (303:9): [Folded - Ignored]
  ------------------
  304|    166|	mayfuse(as, ir->op2) && irr->o == IR_ADD && irref_isk(irr->op2)) {
  ------------------
  |  |  127|    166|#define mayfuse(as, ref)	((ref) > as->fuseref)
  |  |  ------------------
  |  |  |  Branch (127:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	mayfuse(as, ir->op2) && irr->o == IR_ADD && irref_isk(irr->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (304:26): [True: 0, False: 0]
  ------------------
  305|      0|      as->mrm.ofs += IR(irr->op2)->i;
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  306|      0|      r = ra_alloc1(as, irr->op1, allow);
  307|    166|    } else {
  308|    166|      r = ra_alloc1(as, ir->op2, allow);
  309|    166|    }
  310|    166|    if (as->mrm.base == RID_NONE)
  ------------------
  |  |   21|    166|#define RID_NONE		0x80
  ------------------
  |  Branch (310:9): [True: 0, False: 166]
  ------------------
  311|      0|      as->mrm.base = (uint8_t)r;
  312|    166|    else
  313|    166|      as->mrm.idx = (uint8_t)r;
  314|    166|  }
  315|  12.2k|}
lj_asm.c:asm_ahuvload:
 1550|  15.2k|{
 1551|  15.2k|#if LJ_GC64
 1552|  15.2k|  Reg tmp = RID_NONE;
  ------------------
  |  |   21|  15.2k|#define RID_NONE		0x80
  ------------------
 1553|  15.2k|#endif
 1554|  15.2k|  lj_assertA(irt_isnum(ir->t) || irt_ispri(ir->t) || irt_isaddr(ir->t) ||
  ------------------
  |  |  111|  15.2k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  15.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  67.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.60k, False: 10.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 50, False: 10.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.6k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  15.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1555|  15.2k|	     (LJ_DUALNUM && irt_isint(ir->t)),
 1556|  15.2k|	     "bad load type %d", irt_type(ir->t));
 1557|       |#if LJ_64 && !LJ_GC64
 1558|       |  if (irt_islightud(ir->t)) {
 1559|       |    Reg dest = asm_load_lightud64(as, ir, 1);
 1560|       |    if (ra_hasreg(dest)) {
 1561|       |      checkmclim(as);
 1562|       |      asm_fuseahuref(as, ir->op1, RSET_GPR);
 1563|       |      if (ir->o == IR_VLOAD) as->mrm.ofs += 8 * ir->op2;
 1564|       |      emit_mrm(as, XO_MOV, dest|REX_64, RID_MRM);
 1565|       |    }
 1566|       |    return;
 1567|       |  } else
 1568|       |#endif
 1569|  15.2k|  if (ra_used(ir)) {
  ------------------
  |  |  351|  15.2k|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|  30.5k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  15.2k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 14.4k, False: 826]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|    826|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|    826|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 679, False: 147]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1570|  15.1k|    RegSet allow = irt_isnum(ir->t) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |  377|  15.1k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  15.1k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 4.51k, False: 10.6k]
  |  |  ------------------
  ------------------
                  RegSet allow = irt_isnum(ir->t) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |   70|  4.51k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  4.51k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.51k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  RegSet allow = irt_isnum(ir->t) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |   67|  10.6k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  10.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  10.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  10.6k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  10.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  10.6k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  10.6k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  10.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1571|  15.1k|    Reg dest = ra_dest(as, ir, allow);
 1572|  15.1k|    asm_fuseahuref(as, ir->op1, RSET_GPR);
  ------------------
  |  |   67|  15.1k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  15.1k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  15.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  15.1k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  15.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  15.1k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  15.1k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  15.1k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1573|  15.1k|    if (ir->o == IR_VLOAD) as->mrm.ofs += 8 * ir->op2;
  ------------------
  |  Branch (1573:9): [True: 1.62k, False: 13.4k]
  ------------------
 1574|  15.1k|#if LJ_GC64
 1575|  15.1k|    if (irt_isaddr(ir->t)) {
  ------------------
  |  |  391|  15.1k|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|  15.1k|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 10.6k, False: 4.51k]
  |  |  ------------------
  ------------------
 1576|  10.6k|      emit_shifti(as, XOg_SHR|REX_64, dest, 17);
  ------------------
  |  |  190|  10.6k|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|  10.6k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1577|  10.6k|      asm_guardcc(as, CC_NE);
 1578|  10.6k|      emit_i8(as, irt_toitype(ir->t));
  ------------------
  |  |   29|  10.6k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1579|  10.6k|      emit_rr(as, XO_ARITHi8, XOg_CMP, dest);
 1580|  10.6k|      emit_i8(as, XI_O16);
  ------------------
  |  |   29|  10.6k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1581|  10.6k|      if ((as->flags & JIT_F_BMI2)) {
  ------------------
  |  |   25|  10.6k|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|  10.6k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  |  Branch (1581:11): [True: 10.6k, False: 0]
  ------------------
 1582|  10.6k|	emit_i8(as, 47);
  ------------------
  |  |   29|  10.6k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1583|  10.6k|	emit_mrm(as, XV_RORX|VEX_64, dest, RID_MRM);
  ------------------
  |  |   16|  10.6k|#define VEX_64			0x800000
  ------------------
 1584|  10.6k|      } else {
 1585|      0|	emit_shifti(as, XOg_ROR|REX_64, dest, 47);
  ------------------
  |  |  190|      0|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1586|      0|	emit_mrm(as, XO_MOV, dest|REX_64, RID_MRM);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1587|      0|      }
 1588|  10.6k|      return;
 1589|  10.6k|    } else
 1590|  4.51k|#endif
 1591|  4.51k|    emit_mrm(as, dest < RID_MAX_GPR ? XO_MOV : XO_MOVSD, dest, RID_MRM);
  ------------------
  |  Branch (1591:18): [True: 0, False: 4.51k]
  ------------------
 1592|  15.1k|  } else {
 1593|    147|    RegSet gpr = RSET_GPR;
  ------------------
  |  |   67|    147|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    147|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    147|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    147|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    147|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    147|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    147|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    147|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1594|    147|#if LJ_GC64
 1595|    147|    if (irt_isaddr(ir->t)) {
  ------------------
  |  |  391|    147|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|    147|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 2, False: 145]
  |  |  ------------------
  ------------------
 1596|      2|      tmp = ra_scratch(as, RSET_GPR);
  ------------------
  |  |   67|      2|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      2|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      2|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      2|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      2|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      2|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      2|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      2|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1597|      2|      gpr = rset_exclude(gpr, tmp);
  ------------------
  |  |   77|      2|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      2|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1598|      2|    }
 1599|    147|#endif
 1600|    147|    asm_fuseahuref(as, ir->op1, gpr);
 1601|    147|    if (ir->o == IR_VLOAD) as->mrm.ofs += 8 * ir->op2;
  ------------------
  |  Branch (1601:9): [True: 0, False: 147]
  ------------------
 1602|    147|  }
 1603|       |  /* Always do the type check, even if the load result is unused. */
 1604|  4.65k|  as->mrm.ofs += 4;
 1605|  4.65k|  asm_guardcc(as, irt_isnum(ir->t) ? CC_AE : CC_NE);
  ------------------
  |  |  377|  4.65k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  4.65k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 4.60k, False: 52]
  |  |  ------------------
  ------------------
 1606|  4.65k|  if (LJ_64 && irt_type(ir->t) >= IRT_NUM) {
  ------------------
  |  |  640|  9.31k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_64 && irt_type(ir->t) >= IRT_NUM) {
  ------------------
  |  |  365|  4.65k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
  |  Branch (1606:16): [True: 4.60k, False: 52]
  ------------------
 1607|  4.60k|    lj_assertA(irt_isinteger(ir->t) || irt_isnum(ir->t),
  ------------------
  |  |  111|  4.60k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  4.60k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.21k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 4.60k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.60k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1608|  4.60k|	       "bad load type %d", irt_type(ir->t));
 1609|  4.60k|    checkmclim(as);
 1610|  4.60k|#if LJ_GC64
 1611|  4.60k|    emit_u32(as, LJ_TISNUM << 15);
  ------------------
  |  |   31|  4.60k|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1612|       |#else
 1613|       |    emit_u32(as, LJ_TISNUM);
 1614|       |#endif
 1615|  4.60k|    emit_mrm(as, XO_ARITHi, XOg_CMP, RID_MRM);
 1616|  4.60k|#if LJ_GC64
 1617|  4.60k|  } else if (irt_isaddr(ir->t)) {
  ------------------
  |  |  391|     52|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|     52|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 2, False: 50]
  |  |  ------------------
  ------------------
 1618|      2|    as->mrm.ofs -= 4;
 1619|      2|    emit_i8(as, irt_toitype(ir->t));
  ------------------
  |  |   29|      2|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1620|      2|    emit_mrm(as, XO_ARITHi8, XOg_CMP, tmp);
 1621|      2|    emit_shifti(as, XOg_SAR|REX_64, tmp, 47);
  ------------------
  |  |  190|      2|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|      2|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1622|      2|    emit_mrm(as, XO_MOV, tmp|REX_64, RID_MRM);
  ------------------
  |  |   15|      2|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      2|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1623|     50|  } else if (irt_isnil(ir->t)) {
  ------------------
  |  |  370|     50|#define irt_isnil(t)		(irt_type(t) == IRT_NIL)
  |  |  ------------------
  |  |  |  |  365|     50|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (370:23): [True: 43, False: 7]
  |  |  ------------------
  ------------------
 1624|     43|    as->mrm.ofs -= 4;
 1625|     43|    emit_i8(as, -1);
  ------------------
  |  |   29|     43|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1626|     43|    emit_mrm(as, XO_ARITHi8, XOg_CMP|REX_64, RID_MRM);
  ------------------
  |  |   15|     43|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|     43|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1627|     43|  } else {
 1628|      7|    emit_u32(as, (irt_toitype(ir->t) << 15) | 0x7fff);
  ------------------
  |  |   31|      7|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1629|      7|    emit_mrm(as, XO_ARITHi, XOg_CMP, RID_MRM);
 1630|       |#else
 1631|       |  } else {
 1632|       |    emit_i8(as, irt_toitype(ir->t));
 1633|       |    emit_mrm(as, XO_ARITHi8, XOg_CMP, RID_MRM);
 1634|       |#endif
 1635|      7|  }
 1636|  4.65k|}
lj_asm.c:asm_fxload:
 1430|  35.6k|{
 1431|  35.6k|  Reg dest = ra_dest(as, ir, irt_isfp(ir->t) ? RSET_FPR : RSET_GPR);
  ------------------
  |  |  388|  35.6k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|  71.3k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  35.6k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 35.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|  35.6k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  35.6k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 35.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                Reg dest = ra_dest(as, ir, irt_isfp(ir->t) ? RSET_FPR : RSET_GPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                Reg dest = ra_dest(as, ir, irt_isfp(ir->t) ? RSET_FPR : RSET_GPR);
  ------------------
  |  |   67|  35.6k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  35.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  35.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  35.6k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  35.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  35.6k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  35.6k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  35.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1432|  35.6k|  x86Op xo;
 1433|  35.6k|  if (ir->o == IR_FLOAD)
  ------------------
  |  Branch (1433:7): [True: 35.6k, False: 0]
  ------------------
 1434|  35.6k|    asm_fusefref(as, ir, RSET_GPR);
  ------------------
  |  |   67|  35.6k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  35.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  35.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  35.6k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  35.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  35.6k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  35.6k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  35.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1435|      0|  else
 1436|      0|    asm_fusexref(as, ir->op1, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1437|       |  /* ir->op2 is ignored -- unaligned loads are ok on x86. */
 1438|  35.6k|  switch (irt_type(ir->t)) {
  ------------------
  |  |  365|  35.6k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
 1439|      0|  case IRT_I8: xo = XO_MOVSXb; break;
  ------------------
  |  Branch (1439:3): [True: 0, False: 35.6k]
  ------------------
 1440|      0|  case IRT_U8: xo = XO_MOVZXb; break;
  ------------------
  |  Branch (1440:3): [True: 0, False: 35.6k]
  ------------------
 1441|      0|  case IRT_I16: xo = XO_MOVSXw; break;
  ------------------
  |  Branch (1441:3): [True: 0, False: 35.6k]
  ------------------
 1442|      0|  case IRT_U16: xo = XO_MOVZXw; break;
  ------------------
  |  Branch (1442:3): [True: 0, False: 35.6k]
  ------------------
 1443|      0|  case IRT_NUM: xo = XO_MOVSD; break;
  ------------------
  |  Branch (1443:3): [True: 0, False: 35.6k]
  ------------------
 1444|      0|  case IRT_FLOAT: xo = XO_MOVSS; break;
  ------------------
  |  Branch (1444:3): [True: 0, False: 35.6k]
  ------------------
 1445|  35.6k|  default:
  ------------------
  |  Branch (1445:3): [True: 35.6k, False: 0]
  ------------------
 1446|  35.6k|    if (LJ_64 && irt_is64(ir->t))
  ------------------
  |  |  640|  71.3k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_64 && irt_is64(ir->t))
  ------------------
  |  |  409|  35.6k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  35.6k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  35.6k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  35.6k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  35.6k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  35.6k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 22.5k, False: 13.1k]
  |  |  ------------------
  ------------------
 1447|  22.5k|      dest |= REX_64;
  ------------------
  |  |   15|  22.5k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  22.5k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1448|  13.1k|    else
 1449|  35.6k|      lj_assertA(irt_isint(ir->t) || irt_isu32(ir->t) || irt_isaddr(ir->t),
  ------------------
  |  |  111|  35.6k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  13.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  26.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 13.1k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  13.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1450|  35.6k|		 "unsplit 64 bit load");
 1451|  35.6k|    xo = XO_MOV;
 1452|  35.6k|    break;
 1453|  35.6k|  }
 1454|  35.6k|  emit_mrm(as, xo, dest, RID_MRM);
 1455|  35.6k|}
lj_asm.c:asm_sload:
 1708|  66.9k|{
 1709|  66.9k|  int32_t ofs = 8*((int32_t)ir->op1-1-LJ_FR2) +
  ------------------
  |  |  569|  66.9k|#define LJ_FR2			1
  ------------------
 1710|  66.9k|		(!LJ_FR2 && (ir->op2 & IRSLOAD_FRAME) ? 4 : 0);
  ------------------
  |  |  569|   133k|#define LJ_FR2			1
  ------------------
              		(!LJ_FR2 && (ir->op2 & IRSLOAD_FRAME) ? 4 : 0);
  ------------------
  |  |  234|      0|#define IRSLOAD_FRAME		0x02	/* Load 32 bits of ftsz. */
  ------------------
  |  Branch (1710:4): [Folded - Ignored]
  |  Branch (1710:15): [True: 0, False: 0]
  ------------------
 1711|  66.9k|  IRType1 t = ir->t;
 1712|  66.9k|  Reg base;
 1713|  66.9k|  lj_assertA(!(ir->op2 & IRSLOAD_PARENT),
  ------------------
  |  |  111|  66.9k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  66.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  66.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 66.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  66.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1714|  66.9k|	     "bad parent SLOAD"); /* Handled by asm_head_side(). */
 1715|  66.9k|  lj_assertA(irt_isguard(t) || !(ir->op2 & IRSLOAD_TYPECHECK),
  ------------------
  |  |  111|  66.9k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  66.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  89.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 44.0k, False: 22.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 22.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  66.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1716|  66.9k|	     "inconsistent SLOAD variant");
 1717|  66.9k|  lj_assertA(LJ_DUALNUM ||
  ------------------
  |  |  111|  66.9k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  66.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   211k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 56.5k, False: 10.4k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  66.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1718|  66.9k|	     !irt_isint(t) ||
 1719|  66.9k|	     (ir->op2 & (IRSLOAD_CONVERT|IRSLOAD_FRAME|IRSLOAD_KEYINDEX)),
 1720|  66.9k|	     "bad SLOAD type");
 1721|  66.9k|  if ((ir->op2 & IRSLOAD_CONVERT) && irt_isguard(t) && irt_isint(t)) {
  ------------------
  |  |  236|  66.9k|#define IRSLOAD_CONVERT		0x08	/* Number to integer conversion. */
  ------------------
                if ((ir->op2 & IRSLOAD_CONVERT) && irt_isguard(t) && irt_isint(t)) {
  ------------------
  |  |  444|  77.0k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 848, False: 9.22k]
  |  |  ------------------
  ------------------
                if ((ir->op2 & IRSLOAD_CONVERT) && irt_isguard(t) && irt_isint(t)) {
  ------------------
  |  |  378|    848|#define irt_isint(t)		(irt_type(t) == IRT_INT)
  |  |  ------------------
  |  |  |  |  365|    848|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (378:23): [True: 848, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1721:7): [True: 10.0k, False: 56.8k]
  ------------------
 1722|    848|    Reg left = ra_scratch(as, RSET_FPR);
  ------------------
  |  |   70|    848|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|    848|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    848|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1723|    848|    asm_tointg(as, ir, left);  /* Frees dest reg. Do this before base alloc. */
 1724|    848|    base = ra_alloc1(as, REF_BASE, RSET_GPR);
  ------------------
  |  |   67|    848|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    848|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    848|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    848|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    848|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    848|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    848|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    848|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1725|    848|    emit_rmro(as, XO_MOVSD, left, base, ofs);
 1726|    848|    t.irt = IRT_NUM;  /* Continue with a regular number type check. */
 1727|       |#if LJ_64 && !LJ_GC64
 1728|       |  } else if (irt_islightud(t)) {
 1729|       |    Reg dest = asm_load_lightud64(as, ir, (ir->op2 & IRSLOAD_TYPECHECK));
 1730|       |    if (ra_hasreg(dest)) {
 1731|       |      base = ra_alloc1(as, REF_BASE, RSET_GPR);
 1732|       |      emit_rmro(as, XO_MOV, dest|REX_64, base, ofs);
 1733|       |    }
 1734|       |    return;
 1735|       |#endif
 1736|  66.1k|  } else if (ra_used(ir)) {
  ------------------
  |  |  351|  66.1k|#define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   28|   132k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  66.1k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (28:23): [True: 51.4k, False: 14.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define ra_used(ir)		(ra_hasreg((ir)->r) || ra_hasspill((ir)->s))
  |  |  ------------------
  |  |  |  |   39|  14.6k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  14.6k|#define SPS_NONE		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (39:25): [True: 10.9k, False: 3.72k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1737|  62.3k|    RegSet allow = irt_isnum(t) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |  377|  62.3k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  62.3k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 12.5k, False: 49.8k]
  |  |  ------------------
  ------------------
                  RegSet allow = irt_isnum(t) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |   70|  12.5k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  12.5k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  12.5k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  RegSet allow = irt_isnum(t) ? RSET_FPR : RSET_GPR;
  ------------------
  |  |   67|  49.8k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  49.8k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  49.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  49.8k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  49.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  49.8k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  49.8k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  49.8k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1738|  62.3k|    Reg dest = ra_dest(as, ir, allow);
 1739|  62.3k|    base = ra_alloc1(as, REF_BASE, RSET_GPR);
  ------------------
  |  |   67|  62.3k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  62.3k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  62.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  62.3k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  62.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  62.3k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  62.3k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  62.3k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1740|  62.3k|    lj_assertA(irt_isnum(t) || irt_isint(t) || irt_isaddr(t),
  ------------------
  |  |  111|  62.3k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  62.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   214k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 12.5k, False: 49.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 9.57k, False: 40.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 40.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  62.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1741|  62.3k|	       "bad SLOAD type %d", irt_type(t));
 1742|  62.3k|    if ((ir->op2 & IRSLOAD_CONVERT)) {
  ------------------
  |  |  236|  62.3k|#define IRSLOAD_CONVERT		0x08	/* Number to integer conversion. */
  ------------------
  |  Branch (1742:9): [True: 9.22k, False: 53.1k]
  ------------------
 1743|  9.22k|      t.irt = irt_isint(t) ? IRT_NUM : IRT_INT;  /* Check for original type. */
  ------------------
  |  |  378|  9.22k|#define irt_isint(t)		(irt_type(t) == IRT_INT)
  |  |  ------------------
  |  |  |  |  365|  9.22k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (378:23): [True: 9.22k, False: 0]
  |  |  ------------------
  ------------------
 1744|  9.22k|      emit_rmro(as, irt_isint(t) ? XO_CVTSI2SD : XO_CVTTSD2SI, dest, base, ofs);
  ------------------
  |  |  378|  9.22k|#define irt_isint(t)		(irt_type(t) == IRT_INT)
  |  |  ------------------
  |  |  |  |  365|  9.22k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (378:23): [True: 0, False: 9.22k]
  |  |  ------------------
  ------------------
 1745|  53.1k|    } else {
 1746|  53.1k|#if LJ_GC64
 1747|  53.1k|      if (irt_isaddr(t)) {
  ------------------
  |  |  391|  53.1k|#define irt_isaddr(t)		(irt_typerange((t), IRT_LIGHTUD, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  368|  53.1k|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (391:24): [True: 40.3k, False: 12.8k]
  |  |  ------------------
  ------------------
 1748|       |	/* LJ_GC64 type check + tag removal without BMI2 and with BMI2:
 1749|       |	**
 1750|       |	**  mov r64, [addr]    rorx r64, [addr], 47
 1751|       |	**  ror r64, 47
 1752|       |	**  cmp r16, itype     cmp r16, itype
 1753|       |	**  jne ->exit         jne ->exit
 1754|       |	**  shr r64, 16        shr r64, 16
 1755|       |	*/
 1756|  40.3k|	emit_shifti(as, XOg_SHR|REX_64, dest, 17);
  ------------------
  |  |  190|  40.3k|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|  40.3k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1757|  40.3k|	if ((ir->op2 & IRSLOAD_TYPECHECK)) {
  ------------------
  |  |  235|  40.3k|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
  |  Branch (1757:6): [True: 31.2k, False: 9.08k]
  ------------------
 1758|  31.2k|	  asm_guardcc(as, CC_NE);
 1759|  31.2k|	  emit_i8(as, irt_toitype(t));
  ------------------
  |  |   29|  31.2k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1760|  31.2k|	  emit_rr(as, XO_ARITHi8, XOg_CMP, dest);
 1761|  31.2k|	  emit_i8(as, XI_O16);
  ------------------
  |  |   29|  31.2k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1762|  31.2k|	}
 1763|  40.3k|	if ((as->flags & JIT_F_BMI2)) {
  ------------------
  |  |   25|  40.3k|#define JIT_F_BMI2		(JIT_F_CPU << 2)
  |  |  ------------------
  |  |  |  |   19|  40.3k|#define JIT_F_CPU		0x00000010
  |  |  ------------------
  ------------------
  |  Branch (1763:6): [True: 40.3k, False: 0]
  ------------------
 1764|  40.3k|	  emit_i8(as, 47);
  ------------------
  |  |   29|  40.3k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1765|  40.3k|	  emit_rmro(as, XV_RORX|VEX_64, dest, base, ofs);
  ------------------
  |  |   16|  40.3k|#define VEX_64			0x800000
  ------------------
 1766|  40.3k|	} else {
 1767|      0|	  if ((ir->op2 & IRSLOAD_TYPECHECK))
  ------------------
  |  |  235|      0|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
  |  Branch (1767:8): [True: 0, False: 0]
  ------------------
 1768|      0|	    emit_shifti(as, XOg_ROR|REX_64, dest, 47);
  ------------------
  |  |  190|      0|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1769|      0|	  else
 1770|      0|	    emit_shifti(as, XOg_SHL|REX_64, dest, 17);
  ------------------
  |  |  190|      0|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1771|      0|	  emit_rmro(as, XO_MOV, dest|REX_64, base, ofs);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1772|      0|	}
 1773|  40.3k|	return;
 1774|  40.3k|      } else
 1775|  12.8k|#endif
 1776|  12.8k|      emit_rmro(as, irt_isnum(t) ? XO_MOVSD : XO_MOV, dest, base, ofs);
  ------------------
  |  |  377|  12.8k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  12.8k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 12.5k, False: 349]
  |  |  ------------------
  ------------------
 1777|  53.1k|    }
 1778|  62.3k|  } else {
 1779|  3.72k|    if (!(ir->op2 & IRSLOAD_TYPECHECK))
  ------------------
  |  |  235|  3.72k|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
  |  Branch (1779:9): [True: 0, False: 3.72k]
  ------------------
 1780|      0|      return;  /* No type check: avoid base alloc. */
 1781|  3.72k|    base = ra_alloc1(as, REF_BASE, RSET_GPR);
  ------------------
  |  |   67|  3.72k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  3.72k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  3.72k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  3.72k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  3.72k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  3.72k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  3.72k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  3.72k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1782|  3.72k|  }
 1783|  26.6k|  if ((ir->op2 & IRSLOAD_TYPECHECK)) {
  ------------------
  |  |  235|  26.6k|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
  |  Branch (1783:7): [True: 12.0k, False: 14.6k]
  ------------------
 1784|       |    /* Need type check, even if the load result is unused. */
 1785|  12.0k|    asm_guardcc(as, irt_isnum(t) ? CC_AE : CC_NE);
  ------------------
  |  |  377|  12.0k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  12.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 9.25k, False: 2.75k]
  |  |  ------------------
  ------------------
 1786|  12.0k|    if ((LJ_64 && irt_type(t) >= IRT_NUM) || (ir->op2 & IRSLOAD_KEYINDEX)) {
  ------------------
  |  |  640|  24.0k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if ((LJ_64 && irt_type(t) >= IRT_NUM) || (ir->op2 & IRSLOAD_KEYINDEX)) {
  ------------------
  |  |  365|  12.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
                  if ((LJ_64 && irt_type(t) >= IRT_NUM) || (ir->op2 & IRSLOAD_KEYINDEX)) {
  ------------------
  |  |  239|  2.40k|#define IRSLOAD_KEYINDEX	0x40	/* Table traversal key index. */
  ------------------
  |  Branch (1786:19): [True: 9.60k, False: 2.40k]
  |  Branch (1786:46): [True: 0, False: 2.40k]
  ------------------
 1787|  9.60k|      lj_assertA(irt_isinteger(t) || irt_isnum(t),
  ------------------
  |  |  111|  9.60k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  9.60k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  18.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 349, False: 9.25k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 9.25k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  9.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1788|  9.60k|		 "bad SLOAD type %d", irt_type(t));
 1789|  9.60k|      emit_u32(as, (ir->op2 & IRSLOAD_KEYINDEX) ? LJ_KEYINDEX :
  ------------------
  |  |   31|  37.7k|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  |  |  ------------------
  |  |  |  Branch (31:55): [Folded - Ignored]
  |  |  |  Branch (31:55): [True: 349, False: 9.25k]
  |  |  ------------------
  ------------------
 1790|  9.60k|		   LJ_GC64 ? (LJ_TISNUM << 15) : LJ_TISNUM);
 1791|  9.60k|      emit_rmro(as, XO_ARITHi, XOg_CMP, base, ofs+4);
 1792|  9.60k|#if LJ_GC64
 1793|  9.60k|    } else if (irt_isnil(t)) {
  ------------------
  |  |  370|  2.40k|#define irt_isnil(t)		(irt_type(t) == IRT_NIL)
  |  |  ------------------
  |  |  |  |  365|  2.40k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (370:23): [True: 2.19k, False: 208]
  |  |  ------------------
  ------------------
 1794|       |      /* LJ_GC64 type check for nil:
 1795|       |      **
 1796|       |      **   cmp qword [addr], -1
 1797|       |      **   jne ->exit
 1798|       |      */
 1799|  2.19k|      emit_i8(as, -1);
  ------------------
  |  |   29|  2.19k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1800|  2.19k|      emit_rmro(as, XO_ARITHi8, XOg_CMP|REX_64, base, ofs);
  ------------------
  |  |   15|  2.19k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  2.19k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1801|  2.19k|    } else if (irt_ispri(t)) {
  ------------------
  |  |  371|    208|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|    208|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (371:23): [True: 34, False: 174]
  |  |  ------------------
  ------------------
 1802|     34|      emit_u32(as, (irt_toitype(t) << 15) | 0x7fff);
  ------------------
  |  |   31|     34|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1803|     34|      emit_rmro(as, XO_ARITHi, XOg_CMP, base, ofs+4);
 1804|    174|    } else {
 1805|       |      /* LJ_GC64 type check only:
 1806|       |      **
 1807|       |      **   mov r64, [addr]
 1808|       |      **   sar r64, 47
 1809|       |      **   cmp r32, itype
 1810|       |      **   jne ->exit
 1811|       |      */
 1812|    174|      Reg tmp = ra_scratch(as, rset_exclude(RSET_GPR, base));
  ------------------
  |  |   77|    174|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    174|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1813|    174|      emit_i8(as, irt_toitype(t));
  ------------------
  |  |   29|    174|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1814|    174|      emit_rr(as, XO_ARITHi8, XOg_CMP, tmp);
 1815|    174|      emit_shifti(as, XOg_SAR|REX_64, tmp, 47);
  ------------------
  |  |  190|    174|  (emit_i8(as, (i)), emit_rr(as, XO_SHIFTi, (Reg)(xg), (r)))
  |  |  ------------------
  |  |  |  |   29|    174|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  |  |  ------------------
  ------------------
 1816|    174|      emit_rmro(as, XO_MOV, tmp|REX_64, base, ofs);
  ------------------
  |  |   15|    174|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|    174|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1817|       |#else
 1818|       |    } else {
 1819|       |      emit_i8(as, irt_toitype(t));
 1820|       |      emit_rmro(as, XO_ARITHi8, XOg_CMP, base, ofs+4);
 1821|       |#endif
 1822|    174|    }
 1823|  12.0k|  }
 1824|  26.6k|}
lj_asm.c:asm_tointg:
  812|  1.54k|{
  813|  1.54k|  Reg tmp = ra_scratch(as, rset_exclude(RSET_FPR, left));
  ------------------
  |  |   77|  1.54k|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|  1.54k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  814|  1.54k|  Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|  1.54k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  1.54k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  1.54k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  1.54k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  1.54k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  1.54k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  1.54k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  1.54k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  815|  1.54k|  asm_guardcc(as, CC_P);
  816|  1.54k|  asm_guardcc(as, CC_NE);
  817|  1.54k|  emit_rr(as, XO_UCOMISD, left, tmp);
  818|  1.54k|  emit_rr(as, XO_CVTSI2SD, tmp, dest);
  819|  1.54k|  emit_rr(as, XO_XORPS, tmp, tmp);  /* Avoid partial register stall. */
  820|  1.54k|  checkmclim(as);
  821|  1.54k|  emit_rr(as, XO_CVTTSD2SI, dest, left);
  822|       |  /* Can't fuse since left is needed twice. */
  823|  1.54k|}
lj_asm.c:asm_ahustore:
 1639|  3.63k|{
 1640|  3.63k|  if (ir->r == RID_SINK)
  ------------------
  |  |   24|  3.63k|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|  3.63k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|  3.63k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|  3.63k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1640:7): [True: 204, False: 3.42k]
  ------------------
 1641|    204|    return;
 1642|  3.42k|  if (irt_isnum(ir->t)) {
  ------------------
  |  |  377|  3.42k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  3.42k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 2.64k, False: 781]
  |  |  ------------------
  ------------------
 1643|  2.64k|    Reg src = ra_alloc1(as, ir->op2, RSET_FPR);
  ------------------
  |  |   70|  2.64k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  2.64k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  2.64k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1644|  2.64k|    asm_fuseahuref(as, ir->op1, RSET_GPR);
  ------------------
  |  |   67|  2.64k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  2.64k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  2.64k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  2.64k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  2.64k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  2.64k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  2.64k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  2.64k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1645|  2.64k|    emit_mrm(as, XO_MOVSDto, src, RID_MRM);
 1646|       |#if LJ_64 && !LJ_GC64
 1647|       |  } else if (irt_islightud(ir->t)) {
 1648|       |    Reg src = ra_alloc1(as, ir->op2, RSET_GPR);
 1649|       |    asm_fuseahuref(as, ir->op1, rset_exclude(RSET_GPR, src));
 1650|       |    emit_mrm(as, XO_MOVto, src|REX_64, RID_MRM);
 1651|       |#endif
 1652|  2.64k|#if LJ_GC64
 1653|  2.64k|  } else if (irref_isk(ir->op2)) {
  ------------------
  |  |  485|    781|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 322, False: 459]
  |  |  ------------------
  ------------------
 1654|    322|    TValue k;
 1655|    322|    lj_ir_kvalue(as->J->L, &k, IR(ir->op2));
  ------------------
  |  |  116|    322|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1656|    322|    asm_fuseahuref(as, ir->op1, RSET_GPR);
  ------------------
  |  |   67|    322|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    322|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    322|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    322|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    322|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    322|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    322|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    322|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1657|    322|    if (tvisnil(&k)) {
  ------------------
  |  |  782|    322|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 117, False: 205]
  |  |  ------------------
  ------------------
 1658|    117|      emit_i32(as, -1);
  ------------------
  |  |   30|    117|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 1659|    117|      emit_mrm(as, XO_MOVmi, REX_64, RID_MRM);
  ------------------
  |  |   15|    117|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|    117|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1660|    205|    } else {
 1661|    205|      emit_u32(as, k.u32.lo);
  ------------------
  |  |   31|    205|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1662|    205|      emit_mrm(as, XO_MOVmi, 0, RID_MRM);
 1663|    205|      as->mrm.ofs += 4;
 1664|    205|      emit_u32(as, k.u32.hi);
  ------------------
  |  |   31|    205|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1665|    205|      emit_mrm(as, XO_MOVmi, 0, RID_MRM);
 1666|    205|    }
 1667|    322|#endif
 1668|    459|  } else {
 1669|    459|    IRIns *irr = IR(ir->op2);
  ------------------
  |  |  116|    459|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1670|    459|    RegSet allow = RSET_GPR;
  ------------------
  |  |   67|    459|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    459|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    459|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    459|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    459|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    459|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    459|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    459|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1671|    459|    Reg src = RID_NONE;
  ------------------
  |  |   21|    459|#define RID_NONE		0x80
  ------------------
 1672|    459|    if (!irref_isk(ir->op2)) {
  ------------------
  |  |  485|    459|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (1672:9): [True: 459, False: 0]
  ------------------
 1673|    459|      src = ra_alloc1(as, ir->op2, allow);
 1674|    459|      rset_clear(allow, src);
  ------------------
  |  |   76|    459|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    459|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1675|    459|    }
 1676|    459|    asm_fuseahuref(as, ir->op1, allow);
 1677|    459|    if (ra_hasreg(src)) {
  ------------------
  |  |   28|    459|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|    459|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 459, False: 0]
  |  |  ------------------
  ------------------
 1678|    459|#if LJ_GC64
 1679|    459|      if (!(LJ_DUALNUM && irt_isinteger(ir->t))) {
  ------------------
  |  |  549|    918|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (!(LJ_DUALNUM && irt_isinteger(ir->t))) {
  ------------------
  |  |  389|      0|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|      0|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1680|       |	/* TODO: 64 bit store + 32 bit load-modify-store is suboptimal. */
 1681|    459|	as->mrm.ofs += 4;
 1682|    459|	emit_u32(as, irt_toitype(ir->t) << 15);
  ------------------
  |  |   31|    459|#define emit_u32(as, u)		(*(uint32_t *)(as->mcp-4) = (u), as->mcp -= 4)
  ------------------
 1683|    459|	emit_mrm(as, XO_ARITHi, XOg_OR, RID_MRM);
 1684|    459|	as->mrm.ofs -= 4;
 1685|    459|	emit_mrm(as, XO_MOVto, src|REX_64, RID_MRM);
  ------------------
  |  |   15|    459|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|    459|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1686|    459|	return;
 1687|    459|      }
 1688|      0|#endif
 1689|      0|      emit_mrm(as, XO_MOVto, src, RID_MRM);
 1690|      0|    } else if (!irt_ispri(irr->t)) {
  ------------------
  |  |  371|      0|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1690:16): [True: 0, False: 0]
  ------------------
 1691|      0|      lj_assertA(irt_isaddr(ir->t) || (LJ_DUALNUM && irt_isinteger(ir->t)),
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1692|      0|		 "bad store type");
 1693|      0|      emit_i32(as, irr->i);
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 1694|      0|      emit_mrm(as, XO_MOVmi, 0, RID_MRM);
 1695|      0|    }
 1696|      0|    as->mrm.ofs += 4;
 1697|      0|#if LJ_GC64
 1698|      0|    lj_assertA(LJ_DUALNUM && irt_isinteger(ir->t), "bad store type");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1699|      0|    emit_i32(as, LJ_TNUMX << 15);
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 1700|       |#else
 1701|       |    emit_i32(as, (int32_t)irt_toitype(ir->t));
 1702|       |#endif
 1703|      0|    emit_mrm(as, XO_MOVmi, 0, RID_MRM);
 1704|      0|  }
 1705|  3.42k|}
lj_asm.c:asm_fxstore:
 1461|     27|{
 1462|     27|  RegSet allow = RSET_GPR;
  ------------------
  |  |   67|     27|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|     27|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|     27|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|     27|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|     27|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|     27|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|     27|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|     27|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1463|     27|  Reg src = RID_NONE, osrc = RID_NONE;
  ------------------
  |  |   21|     27|#define RID_NONE		0x80
  ------------------
                Reg src = RID_NONE, osrc = RID_NONE;
  ------------------
  |  |   21|     27|#define RID_NONE		0x80
  ------------------
 1464|     27|  int32_t k = 0;
 1465|     27|  if (ir->r == RID_SINK)
  ------------------
  |  |   24|     27|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|     27|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|     27|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     27|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1465:7): [True: 27, False: 0]
  ------------------
 1466|     27|    return;
 1467|       |  /* The IRT_I16/IRT_U16 stores should never be simplified for constant
 1468|       |  ** values since mov word [mem], imm16 has a length-changing prefix.
 1469|       |  */
 1470|      0|  if (irt_isi16(ir->t) || irt_isu16(ir->t) || irt_isfp(ir->t) ||
  ------------------
  |  |  381|      0|#define irt_isi16(t)		(irt_type(t) == IRT_I16)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (381:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                if (irt_isi16(ir->t) || irt_isu16(ir->t) || irt_isfp(ir->t) ||
  ------------------
  |  |  382|      0|#define irt_isu16(t)		(irt_type(t) == IRT_U16)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (382:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                if (irt_isi16(ir->t) || irt_isu16(ir->t) || irt_isfp(ir->t) ||
  ------------------
  |  |  388|      0|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1471|      0|      !asm_isk32(as, ir->op2, &k)) {
  ------------------
  |  Branch (1471:7): [True: 0, False: 0]
  ------------------
 1472|      0|    RegSet allow8 = irt_isfp(ir->t) ? RSET_FPR :
  ------------------
  |  |  388|      0|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  RegSet allow8 = irt_isfp(ir->t) ? RSET_FPR :
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1473|      0|		    (irt_isi8(ir->t) || irt_isu8(ir->t)) ? RSET_GPR8 : RSET_GPR;
  ------------------
  |  |  379|      0|#define irt_isi8(t)		(irt_type(t) == IRT_I8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (379:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		    (irt_isi8(ir->t) || irt_isu8(ir->t)) ? RSET_GPR8 : RSET_GPR;
  ------------------
  |  |  380|      0|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		    (irt_isi8(ir->t) || irt_isu8(ir->t)) ? RSET_GPR8 : RSET_GPR;
  ------------------
  |  |   76|      0|#define RSET_GPR8	RSET_GPR
  |  |  ------------------
  |  |  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              		    (irt_isi8(ir->t) || irt_isu8(ir->t)) ? RSET_GPR8 : RSET_GPR;
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1474|      0|    src = osrc = ra_alloc1(as, ir->op2, allow8);
 1475|      0|    if (!LJ_64 && !rset_test(allow8, src)) {  /* Already in wrong register. */
  ------------------
  |  |  640|      0|#define LJ_64			1
  ------------------
                  if (!LJ_64 && !rset_test(allow8, src)) {  /* Already in wrong register. */
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (1475:9): [Folded - Ignored]
  |  Branch (1475:19): [True: 0, False: 0]
  ------------------
 1476|      0|      rset_clear(allow, osrc);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1477|      0|      src = ra_scratch(as, allow8);
 1478|      0|    }
 1479|      0|    rset_clear(allow, src);
  ------------------
  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1480|      0|  }
 1481|      0|  if (ir->o == IR_FSTORE) {
  ------------------
  |  Branch (1481:7): [True: 0, False: 0]
  ------------------
 1482|      0|    asm_fusefref(as, IR(ir->op1), allow);
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 1483|      0|  } else {
 1484|      0|    asm_fusexref(as, ir->op1, allow);
 1485|      0|    if (LJ_32 && ir->o == IR_HIOP) as->mrm.ofs += 4;
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1485:18): [True: 0, False: 0]
  ------------------
 1486|      0|  }
 1487|      0|  if (ra_hasreg(src)) {
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1488|      0|    x86Op xo;
 1489|      0|    switch (irt_type(ir->t)) {
  ------------------
  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
 1490|      0|    case IRT_I8: case IRT_U8: xo = XO_MOVtob; src |= FORCE_REX; break;
  ------------------
  |  |   14|      0|#define FORCE_REX		0x200
  ------------------
  |  Branch (1490:5): [True: 0, False: 0]
  |  Branch (1490:18): [True: 0, False: 0]
  ------------------
 1491|      0|    case IRT_I16: case IRT_U16: xo = XO_MOVtow; break;
  ------------------
  |  Branch (1491:5): [True: 0, False: 0]
  |  Branch (1491:19): [True: 0, False: 0]
  ------------------
 1492|      0|    case IRT_NUM: xo = XO_MOVSDto; break;
  ------------------
  |  Branch (1492:5): [True: 0, False: 0]
  ------------------
 1493|      0|    case IRT_FLOAT: xo = XO_MOVSSto; break;
  ------------------
  |  Branch (1493:5): [True: 0, False: 0]
  ------------------
 1494|       |#if LJ_64 && !LJ_GC64
 1495|       |    case IRT_LIGHTUD:
 1496|       |      /* NYI: mask 64 bit lightuserdata. */
 1497|       |      lj_assertA(0, "store of lightuserdata");
 1498|       |#endif
 1499|      0|    default:
  ------------------
  |  Branch (1499:5): [True: 0, False: 0]
  ------------------
 1500|      0|      if (LJ_64 && irt_is64(ir->t))
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_64 && irt_is64(ir->t))
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1501|      0|	src |= REX_64;
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1502|      0|      else
 1503|      0|	lj_assertA(irt_isint(ir->t) || irt_isu32(ir->t) || irt_isaddr(ir->t),
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1504|      0|		   "unsplit 64 bit store");
 1505|      0|      xo = XO_MOVto;
 1506|      0|      break;
 1507|      0|    }
 1508|      0|    emit_mrm(as, xo, src, RID_MRM);
 1509|      0|    if (!LJ_64 && src != osrc) {
  ------------------
  |  |  640|      0|#define LJ_64			1
  ------------------
  |  Branch (1509:9): [Folded - Ignored]
  |  Branch (1509:19): [True: 0, False: 0]
  ------------------
 1510|      0|      ra_noweak(as, osrc);
  ------------------
  |  |  349|      0|#define ra_noweak(as, r)	rset_clear(as->weakset, (r))
  |  |  ------------------
  |  |  |  |   76|      0|#define rset_clear(rs, r)	(rs &= ~RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1511|      0|      emit_rr(as, XO_MOV, src, osrc);
 1512|      0|    }
 1513|      0|  } else {
 1514|      0|    if (irt_isi8(ir->t) || irt_isu8(ir->t)) {
  ------------------
  |  |  379|      0|#define irt_isi8(t)		(irt_type(t) == IRT_I8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (379:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (irt_isi8(ir->t) || irt_isu8(ir->t)) {
  ------------------
  |  |  380|      0|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1515|      0|      emit_i8(as, k);
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1516|      0|      emit_mrm(as, XO_MOVmib, 0, RID_MRM);
 1517|      0|    } else {
 1518|      0|      lj_assertA(irt_is64(ir->t) || irt_isint(ir->t) || irt_isu32(ir->t) ||
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1519|      0|		 irt_isaddr(ir->t), "bad store type");
 1520|      0|      emit_i32(as, k);
  ------------------
  |  |   30|      0|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
 1521|      0|      emit_mrm(as, XO_MOVmi, REX_64IR(ir, 0), RID_MRM);
  ------------------
  |  |  525|      0|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1522|      0|    }
 1523|      0|  }
 1524|      0|}
lj_asm.c:asm_tbar:
 1911|    681|{
 1912|    681|  Reg tab = ra_alloc1(as, ir->op1, RSET_GPR);
  ------------------
  |  |   67|    681|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|    681|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    681|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|    681|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|    681|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|    681|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|    681|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|    681|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1913|    681|  Reg tmp = ra_scratch(as, rset_exclude(RSET_GPR, tab));
  ------------------
  |  |   77|    681|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|    681|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1914|    681|  MCLabel l_end = emit_label(as);
  ------------------
  |  |  472|    681|#define emit_label(as)		((as)->mcp)
  ------------------
 1915|    681|  emit_movtomro(as, tmp|REX_GC64, tab, offsetof(GCtab, gclist));
  ------------------
  |  |  263|    681|  emit_rmro(as, XO_MOVto, (r), (base), (ofs))
  ------------------
 1916|    681|  emit_setgl(as, tab, gc.grayagain);
  ------------------
  |  |  269|    681|#define emit_setgl(as, r, field) emit_opgl(as, XO_MOVto, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|    681|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|    681|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|    681|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|    681|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1917|    681|  emit_getgl(as, tmp, gc.grayagain);
  ------------------
  |  |  268|    681|#define emit_getgl(as, r, field) emit_opgl(as, XO_MOV, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|    681|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|    681|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|    681|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|    681|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1918|    681|  emit_i8(as, ~LJ_GC_BLACK);
  ------------------
  |  |   29|    681|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1919|    681|  emit_rmro(as, XO_ARITHib, XOg_AND, tab, offsetof(GCtab, marked));
 1920|    681|  emit_sjcc(as, CC_Z, l_end);
 1921|    681|  emit_i8(as, LJ_GC_BLACK);
  ------------------
  |  |   29|    681|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
 1922|    681|  emit_rmro(as, XO_GROUP3b, XOg_TEST, tab, offsetof(GCtab, marked));
 1923|    681|}
lj_asm.c:asm_conv:
  839|  34.7k|{
  840|  34.7k|  IRType st = (IRType)(ir->op2 & IRCONV_SRCMASK);
  ------------------
  |  |  252|  34.7k|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
  841|  34.7k|  int st64 = (st == IRT_I64 || st == IRT_U64 || (LJ_64 && st == IRT_P64));
  ------------------
  |  |  640|  69.4k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (841:15): [True: 0, False: 34.7k]
  |  Branch (841:32): [True: 0, False: 34.7k]
  |  Branch (841:59): [True: 0, False: 34.7k]
  ------------------
  842|  34.7k|  int stfp = (st == IRT_NUM || st == IRT_FLOAT);
  ------------------
  |  Branch (842:15): [True: 18.7k, False: 15.9k]
  |  Branch (842:32): [True: 0, False: 15.9k]
  ------------------
  843|  34.7k|  IRRef lref = ir->op1;
  844|  34.7k|  lj_assertA(irt_type(ir->t) != st, "inconsistent types for CONV");
  ------------------
  |  |  111|  34.7k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  34.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  34.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 34.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  34.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  845|  34.7k|  lj_assertA(!(LJ_32 && (irt_isint64(ir->t) || st64)),
  ------------------
  |  |  111|  34.7k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  34.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  34.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  34.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  846|  34.7k|	     "IR %04d has unsplit 64 bit type",
  847|  34.7k|	     (int)(ir - as->ir) - REF_BIAS);
  848|  34.7k|  if (irt_isfp(ir->t)) {
  ------------------
  |  |  388|  34.7k|#define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  377|  69.4k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  34.7k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (377:23): [True: 15.9k, False: 18.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define irt_isfp(t)		(irt_isnum(t) || irt_isfloat(t))
  |  |  ------------------
  |  |  |  |  376|  18.7k|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|  18.7k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (376:25): [True: 0, False: 18.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  849|  15.9k|    Reg dest = ra_dest(as, ir, RSET_FPR);
  ------------------
  |  |   70|  15.9k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  15.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  15.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  850|  15.9k|    if (stfp) {  /* FP to FP conversion. */
  ------------------
  |  Branch (850:9): [True: 0, False: 15.9k]
  ------------------
  851|      0|      Reg left = asm_fuseload(as, lref, RSET_FPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  852|      0|      emit_mrm(as, st == IRT_NUM ? XO_CVTSD2SS : XO_CVTSS2SD, dest, left);
  ------------------
  |  Branch (852:20): [True: 0, False: 0]
  ------------------
  853|      0|      if (left == dest) return;  /* Avoid the XO_XORPS. */
  ------------------
  |  Branch (853:11): [True: 0, False: 0]
  ------------------
  854|  15.9k|    } else if (LJ_32 && st == IRT_U32) {  /* U32 to FP conversion on x86. */
  ------------------
  |  |  639|  31.8k|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (854:25): [True: 0, False: 0]
  ------------------
  855|       |      /* number = (2^52+2^51 .. u32) - (2^52+2^51) */
  856|      0|      cTValue *k = &as->J->k64[LJ_K64_TOBIT];
  857|      0|      Reg bias = ra_scratch(as, rset_exclude(RSET_FPR, dest));
  ------------------
  |  |   77|      0|#define rset_exclude(rs, r)	(rs & ~RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  858|      0|      if (irt_isfloat(ir->t))
  ------------------
  |  |  376|      0|#define irt_isfloat(t)		(irt_type(t) == IRT_FLOAT)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (376:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  859|      0|	emit_rr(as, XO_CVTSD2SS, dest, dest);
  860|      0|      emit_rr(as, XO_SUBSD, dest, bias);  /* Subtract 2^52+2^51 bias. */
  861|      0|      emit_rr(as, XO_XORPS, dest, bias);  /* Merge bias and integer. */
  862|      0|      emit_rma(as, XO_MOVSD, bias, k);
  863|      0|      checkmclim(as);
  864|      0|      emit_mrm(as, XO_MOVD, dest, asm_fuseload(as, lref, RSET_GPR));
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  865|      0|      return;
  866|  15.9k|    } else {  /* Integer to FP conversion. */
  867|  15.9k|      Reg left = (LJ_64 && (st == IRT_U32 || st == IRT_U64)) ?
  ------------------
  |  |  640|  31.8k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (867:29): [True: 0, False: 15.9k]
  |  Branch (867:46): [True: 0, False: 15.9k]
  ------------------
  868|      0|		 ra_alloc1(as, lref, RSET_GPR) :
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  869|  15.9k|		 asm_fuseloadm(as, lref, RSET_GPR, st64);
  ------------------
  |  |   67|  15.9k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  15.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  15.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  15.9k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  15.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  15.9k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  15.9k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  15.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  870|  15.9k|      if (LJ_64 && st == IRT_U64) {
  ------------------
  |  |  640|  31.8k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (870:20): [True: 0, False: 15.9k]
  ------------------
  871|      0|	MCLabel l_end = emit_label(as);
  ------------------
  |  |  472|      0|#define emit_label(as)		((as)->mcp)
  ------------------
  872|      0|	cTValue *k = &as->J->k64[LJ_K64_2P64];
  873|      0|	emit_rma(as, XO_ADDSD, dest, k);  /* Add 2^64 to compensate. */
  874|      0|	emit_sjcc(as, CC_NS, l_end);
  875|      0|	emit_rr(as, XO_TEST, left|REX_64, left);  /* Check if u64 >= 2^63. */
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  876|      0|      }
  877|  15.9k|      emit_mrm(as, irt_isnum(ir->t) ? XO_CVTSI2SD : XO_CVTSI2SS,
  ------------------
  |  |  377|  15.9k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  15.9k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 15.9k, False: 0]
  |  |  ------------------
  ------------------
  878|  15.9k|	       dest|((LJ_64 && (st64 || st == IRT_U32)) ? REX_64 : 0), left);
  ------------------
  |  |  640|  31.8k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	       dest|((LJ_64 && (st64 || st == IRT_U32)) ? REX_64 : 0), left);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  |  Branch (878:26): [True: 0, False: 15.9k]
  |  Branch (878:34): [True: 0, False: 15.9k]
  ------------------
  879|  15.9k|    }
  880|  15.9k|    emit_rr(as, XO_XORPS, dest, dest);  /* Avoid partial register stall. */
  881|  18.7k|  } else if (stfp) {  /* FP to integer conversion. */
  ------------------
  |  Branch (881:14): [True: 18.7k, False: 0]
  ------------------
  882|  18.7k|    if (irt_isguard(ir->t)) {
  ------------------
  |  |  444|  18.7k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 692, False: 18.0k]
  |  |  ------------------
  ------------------
  883|       |      /* Checked conversions are only supported from number to int. */
  884|    692|      lj_assertA(irt_isint(ir->t) && st == IRT_NUM,
  ------------------
  |  |  111|    692|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    692|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.38k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 692, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 692, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    692|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  885|    692|		 "bad type for checked CONV");
  886|    692|      asm_tointg(as, ir, ra_alloc1(as, lref, RSET_FPR));
  ------------------
  |  |   70|    692|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|    692|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|    692|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  887|  18.0k|    } else {
  888|  18.0k|      Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|  18.0k|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|  18.0k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  18.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|  18.0k|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|  18.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|  18.0k|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|  18.0k|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|  18.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  889|  18.0k|      x86Op op = st == IRT_NUM ? XO_CVTTSD2SI : XO_CVTTSS2SI;
  ------------------
  |  Branch (889:18): [True: 18.0k, False: 0]
  ------------------
  890|  18.0k|      if (LJ_64 ? irt_isu64(ir->t) : irt_isu32(ir->t)) {
  ------------------
  |  |  640|  18.0k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_64 ? irt_isu64(ir->t) : irt_isu32(ir->t)) {
  ------------------
  |  |  385|  18.0k|#define irt_isu64(t)		(irt_type(t) == IRT_U64)
  |  |  ------------------
  |  |  |  |  365|  18.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
                    if (LJ_64 ? irt_isu64(ir->t) : irt_isu32(ir->t)) {
  ------------------
  |  |  383|      0|#define irt_isu32(t)		(irt_type(t) == IRT_U32)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (890:11): [True: 0, False: 18.0k]
  ------------------
  891|       |	/* LJ_64: For inputs >= 2^63 add -2^64, convert again. */
  892|       |	/* LJ_32: For inputs >= 2^31 add -2^31, convert again and add 2^31. */
  893|      0|	Reg tmp = ra_noreg(IR(lref)->r) ? ra_alloc1(as, lref, RSET_FPR) :
  ------------------
  |  |   27|      0|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	Reg tmp = ra_noreg(IR(lref)->r) ? ra_alloc1(as, lref, RSET_FPR) :
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  894|      0|					  ra_scratch(as, RSET_FPR);
  ------------------
  |  |   70|      0|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  895|      0|	MCLabel l_end = emit_label(as);
  ------------------
  |  |  472|      0|#define emit_label(as)		((as)->mcp)
  ------------------
  896|      0|	if (LJ_32)
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  897|      0|	  emit_gri(as, XG_ARITHi(XOg_ADD), dest, (int32_t)0x80000000);
  ------------------
  |  |  323|      0|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|      0|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
  898|      0|	emit_rr(as, op, dest|REX_64, tmp);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  899|      0|	if (st == IRT_NUM)
  ------------------
  |  Branch (899:6): [True: 0, False: 0]
  ------------------
  900|      0|	  emit_rma(as, XO_ADDSD, tmp, &as->J->k64[LJ_K64_M2P64_31]);
  901|      0|	else
  902|      0|	  emit_rma(as, XO_ADDSS, tmp, &as->J->k32[LJ_K32_M2P64_31]);
  903|      0|	emit_sjcc(as, CC_NS, l_end);
  904|      0|	emit_rr(as, XO_TEST, dest|REX_64, dest);  /* Check if dest negative. */
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  905|      0|	emit_rr(as, op, dest|REX_64, tmp);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  906|      0|	ra_left(as, tmp, lref);
  907|  18.0k|      } else {
  908|  18.0k|	if (LJ_64 && irt_isu32(ir->t))
  ------------------
  |  |  640|  36.1k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (LJ_64 && irt_isu32(ir->t))
  ------------------
  |  |  383|  18.0k|#define irt_isu32(t)		(irt_type(t) == IRT_U32)
  |  |  ------------------
  |  |  |  |  365|  18.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (383:23): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
  909|      0|	  emit_rr(as, XO_MOV, dest, dest);  /* Zero hiword. */
  910|  18.0k|	emit_mrm(as, op,
  911|  18.0k|		 dest|((LJ_64 &&
  ------------------
  |  |  640|  36.1k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  912|  18.0k|			(irt_is64(ir->t) || irt_isu32(ir->t))) ? REX_64 : 0),
  ------------------
  |  |  409|  36.1k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  18.0k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  18.0k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  18.0k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  18.0k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  18.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
              			(irt_is64(ir->t) || irt_isu32(ir->t))) ? REX_64 : 0),
  ------------------
  |  |  383|  18.0k|#define irt_isu32(t)		(irt_type(t) == IRT_U32)
  |  |  ------------------
  |  |  |  |  365|  18.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (383:23): [True: 0, False: 18.0k]
  |  |  ------------------
  ------------------
              			(irt_is64(ir->t) || irt_isu32(ir->t))) ? REX_64 : 0),
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  913|  18.0k|		 asm_fuseload(as, lref, RSET_FPR));
  ------------------
  |  |   70|  18.0k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  18.0k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  18.0k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  914|  18.0k|      }
  915|  18.0k|    }
  916|  18.7k|  } else if (st >= IRT_I8 && st <= IRT_U16) {  /* Extend to 32 bit integer. */
  ------------------
  |  Branch (916:14): [True: 0, False: 0]
  |  Branch (916:30): [True: 0, False: 0]
  ------------------
  917|      0|    Reg left, dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  918|      0|    RegSet allow = RSET_GPR;
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  919|      0|    x86Op op;
  920|      0|    lj_assertA(irt_isint(ir->t) || irt_isu32(ir->t), "bad type for CONV EXT");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  921|      0|    if (st == IRT_I8) {
  ------------------
  |  Branch (921:9): [True: 0, False: 0]
  ------------------
  922|      0|      op = XO_MOVSXb; allow = RSET_GPR8; dest |= FORCE_REX;
  ------------------
  |  |   76|      0|#define RSET_GPR8	RSET_GPR
  |  |  ------------------
  |  |  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    op = XO_MOVSXb; allow = RSET_GPR8; dest |= FORCE_REX;
  ------------------
  |  |   14|      0|#define FORCE_REX		0x200
  ------------------
  923|      0|    } else if (st == IRT_U8) {
  ------------------
  |  Branch (923:16): [True: 0, False: 0]
  ------------------
  924|      0|      op = XO_MOVZXb; allow = RSET_GPR8; dest |= FORCE_REX;
  ------------------
  |  |   76|      0|#define RSET_GPR8	RSET_GPR
  |  |  ------------------
  |  |  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    op = XO_MOVZXb; allow = RSET_GPR8; dest |= FORCE_REX;
  ------------------
  |  |   14|      0|#define FORCE_REX		0x200
  ------------------
  925|      0|    } else if (st == IRT_I16) {
  ------------------
  |  Branch (925:16): [True: 0, False: 0]
  ------------------
  926|      0|      op = XO_MOVSXw;
  927|      0|    } else {
  928|      0|      op = XO_MOVZXw;
  929|      0|    }
  930|      0|    left = asm_fuseload(as, lref, allow);
  931|       |    /* Add extra MOV if source is already in wrong register. */
  932|      0|    if (!LJ_64 && left != RID_MRM && !rset_test(allow, left)) {
  ------------------
  |  |  640|      0|#define LJ_64			1
  ------------------
                  if (!LJ_64 && left != RID_MRM && !rset_test(allow, left)) {
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  ------------------
  |  Branch (932:9): [Folded - Ignored]
  |  Branch (932:19): [True: 0, False: 0]
  |  Branch (932:38): [True: 0, False: 0]
  ------------------
  933|      0|      Reg tmp = ra_scratch(as, allow);
  934|      0|      emit_rr(as, op, dest, tmp);
  935|      0|      emit_rr(as, XO_MOV, tmp, left);
  936|      0|    } else {
  937|      0|      emit_mrm(as, op, dest, left);
  938|      0|    }
  939|      0|  } else {  /* 32/64 bit integer conversions. */
  940|      0|    if (LJ_32) {  /* Only need to handle 32/32 bit no-op (cast) on x86. */
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  941|      0|      Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  942|      0|      ra_left(as, dest, lref);  /* Do nothing, but may need to move regs. */
  943|      0|    } else if (irt_is64(ir->t)) {
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  944|      0|      Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  945|      0|      if (st64 || !(ir->op2 & IRCONV_SEXT)) {
  ------------------
  |  |  257|      0|#define IRCONV_SEXT		0x0800	/* Sign-extend integer to integer. */
  ------------------
  |  Branch (945:11): [True: 0, False: 0]
  |  Branch (945:19): [True: 0, False: 0]
  ------------------
  946|       |	/* 64/64 bit no-op (cast) or 32 to 64 bit zero extension. */
  947|      0|	ra_left(as, dest, lref);  /* Do nothing, but may need to move regs. */
  948|      0|      } else {  /* 32 to 64 bit sign extension. */
  949|      0|	Reg left = asm_fuseload(as, lref, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  950|      0|	emit_mrm(as, XO_MOVSXd, dest|REX_64, left);
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  951|      0|      }
  952|      0|    } else {
  953|      0|      Reg dest = ra_dest(as, ir, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  954|      0|      if (st64 && !(ir->op2 & IRCONV_NONE)) {
  ------------------
  |  |  266|      0|#define IRCONV_NONE   IRCONV_ANY	/* INT|*64 no conv, but change type. */
  |  |  ------------------
  |  |  |  |  263|      0|#define IRCONV_ANY    (1<<IRCONV_CSH)	/* Any FP number is ok. */
  |  |  |  |  ------------------
  |  |  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (954:11): [True: 0, False: 0]
  |  Branch (954:19): [True: 0, False: 0]
  ------------------
  955|      0|	Reg left = asm_fuseload(as, lref, RSET_GPR);
  ------------------
  |  |   67|      0|#define RSET_GPR	(RSET_RANGE(RID_MIN_GPR, RID_MAX_GPR) \
  |  |  ------------------
  |  |  |  |   72|      0|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   68|      0|			 - RID2RSET(RID_ESP) \
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  |  |   69|      0|			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  ------------------
  |  |               			 - LJ_GC64*RID2RSET(RID_DISPATCH))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
  956|       |	/* This is either a 32 bit reg/reg mov which zeroes the hiword
  957|       |	** or a load of the loword from a 64 bit address.
  958|       |	*/
  959|      0|	emit_mrm(as, XO_MOV, dest, left);
  960|      0|      } else {  /* 32/32 bit no-op (cast). */
  961|      0|	ra_left(as, dest, lref);  /* Do nothing, but may need to move regs. */
  962|      0|      }
  963|      0|    }
  964|      0|  }
  965|  34.7k|}
lj_asm.c:asm_strto:
 1059|  19.6k|{
 1060|       |  /* Force a spill slot for the destination register (if any). */
 1061|  19.6k|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_strscan_num];
 1062|  19.6k|  IRRef args[2];
 1063|  19.6k|  RegSet drop = RSET_SCRATCH;
  ------------------
  |  |   98|  19.6k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|  19.6k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|  19.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  19.6k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  19.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|  19.6k|  if ((drop & RSET_FPR) != RSET_FPR && ra_hasreg(ir->r))
  ------------------
  |  |   70|  19.6k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  19.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if ((drop & RSET_FPR) != RSET_FPR && ra_hasreg(ir->r))
  ------------------
  |  |   70|  39.3k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  ------------------
  |  |  |  |   72|  19.6k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  19.6k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if ((drop & RSET_FPR) != RSET_FPR && ra_hasreg(ir->r))
  ------------------
  |  |   28|      0|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1064:7): [True: 0, False: 19.6k]
  ------------------
 1065|      0|    rset_set(drop, ir->r);  /* WIN64 doesn't spill all FPRs. */
  ------------------
  |  |   75|      0|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  ------------------
  |  |  |  |   70|      0|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  ------------------
  ------------------
 1066|  19.6k|  ra_evictset(as, drop);
 1067|  19.6k|  asm_guardcc(as, CC_E);
 1068|  19.6k|  emit_rr(as, XO_TEST, RID_RET, RID_RET);  /* Test return status. */
 1069|  19.6k|  args[0] = ir->op1;      /* GCstr *str */
 1070|  19.6k|  args[1] = ASMREF_TMP1;  /* TValue *n  */
  ------------------
  |  |  118|  19.6k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 1071|  19.6k|  asm_gencall(as, ci, args);
 1072|       |  /* Store the result to the spill slot or temp slots. */
 1073|  19.6k|  emit_rmro(as, XO_LEA, ra_releasetmp(as, ASMREF_TMP1)|REX_64,
  ------------------
  |  |  118|  19.6k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
                emit_rmro(as, XO_LEA, ra_releasetmp(as, ASMREF_TMP1)|REX_64,
  ------------------
  |  |   15|  19.6k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  19.6k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
 1074|  19.6k|	    RID_ESP, sps_scale(ir->s));
  ------------------
  |  |  151|  19.6k|#define sps_scale(slot)		(4 * (int32_t)(slot))
  ------------------
 1075|  19.6k|}
lj_asm.c:asm_gc_check:
 2796|  17.9k|{
 2797|  17.9k|  const CCallInfo *ci = &lj_ir_callinfo[IRCALL_lj_gc_step_jit];
 2798|  17.9k|  IRRef args[2];
 2799|  17.9k|  MCLabel l_end;
 2800|  17.9k|  Reg tmp;
 2801|  17.9k|  ra_evictset(as, RSET_SCRATCH);
  ------------------
  |  |   98|  17.9k|  (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   82|  17.9k|#define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  17.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  17.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  |  |               #define RSET_ACD	(RID2RSET(RID_EAX)|RID2RSET(RID_ECX)|RID2RSET(RID_EDX))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  17.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   72|  17.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  17.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (RSET_ACD|RSET_RANGE(RID_ESI, RID_R11D+1)|RSET_FPR)
  |  |  ------------------
  |  |  |  |   70|  17.9k|#define RSET_FPR	(RSET_RANGE(RID_MIN_FPR, RID_MAX_FPR))
  |  |  |  |  ------------------
  |  |  |  |  |  |   72|  17.9k|#define RSET_RANGE(lo, hi)	((RID2RSET((hi)-(lo))-1) << (lo))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   70|  17.9k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2802|  17.9k|  l_end = emit_label(as);
  ------------------
  |  |  472|  17.9k|#define emit_label(as)		((as)->mcp)
  ------------------
 2803|       |  /* Exit trace if in GCSatomic or GCSfinalize. Avoids syncing GC objects. */
 2804|  17.9k|  asm_guardcc(as, CC_NE);  /* Assumes asm_snap_prep() already done. */
 2805|  17.9k|  emit_rr(as, XO_TEST, RID_RET, RID_RET);
 2806|  17.9k|  args[0] = ASMREF_TMP1;  /* global_State *g */
  ------------------
  |  |  118|  17.9k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 2807|  17.9k|  args[1] = ASMREF_TMP2;  /* MSize steps     */
  ------------------
  |  |  119|  17.9k|#define ASMREF_TMP2		REF_FALSE	/* Temp. register. */
  ------------------
 2808|  17.9k|  asm_gencall(as, ci, args);
 2809|  17.9k|  tmp = ra_releasetmp(as, ASMREF_TMP1);
  ------------------
  |  |  118|  17.9k|#define ASMREF_TMP1		REF_TRUE	/* Temp. register. */
  ------------------
 2810|  17.9k|#if LJ_GC64
 2811|  17.9k|  emit_rmro(as, XO_LEA, tmp|REX_64, RID_DISPATCH, GG_DISP2G);
  ------------------
  |  |   15|  17.9k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  17.9k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
                emit_rmro(as, XO_LEA, tmp|REX_64, RID_DISPATCH, GG_DISP2G);
  ------------------
  |  |  120|  17.9k|#define GG_DISP2G	(GG_OFS(g) - GG_OFS(dispatch))
  |  |  ------------------
  |  |  |  |  111|  17.9k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  |  |               #define GG_DISP2G	(GG_OFS(g) - GG_OFS(dispatch))
  |  |  ------------------
  |  |  |  |  111|  17.9k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
 2812|       |#else
 2813|       |  emit_loada(as, tmp, J2G(as->J));
 2814|       |#endif
 2815|  17.9k|  emit_loadi(as, ra_releasetmp(as, ASMREF_TMP2), as->gcsteps);
  ------------------
  |  |  119|  17.9k|#define ASMREF_TMP2		REF_FALSE	/* Temp. register. */
  ------------------
 2816|       |  /* Jump around GC step if GC total < GC threshold. */
 2817|  17.9k|  emit_sjcc(as, CC_B, l_end);
 2818|  17.9k|  emit_opgl(as, XO_ARITH(XOg_CMP), tmp|REX_GC64, gc.threshold);
  ------------------
  |  |  267|  17.9k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  ------------------
  |  |  |  |  115|  17.9k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  ------------------
  |  |  |  |  |  |  113|  17.9k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  17.9k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2819|  17.9k|  emit_getgl(as, tmp, gc.total);
  ------------------
  |  |  268|  17.9k|#define emit_getgl(as, r, field) emit_opgl(as, XO_MOV, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  17.9k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  17.9k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  17.9k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  17.9k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2820|  17.9k|  as->gcsteps = 0;
 2821|  17.9k|  checkmclim(as);
 2822|  17.9k|}
lj_asm.c:asm_head_side_base:
 2895|  10.4k|{
 2896|  10.4k|  IRIns *ir = IR(REF_BASE);
  ------------------
  |  |  116|  10.4k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2897|  10.4k|  Reg r = ir->r;
 2898|  10.4k|  if (ra_hasreg(r)) {
  ------------------
  |  |   28|  10.4k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  10.4k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 4.27k, False: 6.17k]
  |  |  ------------------
  ------------------
 2899|  4.27k|    ra_free(as, r);
  ------------------
  |  |  346|  4.27k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|  4.27k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  4.27k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2900|  4.27k|    if (rset_test(as->modset, r) || irt_ismarked(ir->t))
  ------------------
  |  |   74|  8.55k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 16, False: 4.26k]
  |  |  ------------------
  ------------------
                  if (rset_test(as->modset, r) || irt_ismarked(ir->t))
  ------------------
  |  |  445|  4.26k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 3.37k, False: 884]
  |  |  ------------------
  ------------------
 2901|  3.39k|      ir->r = RID_INIT;  /* No inheritance for modified BASE register. */
  ------------------
  |  |   23|  3.39k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   21|  3.39k|#define RID_NONE		0x80
  |  |  ------------------
  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   22|  3.39k|#define RID_MASK		0x7f
  |  |  ------------------
  ------------------
 2902|  4.27k|    if (irp->r == r) {
  ------------------
  |  Branch (2902:9): [True: 1.32k, False: 2.95k]
  ------------------
 2903|  1.32k|      return r;  /* Same BASE register already coalesced. */
 2904|  2.95k|    } else if (ra_hasreg(irp->r) && rset_test(as->freeset, irp->r)) {
  ------------------
  |  |   28|  5.90k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  2.95k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 0, False: 2.95k]
  |  |  ------------------
  ------------------
                  } else if (ra_hasreg(irp->r) && rset_test(as->freeset, irp->r)) {
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2905|       |      /* Move from coalesced parent reg. */
 2906|      0|      emit_rr(as, XO_MOV, r|REX_GC64, irp->r);
  ------------------
  |  |   24|      0|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2907|      0|      return irp->r;
 2908|  2.95k|    } else {
 2909|  2.95k|      emit_getgl(as, r, jit_base);  /* Otherwise reload BASE. */
  ------------------
  |  |  268|  2.95k|#define emit_getgl(as, r, field) emit_opgl(as, XO_MOV, (r)|REX_GC64, field)
  |  |  ------------------
  |  |  |  |  267|  2.95k|  emit_rma(as, (xo), (r), (void *)&J2G(as->J)->field)
  |  |  |  |  ------------------
  |  |  |  |  |  |  115|  2.95k|#define J2G(J)		(&J2GG(J)->g)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  113|  2.95k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  111|  2.95k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2910|  2.95k|    }
 2911|  4.27k|  }
 2912|  9.12k|  return RID_NONE;
  ------------------
  |  |   21|  9.12k|#define RID_NONE		0x80
  ------------------
 2913|  10.4k|}
lj_asm.c:asm_head_root_base:
 2881|  14.1k|{
 2882|  14.1k|  IRIns *ir = IR(REF_BASE);
  ------------------
  |  |  116|  14.1k|#define IR(ref)			(&as->ir[(ref)])
  ------------------
 2883|  14.1k|  Reg r = ir->r;
 2884|  14.1k|  if (ra_hasreg(r)) {
  ------------------
  |  |   28|  14.1k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|  14.1k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 9.94k, False: 4.21k]
  |  |  ------------------
  ------------------
 2885|  9.94k|    ra_free(as, r);
  ------------------
  |  |  346|  9.94k|#define ra_free(as, r)		rset_set(as->freeset, (r))
  |  |  ------------------
  |  |  |  |   75|  9.94k|#define rset_set(rs, r)		(rs |= RID2RSET(r))
  |  |  |  |  ------------------
  |  |  |  |  |  |   70|  9.94k|#define RID2RSET(r)		(((RegSet)1) << (r))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2886|  9.94k|    if (rset_test(as->modset, r) || irt_ismarked(ir->t))
  ------------------
  |  |   74|  19.8k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 1.10k, False: 8.84k]
  |  |  ------------------
  ------------------
                  if (rset_test(as->modset, r) || irt_ismarked(ir->t))
  ------------------
  |  |  445|  8.84k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 0, False: 8.84k]
  |  |  ------------------
  ------------------
 2887|  1.10k|      ir->r = RID_INIT;  /* No inheritance for modified BASE register. */
  ------------------
  |  |   23|  1.10k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   21|  1.10k|#define RID_NONE		0x80
  |  |  ------------------
  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  ------------------
  |  |  |  |   22|  1.10k|#define RID_MASK		0x7f
  |  |  ------------------
  ------------------
 2888|  9.94k|    if (r != RID_BASE)
  ------------------
  |  Branch (2888:9): [True: 614, False: 9.33k]
  ------------------
 2889|    614|      emit_rr(as, XO_MOV, r|REX_GC64, RID_BASE);
  ------------------
  |  |   24|    614|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|    614|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|    614|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2890|  9.94k|  }
 2891|  14.1k|}
lj_asm.c:asm_loop_tail_fixup:
 2873|  9.85k|{
 2874|  9.85k|  UNUSED(as);  /* Nothing to do. */
  ------------------
  |  |   91|  9.85k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 2875|  9.85k|}
lj_asm.c:asm_tail_fixup:
 2919|  14.3k|{
 2920|       |  /* Note: don't use as->mcp swap + emit_*: emit_op overwrites more bytes. */
 2921|  14.3k|  MCode *p = as->mctop;
 2922|  14.3k|  MCode *target, *q;
 2923|  14.3k|  int32_t spadj = as->T->spadjust;
 2924|  14.3k|  if (spadj == 0) {
  ------------------
  |  Branch (2924:7): [True: 9.80k, False: 4.55k]
  ------------------
 2925|  9.80k|    p -= LJ_64 ? 7 : 6;
  ------------------
  |  |  640|  9.80k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2926|  9.80k|  } else {
 2927|  4.55k|    MCode *p1;
 2928|       |    /* Patch stack adjustment. */
 2929|  4.55k|    if (checki8(spadj)) {
  ------------------
  |  |  101|  4.55k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 4.55k, False: 0]
  |  |  ------------------
  ------------------
 2930|  4.55k|      p -= 3;
 2931|  4.55k|      p1 = p-6;
 2932|  4.55k|      *p1 = (MCode)spadj;
 2933|  4.55k|    } else {
 2934|      0|      p1 = p-9;
 2935|      0|      *(int32_t *)p1 = spadj;
 2936|      0|    }
 2937|  4.55k|#if LJ_64
 2938|  4.55k|    p1[-3] = 0x48;
 2939|  4.55k|#endif
 2940|  4.55k|    p1[-2] = (MCode)(checki8(spadj) ? XI_ARITHi8 : XI_ARITHi);
  ------------------
  |  |  101|  4.55k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 4.55k, False: 0]
  |  |  ------------------
  ------------------
 2941|  4.55k|    p1[-1] = MODRM(XM_REG, XOg_ADD, RID_ESP);
  ------------------
  |  |    8|  4.55k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  ------------------
 2942|  4.55k|  }
 2943|       |  /* Patch exit branch. */
 2944|  14.3k|  target = lnk ? traceref(as->J, lnk)->mcode : (MCode *)lj_vm_exit_interp;
  ------------------
  |  |  298|  7.05k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  7.05k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.05k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  14.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 7.05k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 7.05k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.05k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2944:12): [True: 7.05k, False: 7.29k]
  ------------------
 2945|  14.3k|  *(int32_t *)(p-4) = jmprel(as->J, p, target);
 2946|  14.3k|  p[-5] = XI_JMP;
 2947|       |  /* Drop unused mcode tail. Fill with NOPs to make the prefetcher happy. */
 2948|  96.6k|  for (q = as->mctop-1; q >= p; q--)
  ------------------
  |  Branch (2948:25): [True: 82.2k, False: 14.3k]
  ------------------
 2949|  82.2k|    *q = XI_NOP;
 2950|  14.3k|  as->mctop = p;
 2951|  14.3k|}

lj_trace.c:bc_isret:
  258|  1.98k|{
  259|  1.98k|  return (op == BC_RETM || op == BC_RET || op == BC_RET0 || op == BC_RET1);
  ------------------
  |  Branch (259:11): [True: 0, False: 1.98k]
  |  Branch (259:28): [True: 0, False: 1.98k]
  |  Branch (259:44): [True: 0, False: 1.98k]
  |  Branch (259:61): [True: 0, False: 1.98k]
  ------------------
  260|  1.98k|}
lj_snap.c:bc_isret:
  258|  90.6k|{
  259|  90.6k|  return (op == BC_RETM || op == BC_RET || op == BC_RET0 || op == BC_RET1);
  ------------------
  |  Branch (259:11): [True: 0, False: 90.6k]
  |  Branch (259:28): [True: 0, False: 90.6k]
  |  Branch (259:44): [True: 11.0k, False: 79.6k]
  |  Branch (259:61): [True: 36.6k, False: 42.9k]
  ------------------
  260|  90.6k|}
lj_record.c:bc_isret:
  258|  28.7k|{
  259|  28.7k|  return (op == BC_RETM || op == BC_RET || op == BC_RET0 || op == BC_RET1);
  ------------------
  |  Branch (259:11): [True: 0, False: 28.7k]
  |  Branch (259:28): [True: 0, False: 28.7k]
  |  Branch (259:44): [True: 4.47k, False: 24.3k]
  |  Branch (259:61): [True: 17.6k, False: 6.63k]
  ------------------
  260|  28.7k|}

lj_bcread_proto:
  314|   109k|{
  315|   109k|  GCproto *pt;
  316|   109k|  MSize framesize, numparams, flags, sizeuv, sizekgc, sizekn, sizebc, sizept;
  317|   109k|  MSize ofsk, ofsuv, ofsdbg;
  318|   109k|  MSize sizedbg = 0;
  319|   109k|  BCLine firstline = 0, numline = 0;
  320|       |
  321|       |  /* Read prototype header. */
  322|   109k|  flags = bcread_byte(ls);
  323|   109k|  numparams = bcread_byte(ls);
  324|   109k|  framesize = bcread_byte(ls);
  325|   109k|  sizeuv = bcread_byte(ls);
  326|   109k|  sizekgc = bcread_uleb128(ls);
  327|   109k|  sizekn = bcread_uleb128(ls);
  328|   109k|  sizebc = bcread_uleb128(ls) + 1;
  329|   109k|  if (!(bcread_flags(ls) & BCDUMP_F_STRIP)) {
  ------------------
  |  |   27|   109k|#define bcread_flags(ls)	ls->level
  ------------------
                if (!(bcread_flags(ls) & BCDUMP_F_STRIP)) {
  ------------------
  |  |   43|   109k|#define BCDUMP_F_STRIP		0x02
  ------------------
  |  Branch (329:7): [True: 0, False: 109k]
  ------------------
  330|      0|    sizedbg = bcread_uleb128(ls);
  331|      0|    if (sizedbg) {
  ------------------
  |  Branch (331:9): [True: 0, False: 0]
  ------------------
  332|      0|      firstline = bcread_uleb128(ls);
  333|      0|      numline = bcread_uleb128(ls);
  334|      0|    }
  335|      0|  }
  336|       |
  337|       |  /* Calculate total size of prototype including all colocated arrays. */
  338|   109k|  sizept = (MSize)sizeof(GCproto) +
  339|   109k|	   sizebc*(MSize)sizeof(BCIns) +
  340|   109k|	   sizekgc*(MSize)sizeof(GCRef);
  341|   109k|  sizept = (sizept + (MSize)sizeof(TValue)-1) & ~((MSize)sizeof(TValue)-1);
  342|   109k|  ofsk = sizept; sizept += sizekn*(MSize)sizeof(TValue);
  343|   109k|  ofsuv = sizept; sizept += ((sizeuv+1)&~1)*2;
  344|   109k|  ofsdbg = sizept; sizept += sizedbg;
  345|       |
  346|       |  /* Allocate prototype object and initialize its fields. */
  347|   109k|  pt = (GCproto *)lj_mem_newgco(ls->L, (MSize)sizept);
  348|   109k|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|   109k|#define LJ_TPROTO		(~7u)
  ------------------
  349|   109k|  pt->numparams = (uint8_t)numparams;
  350|   109k|  pt->framesize = (uint8_t)framesize;
  351|   109k|  pt->sizebc = sizebc;
  352|   109k|  setmref(pt->k, (char *)pt + ofsk);
  ------------------
  |  |   39|   109k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  353|   109k|  setmref(pt->uv, (char *)pt + ofsuv);
  ------------------
  |  |   39|   109k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  354|   109k|  pt->sizekgc = 0;  /* Set to zero until fully initialized. */
  355|   109k|  pt->sizekn = sizekn;
  356|   109k|  pt->sizept = sizept;
  357|   109k|  pt->sizeuv = (uint8_t)sizeuv;
  358|   109k|  pt->flags = (uint8_t)flags;
  359|   109k|  pt->trace = 0;
  360|   109k|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|   109k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  361|       |
  362|       |  /* Close potentially uninitialized gap between bc and kgc. */
  363|   109k|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(sizekgc+1)) = 0;
  364|       |
  365|       |  /* Read bytecode instructions and upvalue refs. */
  366|   109k|  bcread_bytecode(ls, pt, sizebc);
  367|   109k|  bcread_uv(ls, pt, sizeuv);
  368|       |
  369|       |  /* Read constants. */
  370|   109k|  bcread_kgc(ls, pt, sizekgc);
  371|   109k|  pt->sizekgc = sizekgc;
  372|   109k|  bcread_knum(ls, pt, sizekn);
  373|       |
  374|       |  /* Read and initialize debug info. */
  375|   109k|  pt->firstline = firstline;
  376|   109k|  pt->numline = numline;
  377|   109k|  if (sizedbg) {
  ------------------
  |  Branch (377:7): [True: 0, False: 109k]
  ------------------
  378|      0|    MSize sizeli = (sizebc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (378:35): [True: 0, False: 0]
  |  Branch (378:55): [True: 0, False: 0]
  ------------------
  379|      0|    setmref(pt->lineinfo, (char *)pt + ofsdbg);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  380|      0|    setmref(pt->uvinfo, (char *)pt + ofsdbg + sizeli);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  381|      0|    bcread_dbg(ls, pt, sizedbg);
  382|      0|    setmref(pt->varinfo, bcread_varinfo(pt));
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  383|   109k|  } else {
  384|   109k|    setmref(pt->lineinfo, NULL);
  ------------------
  |  |   39|   109k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  385|   109k|    setmref(pt->uvinfo, NULL);
  ------------------
  |  |   39|   109k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  386|   109k|    setmref(pt->varinfo, NULL);
  ------------------
  |  |   39|   109k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  387|   109k|  }
  388|   109k|  return pt;
  389|   109k|}
lj_bcread:
  422|      2|{
  423|      2|  lua_State *L = ls->L;
  424|      2|  lj_assertLS(ls->c == BCDUMP_HEAD1, "bad bytecode header");
  ------------------
  |  |   89|      2|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      2|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  425|      2|  bcread_savetop(L, ls, L->top);
  ------------------
  |  |   32|      2|  ls->lastline = (BCLine)savestack(L, (top))
  |  |  ------------------
  |  |  |  |   14|      2|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      2|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  426|      2|  lj_buf_reset(&ls->sb);
  427|       |  /* Check for a valid bytecode dump header. */
  428|      2|  if (!bcread_header(ls))
  ------------------
  |  Branch (428:7): [True: 2, False: 0]
  ------------------
  429|      2|    bcread_error(ls, LJ_ERR_BCFMT);
  430|      2|  for (;;) {  /* Process all prototypes in the bytecode dump. */
  431|      0|    GCproto *pt;
  432|      0|    MSize len;
  433|      0|    const char *startp;
  434|       |    /* Read length. */
  435|      0|    if (ls->p < ls->pe && ls->p[0] == 0) {  /* Shortcut EOF. */
  ------------------
  |  Branch (435:9): [True: 0, False: 0]
  |  Branch (435:27): [True: 0, False: 0]
  ------------------
  436|      0|      ls->p++;
  437|      0|      break;
  438|      0|    }
  439|      0|    bcread_want(ls, 5);
  440|      0|    len = bcread_uleb128(ls);
  441|      0|    if (!len) break;  /* EOF */
  ------------------
  |  Branch (441:9): [True: 0, False: 0]
  ------------------
  442|      0|    bcread_need(ls, len);
  443|      0|    startp = ls->p;
  444|      0|    pt = lj_bcread_proto(ls);
  445|      0|    if (ls->p != startp + len)
  ------------------
  |  Branch (445:9): [True: 0, False: 0]
  ------------------
  446|      0|      bcread_error(ls, LJ_ERR_BCBAD);
  447|      0|    setprotoV(L, L->top, pt);
  448|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  449|      0|  }
  450|      2|  if ((ls->pe != ls->p && !ls->endmark) || L->top-1 != bcread_oldtop(L, ls))
  ------------------
  |  |   30|      0|#define bcread_oldtop(L, ls)	restorestack(L, ls->lastline)
  |  |  ------------------
  |  |  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (450:8): [True: 0, False: 2]
  |  Branch (450:27): [True: 0, False: 0]
  |  Branch (450:44): [True: 0, False: 0]
  ------------------
  451|      0|    bcread_error(ls, LJ_ERR_BCBAD);
  452|       |  /* Pop off last prototype. */
  453|      2|  L->top--;
  454|      2|  return protoV(L->top);
  ------------------
  |  |  862|      2|#define protoV(o)	check_exp(tvisproto(o), &gcval(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      2|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      2|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 2]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|      2|}
lj_bcread.c:bcread_byte:
  122|   438k|{
  123|   438k|  lj_assertLS(ls->p < ls->pe, "buffer read overflow");
  ------------------
  |  |   89|   438k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   438k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   438k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 438k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   438k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  124|   438k|  return (uint32_t)(uint8_t)*ls->p++;
  125|   438k|}
lj_bcread.c:bcread_uleb128:
  129|   369k|{
  130|   369k|  uint32_t v = lj_buf_ruleb128(&ls->p);
  131|   369k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|   369k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   369k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   369k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 369k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   369k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  132|   369k|  return v;
  133|   369k|}
lj_bcread.c:bcread_bytecode:
  282|   109k|{
  283|   109k|  BCIns *bc = proto_bc(pt);
  ------------------
  |  |  420|   109k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  284|   109k|  BCIns op;
  285|   109k|  if (ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|   109k|#define LJ_FR2			1
  ------------------
  |  Branch (285:7): [True: 0, False: 109k]
  ------------------
  286|   109k|  else if ((pt->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|   109k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (286:12): [True: 0, False: 109k]
  ------------------
  287|   109k|  else op = BC_FUNCF;
  288|   109k|  bc[0] = BCINS_AD(op, pt->framesize, 0);
  ------------------
  |  |   56|   109k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  289|   109k|  bcread_block(ls, bc+1, (sizebc-1)*(MSize)sizeof(BCIns));
  290|       |  /* Swap bytecode instructions if the endianess differs. */
  291|   109k|  if (bcread_swap(ls)) {
  ------------------
  |  |   29|   109k|  ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   27|   109k|#define bcread_flags(ls)	ls->level
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|   109k|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |  630|   109k|#define LJ_BE			0
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|   109k|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |  |  Branch (29:3): [True: 0, False: 109k]
  |  |  ------------------
  ------------------
  292|      0|    MSize i;
  293|      0|    for (i = 1; i < sizebc; i++) bc[i] = lj_bswap(bc[i]);
  ------------------
  |  Branch (293:17): [True: 0, False: 0]
  ------------------
  294|      0|  }
  295|   109k|}
lj_bcread.c:bcread_block:
  116|   109k|{
  117|   109k|  memcpy(q, bcread_mem(ls, len), len);
  118|   109k|}
lj_bcread.c:bcread_mem:
  107|   109k|{
  108|   109k|  uint8_t *p = (uint8_t *)ls->p;
  109|   109k|  ls->p += len;
  110|   109k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|   109k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   109k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   109k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 109k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   109k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  111|   109k|  return p;
  112|   109k|}
lj_bcread.c:bcread_uv:
  299|   109k|{
  300|   109k|  if (sizeuv) {
  ------------------
  |  Branch (300:7): [True: 0, False: 109k]
  ------------------
  301|      0|    uint16_t *uv = proto_uv(pt);
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  302|      0|    bcread_block(ls, uv, sizeuv*2);
  303|       |    /* Swap upvalue refs if the endianess differs. */
  304|      0|    if (bcread_swap(ls)) {
  ------------------
  |  |   29|      0|  ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   27|      0|#define bcread_flags(ls)	ls->level
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|      0|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |  630|      0|#define LJ_BE			0
  |  |  ------------------
  |  |                 ((bcread_flags(ls) & BCDUMP_F_BE) != LJ_BE*BCDUMP_F_BE)
  |  |  ------------------
  |  |  |  |   42|      0|#define BCDUMP_F_BE		0x01
  |  |  ------------------
  |  |  |  Branch (29:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  305|      0|      MSize i;
  306|      0|      for (i = 0; i < sizeuv; i++)
  ------------------
  |  Branch (306:19): [True: 0, False: 0]
  ------------------
  307|      0|	uv[i] = (uint16_t)((uv[i] >> 8)|(uv[i] << 8));
  308|      0|    }
  309|      0|  }
  310|   109k|}
lj_bcread.c:bcread_kgc:
  226|   109k|{
  227|   109k|  MSize i;
  228|   109k|  GCRef *kr = mref(pt->k, GCRef) - (ptrdiff_t)sizekgc;
  ------------------
  |  |   36|   109k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  229|   109k|  for (i = 0; i < sizekgc; i++, kr++) {
  ------------------
  |  Branch (229:15): [True: 0, False: 109k]
  ------------------
  230|      0|    MSize tp = bcread_uleb128(ls);
  231|      0|    if (tp >= BCDUMP_KGC_STR) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      MSize len = tp - BCDUMP_KGC_STR;
  233|      0|      const char *p = (const char *)bcread_mem(ls, len);
  234|      0|      setgcref(*kr, obj2gco(lj_str_new(ls->L, p, len)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  235|      0|    } else if (tp == BCDUMP_KGC_TAB) {
  ------------------
  |  Branch (235:16): [True: 0, False: 0]
  ------------------
  236|      0|      setgcref(*kr, obj2gco(bcread_ktab(ls)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  237|      0|#if LJ_HASFFI
  238|      0|    } else if (tp != BCDUMP_KGC_CHILD) {
  ------------------
  |  Branch (238:16): [True: 0, False: 0]
  ------------------
  239|      0|      CTypeID id = tp == BCDUMP_KGC_COMPLEX ? CTID_COMPLEX_DOUBLE :
  ------------------
  |  Branch (239:20): [True: 0, False: 0]
  ------------------
  240|      0|		   tp == BCDUMP_KGC_I64 ? CTID_INT64 : CTID_UINT64;
  ------------------
  |  Branch (240:6): [True: 0, False: 0]
  ------------------
  241|      0|      CTSize sz = tp == BCDUMP_KGC_COMPLEX ? 16 : 8;
  ------------------
  |  Branch (241:19): [True: 0, False: 0]
  ------------------
  242|      0|      GCcdata *cd = lj_cdata_new_(ls->L, id, sz);
  243|      0|      TValue *p = (TValue *)cdataptr(cd);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  244|      0|      setgcref(*kr, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  245|      0|      p[0].u32.lo = bcread_uleb128(ls);
  246|      0|      p[0].u32.hi = bcread_uleb128(ls);
  247|      0|      if (tp == BCDUMP_KGC_COMPLEX) {
  ------------------
  |  Branch (247:11): [True: 0, False: 0]
  ------------------
  248|      0|	p[1].u32.lo = bcread_uleb128(ls);
  249|      0|	p[1].u32.hi = bcread_uleb128(ls);
  250|      0|      }
  251|      0|#endif
  252|      0|    } else {
  253|      0|      lua_State *L = ls->L;
  254|      0|      lj_assertLS(tp == BCDUMP_KGC_CHILD, "bad constant type %d", tp);
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  255|      0|      if (L->top <= bcread_oldtop(L, ls))  /* Stack underflow? */
  ------------------
  |  |   30|      0|#define bcread_oldtop(L, ls)	restorestack(L, ls->lastline)
  |  |  ------------------
  |  |  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (255:11): [True: 0, False: 0]
  ------------------
  256|      0|	bcread_error(ls, LJ_ERR_BCBAD);
  257|      0|      L->top--;
  258|      0|      setgcref(*kr, obj2gco(protoV(L->top)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  259|      0|    }
  260|      0|  }
  261|   109k|}
lj_bcread.c:bcread_knum:
  265|   109k|{
  266|   109k|  MSize i;
  267|   109k|  TValue *o = mref(pt->k, TValue);
  ------------------
  |  |   36|   109k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  268|   178k|  for (i = 0; i < sizekn; i++, o++) {
  ------------------
  |  Branch (268:15): [True: 68.4k, False: 109k]
  ------------------
  269|  68.4k|    int isnum = (ls->p[0] & 1);
  270|  68.4k|    uint32_t lo = bcread_uleb128_33(ls);
  271|  68.4k|    if (isnum) {
  ------------------
  |  Branch (271:9): [True: 41.0k, False: 27.3k]
  ------------------
  272|  41.0k|      o->u32.lo = lo;
  273|  41.0k|      o->u32.hi = bcread_uleb128(ls);
  274|  41.0k|    } else {
  275|  27.3k|      setintV(o, lo);
  276|  27.3k|    }
  277|  68.4k|  }
  278|   109k|}
lj_bcread.c:bcread_uleb128_33:
  137|  68.4k|{
  138|  68.4k|  const uint8_t *p = (const uint8_t *)ls->p;
  139|  68.4k|  uint32_t v = (*p++ >> 1);
  140|  68.4k|  if (LJ_UNLIKELY(v >= 0x40)) {
  ------------------
  |  |  146|  68.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 27.3k, False: 41.0k]
  |  |  ------------------
  ------------------
  141|  27.3k|    int sh = -1;
  142|  27.3k|    v &= 0x3f;
  143|   109k|    do {
  144|   109k|     v |= ((*p & 0x7f) << (sh += 7));
  145|   109k|   } while (*p++ >= 0x80);
  ------------------
  |  Branch (145:13): [True: 82.1k, False: 27.3k]
  ------------------
  146|  27.3k|  }
  147|  68.4k|  ls->p = (char *)p;
  148|  68.4k|  lj_assertLS(ls->p <= ls->pe, "buffer read overflow");
  ------------------
  |  |   89|  68.4k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  68.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  68.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 68.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  68.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|  68.4k|  return v;
  150|  68.4k|}
lj_bcread.c:bcread_header:
  393|      2|{
  394|      2|  uint32_t flags;
  395|      2|  bcread_want(ls, 3+5+5);
  396|      2|  if (bcread_byte(ls) != BCDUMP_HEAD2 ||
  ------------------
  |  |   33|      4|#define BCDUMP_HEAD2		0x4c
  ------------------
  |  Branch (396:7): [True: 1, False: 1]
  ------------------
  397|      2|      bcread_byte(ls) != BCDUMP_HEAD3 ||
  ------------------
  |  |   34|      3|#define BCDUMP_HEAD3		0x4a
  ------------------
  |  Branch (397:7): [True: 1, False: 0]
  ------------------
  398|      2|      bcread_byte(ls) != BCDUMP_VERSION) return 0;
  ------------------
  |  |   39|      0|#define BCDUMP_VERSION		2
  ------------------
  |  Branch (398:7): [True: 0, False: 0]
  ------------------
  399|      0|  bcread_flags(ls) = flags = bcread_uleb128(ls);
  ------------------
  |  |   27|      0|#define bcread_flags(ls)	ls->level
  ------------------
  400|      0|  if ((flags & ~(BCDUMP_F_KNOWN)) != 0) return 0;
  ------------------
  |  |   47|      0|#define BCDUMP_F_KNOWN		(BCDUMP_F_FR2*2-1)
  |  |  ------------------
  |  |  |  |   45|      0|#define BCDUMP_F_FR2		0x08
  |  |  ------------------
  ------------------
  |  Branch (400:7): [True: 0, False: 0]
  ------------------
  401|      0|  if ((flags & BCDUMP_F_FR2) != (uint32_t)ls->fr2*BCDUMP_F_FR2) return 0;
  ------------------
  |  |   45|      0|#define BCDUMP_F_FR2		0x08
  ------------------
                if ((flags & BCDUMP_F_FR2) != (uint32_t)ls->fr2*BCDUMP_F_FR2) return 0;
  ------------------
  |  |   45|      0|#define BCDUMP_F_FR2		0x08
  ------------------
  |  Branch (401:7): [True: 0, False: 0]
  ------------------
  402|      0|  if ((flags & BCDUMP_F_FFI)) {
  ------------------
  |  |   44|      0|#define BCDUMP_F_FFI		0x04
  ------------------
  |  Branch (402:7): [True: 0, False: 0]
  ------------------
  403|      0|#if LJ_HASFFI
  404|      0|    lua_State *L = ls->L;
  405|      0|    ctype_loadffi(L);
  ------------------
  |  |  396|      0|  do { \
  |  |  397|      0|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  384|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (397:9): [True: 0, False: 0]
  |  |  ------------------
  |  |  398|      0|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  399|      0|      luaopen_ffi(L); \
  |  |  400|      0|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|      0|    } \
  |  |  402|      0|  } while (0)
  |  |  ------------------
  |  |  |  Branch (402:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  406|       |#else
  407|       |    return 0;
  408|       |#endif
  409|      0|  }
  410|      0|  if ((flags & BCDUMP_F_STRIP)) {
  ------------------
  |  |   43|      0|#define BCDUMP_F_STRIP		0x02
  ------------------
  |  Branch (410:7): [True: 0, False: 0]
  ------------------
  411|      0|    ls->chunkname = lj_str_newz(ls->L, *ls->chunkarg == BCDUMP_HEAD1 ? "=?" : ls->chunkarg);
  ------------------
  |  |   27|      0|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  |  |  ------------------
  |  |  |  Branch (27:42): [True: 0, False: 0]
  |  |  |  Branch (27:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  412|      0|  } else {
  413|      0|    MSize len = bcread_uleb128(ls);
  414|      0|    bcread_need(ls, len);
  415|      0|    ls->chunkname = lj_str_new(ls->L, (const char *)bcread_mem(ls, len), len);
  416|      0|  }
  417|      0|  return 1;  /* Ok. */
  418|      0|}
lj_bcread.c:bcread_error:
   38|      2|{
   39|      2|  lua_State *L = ls->L;
   40|      2|  const char *name = ls->chunkarg;
   41|      2|  if (*name == BCDUMP_HEAD1) name = "(binary)";
  ------------------
  |  |   32|      2|#define BCDUMP_HEAD1		0x1b
  ------------------
  |  Branch (41:7): [True: 0, False: 2]
  ------------------
   42|      2|  else if (*name == '@' || *name == '=') name++;
  ------------------
  |  Branch (42:12): [True: 0, False: 2]
  |  Branch (42:28): [True: 0, False: 2]
  ------------------
   43|      2|  lj_strfmt_pushf(L, "%s: %s", name, err2msg(em));
  ------------------
  |  |   21|      2|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
   44|      2|  lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      2|#define LUA_ERRSYNTAX	3
  ------------------
   45|      2|}
lj_bcread.c:bcread_want:
  100|      2|{
  101|      2|  if (LJ_UNLIKELY((MSize)(ls->pe - ls->p) < len))
  ------------------
  |  |  146|      2|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2, False: 0]
  |  |  ------------------
  ------------------
  102|      2|    bcread_fill(ls, len, 0);
  103|      2|}
lj_bcread.c:bcread_fill:
   49|      2|{
   50|      2|  lj_assertLS(len != 0, "empty refill");
  ------------------
  |  |   89|      2|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      2|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   51|      2|  if (len > LJ_MAX_BUF || ls->c < 0)
  ------------------
  |  |   55|      2|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      4|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 2]
  |  Branch (51:27): [True: 0, False: 2]
  ------------------
   52|      0|    bcread_error(ls, LJ_ERR_BCBAD);
   53|      2|  do {
   54|      2|    const char *buf;
   55|      2|    size_t sz;
   56|      2|    char *p = ls->sb.b;
   57|      2|    MSize n = (MSize)(ls->pe - ls->p);
   58|      2|    if (n) {  /* Copy remainder to buffer. */
  ------------------
  |  Branch (58:9): [True: 2, False: 0]
  ------------------
   59|      2|      if (sbuflen(&ls->sb)) {  /* Move down in buffer. */
  ------------------
  |  |   36|      2|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  |  |  ------------------
  |  |  |  Branch (36:22): [True: 0, False: 2]
  |  |  ------------------
  ------------------
   60|      0|	lj_assertLS(ls->pe == ls->sb.w, "bad buffer pointer");
  ------------------
  |  |   89|      0|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   61|      0|	if (ls->p != p) memmove(p, ls->p, n);
  ------------------
  |  Branch (61:6): [True: 0, False: 0]
  ------------------
   62|      2|      } else {  /* Copy from buffer provided by reader. */
   63|      2|	p = lj_buf_need(&ls->sb, len);
   64|      2|	memcpy(p, ls->p, n);
   65|      2|      }
   66|      2|      ls->p = p;
   67|      2|      ls->pe = p + n;
   68|      2|    }
   69|      2|    ls->sb.w = p + n;
   70|      2|    buf = ls->rfunc(ls->L, ls->rdata, &sz);  /* Get more data from reader. */
   71|      2|    if (buf == NULL || sz == 0) {  /* EOF? */
  ------------------
  |  Branch (71:9): [True: 0, False: 2]
  |  Branch (71:24): [True: 1, False: 1]
  ------------------
   72|      1|      if (need) bcread_error(ls, LJ_ERR_BCBAD);
  ------------------
  |  Branch (72:11): [True: 0, False: 1]
  ------------------
   73|      1|      ls->c = -1;  /* Only bad if we get called again. */
   74|      1|      break;
   75|      1|    }
   76|      1|    if (sz >= LJ_MAX_BUF - n) lj_err_mem(ls->L);
  ------------------
  |  |   55|      1|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      1|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (76:9): [True: 0, False: 1]
  ------------------
   77|      1|    if (n) {  /* Append to buffer. */
  ------------------
  |  Branch (77:9): [True: 1, False: 0]
  ------------------
   78|      1|      n += (MSize)sz;
   79|      1|      p = lj_buf_need(&ls->sb, n < len ? len : n);
  ------------------
  |  Branch (79:32): [True: 0, False: 1]
  ------------------
   80|      1|      memcpy(ls->sb.w, buf, sz);
   81|      1|      ls->sb.w = p + n;
   82|      1|      ls->p = p;
   83|      1|      ls->pe = p + n;
   84|      1|    } else {  /* Return buffer provided by reader. */
   85|      0|      ls->p = buf;
   86|      0|      ls->pe = buf + sz;
   87|      0|    }
   88|      1|  } while ((MSize)(ls->pe - ls->p) < len);
  ------------------
  |  Branch (88:12): [True: 0, False: 1]
  ------------------
   89|      2|}

lj_buf_need2:
   52|      2|{
   53|      2|  lj_assertG_(G(sbufL(sb)), sz > sbufsz(sb), "SBuf overflow");
  ------------------
  |  |  363|      2|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      2|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      2|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   54|      2|  if (LJ_UNLIKELY(sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      2|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2]
  |  |  ------------------
  ------------------
   55|      0|    lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|      2|  buf_grow(sb, sz);
   57|      2|  return sb->b;
   58|      2|}
lj_buf_more2:
   61|  2.69M|{
   62|  2.69M|  if (sbufisext(sb)) {
  ------------------
  |  |   56|  2.69M|#define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   55|  2.69M|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|  2.69M|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufisext(sb)		(sbufflag((sb)) & SBUF_FLAG_EXT)
  |  |  ------------------
  |  |  |  |   43|  2.69M|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  |  |  ------------------
  |  |  |  Branch (56:24): [True: 0, False: 2.69M]
  |  |  ------------------
  ------------------
   63|      0|    SBufExt *sbx = (SBufExt *)sb;
   64|      0|    MSize len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
   65|      0|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   66|      0|      lj_err_mem(sbufL(sbx));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    if (len + sz > sbufsz(sbx)) {  /* Must grow. */
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (67:9): [True: 0, False: 0]
  ------------------
   68|      0|      buf_grow((SBuf *)sbx, len + sz);
   69|      0|    } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   39|      0|#define sbufxslack(sbx)		((MSize)((sbx)->r - (sbx)->b))
  ------------------
                  } else if (sbufiscow(sb) || sbufxslack(sbx) < (sbufsz(sbx) >> 3)) {
  ------------------
  |  |   35|      0|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
  |  Branch (69:33): [True: 0, False: 0]
  ------------------
   70|       |      /* Also grow to avoid excessive compactions, if slack < size/8. */
   71|      0|      buf_grow((SBuf *)sbx, sbuflen(sbx) + sz);  /* Not sbufxlen! */
  ------------------
  |  |   36|      0|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   72|      0|      return sbx->w;
   73|      0|    }
   74|      0|    if (sbx->r != sbx->b) {  /* Compact by moving down. */
  ------------------
  |  Branch (74:9): [True: 0, False: 0]
  ------------------
   75|      0|      memmove(sbx->b, sbx->r, len);
   76|      0|      sbx->r = sbx->b;
   77|      0|      sbx->w = sbx->b + len;
   78|      0|      lj_assertG_(G(sbufL(sbx)), len + sz <= sbufsz(sbx), "bad SBuf compact");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   79|      0|    }
   80|  2.69M|  } else {
   81|  2.69M|    MSize len = sbuflen(sb);
  ------------------
  |  |   36|  2.69M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   82|  2.69M|    lj_assertG_(G(sbufL(sb)), sz > sbufleft(sb), "SBuf overflow");
  ------------------
  |  |  363|  2.69M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.69M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.69M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.69M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   83|  2.69M|    if (LJ_UNLIKELY(sz > LJ_MAX_BUF || len + sz > LJ_MAX_BUF))
  ------------------
  |  |  146|  5.38M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.69M]
  |  |  |  Branch (146:44): [True: 0, False: 2.69M]
  |  |  |  Branch (146:44): [True: 0, False: 2.69M]
  |  |  ------------------
  ------------------
   84|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   85|  2.69M|    buf_grow(sb, len + sz);
   86|  2.69M|  }
   87|  2.69M|  return sb->w;
   88|  2.69M|}
lj_buf_shrink:
   91|   259k|{
   92|   259k|  char *b = sb->b;
   93|   259k|  MSize osz = (MSize)(sb->e - b);
   94|   259k|  if (osz > 2*LJ_MIN_SBUF) {
  ------------------
  |  |   80|   259k|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (94:7): [True: 6.43k, False: 253k]
  ------------------
   95|  6.43k|    b = lj_mem_realloc(L, b, osz, (osz >> 1));
   96|  6.43k|    sb->w = sb->b = b;  /* Not supposed to keep data across shrinks. */
   97|  6.43k|    sb->e = b + (osz >> 1);
   98|  6.43k|  }
   99|   259k|  lj_assertG_(G(sbufL(sb)), !sbufisext(sb), "YAGNI shrink SBufExt");
  ------------------
  |  |  363|   259k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   259k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 259k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   259k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  100|   259k|}
lj_buf_tmp:
  103|  60.5k|{
  104|  60.5k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|  60.5k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  60.5k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  105|  60.5k|  setsbufL(sb, L);
  ------------------
  |  |   49|  60.5k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  60.5k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  106|  60.5k|  return lj_buf_need(sb, sz);
  107|  60.5k|}
lj_buf_putmem:
  131|  30.0M|{
  132|  30.0M|  char *w = lj_buf_more(sb, len);
  133|  30.0M|  w = lj_buf_wmem(w, q, len);
  134|  30.0M|  sb->w = w;
  135|  30.0M|  return sb;
  136|  30.0M|}
lj_buf_putchar:
  148|  3.37M|{
  149|  3.37M|  char *w = sb->w;
  150|  3.37M|  if (LJ_LIKELY(w < sb->e)) {
  ------------------
  |  |  145|  3.37M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 3.37M, False: 0]
  |  |  ------------------
  ------------------
  151|  3.37M|    *w++ = (char)c;
  152|  3.37M|    sb->w = w;
  153|  3.37M|    return sb;
  154|  3.37M|  }
  155|      0|  return lj_buf_putchar2(sb, c);
  156|  3.37M|}
lj_buf_putstr:
  160|  9.50M|{
  161|  9.50M|  MSize len = s->len;
  162|  9.50M|  char *w = lj_buf_more(sb, len);
  163|  9.50M|  w = lj_buf_wmem(w, strdata(s), len);
  ------------------
  |  |  316|  9.50M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  164|  9.50M|  sb->w = w;
  165|  9.50M|  return sb;
  166|  9.50M|}
lj_buf_putstr_lower:
  182|      4|{
  183|      4|  MSize len = s->len;
  184|      4|  char *w = lj_buf_more(sb, len), *e = w+len;
  185|      4|  const char *q = strdata(s);
  ------------------
  |  |  316|      4|#define strdata(s)	((const char *)((s)+1))
  ------------------
  186|     28|  for (; w < e; w++, q++) {
  ------------------
  |  Branch (186:10): [True: 24, False: 4]
  ------------------
  187|     24|    uint32_t c = *(unsigned char *)q;
  188|       |#if LJ_TARGET_PPC
  189|       |    *w = c + ((c >= 'A' && c <= 'Z') << 5);
  190|       |#else
  191|     24|    if (c >= 'A' && c <= 'Z') c += 0x20;
  ------------------
  |  Branch (191:9): [True: 24, False: 0]
  |  Branch (191:21): [True: 24, False: 0]
  ------------------
  192|     24|    *w = c;
  193|     24|#endif
  194|     24|  }
  195|      4|  sb->w = w;
  196|      4|  return sb;
  197|      4|}
lj_buf_putstr_upper:
  200|   875k|{
  201|   875k|  MSize len = s->len;
  202|   875k|  char *w = lj_buf_more(sb, len), *e = w+len;
  203|   875k|  const char *q = strdata(s);
  ------------------
  |  |  316|   875k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  204|  4.19M|  for (; w < e; w++, q++) {
  ------------------
  |  Branch (204:10): [True: 3.31M, False: 875k]
  ------------------
  205|  3.31M|    uint32_t c = *(unsigned char *)q;
  206|       |#if LJ_TARGET_PPC
  207|       |    *w = c - ((c >= 'a' && c <= 'z') << 5);
  208|       |#else
  209|  3.31M|    if (c >= 'a' && c <= 'z') c -= 0x20;
  ------------------
  |  Branch (209:9): [True: 2.30k, False: 3.31M]
  |  Branch (209:21): [True: 2.23k, False: 73]
  ------------------
  210|  3.31M|    *w = c;
  211|  3.31M|#endif
  212|  3.31M|  }
  213|   875k|  sb->w = w;
  214|   875k|  return sb;
  215|   875k|}
lj_buf_putstr_rep:
  218|  7.48k|{
  219|  7.48k|  MSize len = s->len;
  220|  7.48k|  if (rep > 0 && len) {
  ------------------
  |  Branch (220:7): [True: 7.32k, False: 162]
  |  Branch (220:18): [True: 7.32k, False: 0]
  ------------------
  221|  7.32k|    uint64_t tlen = (uint64_t)rep * len;
  222|  7.32k|    char *w;
  223|  7.32k|    if (LJ_UNLIKELY(tlen > LJ_MAX_STR))
  ------------------
  |  |  146|  7.32k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 7.32k]
  |  |  ------------------
  ------------------
  224|      0|      lj_err_mem(sbufL(sb));
  ------------------
  |  |   48|      0|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|      0|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|      0|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  225|  7.32k|    w = lj_buf_more(sb, (MSize)tlen);
  226|  7.32k|    if (len == 1) {  /* Optimize a common case. */
  ------------------
  |  Branch (226:9): [True: 7.27k, False: 56]
  ------------------
  227|  7.27k|      uint32_t c = strdata(s)[0];
  ------------------
  |  |  316|  7.27k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  228|  65.3k|      do { *w++ = c; } while (--rep > 0);
  ------------------
  |  Branch (228:31): [True: 58.1k, False: 7.27k]
  ------------------
  229|  7.27k|    } else {
  230|     56|      const char *e = strdata(s) + len;
  ------------------
  |  |  316|     56|#define strdata(s)	((const char *)((s)+1))
  ------------------
  231|   151k|      do {
  232|   151k|	const char *q = strdata(s);
  ------------------
  |  |  316|   151k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  233|  2.98M|	do { *w++ = *q++; } while (q < e);
  ------------------
  |  Branch (233:29): [True: 2.82M, False: 151k]
  ------------------
  234|   151k|      } while (--rep > 0);
  ------------------
  |  Branch (234:16): [True: 151k, False: 56]
  ------------------
  235|     56|    }
  236|  7.32k|    sb->w = w;
  237|  7.32k|  }
  238|  7.48k|  return sb;
  239|  7.48k|}
lj_buf_puttab:
  242|     31|{
  243|     31|  MSize seplen = sep ? sep->len : 0;
  ------------------
  |  Branch (243:18): [True: 31, False: 0]
  ------------------
  244|     31|  if (i <= e) {
  ------------------
  |  Branch (244:7): [True: 27, False: 4]
  ------------------
  245|     54|    for (;;) {
  246|     54|      cTValue *o = lj_tab_getint(t, i);
  ------------------
  |  |   82|     54|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|     54|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 54, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|     54|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|     54|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|     54|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  247|     54|      char *w;
  248|     54|      if (!o) {
  ------------------
  |  Branch (248:11): [True: 0, False: 54]
  ------------------
  249|      1|      badtype:  /* Error: bad element type. */
  250|      1|	sb->w = (char *)(intptr_t)i;  /* Store failing index. */
  251|      1|	return NULL;
  252|     54|      } else if (tvisstr(o)) {
  ------------------
  |  |  795|     54|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     54|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     54|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 54]
  |  |  ------------------
  ------------------
  253|      0|	MSize len = strV(o)->len;
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  254|      0|	w = lj_buf_wmem(lj_buf_more(sb, len + seplen), strVdata(o), len);
  ------------------
  |  |  318|      0|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  255|     54|      } else if (tvisint(o)) {
  ------------------
  |  |  803|     54|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    108|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  256|      0|	w = lj_strfmt_wint(lj_buf_more(sb, STRFMT_MAXBUF_INT+seplen), intV(o));
  ------------------
  |  |   71|      0|#define STRFMT_MAXBUF_INT	(1+10)  /* Sign + int32_t in decimal. */
  ------------------
              	w = lj_strfmt_wint(lj_buf_more(sb, STRFMT_MAXBUF_INT+seplen), intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  257|     54|      } else if (tvisnum(o)) {
  ------------------
  |  |  804|     54|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|     54|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     54|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     54|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 53, False: 1]
  |  |  ------------------
  ------------------
  258|     53|	w = lj_buf_more(lj_strfmt_putfnum(sb, STRFMT_G14, numV(o)), seplen);
  ------------------
  |  |   67|     53|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|     53|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|     53|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|     53|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	w = lj_buf_more(lj_strfmt_putfnum(sb, STRFMT_G14, numV(o)), seplen);
  ------------------
  |  |  866|     53|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     53|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     53|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     53|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 53, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     53|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  259|     53|      } else {
  260|      1|	goto badtype;
  261|      1|      }
  262|     53|      if (i++ == e) {
  ------------------
  |  Branch (262:11): [True: 26, False: 27]
  ------------------
  263|     26|	sb->w = w;
  264|     26|	break;
  265|     26|      }
  266|     27|      if (seplen) w = lj_buf_wmem(w, strdata(sep), seplen);
  ------------------
  |  |  316|     27|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (266:11): [True: 27, False: 0]
  ------------------
  267|     27|      sb->w = w;
  268|     27|    }
  269|     27|  }
  270|     30|  return sb;
  271|     31|}
lj_buf_tostr:
  276|  8.00M|{
  277|  8.00M|  return lj_str_new(sbufL(sb), sb->b, sbuflen(sb));
  ------------------
  |  |   48|  8.00M|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|  8.00M|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|  8.00M|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|  8.00M|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return lj_str_new(sbufL(sb), sb->b, sbuflen(sb));
  ------------------
  |  |   36|  8.00M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  278|  8.00M|}
lj_buf_ruleb128:
  292|   390k|{
  293|   390k|  const uint8_t *w = (const uint8_t *)*pp;
  294|   390k|  uint32_t v = *w++;
  295|   390k|  if (LJ_UNLIKELY(v >= 0x80)) {
  ------------------
  |  |  146|   390k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 42.4k, False: 347k]
  |  |  ------------------
  ------------------
  296|  42.4k|    int sh = 0;
  297|  42.4k|    v &= 0x7f;
  298|   165k|    do { v |= ((*w & 0x7f) << (sh += 7)); } while (*w++ >= 0x80);
  ------------------
  |  Branch (298:52): [True: 123k, False: 42.4k]
  ------------------
  299|  42.4k|  }
  300|   390k|  *pp = (const char *)w;
  301|   390k|  return v;
  302|   390k|}
lj_buf.c:buf_grow:
   20|  2.69M|{
   21|  2.69M|  MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   35|  2.69M|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
                MSize osz = sbufsz(sb), len = sbuflen(sb), nsz = osz;
  ------------------
  |  |   36|  2.69M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
   22|  2.69M|  char *b;
   23|  2.69M|  GCSize flag;
   24|  2.69M|  if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  2.69M|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
                if (nsz < LJ_MIN_SBUF) nsz = LJ_MIN_SBUF;
  ------------------
  |  |   80|  2.65M|#define LJ_MIN_SBUF	32		/* Min. string buffer length. */
  ------------------
  |  Branch (24:7): [True: 2.65M, False: 37.6k]
  ------------------
   25|  2.73M|  while (nsz < sz) nsz += nsz;
  ------------------
  |  Branch (25:10): [True: 40.9k, False: 2.69M]
  ------------------
   26|  2.69M|  flag = sbufflag(sb);
  ------------------
  |  |   55|  2.69M|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  ------------------
  |  |  |  |   37|  2.69M|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  ------------------
   27|  2.69M|  if ((flag & SBUF_FLAG_COW)) {  /* Copy-on-write semantics. */
  ------------------
  |  |   44|  2.69M|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  ------------------
  |  Branch (27:7): [True: 0, False: 2.69M]
  ------------------
   28|      0|    lj_assertG_(G(sbufL(sb)), sb->w == sb->e, "bad SBuf COW");
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   29|      0|    b = (char *)lj_mem_new(sbufL(sb), nsz);
  ------------------
  |  |  117|      0|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  ------------------
   30|      0|    setsbufflag(sb, flag & ~(GCSize)SBUF_FLAG_COW);
  ------------------
  |  |   62|      0|#define setsbufflag(sb, flag)	(setmrefu((sb)->L, (flag)))
  |  |  ------------------
  |  |  |  |   40|      0|#define setmrefu(r, u)	((r).ptr64 = (uint64_t)(u))
  |  |  ------------------
  ------------------
   31|      0|    setgcrefnull(sbufX(sb)->cowref);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  |  |  ------------------
  |  |  |  Branch (76:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   32|      0|    memcpy(b, sb->b, osz);
   33|  2.69M|  } else {
   34|  2.69M|    b = (char *)lj_mem_realloc(sbufL(sb), sb->b, osz, nsz);
  ------------------
  |  |   48|  2.69M|  ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   37|  2.69M|#define mrefu(r)	((r).ptr64)
  |  |  ------------------
  |  |                 ((lua_State *)(void *)(uintptr_t)(mrefu((sb)->L) & SBUF_MASK_L))
  |  |  ------------------
  |  |  |  |   42|  2.69M|#define SBUF_MASK_L		(~(GCSize)SBUF_MASK_FLAG)
  |  |  |  |  ------------------
  |  |  |  |  |  |   41|  2.69M|#define SBUF_MASK_FLAG		(7)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   35|  2.69M|  }
   36|  2.69M|  if ((flag & SBUF_FLAG_EXT)) {
  ------------------
  |  |   43|  2.69M|#define SBUF_FLAG_EXT		1	/* Extended string buffer. */
  ------------------
  |  Branch (36:7): [True: 0, False: 2.69M]
  ------------------
   37|      0|    sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  sbufX(sb)->r = sbufX(sb)->r - sb->b + b;  /* Adjust read pointer, too. */
  ------------------
  |  |   61|      0|  (lj_assertG_(G(sbufL(sb)), sbufisext(sb), "not an SBufExt"), (SBufExt *)(sb))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   38|      0|  }
   39|       |  /* Adjust buffer pointers. */
   40|  2.69M|  sb->b = b;
   41|  2.69M|  sb->w = b + len;
   42|  2.69M|  sb->e = b + nsz;
   43|  2.69M|  if ((flag & SBUF_FLAG_BORROW)) {  /* Adjust borrowed buffer pointers. */
  ------------------
  |  |   45|  2.69M|#define SBUF_FLAG_BORROW	4	/* Borrowed string buffer. */
  ------------------
  |  Branch (43:7): [True: 0, False: 2.69M]
  ------------------
   44|      0|    SBuf *bsb = mref(sbufX(sb)->bsb, SBuf);
  ------------------
  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   45|      0|    bsb->b = b;
   46|      0|    bsb->w = b + len;
   47|      0|    bsb->e = b + nsz;
   48|      0|  }
   49|  2.69M|}

lj_state.c:lj_buf_init:
   75|  13.6k|{
   76|  13.6k|  setsbufL(sb, L);
  ------------------
  |  |   49|  13.6k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  13.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  13.6k|  sb->w = sb->e = sb->b = NULL;
   78|  13.6k|}
lj_state.c:lj_buf_free:
   94|  13.6k|{
   95|  13.6k|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  13.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  13.6k|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  13.6k|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  13.6k|}
lj_lex.c:lj_buf_free:
   94|  2.97M|{
   95|  2.97M|  lj_assertG(!sbufisext(sb), "bad free of SBufExt");
  ------------------
  |  |  364|  2.97M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.97M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.97M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.97M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   96|  2.97M|  lj_mem_free(g, sb->b, sbufsz(sb));
  ------------------
  |  |   35|  2.97M|#define sbufsz(sb)		((MSize)((sb)->e - (sb)->b))
  ------------------
   97|  2.97M|}
lj_lex.c:lj_buf_reset:
   81|   765M|{
   82|   765M|  sb->w = sb->b;
   83|   765M|}
lj_lex.c:lj_buf_putb:
  181|  2.70G|{
  182|  2.70G|  char *w = lj_buf_more(sb, 1);
  183|  2.70G|  *w++ = (char)c;
  184|  2.70G|  sb->w = w;
  185|  2.70G|}
lj_lex.c:lj_buf_more:
  107|  2.70G|{
  108|  2.70G|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  2.70G|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.64M, False: 2.70G]
  |  |  ------------------
  ------------------
  109|  2.64M|    return lj_buf_more2(sb, sz);
  110|  2.70G|  return sb->w;
  111|  2.70G|}
lj_parse.c:lj_buf_reset:
   81|  1.90M|{
   82|  1.90M|  sb->w = sb->b;
   83|  1.90M|}
lj_parse.c:lj_buf_more:
  107|  2.93M|{
  108|  2.93M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  2.93M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 15.9k, False: 2.92M]
  |  |  ------------------
  ------------------
  109|  15.9k|    return lj_buf_more2(sb, sz);
  110|  2.92M|  return sb->w;
  111|  2.93M|}
lj_parse.c:lj_buf_wmem:
  176|   985k|{
  177|   985k|  return (char *)memcpy(p, q, len) + len;
  178|   985k|}
lj_parse.c:lj_buf_putb:
  181|  1.90M|{
  182|  1.90M|  char *w = lj_buf_more(sb, 1);
  183|  1.90M|  *w++ = (char)c;
  184|  1.90M|  sb->w = w;
  185|  1.90M|}
lj_load.c:lj_buf_init:
   75|  2.97M|{
   76|  2.97M|  setsbufL(sb, L);
  ------------------
  |  |   49|  2.97M|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  2.97M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   77|  2.97M|  sb->w = sb->e = sb->b = NULL;
   78|  2.97M|}
lj_buf.c:lj_buf_need:
  100|  60.5k|{
  101|  60.5k|  if (LJ_UNLIKELY(sz > sbufsz(sb)))
  ------------------
  |  |  146|  60.5k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 60.5k]
  |  |  ------------------
  ------------------
  102|      0|    return lj_buf_need2(sb, sz);
  103|  60.5k|  return sb->b;
  104|  60.5k|}
lj_buf.c:lj_buf_more:
  107|  40.4M|{
  108|  40.4M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  40.4M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 25.2k, False: 40.4M]
  |  |  ------------------
  ------------------
  109|  25.2k|    return lj_buf_more2(sb, sz);
  110|  40.4M|  return sb->w;
  111|  40.4M|}
lj_buf.c:lj_buf_wmem:
  176|  39.5M|{
  177|  39.5M|  return (char *)memcpy(p, q, len) + len;
  178|  39.5M|}
lj_meta.c:lj_buf_tmp_:
   86|   262k|{
   87|   262k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|   262k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   262k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|   262k|  setsbufL(sb, L);
  ------------------
  |  |   49|   262k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|   262k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|   262k|  lj_buf_reset(sb);
   90|   262k|  return sb;
   91|   262k|}
lj_meta.c:lj_buf_reset:
   81|   262k|{
   82|   262k|  sb->w = sb->b;
   83|   262k|}
lj_meta.c:lj_buf_more:
  107|   262k|{
  108|   262k|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|   262k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.28k, False: 261k]
  |  |  ------------------
  ------------------
  109|  1.28k|    return lj_buf_more2(sb, sz);
  110|   261k|  return sb->w;
  111|   262k|}
lj_meta.c:lj_buf_str:
  201|   262k|{
  202|   262k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|   262k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|   262k|}
lj_strfmt.c:lj_buf_tmp_:
   86|  12.4M|{
   87|  12.4M|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|  12.4M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  12.4M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|  12.4M|  setsbufL(sb, L);
  ------------------
  |  |   49|  12.4M|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|  12.4M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|  12.4M|  lj_buf_reset(sb);
   90|  12.4M|  return sb;
   91|  12.4M|}
lj_strfmt.c:lj_buf_reset:
   81|  12.4M|{
   82|  12.4M|  sb->w = sb->b;
   83|  12.4M|}
lj_strfmt.c:lj_buf_more:
  107|  5.49M|{
  108|  5.49M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  5.49M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 4.10k, False: 5.49M]
  |  |  ------------------
  ------------------
  109|  4.10k|    return lj_buf_more2(sb, sz);
  110|  5.49M|  return sb->w;
  111|  5.49M|}
lj_strfmt.c:lj_buf_wmem:
  176|      3|{
  177|      3|  return (char *)memcpy(p, q, len) + len;
  178|      3|}
lj_strfmt.c:lj_buf_putb:
  181|  1.60M|{
  182|  1.60M|  char *w = lj_buf_more(sb, 1);
  183|  1.60M|  *w++ = (char)c;
  184|  1.60M|  sb->w = w;
  185|  1.60M|}
lj_strfmt.c:lj_buf_str:
  201|  11.6M|{
  202|  11.6M|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|  11.6M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|  11.6M|}
lj_strfmt_num.c:lj_buf_more:
  107|  3.08M|{
  108|  3.08M|  if (LJ_UNLIKELY(sz > sbufleft(sb)))
  ------------------
  |  |  146|  3.08M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.57k, False: 3.08M]
  |  |  ------------------
  ------------------
  109|  1.57k|    return lj_buf_more2(sb, sz);
  110|  3.08M|  return sb->w;
  111|  3.08M|}
lj_bcread.c:lj_buf_reset:
   81|      2|{
   82|      2|  sb->w = sb->b;
   83|      2|}
lj_bcread.c:lj_buf_need:
  100|      3|{
  101|      3|  if (LJ_UNLIKELY(sz > sbufsz(sb)))
  ------------------
  |  |  146|      3|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2, False: 1]
  |  |  ------------------
  ------------------
  102|      2|    return lj_buf_need2(sb, sz);
  103|      1|  return sb->b;
  104|      3|}
lib_string.c:lj_buf_tmp_:
   86|   958k|{
   87|   958k|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|   958k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   958k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|   958k|  setsbufL(sb, L);
  ------------------
  |  |   49|   958k|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|   958k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|   958k|  lj_buf_reset(sb);
   90|   958k|  return sb;
   91|   958k|}
lib_string.c:lj_buf_reset:
   81|   958k|{
   82|   958k|  sb->w = sb->b;
   83|   958k|}
lib_string.c:lj_buf_str:
  201|   958k|{
  202|   958k|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|   958k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|   958k|}
lib_table.c:lj_buf_tmp_:
   86|     31|{
   87|     31|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|     31|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     31|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|     31|  setsbufL(sb, L);
  ------------------
  |  |   49|     31|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|     31|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|     31|  lj_buf_reset(sb);
   90|     31|  return sb;
   91|     31|}
lib_table.c:lj_buf_reset:
   81|     31|{
   82|     31|  sb->w = sb->b;
   83|     31|}
lib_table.c:lj_buf_str:
  201|     30|{
  202|     30|  return lj_str_new(L, sb->b, sbuflen(sb));
  ------------------
  |  |   36|     30|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  203|     30|}
lj_opt_fold.c:lj_buf_tmp_:
   86|     64|{
   87|     64|  SBuf *sb = &G(L)->tmpbuf;
  ------------------
  |  |  705|     64|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|     64|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   88|     64|  setsbufL(sb, L);
  ------------------
  |  |   49|     64|#define setsbufL(sb, l)		(setmref((sb)->L, (l)))
  |  |  ------------------
  |  |  |  |   39|     64|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   89|     64|  lj_buf_reset(sb);
   90|     64|  return sb;
   91|     64|}
lj_opt_fold.c:lj_buf_reset:
   81|     64|{
   82|     64|  sb->w = sb->b;
   83|     64|}

lj_carith_op:
  276|  47.2k|{
  277|  47.2k|  CTState *cts = ctype_cts(L);
  278|  47.2k|  CDArith ca;
  279|  47.2k|  if (carith_checkarg(L, cts, &ca) && mm != MM_len && mm != MM_concat) {
  ------------------
  |  Branch (279:7): [True: 46.8k, False: 468]
  |  Branch (279:39): [True: 46.7k, False: 28]
  |  Branch (279:55): [True: 46.6k, False: 95]
  ------------------
  280|  46.6k|    if (carith_int64(L, cts, &ca, mm) || carith_ptr(L, cts, &ca, mm)) {
  ------------------
  |  Branch (280:9): [True: 45.4k, False: 1.20k]
  |  Branch (280:42): [True: 0, False: 1.20k]
  ------------------
  281|  45.4k|      copyTV(L, &G(L)->tmptv2, L->top-1);  /* Remember for trace recorder. */
  ------------------
  |  |  705|  45.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  45.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  282|  45.4k|      return 1;
  283|  45.4k|    }
  284|  46.6k|  }
  285|  1.79k|  return lj_carith_meta(L, cts, &ca, mm);
  286|  47.2k|}
lj_carith_divu64:
  373|  6.91k|{
  374|  6.91k|  if (b == 0) return U64x(80000000,00000000);
  ------------------
  |  |   94|  4.23k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (374:7): [True: 4.23k, False: 2.68k]
  ------------------
  375|  2.68k|  return a / b;
  376|  6.91k|}
lj_carith_divi64:
  380|  11.8k|{
  381|  11.8k|  if (b == 0 || (a == (int64_t)U64x(80000000,00000000) && b == -1))
  ------------------
  |  |   94|  16.3k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (381:7): [True: 3.61k, False: 8.19k]
  |  Branch (381:18): [True: 3.56k, False: 4.62k]
  |  Branch (381:59): [True: 11, False: 3.55k]
  ------------------
  382|  3.63k|    return U64x(80000000,00000000);
  ------------------
  |  |   94|  3.63k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  383|  8.17k|  return a / b;
  384|  11.8k|}
lj_carith_modu64:
  388|    583|{
  389|    583|  if (b == 0) return U64x(80000000,00000000);
  ------------------
  |  |   94|     76|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (389:7): [True: 76, False: 507]
  ------------------
  390|    507|  return a % b;
  391|    583|}
lj_carith_modi64:
  395|  2.32k|{
  396|  2.32k|  if (b == 0) return U64x(80000000,00000000);
  ------------------
  |  |   94|    379|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (396:7): [True: 379, False: 1.94k]
  ------------------
  397|  1.94k|  if (a == (int64_t)U64x(80000000,00000000) && b == -1) return 0;
  ------------------
  |  |   94|  3.88k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (397:7): [True: 356, False: 1.58k]
  |  Branch (397:48): [True: 1, False: 355]
  ------------------
  398|  1.94k|  return a % b;
  399|  1.94k|}
lj_carith_powu64:
  403|  7.16k|{
  404|  7.16k|  uint64_t y;
  405|  7.16k|  if (k == 0)
  ------------------
  |  Branch (405:7): [True: 566, False: 6.59k]
  ------------------
  406|    566|    return 1;
  407|  25.1k|  for (; (k & 1) == 0; k >>= 1) x *= x;
  ------------------
  |  Branch (407:10): [True: 18.5k, False: 6.59k]
  ------------------
  408|  6.59k|  y = x;
  409|  6.59k|  if ((k >>= 1) != 0) {
  ------------------
  |  Branch (409:7): [True: 5.18k, False: 1.41k]
  ------------------
  410|   171k|    for (;;) {
  411|   171k|      x *= x;
  412|   171k|      if (k == 1) break;
  ------------------
  |  Branch (412:11): [True: 5.18k, False: 166k]
  ------------------
  413|   166k|      if (k & 1) y *= x;
  ------------------
  |  Branch (413:11): [True: 102k, False: 64.3k]
  ------------------
  414|   166k|      k >>= 1;
  415|   166k|    }
  416|  5.18k|    y *= x;
  417|  5.18k|  }
  418|  6.59k|  return y;
  419|  7.16k|}
lj_carith_powi64:
  423|  9.29k|{
  424|  9.29k|  if (k == 0)
  ------------------
  |  Branch (424:7): [True: 1.16k, False: 8.13k]
  ------------------
  425|  1.16k|    return 1;
  426|  8.13k|  if (k < 0) {
  ------------------
  |  Branch (426:7): [True: 4.21k, False: 3.91k]
  ------------------
  427|  4.21k|    if (x == 0)
  ------------------
  |  Branch (427:9): [True: 85, False: 4.13k]
  ------------------
  428|     85|      return U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|     85|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  429|  4.13k|    else if (x == 1)
  ------------------
  |  Branch (429:14): [True: 361, False: 3.77k]
  ------------------
  430|    361|      return 1;
  431|  3.77k|    else if (x == -1)
  ------------------
  |  Branch (431:14): [True: 0, False: 3.77k]
  ------------------
  432|      0|      return (k & 1) ? -1 : 1;
  ------------------
  |  Branch (432:14): [True: 0, False: 0]
  ------------------
  433|  3.77k|    else
  434|  3.77k|      return 0;
  435|  4.21k|  }
  436|  3.91k|  return (int64_t)lj_carith_powu64((uint64_t)x, (uint64_t)k);
  437|  8.13k|}
lj_carith.c:carith_checkarg:
   31|  47.2k|{
   32|  47.2k|  TValue *o = L->base;
   33|  47.2k|  int ok = 1;
   34|  47.2k|  MSize i;
   35|  47.2k|  if (o+1 >= L->top)
  ------------------
  |  Branch (35:7): [True: 0, False: 47.2k]
  ------------------
   36|      0|    lj_err_argt(L, 1, LUA_TCDATA);
  ------------------
  |  |  222|      0|#define LUA_TCDATA	(LAST_TT+2)
  |  |  ------------------
  |  |  |  |  220|      0|#define LAST_TT		LUA_TTHREAD
  |  |  |  |  ------------------
  |  |  |  |  |  |   83|      0|#define LUA_TTHREAD		8
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   37|   141k|  for (i = 0; i < 2; i++, o++) {
  ------------------
  |  Branch (37:15): [True: 94.5k, False: 47.2k]
  ------------------
   38|  94.5k|    if (tviscdata(o)) {
  ------------------
  |  |  799|  94.5k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  94.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  94.5k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 66.0k, False: 28.5k]
  |  |  ------------------
  ------------------
   39|  66.0k|      GCcdata *cd = cdataV(o);
  ------------------
  |  |  863|  66.0k|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|  66.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  66.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  66.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 66.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  66.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   40|      0|      CTypeID id = (CTypeID)cd->ctypeid;
   41|  66.0k|      CType *ct = ctype_raw(cts, id);
   42|  66.0k|      uint8_t *p = (uint8_t *)cdataptr(cd);
  ------------------
  |  |  360|  66.0k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
   43|  66.0k|      if (ctype_isptr(ct->info)) {
  ------------------
  |  |  203|  66.0k|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|  66.0k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  66.0k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 66.0k]
  |  |  ------------------
  ------------------
   44|      0|	p = (uint8_t *)cdata_getptr(p, ct->size);
   45|      0|	if (ctype_isref(ct->info)) ct = ctype_rawchild(cts, ct);
  ------------------
  |  |  229|      0|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|      0|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   46|  66.0k|      } else if (ctype_isfunc(ct->info)) {
  ------------------
  |  |  206|  66.0k|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|  66.0k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  66.0k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 66.0k]
  |  |  ------------------
  ------------------
   47|      0|	CTypeID id0 = i ? ctype_typeid(cts, ca->ct[0]) : 0;
  ------------------
  |  |  425|      0|#define ctype_typeid(cts, ct)	((CTypeID)((ct) - (cts)->tab))
  ------------------
  |  Branch (47:16): [True: 0, False: 0]
  ------------------
   48|      0|	p = (uint8_t *)*(void **)p;
   49|      0|	ct = ctype_get(cts,
   50|      0|	  lj_ctype_intern(cts, CTINFO(CT_PTR, CTALIGN_PTR|id), CTSIZE_PTR));
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
              	  lj_ctype_intern(cts, CTINFO(CT_PTR, CTALIGN_PTR|id), CTSIZE_PTR));
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
   51|      0|	if (i) {  /* cts->tab may have been reallocated. */
  ------------------
  |  Branch (51:6): [True: 0, False: 0]
  ------------------
   52|      0|	  ca->ct[0] = ctype_get(cts, id0);
   53|      0|	}
   54|      0|      }
   55|  66.0k|      if (ctype_isenum(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  207|  66.0k|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|  66.0k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  66.0k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 66.0k]
  |  |  ------------------
  ------------------
   56|  66.0k|      ca->ct[i] = ct;
   57|  66.0k|      ca->p[i] = p;
   58|  66.0k|    } else if (tvisint(o)) {
  ------------------
  |  |  803|  28.5k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  57.1k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   59|      0|      ca->ct[i] = ctype_get(cts, CTID_INT32);
   60|      0|      ca->p[i] = (uint8_t *)&o->i;
   61|  28.5k|    } else if (tvisnum(o)) {
  ------------------
  |  |  804|  28.5k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  28.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  28.5k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  28.5k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 26.9k, False: 1.64k]
  |  |  ------------------
  ------------------
   62|  26.9k|      ca->ct[i] = ctype_get(cts, CTID_DOUBLE);
   63|  26.9k|      ca->p[i] = (uint8_t *)&o->n;
   64|  26.9k|    } else if (tvisnil(o)) {
  ------------------
  |  |  782|  1.64k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 1.17k, False: 468]
  |  |  ------------------
  ------------------
   65|  1.17k|      ca->ct[i] = ctype_get(cts, CTID_P_VOID);
   66|  1.17k|      ca->p[i] = (uint8_t *)0;
   67|  1.17k|    } else if (tvisstr(o)) {
  ------------------
  |  |  795|    468|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    468|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    468|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 131, False: 337]
  |  |  ------------------
  ------------------
   68|    131|      TValue *o2 = i == 0 ? o+1 : o-1;
  ------------------
  |  Branch (68:20): [True: 45, False: 86]
  ------------------
   69|    131|      CType *ct = ctype_raw(cts, cdataV(o2)->ctypeid);
  ------------------
  |  |  863|    131|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|    131|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    131|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    131|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 131, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    131|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   70|      0|      ca->ct[i] = NULL;
   71|    131|      ca->p[i] = (uint8_t *)strVdata(o);
  ------------------
  |  |  318|    131|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|    262|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 131, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   72|      0|      ok = 0;
   73|    131|      if (ctype_isenum(ct->info)) {
  ------------------
  |  |  207|    131|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|    131|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    131|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 131]
  |  |  ------------------
  ------------------
   74|      0|	CTSize ofs;
   75|      0|	CType *cct = lj_ctype_getfield(cts, ct, strV(o), &ofs);
  ------------------
  |  |  467|      0|  lj_ctype_getfieldq((cts), (ct), (name), (ofs), NULL)
  |  |  ------------------
  |  |  |  Branch (467:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	if (cct && ctype_isconstval(cct->info)) {
  ------------------
  |  |  212|      0|#define ctype_isconstval(info)	(ctype_type((info)) == CT_CONSTVAL)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (212:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (76:6): [True: 0, False: 0]
  ------------------
   77|      0|	  ca->ct[i] = ctype_child(cts, cct);
   78|      0|	  ca->p[i] = (uint8_t *)&cct->size;  /* Assumes ct does not grow. */
   79|      0|	  ok = 1;
   80|      0|	} else {
   81|      0|	  ca->ct[1-i] = ct;  /* Use enum to improve error message. */
   82|      0|	  ca->p[1-i] = NULL;
   83|      0|	  break;
   84|      0|	}
   85|      0|      }
   86|    337|    } else {
   87|    337|      ca->ct[i] = NULL;
   88|    337|      ca->p[i] = (void *)(intptr_t)1;  /* To make it unequal. */
   89|    337|      ok = 0;
   90|    337|    }
   91|  94.5k|  }
   92|  47.2k|  return ok;
   93|  47.2k|}
lj_carith.c:carith_int64:
  168|  46.6k|{
  169|  46.6k|  if (ctype_isnum(ca->ct[0]->info) && ca->ct[0]->size <= 8 &&
  ------------------
  |  |  201|  93.3k|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|  46.6k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  46.6k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 45.6k, False: 1.00k]
  |  |  ------------------
  ------------------
  |  Branch (169:39): [True: 45.6k, False: 0]
  ------------------
  170|  46.6k|      ctype_isnum(ca->ct[1]->info) && ca->ct[1]->size <= 8) {
  ------------------
  |  |  201|  92.3k|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|  45.6k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  45.6k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 45.4k, False: 194]
  |  |  ------------------
  ------------------
  |  Branch (170:39): [True: 45.4k, False: 0]
  ------------------
  171|  45.4k|    CTypeID id = (((ca->ct[0]->info & CTF_UNSIGNED) && ca->ct[0]->size == 8) ||
  ------------------
  |  |   68|  45.4k|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (171:20): [True: 13.4k, False: 32.0k]
  |  Branch (171:56): [True: 13.4k, False: 0]
  ------------------
  172|  45.4k|		  ((ca->ct[1]->info & CTF_UNSIGNED) && ca->ct[1]->size == 8)) ?
  ------------------
  |  |   68|  32.0k|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (172:6): [True: 3.41k, False: 28.5k]
  |  Branch (172:42): [True: 3.41k, False: 0]
  ------------------
  173|  28.5k|		 CTID_UINT64 : CTID_INT64;
  174|  45.4k|    CType *ct = ctype_get(cts, id);
  175|  45.4k|    GCcdata *cd;
  176|  45.4k|    uint64_t u0, u1, *up;
  177|  45.4k|    lj_cconv_ct_ct(cts, ct, ca->ct[0], (uint8_t *)&u0, ca->p[0], 0);
  178|  45.4k|    if (mm != MM_unm)
  ------------------
  |  Branch (178:9): [True: 43.3k, False: 2.11k]
  ------------------
  179|  43.3k|      lj_cconv_ct_ct(cts, ct, ca->ct[1], (uint8_t *)&u1, ca->p[1], 0);
  180|  45.4k|    switch (mm) {
  181|    513|    case MM_eq:
  ------------------
  |  Branch (181:5): [True: 513, False: 44.9k]
  ------------------
  182|    513|      setboolV(L->top-1, (u0 == u1));
  ------------------
  |  |  874|    513|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  183|    513|      return 1;
  184|  1.51k|    case MM_lt:
  ------------------
  |  Branch (184:5): [True: 1.51k, False: 43.9k]
  ------------------
  185|  1.51k|      setboolV(L->top-1,
  ------------------
  |  |  874|  3.02k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:61): [True: 762, False: 748]
  |  |  ------------------
  ------------------
  186|  1.51k|	       id == CTID_INT64 ? ((int64_t)u0 < (int64_t)u1) : (u0 < u1));
  187|  1.51k|      return 1;
  188|    631|    case MM_le:
  ------------------
  |  Branch (188:5): [True: 631, False: 44.8k]
  ------------------
  189|    631|      setboolV(L->top-1,
  ------------------
  |  |  874|  1.26k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:61): [True: 449, False: 182]
  |  |  ------------------
  ------------------
  190|    631|	       id == CTID_INT64 ? ((int64_t)u0 <= (int64_t)u1) : (u0 <= u1));
  191|    631|      return 1;
  192|  42.8k|    default: break;
  ------------------
  |  Branch (192:5): [True: 42.8k, False: 2.65k]
  ------------------
  193|  45.4k|    }
  194|  42.8k|    cd = lj_cdata_new(cts, id, 8);
  195|  42.8k|    up = (uint64_t *)cdataptr(cd);
  ------------------
  |  |  360|  42.8k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  196|  42.8k|    setcdataV(L, L->top-1, cd);
  197|  42.8k|    switch (mm) {
  198|  1.53k|    case MM_add: *up = u0 + u1; break;
  ------------------
  |  Branch (198:5): [True: 1.53k, False: 41.2k]
  ------------------
  199|  3.74k|    case MM_sub: *up = u0 - u1; break;
  ------------------
  |  Branch (199:5): [True: 3.74k, False: 39.0k]
  ------------------
  200|  1.26k|    case MM_mul: *up = u0 * u1; break;
  ------------------
  |  Branch (200:5): [True: 1.26k, False: 41.5k]
  ------------------
  201|  18.7k|    case MM_div:
  ------------------
  |  Branch (201:5): [True: 18.7k, False: 24.1k]
  ------------------
  202|  18.7k|      if (id == CTID_INT64)
  ------------------
  |  Branch (202:11): [True: 11.8k, False: 6.91k]
  ------------------
  203|  11.8k|	*up = (uint64_t)lj_carith_divi64((int64_t)u0, (int64_t)u1);
  204|  6.91k|      else
  205|  6.91k|	*up = lj_carith_divu64(u0, u1);
  206|  18.7k|      break;
  207|  2.90k|    case MM_mod:
  ------------------
  |  Branch (207:5): [True: 2.90k, False: 39.9k]
  ------------------
  208|  2.90k|      if (id == CTID_INT64)
  ------------------
  |  Branch (208:11): [True: 2.32k, False: 583]
  ------------------
  209|  2.32k|	*up = (uint64_t)lj_carith_modi64((int64_t)u0, (int64_t)u1);
  210|    583|      else
  211|    583|	*up = lj_carith_modu64(u0, u1);
  212|  2.90k|      break;
  213|  12.5k|    case MM_pow:
  ------------------
  |  Branch (213:5): [True: 12.5k, False: 30.2k]
  ------------------
  214|  12.5k|      if (id == CTID_INT64)
  ------------------
  |  Branch (214:11): [True: 9.29k, False: 3.24k]
  ------------------
  215|  9.29k|	*up = (uint64_t)lj_carith_powi64((int64_t)u0, (int64_t)u1);
  216|  3.24k|      else
  217|  3.24k|	*up = lj_carith_powu64(u0, u1);
  218|  12.5k|      break;
  219|  2.11k|    case MM_unm: *up = ~u0+1u; break;
  ------------------
  |  Branch (219:5): [True: 2.11k, False: 40.7k]
  ------------------
  220|      0|    default:
  ------------------
  |  Branch (220:5): [True: 0, False: 42.8k]
  ------------------
  221|      0|      lj_assertL(0, "bad metamethod %d", mm);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  222|      0|      break;
  223|  42.8k|    }
  224|  42.8k|    lj_gc_check(L);
  ------------------
  |  |   66|  42.8k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  42.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 3.27k, False: 39.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  42.8k|      lj_gc_step(L); }
  ------------------
  225|  42.8k|    return 1;
  226|  42.8k|  }
  227|  1.20k|  return 0;
  228|  46.6k|}
lj_carith.c:carith_ptr:
   97|  1.20k|{
   98|  1.20k|  CType *ctp = ca->ct[0];
   99|  1.20k|  uint8_t *pp = ca->p[0];
  100|  1.20k|  ptrdiff_t idx;
  101|  1.20k|  CTSize sz;
  102|  1.20k|  CTypeID id;
  103|  1.20k|  GCcdata *cd;
  104|  1.20k|  if (ctype_isptr(ctp->info) || ctype_isrefarray(ctp->info)) {
  ------------------
  |  |  203|  2.40k|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|  1.20k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.20k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 997, False: 206]
  |  |  ------------------
  ------------------
                if (ctype_isptr(ctp->info) || ctype_isrefarray(ctp->info)) {
  ------------------
  |  |  232|    206|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|    206|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|    206|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|    206|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|    206|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    206|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 206]
  |  |  ------------------
  ------------------
  105|    997|    if ((mm == MM_sub || mm == MM_eq || mm == MM_lt || mm == MM_le) &&
  ------------------
  |  Branch (105:10): [True: 13, False: 984]
  |  Branch (105:26): [True: 820, False: 164]
  |  Branch (105:41): [True: 146, False: 18]
  |  Branch (105:56): [True: 2, False: 16]
  ------------------
  106|    997|	(ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  203|  1.96k|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|    981|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    981|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 981]
  |  |  ------------------
  ------------------
              	(ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  232|    981|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|    981|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|    981|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|    981|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|    981|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    981|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 981]
  |  |  ------------------
  ------------------
  107|      0|      uint8_t *pp2 = ca->p[1];
  108|      0|      if (mm == MM_eq) {  /* Pointer equality. Incompatible pointers are ok. */
  ------------------
  |  Branch (108:11): [True: 0, False: 0]
  ------------------
  109|      0|	setboolV(L->top-1, (pp == pp2));
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  110|      0|	return 1;
  111|      0|      }
  112|      0|      if (!lj_cconv_compatptr(cts, ctp, ca->ct[1], CCF_IGNQUAL))
  ------------------
  |  |   50|      0|#define CCF_IGNQUAL	0x00000008u
  ------------------
  |  Branch (112:11): [True: 0, False: 0]
  ------------------
  113|      0|	return 0;
  114|      0|      if (mm == MM_sub) {  /* Pointer difference. */
  ------------------
  |  Branch (114:11): [True: 0, False: 0]
  ------------------
  115|      0|	intptr_t diff;
  116|      0|	sz = lj_ctype_size(cts, ctype_cid(ctp->info));  /* Element size. */
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  117|      0|	if (sz == 0 || sz == CTSIZE_INVALID)
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (117:6): [True: 0, False: 0]
  |  Branch (117:17): [True: 0, False: 0]
  ------------------
  118|      0|	  return 0;
  119|      0|	diff = ((intptr_t)pp - (intptr_t)pp2) / (int32_t)sz;
  120|       |	/* All valid pointer differences on x64 are in (-2^47, +2^47),
  121|       |	** which fits into a double without loss of precision.
  122|       |	*/
  123|      0|	setintptrV(L->top-1, (int32_t)diff);
  ------------------
  |  |  968|      0|#define setintptrV(o, i)	setint64V((o), (i))
  ------------------
  124|      0|	return 1;
  125|      0|      } else if (mm == MM_lt) {  /* Pointer comparison (unsigned). */
  ------------------
  |  Branch (125:18): [True: 0, False: 0]
  ------------------
  126|      0|	setboolV(L->top-1, ((uintptr_t)pp < (uintptr_t)pp2));
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  127|      0|	return 1;
  128|      0|      } else {
  129|      0|	lj_assertL(mm == MM_le, "bad metamethod %d", mm);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  130|      0|	setboolV(L->top-1, ((uintptr_t)pp <= (uintptr_t)pp2));
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  131|      0|	return 1;
  132|      0|      }
  133|      0|    }
  134|    997|    if (!((mm == MM_add || mm == MM_sub) && ctype_isnum(ca->ct[1]->info)))
  ------------------
  |  |  201|     17|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|     17|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     17|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 16, False: 1]
  |  |  ------------------
  ------------------
  |  Branch (134:12): [True: 4, False: 993]
  |  Branch (134:28): [True: 13, False: 980]
  ------------------
  135|    981|      return 0;
  136|     16|    lj_cconv_ct_ct(cts, ctype_get(cts, CTID_INT_PSZ), ca->ct[1],
  ------------------
  |  |  319|     16|#define CTID_INT_PSZ	CTID_INT64
  ------------------
  137|     16|		   (uint8_t *)&idx, ca->p[1], 0);
  138|     16|    if (mm == MM_sub) idx = -idx;
  ------------------
  |  Branch (138:9): [True: 13, False: 3]
  ------------------
  139|    206|  } else if (mm == MM_add && ctype_isnum(ctp->info) &&
  ------------------
  |  |  201|    213|#define ctype_isnum(info)	(ctype_type((info)) == CT_NUM)
  |  |  ------------------
  |  |  |  |  189|      7|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      7|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 3, False: 4]
  |  |  ------------------
  ------------------
  |  Branch (139:14): [True: 7, False: 199]
  ------------------
  140|    206|      (ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  203|      6|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      3|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      3|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 1, False: 2]
  |  |  ------------------
  ------------------
                    (ctype_isptr(ca->ct[1]->info) || ctype_isrefarray(ca->ct[1]->info))) {
  ------------------
  |  |  232|      2|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|      2|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|      2|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|      2|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|      2|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      2|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 2]
  |  |  ------------------
  ------------------
  141|       |    /* Swap pointer and index. */
  142|      1|    ctp = ca->ct[1]; pp = ca->p[1];
  143|      1|    lj_cconv_ct_ct(cts, ctype_get(cts, CTID_INT_PSZ), ca->ct[0],
  ------------------
  |  |  319|      1|#define CTID_INT_PSZ	CTID_INT64
  ------------------
  144|      1|		   (uint8_t *)&idx, ca->p[0], 0);
  145|    205|  } else {
  146|    205|    return 0;
  147|    205|  }
  148|     17|  sz = lj_ctype_size(cts, ctype_cid(ctp->info));  /* Element size. */
  ------------------
  |  |  190|     17|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|     17|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  149|     17|  if (sz == CTSIZE_INVALID)
  ------------------
  |  |  135|     17|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (149:7): [True: 17, False: 0]
  ------------------
  150|     17|    return 0;
  151|      0|  pp += idx*(int32_t)sz;  /* Compute pointer + index. */
  152|      0|  id = lj_ctype_intern(cts, CTINFO(CT_PTR, CTALIGN_PTR|ctype_cid(ctp->info)),
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  153|      0|		       CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  154|      0|  cd = lj_cdata_new(cts, id, CTSIZE_PTR);
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  155|      0|  *(uint8_t **)cdataptr(cd) = pp;
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  156|      0|  setcdataV(L, L->top-1, cd);
  157|      0|  lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
  158|      0|  return 1;
  159|     17|}
lj_carith.c:lj_carith_meta:
  232|  1.79k|{
  233|  1.79k|  cTValue *tv = NULL;
  234|  1.79k|  if (tviscdata(L->base)) {
  ------------------
  |  |  799|  1.79k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  1.79k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  1.79k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 409, False: 1.38k]
  |  |  ------------------
  ------------------
  235|    409|    CTypeID id = cdataV(L->base)->ctypeid;
  ------------------
  |  |  863|    409|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|    409|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    409|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    409|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 409, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    409|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  236|      0|    CType *ct = ctype_raw(cts, id);
  237|    409|    if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  203|    409|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|    409|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    409|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 409]
  |  |  ------------------
  ------------------
                  if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  238|    409|    tv = lj_ctype_meta(cts, id, mm);
  239|    409|  }
  240|  1.79k|  if (!tv && L->base+1 < L->top && tviscdata(L->base+1)) {
  ------------------
  |  |  799|  1.79k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  1.79k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  1.79k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 1.41k, False: 382]
  |  |  ------------------
  ------------------
  |  Branch (240:7): [True: 1.79k, False: 0]
  |  Branch (240:14): [True: 1.79k, False: 0]
  ------------------
  241|  1.41k|    CTypeID id = cdataV(L->base+1)->ctypeid;
  ------------------
  |  |  863|  1.41k|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|  1.41k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.41k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.41k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.41k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.41k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|      0|    CType *ct = ctype_raw(cts, id);
  243|  1.41k|    if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  203|  1.41k|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|  1.41k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.41k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 1.41k]
  |  |  ------------------
  ------------------
                  if (ctype_isptr(ct->info)) id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  244|  1.41k|    tv = lj_ctype_meta(cts, id, mm);
  245|  1.41k|  }
  246|  1.79k|  if (!tv) {
  ------------------
  |  Branch (246:7): [True: 1.79k, False: 0]
  ------------------
  247|  1.79k|    const char *repr[2];
  248|  1.79k|    int i, isenum = -1, isstr = -1;
  249|  1.79k|    if (mm == MM_eq) {  /* Equality checks never raise an error. */
  ------------------
  |  Branch (249:9): [True: 1.18k, False: 611]
  ------------------
  250|  1.18k|      int eq = ca->p[0] == ca->p[1];
  251|  1.18k|      setboolV(L->top-1, eq);
  ------------------
  |  |  874|  1.18k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  252|  1.18k|      setboolV(&G(L)->tmptv2, eq);  /* Remember for trace recorder. */
  ------------------
  |  |  874|  1.18k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  253|  1.18k|      return 1;
  254|  1.18k|    }
  255|  1.83k|    for (i = 0; i < 2; i++) {
  ------------------
  |  Branch (255:17): [True: 1.22k, False: 611]
  ------------------
  256|  1.22k|      if (ca->ct[i] && tviscdata(L->base+i)) {
  ------------------
  |  |  799|  1.06k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  1.06k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  1.06k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 638, False: 426]
  |  |  ------------------
  ------------------
  |  Branch (256:11): [True: 1.06k, False: 158]
  ------------------
  257|    638|	if (ctype_isenum(ca->ct[i]->info)) isenum = i;
  ------------------
  |  |  207|    638|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|    638|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    638|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 638]
  |  |  ------------------
  ------------------
  258|    638|	repr[i] = strdata(lj_ctype_repr(L, ctype_typeid(cts, ca->ct[i]), NULL));
  ------------------
  |  |  316|    638|#define strdata(s)	((const char *)((s)+1))
  ------------------
  259|    638|      } else {
  260|    584|	if (tvisstr(&L->base[i])) isstr = i;
  ------------------
  |  |  795|    584|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    584|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    584|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 60, False: 524]
  |  |  ------------------
  ------------------
  261|    584|	repr[i] = lj_typename(&L->base[i]);
  ------------------
  |  | 1042|    584|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|    584|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|    584|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    584|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|    584|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|    584|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 127, False: 457]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    127|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    457|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  262|    584|      }
  263|  1.22k|    }
  264|    611|    if ((isenum ^ isstr) == 1)
  ------------------
  |  Branch (264:9): [True: 0, False: 611]
  ------------------
  265|      0|      lj_err_callerv(L, LJ_ERR_FFI_BADCONV, repr[isstr], repr[isenum]);
  266|    611|    lj_err_callerv(L, mm == MM_len ? LJ_ERR_FFI_BADLEN :
  ------------------
  |  Branch (266:23): [True: 28, False: 583]
  ------------------
  267|    611|		      mm == MM_concat ? LJ_ERR_FFI_BADCONCAT :
  ------------------
  |  Branch (267:9): [True: 107, False: 476]
  ------------------
  268|    583|		      mm < MM_add ? LJ_ERR_FFI_BADCOMP : LJ_ERR_FFI_BADARITH,
  ------------------
  |  Branch (268:9): [True: 346, False: 130]
  ------------------
  269|    611|		   repr[0], repr[1]);
  270|    611|  }
  271|      0|  return lj_meta_tailcall(L, tv);
  272|  1.79k|}

lj_ccall_func:
 1172|     61|{
 1173|     61|  CTState *cts = ctype_cts(L);
 1174|     61|  CType *ct = ctype_raw(cts, cd->ctypeid);
 1175|     61|  CTSize sz = CTSIZE_PTR;
  ------------------
  |  |  250|     61|#define CTSIZE_PTR	8
  ------------------
 1176|     61|  if (ctype_isptr(ct->info)) {
  ------------------
  |  |  203|     61|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|     61|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     61|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 61]
  |  |  ------------------
  ------------------
 1177|      0|    sz = ct->size;
 1178|      0|    ct = ctype_rawchild(cts, ct);
 1179|      0|  }
 1180|     61|  if (ctype_isfunc(ct->info)) {
  ------------------
  |  |  206|     61|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|     61|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     61|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 61]
  |  |  ------------------
  ------------------
 1181|      0|    CCallState cc;
 1182|      0|    int gcsteps, ret;
 1183|      0|    cc.func = (void (*)(void))cdata_getptr(cdataptr(cd), sz);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
 1184|      0|    gcsteps = ccall_set_args(L, cts, ct, &cc);
 1185|      0|    ct = (CType *)((intptr_t)ct-(intptr_t)cts->tab);
 1186|      0|    cts->cb.slot = ~0u;
 1187|      0|    lj_vm_ffi_call(&cc);
 1188|      0|    if (cts->cb.slot != ~0u) {  /* Blacklist function that called a callback. */
  ------------------
  |  Branch (1188:9): [True: 0, False: 0]
  ------------------
 1189|      0|      TValue tv;
 1190|      0|      tv.u64 = ((uintptr_t)(void *)cc.func >> 2) | U64x(800000000, 00000000);
  ------------------
  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
 1191|      0|      setboolV(lj_tab_set(L, cts->miscmap, &tv), 1);
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
 1192|      0|    }
 1193|      0|    ct = (CType *)((intptr_t)ct+(intptr_t)cts->tab);  /* May be reallocated. */
 1194|      0|    gcsteps += ccall_get_results(L, cts, ct, &cc, &ret);
 1195|       |#if LJ_TARGET_X86 && LJ_ABI_WIN
 1196|       |    /* Automatically detect __stdcall and fix up C function declaration. */
 1197|       |    if (cc.spadj && ctype_cconv(ct->info) == CTCC_CDECL) {
 1198|       |      CTF_INSERT(ct->info, CCONV, CTCC_STDCALL);
 1199|       |      lj_trace_abort(G(L));
 1200|       |    }
 1201|       |#endif
 1202|      0|    while (gcsteps-- > 0)
  ------------------
  |  Branch (1202:12): [True: 0, False: 0]
  ------------------
 1203|      0|      lj_gc_check(L);
  ------------------
  |  |   66|      0|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|      0|      lj_gc_step(L); }
  ------------------
 1204|      0|    return ret;
 1205|      0|  }
 1206|     61|  return -1;  /* Not a function. */
 1207|     61|}

lj_ccallback_mcode_free:
  305|  3.31k|{
  306|  3.31k|  size_t sz = (size_t)CALLBACK_MCODE_SIZE;
  ------------------
  |  |   26|  3.31k|#define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |  648|  3.31k|#define LJ_PAGESIZE		4096
  |  |  ------------------
  |  |               #define CALLBACK_MCODE_SIZE	(LJ_PAGESIZE * LJ_NUM_CBPAGE)
  |  |  ------------------
  |  |  |  |   74|  3.31k|#define LJ_NUM_CBPAGE	1		/* Number of FFI callback pages. */
  |  |  ------------------
  ------------------
  307|  3.31k|  void *p = cts->cb.mcode;
  308|  3.31k|  if (p == NULL) return;
  ------------------
  |  Branch (308:7): [True: 3.31k, False: 0]
  ------------------
  309|       |#if LJ_TARGET_WINDOWS
  310|       |  VirtualFree(p, 0, MEM_RELEASE);
  311|       |  UNUSED(sz);
  312|       |#elif LJ_TARGET_POSIX
  313|      0|  munmap(p, sz);
  314|       |#else
  315|       |  lj_mem_free(cts->g, p, sz);
  316|       |#endif
  317|      0|}

lj_cconv_ct_ct:
  121|  88.8k|{
  122|  88.8k|  CTSize dsize = d->size, ssize = s->size;
  123|  88.8k|  CTInfo dinfo = d->info, sinfo = s->info;
  124|  88.8k|  void *tmpptr;
  125|       |
  126|  88.8k|  lj_assertCTS(!ctype_isenum(dinfo) && !ctype_isenum(sinfo),
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  127|  88.8k|	       "unresolved enum");
  128|  88.8k|  lj_assertCTS(!ctype_isattrib(dinfo) && !ctype_isattrib(sinfo),
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  129|  88.8k|	       "unstripped attribute");
  130|       |
  131|  88.8k|  if (ctype_type(dinfo) > CT_MAYCONVERT || ctype_type(sinfo) > CT_MAYCONVERT)
  ------------------
  |  |  189|  88.8k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  88.8k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                if (ctype_type(dinfo) > CT_MAYCONVERT || ctype_type(sinfo) > CT_MAYCONVERT)
  ------------------
  |  |  189|  88.8k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|  88.8k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  |  Branch (131:7): [True: 0, False: 88.8k]
  |  Branch (131:44): [True: 0, False: 88.8k]
  ------------------
  132|      0|    goto err_conv;
  133|       |
  134|       |  /* Some basic sanity checks. */
  135|  88.8k|  lj_assertCTS(!ctype_isnum(dinfo) || dsize > 0, "bad size for number type");
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 88.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  136|  88.8k|  lj_assertCTS(!ctype_isnum(sinfo) || ssize > 0, "bad size for number type");
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 88.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  137|  88.8k|  lj_assertCTS(!ctype_isbool(dinfo) || dsize == 1 || dsize == 4,
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|  88.8k|	       "bad size for bool type");
  139|  88.8k|  lj_assertCTS(!ctype_isbool(sinfo) || ssize == 1 || ssize == 4,
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  140|  88.8k|	       "bad size for bool type");
  141|  88.8k|  lj_assertCTS(!ctype_isinteger(dinfo) || (1u<<lj_fls(dsize)) == dsize,
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 88.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 88.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|  88.8k|	       "bad size for integer type");
  143|  88.8k|  lj_assertCTS(!ctype_isinteger(sinfo) || (1u<<lj_fls(ssize)) == ssize,
  ------------------
  |  |  263|  88.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  88.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   150k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 26.7k, False: 62.0k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 62.0k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  88.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|  88.8k|	       "bad size for integer type");
  145|       |
  146|  88.8k|  switch (cconv_idx2(dinfo, sinfo)) {
  ------------------
  |  |   42|  88.8k|  ((cconv_idx((dinfo)) << 3) + cconv_idx((sinfo)))
  ------------------
  147|       |  /* Destination is a bool. */
  148|      0|  case CCX(B, B):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (148:3): [True: 0, False: 88.8k]
  ------------------
  149|       |    /* Source operand is already normalized. */
  150|      0|    if (dsize == 1) *dp = *sp; else *(int *)dp = *sp;
  ------------------
  |  Branch (150:9): [True: 0, False: 0]
  ------------------
  151|      0|    break;
  152|      0|  case CCX(B, I): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (152:3): [True: 0, False: 88.8k]
  ------------------
  153|      0|    MSize i;
  154|      0|    uint8_t b = 0;
  155|      0|    for (i = 0; i < ssize; i++) b |= sp[i];
  ------------------
  |  Branch (155:17): [True: 0, False: 0]
  ------------------
  156|      0|    b = (b != 0);
  157|      0|    if (dsize == 1) *dp = b; else *(int *)dp = b;
  ------------------
  |  Branch (157:9): [True: 0, False: 0]
  ------------------
  158|      0|    break;
  159|      0|    }
  160|      0|  case CCX(B, F): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (160:3): [True: 0, False: 88.8k]
  ------------------
  161|      0|    uint8_t b;
  162|      0|    if (ssize == sizeof(double)) b = (*(double *)sp != 0);
  ------------------
  |  Branch (162:9): [True: 0, False: 0]
  ------------------
  163|      0|    else if (ssize == sizeof(float)) b = (*(float *)sp != 0);
  ------------------
  |  Branch (163:14): [True: 0, False: 0]
  ------------------
  164|      0|    else goto err_conv;  /* NYI: long double. */
  165|      0|    if (dsize == 1) *dp = b; else *(int *)dp = b;
  ------------------
  |  Branch (165:9): [True: 0, False: 0]
  ------------------
  166|      0|    break;
  167|      0|    }
  168|       |
  169|       |  /* Destination is an integer. */
  170|      0|  case CCX(I, B):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (170:3): [True: 0, False: 88.8k]
  ------------------
  171|  62.0k|  case CCX(I, I):
  ------------------
  |  |   44|  62.0k|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (171:3): [True: 62.0k, False: 26.7k]
  ------------------
  172|  62.0k|  conv_I_I:
  173|  62.0k|    if (dsize > ssize) {  /* Zero-extend or sign-extend LSB. */
  ------------------
  |  Branch (173:9): [True: 0, False: 62.0k]
  ------------------
  174|      0|#if LJ_LE
  175|      0|      uint8_t fill = (!(sinfo & CTF_UNSIGNED) && (sp[ssize-1]&0x80)) ? 0xff : 0;
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (175:23): [True: 0, False: 0]
  |  Branch (175:50): [True: 0, False: 0]
  ------------------
  176|      0|      memcpy(dp, sp, ssize);
  177|      0|      memset(dp + ssize, fill, dsize-ssize);
  178|       |#else
  179|       |      uint8_t fill = (!(sinfo & CTF_UNSIGNED) && (sp[0]&0x80)) ? 0xff : 0;
  180|       |      memset(dp, fill, dsize-ssize);
  181|       |      memcpy(dp + (dsize-ssize), sp, ssize);
  182|       |#endif
  183|  62.0k|    } else {  /* Copy LSB. */
  184|  62.0k|#if LJ_LE
  185|  62.0k|      memcpy(dp, sp, dsize);
  186|       |#else
  187|       |      memcpy(dp, sp + (ssize-dsize), dsize);
  188|       |#endif
  189|  62.0k|    }
  190|  62.0k|    break;
  191|  26.7k|  case CCX(I, F): {
  ------------------
  |  |   44|  26.7k|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (191:3): [True: 26.7k, False: 62.0k]
  ------------------
  192|  26.7k|    double n;  /* Always convert via double. */
  193|  26.7k|  conv_I_F:
  194|       |    /* Convert source to double. */
  195|  26.7k|    if (ssize == sizeof(double)) n = *(double *)sp;
  ------------------
  |  Branch (195:9): [True: 26.7k, False: 0]
  ------------------
  196|      0|    else if (ssize == sizeof(float)) n = (double)*(float *)sp;
  ------------------
  |  Branch (196:14): [True: 0, False: 0]
  ------------------
  197|      0|    else goto err_conv;  /* NYI: long double. */
  198|       |    /* Then convert double to integer. */
  199|       |    /* The conversion must exactly match the semantics of JIT-compiled code! */
  200|  26.7k|    if (dsize < 4 || (dsize == 4 && !(dinfo & CTF_UNSIGNED))) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (200:9): [True: 0, False: 26.7k]
  |  Branch (200:23): [True: 0, False: 26.7k]
  |  Branch (200:37): [True: 0, False: 0]
  ------------------
  201|      0|      int32_t i = (int32_t)n;
  202|      0|      if (dsize == 4) *(int32_t *)dp = i;
  ------------------
  |  Branch (202:11): [True: 0, False: 0]
  ------------------
  203|      0|      else if (dsize == 2) *(int16_t *)dp = (int16_t)i;
  ------------------
  |  Branch (203:16): [True: 0, False: 0]
  ------------------
  204|      0|      else *(int8_t *)dp = (int8_t)i;
  205|  26.7k|    } else if (dsize == 4) {
  ------------------
  |  Branch (205:16): [True: 0, False: 26.7k]
  ------------------
  206|      0|      *(uint32_t *)dp = (uint32_t)n;
  207|  26.7k|    } else if (dsize == 8) {
  ------------------
  |  Branch (207:16): [True: 26.7k, False: 0]
  ------------------
  208|  26.7k|      if (!(dinfo & CTF_UNSIGNED))
  ------------------
  |  |   68|  26.7k|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (208:11): [True: 20.0k, False: 6.69k]
  ------------------
  209|  20.0k|	*(int64_t *)dp = (int64_t)n;
  210|  6.69k|      else
  211|  6.69k|	*(uint64_t *)dp = lj_num2u64(n);
  212|  26.7k|    } else {
  213|      0|      goto err_conv;  /* NYI: conversion to >64 bit integers. */
  214|      0|    }
  215|  26.7k|    break;
  216|  26.7k|    }
  217|  26.7k|  case CCX(I, C):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (217:3): [True: 0, False: 88.8k]
  ------------------
  218|      0|    s = ctype_child(cts, s);
  219|      0|    sinfo = s->info;
  220|      0|    ssize = s->size;
  221|      0|    goto conv_I_F;  /* Just convert re. */
  222|      0|  case CCX(I, P):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (222:3): [True: 0, False: 88.8k]
  ------------------
  223|      0|    if (!(flags & CCF_CAST)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
  |  Branch (223:9): [True: 0, False: 0]
  ------------------
  224|      0|    sinfo = CTINFO(CT_NUM, CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  225|      0|    goto conv_I_I;
  226|      0|  case CCX(I, A):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (226:3): [True: 0, False: 88.8k]
  ------------------
  227|      0|    if (!(flags & CCF_CAST)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
  |  Branch (227:9): [True: 0, False: 0]
  ------------------
  228|      0|    sinfo = CTINFO(CT_NUM, CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  229|      0|    ssize = CTSIZE_PTR;
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
  230|      0|    tmpptr = sp;
  231|      0|    sp = (uint8_t *)&tmpptr;
  232|      0|    goto conv_I_I;
  233|       |
  234|       |  /* Destination is a floating-point number. */
  235|      0|  case CCX(F, B):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (235:3): [True: 0, False: 88.8k]
  ------------------
  236|      0|  case CCX(F, I): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (236:3): [True: 0, False: 88.8k]
  ------------------
  237|      0|    double n;  /* Always convert via double. */
  238|      0|  conv_F_I:
  239|       |    /* First convert source to double. */
  240|       |    /* The conversion must exactly match the semantics of JIT-compiled code! */
  241|      0|    if (ssize < 4 || (ssize == 4 && !(sinfo & CTF_UNSIGNED))) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (241:9): [True: 0, False: 0]
  |  Branch (241:23): [True: 0, False: 0]
  |  Branch (241:37): [True: 0, False: 0]
  ------------------
  242|      0|      int32_t i;
  243|      0|      if (ssize == 4) {
  ------------------
  |  Branch (243:11): [True: 0, False: 0]
  ------------------
  244|      0|	i = *(int32_t *)sp;
  245|      0|      } else if (!(sinfo & CTF_UNSIGNED)) {
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (245:18): [True: 0, False: 0]
  ------------------
  246|      0|	if (ssize == 2) i = *(int16_t *)sp;
  ------------------
  |  Branch (246:6): [True: 0, False: 0]
  ------------------
  247|      0|	else i = *(int8_t *)sp;
  248|      0|      } else {
  249|      0|	if (ssize == 2) i = *(uint16_t *)sp;
  ------------------
  |  Branch (249:6): [True: 0, False: 0]
  ------------------
  250|      0|	else i = *(uint8_t *)sp;
  251|      0|      }
  252|      0|      n = (double)i;
  253|      0|    } else if (ssize == 4) {
  ------------------
  |  Branch (253:16): [True: 0, False: 0]
  ------------------
  254|      0|      n = (double)*(uint32_t *)sp;
  255|      0|    } else if (ssize == 8) {
  ------------------
  |  Branch (255:16): [True: 0, False: 0]
  ------------------
  256|      0|      if (!(sinfo & CTF_UNSIGNED)) n = (double)*(int64_t *)sp;
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (256:11): [True: 0, False: 0]
  ------------------
  257|      0|      else n = (double)*(uint64_t *)sp;
  258|      0|    } else {
  259|      0|      goto err_conv;  /* NYI: conversion from >64 bit integers. */
  260|      0|    }
  261|       |    /* Convert double to destination. */
  262|      0|    if (dsize == sizeof(double)) *(double *)dp = n;
  ------------------
  |  Branch (262:9): [True: 0, False: 0]
  ------------------
  263|      0|    else if (dsize == sizeof(float)) *(float *)dp = (float)n;
  ------------------
  |  Branch (263:14): [True: 0, False: 0]
  ------------------
  264|      0|    else goto err_conv;  /* NYI: long double. */
  265|      0|    break;
  266|      0|    }
  267|      0|  case CCX(F, F): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (267:3): [True: 0, False: 88.8k]
  ------------------
  268|      0|    double n;  /* Always convert via double. */
  269|      0|  conv_F_F:
  270|      0|    if (ssize == dsize) goto copyval;
  ------------------
  |  Branch (270:9): [True: 0, False: 0]
  ------------------
  271|       |    /* Convert source to double. */
  272|      0|    if (ssize == sizeof(double)) n = *(double *)sp;
  ------------------
  |  Branch (272:9): [True: 0, False: 0]
  ------------------
  273|      0|    else if (ssize == sizeof(float)) n = (double)*(float *)sp;
  ------------------
  |  Branch (273:14): [True: 0, False: 0]
  ------------------
  274|      0|    else goto err_conv;  /* NYI: long double. */
  275|       |    /* Convert double to destination. */
  276|      0|    if (dsize == sizeof(double)) *(double *)dp = n;
  ------------------
  |  Branch (276:9): [True: 0, False: 0]
  ------------------
  277|      0|    else if (dsize == sizeof(float)) *(float *)dp = (float)n;
  ------------------
  |  Branch (277:14): [True: 0, False: 0]
  ------------------
  278|      0|    else goto err_conv;  /* NYI: long double. */
  279|      0|    break;
  280|      0|    }
  281|      0|  case CCX(F, C):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (281:3): [True: 0, False: 88.8k]
  ------------------
  282|      0|    s = ctype_child(cts, s);
  283|      0|    sinfo = s->info;
  284|      0|    ssize = s->size;
  285|      0|    goto conv_F_F;  /* Ignore im, and convert from re. */
  286|       |
  287|       |  /* Destination is a complex number. */
  288|      0|  case CCX(C, I):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (288:3): [True: 0, False: 88.8k]
  ------------------
  289|      0|    d = ctype_child(cts, d);
  290|      0|    dinfo = d->info;
  291|      0|    dsize = d->size;
  292|      0|    memset(dp + dsize, 0, dsize);  /* Clear im. */
  293|      0|    goto conv_F_I;  /* Convert to re. */
  294|      0|  case CCX(C, F):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (294:3): [True: 0, False: 88.8k]
  ------------------
  295|      0|    d = ctype_child(cts, d);
  296|      0|    dinfo = d->info;
  297|      0|    dsize = d->size;
  298|      0|    memset(dp + dsize, 0, dsize);  /* Clear im. */
  299|      0|    goto conv_F_F;  /* Convert to re. */
  300|       |
  301|      0|  case CCX(C, C):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (301:3): [True: 0, False: 88.8k]
  ------------------
  302|      0|    if (dsize != ssize) {  /* Different types: convert re/im separately. */
  ------------------
  |  Branch (302:9): [True: 0, False: 0]
  ------------------
  303|      0|      CType *dc = ctype_child(cts, d);
  304|      0|      CType *sc = ctype_child(cts, s);
  305|      0|      lj_cconv_ct_ct(cts, dc, sc, dp, sp, flags);
  306|      0|      lj_cconv_ct_ct(cts, dc, sc, dp + dc->size, sp + sc->size, flags);
  307|      0|      return;
  308|      0|    }
  309|      0|    goto copyval;  /* Otherwise this is easy. */
  310|       |
  311|       |  /* Destination is a vector. */
  312|      0|  case CCX(V, I):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (312:3): [True: 0, False: 88.8k]
  ------------------
  313|      0|  case CCX(V, F):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (313:3): [True: 0, False: 88.8k]
  ------------------
  314|      0|  case CCX(V, C): {
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (314:3): [True: 0, False: 88.8k]
  ------------------
  315|      0|    CType *dc = ctype_child(cts, d);
  316|      0|    CTSize esize;
  317|       |    /* First convert the scalar to the first element. */
  318|      0|    lj_cconv_ct_ct(cts, dc, s, dp, sp, flags);
  319|       |    /* Then replicate it to the other elements (splat). */
  320|      0|    for (sp = dp, esize = dc->size; dsize > esize; dsize -= esize) {
  ------------------
  |  Branch (320:37): [True: 0, False: 0]
  ------------------
  321|      0|      dp += esize;
  322|      0|      memcpy(dp, sp, esize);
  323|      0|    }
  324|      0|    break;
  325|      0|    }
  326|       |
  327|      0|  case CCX(V, V):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (327:3): [True: 0, False: 88.8k]
  ------------------
  328|       |    /* Copy same-sized vectors, even for different lengths/element-types. */
  329|      0|    if (dsize != ssize) goto err_conv;
  ------------------
  |  Branch (329:9): [True: 0, False: 0]
  ------------------
  330|      0|    goto copyval;
  331|       |
  332|       |  /* Destination is a pointer. */
  333|      0|  case CCX(P, I):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (333:3): [True: 0, False: 88.8k]
  ------------------
  334|      0|    if (!(flags & CCF_CAST)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
  |  Branch (334:9): [True: 0, False: 0]
  ------------------
  335|      0|    dinfo = CTINFO(CT_NUM, CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  336|      0|    goto conv_I_I;
  337|       |
  338|      0|  case CCX(P, F):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (338:3): [True: 0, False: 88.8k]
  ------------------
  339|      0|    if (!(flags & CCF_CAST) || !(flags & CCF_FROMTV)) goto err_conv;
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
                  if (!(flags & CCF_CAST) || !(flags & CCF_FROMTV)) goto err_conv;
  ------------------
  |  |   48|      0|#define CCF_FROMTV	0x00000002u
  ------------------
  |  Branch (339:9): [True: 0, False: 0]
  |  Branch (339:32): [True: 0, False: 0]
  ------------------
  340|       |    /* The signed conversion is cheaper. x64 really has 47 bit pointers. */
  341|      0|    dinfo = CTINFO(CT_NUM, (LJ_64 && dsize == 8) ? 0 : CTF_UNSIGNED);
  ------------------
  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  ------------------
  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  ------------------
  |  |  |  Branch (185:61): [Folded - Ignored]
  |  |  |  Branch (185:61): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  342|      0|    goto conv_I_F;
  343|       |
  344|      0|  case CCX(P, P):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (344:3): [True: 0, False: 88.8k]
  ------------------
  345|      0|    if (!lj_cconv_compatptr(cts, d, s, flags)) goto err_conv;
  ------------------
  |  Branch (345:9): [True: 0, False: 0]
  ------------------
  346|      0|    cdata_setptr(dp, dsize, cdata_getptr(sp, ssize));
  347|      0|    break;
  348|       |
  349|      0|  case CCX(P, A):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (349:3): [True: 0, False: 88.8k]
  ------------------
  350|      0|  case CCX(P, S):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (350:3): [True: 0, False: 88.8k]
  ------------------
  351|      0|    if (!lj_cconv_compatptr(cts, d, s, flags)) goto err_conv;
  ------------------
  |  Branch (351:9): [True: 0, False: 0]
  ------------------
  352|      0|    cdata_setptr(dp, dsize, sp);
  353|      0|    break;
  354|       |
  355|       |  /* Destination is an array. */
  356|      0|  case CCX(A, A):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (356:3): [True: 0, False: 88.8k]
  ------------------
  357|      0|    if ((flags & CCF_CAST) || (d->info & CTF_VLA) || dsize != ssize ||
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
                  if ((flags & CCF_CAST) || (d->info & CTF_VLA) || dsize != ssize ||
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (357:9): [True: 0, False: 0]
  |  Branch (357:31): [True: 0, False: 0]
  |  Branch (357:54): [True: 0, False: 0]
  ------------------
  358|      0|	d->size == CTSIZE_INVALID || !lj_cconv_compatptr(cts, d, s, flags))
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (358:2): [True: 0, False: 0]
  |  Branch (358:31): [True: 0, False: 0]
  ------------------
  359|      0|      goto err_conv;
  360|      0|    goto copyval;
  361|       |
  362|       |  /* Destination is a struct/union. */
  363|      0|  case CCX(S, S):
  ------------------
  |  |   44|      0|#define CCX(dst, src)		((CCX_##dst << 3) + CCX_##src)
  ------------------
  |  Branch (363:3): [True: 0, False: 88.8k]
  ------------------
  364|      0|    if ((flags & CCF_CAST) || (d->info & CTF_VLA) || d != s)
  ------------------
  |  |   47|      0|#define CCF_CAST	0x00000001u
  ------------------
                  if ((flags & CCF_CAST) || (d->info & CTF_VLA) || d != s)
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (364:9): [True: 0, False: 0]
  |  Branch (364:31): [True: 0, False: 0]
  |  Branch (364:54): [True: 0, False: 0]
  ------------------
  365|      0|      goto err_conv;  /* Must be exact same type. */
  366|      0|copyval:  /* Copy value. */
  367|      0|    lj_assertCTS(dsize == ssize, "value copy with different sizes");
  ------------------
  |  |  263|      0|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  368|      0|    memcpy(dp, sp, dsize);
  369|      0|    break;
  370|       |
  371|      0|  default:
  ------------------
  |  Branch (371:3): [True: 0, False: 88.8k]
  ------------------
  372|      0|  err_conv:
  373|      0|    cconv_err_conv(cts, d, s, flags);
  374|  88.8k|  }
  375|  88.8k|}

lj_cconv.c:cconv_idx:
   28|   177k|{
   29|   177k|  uint32_t idx = ((info >> 26) & 15u);  /* Dispatch bits. */
   30|   177k|  lj_assertX(ctype_type(info) <= CT_MAYCONVERT,
  ------------------
  |  |  366|   177k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 177k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   177k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   31|   177k|	     "cannot convert ctype %08x", info);
   32|   177k|#if LJ_64
   33|   177k|  idx = ((uint32_t)(U64x(f436fff5,fff7f021) >> 4*idx) & 15u);
  ------------------
  |  |   94|   177k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   34|       |#else
   35|       |  idx = (((idx < 8 ? 0xfff7f021u : 0xf436fff5) >> 4*(idx & 7u)) & 15u);
   36|       |#endif
   37|   177k|  lj_assertX(idx < 8, "cannot convert ctype %08x", info);
  ------------------
  |  |  366|   177k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 177k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   177k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   38|   177k|  return idx;
   39|   177k|}

lj_cdata_free:
   63|   113k|{
   64|   113k|  if (LJ_UNLIKELY(cd->marked & LJ_GC_CDATA_FIN)) {
  ------------------
  |  |  146|   113k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
   65|      0|    GCobj *root;
   66|      0|    makewhite(g, obj2gco(cd));
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   67|      0|    markfinalized(obj2gco(cd));
  ------------------
  |  |   46|      0|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
   68|      0|    if ((root = gcref(g->gc.mmudata)) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (68:9): [True: 0, False: 0]
  ------------------
   69|      0|      setgcrefr(cd->nextgc, root->gch.nextgc);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   70|      0|      setgcref(root->gch.nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   71|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   72|      0|    } else {
   73|      0|      setgcref(cd->nextgc, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   74|      0|      setgcref(g->gc.mmudata, obj2gco(cd));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   75|      0|    }
   76|   113k|  } else if (LJ_LIKELY(!cdataisv(cd))) {
  ------------------
  |  |  145|   113k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 113k, False: 0]
  |  |  ------------------
  ------------------
   77|   113k|    CType *ct = ctype_raw(ctype_ctsG(g), cd->ctypeid);
  ------------------
  |  |  384|   113k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|   113k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   78|   113k|    CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  214|   113k|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|   113k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   113k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (214:29): [True: 113k, False: 0]
  |  |  ------------------
  ------------------
                  CTSize sz = ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR;
  ------------------
  |  |  250|      0|#define CTSIZE_PTR	8
  ------------------
   79|   113k|    lj_assertG(ctype_hassize(ct->info) || ctype_isfunc(ct->info) ||
  ------------------
  |  |  364|   113k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   226k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 113k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   113k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   80|   113k|	       ctype_isextern(ct->info), "free of ctype without a size");
   81|   113k|    lj_mem_free(g, cd, sizeof(GCcdata) + sz);
   82|   113k|  } else {
   83|      0|    lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  365|      0|#define memcdatav(cd)	((void *)((char *)(cd) - cdatav(cd)->offset))
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
                  lj_mem_free(g, memcdatav(cd), sizecdatav(cd));
  ------------------
  |  |  364|      0|#define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  363|      0|#define cdatavlen(cd)	check_exp(cdataisv(cd), cdatav(cd)->len)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sizecdatav(cd)	(cdatavlen(cd) + cdatav(cd)->extra)
  |  |  ------------------
  |  |  |  |  362|      0|#define cdatav(cd)	((GCcdataVar *)((char *)(cd) - sizeof(GCcdataVar)))
  |  |  ------------------
  ------------------
   84|      0|  }
   85|   113k|}
lj_cdata_index:
  111|      9|{
  112|      9|  uint8_t *p = (uint8_t *)cdataptr(cd);
  ------------------
  |  |  360|      9|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  113|      9|  CType *ct = ctype_get(cts, cd->ctypeid);
  114|      9|  ptrdiff_t idx;
  115|       |
  116|       |  /* Resolve reference for cdata object. */
  117|      9|  if (ctype_isref(ct->info)) {
  ------------------
  |  |  229|      9|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|      9|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|      9|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|      9|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      9|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  118|      0|    lj_assertCTS(ct->size == CTSIZE_PTR, "ref is not pointer-sized");
  ------------------
  |  |  263|      0|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  119|      0|    p = *(uint8_t **)p;
  120|      0|    ct = ctype_child(cts, ct);
  121|      0|  }
  122|       |
  123|      9|collect_attrib:
  124|       |  /* Skip attributes and collect qualifiers. */
  125|      9|  while (ctype_isattrib(ct->info)) {
  ------------------
  |  |  209|      9|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|      9|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      9|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  126|      0|    if (ctype_attrib(ct->info) == CTA_QUAL) *qual |= ct->size;
  ------------------
  |  |  192|      0|#define ctype_attrib(info)	(((info) >> CTSHIFT_ATTRIB) & CTMASK_ATTRIB)
  |  |  ------------------
  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  ------------------
  |  |               #define ctype_attrib(info)	(((info) >> CTSHIFT_ATTRIB) & CTMASK_ATTRIB)
  |  |  ------------------
  |  |  |  |   94|      0|#define CTMASK_ATTRIB	255		/* Max. 256 attributes. */
  |  |  ------------------
  ------------------
  |  Branch (126:9): [True: 0, False: 0]
  ------------------
  127|      0|    ct = ctype_child(cts, ct);
  128|      0|  }
  129|       |  /* Interning rejects refs to refs. */
  130|      9|  lj_assertCTS(!ctype_isref(ct->info), "bad ref of ref");
  ------------------
  |  |  263|      9|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      9|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      9|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 9, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  131|       |
  132|      9|  if (tvisint(key)) {
  ------------------
  |  |  803|      9|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     18|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  133|      0|    idx = (ptrdiff_t)intV(key);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|      0|    goto integer_key;
  135|      9|  } else if (tvisnum(key)) {  /* Numeric key. */
  ------------------
  |  |  804|      9|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      9|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      9|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  136|       |#ifdef _MSC_VER
  137|       |    /* Workaround for MSVC bug. */
  138|       |    volatile
  139|       |#endif
  140|      0|    lua_Number n = numV(key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  141|      0|    idx = LJ_64 ? (ptrdiff_t)n : (ptrdiff_t)lj_num2int(n);
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  idx = LJ_64 ? (ptrdiff_t)n : (ptrdiff_t)lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  142|      0|  integer_key:
  143|      0|    if (ctype_ispointer(ct->info)) {
  ------------------
  |  |  227|      0|  ((ctype_type(info) >> 1) == (CT_PTR >> 1))  /* Pointer or array. */
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (227:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  144|      0|      CTSize sz = lj_ctype_size(cts, ctype_cid(ct->info));  /* Element size. */
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  145|      0|      if (sz == CTSIZE_INVALID)
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (145:11): [True: 0, False: 0]
  ------------------
  146|      0|	lj_err_caller(cts->L, LJ_ERR_FFI_INVSIZE);
  147|      0|      if (ctype_isptr(ct->info)) {
  ------------------
  |  |  203|      0|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  148|      0|	p = (uint8_t *)cdata_getptr(p, ct->size);
  149|      0|      } else if ((ct->info & (CTF_VECTOR|CTF_COMPLEX))) {
  ------------------
  |  |   72|      0|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  ------------------
                    } else if ((ct->info & (CTF_VECTOR|CTF_COMPLEX))) {
  ------------------
  |  |   73|      0|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  ------------------
  |  Branch (149:18): [True: 0, False: 0]
  ------------------
  150|      0|	if ((ct->info & CTF_COMPLEX)) idx &= 1;
  ------------------
  |  |   73|      0|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  ------------------
  |  Branch (150:6): [True: 0, False: 0]
  ------------------
  151|      0|	*qual |= CTF_CONST;  /* Valarray elements are constant. */
  ------------------
  |  |   66|      0|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  ------------------
  152|      0|      }
  153|      0|      *pp = p + idx*(int32_t)sz;
  154|      0|      return ct;
  155|      0|    }
  156|      9|  } else if (tviscdata(key)) {  /* Integer cdata key. */
  ------------------
  |  |  799|      9|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      9|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  157|      0|    GCcdata *cdk = cdataV(key);
  ------------------
  |  |  863|      0|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  158|      0|    CType *ctk = ctype_raw(cts, cdk->ctypeid);
  159|      0|    if (ctype_isenum(ctk->info)) ctk = ctype_child(cts, ctk);
  ------------------
  |  |  207|      0|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (207:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  160|      0|    if (ctype_isinteger(ctk->info)) {
  ------------------
  |  |  218|      0|  (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   90|      0|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   64|      0|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |   65|      0|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_BOOL|CTF_FP)) == CTINFO(CT_NUM, 0))
  |  |  ------------------
  |  |  |  |  185|      0|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (218:3): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  161|      0|      lj_cconv_ct_ct(cts, ctype_get(cts, CTID_INT_PSZ), ctk,
  ------------------
  |  |  319|      0|#define CTID_INT_PSZ	CTID_INT64
  ------------------
  162|      0|		     (uint8_t *)&idx, cdataptr(cdk), 0);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  163|      0|      goto integer_key;
  164|      0|    }
  165|      9|  } else if (tvisstr(key)) {  /* String key. */
  ------------------
  |  |  795|      9|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      9|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      9|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 9, False: 0]
  |  |  ------------------
  ------------------
  166|      9|    GCstr *name = strV(key);
  ------------------
  |  |  859|      9|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      9|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      9|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      9|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  167|      9|    if (ctype_isstruct(ct->info)) {
  ------------------
  |  |  205|      9|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|      9|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      9|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (205:30): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  168|      0|      CTSize ofs;
  169|      0|      CType *fct = lj_ctype_getfieldq(cts, ct, name, &ofs, qual);
  170|      0|      if (fct) {
  ------------------
  |  Branch (170:11): [True: 0, False: 0]
  ------------------
  171|      0|	*pp = p + ofs;
  172|      0|	return fct;
  173|      0|      }
  174|      9|    } else if (ctype_iscomplex(ct->info)) {
  ------------------
  |  |  236|      9|  (((info) & (CTMASK_NUM|CTF_COMPLEX)) == CTINFO(CT_ARRAY, CTF_COMPLEX))
  |  |  ------------------
  |  |  |  |   90|      9|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_COMPLEX)) == CTINFO(CT_ARRAY, CTF_COMPLEX))
  |  |  ------------------
  |  |  |  |   73|      9|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_COMPLEX)) == CTINFO(CT_ARRAY, CTF_COMPLEX))
  |  |  ------------------
  |  |  |  |  185|      9|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      9|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (236:3): [True: 7, False: 2]
  |  |  ------------------
  ------------------
  175|      7|      if (name->len == 2) {
  ------------------
  |  Branch (175:11): [True: 6, False: 1]
  ------------------
  176|      6|	*qual |= CTF_CONST;  /* Complex fields are constant. */
  ------------------
  |  |   66|      6|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  ------------------
  177|      6|	if (strdata(name)[0] == 'r' && strdata(name)[1] == 'e') {
  ------------------
  |  |  316|      6|#define strdata(s)	((const char *)((s)+1))
  ------------------
              	if (strdata(name)[0] == 'r' && strdata(name)[1] == 'e') {
  ------------------
  |  |  316|      1|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (177:6): [True: 1, False: 5]
  |  Branch (177:33): [True: 0, False: 1]
  ------------------
  178|      0|	  *pp = p;
  179|      0|	  return ct;
  180|      6|	} else if (strdata(name)[0] == 'i' && strdata(name)[1] == 'm') {
  ------------------
  |  |  316|      6|#define strdata(s)	((const char *)((s)+1))
  ------------------
              	} else if (strdata(name)[0] == 'i' && strdata(name)[1] == 'm') {
  ------------------
  |  |  316|      2|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (180:13): [True: 2, False: 4]
  |  Branch (180:40): [True: 0, False: 2]
  ------------------
  181|      0|	  *pp = p + (ct->size >> 1);
  182|      0|	  return ct;
  183|      0|	}
  184|      6|      }
  185|      7|    } else if (cd->ctypeid == CTID_CTYPEID) {
  ------------------
  |  Branch (185:16): [True: 0, False: 2]
  ------------------
  186|       |      /* Allow indexing a (pointer to) struct constructor to get constants. */
  187|      0|      CType *sct = ctype_raw(cts, *(CTypeID *)p);
  188|      0|      if (ctype_isptr(sct->info))
  ------------------
  |  |  203|      0|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  189|      0|	sct = ctype_rawchild(cts, sct);
  190|      0|      if (ctype_isstruct(sct->info)) {
  ------------------
  |  |  205|      0|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (205:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  191|      0|	CTSize ofs;
  192|      0|	CType *fct = lj_ctype_getfield(cts, sct, name, &ofs);
  ------------------
  |  |  467|      0|  lj_ctype_getfieldq((cts), (ct), (name), (ofs), NULL)
  ------------------
  193|      0|	if (fct && ctype_isconstval(fct->info))
  ------------------
  |  |  212|      0|#define ctype_isconstval(info)	(ctype_type((info)) == CT_CONSTVAL)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (212:32): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (193:6): [True: 0, False: 0]
  ------------------
  194|      0|	  return fct;
  195|      0|      }
  196|      0|      ct = sct;  /* Allow resolving metamethods for constructors, too. */
  197|      0|    }
  198|      9|  }
  199|      9|  if (ctype_isptr(ct->info)) {  /* Automatically perform '->'. */
  ------------------
  |  |  203|      9|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|      9|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      9|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 9]
  |  |  ------------------
  ------------------
  200|      0|    if (ctype_isstruct(ctype_rawchild(cts, ct)->info)) {
  ------------------
  |  |  205|      0|#define ctype_isstruct(info)	(ctype_type((info)) == CT_STRUCT)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (205:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  201|      0|      p = (uint8_t *)cdata_getptr(p, ct->size);
  202|      0|      ct = ctype_child(cts, ct);
  203|      0|      goto collect_attrib;
  204|      0|    }
  205|      0|  }
  206|      9|  *qual |= 1;  /* Lookup failed. */
  207|      9|  return ct;  /* But return the resolved raw type. */
  208|      9|}

lj_lex.c:lj_cdata_new_:
   54|  70.2k|{
   55|  70.2k|  GCcdata *cd = (GCcdata *)lj_mem_newgco(L, sizeof(GCcdata) + sz);
   56|  70.2k|  cd->gct = ~LJ_TCDATA;
  ------------------
  |  |  270|  70.2k|#define LJ_TCDATA		(~10u)
  ------------------
   57|  70.2k|  cd->ctypeid = id;
   58|  70.2k|  return cd;
   59|  70.2k|}
lj_carith.c:lj_cdata_new:
   39|  42.8k|{
   40|  42.8k|  GCcdata *cd;
   41|  42.8k|#ifdef LUA_USE_ASSERT
   42|  42.8k|  CType *ct = ctype_raw(cts, id);
   43|  42.8k|  lj_assertCTS((ctype_hassize(ct->info) ? ct->size : CTSIZE_PTR) == sz,
  ------------------
  |  |  263|  42.8k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  42.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  85.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 42.8k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 42.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  42.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   44|  42.8k|	       "inconsistent size of fixed-size cdata alloc");
   45|  42.8k|#endif
   46|  42.8k|  cd = (GCcdata *)lj_mem_newgco(cts->L, sizeof(GCcdata) + sz);
   47|  42.8k|  cd->gct = ~LJ_TCDATA;
  ------------------
  |  |  270|  42.8k|#define LJ_TCDATA		(~10u)
  ------------------
   48|  42.8k|  cd->ctypeid = ctype_check(cts, id);
   49|  42.8k|  return cd;
   50|  42.8k|}

lj_clib_unload:
  422|  3.31k|{
  423|  3.31k|  clib_unloadlib(cl);
  424|  3.31k|  cl->handle = NULL;
  425|  3.31k|}
lj_clib_default:
  429|  3.31k|{
  430|  3.31k|  CLibrary *cl = clib_new(L, mt);
  431|  3.31k|  cl->handle = CLIB_DEFHANDLE;
  ------------------
  |  |   33|  3.31k|#define CLIB_DEFHANDLE	NULL
  ------------------
  432|  3.31k|}
lj_clib.c:clib_new:
  400|  3.31k|{
  401|  3.31k|  GCtab *t = lj_tab_new(L, 0, 0);
  402|  3.31k|  GCudata *ud = lj_udata_new(L, sizeof(CLibrary), t);
  403|  3.31k|  CLibrary *cl = (CLibrary *)uddata(ud);
  ------------------
  |  |  342|  3.31k|#define uddata(u)	((void *)((u)+1))
  ------------------
  404|  3.31k|  cl->cache = t;
  405|  3.31k|  ud->udtype = UDTYPE_FFI_CLIB;
  406|       |  /* NOBARRIER: The GCudata is new (marked white). */
  407|  3.31k|  setgcref(ud->metatable, obj2gco(mt));
  ------------------
  |  |   72|  3.31k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  408|  3.31k|  setudataV(L, L->top++, ud);
  409|  3.31k|  return cl;
  410|  3.31k|}
lj_clib.c:clib_unloadlib:
  135|  3.31k|{
  136|  3.31k|  if (cl->handle && cl->handle != CLIB_DEFHANDLE)
  ------------------
  |  |   33|      0|#define CLIB_DEFHANDLE	NULL
  ------------------
  |  Branch (136:7): [True: 0, False: 3.31k]
  |  Branch (136:21): [True: 0, False: 0]
  ------------------
  137|      0|    dlclose(cl->handle);
  138|  3.31k|}

lj_ctype_addname:
  229|   245k|{
  230|   245k|  uint32_t h = ct_hashname(gcref(ct->name));
  ------------------
  |  |  149|   245k|  (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|   245k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   96|   245k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |   12|   245k|#define HASH_BIAS	(-0x04c11db7)
  |  |  ------------------
  |  |                 (hashrot(u32ptr(name), u32ptr(name) + HASH_BIAS) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|   245k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|   245k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|   245k|  ct->next = cts->hash[h];
  232|   245k|  cts->hash[h] = (CTypeID1)id;
  233|   245k|}
lj_ctype_size:
  293|     17|{
  294|     17|  CType *ct = ctype_raw(cts, id);
  295|     17|  return ctype_hassize(ct->info) ? ct->size : CTSIZE_INVALID;
  ------------------
  |  |  214|     17|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|     17|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     17|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (214:29): [True: 17, False: 0]
  |  |  ------------------
  ------------------
                return ctype_hassize(ct->info) ? ct->size : CTSIZE_INVALID;
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  296|     17|}
lj_ctype_meta:
  358|  1.89k|{
  359|  1.89k|  CType *ct = ctype_get(cts, id);
  360|  1.89k|  cTValue *tv;
  361|  1.89k|  while (ctype_isattrib(ct->info) || ctype_isref(ct->info)) {
  ------------------
  |  |  209|  3.78k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|  1.89k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.89k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
                while (ctype_isattrib(ct->info) || ctype_isref(ct->info)) {
  ------------------
  |  |  229|  1.89k|  (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   90|  1.89k|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |   71|  1.89k|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_REF)) == CTINFO(CT_PTR, CTF_REF))
  |  |  ------------------
  |  |  |  |  185|  1.89k|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.89k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (229:3): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
  362|      0|    id = ctype_cid(ct->info);
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  363|      0|    ct = ctype_get(cts, id);
  364|      0|  }
  365|  1.89k|  if (ctype_isptr(ct->info) &&
  ------------------
  |  |  203|  3.78k|#define ctype_isptr(info)	(ctype_type((info)) == CT_PTR)
  |  |  ------------------
  |  |  |  |  189|  1.89k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  1.89k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (203:27): [True: 0, False: 1.89k]
  |  |  ------------------
  ------------------
  366|  1.89k|      ctype_isfunc(ctype_get(cts, ctype_cid(ct->info))->info))
  ------------------
  |  |  206|      0|#define ctype_isfunc(info)	(ctype_type((info)) == CT_FUNC)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (206:28): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  367|      0|    tv = lj_tab_getstr(cts->miscmap, &cts->g->strempty);
  368|  1.89k|  else
  369|  1.89k|    tv = lj_tab_getinth(cts->miscmap, -(int32_t)id);
  370|  1.89k|  if (tv && tvistab(tv) &&
  ------------------
  |  |  800|  1.89k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (370:7): [True: 0, False: 1.89k]
  ------------------
  371|  1.89k|      (tv = lj_tab_getstr(tabV(tv), mmname_str(cts->g, mm))) && !tvisnil(tv))
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    (tv = lj_tab_getstr(tabV(tv), mmname_str(cts->g, mm))) && !tvisnil(tv))
  ------------------
  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    (tv = lj_tab_getstr(tabV(tv), mmname_str(cts->g, mm))) && !tvisnil(tv))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (371:7): [True: 0, False: 0]
  |  Branch (371:65): [True: 0, False: 0]
  ------------------
  372|      0|    return tv;
  373|  1.89k|  return NULL;
  374|  1.89k|}
lj_ctype_repr:
  561|    708|{
  562|    708|  global_State *g = G(L);
  ------------------
  |  |  705|    708|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    708|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  563|    708|  CTRepr ctr;
  564|    708|  ctr.pb = ctr.pe = &ctr.buf[CTREPR_MAX/2];
  ------------------
  |  |  379|    708|#define CTREPR_MAX		512
  ------------------
  565|    708|  ctr.cts = ctype_ctsG(g);
  ------------------
  |  |  384|    708|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|    708|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  566|    708|  ctr.L = L;
  567|    708|  ctr.ok = 1;
  568|    708|  ctr.needsp = 0;
  569|    708|  if (name) ctype_prepstr(&ctr, strdata(name), name->len);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (569:7): [True: 0, False: 708]
  ------------------
  570|    708|  ctype_repr(&ctr, id);
  571|    708|  if (LJ_UNLIKELY(!ctr.ok)) return lj_str_newlit(L, "?");
  ------------------
  |  |  146|    708|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 708]
  |  |  ------------------
  ------------------
                if (LJ_UNLIKELY(!ctr.ok)) return lj_str_newlit(L, "?");
  ------------------
  |  |   28|      0|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  572|    708|  return lj_str_new(L, ctr.pb, ctr.pe - ctr.pb);
  573|    708|}
lj_ctype_init:
  614|  3.31k|{
  615|  3.31k|  CTState *cts = lj_mem_newt(L, sizeof(CTState), CTState);
  ------------------
  |  |  133|  3.31k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  3.31k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  616|  3.31k|  CType *ct = lj_mem_newvec(L, CTTYPETAB_MIN, CType);
  ------------------
  |  |  125|  3.31k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  3.31k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  617|  3.31k|  const char *name = lj_ctype_typenames;
  618|  3.31k|  CTypeID id;
  619|  3.31k|  memset(cts, 0, sizeof(CTState));
  620|  3.31k|  cts->tab = ct;
  621|  3.31k|  cts->sizetab = CTTYPETAB_MIN;
  ------------------
  |  |  142|  3.31k|#define CTTYPETAB_MIN		128
  ------------------
  622|  3.31k|  cts->top = CTTYPEINFO_NUM;
  ------------------
  |  |  138|  3.31k|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  623|  3.31k|  cts->L = NULL;
  624|  3.31k|  cts->g = G(L);
  ------------------
  |  |  705|  3.31k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.31k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  625|   325k|  for (id = 0; id < CTTYPEINFO_NUM; id++, ct++) {
  ------------------
  |  |  138|   325k|#define CTTYPEINFO_NUM		(sizeof(lj_ctype_typeinfo)/sizeof(CTInfo)-1)
  ------------------
  |  Branch (625:16): [True: 321k, False: 3.31k]
  ------------------
  626|   321k|    CTInfo info = lj_ctype_typeinfo[id];
  627|   321k|    ct->size = (CTSize)((int32_t)(info << 16) >> 26);
  628|   321k|    ct->info = info & 0xffff03ffu;
  629|   321k|    ct->sib = 0;
  630|   321k|    if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  189|   321k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|   321k|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
                  if (ctype_type(info) == CT_KW || ctype_istypedef(info)) {
  ------------------
  |  |  208|   132k|#define ctype_istypedef(info)	(ctype_type((info)) == CT_TYPEDEF)
  |  |  ------------------
  |  |  |  |  189|   132k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   132k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (208:31): [True: 56.3k, False: 76.2k]
  |  |  ------------------
  ------------------
  |  Branch (630:9): [True: 189k, False: 132k]
  ------------------
  631|   245k|      size_t len = strlen(name);
  632|   245k|      GCstr *str = lj_str_new(L, name, len);
  633|   245k|      ctype_setname(ct, str);
  634|   245k|      name += len+1;
  635|   245k|      lj_ctype_addname(cts, ct, id);
  636|   245k|    } else {
  637|  76.2k|      setgcrefnull(ct->name);
  ------------------
  |  |   76|  76.2k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  638|  76.2k|      ct->next = 0;
  639|  76.2k|      if (!ctype_isenum(info)) ctype_addtype(cts, ct, id);
  ------------------
  |  |  207|  76.2k|#define ctype_isenum(info)	(ctype_type((info)) == CT_ENUM)
  |  |  ------------------
  |  |  |  |  189|  76.2k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  76.2k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (639:11): [True: 72.9k, False: 3.31k]
  ------------------
  640|  76.2k|    }
  641|   321k|  }
  642|  3.31k|  setmref(G(L)->ctype_state, cts);
  ------------------
  |  |   39|  3.31k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  643|  3.31k|  return cts;
  644|  3.31k|}
lj_ctype_initfin:
  648|  13.6k|{
  649|       |  /* NOBARRIER: The table is new (marked white). */
  650|  13.6k|  GCtab *t = lj_tab_new(L, 0, 1);
  651|  13.6k|  setgcref(t->metatable, obj2gco(t));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  652|  13.6k|  setstrV(L, lj_tab_setstr(L, t, lj_str_newlit(L, "__mode")),
  ------------------
  |  |   28|  13.6k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  653|  13.6k|	  lj_str_newlit(L, "k"));
  ------------------
  |  |   28|  13.6k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  654|  13.6k|  t->nomm = (uint8_t)(~(1u<<MM_mode));
  655|  13.6k|  setgcref(G(L)->gcroot[GCROOT_FFI_FIN], obj2gco(t));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  656|  13.6k|}
lj_ctype_freestate:
  660|  13.6k|{
  661|  13.6k|  CTState *cts = ctype_ctsG(g);
  ------------------
  |  |  384|  13.6k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  662|  13.6k|  if (cts) {
  ------------------
  |  Branch (662:7): [True: 3.31k, False: 10.3k]
  ------------------
  663|  3.31k|    lj_ccallback_mcode_free(cts);
  664|  3.31k|    lj_mem_freevec(g, cts->tab, cts->sizetab, CType);
  ------------------
  |  |  130|  3.31k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  665|  3.31k|    lj_mem_freevec(g, cts->cb.cbid, cts->cb.sizeid, CTypeID1);
  ------------------
  |  |  130|  3.31k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  666|  3.31k|    lj_mem_freet(g, cts);
  ------------------
  |  |  134|  3.31k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  667|  3.31k|  }
  668|  13.6k|}
lj_ctype.c:ctype_prepstr:
  392|  1.29k|{
  393|  1.29k|  char *p = ctr->pb;
  394|  1.29k|  if (ctr->buf + len+1 > p) { ctr->ok = 0; return; }
  ------------------
  |  Branch (394:7): [True: 0, False: 1.29k]
  ------------------
  395|  1.29k|  if (ctr->needsp) *--p = ' ';
  ------------------
  |  Branch (395:7): [True: 0, False: 1.29k]
  ------------------
  396|  1.29k|  ctr->needsp = 1;
  397|  1.29k|  p -= len;
  398|  5.08k|  while (len-- > 0) p[len] = str[len];
  ------------------
  |  Branch (398:10): [True: 3.79k, False: 1.29k]
  ------------------
  399|  1.29k|  ctr->pb = p;
  400|  1.29k|}
lj_ctype.c:ctype_repr:
  463|    708|{
  464|    708|  CType *ct = ctype_get(ctr->cts, id);
  465|    708|  CTInfo qual = 0;
  466|    708|  int ptrto = 0;
  467|    708|  for (;;) {
  468|    708|    CTInfo info = ct->info;
  469|    708|    CTSize size = ct->size;
  470|    708|    switch (ctype_type(info)) {
  ------------------
  |  |  189|    708|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  ------------------
  |  |  |  |   91|    708|#define CTSHIFT_NUM	28
  |  |  ------------------
  ------------------
  471|    583|    case CT_NUM:
  ------------------
  |  Branch (471:5): [True: 583, False: 125]
  ------------------
  472|    583|      if ((info & CTF_BOOL)) {
  ------------------
  |  |   64|    583|#define CTF_BOOL	0x08000000u	/* Boolean: NUM, BITFIELD. */
  ------------------
  |  Branch (472:11): [True: 0, False: 583]
  ------------------
  473|      0|	ctype_preplit(ctr, "bool");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  474|    583|      } else if ((info & CTF_FP)) {
  ------------------
  |  |   65|    583|#define CTF_FP		0x04000000u	/* Floating-point: NUM. */
  ------------------
  |  Branch (474:18): [True: 0, False: 583]
  ------------------
  475|      0|	if (size == sizeof(double)) ctype_preplit(ctr, "double");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (475:6): [True: 0, False: 0]
  ------------------
  476|      0|	else if (size == sizeof(float)) ctype_preplit(ctr, "float");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (476:11): [True: 0, False: 0]
  ------------------
  477|      0|	else ctype_preplit(ctr, "long double");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  478|    583|      } else if (size == 1) {
  ------------------
  |  Branch (478:18): [True: 0, False: 583]
  ------------------
  479|      0|	if (!((info ^ CTF_UCHAR) & CTF_UNSIGNED)) ctype_preplit(ctr, "char");
  ------------------
  |  |   80|      0|#define CTF_UCHAR	((char)-1 > 0 ? CTF_UNSIGNED : 0)
  |  |  ------------------
  |  |  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  |  |  ------------------
  |  |  |  Branch (80:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (!((info ^ CTF_UCHAR) & CTF_UNSIGNED)) ctype_preplit(ctr, "char");
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
              	if (!((info ^ CTF_UCHAR) & CTF_UNSIGNED)) ctype_preplit(ctr, "char");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (479:6): [True: 0, False: 0]
  ------------------
  480|      0|	else if (CTF_UCHAR) ctype_preplit(ctr, "signed char");
  ------------------
  |  |   80|      0|#define CTF_UCHAR	((char)-1 > 0 ? CTF_UNSIGNED : 0)
  |  |  ------------------
  |  |  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  |  |  ------------------
  |  |  |  Branch (80:19): [Folded - Ignored]
  |  |  |  Branch (80:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	else if (CTF_UCHAR) ctype_preplit(ctr, "signed char");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  481|      0|	else ctype_preplit(ctr, "unsigned char");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  482|    583|      } else if (size < 8) {
  ------------------
  |  Branch (482:18): [True: 0, False: 583]
  ------------------
  483|      0|	if (size == 4) ctype_preplit(ctr, "int");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	else ctype_preplit(ctr, "short");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  485|      0|	if ((info & CTF_UNSIGNED)) ctype_preplit(ctr, "unsigned");
  ------------------
  |  |   68|      0|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
              	if ((info & CTF_UNSIGNED)) ctype_preplit(ctr, "unsigned");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (485:6): [True: 0, False: 0]
  ------------------
  486|    583|      } else {
  487|    583|	ctype_preplit(ctr, "_t");
  ------------------
  |  |  402|    583|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  488|    583|	ctype_prepnum(ctr, size*8);
  489|    583|	ctype_preplit(ctr, "int");
  ------------------
  |  |  402|    583|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  490|    583|	if ((info & CTF_UNSIGNED)) ctype_prepc(ctr, 'u');
  ------------------
  |  |   68|    583|#define CTF_UNSIGNED	0x00800000u	/* Unsigned: NUM, BITFIELD. */
  ------------------
  |  Branch (490:6): [True: 246, False: 337]
  ------------------
  491|    583|      }
  492|    583|      ctype_prepqual(ctr, (qual|info));
  493|    583|      return;
  494|      0|    case CT_VOID:
  ------------------
  |  Branch (494:5): [True: 0, False: 708]
  ------------------
  495|      0|      ctype_preplit(ctr, "void");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  496|      0|      ctype_prepqual(ctr, (qual|info));
  497|      0|      return;
  498|      0|    case CT_STRUCT:
  ------------------
  |  Branch (498:5): [True: 0, False: 708]
  ------------------
  499|      0|      ctype_preptype(ctr, ct, qual, (info & CTF_UNION) ? "union" : "struct");
  ------------------
  |  |   74|      0|#define CTF_UNION	0x00800000u	/* Union: STRUCT. */
  ------------------
  |  Branch (499:37): [True: 0, False: 0]
  ------------------
  500|      0|      return;
  501|      0|    case CT_ENUM:
  ------------------
  |  Branch (501:5): [True: 0, False: 708]
  ------------------
  502|      0|      if (id == CTID_CTYPEID) {
  ------------------
  |  Branch (502:11): [True: 0, False: 0]
  ------------------
  503|      0|	ctype_preplit(ctr, "ctype");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  504|      0|	return;
  505|      0|      }
  506|      0|      ctype_preptype(ctr, ct, qual, "enum");
  507|      0|      return;
  508|      0|    case CT_ATTRIB:
  ------------------
  |  Branch (508:5): [True: 0, False: 708]
  ------------------
  509|      0|      if (ctype_attrib(info) == CTA_QUAL) qual |= size;
  ------------------
  |  |  192|      0|#define ctype_attrib(info)	(((info) >> CTSHIFT_ATTRIB) & CTMASK_ATTRIB)
  |  |  ------------------
  |  |  |  |   95|      0|#define CTSHIFT_ATTRIB	16
  |  |  ------------------
  |  |               #define ctype_attrib(info)	(((info) >> CTSHIFT_ATTRIB) & CTMASK_ATTRIB)
  |  |  ------------------
  |  |  |  |   94|      0|#define CTMASK_ATTRIB	255		/* Max. 256 attributes. */
  |  |  ------------------
  ------------------
  |  Branch (509:11): [True: 0, False: 0]
  ------------------
  510|      0|      break;
  511|      0|    case CT_PTR:
  ------------------
  |  Branch (511:5): [True: 0, False: 708]
  ------------------
  512|      0|      if ((info & CTF_REF)) {
  ------------------
  |  |   71|      0|#define CTF_REF		0x00800000u	/* Reference: PTR. */
  ------------------
  |  Branch (512:11): [True: 0, False: 0]
  ------------------
  513|      0|	ctype_prepc(ctr, '&');
  514|      0|      } else {
  515|      0|	ctype_prepqual(ctr, (qual|info));
  516|      0|	if (LJ_64 && size == 4) ctype_preplit(ctr, "__ptr32");
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (LJ_64 && size == 4) ctype_preplit(ctr, "__ptr32");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (516:15): [True: 0, False: 0]
  ------------------
  517|      0|	ctype_prepc(ctr, '*');
  518|      0|      }
  519|      0|      qual = 0;
  520|      0|      ptrto = 1;
  521|      0|      ctr->needsp = 1;
  522|      0|      break;
  523|    125|    case CT_ARRAY:
  ------------------
  |  Branch (523:5): [True: 125, False: 583]
  ------------------
  524|    125|      if (ctype_isrefarray(info)) {
  ------------------
  |  |  232|    125|  (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   90|    125|#define CTMASK_NUM	0xf0000000u	/* Max. 16 type numbers. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   72|    125|#define CTF_VECTOR	0x08000000u	/* Vector: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |   73|    125|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  |  |  ------------------
  |  |                 (((info) & (CTMASK_NUM|CTF_VECTOR|CTF_COMPLEX)) == CTINFO(CT_ARRAY, 0))
  |  |  ------------------
  |  |  |  |  185|    125|#define CTINFO(ct, flags)	(((CTInfo)(ct) << CTSHIFT_NUM) + (flags))
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    125|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (232:3): [True: 0, False: 125]
  |  |  ------------------
  ------------------
  525|      0|	ctr->needsp = 1;
  526|      0|	if (ptrto) { ptrto = 0; ctype_prepc(ctr, '('); ctype_appc(ctr, ')'); }
  ------------------
  |  Branch (526:6): [True: 0, False: 0]
  ------------------
  527|      0|	ctype_appc(ctr, '[');
  528|      0|	if (size != CTSIZE_INVALID) {
  ------------------
  |  |  135|      0|#define CTSIZE_INVALID	0xffffffffu
  ------------------
  |  Branch (528:6): [True: 0, False: 0]
  ------------------
  529|      0|	  CTSize csize = ctype_child(ctr->cts, ct)->size;
  530|      0|	  ctype_appnum(ctr, csize ? size/csize : 0);
  ------------------
  |  Branch (530:22): [True: 0, False: 0]
  ------------------
  531|      0|	} else if ((info & CTF_VLA)) {
  ------------------
  |  |   70|      0|#define CTF_VLA		0x00100000u	/* Variable-length: ARRAY, STRUCT. */
  ------------------
  |  Branch (531:13): [True: 0, False: 0]
  ------------------
  532|      0|	  ctype_appc(ctr, '?');
  533|      0|	}
  534|      0|	ctype_appc(ctr, ']');
  535|    125|      } else if ((info & CTF_COMPLEX)) {
  ------------------
  |  |   73|    125|#define CTF_COMPLEX	0x04000000u	/* Complex: ARRAY. */
  ------------------
  |  Branch (535:18): [True: 125, False: 0]
  ------------------
  536|    125|	if (size == 2*sizeof(float)) ctype_preplit(ctr, "float");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (536:6): [True: 0, False: 125]
  ------------------
  537|    125|	ctype_preplit(ctr, "complex");
  ------------------
  |  |  402|    125|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  538|    125|	return;
  539|    125|      } else {
  540|      0|	ctype_preplit(ctr, ")))");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  541|      0|	ctype_prepnum(ctr, size);
  542|      0|	ctype_preplit(ctr, "__attribute__((vector_size(");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  543|      0|      }
  544|      0|      break;
  545|      0|    case CT_FUNC:
  ------------------
  |  Branch (545:5): [True: 0, False: 708]
  ------------------
  546|      0|      ctr->needsp = 1;
  547|      0|      if (ptrto) { ptrto = 0; ctype_prepc(ctr, '('); ctype_appc(ctr, ')'); }
  ------------------
  |  Branch (547:11): [True: 0, False: 0]
  ------------------
  548|      0|      ctype_appc(ctr, '(');
  549|      0|      ctype_appc(ctr, ')');
  550|      0|      break;
  551|      0|    default:
  ------------------
  |  Branch (551:5): [True: 0, False: 708]
  ------------------
  552|      0|      lj_assertG_(ctr->cts->g, 0, "bad ctype %08x", info);
  ------------------
  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  553|      0|      break;
  554|    708|    }
  555|      0|    ct = ctype_get(ctr->cts, ctype_cid(info));
  ------------------
  |  |  190|      0|#define ctype_cid(info)		((CTypeID)((info) & CTMASK_CID))
  |  |  ------------------
  |  |  |  |   89|      0|#define CTMASK_CID	0x0000ffffu	/* Max. 65536 type IDs. */
  |  |  ------------------
  ------------------
  556|      0|  }
  557|    708|}
lj_ctype.c:ctype_prepnum:
  413|    583|{
  414|    583|  char *p = ctr->pb;
  415|    583|  if (ctr->buf + 10+1 > p) { ctr->ok = 0; return; }
  ------------------
  |  Branch (415:7): [True: 0, False: 583]
  ------------------
  416|  1.16k|  do { *--p = (char)('0' + n % 10); } while (n /= 10);
  ------------------
  |  Branch (416:46): [True: 583, False: 583]
  ------------------
  417|    583|  ctr->pb = p;
  418|    583|  ctr->needsp = 0;
  419|    583|}
lj_ctype.c:ctype_prepc:
  406|    246|{
  407|    246|  if (ctr->buf >= ctr->pb) { ctr->ok = 0; return; }
  ------------------
  |  Branch (407:7): [True: 0, False: 246]
  ------------------
  408|    246|  *--ctr->pb = c;
  409|    246|}
lj_ctype.c:ctype_prepqual:
  442|    583|{
  443|    583|  if ((info & CTF_VOLATILE)) ctype_preplit(ctr, "volatile");
  ------------------
  |  |   67|    583|#define CTF_VOLATILE	0x01000000u	/* Volatile qualifier. */
  ------------------
                if ((info & CTF_VOLATILE)) ctype_preplit(ctr, "volatile");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (443:7): [True: 0, False: 583]
  ------------------
  444|    583|  if ((info & CTF_CONST)) ctype_preplit(ctr, "const");
  ------------------
  |  |   66|    583|#define CTF_CONST	0x02000000u	/* Const qualifier. */
  ------------------
                if ((info & CTF_CONST)) ctype_preplit(ctr, "const");
  ------------------
  |  |  402|      0|#define ctype_preplit(ctr, str)	ctype_prepstr((ctr), "" str, sizeof(str)-1)
  ------------------
  |  Branch (444:7): [True: 0, False: 583]
  ------------------
  445|    583|}
lj_ctype.c:ctype_addtype:
  221|  72.9k|{
  222|  72.9k|  uint32_t h = ct_hashtype(ct->info, ct->size);
  ------------------
  |  |  147|  72.9k|#define ct_hashtype(info, size)	(hashrot(info, size) & CTHASH_MASK)
  |  |  ------------------
  |  |  |  |  152|  72.9k|#define CTHASH_MASK	(CTHASH_SIZE-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  151|  72.9k|#define CTHASH_SIZE	128	/* Number of hash anchors. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  223|  72.9k|  ct->next = cts->hash[h];
  224|  72.9k|  cts->hash[h] = (CTypeID1)id;
  225|  72.9k|}

lj_ctype.c:ctype_get:
  420|  2.61k|{
  421|  2.61k|  return &cts->tab[ctype_check(cts, id)];
  422|  2.61k|}
lj_ctype.c:ctype_check:
  412|  2.61k|{
  413|  2.61k|  UNUSED(cts);
  ------------------
  |  |   91|  2.61k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|  2.61k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|  2.61k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  2.61k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  5.23k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.61k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.61k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|  2.61k|  return id;
  416|  2.61k|}
lj_ctype.c:ctype_raw:
  438|     17|{
  439|     17|  CType *ct = ctype_get(cts, id);
  440|     17|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|     17|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|     17|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     17|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 17]
  |  |  ------------------
  ------------------
  441|     17|  return ct;
  442|     17|}
lj_ctype.c:ctype_setname:
  453|   245k|{
  454|       |  /* NOBARRIER: mark string as fixed -- the C type table is never collected. */
  455|   245k|  fixstring(s);
  ------------------
  |  |   45|   245k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|   245k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  456|   245k|  setgcref(ct->name, obj2gco(s));
  ------------------
  |  |   72|   245k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  457|   245k|}
lib_ffi.c:ctype_cts:
  388|     70|{
  389|     70|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  384|     70|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|     70|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  390|     70|  cts->L = L;  /* Save L for errors and allocations. */
  391|     70|  return cts;
  392|     70|}
lib_ffi.c:ctype_raw:
  438|     61|{
  439|     61|  CType *ct = ctype_get(cts, id);
  440|     61|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|     61|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|     61|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     61|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 61]
  |  |  ------------------
  ------------------
  441|     61|  return ct;
  442|     61|}
lib_ffi.c:ctype_get:
  420|     61|{
  421|     61|  return &cts->tab[ctype_check(cts, id)];
  422|     61|}
lib_ffi.c:ctype_check:
  412|     61|{
  413|     61|  UNUSED(cts);
  ------------------
  |  |   91|     61|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|     61|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|     61|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     61|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    122|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 61, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 61, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     61|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|     61|  return id;
  416|     61|}
lj_cdata.c:ctype_check:
  412|   113k|{
  413|   113k|  UNUSED(cts);
  ------------------
  |  |   91|   113k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|   113k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|   113k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   113k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   226k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 113k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 113k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   113k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|   113k|  return id;
  416|   113k|}
lj_cdata.c:ctype_raw:
  438|   113k|{
  439|   113k|  CType *ct = ctype_get(cts, id);
  440|   113k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|   113k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|   113k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   113k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 113k]
  |  |  ------------------
  ------------------
  441|   113k|  return ct;
  442|   113k|}
lj_cdata.c:ctype_get:
  420|   113k|{
  421|   113k|  return &cts->tab[ctype_check(cts, id)];
  422|   113k|}
lj_ccall.c:ctype_get:
  420|     61|{
  421|     61|  return &cts->tab[ctype_check(cts, id)];
  422|     61|}
lj_ccall.c:ctype_check:
  412|     61|{
  413|     61|  UNUSED(cts);
  ------------------
  |  |   91|     61|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|     61|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|     61|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     61|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    122|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 61, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 61, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     61|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|     61|  return id;
  416|     61|}
lj_ccall.c:ctype_cts:
  388|     61|{
  389|     61|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  384|     61|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|     61|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  390|     61|  cts->L = L;  /* Save L for errors and allocations. */
  391|     61|  return cts;
  392|     61|}
lj_ccall.c:ctype_raw:
  438|     61|{
  439|     61|  CType *ct = ctype_get(cts, id);
  440|     61|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|     61|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|     61|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|     61|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 61]
  |  |  ------------------
  ------------------
  441|     61|  return ct;
  442|     61|}
lj_carith.c:ctype_cts:
  388|  47.2k|{
  389|  47.2k|  CTState *cts = ctype_ctsG(G(L));
  ------------------
  |  |  384|  47.2k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|  47.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  390|  47.2k|  cts->L = L;  /* Save L for errors and allocations. */
  391|  47.2k|  return cts;
  392|  47.2k|}
lj_carith.c:ctype_check:
  412|   227k|{
  413|   227k|  UNUSED(cts);
  ------------------
  |  |   91|   227k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  414|   227k|  lj_assertCTS(id > 0 && id < cts->top, "bad CTID %d", id);
  ------------------
  |  |  263|   227k|#define lj_assertCTS(c, ...)	(lj_assertG_(cts->g, (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   227k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   454k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 227k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 227k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   227k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|   227k|  return id;
  416|   227k|}
lj_carith.c:ctype_get:
  420|   184k|{
  421|   184k|  return &cts->tab[ctype_check(cts, id)];
  422|   184k|}
lj_carith.c:ctype_raw:
  438|   110k|{
  439|   110k|  CType *ct = ctype_get(cts, id);
  440|   110k|  while (ctype_isattrib(ct->info)) ct = ctype_child(cts, ct);
  ------------------
  |  |  209|   110k|#define ctype_isattrib(info)	(ctype_type((info)) == CT_ATTRIB)
  |  |  ------------------
  |  |  |  |  189|   110k|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   110k|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (209:30): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  441|   110k|  return ct;
  442|   110k|}

lj_debug_frame:
   26|  1.59k|{
   27|  1.59k|  cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|  1.59k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.59k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame, *nextframe, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|  1.59k|#define LJ_FR2			1
  ------------------
   28|       |  /* Traverse frames backwards. */
   29|  14.5M|  for (nextframe = frame = L->base-1; frame > bot; ) {
  ------------------
  |  Branch (29:39): [True: 14.5M, False: 79]
  ------------------
   30|  14.5M|    if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |   46|  14.5M|#define frame_gc(f)		(gcval((f)-1))
  |  |  ------------------
  |  |  |  |  833|  14.5M|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  14.5M|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  14.5M|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (frame_gc(frame) == obj2gco(L))
  ------------------
  |  |  775|  14.5M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (30:9): [True: 6, False: 14.5M]
  ------------------
   31|      6|      level++;  /* Skip dummy frames. See lj_err_optype_call(). */
   32|  14.5M|    if (level-- == 0) {
  ------------------
  |  Branch (32:9): [True: 1.51k, False: 14.5M]
  ------------------
   33|  1.51k|      *size = (int)(nextframe - frame);
   34|  1.51k|      return frame;  /* Level found. */
   35|  1.51k|    }
   36|  14.5M|    nextframe = frame;
   37|  14.5M|    if (frame_islua(frame)) {
  ------------------
  |  |   77|  14.5M|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  14.5M|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  14.5M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  14.5M|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 14.5M, False: 1.28k]
  |  |  ------------------
  ------------------
   38|  14.5M|      frame = frame_prevl(frame);
  ------------------
  |  |  108|  14.5M|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  14.5M|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  14.5M|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   39|  14.5M|    } else {
   40|  1.28k|      if (frame_isvarg(frame))
  ------------------
  |  |   80|  1.28k|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|  1.28k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.28k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  1.28k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  1.28k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.28k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 113, False: 1.17k]
  |  |  ------------------
  ------------------
   41|    113|	level++;  /* Skip vararg pseudo-frame. */
   42|  1.28k|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  1.28k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  1.28k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.28k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  1.28k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  1.28k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.28k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   43|  1.28k|    }
   44|  14.5M|  }
   45|     79|  *size = level;
   46|     79|  return NULL;  /* Level not found. */
   47|  1.59k|}
lj_debug_line:
  120|  58.2k|{
  121|  58.2k|  const void *lineinfo = proto_lineinfo(pt);
  ------------------
  |  |  426|  58.2k|#define proto_lineinfo(pt)	(mref((pt)->lineinfo, const void))
  |  |  ------------------
  |  |  |  |   36|  58.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  122|  58.2k|  if (pc <= pt->sizebc && lineinfo) {
  ------------------
  |  Branch (122:7): [True: 58.2k, False: 0]
  |  Branch (122:27): [True: 58.2k, False: 0]
  ------------------
  123|  58.2k|    BCLine first = pt->firstline;
  124|  58.2k|    if (pc == pt->sizebc) return first + pt->numline;
  ------------------
  |  Branch (124:9): [True: 0, False: 58.2k]
  ------------------
  125|  58.2k|    if (pc-- == 0) return first;
  ------------------
  |  Branch (125:9): [True: 74, False: 58.1k]
  ------------------
  126|  58.1k|    if (pt->numline < 256)
  ------------------
  |  Branch (126:9): [True: 58.0k, False: 163]
  ------------------
  127|  58.0k|      return first + (BCLine)((const uint8_t *)lineinfo)[pc];
  128|    163|    else if (pt->numline < 65536)
  ------------------
  |  Branch (128:14): [True: 163, False: 0]
  ------------------
  129|    163|      return first + (BCLine)((const uint16_t *)lineinfo)[pc];
  130|      0|    else
  131|      0|      return first + (BCLine)((const uint32_t *)lineinfo)[pc];
  132|  58.1k|  }
  133|      0|  return 0;
  134|  58.2k|}
lj_debug_uvname:
  221|    683|{
  222|    683|  const uint8_t *p = proto_uvinfo(pt);
  ------------------
  |  |  427|    683|#define proto_uvinfo(pt)	(mref((pt)->uvinfo, const uint8_t))
  |  |  ------------------
  |  |  |  |   36|    683|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  223|    683|  lj_assertX(idx < pt->sizeuv, "bad upvalue index");
  ------------------
  |  |  366|    683|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    683|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 683, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    683|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  224|    683|  if (!p) return "";
  ------------------
  |  Branch (224:7): [True: 0, False: 683]
  ------------------
  225|    683|  if (idx) while (*p++ || --idx) ;
  ------------------
  |  Branch (225:7): [True: 3, False: 680]
  |  Branch (225:19): [True: 13, False: 5]
  |  Branch (225:27): [True: 2, False: 3]
  ------------------
  226|    683|  return (const char *)p;
  227|    683|}
lj_debug_slotname:
  256|  55.9k|{
  257|  55.9k|  const char *lname;
  258|  55.9k|restart:
  259|  55.9k|  lname = debug_varname(pt, proto_bcpos(pt, ip), slot);
  ------------------
  |  |  421|  55.9k|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|  55.9k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  260|  55.9k|  if (lname != NULL) { *name = lname; return "local"; }
  ------------------
  |  Branch (260:7): [True: 48, False: 55.8k]
  ------------------
  261|   110k|  while (--ip > proto_bc(pt)) {
  ------------------
  |  |  420|   110k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  |  Branch (261:10): [True: 110k, False: 0]
  ------------------
  262|   110k|    BCIns ins = *ip;
  263|   110k|    BCOp op = bc_op(ins);
  ------------------
  |  |   34|   110k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  264|   110k|    BCReg ra = bc_a(ins);
  ------------------
  |  |   35|   110k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  265|   110k|    if (bcmode_a(op) == BCMbase) {
  ------------------
  |  |  246|   110k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
  |  Branch (265:9): [True: 301, False: 109k]
  ------------------
  266|    301|      if (slot >= ra && (op != BC_KNIL || slot <= bc_d(ins)))
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (266:11): [True: 16, False: 285]
  |  Branch (266:26): [True: 16, False: 0]
  |  Branch (266:43): [True: 0, False: 0]
  ------------------
  267|     16|	return NULL;
  268|   109k|    } else if (bcmode_a(op) == BCMdst && ra == slot) {
  ------------------
  |  |  246|   109k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
  |  Branch (268:16): [True: 108k, False: 840]
  |  Branch (268:42): [True: 55.8k, False: 53.0k]
  ------------------
  269|  55.8k|      switch (bc_op(ins)) {
  ------------------
  |  |   34|  55.8k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  270|     20|      case BC_MOV:
  ------------------
  |  Branch (270:7): [True: 20, False: 55.8k]
  ------------------
  271|     20|	if (ra == slot) { slot = bc_d(ins); goto restart; }
  ------------------
  |  |   38|     20|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (271:6): [True: 20, False: 0]
  ------------------
  272|      0|	break;
  273|  54.8k|      case BC_GGET:
  ------------------
  |  Branch (273:7): [True: 54.8k, False: 1.04k]
  ------------------
  274|  54.8k|	*name = strdata(gco2str(proto_kgc(pt, ~(ptrdiff_t)bc_d(ins))));
  ------------------
  |  |  316|   383k|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 54.8k, False: 0]
  |  |  |  Branch (316:37): [True: 54.8k, False: 0]
  |  |  |  Branch (316:37): [True: 54.8k, False: 0]
  |  |  ------------------
  ------------------
  275|      0|	return "global";
  276|    145|      case BC_TGETS:
  ------------------
  |  Branch (276:7): [True: 145, False: 55.7k]
  ------------------
  277|    290|	*name = strdata(gco2str(proto_kgc(pt, ~(ptrdiff_t)bc_c(ins))));
  ------------------
  |  |  316|  1.01k|#define strdata(s)	((const char *)((s)+1))
  |  |  ------------------
  |  |  |  Branch (316:37): [True: 145, False: 0]
  |  |  |  Branch (316:37): [True: 145, False: 0]
  |  |  |  Branch (316:37): [True: 145, False: 0]
  |  |  ------------------
  ------------------
  278|    145|	if (ip > proto_bc(pt)) {
  ------------------
  |  |  420|    145|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  |  Branch (278:6): [True: 145, False: 0]
  ------------------
  279|    145|	  BCIns insp = ip[-1];
  280|    145|	  if (bc_op(insp) == BC_MOV && bc_a(insp) == ra+1+LJ_FR2 &&
  ------------------
  |  |   34|    145|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
              	  if (bc_op(insp) == BC_MOV && bc_a(insp) == ra+1+LJ_FR2 &&
  ------------------
  |  |   35|     10|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	  if (bc_op(insp) == BC_MOV && bc_a(insp) == ra+1+LJ_FR2 &&
  ------------------
  |  |  569|    155|#define LJ_FR2			1
  ------------------
  |  Branch (280:8): [True: 10, False: 135]
  |  Branch (280:33): [True: 5, False: 5]
  ------------------
  281|    145|	      bc_d(insp) == bc_b(ins))
  ------------------
  |  |   38|      5|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
              	      bc_d(insp) == bc_b(ins))
  ------------------
  |  |   36|      5|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
  |  Branch (281:8): [True: 5, False: 0]
  ------------------
  282|      5|	    return "method";
  283|    145|	}
  284|    140|	return "field";
  285|    683|      case BC_UGET:
  ------------------
  |  Branch (285:7): [True: 683, False: 55.1k]
  ------------------
  286|    683|	*name = lj_debug_uvname(pt, bc_d(ins));
  ------------------
  |  |   38|    683|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  287|    683|	return "upvalue";
  288|    198|      default:
  ------------------
  |  Branch (288:7): [True: 198, False: 55.6k]
  ------------------
  289|    198|	return NULL;
  290|  55.8k|      }
  291|  55.8k|    }
  292|   110k|  }
  293|      0|  return NULL;
  294|  55.8k|}
lj_debug_funcname:
  298|    881|{
  299|    881|  cTValue *pframe;
  300|    881|  GCfunc *fn;
  301|    881|  BCPos pc;
  302|    881|  if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  217|    881|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    881|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  569|    881|#define LJ_FR2			1
  ------------------
  |  Branch (302:7): [True: 0, False: 881]
  ------------------
  303|      0|    return NULL;
  304|    881|  if (frame_isvarg(frame))
  ------------------
  |  |   80|    881|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|    881|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    881|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    881|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    881|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    881|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 40, False: 841]
  |  |  ------------------
  ------------------
  305|     40|    frame = frame_prevd(frame);
  ------------------
  |  |  109|     40|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|     40|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|     40|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|     40|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|     40|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|     40|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|    881|  pframe = frame_prev(frame);
  ------------------
  |  |  110|    881|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|    881|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|    881|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|    881|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    881|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 803, False: 78]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|    803|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|    803|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|    803|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|     78|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|     78|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|     78|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|     78|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|     78|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|     78|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  307|    881|  fn = frame_func(pframe);
  ------------------
  |  |   83|    881|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    881|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    881|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    881|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    881|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  308|    881|  pc = debug_framepc(L, fn, frame);
  309|    881|  if (pc != NO_BCPOS) {
  ------------------
  |  |   50|    881|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (309:7): [True: 803, False: 78]
  ------------------
  310|    803|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|    803|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    803|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    803|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    803|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 803, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    803|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  311|    803|    const BCIns *ip = &proto_bc(pt)[check_exp(pc < pt->sizebc, pc)];
  ------------------
  |  |  420|    803|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
                  const BCIns *ip = &proto_bc(pt)[check_exp(pc < pt->sizebc, pc)];
  ------------------
  |  |  367|    803|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  ------------------
  |  |  |  |  366|    803|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    803|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 803, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    803|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  312|    803|    MMS mm = bcmode_mm(bc_op(*ip));
  ------------------
  |  |  251|    803|#define bcmode_mm(op)	((MMS)(lj_bc_mode[op]>>11))
  ------------------
  313|    803|    if (mm == MM_call) {
  ------------------
  |  Branch (313:9): [True: 803, False: 0]
  ------------------
  314|    803|      BCReg slot = bc_a(*ip);
  ------------------
  |  |   35|    803|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  315|    803|      if (bc_op(*ip) == BC_ITERC) slot -= 3;
  ------------------
  |  |   34|    803|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (315:11): [True: 1, False: 802]
  ------------------
  316|    803|      return lj_debug_slotname(pt, ip, slot, name);
  317|    803|    } else if (mm != MM__MAX) {
  ------------------
  |  Branch (317:16): [True: 0, False: 0]
  ------------------
  318|      0|      *name = strdata(mmname_str(G(L), mm));
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  319|      0|      return "metamethod";
  320|      0|    }
  321|    803|  }
  322|     78|  return NULL;
  323|    881|}
lj_debug_shortname:
  329|  2.04M|{
  330|  2.04M|  const char *src = strdata(str);
  ------------------
  |  |  316|  2.04M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  331|  2.04M|  if (*src == '=') {
  ------------------
  |  Branch (331:7): [True: 51.6k, False: 1.99M]
  ------------------
  332|  51.6k|    strncpy(out, src+1, LUA_IDSIZE);  /* Remove first char. */
  ------------------
  |  |  107|  51.6k|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  333|  51.6k|    out[LUA_IDSIZE-1] = '\0';  /* Ensures null termination. */
  ------------------
  |  |  107|  51.6k|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  334|  1.99M|  } else if (*src == '@') {  /* Output "source", or "...source". */
  ------------------
  |  Branch (334:14): [True: 881, False: 1.99M]
  ------------------
  335|    881|    size_t len = str->len-1;
  336|    881|    src++;  /* Skip the `@' */
  337|    881|    if (len >= LUA_IDSIZE) {
  ------------------
  |  |  107|    881|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (337:9): [True: 0, False: 881]
  ------------------
  338|      0|      src += len-(LUA_IDSIZE-4);  /* Get last part of file name. */
  ------------------
  |  |  107|      0|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  339|      0|      *out++ = '.'; *out++ = '.'; *out++ = '.';
  340|      0|    }
  341|    881|    strcpy(out, src);
  342|  1.99M|  } else {  /* Output [string "string"] or [builtin:name]. */
  343|  1.99M|    size_t len;  /* Length, up to first control char. */
  344|  27.9M|    for (len = 0; len < LUA_IDSIZE-12; len++)
  ------------------
  |  |  107|  27.9M|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (344:19): [True: 27.8M, False: 16.8k]
  ------------------
  345|  27.8M|      if (((const unsigned char *)src)[len] < ' ') break;
  ------------------
  |  Branch (345:11): [True: 1.97M, False: 25.9M]
  ------------------
  346|  1.99M|    strcpy(out, line == ~(BCLine)0 ? "[builtin:" : "[string \""); out += 9;
  ------------------
  |  Branch (346:17): [True: 0, False: 1.99M]
  ------------------
  347|  1.99M|    if (src[len] != '\0') {  /* Must truncate? */
  ------------------
  |  Branch (347:9): [True: 1.62M, False: 369k]
  ------------------
  348|  1.62M|      if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  107|  1.62M|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
                    if (len > LUA_IDSIZE-15) len = LUA_IDSIZE-15;
  ------------------
  |  |  107|  18.6k|#define LUA_IDSIZE	60	/* Size of lua_Debug.short_src. */
  ------------------
  |  Branch (348:11): [True: 18.6k, False: 1.60M]
  ------------------
  349|  1.62M|      strncpy(out, src, len); out += len;
  350|  1.62M|      strcpy(out, "..."); out += 3;
  351|  1.62M|    } else {
  352|   369k|      strcpy(out, src); out += len;
  353|   369k|    }
  354|  1.99M|    strcpy(out, line == ~(BCLine)0 ? "]" : "\"]");
  ------------------
  |  Branch (354:17): [True: 0, False: 1.99M]
  ------------------
  355|  1.99M|  }
  356|  2.04M|}
lj_debug_addloc:
  361|  2.03M|{
  362|  2.03M|  if (frame) {
  ------------------
  |  Branch (362:7): [True: 2.03M, False: 257]
  ------------------
  363|  2.03M|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|  2.03M|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|  2.03M|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|  2.03M|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|  2.03M|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|  2.03M|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  364|  2.03M|    if (isluafunc(fn)) {
  ------------------
  |  |  476|  2.03M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  2.03M|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 57.5k, False: 1.97M]
  |  |  ------------------
  ------------------
  365|  57.5k|      BCLine line = debug_frameline(L, fn, nextframe);
  366|  57.5k|      if (line >= 0) {
  ------------------
  |  Branch (366:11): [True: 57.5k, False: 0]
  ------------------
  367|  57.5k|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|  57.5k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  57.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  57.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  57.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 57.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  57.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  368|      0|	char buf[LUA_IDSIZE];
  369|  57.5k|	lj_debug_shortname(buf, proto_chunkname(pt), pt->firstline);
  ------------------
  |  |  424|  57.5k|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|  57.5k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  57.5k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  370|  57.5k|	lj_strfmt_pushf(L, "%s:%d: %s", buf, line, msg);
  371|  57.5k|	return;
  372|  57.5k|      }
  373|  57.5k|    }
  374|  2.03M|  }
  375|  1.97M|  lj_strfmt_pushf(L, "%s", msg);
  376|  1.97M|}
lj_debug_getinfo:
  434|    787|{
  435|    787|  int opt_f = 0, opt_L = 0;
  436|    787|  TValue *frame = NULL;
  437|    787|  TValue *nextframe = NULL;
  438|    787|  GCfunc *fn;
  439|    787|  if (*what == '>') {
  ------------------
  |  Branch (439:7): [True: 3, False: 784]
  ------------------
  440|      3|    TValue *func = L->top - 1;
  441|      3|    if (!tvisfunc(func)) return 0;
  ------------------
  |  |  796|      3|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      3|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (441:9): [True: 0, False: 3]
  ------------------
  442|      3|    fn = funcV(func);
  ------------------
  |  |  860|      3|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  443|      0|    L->top--;
  444|      3|    what++;
  445|    784|  } else {
  446|    784|    uint32_t offset = (uint32_t)ar->i_ci & 0xffff;
  447|    784|    uint32_t size = (uint32_t)ar->i_ci >> 16;
  448|    784|    lj_assertL(offset != 0, "bad frame offset");
  ------------------
  |  |  365|    784|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    784|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 784, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    784|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  449|    784|    frame = tvref(L->stack) + offset;
  ------------------
  |  |  217|    784|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    784|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|    784|    if (size) nextframe = frame + size;
  ------------------
  |  Branch (450:9): [True: 784, False: 0]
  ------------------
  451|    784|    lj_assertL(frame <= tvref(L->maxstack) &&
  ------------------
  |  |  365|    784|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.13k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 784]
  |  |  |  |  |  Branch (355:5): [True: 784, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 784, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    784|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  452|    784|	       (!nextframe || nextframe <= tvref(L->maxstack)),
  453|    784|	       "broken frame chain");
  454|    784|    fn = frame_func(frame);
  ------------------
  |  |   83|    784|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    784|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    784|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    784|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    784|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|    784|    lj_assertL(fn->c.gct == ~LJ_TFUNC, "bad frame function");
  ------------------
  |  |  365|    784|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    784|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 784, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    784|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  456|    784|  }
  457|  3.92k|  for (; *what; what++) {
  ------------------
  |  Branch (457:10): [True: 3.13k, False: 787]
  ------------------
  458|  3.13k|    if (*what == 'S') {
  ------------------
  |  Branch (458:9): [True: 787, False: 2.35k]
  ------------------
  459|    787|      if (isluafunc(fn)) {
  ------------------
  |  |  476|    787|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|    787|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 747, False: 40]
  |  |  ------------------
  ------------------
  460|    747|	GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|    747|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    747|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    747|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    747|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 747, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    747|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  461|      0|	BCLine firstline = pt->firstline;
  462|    747|	GCstr *name = proto_chunkname(pt);
  ------------------
  |  |  424|    747|#define proto_chunkname(pt)	(strref((pt)->chunkname))
  |  |  ------------------
  |  |  |  |  315|    747|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|    747|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  463|    747|	ar->source = strdata(name);
  ------------------
  |  |  316|    747|#define strdata(s)	((const char *)((s)+1))
  ------------------
  464|    747|	lj_debug_shortname(ar->short_src, name, pt->firstline);
  465|    747|	ar->linedefined = (int)firstline;
  466|    747|	ar->lastlinedefined = (int)(firstline + pt->numline);
  467|    747|	ar->what = (firstline || !pt->numline) ? "Lua" : "main";
  ------------------
  |  Branch (467:14): [True: 707, False: 40]
  |  Branch (467:27): [True: 0, False: 40]
  ------------------
  468|    747|      } else {
  469|     40|	ar->source = "=[C]";
  470|     40|	ar->short_src[0] = '[';
  471|     40|	ar->short_src[1] = 'C';
  472|     40|	ar->short_src[2] = ']';
  473|     40|	ar->short_src[3] = '\0';
  474|     40|	ar->linedefined = -1;
  475|     40|	ar->lastlinedefined = -1;
  476|     40|	ar->what = "C";
  477|     40|      }
  478|  2.35k|    } else if (*what == 'l') {
  ------------------
  |  Branch (478:16): [True: 784, False: 1.56k]
  ------------------
  479|    784|      ar->currentline = frame ? debug_frameline(L, fn, nextframe) : -1;
  ------------------
  |  Branch (479:25): [True: 784, False: 0]
  ------------------
  480|  1.56k|    } else if (*what == 'u') {
  ------------------
  |  Branch (480:16): [True: 0, False: 1.56k]
  ------------------
  481|      0|      ar->nups = fn->c.nupvalues;
  482|      0|      if (ext) {
  ------------------
  |  Branch (482:11): [True: 0, False: 0]
  ------------------
  483|      0|	if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  484|      0|	  GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  485|      0|	  ar->nparams = pt->numparams;
  486|      0|	  ar->isvararg = !!(pt->flags & PROTO_VARARG);
  ------------------
  |  |  400|      0|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  487|      0|	} else {
  488|      0|	  ar->nparams = 0;
  489|      0|	  ar->isvararg = 1;
  490|      0|	}
  491|      0|      }
  492|  1.56k|    } else if (*what == 'n') {
  ------------------
  |  Branch (492:16): [True: 784, False: 784]
  ------------------
  493|    784|      ar->namewhat = frame ? lj_debug_funcname(L, frame, &ar->name) : NULL;
  ------------------
  |  Branch (493:22): [True: 784, False: 0]
  ------------------
  494|    784|      if (ar->namewhat == NULL) {
  ------------------
  |  Branch (494:11): [True: 78, False: 706]
  ------------------
  495|     78|	ar->namewhat = "";
  496|     78|	ar->name = NULL;
  497|     78|      }
  498|    784|    } else if (*what == 'f') {
  ------------------
  |  Branch (498:16): [True: 784, False: 0]
  ------------------
  499|    784|      opt_f = 1;
  500|    784|    } else if (*what == 'L') {
  ------------------
  |  Branch (500:16): [True: 0, False: 0]
  ------------------
  501|      0|      opt_L = 1;
  502|      0|    } else {
  503|      0|      return 0;  /* Bad option. */
  504|      0|    }
  505|  3.13k|  }
  506|    787|  if (opt_f) {
  ------------------
  |  Branch (506:7): [True: 784, False: 3]
  ------------------
  507|    784|    setfuncV(L, L->top, fn);
  508|    784|    incr_top(L);
  ------------------
  |  |   12|    784|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  1.56k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    784|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 784]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  509|    784|  }
  510|    787|  if (opt_L) {
  ------------------
  |  Branch (510:7): [True: 0, False: 787]
  ------------------
  511|      0|    if (isluafunc(fn)) {
  ------------------
  |  |  476|      0|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|      0|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  512|      0|      GCtab *t = lj_tab_new(L, 0, 0);
  513|      0|      GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|      0|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  514|      0|      const void *lineinfo = proto_lineinfo(pt);
  ------------------
  |  |  426|      0|#define proto_lineinfo(pt)	(mref((pt)->lineinfo, const void))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  515|      0|      if (lineinfo) {
  ------------------
  |  Branch (515:11): [True: 0, False: 0]
  ------------------
  516|      0|	BCLine first = pt->firstline;
  517|      0|	int sz = pt->numline < 256 ? 1 : pt->numline < 65536 ? 2 : 4;
  ------------------
  |  Branch (517:11): [True: 0, False: 0]
  |  Branch (517:35): [True: 0, False: 0]
  ------------------
  518|      0|	MSize i, szl = pt->sizebc-1;
  519|      0|	for (i = 0; i < szl; i++) {
  ------------------
  |  Branch (519:14): [True: 0, False: 0]
  ------------------
  520|      0|	  BCLine line = first +
  521|      0|	    (sz == 1 ? (BCLine)((const uint8_t *)lineinfo)[i] :
  ------------------
  |  Branch (521:7): [True: 0, False: 0]
  ------------------
  522|      0|	     sz == 2 ? (BCLine)((const uint16_t *)lineinfo)[i] :
  ------------------
  |  Branch (522:7): [True: 0, False: 0]
  ------------------
  523|      0|	     (BCLine)((const uint32_t *)lineinfo)[i]);
  524|      0|	  setboolV(lj_tab_setint(L, t, line), 1);
  ------------------
  |  |  874|      0|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  |  |  ------------------
  |  |  |  Branch (874:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  525|      0|	}
  526|      0|      }
  527|      0|      settabV(L, L->top, t);
  528|      0|    } else {
  529|      0|      setnilV(L->top);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  530|      0|    }
  531|      0|    incr_top(L);
  ------------------
  |  |   12|      0|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 0]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  532|      0|  }
  533|    787|  return 1;  /* Ok. */
  534|    787|}
lua_getinfo:
  537|    784|{
  538|    784|  return lj_debug_getinfo(L, what, (lj_Debug *)ar, 0);
  539|    784|}
lua_getstack:
  542|    935|{
  543|    935|  int size;
  544|    935|  cTValue *frame = lj_debug_frame(L, level, &size);
  545|    935|  if (frame) {
  ------------------
  |  Branch (545:7): [True: 858, False: 77]
  ------------------
  546|    858|    ar->i_ci = (size << 16) + (int)(frame - tvref(L->stack));
  ------------------
  |  |  217|    858|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    858|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  547|    858|    return 1;
  548|    858|  } else {
  549|     77|    ar->i_ci = level - size;
  550|     77|    return 0;
  551|     77|  }
  552|    935|}
luaL_traceback:
  665|     40|{
  666|     40|  int top = (int)(L->top - L->base);
  667|     40|  int lim = TRACEBACK_LEVELS1;
  ------------------
  |  |  660|     40|#define TRACEBACK_LEVELS1	12
  ------------------
  668|     40|  lua_Debug ar;
  669|     40|  if (msg) lua_pushfstring(L, "%s\n", msg);
  ------------------
  |  Branch (669:7): [True: 40, False: 0]
  ------------------
  670|     40|  lua_pushliteral(L, "stack traceback:");
  ------------------
  |  |  276|     40|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  671|    861|  while (lua_getstack(L1, level++, &ar)) {
  ------------------
  |  Branch (671:10): [True: 821, False: 40]
  ------------------
  672|    821|    GCfunc *fn;
  673|    821|    if (level > lim) {
  ------------------
  |  Branch (673:9): [True: 37, False: 784]
  ------------------
  674|     37|      if (!lua_getstack(L1, level + TRACEBACK_LEVELS2, &ar)) {
  ------------------
  |  |  661|     37|#define TRACEBACK_LEVELS2	10
  ------------------
  |  Branch (674:11): [True: 0, False: 37]
  ------------------
  675|      0|	level--;
  676|     37|      } else {
  677|     37|	lua_pushliteral(L, "\n\t...");
  ------------------
  |  |  276|     37|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  678|     37|	lua_getstack(L1, -10, &ar);
  679|     37|	level = ar.i_ci - TRACEBACK_LEVELS2;
  ------------------
  |  |  661|     37|#define TRACEBACK_LEVELS2	10
  ------------------
  680|     37|      }
  681|     37|      lim = 2147483647;
  682|     37|      continue;
  683|     37|    }
  684|    784|    lua_getinfo(L1, "Snlf", &ar);
  685|    784|    fn = funcV(L1->top-1); L1->top--;
  ------------------
  |  |  860|    784|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|    784|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    784|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    784|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 784, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    784|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  686|    784|    if (isffunc(fn) && !*ar.namewhat)
  ------------------
  |  |  478|  1.56k|#define isffunc(fn)	((fn)->c.ffid > FF_C)
  |  |  ------------------
  |  |  |  |  475|    784|#define FF_C		1
  |  |  ------------------
  |  |  |  Branch (478:21): [True: 40, False: 744]
  |  |  ------------------
  ------------------
  |  Branch (686:24): [True: 0, False: 40]
  ------------------
  687|      0|      lua_pushfstring(L, "\n\t[builtin#%d]:", fn->c.ffid);
  688|    784|    else
  689|    784|      lua_pushfstring(L, "\n\t%s:", ar.short_src);
  690|    784|    if (ar.currentline > 0)
  ------------------
  |  Branch (690:9): [True: 744, False: 40]
  ------------------
  691|    744|      lua_pushfstring(L, "%d:", ar.currentline);
  692|    784|    if (*ar.namewhat) {
  ------------------
  |  Branch (692:9): [True: 706, False: 78]
  ------------------
  693|    706|      lua_pushfstring(L, " in function " LUA_QS, ar.name);
  ------------------
  |  |   88|    706|#define LUA_QS		LUA_QL("%s")
  |  |  ------------------
  |  |  |  |   87|    706|#define LUA_QL(x)	"'" x "'"
  |  |  ------------------
  ------------------
  694|    706|    } else {
  695|     78|      if (*ar.what == 'm') {
  ------------------
  |  Branch (695:11): [True: 40, False: 38]
  ------------------
  696|     40|	lua_pushliteral(L, " in main chunk");
  ------------------
  |  |  276|     40|	lua_pushlstring(L, "" s, (sizeof(s)/sizeof(char))-1)
  ------------------
  697|     40|      } else if (*ar.what == 'C') {
  ------------------
  |  Branch (697:18): [True: 0, False: 38]
  ------------------
  698|      0|	lua_pushfstring(L, " at %p", fn->c.f);
  699|     38|      } else {
  700|     38|	lua_pushfstring(L, " in function <%s:%d>",
  701|     38|			ar.short_src, ar.linedefined);
  702|     38|      }
  703|     78|    }
  704|    784|    if ((int)(L->top - L->base) - top >= 15)
  ------------------
  |  Branch (704:9): [True: 148, False: 636]
  ------------------
  705|    148|      lua_concat(L, (int)(L->top - L->base) - top);
  706|    784|  }
  707|     40|  lua_concat(L, (int)(L->top - L->base) - top);
  708|     40|}
lj_debug.c:debug_varname:
  152|  55.9k|{
  153|  55.9k|  const char *p = (const char *)proto_varinfo(pt);
  ------------------
  |  |  428|  55.9k|#define proto_varinfo(pt)	(mref((pt)->varinfo, const uint8_t))
  |  |  ------------------
  |  |  |  |   36|  55.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  154|  55.9k|  if (p) {
  ------------------
  |  Branch (154:7): [True: 55.9k, False: 0]
  ------------------
  155|  55.9k|    BCPos lastpc = 0;
  156|  65.5k|    for (;;) {
  157|  65.5k|      const char *name = p;
  158|  65.5k|      uint32_t vn = *(const uint8_t *)p;
  159|  65.5k|      BCPos startpc, endpc;
  160|  65.5k|      if (vn < VARNAME__MAX) {
  ------------------
  |  Branch (160:11): [True: 58.7k, False: 6.84k]
  ------------------
  161|  58.7k|	if (vn == VARNAME_END) break;  /* End of varinfo. */
  ------------------
  |  Branch (161:6): [True: 54.8k, False: 3.89k]
  ------------------
  162|  58.7k|      } else {
  163|  11.5k|	do { p++; } while (*(const uint8_t *)p);  /* Skip over variable name. */
  ------------------
  |  Branch (163:21): [True: 4.73k, False: 6.84k]
  ------------------
  164|  6.84k|      }
  165|  10.7k|      p++;
  166|  10.7k|      lastpc = startpc = lastpc + lj_buf_ruleb128(&p);
  167|  10.7k|      if (startpc > pc) break;
  ------------------
  |  Branch (167:11): [True: 1.06k, False: 9.67k]
  ------------------
  168|  9.67k|      endpc = startpc + lj_buf_ruleb128(&p);
  169|  9.67k|      if (pc < endpc && slot-- == 0) {
  ------------------
  |  Branch (169:11): [True: 4.35k, False: 5.31k]
  |  Branch (169:25): [True: 48, False: 4.30k]
  ------------------
  170|     48|	if (vn < VARNAME__MAX) {
  ------------------
  |  Branch (170:6): [True: 1, False: 47]
  ------------------
  171|      1|#define VARNAMESTR(name, str)	str "\0"
  172|      1|	  name = VARNAMEDEF(VARNAMESTR);
  ------------------
  |  |   51|      1|  _(FOR_IDX, "(for index)") \
  |  |  ------------------
  |  |  |  |  172|      1|	  name = VARNAMEDEF(VARNAMESTR);
  |  |  |  |  ------------------
  |  |  |  |  |  |  171|      1|#define VARNAMESTR(name, str)	str "\0"
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   52|      1|  _(FOR_STOP, "(for limit)") \
  |  |   53|      1|  _(FOR_STEP, "(for step)") \
  |  |   54|      1|  _(FOR_GEN, "(for generator)") \
  |  |   55|      1|  _(FOR_STATE, "(for state)") \
  |  |   56|      1|  _(FOR_CTL, "(for control)")
  |  |  ------------------
  |  |  |  |  172|      1|	  name = VARNAMEDEF(VARNAMESTR);
  |  |  |  |  ------------------
  |  |  |  |  |  |  171|      1|#define VARNAMESTR(name, str)	str "\0"
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|      1|#undef VARNAMESTR
  174|     35|	  if (--vn) while (*name++ || --vn) ;
  ------------------
  |  Branch (174:8): [True: 1, False: 0]
  |  Branch (174:21): [True: 32, False: 3]
  |  Branch (174:32): [True: 2, False: 1]
  ------------------
  175|      1|	}
  176|     48|	return name;
  177|     48|      }
  178|  9.67k|    }
  179|  55.9k|  }
  180|  55.8k|  return NULL;
  181|  55.9k|}
lj_debug.c:debug_framepc:
   54|  59.1k|{
   55|  59.1k|  const BCIns *ins;
   56|  59.1k|  GCproto *pt;
   57|  59.1k|  BCPos pos;
   58|  59.1k|  lj_assertL(fn->c.gct == ~LJ_TFUNC || fn->c.gct == ~LJ_TTHREAD,
  ------------------
  |  |  365|  59.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  59.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 59.1k, False: 40]
  |  |  |  |  |  Branch (355:5): [True: 40, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  59.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   59|  59.1k|	     "function or frame expected");
   60|  59.1k|  if (!isluafunc(fn)) {  /* Cannot derive a PC for non-Lua functions. */
  ------------------
  |  |  476|  59.1k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  59.1k|#define FF_LUA		0
  |  |  ------------------
  ------------------
  |  Branch (60:7): [True: 118, False: 59.0k]
  ------------------
   61|    118|    return NO_BCPOS;
  ------------------
  |  |   50|    118|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   62|  59.0k|  } else if (nextframe == NULL) {  /* Lua function on top. */
  ------------------
  |  Branch (62:14): [True: 55.9k, False: 3.13k]
  ------------------
   63|  55.9k|    void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|  55.9k|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|  55.9k|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|  55.9k|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|  55.9k|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|  55.9k|    if (cf == NULL || (char *)cframe_pc(cf) == (char *)cframe_L(cf))
  ------------------
  |  |  287|  55.9k|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|  55.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (cf == NULL || (char *)cframe_pc(cf) == (char *)cframe_L(cf))
  ------------------
  |  |  285|  55.9k|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|  55.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (64:9): [True: 0, False: 55.9k]
  |  Branch (64:23): [True: 0, False: 55.9k]
  ------------------
   65|      0|      return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   66|  55.9k|    ins = cframe_pc(cf);  /* Only happens during error/hook handling. */
  ------------------
  |  |  287|  55.9k|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|  55.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|  55.9k|    if (!ins) return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (67:9): [True: 0, False: 55.9k]
  ------------------
   68|  55.9k|  } else {
   69|  3.13k|    if (frame_islua(nextframe)) {
  ------------------
  |  |   77|  3.13k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  3.13k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  3.13k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  3.13k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 2.48k, False: 658]
  |  |  ------------------
  ------------------
   70|  2.48k|      ins = frame_pc(nextframe);
  ------------------
  |  |   48|  2.48k|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  ------------------
  |  |  |  |   47|  2.48k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
   71|  2.48k|    } else if (frame_iscont(nextframe)) {
  ------------------
  |  |   79|    658|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|    658|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    658|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    658|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    658|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    658|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 620, False: 38]
  |  |  ------------------
  ------------------
   72|    620|      ins = frame_contpc(nextframe);
  ------------------
  |  |   90|    620|#define frame_contpc(f)		(frame_pc((f)-2))
  |  |  ------------------
  |  |  |  |   48|    620|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    620|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   73|    620|    } else {
   74|       |      /* Lua function below errfunc/gc/hook: find cframe to get the PC. */
   75|     38|      void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|     38|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|     38|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|     38|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|     38|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   76|     38|      TValue *f = L->base-1;
   77|     76|      for (;;) {
   78|     76|	if (cf == NULL)
  ------------------
  |  Branch (78:6): [True: 0, False: 76]
  ------------------
   79|      0|	  return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   80|     76|	while (cframe_nres(cf) < 0) {
  ------------------
  |  |  280|     76|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|     76|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (80:9): [True: 0, False: 76]
  ------------------
   81|      0|	  if (f >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|      0|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (81:8): [True: 0, False: 0]
  ------------------
   82|      0|	    break;
   83|      0|	  cf = cframe_raw(cframe_prev(cf));
  ------------------
  |  |  294|      0|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|      0|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|      0|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|      0|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   84|      0|	  if (cf == NULL)
  ------------------
  |  Branch (84:8): [True: 0, False: 0]
  ------------------
   85|      0|	    return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
   86|      0|	}
   87|     76|	if (f < nextframe)
  ------------------
  |  Branch (87:6): [True: 38, False: 38]
  ------------------
   88|     38|	  break;
   89|     38|	if (frame_islua(f)) {
  ------------------
  |  |   77|     38|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|     38|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|     38|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|     38|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 0, False: 38]
  |  |  ------------------
  ------------------
   90|      0|	  f = frame_prevl(f);
  ------------------
  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
   91|     38|	} else {
   92|     38|	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |   78|     76|#define frame_isc(f)		(frame_type(f) == FRAME_C)
  |  |  ------------------
  |  |  |  |   75|     38|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|     38|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|     38|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (78:23): [True: 38, False: 0]
  |  |  ------------------
  ------------------
              	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |   79|      0|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|      0|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  if (frame_isc(f) || (frame_iscont(f) && frame_iscont_fficb(f)))
  ------------------
  |  |  106|      0|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|      0|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|      0|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   93|     38|	    cf = cframe_raw(cframe_prev(cf));
  ------------------
  |  |  294|     38|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|     38|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|     38|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|     38|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|     38|	  f = frame_prevd(f);
  ------------------
  |  |  109|     38|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|     38|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|     38|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|     38|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|     38|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|     38|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   95|     38|	}
   96|     38|      }
   97|     38|      ins = cframe_pc(cf);
  ------------------
  |  |  287|     38|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|     38|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   98|     38|      if (!ins) return NO_BCPOS;
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (98:11): [True: 0, False: 38]
  ------------------
   99|     38|    }
  100|  3.13k|  }
  101|  59.0k|  pt = funcproto(fn);
  ------------------
  |  |  480|  59.0k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  59.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  59.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  59.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 59.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  59.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  102|  59.0k|  pos = proto_bcpos(pt, ins) - 1;
  ------------------
  |  |  421|  59.0k|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|  59.0k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  103|  59.0k|#if LJ_HASJIT
  104|  59.0k|  if (pos > pt->sizebc) {  /* Undo the effects of lj_trace_exit for JLOOP. */
  ------------------
  |  Branch (104:7): [True: 0, False: 59.0k]
  ------------------
  105|      0|    if (bc_isret(bc_op(ins[-1]))) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (105:9): [True: 0, False: 0]
  ------------------
  106|      0|      GCtrace *T = (GCtrace *)((char *)(ins-1) - offsetof(GCtrace, startins));
  107|      0|      pos = proto_bcpos(pt, mref(T->startpc, const BCIns));
  ------------------
  |  |  421|      0|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|      0|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  108|      0|    } else {
  109|      0|      pos = NO_BCPOS;  /* Punt in case of stack overflow for stitched trace. */
  ------------------
  |  |   50|      0|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  110|      0|    }
  111|      0|  }
  112|  59.0k|#endif
  113|  59.0k|  return pos;
  114|  59.0k|}
lj_debug.c:debug_frameline:
  138|  58.2k|{
  139|  58.2k|  BCPos pc = debug_framepc(L, fn, nextframe);
  140|  58.2k|  if (pc != NO_BCPOS) {
  ------------------
  |  |   50|  58.2k|#define NO_BCPOS	(~(BCPos)0)
  ------------------
  |  Branch (140:7): [True: 58.2k, False: 40]
  ------------------
  141|  58.2k|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|  58.2k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  58.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  58.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  58.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 58.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  58.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|  58.2k|    lj_assertL(pc <= pt->sizebc, "PC out of range");
  ------------------
  |  |  365|  58.2k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  58.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 58.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  58.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  143|  58.2k|    return lj_debug_line(pt, pc);
  144|  58.2k|  }
  145|     40|  return -1;
  146|  58.2k|}

lj_str.c:lj_bswap:
  181|  1.82M|{
  182|  1.82M|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|  1.82M|}
lj_str.c:lj_getu32:
  237|  3.22G|{
  238|  3.22G|  return ((const Unaligned32 *)p)->u;
  239|  3.22G|}
lj_asm.c:lj_bswap:
  181|   436k|{
  182|   436k|  return (uint32_t)__builtin_bswap32((int32_t)x);
  183|   436k|}

lj_dispatch_init:
   61|  13.6k|{
   62|  13.6k|  uint32_t i;
   63|  13.6k|  ASMFunction *disp = GG->dispatch;
   64|  1.23M|  for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  1.23M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (64:15): [True: 1.21M, False: 13.6k]
  ------------------
   65|  1.21M|    disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |   84|  1.21M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  1.21M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
                  disp[GG_LEN_DDISP+i] = disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  1.21M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  1.21M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   66|   903k|  for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  13.6k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
                for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|   903k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|   903k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (66:26): [True: 890k, False: 13.6k]
  ------------------
   67|   890k|    disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|   890k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|   890k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
   68|       |  /* The JIT engine is off by default. luaopen_jit() turns it on. */
   69|  13.6k|  disp[BC_FORL] = disp[BC_IFORL];
   70|  13.6k|  disp[BC_ITERL] = disp[BC_IITERL];
   71|       |  /* Workaround for stable v2.1 bytecode. TODO: Replace with BC_IITERN. */
   72|  13.6k|  disp[BC_ITERN] = &lj_vm_IITERN;
   73|  13.6k|  disp[BC_LOOP] = disp[BC_ILOOP];
   74|  13.6k|  disp[BC_FUNCF] = disp[BC_IFUNCF];
   75|  13.6k|  disp[BC_FUNCV] = disp[BC_IFUNCV];
   76|  13.6k|  GG->g.bc_cfunc_ext = GG->g.bc_cfunc_int = BCINS_AD(BC_FUNCC, LUA_MINSTACK, 0);
  ------------------
  |  |   56|  13.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   77|   794k|  for (i = 0; i < GG_NUM_ASMFF; i++)
  ------------------
  |  |   82|   794k|#define GG_NUM_ASMFF	57
  ------------------
  |  Branch (77:15): [True: 780k, False: 13.6k]
  ------------------
   78|   780k|    GG->bcff[i] = BCINS_AD(BC__MAX+i, 0, 0);
  ------------------
  |  |   56|   780k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
   79|       |#if LJ_TARGET_MIPS
   80|       |  memcpy(GG->got, dispatch_got, LJ_GOT__MAX*sizeof(ASMFunction *));
   81|       |#endif
   82|  13.6k|}
lj_dispatch_init_hotcount:
   87|  13.6k|{
   88|  13.6k|  int32_t hotloop = G2J(g)->param[JIT_P_hotloop];
  ------------------
  |  |  116|  13.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   89|  13.6k|  HotCount start = (HotCount)(hotloop*HOTCOUNT_LOOP - 1);
  ------------------
  |  |   78|  13.6k|#define HOTCOUNT_LOOP		2
  ------------------
   90|  13.6k|  HotCount *hotcount = G2GG(g)->hotcount;
  ------------------
  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
   91|  13.6k|  uint32_t i;
   92|   890k|  for (i = 0; i < HOTCOUNT_SIZE; i++)
  ------------------
  |  |   74|   890k|#define HOTCOUNT_SIZE		64
  ------------------
  |  Branch (92:15): [True: 876k, False: 13.6k]
  ------------------
   93|   876k|    hotcount[i] = start;
   94|  13.6k|}
lj_dispatch_update:
  107|  79.5k|{
  108|  79.5k|  uint8_t oldmode = g->dispatchmode;
  109|  79.5k|  uint8_t mode = 0;
  110|  79.5k|#if LJ_HASJIT
  111|  79.5k|  mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  116|  79.5k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  79.5k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  79.5k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |   16|  79.5k|#define JIT_F_ON		0x00000001
  ------------------
                mode |= (G2J(g)->flags & JIT_F_ON) ? DISPMODE_JIT : 0;
  ------------------
  |  |  101|  65.8k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (111:11): [True: 65.8k, False: 13.6k]
  ------------------
  112|  79.5k|  mode |= G2J(g)->state != LJ_TRACE_IDLE ?
  ------------------
  |  |  116|  79.5k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  79.5k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  79.5k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (112:11): [True: 25.9k, False: 53.5k]
  ------------------
  113|  53.5k|	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  102|  25.9k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |  100|  25.9k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
              	    (DISPMODE_REC|DISPMODE_INS|DISPMODE_CALL) : 0;
  ------------------
  |  |   98|  25.9k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  114|  79.5k|#endif
  115|  79.5k|#if LJ_HASPROFILE
  116|  79.5k|  mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  677|  79.5k|#define HOOK_PROFILE		0x80
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  103|      0|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                mode |= (g->hookmask & HOOK_PROFILE) ? (DISPMODE_PROF|DISPMODE_INS) : 0;
  ------------------
  |  |  100|      0|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (116:11): [True: 0, False: 79.5k]
  ------------------
  117|  79.5k|#endif
  118|  79.5k|  mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  325|  79.5k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|  79.5k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  326|  79.5k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|  79.5k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & (LUA_MASKLINE|LUA_MASKCOUNT)) ? DISPMODE_INS : 0;
  ------------------
  |  |  100|  1.09k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (118:11): [True: 1.09k, False: 78.4k]
  ------------------
  119|  79.5k|  mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |  323|  79.5k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  79.5k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKCALL) ? DISPMODE_CALL : 0;
  ------------------
  |  |   98|     10|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (119:11): [True: 10, False: 79.5k]
  ------------------
  120|  79.5k|  mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |  324|  79.5k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|  79.5k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                mode |= (g->hookmask & LUA_MASKRET) ? DISPMODE_RET : 0;
  ------------------
  |  |   99|      0|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (120:11): [True: 0, False: 79.5k]
  ------------------
  121|  79.5k|  if (oldmode != mode) {  /* Mode changed? */
  ------------------
  |  Branch (121:7): [True: 79.4k, False: 82]
  ------------------
  122|  79.4k|    ASMFunction *disp = G2GG(g)->dispatch;
  ------------------
  |  |  112|  79.4k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|  79.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  123|  79.4k|    ASMFunction f_forl, f_iterl, f_itern, f_loop, f_funcf, f_funcv;
  124|  79.4k|    g->dispatchmode = mode;
  125|       |
  126|       |    /* Hotcount if JIT is on, but not while recording. */
  127|  79.4k|    if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  79.4k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  102|  79.4k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((mode & (DISPMODE_JIT|DISPMODE_REC)) == DISPMODE_JIT) {
  ------------------
  |  |  101|  79.4k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (127:9): [True: 39.8k, False: 39.6k]
  ------------------
  128|  39.8k|      f_forl = makeasmfunc(lj_bc_ofs[BC_FORL]);
  ------------------
  |  |  114|  39.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  129|  39.8k|      f_iterl = makeasmfunc(lj_bc_ofs[BC_ITERL]);
  ------------------
  |  |  114|  39.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  130|  39.8k|      f_itern = makeasmfunc(lj_bc_ofs[BC_ITERN]);
  ------------------
  |  |  114|  39.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  131|  39.8k|      f_loop = makeasmfunc(lj_bc_ofs[BC_LOOP]);
  ------------------
  |  |  114|  39.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  132|  39.8k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_FUNCF]);
  ------------------
  |  |  114|  39.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  133|  39.8k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_FUNCV]);
  ------------------
  |  |  114|  39.8k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.8k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  134|  39.8k|    } else {  /* Otherwise use the non-hotcounting instructions. */
  135|  39.6k|      f_forl = disp[GG_LEN_DDISP+BC_IFORL];
  ------------------
  |  |   84|  39.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  39.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  136|  39.6k|      f_iterl = disp[GG_LEN_DDISP+BC_IITERL];
  ------------------
  |  |   84|  39.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  39.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  137|  39.6k|      f_itern = &lj_vm_IITERN;
  138|  39.6k|      f_loop = disp[GG_LEN_DDISP+BC_ILOOP];
  ------------------
  |  |   84|  39.6k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  39.6k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  139|  39.6k|      f_funcf = makeasmfunc(lj_bc_ofs[BC_IFUNCF]);
  ------------------
  |  |  114|  39.6k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.6k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  140|  39.6k|      f_funcv = makeasmfunc(lj_bc_ofs[BC_IFUNCV]);
  ------------------
  |  |  114|  39.6k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  39.6k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  141|  39.6k|    }
  142|       |    /* Init static counting instruction dispatch first (may be copied below). */
  143|  79.4k|    disp[GG_LEN_DDISP+BC_FORL] = f_forl;
  ------------------
  |  |   84|  79.4k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  79.4k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  144|  79.4k|    disp[GG_LEN_DDISP+BC_ITERL] = f_iterl;
  ------------------
  |  |   84|  79.4k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  79.4k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  145|  79.4k|    disp[GG_LEN_DDISP+BC_ITERN] = f_itern;
  ------------------
  |  |   84|  79.4k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  79.4k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  146|  79.4k|    disp[GG_LEN_DDISP+BC_LOOP] = f_loop;
  ------------------
  |  |   84|  79.4k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  79.4k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  147|       |
  148|       |    /* Set dynamic instruction dispatch. */
  149|  79.4k|    if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  103|  79.4k|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  102|  79.4k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
                  if ((oldmode ^ mode) & (DISPMODE_PROF|DISPMODE_REC|DISPMODE_INS)) {
  ------------------
  |  |  100|  79.4k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (149:9): [True: 52.0k, False: 27.3k]
  ------------------
  150|       |      /* Need to update the whole table. */
  151|  52.0k|      if (!(mode & DISPMODE_INS)) {  /* No ins dispatch? */
  ------------------
  |  |  100|  52.0k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (151:11): [True: 25.5k, False: 26.4k]
  ------------------
  152|       |	/* Copy static dispatch table to dynamic dispatch table. */
  153|  25.5k|	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   84|  25.5k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  25.5k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
              	memcpy(&disp[0], &disp[GG_LEN_DDISP], GG_LEN_SDISP*sizeof(ASMFunction));
  ------------------
  |  |   85|  25.5k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  154|       |	/* Overwrite with dynamic return dispatch. */
  155|  25.5k|	if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|  25.5k|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (155:6): [True: 0, False: 25.5k]
  ------------------
  156|      0|	  disp[BC_RETM] = lj_vm_rethook;
  157|      0|	  disp[BC_RET] = lj_vm_rethook;
  158|      0|	  disp[BC_RET0] = lj_vm_rethook;
  159|      0|	  disp[BC_RET1] = lj_vm_rethook;
  160|      0|	}
  161|  26.4k|      } else {
  162|       |	/* The recording dispatch also checks for hooks. */
  163|  26.4k|	ASMFunction f = (mode & DISPMODE_PROF) ? lj_vm_profhook :
  ------------------
  |  |  103|  26.4k|#define DISPMODE_PROF	0x40	/* Profiling active. */
  ------------------
  |  Branch (163:18): [True: 0, False: 26.4k]
  ------------------
  164|  26.4k|			(mode & DISPMODE_REC) ? lj_vm_record : lj_vm_inshook;
  ------------------
  |  |  102|  26.4k|#define DISPMODE_REC	0x20	/* Recording active. */
  ------------------
  |  Branch (164:4): [True: 25.9k, False: 534]
  ------------------
  165|  26.4k|	uint32_t i;
  166|  2.38M|	for (i = 0; i < GG_LEN_SDISP; i++)
  ------------------
  |  |   85|  2.38M|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
  |  Branch (166:14): [True: 2.35M, False: 26.4k]
  ------------------
  167|  2.35M|	  disp[i] = f;
  168|  26.4k|      }
  169|  52.0k|    } else if (!(mode & DISPMODE_INS)) {
  ------------------
  |  |  100|  27.3k|#define DISPMODE_INS	0x04	/* Override instruction dispatch. */
  ------------------
  |  Branch (169:16): [True: 27.2k, False: 100]
  ------------------
  170|       |      /* Otherwise set dynamic counting ins. */
  171|  27.2k|      disp[BC_FORL] = f_forl;
  172|  27.2k|      disp[BC_ITERL] = f_iterl;
  173|  27.2k|      disp[BC_ITERN] = f_itern;
  174|  27.2k|      disp[BC_LOOP] = f_loop;
  175|       |      /* Set dynamic return dispatch. */
  176|  27.2k|      if ((mode & DISPMODE_RET)) {
  ------------------
  |  |   99|  27.2k|#define DISPMODE_RET	0x02	/* Override return dispatch. */
  ------------------
  |  Branch (176:11): [True: 0, False: 27.2k]
  ------------------
  177|      0|	disp[BC_RETM] = lj_vm_rethook;
  178|      0|	disp[BC_RET] = lj_vm_rethook;
  179|      0|	disp[BC_RET0] = lj_vm_rethook;
  180|      0|	disp[BC_RET1] = lj_vm_rethook;
  181|  27.2k|      } else {
  182|  27.2k|	disp[BC_RETM] = disp[GG_LEN_DDISP+BC_RETM];
  ------------------
  |  |   84|  27.2k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  27.2k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  183|  27.2k|	disp[BC_RET] = disp[GG_LEN_DDISP+BC_RET];
  ------------------
  |  |   84|  27.2k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  27.2k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  184|  27.2k|	disp[BC_RET0] = disp[GG_LEN_DDISP+BC_RET0];
  ------------------
  |  |   84|  27.2k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  27.2k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  185|  27.2k|	disp[BC_RET1] = disp[GG_LEN_DDISP+BC_RET1];
  ------------------
  |  |   84|  27.2k|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  27.2k|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  186|  27.2k|      }
  187|  27.2k|    }
  188|       |
  189|       |    /* Set dynamic call dispatch. */
  190|  79.4k|    if ((oldmode ^ mode) & DISPMODE_CALL) {  /* Update the whole table? */
  ------------------
  |  |   98|  79.4k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (190:9): [True: 51.8k, False: 27.5k]
  ------------------
  191|  51.8k|      uint32_t i;
  192|  51.8k|      if ((mode & DISPMODE_CALL) == 0) {  /* No call hooks? */
  ------------------
  |  |   98|  51.8k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (192:11): [True: 25.9k, False: 25.9k]
  ------------------
  193|  1.71M|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  25.9k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  1.71M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  1.71M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (193:25): [True: 1.68M, False: 25.9k]
  ------------------
  194|  1.68M|	  disp[i] = makeasmfunc(lj_bc_ofs[i]);
  ------------------
  |  |  114|  1.68M|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  1.68M|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  195|  25.9k|      } else {
  196|  1.71M|	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   85|  25.9k|#define GG_LEN_SDISP	BC_FUNCF
  ------------------
              	for (i = GG_LEN_SDISP; i < GG_LEN_DDISP; i++)
  ------------------
  |  |   84|  1.71M|#define GG_LEN_DDISP	(BC__MAX + GG_NUM_ASMFF)
  |  |  ------------------
  |  |  |  |   82|  1.71M|#define GG_NUM_ASMFF	57
  |  |  ------------------
  ------------------
  |  Branch (196:25): [True: 1.68M, False: 25.9k]
  ------------------
  197|  1.68M|	  disp[i] = lj_vm_callhook;
  198|  25.9k|      }
  199|  51.8k|    }
  200|  79.4k|    if (!(mode & DISPMODE_CALL)) {  /* Overwrite dynamic counting ins. */
  ------------------
  |  |   98|  79.4k|#define DISPMODE_CALL	0x01	/* Override call dispatch. */
  ------------------
  |  Branch (200:9): [True: 53.5k, False: 25.9k]
  ------------------
  201|  53.5k|      disp[BC_FUNCF] = f_funcf;
  202|  53.5k|      disp[BC_FUNCV] = f_funcv;
  203|  53.5k|    }
  204|       |
  205|  79.4k|#if LJ_HASJIT
  206|       |    /* Reset hotcounts for JIT off to on transition. */
  207|  79.4k|    if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  79.4k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
                  if ((mode & DISPMODE_JIT) && !(oldmode & DISPMODE_JIT))
  ------------------
  |  |  101|  65.7k|#define DISPMODE_JIT	0x10	/* JIT compiler on. */
  ------------------
  |  Branch (207:9): [True: 65.7k, False: 13.6k]
  |  Branch (207:34): [True: 13.6k, False: 52.0k]
  ------------------
  208|  13.6k|      lj_dispatch_init_hotcount(g);
  209|  79.4k|#endif
  210|  79.4k|  }
  211|  79.5k|}
luaJIT_setmode:
  246|  1.72k|{
  247|  1.72k|  global_State *g = G(L);
  ------------------
  |  |  705|  1.72k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.72k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  248|  1.72k|  int mm = mode & LUAJIT_MODE_MASK;
  ------------------
  |  |   40|  1.72k|#define LUAJIT_MODE_MASK	0x00ff
  ------------------
  249|  1.72k|  lj_trace_abort(g);  /* Abort recording on any state change. */
  ------------------
  |  |   45|  1.72k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  1.72k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  1.72k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  1.72k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  250|       |  /* Avoid pulling the rug from under our own feet. */
  251|  1.72k|  if ((g->hookmask & HOOK_GC))
  ------------------
  |  |  676|  1.72k|#define HOOK_GC			0x40
  ------------------
  |  Branch (251:7): [True: 0, False: 1.72k]
  ------------------
  252|      0|    lj_err_caller(L, LJ_ERR_NOGCMM);
  253|  1.72k|  switch (mm) {
  254|      0|#if LJ_HASJIT
  255|  1.16k|  case LUAJIT_MODE_ENGINE:
  ------------------
  |  Branch (255:3): [True: 1.16k, False: 557]
  ------------------
  256|  1.16k|    if ((mode & LUAJIT_MODE_FLUSH)) {
  ------------------
  |  |   60|  1.16k|#define LUAJIT_MODE_FLUSH	0x0200	/* Flush JIT-compiled code. */
  ------------------
  |  Branch (256:9): [True: 1.16k, False: 2]
  ------------------
  257|  1.16k|      lj_trace_flushall(L);
  258|  1.16k|    } else {
  259|      2|      if (!(mode & LUAJIT_MODE_ON))
  ------------------
  |  |   59|      2|#define LUAJIT_MODE_ON		0x0100	/* Turn feature on. */
  ------------------
  |  Branch (259:11): [True: 2, False: 0]
  ------------------
  260|      2|	G2J(g)->flags &= ~(uint32_t)JIT_F_ON;
  ------------------
  |  |  116|      2|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      2|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      2|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	G2J(g)->flags &= ~(uint32_t)JIT_F_ON;
  ------------------
  |  |   16|      2|#define JIT_F_ON		0x00000001
  ------------------
  261|      0|      else
  262|      0|	G2J(g)->flags |= (uint32_t)JIT_F_ON;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	G2J(g)->flags |= (uint32_t)JIT_F_ON;
  ------------------
  |  |   16|      0|#define JIT_F_ON		0x00000001
  ------------------
  263|      2|      lj_dispatch_update(g);
  264|      2|    }
  265|  1.16k|    break;
  266|     90|  case LUAJIT_MODE_FUNC:
  ------------------
  |  Branch (266:3): [True: 90, False: 1.63k]
  ------------------
  267|     90|  case LUAJIT_MODE_ALLFUNC:
  ------------------
  |  Branch (267:3): [True: 0, False: 1.72k]
  ------------------
  268|     90|  case LUAJIT_MODE_ALLSUBFUNC: {
  ------------------
  |  Branch (268:3): [True: 0, False: 1.72k]
  ------------------
  269|     90|    cTValue *tv = idx == 0 ? frame_prev(L->base-1)-LJ_FR2 :
  ------------------
  |  |  110|      0|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|      0|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|      0|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|      0|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|      0|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  cTValue *tv = idx == 0 ? frame_prev(L->base-1)-LJ_FR2 :
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (269:19): [True: 0, False: 90]
  ------------------
  270|     90|		  idx > 0 ? L->base + (idx-1) : L->top + idx;
  ------------------
  |  Branch (270:5): [True: 90, False: 0]
  ------------------
  271|     90|    GCproto *pt;
  272|     90|    if ((idx == 0 || tvisfunc(tv)) && isluafunc(&gcval(tv)->fn))
  ------------------
  |  |  796|     90|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     90|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     90|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 90, False: 0]
  |  |  ------------------
  ------------------
                  if ((idx == 0 || tvisfunc(tv)) && isluafunc(&gcval(tv)->fn))
  ------------------
  |  |  476|     90|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|     90|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 90, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (272:10): [True: 0, False: 90]
  ------------------
  273|     90|      pt = funcproto(&gcval(tv)->fn);  /* Cannot use funcV() for frame slot. */
  ------------------
  |  |  480|     90|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|     90|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     90|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     90|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 90, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     90|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  274|      0|    else if (tvisproto(tv))
  ------------------
  |  |  798|      0|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|      0|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  275|      0|      pt = protoV(tv);
  ------------------
  |  |  862|      0|#define protoV(o)	check_exp(tvisproto(o), &gcval(o)->pt)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  276|      0|    else
  277|      0|      return 0;  /* Failed. */
  278|     90|    if (mm != LUAJIT_MODE_ALLSUBFUNC)
  ------------------
  |  Branch (278:9): [True: 90, False: 0]
  ------------------
  279|     90|      setptmode(g, pt, mode);
  280|     90|    if (mm != LUAJIT_MODE_FUNC)
  ------------------
  |  Branch (280:9): [True: 0, False: 90]
  ------------------
  281|      0|      setptmode_all(g, pt, mode);
  282|     90|    break;
  283|     90|    }
  284|    467|  case LUAJIT_MODE_TRACE:
  ------------------
  |  Branch (284:3): [True: 467, False: 1.25k]
  ------------------
  285|    467|    if (!(mode & LUAJIT_MODE_FLUSH))
  ------------------
  |  |   60|    467|#define LUAJIT_MODE_FLUSH	0x0200	/* Flush JIT-compiled code. */
  ------------------
  |  Branch (285:9): [True: 0, False: 467]
  ------------------
  286|      0|      return 0;  /* Failed. */
  287|    467|    lj_trace_flush(G2J(g), idx);
  ------------------
  |  |  116|    467|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|    467|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|    467|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  288|    467|    break;
  289|       |#else
  290|       |  case LUAJIT_MODE_ENGINE:
  291|       |  case LUAJIT_MODE_FUNC:
  292|       |  case LUAJIT_MODE_ALLFUNC:
  293|       |  case LUAJIT_MODE_ALLSUBFUNC:
  294|       |    UNUSED(idx);
  295|       |    if ((mode & LUAJIT_MODE_ON))
  296|       |      return 0;  /* Failed. */
  297|       |    break;
  298|       |#endif
  299|      0|  case LUAJIT_MODE_WRAPCFUNC:
  ------------------
  |  Branch (299:3): [True: 0, False: 1.72k]
  ------------------
  300|      0|    if ((mode & LUAJIT_MODE_ON)) {
  ------------------
  |  |   59|      0|#define LUAJIT_MODE_ON		0x0100	/* Turn feature on. */
  ------------------
  |  Branch (300:9): [True: 0, False: 0]
  ------------------
  301|      0|      if (idx != 0) {
  ------------------
  |  Branch (301:11): [True: 0, False: 0]
  ------------------
  302|      0|	cTValue *tv = idx > 0 ? L->base + (idx-1) : L->top + idx;
  ------------------
  |  Branch (302:16): [True: 0, False: 0]
  ------------------
  303|      0|	if (tvislightud(tv))
  ------------------
  |  |  793|      0|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|      0|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (793:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  304|      0|	  g->wrapf = (lua_CFunction)lightudV(g, tv);
  305|      0|	else
  306|      0|	  return 0;  /* Failed. */
  307|      0|      } else {
  308|      0|	return 0;  /* Failed. */
  309|      0|      }
  310|      0|      setbc_op(&g->bc_cfunc_ext, BC_FUNCCW);
  ------------------
  |  |   44|      0|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|      0|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  311|      0|    } else {
  312|      0|      setbc_op(&g->bc_cfunc_ext, BC_FUNCC);
  ------------------
  |  |   44|      0|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|      0|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|      0|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|      0|    }
  314|      0|    break;
  315|      0|  default:
  ------------------
  |  Branch (315:3): [True: 0, False: 1.72k]
  ------------------
  316|      0|    return 0;  /* Failed. */
  317|  1.72k|  }
  318|  1.72k|  return 1;  /* OK. */
  319|  1.72k|}
lua_sethook:
  330|    203|{
  331|    203|  global_State *g = G(L);
  ------------------
  |  |  705|    203|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    203|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  332|    203|  mask &= HOOK_EVENTMASK;
  ------------------
  |  |  672|    203|#define HOOK_EVENTMASK		0x0f
  ------------------
  333|    203|  if (func == NULL || mask == 0) { mask = 0; func = NULL; }  /* Consistency. */
  ------------------
  |  Branch (333:7): [True: 42, False: 161]
  |  Branch (333:23): [True: 9, False: 152]
  ------------------
  334|    203|  g->hookf = func;
  335|    203|  g->hookcount = g->hookcstart = (int32_t)count;
  336|    203|  g->hookmask = (uint8_t)((g->hookmask & ~HOOK_EVENTMASK) | mask);
  ------------------
  |  |  672|    203|#define HOOK_EVENTMASK		0x0f
  ------------------
  337|    203|  lj_trace_abort(g);  /* Abort recording on any hook change. */
  ------------------
  |  |   45|    203|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|    203|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|    203|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|    203|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|    203|  lj_dispatch_update(g);
  339|    203|  return 1;
  340|    203|}
lj_dispatch_ins:
  404|   772k|{
  405|   772k|  ERRNO_SAVE
  ------------------
  |  |  156|   772k|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  406|   772k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|   772k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|   772k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|   772k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|   772k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  407|   772k|  GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|   772k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|   772k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   772k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   772k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 772k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   772k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|   772k|  void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|   772k|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|   772k|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|   772k|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|   772k|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  409|   772k|  const BCIns *oldpc = cframe_pc(cf);
  ------------------
  |  |  287|   772k|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|   772k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  410|   772k|  global_State *g = G(L);
  ------------------
  |  |  705|   772k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   772k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  411|   772k|  BCReg slots;
  412|   772k|  setcframe_pc(cf, pc);
  ------------------
  |  |  291|   772k|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|   772k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  413|   772k|  slots = cur_topslot(pt, pc, cframe_multres_n(cf));
  ------------------
  |  |  283|   772k|#define cframe_multres_n(cf)	(cframe_multres((cf)) >> CFRAME_SHIFT_MULTRES)
  |  |  ------------------
  |  |  |  |  282|   772k|#define cframe_multres(cf)  (*(uint32_t *)(((char *)(cf))+CFRAME_OFS_MULTRES))
  |  |  |  |  ------------------
  |  |  |  |  |  |  165|   772k|#define CFRAME_OFS_MULTRES	(0*4)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define cframe_multres_n(cf)	(cframe_multres((cf)) >> CFRAME_SHIFT_MULTRES)
  |  |  ------------------
  |  |  |  |  179|   772k|#define CFRAME_SHIFT_MULTRES	0
  |  |  ------------------
  ------------------
  414|   772k|  L->top = L->base + slots;  /* Fix top. */
  415|   772k|#if LJ_HASJIT
  416|   772k|  {
  417|   772k|    jit_State *J = G2J(g);
  ------------------
  |  |  116|   772k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|   772k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|   772k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  418|   772k|    if (J->state != LJ_TRACE_IDLE) {
  ------------------
  |  Branch (418:9): [True: 424k, False: 348k]
  ------------------
  419|   424k|#ifdef LUA_USE_ASSERT
  420|   424k|      ptrdiff_t delta = L->top - L->base;
  421|   424k|#endif
  422|   424k|      J->L = L;
  423|   424k|      lj_trace_ins(J, pc-1);  /* The interpreter bytecode PC is offset by 1. */
  424|   424k|      lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|   424k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   424k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 424k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   424k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  425|   424k|		 "unbalanced stack after tracing of instruction");
  426|   424k|    }
  427|   772k|  }
  428|   772k|#endif
  429|   772k|  if ((g->hookmask & LUA_MASKCOUNT) && g->hookcount == 0) {
  ------------------
  |  |  326|   772k|#define LUA_MASKCOUNT	(1 << LUA_HOOKCOUNT)
  |  |  ------------------
  |  |  |  |  316|   772k|#define LUA_HOOKCOUNT	3
  |  |  ------------------
  ------------------
  |  Branch (429:7): [True: 349k, False: 422k]
  |  Branch (429:40): [True: 348k, False: 770]
  ------------------
  430|   348k|    g->hookcount = g->hookcstart;
  431|   348k|    callhook(L, LUA_HOOKCOUNT, -1);
  ------------------
  |  |  316|   348k|#define LUA_HOOKCOUNT	3
  ------------------
  432|   348k|    L->top = L->base + slots;  /* Fix top again. */
  433|   348k|  }
  434|   772k|  if ((g->hookmask & LUA_MASKLINE)) {
  ------------------
  |  |  325|   772k|#define LUA_MASKLINE	(1 << LUA_HOOKLINE)
  |  |  ------------------
  |  |  |  |  315|   772k|#define LUA_HOOKLINE	2
  |  |  ------------------
  ------------------
  |  Branch (434:7): [True: 0, False: 772k]
  ------------------
  435|      0|    BCPos npc = proto_bcpos(pt, pc) - 1;
  ------------------
  |  |  421|      0|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|      0|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  436|      0|    BCPos opc = proto_bcpos(pt, oldpc) - 1;
  ------------------
  |  |  421|      0|#define proto_bcpos(pt, pc)	((BCPos)((pc) - proto_bc(pt)))
  |  |  ------------------
  |  |  |  |  420|      0|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  |  |  ------------------
  ------------------
  437|      0|    BCLine line = lj_debug_line(pt, npc);
  438|      0|    if (pc <= oldpc || opc >= pt->sizebc || line != lj_debug_line(pt, opc)) {
  ------------------
  |  Branch (438:9): [True: 0, False: 0]
  |  Branch (438:24): [True: 0, False: 0]
  |  Branch (438:45): [True: 0, False: 0]
  ------------------
  439|      0|      callhook(L, LUA_HOOKLINE, line);
  ------------------
  |  |  315|      0|#define LUA_HOOKLINE	2
  ------------------
  440|      0|      L->top = L->base + slots;  /* Fix top again. */
  441|      0|    }
  442|      0|  }
  443|   772k|  if ((g->hookmask & LUA_MASKRET) && bc_isret(bc_op(pc[-1])))
  ------------------
  |  |  324|   772k|#define LUA_MASKRET	(1 << LUA_HOOKRET)
  |  |  ------------------
  |  |  |  |  314|   772k|#define LUA_HOOKRET	1
  |  |  ------------------
  ------------------
                if ((g->hookmask & LUA_MASKRET) && bc_isret(bc_op(pc[-1])))
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (443:7): [True: 0, False: 772k]
  |  Branch (443:38): [True: 0, False: 0]
  ------------------
  444|      0|    callhook(L, LUA_HOOKRET, -1);
  ------------------
  |  |  314|      0|#define LUA_HOOKRET	1
  ------------------
  445|   772k|  ERRNO_RESTORE
  ------------------
  |  |  157|   772k|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  446|   772k|}
lj_dispatch_call:
  468|  69.4k|{
  469|  69.4k|  ERRNO_SAVE
  ------------------
  |  |  156|  69.4k|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  470|  69.4k|  GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|  69.4k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|  69.4k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|  69.4k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|  69.4k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  471|  69.4k|  BCOp op;
  472|  69.4k|  global_State *g = G(L);
  ------------------
  |  |  705|  69.4k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  69.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  473|  69.4k|#if LJ_HASJIT
  474|  69.4k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  69.4k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  69.4k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  69.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  475|  69.4k|#endif
  476|  69.4k|  int missing = call_init(L, fn);
  477|  69.4k|#if LJ_HASJIT
  478|  69.4k|  J->L = L;
  479|  69.4k|  if ((uintptr_t)pc & 1) {  /* Marker for hot call. */
  ------------------
  |  Branch (479:7): [True: 7.11k, False: 62.3k]
  ------------------
  480|  7.11k|#ifdef LUA_USE_ASSERT
  481|  7.11k|    ptrdiff_t delta = L->top - L->base;
  482|  7.11k|#endif
  483|  7.11k|    pc = (const BCIns *)((uintptr_t)pc & ~(uintptr_t)1);
  484|  7.11k|    lj_trace_hot(J, pc);
  485|  7.11k|    lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|  7.11k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.11k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.11k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.11k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  486|  7.11k|	       "unbalanced stack after hot call");
  487|  7.11k|    goto out;
  488|  62.3k|  } else if (J->state != LJ_TRACE_IDLE &&
  ------------------
  |  Branch (488:14): [True: 62.3k, False: 15]
  ------------------
  489|  62.3k|	     !(g->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  676|  62.3k|#define HOOK_GC			0x40
  ------------------
              	     !(g->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  675|  62.3k|#define HOOK_VMEVENT		0x20
  ------------------
  |  Branch (489:7): [True: 62.3k, False: 0]
  ------------------
  490|  62.3k|#ifdef LUA_USE_ASSERT
  491|  62.3k|    ptrdiff_t delta = L->top - L->base;
  492|  62.3k|#endif
  493|       |    /* Record the FUNC* bytecodes, too. */
  494|  62.3k|    lj_trace_ins(J, pc-1);  /* The interpreter bytecode PC is offset by 1. */
  495|  62.3k|    lj_assertG(L->top - L->base == delta,
  ------------------
  |  |  364|  62.3k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  62.3k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 62.3k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  62.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  496|  62.3k|	       "unbalanced stack after hot instruction");
  497|  62.3k|  }
  498|  62.3k|#endif
  499|  62.3k|  if ((g->hookmask & LUA_MASKCALL)) {
  ------------------
  |  |  323|  62.3k|#define LUA_MASKCALL	(1 << LUA_HOOKCALL)
  |  |  ------------------
  |  |  |  |  313|  62.3k|#define LUA_HOOKCALL	0
  |  |  ------------------
  ------------------
  |  Branch (499:7): [True: 15, False: 62.3k]
  ------------------
  500|     15|    int i;
  501|     15|    for (i = 0; i < missing; i++)  /* Add missing parameters. */
  ------------------
  |  Branch (501:17): [True: 0, False: 15]
  ------------------
  502|      0|      setnilV(L->top++);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  503|     15|    callhook(L, LUA_HOOKCALL, -1);
  ------------------
  |  |  313|     15|#define LUA_HOOKCALL	0
  ------------------
  504|       |    /* Preserve modifications of missing parameters by lua_setlocal(). */
  505|     15|    while (missing-- > 0 && tvisnil(L->top - 1))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (505:12): [True: 0, False: 15]
  ------------------
  506|      0|      L->top--;
  507|     15|  }
  508|  62.3k|#if LJ_HASJIT
  509|  69.4k|out:
  510|  69.4k|#endif
  511|  69.4k|  op = bc_op(pc[-1]);  /* Get FUNC* op. */
  ------------------
  |  |   34|  69.4k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  512|  69.4k|#if LJ_HASJIT
  513|       |  /* Use the non-hotcounting variants if JIT is off or while recording. */
  514|  69.4k|  if ((!(J->flags & JIT_F_ON) || J->state != LJ_TRACE_IDLE) &&
  ------------------
  |  |   16|  69.4k|#define JIT_F_ON		0x00000001
  ------------------
  |  Branch (514:8): [True: 15, False: 69.4k]
  |  Branch (514:34): [True: 65.2k, False: 4.17k]
  ------------------
  515|  69.4k|      (op == BC_FUNCF || op == BC_FUNCV))
  ------------------
  |  Branch (515:8): [True: 28.1k, False: 37.1k]
  |  Branch (515:26): [True: 190, False: 36.9k]
  ------------------
  516|  28.3k|    op = (BCOp)((int)op+(int)BC_IFUNCF-(int)BC_FUNCF);
  517|  69.4k|#endif
  518|  69.4k|  ERRNO_RESTORE
  ------------------
  |  |  157|  69.4k|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  519|  69.4k|  return makeasmfunc(lj_bc_ofs[op]);  /* Return static dispatch target. */
  ------------------
  |  |  114|  69.4k|#define makeasmfunc(ofs) lj_ptr_sign((ASMFunction)(lj_vm_asm_begin + (ofs)), 0)
  |  |  ------------------
  |  |  |  | 1058|  69.4k|#define lj_ptr_sign(ptr, ctx) (ptr)
  |  |  ------------------
  ------------------
  520|  62.3k|}
lj_dispatch_stitch:
  525|    591|{
  526|    591|  ERRNO_SAVE
  ------------------
  |  |  156|    591|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  527|    591|  lua_State *L = J->L;
  528|    591|  void *cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|    591|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|    591|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|    591|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|    591|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  529|    591|  const BCIns *oldpc = cframe_pc(cf);
  ------------------
  |  |  287|    591|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  ------------------
  |  |  |  |   36|    591|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  530|    591|  setcframe_pc(cf, pc);
  ------------------
  |  |  291|    591|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|    591|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  531|       |  /* Before dispatch, have to bias PC by 1. */
  532|    591|  L->top = L->base + cur_topslot(curr_proto(L), pc+1, cframe_multres_n(cf));
  ------------------
  |  |  717|    591|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  ------------------
  |  |  |  |  480|    591|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    591|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    591|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    591|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 591, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    591|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L->top = L->base + cur_topslot(curr_proto(L), pc+1, cframe_multres_n(cf));
  ------------------
  |  |  283|    591|#define cframe_multres_n(cf)	(cframe_multres((cf)) >> CFRAME_SHIFT_MULTRES)
  |  |  ------------------
  |  |  |  |  282|    591|#define cframe_multres(cf)  (*(uint32_t *)(((char *)(cf))+CFRAME_OFS_MULTRES))
  |  |  |  |  ------------------
  |  |  |  |  |  |  165|    591|#define CFRAME_OFS_MULTRES	(0*4)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define cframe_multres_n(cf)	(cframe_multres((cf)) >> CFRAME_SHIFT_MULTRES)
  |  |  ------------------
  |  |  |  |  179|    591|#define CFRAME_SHIFT_MULTRES	0
  |  |  ------------------
  ------------------
  533|      0|  lj_trace_stitch(J, pc-1);  /* Point to the CALL instruction. */
  534|    591|  setcframe_pc(cf, oldpc);
  ------------------
  |  |  291|    591|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|    591|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  535|    591|  ERRNO_RESTORE
  ------------------
  |  |  157|    591|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  536|    591|}
lj_dispatch.c:setptmode:
  218|     90|{
  219|     90|  if ((mode & LUAJIT_MODE_ON)) {  /* (Re-)enable JIT compilation. */
  ------------------
  |  |   59|     90|#define LUAJIT_MODE_ON		0x0100	/* Turn feature on. */
  ------------------
  |  Branch (219:7): [True: 0, False: 90]
  ------------------
  220|      0|    pt->flags &= ~PROTO_NOJIT;
  ------------------
  |  |  402|      0|#define PROTO_NOJIT		0x08	/* JIT disabled for this function. */
  ------------------
  221|      0|    lj_trace_reenableproto(pt);  /* Unpatch all ILOOP etc. bytecodes. */
  222|     90|  } else {  /* Flush and/or disable JIT compilation. */
  223|     90|    if (!(mode & LUAJIT_MODE_FLUSH))
  ------------------
  |  |   60|     90|#define LUAJIT_MODE_FLUSH	0x0200	/* Flush JIT-compiled code. */
  ------------------
  |  Branch (223:9): [True: 90, False: 0]
  ------------------
  224|     90|      pt->flags |= PROTO_NOJIT;
  ------------------
  |  |  402|     90|#define PROTO_NOJIT		0x08	/* JIT disabled for this function. */
  ------------------
  225|     90|    lj_trace_flushproto(g, pt);  /* Flush all traces of prototype. */
  226|     90|  }
  227|     90|}
lj_dispatch.c:cur_topslot:
  390|   773k|{
  391|   773k|  BCIns ins = pc[-1];
  392|   773k|  if (bc_op(ins) == BC_UCLO)
  ------------------
  |  |   34|   773k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (392:7): [True: 39, False: 773k]
  ------------------
  393|     39|    ins = pc[bc_j(ins)];
  ------------------
  |  |   39|     39|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|     39|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|     39|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  394|   773k|  switch (bc_op(ins)) {
  ------------------
  |  |   34|   773k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  395|    396|  case BC_CALLM: case BC_CALLMT: return bc_a(ins) + bc_c(ins) + nres-1+1+LJ_FR2;
  ------------------
  |  |   35|    396|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                case BC_CALLM: case BC_CALLMT: return bc_a(ins) + bc_c(ins) + nres-1+1+LJ_FR2;
  ------------------
  |  |   37|    396|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
                case BC_CALLM: case BC_CALLMT: return bc_a(ins) + bc_c(ins) + nres-1+1+LJ_FR2;
  ------------------
  |  |  569|    396|#define LJ_FR2			1
  ------------------
  |  Branch (395:3): [True: 396, False: 772k]
  |  Branch (395:18): [True: 0, False: 773k]
  ------------------
  396|     36|  case BC_RETM: return bc_a(ins) + bc_d(ins) + nres-1;
  ------------------
  |  |   35|     36|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                case BC_RETM: return bc_a(ins) + bc_d(ins) + nres-1;
  ------------------
  |  |   38|     36|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (396:3): [True: 36, False: 773k]
  ------------------
  397|     26|  case BC_TSETM: return bc_a(ins) + nres-1;
  ------------------
  |  |   35|     26|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (397:3): [True: 26, False: 773k]
  ------------------
  398|   772k|  default: return pt->framesize;
  ------------------
  |  Branch (398:3): [True: 772k, False: 458]
  ------------------
  399|   773k|  }
  400|   773k|}
lj_dispatch.c:callhook:
  359|   348k|{
  360|   348k|  global_State *g = G(L);
  ------------------
  |  |  705|   348k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   348k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  361|   348k|  lua_Hook hookf = g->hookf;
  362|   348k|  if (hookf && !hook_active(g)) {
  ------------------
  |  |  678|   348k|#define hook_active(g)		((g)->hookmask & HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|   348k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  |  Branch (362:7): [True: 348k, False: 0]
  |  Branch (362:16): [True: 348k, False: 15]
  ------------------
  363|   348k|    lua_Debug ar;
  364|   348k|    lj_trace_abort(g);  /* Abort recording on any hook call. */
  ------------------
  |  |   45|   348k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|   348k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|   348k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|   348k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  365|   348k|    ar.event = event;
  366|   348k|    ar.currentline = line;
  367|       |    /* Top frame, nextframe = NULL. */
  368|   348k|    ar.i_ci = (int)((L->base-1) - tvref(L->stack));
  ------------------
  |  |  217|   348k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   348k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  369|   348k|    lj_state_checkstack(L, 1+LUA_MINSTACK);
  ------------------
  |  |   88|   348k|#define LUA_MINSTACK	20
  ------------------
  370|       |#if LJ_HASPROFILE && !LJ_PROFILE_SIGPROF
  371|       |    lj_profile_hook_enter(g);
  372|       |#else
  373|   348k|    hook_enter(g);
  ------------------
  |  |  679|   348k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|   348k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  374|   348k|#endif
  375|   348k|    hookf(L, &ar);
  376|   348k|    lj_assertG(hook_active(g), "active hook flag removed");
  ------------------
  |  |  364|   348k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   348k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 348k, False: 6]
  |  |  |  |  ------------------
  |  |  |  |  356|   348k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  377|   348k|    setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|   348k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  378|       |#if LJ_HASPROFILE && !LJ_PROFILE_SIGPROF
  379|       |    lj_profile_hook_leave(g);
  380|       |#else
  381|   348k|    hook_leave(g);
  ------------------
  |  |  683|   348k|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|   348k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  382|   348k|#endif
  383|   348k|  }
  384|   348k|}
lj_dispatch.c:call_init:
  450|  69.4k|{
  451|  69.4k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  69.4k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  69.4k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 31.6k, False: 37.7k]
  |  |  ------------------
  ------------------
  452|  31.6k|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|  31.6k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  31.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  31.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  31.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 31.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  31.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  453|      0|    int numparams = pt->numparams;
  454|  31.6k|    int gotparams = (int)(L->top - L->base);
  455|  31.6k|    int need = pt->framesize;
  456|  31.6k|    if ((pt->flags & PROTO_VARARG)) need += 1+LJ_FR2+gotparams;
  ------------------
  |  |  400|  31.6k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
                  if ((pt->flags & PROTO_VARARG)) need += 1+LJ_FR2+gotparams;
  ------------------
  |  |  569|    190|#define LJ_FR2			1
  ------------------
  |  Branch (456:9): [True: 190, False: 31.4k]
  ------------------
  457|  31.6k|    lj_state_checkstack(L, (MSize)need);
  458|  31.6k|    numparams -= gotparams;
  459|  31.6k|    return numparams >= 0 ? numparams : 0;
  ------------------
  |  Branch (459:12): [True: 31.1k, False: 451]
  ------------------
  460|  37.7k|  } else {
  461|  37.7k|    lj_state_checkstack(L, LUA_MINSTACK);
  ------------------
  |  |   88|  37.7k|#define LUA_MINSTACK	20
  ------------------
  462|  37.7k|    return 0;
  463|  37.7k|  }
  464|  69.4k|}

lj_asm.c:jmprel:
  476|   633k|{
  477|   633k|  ptrdiff_t delta = target - p;
  478|   633k|  UNUSED(J);
  ------------------
  |  |   91|   633k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  479|   633k|  lj_assertJ(delta == (int32_t)delta, "jump target out of range");
  ------------------
  |  |  527|   633k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   633k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   633k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 633k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   633k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  480|   633k|  return (int32_t)delta;
  481|   633k|}
lj_asm.c:emit_loadk64:
  385|  83.8k|{
  386|  83.8k|  Reg r64;
  387|  83.8k|  x86Op xo;
  388|  83.8k|  const uint64_t *k = &ir_k64(ir)->u64;
  ------------------
  |  |  594|  83.8k|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|  83.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  83.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   613k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 20.2k, False: 63.6k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 63.6k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 63.6k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 63.6k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  83.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  389|  83.8k|  if (rset_test(RSET_FPR, r)) {
  ------------------
  |  |   74|  83.8k|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 20.2k, False: 63.6k]
  |  |  ------------------
  ------------------
  390|  20.2k|    r64 = r;
  391|  20.2k|    xo = XO_MOVSD;
  392|  63.6k|  } else {
  393|  63.6k|    r64 = r | REX_64;
  ------------------
  |  |   15|  63.6k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  63.6k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  394|  63.6k|    xo = XO_MOV;
  395|  63.6k|  }
  396|  83.8k|  if (*k == 0) {
  ------------------
  |  Branch (396:7): [True: 337, False: 83.5k]
  ------------------
  397|    337|    emit_rr(as, rset_test(RSET_FPR, r) ? XO_XORPS : XO_ARITH(XOg_XOR), r, r);
  ------------------
  |  |   74|    337|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 337, False: 0]
  |  |  ------------------
  ------------------
                  emit_rr(as, rset_test(RSET_FPR, r) ? XO_XORPS : XO_ARITH(XOg_XOR), r, r);
  ------------------
  |  |  327|    337|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
  398|    337|#if LJ_GC64
  399|  83.5k|  } else if (checki32((intptr_t)k) || checki32(dispofs(as, k)) ||
  ------------------
  |  |  105|   167k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 83.5k]
  |  |  ------------------
  ------------------
                } else if (checki32((intptr_t)k) || checki32(dispofs(as, k)) ||
  ------------------
  |  |  105|   167k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 83.5k, False: 0]
  |  |  ------------------
  ------------------
  400|  83.5k|	     (checki32(mcpofs(as, k)) && checki32(mctopofs(as, k)))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	     (checki32(mcpofs(as, k)) && checki32(mctopofs(as, k)))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  401|  83.5k|    emit_rma(as, xo, r64, k);
  402|  83.5k|  } else {
  403|      0|    if (ir->i) {
  ------------------
  |  Branch (403:9): [True: 0, False: 0]
  ------------------
  404|      0|      lj_assertA(*k == *(uint64_t*)(as->mctop - ir->i),
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  405|      0|		 "bad interned 64 bit constant");
  406|      0|    } else if (as->curins <= as->stopins && rset_test(RSET_GPR, r)) {
  ------------------
  |  |   74|      0|#define rset_test(rs, r)	((int)((rs) >> (r)) & 1)
  |  |  ------------------
  |  |  |  Branch (74:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (406:16): [True: 0, False: 0]
  ------------------
  407|      0|      emit_loadu64(as, r, *k);
  408|      0|      return;
  409|      0|    } else {
  410|       |      /* If all else fails, add the FP constant at the MCode area bottom. */
  411|      0|      while ((uintptr_t)as->mcbot & 7) *as->mcbot++ = XI_INT3;
  ------------------
  |  Branch (411:14): [True: 0, False: 0]
  ------------------
  412|      0|      *(uint64_t *)as->mcbot = *k;
  413|      0|      ir->i = (int32_t)(as->mctop - as->mcbot);
  414|      0|      as->mcbot += 8;
  415|      0|      as->mclim = as->mcbot + MCLIM_REDZONE;
  ------------------
  |  |  135|      0|#define MCLIM_REDZONE	64
  ------------------
  416|      0|      lj_mcode_commitbot(as->J, as->mcbot);
  ------------------
  |  |   26|      0|#define lj_mcode_commitbot(J, m)	(J->mcbot = (m))
  ------------------
  417|      0|    }
  418|      0|    emit_rmro(as, xo, r64, RID_RIP, (int32_t)mcpofs(as, as->mctop - ir->i));
  ------------------
  |  |  298|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)as->mcp))
  ------------------
  419|       |#else
  420|       |  } else {
  421|       |    emit_rma(as, xo, r64, k);
  422|       |#endif
  423|      0|  }
  424|  83.8k|}
lj_asm.c:emit_rr:
   86|   376k|{
   87|   376k|  MCode *p = as->mcp;
   88|   376k|  as->mcp = emit_opm(xo, XM_REG, r1, r2, p, 0);
  ------------------
  |  |   75|   376k|  (p[(delta)-1] = MODRM((mode), (rr), (rb)), \
  |  |  ------------------
  |  |  |  |    8|   376k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   76|   376k|   emit_op((xo), (rr), (rb), 0, (p), (delta)))
  ------------------
   89|   376k|}
lj_asm.c:emit_op:
   39|  1.61M|{
   40|  1.61M|  int n = (int8_t)xo;
   41|  1.61M|  if (n == -60) {  /* VEX-encoded instruction */
  ------------------
  |  Branch (41:7): [True: 50.9k, False: 1.56M]
  ------------------
   42|  50.9k|#if LJ_64
   43|  50.9k|    xo ^= (((rr>>1)&4)+((rx>>2)&2)+((rb>>3)&1))<<13;
   44|  50.9k|#endif
   45|  50.9k|    *(uint32_t *)(p+delta-5) = (uint32_t)xo;
   46|  50.9k|    return p+delta-5;
   47|  50.9k|  }
   48|  1.56M|#if defined(__GNUC__) || defined(__clang__)
   49|  1.56M|  if (__builtin_constant_p(xo) && n == -2)
  ------------------
  |  Branch (49:7): [True: 419k, False: 1.14M]
  |  Branch (49:35): [True: 385k, False: 34.0k]
  ------------------
   50|   385k|    p[delta-2] = (MCode)(xo >> 24);
   51|  1.18M|  else if (__builtin_constant_p(xo) && n == -3)
  ------------------
  |  Branch (51:12): [True: 34.0k, False: 1.14M]
  |  Branch (51:40): [True: 28.9k, False: 5.08k]
  ------------------
   52|  28.9k|    *(uint16_t *)(p+delta-3) = (uint16_t)(xo >> 16);
   53|  1.15M|  else
   54|  1.15M|#endif
   55|  1.15M|    *(uint32_t *)(p+delta-5) = (uint32_t)xo;
   56|  1.56M|  p += n + delta;
   57|  1.56M|#if LJ_64
   58|  1.56M|  {
   59|  1.56M|    uint32_t rex = 0x40 + ((rr>>1)&(4+(FORCE_REX>>1)))+((rx>>2)&2)+((rb>>3)&1);
  ------------------
  |  |   14|  1.56M|#define FORCE_REX		0x200
  ------------------
   60|  1.56M|    if (rex != 0x40) {
  ------------------
  |  Branch (60:9): [True: 1.01M, False: 546k]
  ------------------
   61|  1.01M|      rex |= (rr >> 16);
   62|  1.01M|      if (n == -4) { *p = (MCode)rex; rex = (MCode)(xo >> 8); }
  ------------------
  |  Branch (62:11): [True: 58.6k, False: 960k]
  ------------------
   63|   960k|      else if ((xo & 0xffffff) == 0x6600fd) { *p = (MCode)rex; rex = 0x66; }
  ------------------
  |  Branch (63:16): [True: 0, False: 960k]
  ------------------
   64|  1.01M|      *--p = (MCode)rex;
   65|  1.01M|    }
   66|  1.56M|  }
   67|       |#else
   68|       |  UNUSED(rr); UNUSED(rb); UNUSED(rx);
   69|       |#endif
   70|  1.56M|  return p;
   71|  1.61M|}
lj_asm.c:emit_rmro:
  104|   884k|{
  105|   884k|  MCode *p = as->mcp;
  106|   884k|  x86Mode mode;
  107|   884k|  if (ra_hasreg(rb)) {
  ------------------
  |  |   28|   884k|#define ra_hasreg(r)		(!((r) & RID_NONE))
  |  |  ------------------
  |  |  |  |   21|   884k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (28:23): [True: 884k, False: 0]
  |  |  ------------------
  ------------------
  108|   884k|    if (LJ_GC64 && rb == RID_RIP) {
  ------------------
  |  |  562|  1.76M|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (108:20): [True: 0, False: 884k]
  ------------------
  109|      0|      mode = XM_OFS0;
  110|      0|      p -= 4;
  111|      0|      *(int32_t *)p = ofs;
  112|   884k|    } else if (ofs == 0 && (rb&7) != RID_EBP) {
  ------------------
  |  Branch (112:16): [True: 80.0k, False: 804k]
  |  Branch (112:28): [True: 80.0k, False: 33]
  ------------------
  113|  80.0k|      mode = XM_OFS0;
  114|   804k|    } else if (checki8(ofs)) {
  ------------------
  |  |  101|   804k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 432k, False: 372k]
  |  |  ------------------
  ------------------
  115|   432k|      *--p = (MCode)ofs;
  116|   432k|      mode = XM_OFS8;
  117|   432k|    } else {
  118|   372k|      p -= 4;
  119|   372k|      *(int32_t *)p = ofs;
  120|   372k|      mode = XM_OFS32;
  121|   372k|    }
  122|   884k|    if ((rb&7) == RID_ESP)
  ------------------
  |  Branch (122:9): [True: 287k, False: 597k]
  ------------------
  123|   287k|      *--p = MODRM(XM_SCALE1, RID_ESP, RID_ESP);
  ------------------
  |  |    8|   287k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  ------------------
  124|   884k|  } else {
  125|      0|    *(int32_t *)(p-4) = ofs;
  126|      0|#if LJ_64
  127|      0|    p[-5] = MODRM(XM_SCALE1, RID_ESP, RID_EBP);
  ------------------
  |  |    8|      0|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  ------------------
  128|      0|    p -= 5;
  129|      0|    rb = RID_ESP;
  130|       |#else
  131|       |    p -= 4;
  132|       |    rb = RID_EBP;
  133|       |#endif
  134|      0|    mode = XM_OFS0;
  135|      0|  }
  136|   884k|  as->mcp = emit_opm(xo, mode, rr, rb, p, 0);
  ------------------
  |  |   75|   884k|  (p[(delta)-1] = MODRM((mode), (rr), (rb)), \
  |  |  ------------------
  |  |  |  |    8|   884k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   76|   884k|   emit_op((xo), (rr), (rb), 0, (p), (delta)))
  ------------------
  137|   884k|}
lj_asm.c:emit_loadofs:
  544|   237k|{
  545|   237k|  if (r < RID_MAX_GPR)
  ------------------
  |  Branch (545:7): [True: 188k, False: 49.0k]
  ------------------
  546|   188k|    emit_rmro(as, XO_MOV, REX_64IR(ir, r), base, ofs);
  ------------------
  |  |  525|   188k|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|   188k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|   188k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|   188k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|   188k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|   188k|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   188k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 170k, False: 18.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|   170k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|   170k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  547|  49.0k|  else
  548|  49.0k|    emit_rmro(as, irt_isnum(ir->t) ? XO_MOVSD : XO_MOVSS, r, base, ofs);
  ------------------
  |  |  377|  49.0k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  49.0k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 49.0k, False: 0]
  |  |  ------------------
  ------------------
  549|   237k|}
lj_asm.c:emit_loadu64:
  313|   106k|{
  314|   106k|  if (checku32(u64)) {  /* 32 bit load clears upper 32 bits. */
  ------------------
  |  |  106|   106k|#define checku32(x)	((x) == (uint32_t)(x))
  |  |  ------------------
  |  |  |  Branch (106:21): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  315|      0|    emit_loadi(as, r, (int32_t)u64);
  316|   106k|  } else if (checki32((int64_t)u64)) {  /* Sign-extended 32 bit load. */
  ------------------
  |  |  105|   106k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 106k]
  |  |  ------------------
  ------------------
  317|      0|    MCode *p = as->mcp;
  318|      0|    *(int32_t *)(p-4) = (int32_t)u64;
  319|      0|    as->mcp = emit_opm(XO_MOVmi, XM_REG, REX_64, r, p, -4);
  ------------------
  |  |   75|      0|  (p[(delta)-1] = MODRM((mode), (rr), (rb)), \
  |  |  ------------------
  |  |  |  |    8|      0|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   76|      0|   emit_op((xo), (rr), (rb), 0, (p), (delta)))
  ------------------
  320|      0|#if LJ_GC64
  321|   106k|  } else if (checki32(dispofs(as, u64))) {
  ------------------
  |  |  105|   106k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 94.4k, False: 11.9k]
  |  |  ------------------
  ------------------
  322|  94.4k|    emit_rmro(as, XO_LEA, r|REX_64, RID_DISPATCH, (int32_t)dispofs(as, u64));
  ------------------
  |  |   15|  94.4k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  94.4k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
                  emit_rmro(as, XO_LEA, r|REX_64, RID_DISPATCH, (int32_t)dispofs(as, u64));
  ------------------
  |  |  296|  94.4k|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|  94.4k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  94.4k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  94.4k|  } else if (checki32(mcpofs(as, u64)) && checki32(mctopofs(as, u64))) {
  ------------------
  |  |  105|  23.9k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 11.9k]
  |  |  ------------------
  ------------------
                } else if (checki32(mcpofs(as, u64)) && checki32(mctopofs(as, u64))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  324|       |    /* Since as->realign assumes the code size doesn't change, check
  325|       |    ** RIP-relative addressing reachability for both as->mcp and as->mctop.
  326|       |    */
  327|      0|    emit_rmro(as, XO_LEA, r|REX_64, RID_RIP, (int32_t)mcpofs(as, u64));
  ------------------
  |  |   15|      0|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|      0|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
                  emit_rmro(as, XO_LEA, r|REX_64, RID_RIP, (int32_t)mcpofs(as, u64));
  ------------------
  |  |  298|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)as->mcp))
  ------------------
  328|      0|#endif
  329|  11.9k|  } else {  /* Full-size 64 bit load. */
  330|  11.9k|    MCode *p = as->mcp;
  331|  11.9k|    *(uint64_t *)(p-8) = u64;
  332|  11.9k|    p[-9] = (MCode)(XI_MOVri+(r&7));
  333|  11.9k|    p[-10] = 0x48 + ((r>>3)&1);
  334|  11.9k|    p -= 10;
  335|  11.9k|    as->mcp = p;
  336|  11.9k|  }
  337|   106k|}
lj_asm.c:emit_loadi:
  276|  92.5k|{
  277|       |  /* XOR r,r is shorter, but modifies the flags. This is bad for HIOP/jcc. */
  278|  92.5k|  if (i == 0 && !(LJ_32 && (IR(as->curins)->o == IR_HIOP ||
  ------------------
  |  |  639|  12.9k|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (i == 0 && !(LJ_32 && (IR(as->curins)->o == IR_HIOP ||
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (278:7): [True: 6.48k, False: 86.1k]
  |  Branch (278:29): [True: 0, False: 0]
  ------------------
  279|      0|			    (as->curins+1 < as->T->nins &&
  ------------------
  |  Branch (279:9): [True: 0, False: 0]
  ------------------
  280|      0|			     IR(as->curins+1)->o == IR_HIOP))) &&
  ------------------
  |  |  116|      0|#define IR(ref)			(&as->ir[(ref)])
  ------------------
  |  Branch (280:9): [True: 0, False: 0]
  ------------------
  281|  92.5k|		!((*as->mcp == 0x0f && (as->mcp[1] & 0xf0) == XI_JCCn) ||
  ------------------
  |  Branch (281:6): [True: 0, False: 6.48k]
  |  Branch (281:26): [True: 0, False: 0]
  ------------------
  282|  6.48k|		  (*as->mcp & 0xf0) == XI_JCCs)) {
  ------------------
  |  Branch (282:5): [True: 0, False: 6.48k]
  ------------------
  283|  6.48k|    emit_rr(as, XO_ARITH(XOg_XOR), r, r);
  ------------------
  |  |  327|  6.48k|#define XO_ARITH(a)	((x86Op)(0x030000fe + ((a)<<27)))
  ------------------
  284|  86.1k|  } else {
  285|  86.1k|    MCode *p = as->mcp;
  286|  86.1k|    *(int32_t *)(p-4) = i;
  287|  86.1k|    p[-5] = (MCode)(XI_MOVri+(r&7));
  288|  86.1k|    p -= 5;
  289|  86.1k|    REXRB(p, 0, r);
  ------------------
  |  |   12|  86.1k|    { MCode rex = 0x40 + (((rr)>>1)&4) + (((rb)>>3)&1); \
  |  |   13|  86.1k|      if (rex != 0x40) *--(p) = rex; }
  |  |  ------------------
  |  |  |  Branch (13:11): [True: 0, False: 86.1k]
  |  |  ------------------
  ------------------
  290|  86.1k|    as->mcp = p;
  291|  86.1k|  }
  292|  92.5k|}
lj_asm.c:emit_rma:
  342|   195k|{
  343|   195k|#if LJ_GC64
  344|   195k|  if (checki32(dispofs(as, addr))) {
  ------------------
  |  |  105|   195k|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 195k, False: 0]
  |  |  ------------------
  ------------------
  345|   195k|    emit_rmro(as, xo, rr, RID_DISPATCH, (int32_t)dispofs(as, addr));
  ------------------
  |  |  296|   195k|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)J2GG(as->J)->dispatch))
  |  |  ------------------
  |  |  |  |  113|   195k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|   195k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  346|   195k|  } else if (checki32(mcpofs(as, addr)) && checki32(mctopofs(as, addr))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                } else if (checki32(mcpofs(as, addr)) && checki32(mctopofs(as, addr))) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  347|      0|    emit_rmro(as, xo, rr, RID_RIP, (int32_t)mcpofs(as, addr));
  ------------------
  |  |  298|      0|  ((intptr_t)((uintptr_t)(k) - (uintptr_t)as->mcp))
  ------------------
  348|      0|  } else if (!checki32((intptr_t)addr)) {
  ------------------
  |  |  105|      0|#define checki32(x)	((x) == (int32_t)(x))
  ------------------
  |  Branch (348:14): [True: 0, False: 0]
  ------------------
  349|      0|    Reg ra = (rr & 15);
  350|      0|    if (xo != XO_MOV) {
  ------------------
  |  Branch (350:9): [True: 0, False: 0]
  ------------------
  351|       |      /* We can't allocate a register here. Use and restore DISPATCH. Ugly. */
  352|      0|      uint64_t dispaddr = (uintptr_t)J2GG(as->J)->dispatch;
  ------------------
  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  353|      0|      uint8_t i8 = xo == XO_GROUP3b ? *as->mcp++ : 0;
  ------------------
  |  Branch (353:20): [True: 0, False: 0]
  ------------------
  354|      0|      ra = RID_DISPATCH;
  355|      0|      if (checku32(dispaddr)) {
  ------------------
  |  |  106|      0|#define checku32(x)	((x) == (uint32_t)(x))
  |  |  ------------------
  |  |  |  Branch (106:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  356|      0|	emit_loadi(as, ra, (int32_t)dispaddr);
  357|      0|      } else {  /* Full-size 64 bit load. */
  358|      0|	MCode *p = as->mcp;
  359|      0|	*(uint64_t *)(p-8) = dispaddr;
  360|      0|	p[-9] = (MCode)(XI_MOVri+(ra&7));
  361|      0|	p[-10] = 0x48 + ((ra>>3)&1);
  362|      0|	p -= 10;
  363|      0|	as->mcp = p;
  364|      0|      }
  365|      0|      if (xo == XO_GROUP3b) emit_i8(as, i8);
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
  |  Branch (365:11): [True: 0, False: 0]
  ------------------
  366|      0|    }
  367|      0|    emit_rmro(as, xo, rr, ra, 0);
  368|      0|    emit_loadu64(as, ra, (uintptr_t)addr);
  369|      0|  } else
  370|      0|#endif
  371|      0|  {
  372|      0|    MCode *p = as->mcp;
  373|      0|    *(int32_t *)(p-4) = ptr2addr(addr);
  374|      0|#if LJ_64
  375|      0|    p[-5] = MODRM(XM_SCALE1, RID_ESP, RID_EBP);
  ------------------
  |  |    8|      0|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  ------------------
  376|      0|    as->mcp = emit_opm(xo, XM_OFS0, rr, RID_ESP, p, -5);
  ------------------
  |  |   75|      0|  (p[(delta)-1] = MODRM((mode), (rr), (rb)), \
  |  |  ------------------
  |  |  |  |    8|      0|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   76|      0|   emit_op((xo), (rr), (rb), 0, (p), (delta)))
  ------------------
  377|       |#else
  378|       |    as->mcp = emit_opm(xo, XM_OFS0, rr, RID_EBP, p, -4);
  379|       |#endif
  380|      0|  }
  381|   195k|}
lj_asm.c:emit_addptr:
  562|  45.7k|{
  563|  45.7k|  if (ofs) {
  ------------------
  |  Branch (563:7): [True: 14.5k, False: 31.2k]
  ------------------
  564|  14.5k|    emit_gri(as, XG_ARITHi(XOg_ADD), r|REX_GC64, ofs);
  ------------------
  |  |  323|  14.5k|#define XG_ARITHi(g)	XG_(XI_ARITHi8, XI_ARITHi, g)
  |  |  ------------------
  |  |  |  |  322|  14.5k|#define XG_(i8, i, g)	((x86Group)(((i8) << 16) + ((i) << 8) + (g)))
  |  |  ------------------
  ------------------
                  emit_gri(as, XG_ARITHi(XOg_ADD), r|REX_GC64, ofs);
  ------------------
  |  |   24|  14.5k|#define REX_GC64		REX_64
  |  |  ------------------
  |  |  |  |   15|  14.5k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|  14.5k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  565|  14.5k|  }
  566|  45.7k|}
lj_asm.c:emit_gri:
  160|  44.7k|{
  161|  44.7k|  MCode *p = as->mcp;
  162|  44.7k|  x86Op xo;
  163|  44.7k|  if (checki8(i)) {
  ------------------
  |  |  101|  44.7k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 37.3k, False: 7.43k]
  |  |  ------------------
  ------------------
  164|  37.3k|    *--p = (MCode)i;
  165|  37.3k|    xo = XG_TOXOi8(xg);
  ------------------
  |  |  325|  37.3k|#define XG_TOXOi8(xg)	((x86Op)(0x000000fe + (((xg)<<8) & 0xff000000)))
  ------------------
  166|  37.3k|  } else {
  167|  7.43k|    p -= 4;
  168|  7.43k|    *(int32_t *)p = i;
  169|  7.43k|    xo = XG_TOXOi(xg);
  ------------------
  |  |  324|  7.43k|#define XG_TOXOi(xg)	((x86Op)(0x000000fe + (((xg)<<16) & 0xff000000)))
  ------------------
  170|  7.43k|  }
  171|  44.7k|  as->mcp = emit_opm(xo, XM_REG, (Reg)(xg & 7) | (rb & REX_64), rb, p, 0);
  ------------------
  |  |   75|  44.7k|  (p[(delta)-1] = MODRM((mode), (rr), (rb)), \
  |  |  ------------------
  |  |  |  |    8|  44.7k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   76|  44.7k|   emit_op((xo), (rr), (rb), 0, (p), (delta)))
  ------------------
  172|  44.7k|}
lj_asm.c:emit_movmroi:
  256|  25.2k|{
  257|  25.2k|  emit_i32(as, i);
  ------------------
  |  |   30|  25.2k|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
  258|  25.2k|  emit_rmro(as, XO_MOVmi, 0, base, ofs);
  259|  25.2k|}
lj_asm.c:emit_jcc:
  485|   245k|{
  486|   245k|  MCode *p = as->mcp;
  487|   245k|  *(int32_t *)(p-4) = jmprel(as->J, p, target);
  488|   245k|  p[-5] = (MCode)(XI_JCCn+(cc&15));
  489|   245k|  p[-6] = 0x0f;
  490|   245k|  as->mcp = p - 6;
  491|   245k|}
lj_asm.c:emit_movrr:
  534|   203k|{
  535|   203k|  UNUSED(ir);
  ------------------
  |  |   91|   203k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  536|   203k|  if (dst < RID_MAX_GPR)
  ------------------
  |  Branch (536:7): [True: 192k, False: 11.4k]
  ------------------
  537|   192k|    emit_rr(as, XO_MOV, REX_64IR(ir, dst), src);
  ------------------
  |  |  525|   192k|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|   192k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|   192k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|   192k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|   192k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|   192k|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   192k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 164k, False: 27.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|   164k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|   164k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  538|  11.4k|  else
  539|  11.4k|    emit_rr(as, XO_MOVAPS, dst, src);
  540|   203k|}
lj_asm.c:emit_storeofs:
  553|   156k|{
  554|   156k|  if (r < RID_MAX_GPR)
  ------------------
  |  Branch (554:7): [True: 130k, False: 25.2k]
  ------------------
  555|   130k|    emit_rmro(as, XO_MOVto, REX_64IR(ir, r), base, ofs);
  ------------------
  |  |  525|   130k|#define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |  409|   130k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  397|   130k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  |  |  398|   130k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  |  |  399|   130k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  |  |  400|   130k|   (1u<<IRT_NIL))
  |  |  |  |  ------------------
  |  |  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  365|   130k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (409:22): [True: 110k, False: 19.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define REX_64IR(ir, r)		((r) + (irt_is64((ir)->t) ? REX_64 : 0))
  |  |  ------------------
  |  |  |  |   15|   110k|#define REX_64			(FORCE_REX|0x080000)
  |  |  |  |  ------------------
  |  |  |  |  |  |   14|   110k|#define FORCE_REX		0x200
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  556|  25.2k|  else
  557|  25.2k|    emit_rmro(as, irt_isnum(ir->t) ? XO_MOVSDto : XO_MOVSSto, r, base, ofs);
  ------------------
  |  |  377|  25.2k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  25.2k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 25.2k, False: 0]
  |  |  ------------------
  ------------------
  558|   156k|}
lj_asm.c:emit_sjcc:
  446|  22.1k|{
  447|  22.1k|  MCode *p = as->mcp;
  448|  22.1k|  ptrdiff_t delta = target - p;
  449|  22.1k|  lj_assertA(delta == (int8_t)delta, "short jump target out of range");
  ------------------
  |  |  111|  22.1k|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  22.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  22.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 22.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  22.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|  22.1k|  p[-1] = (MCode)(int8_t)delta;
  451|  22.1k|  p[-2] = (MCode)(XI_JCCs+(cc&15));
  452|  22.1k|  as->mcp = p - 2;
  453|  22.1k|}
lj_asm.c:emit_mrm:
  194|   309k|{
  195|   309k|  MCode *p = as->mcp;
  196|   309k|  x86Mode mode = XM_REG;
  197|   309k|  if (rb == RID_MRM) {
  ------------------
  |  Branch (197:7): [True: 121k, False: 188k]
  ------------------
  198|   121k|    rb = as->mrm.base;
  199|   121k|    if (rb == RID_NONE) {
  ------------------
  |  |   21|   121k|#define RID_NONE		0x80
  ------------------
  |  Branch (199:9): [True: 0, False: 121k]
  ------------------
  200|      0|      rb = RID_EBP;
  201|      0|      mode = XM_OFS0;
  202|      0|      p -= 4;
  203|      0|      *(int32_t *)p = as->mrm.ofs;
  204|      0|      if (as->mrm.idx != RID_NONE)
  ------------------
  |  |   21|      0|#define RID_NONE		0x80
  ------------------
  |  Branch (204:11): [True: 0, False: 0]
  ------------------
  205|      0|	goto mrmidx;
  206|      0|#if LJ_64
  207|      0|      *--p = MODRM(XM_SCALE1, RID_ESP, RID_EBP);
  ------------------
  |  |    8|      0|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  ------------------
  208|      0|      rb = RID_ESP;
  209|      0|#endif
  210|   121k|    } else if (LJ_GC64 && rb == RID_RIP) {
  ------------------
  |  |  562|   243k|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (210:27): [True: 0, False: 121k]
  ------------------
  211|      0|      lj_assertA(as->mrm.idx == RID_NONE, "RIP-rel mrm cannot have index");
  ------------------
  |  |  111|      0|#define lj_assertA(c, ...)	lj_assertG_(J2G(as->J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  212|      0|      mode = XM_OFS0;
  213|      0|      p -= 4;
  214|      0|      *(int32_t *)p = as->mrm.ofs;
  215|   121k|    } else {
  216|   121k|      if (as->mrm.ofs == 0 && (rb&7) != RID_EBP) {
  ------------------
  |  Branch (216:11): [True: 6.80k, False: 114k]
  |  Branch (216:31): [True: 6.68k, False: 128]
  ------------------
  217|  6.68k|	mode = XM_OFS0;
  218|   114k|      } else if (checki8(as->mrm.ofs)) {
  ------------------
  |  |  101|   114k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 67.0k, False: 47.9k]
  |  |  ------------------
  ------------------
  219|  67.0k|	*--p = (MCode)as->mrm.ofs;
  220|  67.0k|	mode = XM_OFS8;
  221|  67.0k|      } else {
  222|  47.9k|	p -= 4;
  223|  47.9k|	*(int32_t *)p = as->mrm.ofs;
  224|  47.9k|	mode = XM_OFS32;
  225|  47.9k|      }
  226|   121k|      if (as->mrm.idx != RID_NONE) {
  ------------------
  |  |   21|   121k|#define RID_NONE		0x80
  ------------------
  |  Branch (226:11): [True: 4.73k, False: 116k]
  ------------------
  227|  4.73k|      mrmidx:
  228|  4.73k|	as->mcp = emit_opmx(xo, mode, as->mrm.scale, rr, rb, as->mrm.idx, p);
  ------------------
  |  |   80|  4.73k|  (p[-1] = MODRM((scale), (rx), (rb)), \
  |  |  ------------------
  |  |  |  |    8|  4.73k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   81|  4.73k|   p[-2] = MODRM((mode), (rr), RID_ESP), \
  |  |  ------------------
  |  |  |  |    8|  4.73k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   82|  4.73k|   emit_op((xo), (rr), (rb), (rx), (p), -1))
  ------------------
  229|  4.73k|	return;
  230|  4.73k|      }
  231|   116k|      if ((rb&7) == RID_ESP)
  ------------------
  |  Branch (231:11): [True: 5.64k, False: 111k]
  ------------------
  232|  5.64k|	*--p = MODRM(XM_SCALE1, RID_ESP, RID_ESP);
  ------------------
  |  |    8|  5.64k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  ------------------
  233|   116k|    }
  234|   121k|  }
  235|   304k|  as->mcp = emit_opm(xo, mode, rr, rb, p, 0);
  ------------------
  |  |   75|   304k|  (p[(delta)-1] = MODRM((mode), (rr), (rb)), \
  |  |  ------------------
  |  |  |  |    8|   304k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   76|   304k|   emit_op((xo), (rr), (rb), 0, (p), (delta)))
  ------------------
  236|   304k|}
lj_asm.c:emit_gmrmi:
  240|  53.2k|{
  241|  53.2k|  x86Op xo;
  242|  53.2k|  if (checki8(i)) {
  ------------------
  |  |  101|  53.2k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 20.5k, False: 32.6k]
  |  |  ------------------
  ------------------
  243|  20.5k|    emit_i8(as, i);
  ------------------
  |  |   29|  20.5k|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
  244|  20.5k|    xo = XG_TOXOi8(xg);
  ------------------
  |  |  325|  20.5k|#define XG_TOXOi8(xg)	((x86Op)(0x000000fe + (((xg)<<8) & 0xff000000)))
  ------------------
  245|  32.6k|  } else {
  246|  32.6k|    emit_i32(as, i);
  ------------------
  |  |   30|  32.6k|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
  247|  32.6k|    xo = XG_TOXOi(xg);
  ------------------
  |  |  324|  32.6k|#define XG_TOXOi(xg)	((x86Op)(0x000000fe + (((xg)<<16) & 0xff000000)))
  ------------------
  248|  32.6k|  }
  249|  53.2k|  emit_mrm(as, xo, (Reg)(xg & 7) | (rb & REX_64), (rb & ~REX_64));
  ------------------
  |  |   15|  53.2k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  53.2k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
                emit_mrm(as, xo, (Reg)(xg & 7) | (rb & REX_64), (rb & ~REX_64));
  ------------------
  |  |   15|  53.2k|#define REX_64			(FORCE_REX|0x080000)
  |  |  ------------------
  |  |  |  |   14|  53.2k|#define FORCE_REX		0x200
  |  |  ------------------
  ------------------
  250|  53.2k|}
lj_asm.c:emit_call_:
  504|   283k|{
  505|   283k|  MCode *p = as->mcp;
  506|   283k|#if LJ_64
  507|   283k|  if (target-p != (int32_t)(target-p)) {
  ------------------
  |  Branch (507:7): [True: 0, False: 283k]
  ------------------
  508|       |    /* Assumes RID_RET is never an argument to calls and always clobbered. */
  509|      0|    emit_rr(as, XO_GROUP5, XOg_CALL, RID_RET);
  510|      0|    emit_loadu64(as, RID_RET, (uint64_t)target);
  511|      0|    return;
  512|      0|  }
  513|   283k|#endif
  514|   283k|  *(int32_t *)(p-4) = jmprel(as->J, p, target);
  515|   283k|  p[-5] = XI_CALL;
  516|   283k|  as->mcp = p - 5;
  517|   283k|}
lj_asm.c:emit_sjcc_label:
  457|  1.02k|{
  458|  1.02k|  MCode *p = as->mcp;
  459|  1.02k|  p[-1] = 0;
  460|  1.02k|  p[-2] = (MCode)(XI_JCCs+(cc&15));
  461|  1.02k|  as->mcp = p - 2;
  462|  1.02k|  return p;
  463|  1.02k|}
lj_asm.c:emit_gmroi:
  177|  1.09k|{
  178|  1.09k|  x86Op xo;
  179|  1.09k|  if (checki8(i)) {
  ------------------
  |  |  101|  1.09k|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 0, False: 1.09k]
  |  |  ------------------
  ------------------
  180|      0|    emit_i8(as, i);
  ------------------
  |  |   29|      0|#define emit_i8(as, i)		(*--as->mcp = (MCode)(i))
  ------------------
  181|      0|    xo = XG_TOXOi8(xg);
  ------------------
  |  |  325|      0|#define XG_TOXOi8(xg)	((x86Op)(0x000000fe + (((xg)<<8) & 0xff000000)))
  ------------------
  182|  1.09k|  } else {
  183|  1.09k|    emit_i32(as, i);
  ------------------
  |  |   30|  1.09k|#define emit_i32(as, i)		(*(int32_t *)(as->mcp-4) = (i), as->mcp -= 4)
  ------------------
  184|  1.09k|    xo = XG_TOXOi(xg);
  ------------------
  |  |  324|  1.09k|#define XG_TOXOi(xg)	((x86Op)(0x000000fe + (((xg)<<16) & 0xff000000)))
  ------------------
  185|  1.09k|  }
  186|  1.09k|  emit_rmro(as, xo, (Reg)(xg & 7), rb, ofs);
  187|  1.09k|}
lj_asm.c:emit_sfixup:
  467|  1.02k|{
  468|  1.02k|  source[-1] = (MCode)(as->mcp-source);
  469|  1.02k|}
lj_asm.c:emit_rmrxo:
  142|  1.02k|{
  143|  1.02k|  MCode *p = as->mcp;
  144|  1.02k|  x86Mode mode;
  145|  1.02k|  if (ofs == 0 && (rb&7) != RID_EBP) {
  ------------------
  |  Branch (145:7): [True: 1.02k, False: 0]
  |  Branch (145:19): [True: 552, False: 477]
  ------------------
  146|    552|    mode = XM_OFS0;
  147|    552|  } else if (checki8(ofs)) {
  ------------------
  |  |  101|    477|#define checki8(x)	((x) == (int32_t)(int8_t)(x))
  |  |  ------------------
  |  |  |  Branch (101:20): [True: 477, False: 0]
  |  |  ------------------
  ------------------
  148|    477|    mode = XM_OFS8;
  149|    477|    *--p = (MCode)ofs;
  150|    477|  } else {
  151|      0|    mode = XM_OFS32;
  152|      0|    p -= 4;
  153|      0|    *(int32_t *)p = ofs;
  154|      0|  }
  155|  1.02k|  as->mcp = emit_opmx(xo, mode, scale, rr, rb, rx, p);
  ------------------
  |  |   80|  1.02k|  (p[-1] = MODRM((scale), (rx), (rb)), \
  |  |  ------------------
  |  |  |  |    8|  1.02k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   81|  1.02k|   p[-2] = MODRM((mode), (rr), RID_ESP), \
  |  |  ------------------
  |  |  |  |    8|  1.02k|#define MODRM(mode, r1, r2)	((MCode)((mode)+(((r1)&7)<<3)+((r2)&7)))
  |  |  ------------------
  |  |   82|  1.02k|   emit_op((xo), (rr), (rb), (rx), (p), -1))
  ------------------
  156|  1.02k|}

lj_err_unwind_dwarf:
  439|  8.04M|{
  440|  8.04M|  void *cf;
  441|  8.04M|  lua_State *L;
  442|  8.04M|  if (version != 1)
  ------------------
  |  Branch (442:7): [True: 0, False: 8.04M]
  ------------------
  443|      0|    return _URC_FATAL_PHASE1_ERROR;
  ------------------
  |  |  403|      0|#define _URC_FATAL_PHASE1_ERROR	3
  ------------------
  444|  8.04M|  cf = (void *)_Unwind_GetCFA(ctx);
  445|  8.04M|  L = cframe_L(cf);
  ------------------
  |  |  285|  8.04M|  (&gcref(*(GCRef *)(((char *)(cf))+CFRAME_OFS_L))->th)
  |  |  ------------------
  |  |  |  |   67|  8.04M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  446|  8.04M|  if ((actions & _UA_SEARCH_PHASE)) {
  ------------------
  |  |  431|  8.04M|#define _UA_SEARCH_PHASE	1
  ------------------
  |  Branch (446:7): [True: 4.02M, False: 4.02M]
  ------------------
  447|  4.02M|#if LJ_UNWIND_EXT
  448|  4.02M|    if (err_unwind(L, cf, 0) == NULL)
  ------------------
  |  Branch (448:9): [True: 112, False: 4.02M]
  ------------------
  449|    112|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|    112|#define _URC_CONTINUE_UNWIND	8
  ------------------
  450|  4.02M|#endif
  451|  4.02M|    if (!LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  411|  4.02M|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  409|  4.02M|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  |  Branch (451:9): [True: 0, False: 4.02M]
  ------------------
  452|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_ERRCPP));
  453|      0|    }
  454|  4.02M|    return _URC_HANDLER_FOUND;
  ------------------
  |  |  404|  4.02M|#define _URC_HANDLER_FOUND	6
  ------------------
  455|  4.02M|  }
  456|  4.02M|  if ((actions & _UA_CLEANUP_PHASE)) {
  ------------------
  |  |  432|  4.02M|#define _UA_CLEANUP_PHASE	2
  ------------------
  |  Branch (456:7): [True: 4.02M, False: 0]
  ------------------
  457|  4.02M|    int errcode;
  458|  4.02M|    if (LJ_UEXCLASS_CHECK(uexclass)) {
  ------------------
  |  |  411|  4.02M|#define LJ_UEXCLASS_CHECK(cl)	(((cl) ^ LJ_UEXCLASS) <= 0xff)
  |  |  ------------------
  |  |  |  |  409|  4.02M|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  |  |  |  Branch (411:31): [True: 4.02M, False: 0]
  |  |  ------------------
  ------------------
  459|  4.02M|      errcode = LJ_UEXCLASS_ERRCODE(uexclass);
  ------------------
  |  |  412|  4.02M|#define LJ_UEXCLASS_ERRCODE(cl)	((int)((cl) & 0xff))
  ------------------
  460|  4.02M|    } else {
  461|      0|      if ((actions & _UA_HANDLER_FRAME))
  ------------------
  |  |  433|      0|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (461:11): [True: 0, False: 0]
  ------------------
  462|      0|	_Unwind_DeleteException(uex);
  463|      0|      errcode = LUA_ERRRUN;
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  464|      0|    }
  465|  4.02M|#if LJ_UNWIND_EXT
  466|  4.02M|    cf = err_unwind(L, cf, errcode);
  467|  4.02M|    if ((actions & _UA_FORCE_UNWIND)) {
  ------------------
  |  |  434|  4.02M|#define _UA_FORCE_UNWIND	8
  ------------------
  |  Branch (467:9): [True: 0, False: 4.02M]
  ------------------
  468|      0|      return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|      0|#define _URC_CONTINUE_UNWIND	8
  ------------------
  469|  4.02M|    } else if (cf) {
  ------------------
  |  Branch (469:16): [True: 4.02M, False: 112]
  ------------------
  470|  4.02M|      ASMFunction ip;
  471|  4.02M|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|  4.02M|#define LJ_TARGET_EHRETREG	0
  ------------------
  472|  4.02M|      ip = cframe_unwind_ff(cf) ? lj_vm_unwind_ff_eh : lj_vm_unwind_c_eh;
  ------------------
  |  |  293|  4.02M|#define cframe_unwind_ff(cf)	((intptr_t)(cf) & CFRAME_UNWIND_FF)
  |  |  ------------------
  |  |  |  |  276|  4.02M|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  ------------------
  |  |  |  Branch (293:30): [True: 2.03M, False: 1.99M]
  |  |  ------------------
  ------------------
  473|  4.02M|      _Unwind_SetIP(ctx, (uintptr_t)lj_ptr_strip(ip));
  ------------------
  |  | 1059|  4.02M|#define lj_ptr_strip(ptr) (ptr)
  ------------------
  474|  4.02M|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  405|  4.02M|#define _URC_INSTALL_CONTEXT	7
  ------------------
  475|  4.02M|    }
  476|    112|#if LJ_TARGET_X86ORX64
  477|    112|    else if ((actions & _UA_HANDLER_FRAME)) {
  ------------------
  |  |  433|    112|#define _UA_HANDLER_FRAME	4
  ------------------
  |  Branch (477:14): [True: 0, False: 112]
  ------------------
  478|       |      /* Workaround for ancient libgcc bug. Still present in RHEL 5.5. :-/
  479|       |      ** Real fix: http://gcc.gnu.org/viewcvs/trunk/gcc/unwind-dw2.c?r1=121165&r2=124837&pathrev=153877&diff_format=h
  480|       |      */
  481|      0|      _Unwind_SetGR(ctx, LJ_TARGET_EHRETREG, errcode);
  ------------------
  |  |  206|      0|#define LJ_TARGET_EHRETREG	0
  ------------------
  482|      0|      _Unwind_SetIP(ctx, (uintptr_t)lj_vm_unwind_rethrow);
  483|      0|      return _URC_INSTALL_CONTEXT;
  ------------------
  |  |  405|      0|#define _URC_INSTALL_CONTEXT	7
  ------------------
  484|      0|    }
  485|  4.02M|#endif
  486|       |#else
  487|       |    /* This is not the proper way to escape from the unwinder. We get away with
  488|       |    ** it on non-x64 because the interpreter restores all callee-saved regs.
  489|       |    */
  490|       |    lj_err_throw(L, errcode);
  491|       |#if LJ_TARGET_X64
  492|       |#error "Broken build system -- only use the provided Makefiles!"
  493|       |#endif
  494|       |#endif
  495|  4.02M|  }
  496|    112|  return _URC_CONTINUE_UNWIND;
  ------------------
  |  |  406|    112|#define _URC_CONTINUE_UNWIND	8
  ------------------
  497|  4.02M|}
lj_err_verify:
  505|  13.6k|{
  506|  13.6k|#if !LJ_TARGET_OSX
  507|       |  /* Check disabled on MacOS due to brilliant software engineering at Apple. */
  508|  13.6k|  struct dwarf_eh_bases ehb;
  509|  13.6k|  lj_assertX(_Unwind_Find_FDE((void *)lj_err_throw, &ehb), "broken build: external frame unwinding enabled, but missing -funwind-tables");
  ------------------
  |  |  366|  13.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  510|  13.6k|#endif
  511|       |  /* Check disabled, because of broken Fedora/ARM64. See #722.
  512|       |  lj_assertX(_Unwind_Find_FDE((void *)_Unwind_RaiseException, &ehb), "broken build: external frame unwinding enabled, but system libraries have no unwind tables");
  513|       |  */
  514|  13.6k|}
lj_err_register_mcode:
  605|  3.20k|{
  606|  3.20k|  ASMFunction handler = (ASMFunction)err_unwind_jit;
  607|  3.20k|  memcpy(info, err_frame_jit_template, sizeof(err_frame_jit_template));
  608|       |#if LJ_ABI_PAUTH
  609|       |#if LJ_TARGET_ARM64
  610|       |  handler = ptrauth_auth_and_resign(handler,
  611|       |    ptrauth_key_function_pointer, 0,
  612|       |    ptrauth_key_process_independent_code, info + ERR_FRAME_JIT_OFS_HANDLER);
  613|       |#else
  614|       |#error "missing pointer authentication support for this architecture"
  615|       |#endif
  616|       |#endif
  617|  3.20k|  memcpy(info + ERR_FRAME_JIT_OFS_HANDLER, &handler, sizeof(handler));
  ------------------
  |  |  592|  3.20k|#define ERR_FRAME_JIT_OFS_HANDLER	0x12
  ------------------
  618|  3.20k|  *(uint32_t *)(info + ERR_FRAME_JIT_OFS_CODE_SIZE) =
  ------------------
  |  |  594|  3.20k|#define ERR_FRAME_JIT_OFS_CODE_SIZE	(LJ_64 ? 0x2c : 0x24)
  |  |  ------------------
  |  |  |  |  640|  3.20k|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  619|  3.20k|    (uint32_t)(sz - sizeof(err_frame_jit_template) - (info - (uint8_t *)base));
  620|  3.20k|  __register_frame(info + ERR_FRAME_JIT_OFS_REGISTER);
  ------------------
  |  |  598|  3.20k|#define ERR_FRAME_JIT_OFS_REGISTER	0
  ------------------
  621|  3.20k|#ifdef LUA_USE_ASSERT
  622|  3.20k|  {
  623|  3.20k|    struct dwarf_eh_bases ehb;
  624|  3.20k|    lj_assertX(_Unwind_Find_FDE(info + sizeof(err_frame_jit_template)+1, &ehb),
  ------------------
  |  |  366|  3.20k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.20k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.20k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.20k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  625|  3.20k|	       "bad JIT unwind table registration");
  626|  3.20k|  }
  627|  3.20k|#endif
  628|  3.20k|  return info + sizeof(err_frame_jit_template);
  629|  3.20k|}
lj_err_deregister_mcode:
  632|  3.20k|{
  633|  3.20k|  UNUSED(base); UNUSED(sz);
  ------------------
  |  |   91|  3.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(base); UNUSED(sz);
  ------------------
  |  |   91|  3.20k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  634|  3.20k|  __deregister_frame(info + ERR_FRAME_JIT_OFS_REGISTER);
  ------------------
  |  |  598|  3.20k|#define ERR_FRAME_JIT_OFS_REGISTER	0
  ------------------
  635|  3.20k|}
lj_err_throw:
  769|  4.02M|{
  770|  4.02M|  global_State *g = G(L);
  ------------------
  |  |  705|  4.02M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.02M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  771|  4.02M|  lj_trace_abort(g);
  ------------------
  |  |   45|  4.02M|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  4.02M|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  4.02M|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  4.02M|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  772|  4.02M|  L->status = LUA_OK;
  ------------------
  |  |   43|  4.02M|#define LUA_OK		0
  ------------------
  773|  4.02M|#if LJ_UNWIND_EXT
  774|  4.02M|  err_raise_ext(g, errcode);
  775|       |  /*
  776|       |  ** A return from this function signals a corrupt C stack that cannot be
  777|       |  ** unwound. We have no choice but to call the panic function and exit.
  778|       |  **
  779|       |  ** Usually this is caused by a C function without unwind information.
  780|       |  ** This may happen if you've manually enabled LUAJIT_UNWIND_EXTERNAL
  781|       |  ** and forgot to recompile *every* non-C++ file with -funwind-tables.
  782|       |  */
  783|  4.02M|  if (G(L)->panic)
  ------------------
  |  |  705|  4.02M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.02M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (783:7): [True: 0, False: 4.02M]
  ------------------
  784|      0|    G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  785|       |#else
  786|       |#if LJ_HASJIT
  787|       |  setmref(g->jit_base, NULL);
  788|       |#endif
  789|       |  {
  790|       |    void *cf = err_unwind(L, NULL, errcode);
  791|       |    if (cframe_unwind_ff(cf))
  792|       |      lj_vm_unwind_ff(cframe_raw(cf));
  793|       |    else
  794|       |      lj_vm_unwind_c(cframe_raw(cf), errcode);
  795|       |  }
  796|       |#endif
  797|  4.02M|  exit(EXIT_FAILURE);
  798|  4.02M|}
lj_err_str:
  802|  13.7k|{
  803|  13.7k|  return lj_str_newz(L, err2msg(em));
  ------------------
  |  |   27|  13.7k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  804|  13.7k|}
lj_err_run:
  880|  2.03M|{
  881|  2.03M|  ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  578|  4.07M|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                ptrdiff_t ef = (LJ_HASJIT && tvref(G(L)->jit_base)) ? 0 : finderrfunc(L);
  ------------------
  |  |  217|  2.03M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.03M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 2.03M]
  |  |  ------------------
  ------------------
  882|  2.03M|  if (ef) {
  ------------------
  |  Branch (882:7): [True: 77, False: 2.03M]
  ------------------
  883|     77|    TValue *errfunc, *top;
  884|     77|    lj_state_checkstack(L, LUA_MINSTACK * 2);  /* Might raise new error. */
  ------------------
  |  |   88|     77|#define LUA_MINSTACK	20
  ------------------
  885|     77|    lj_trace_abort(G(L));
  ------------------
  |  |   45|     77|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|     77|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|     77|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|     77|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  886|     77|    errfunc = restorestack(L, ef);
  ------------------
  |  |   15|     77|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|     77|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  887|     77|    top = L->top;
  888|     77|    if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |  796|    154|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|     77|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|     77|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
                  if (!tvisfunc(errfunc) || L->status == LUA_ERRERR) {
  ------------------
  |  |   48|     40|#define LUA_ERRERR	5
  ------------------
  |  Branch (888:9): [True: 37, False: 40]
  |  Branch (888:31): [True: 0, False: 40]
  ------------------
  889|      0|      setstrV(L, top-1, lj_err_str(L, LJ_ERR_ERRERR));
  890|      0|      lj_err_throw(L, LUA_ERRERR);
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  891|      0|    }
  892|     77|    L->status = LUA_ERRERR;
  ------------------
  |  |   48|     77|#define LUA_ERRERR	5
  ------------------
  893|     77|    copyTV(L, top+LJ_FR2, top-1);
  ------------------
  |  |  569|     77|#define LJ_FR2			1
  ------------------
  894|     77|    copyTV(L, top-1, errfunc);
  895|     77|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|     77|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|     40|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  896|     77|    L->top = top+1;
  897|     77|    lj_vm_call(L, top, 1+1);  /* Stack: |errfunc|msg| -> |msg| */
  898|     77|  }
  899|  2.03M|  lj_err_throw(L, LUA_ERRRUN);
  ------------------
  |  |   45|  2.03M|#define LUA_ERRRUN	2
  ------------------
  900|  2.03M|}
lj_err_stkov:
  904|    225|{
  905|    225|  lj_debug_addloc(L, err2msg(LJ_ERR_STKOV), L->base-1, NULL);
  ------------------
  |  |   21|    225|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  906|    225|  lj_err_run(L);
  907|    225|}
lj_err_trace:
  912|    167|{
  913|    167|  if (errcode == LUA_ERRRUN)
  ------------------
  |  |   45|    167|#define LUA_ERRRUN	2
  ------------------
  |  Branch (913:7): [True: 167, False: 0]
  ------------------
  914|    167|    lj_err_run(L);
  915|      0|  else
  916|      0|    lj_err_throw(L, errcode);
  917|    167|}
lj_err_msg:
  939|     22|{
  940|     22|  err_msgv(L, em);
  941|     22|}
lj_err_lex:
  946|  1.98M|{
  947|  1.98M|  char buff[LUA_IDSIZE];
  948|  1.98M|  const char *msg;
  949|  1.98M|  lj_debug_shortname(buff, src, line);
  950|  1.98M|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|  1.98M|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  951|  1.98M|  msg = lj_strfmt_pushf(L, "%s:%d: %s", buff, line, msg);
  952|  1.98M|  if (tok)
  ------------------
  |  Branch (952:7): [True: 1.98M, False: 121]
  ------------------
  953|  1.98M|    lj_strfmt_pushf(L, err2msg(LJ_ERR_XNEAR), msg, tok);
  ------------------
  |  |   21|  1.98M|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  954|  1.98M|  lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|  1.98M|#define LUA_ERRSYNTAX	3
  ------------------
  955|  1.98M|}
lj_err_optype:
  959|  55.1k|{
  960|  55.1k|  const char *tname = lj_typename(o);
  ------------------
  |  | 1042|  55.1k|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|  55.1k|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|  55.1k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  55.1k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|  55.1k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|  55.1k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 127, False: 54.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    127|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  54.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  961|  55.1k|  const char *opname = err2msg(opm);
  ------------------
  |  |   21|  55.1k|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  962|  55.1k|  if (curr_funcisL(L)) {
  ------------------
  |  |  716|  55.1k|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|  55.1k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|  55.1k|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 55.1k, False: 0]
  |  |  ------------------
  ------------------
  963|  55.1k|    GCproto *pt = curr_proto(L);
  ------------------
  |  |  717|  55.1k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  ------------------
  |  |  |  |  480|  55.1k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  55.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  55.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  55.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 55.1k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  55.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  964|  55.1k|    const BCIns *pc = cframe_Lpc(L) - 1;
  ------------------
  |  |  295|  55.1k|#define cframe_Lpc(L)		cframe_pc(cframe_raw(L->cframe))
  |  |  ------------------
  |  |  |  |  287|  55.1k|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  55.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  965|  55.1k|    const char *oname = NULL;
  966|  55.1k|    const char *kind = lj_debug_slotname(pt, pc, (BCReg)(o-L->base), &oname);
  967|  55.1k|    if (kind)
  ------------------
  |  Branch (967:9): [True: 54.8k, False: 214]
  ------------------
  968|  54.8k|      err_msgv(L, LJ_ERR_BADOPRT, opname, kind, oname, tname);
  969|  55.1k|  }
  970|    214|  err_msgv(L, LJ_ERR_BADOPRV, opname, tname);
  971|  55.1k|}
lj_err_comp:
  975|    587|{
  976|    587|  const char *t1 = lj_typename(o1);
  ------------------
  |  | 1042|    587|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|    587|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|    587|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    587|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|    587|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|    587|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 211, False: 376]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    211|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    376|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  977|    587|  const char *t2 = lj_typename(o2);
  ------------------
  |  | 1042|    587|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|    587|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|    587|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|    587|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|    587|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|    587|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 196, False: 391]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    196|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    391|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  978|    587|  err_msgv(L, t1 == t2 ? LJ_ERR_BADCMPV : LJ_ERR_BADCMPT, t1, t2);
  ------------------
  |  Branch (978:15): [True: 106, False: 481]
  ------------------
  979|       |  /* This assumes the two "boolean" entries are commoned by the C compiler. */
  980|    587|}
lj_err_optype_call:
  984|  2.00M|{
  985|       |  /* Gross hack if lua_[p]call or pcall/xpcall fail for a non-callable object:
  986|       |  ** L->base still points to the caller. So add a dummy frame with L instead
  987|       |  ** of a function. See lua_getstack().
  988|       |  */
  989|  2.00M|  const BCIns *pc = cframe_Lpc(L);
  ------------------
  |  |  295|  2.00M|#define cframe_Lpc(L)		cframe_pc(cframe_raw(L->cframe))
  |  |  ------------------
  |  |  |  |  287|  2.00M|  (mref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), const BCIns))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  2.00M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  990|  2.00M|  if (((ptrdiff_t)pc & FRAME_TYPE) != FRAME_LUA) {
  ------------------
  |  |   28|  2.00M|#define FRAME_TYPE		3
  ------------------
  |  Branch (990:7): [True: 1.97M, False: 30.7k]
  ------------------
  991|  1.97M|    const char *tname = lj_typename(o);
  ------------------
  |  | 1042|  1.97M|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|  1.97M|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|  1.97M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  1.97M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|  1.97M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|  1.97M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 1.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  1.97M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  992|  1.97M|    setframe_gc(o, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|  1.97M|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  993|  1.97M|    if (LJ_FR2) o++;
  ------------------
  |  |  569|  1.97M|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  994|  1.97M|    setframe_pc(o, pc);
  ------------------
  |  |   51|  1.97M|#define setframe_pc(f, pc)	((f)->ftsz = (int64_t)(intptr_t)(pc))
  ------------------
  995|  1.97M|    L->top = L->base = o+1;
  996|  1.97M|    err_msgv(L, LJ_ERR_BADCALL, tname);
  997|  1.97M|  }
  998|  30.7k|  lj_err_optype(L, o, LJ_ERR_OPCALL);
  999|  2.00M|}
lj_err_callermsg:
 1003|  1.59k|{
 1004|  1.59k|  TValue *frame = NULL, *pframe = NULL;
 1005|  1.59k|  if (!(LJ_HASJIT && tvref(G(L)->jit_base))) {
  ------------------
  |  |  578|  3.18k|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (!(LJ_HASJIT && tvref(G(L)->jit_base))) {
  ------------------
  |  |  217|  1.59k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.59k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 1.59k]
  |  |  ------------------
  ------------------
 1006|  1.59k|    frame = L->base-1;
 1007|  1.59k|    if (frame_islua(frame)) {
  ------------------
  |  |   77|  1.59k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  1.59k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.59k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  1.59k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 716, False: 875]
  |  |  ------------------
  ------------------
 1008|    716|      pframe = frame_prevl(frame);
  ------------------
  |  |  108|    716|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|    716|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|    716|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
 1009|    875|    } else if (frame_iscont(frame)) {
  ------------------
  |  |   79|    875|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|    875|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    875|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    875|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    875|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    875|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 620, False: 255]
  |  |  ------------------
  ------------------
 1010|    620|      if (frame_iscont_fficb(frame)) {
  ------------------
  |  |  106|    620|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|  1.24k|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|    620|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 620]
  |  |  ------------------
  ------------------
 1011|      0|	pframe = frame;
 1012|      0|	frame = NULL;
 1013|    620|      } else {
 1014|    620|	pframe = frame_prevd(frame);
  ------------------
  |  |  109|    620|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|    620|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    620|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    620|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    620|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    620|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1015|    620|#if LJ_HASFFI
 1016|       |	/* Remove frame for FFI metamethods. */
 1017|    620|	if (frame_func(frame)->c.ffid >= FF_ffi_meta___index &&
  ------------------
  |  |   83|    620|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    620|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    620|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    620|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    620|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1017:6): [True: 620, False: 0]
  ------------------
 1018|    620|	    frame_func(frame)->c.ffid <= FF_ffi_meta___tostring) {
  ------------------
  |  |   83|    620|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|    620|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|    620|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|    620|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|    620|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1018:6): [True: 620, False: 0]
  ------------------
 1019|    620|	  L->base = pframe+1;
 1020|    620|	  L->top = frame;
 1021|    620|	  setcframe_pc(cframe_raw(L->cframe), frame_contpc(frame));
  ------------------
  |  |  291|    620|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|    620|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
 1022|    620|	}
 1023|    620|#endif
 1024|    620|      }
 1025|    620|    }
 1026|  1.59k|  }
 1027|  1.59k|  lj_debug_addloc(L, msg, pframe, frame);
 1028|  1.59k|  lj_err_run(L);
 1029|  1.59k|}
lj_err_callerv:
 1033|    693|{
 1034|    693|  const char *msg;
 1035|    693|  va_list argp;
 1036|    693|  va_start(argp, em);
 1037|    693|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|    693|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1038|    693|  va_end(argp);
 1039|    693|  lj_err_callermsg(L, msg);
 1040|    693|}
lj_err_caller:
 1044|    777|{
 1045|    777|  lj_err_callermsg(L, err2msg(em));
  ------------------
  |  |   21|    777|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1046|    777|}
lj_err_arg:
 1076|     12|{
 1077|     12|  err_argmsg(L, narg, err2msg(em));
  ------------------
  |  |   21|     12|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1078|     12|}
lj_err_argtype:
 1082|     85|{
 1083|     85|  const char *tname, *msg;
 1084|     85|  if (narg <= LUA_REGISTRYINDEX) {
  ------------------
  |  |   36|     85|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (1084:7): [True: 0, False: 85]
  ------------------
 1085|      0|    if (narg >= LUA_GLOBALSINDEX) {
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (1085:9): [True: 0, False: 0]
  ------------------
 1086|      0|      tname = lj_obj_itypename[~LJ_TTAB];
  ------------------
  |  |  271|      0|#define LJ_TTAB			(~11u)
  ------------------
 1087|      0|    } else {
 1088|      0|      GCfunc *fn = curr_func(L);
  ------------------
  |  |  710|      0|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|      0|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|      0|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|      0|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1089|      0|      int idx = LUA_GLOBALSINDEX - narg;
  ------------------
  |  |   38|      0|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
 1090|      0|      if (idx <= fn->c.nupvalues)
  ------------------
  |  Branch (1090:11): [True: 0, False: 0]
  ------------------
 1091|      0|	tname = lj_typename(&fn->c.upvalue[idx-1]);
  ------------------
  |  | 1042|      0|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|      0|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1092|      0|      else
 1093|      0|	tname = lj_obj_typename[0];
 1094|      0|    }
 1095|     85|  } else {
 1096|     85|    TValue *o = narg < 0 ? L->top + narg : L->base + narg-1;
  ------------------
  |  Branch (1096:17): [True: 0, False: 85]
  ------------------
 1097|     85|    tname = o < L->top ? lj_typename(o) : lj_obj_typename[0];
  ------------------
  |  | 1042|     84|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|     84|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|     84|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|     84|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|     84|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|     84|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 2, False: 82]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      2|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     82|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1097:13): [True: 84, False: 1]
  ------------------
 1098|     85|  }
 1099|     85|  msg = lj_strfmt_pushf(L, err2msg(LJ_ERR_BADTYPE), xname, tname);
  ------------------
  |  |   21|     85|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1100|     85|  err_argmsg(L, narg, msg);
 1101|     85|}
lj_err_argt:
 1105|     82|{
 1106|     82|  lj_err_argtype(L, narg, lj_obj_typename[tt+1]);
 1107|     82|}
lua_error:
 1120|  1.03k|{
 1121|  1.03k|  lj_err_run(L);
 1122|      0|  return 0;  /* unreachable */
 1123|  1.03k|}
luaL_where:
 1138|    258|{
 1139|    258|  int size;
 1140|    258|  cTValue *frame = lj_debug_frame(L, level, &size);
 1141|    258|  lj_debug_addloc(L, "", frame, size ? frame+size : NULL);
  ------------------
  |  Branch (1141:33): [True: 256, False: 2]
  ------------------
 1142|    258|}
luaL_error:
 1145|      9|{
 1146|      9|  const char *msg;
 1147|      9|  va_list argp;
 1148|      9|  va_start(argp, fmt);
 1149|      9|  msg = lj_strfmt_pushvf(L, fmt, argp);
 1150|      9|  va_end(argp);
 1151|      9|  lj_err_callermsg(L, msg);
 1152|      0|  return 0;  /* unreachable */
 1153|      9|}
lj_err.c:err_unwind:
  110|  8.04M|{
  111|  8.04M|  TValue *frame = L->base-1;
  112|  8.04M|  void *cf = L->cframe;
  113|  13.0M|  while (cf) {
  ------------------
  |  Branch (113:10): [True: 13.0M, False: 0]
  ------------------
  114|  13.0M|    int32_t nres = cframe_nres(cframe_raw(cf));
  ------------------
  |  |  280|  13.0M|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  13.0M|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  115|  13.0M|    if (nres < 0) {  /* C frame without Lua frame? */
  ------------------
  |  Branch (115:9): [True: 3.97M, False: 9.03M]
  ------------------
  116|  3.97M|      TValue *top = restorestack(L, -nres);
  ------------------
  |  |   15|  3.97M|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|  3.97M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  117|  3.97M|      if (frame < top) {  /* Frame reached? */
  ------------------
  |  Branch (117:11): [True: 3.97M, False: 0]
  ------------------
  118|  3.97M|	if (errcode) {
  ------------------
  |  Branch (118:6): [True: 1.98M, False: 1.98M]
  ------------------
  119|  1.98M|	  L->base = frame+1;
  120|  1.98M|	  L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|  1.98M|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  1.98M|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  121|  1.98M|	  unwindstack(L, top);
  122|  1.98M|	}
  123|  3.97M|	return cf;
  124|  3.97M|      }
  125|  3.97M|    }
  126|  9.03M|    if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  217|  9.03M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  9.03M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (frame <= tvref(L->stack)+LJ_FR2)
  ------------------
  |  |  569|  9.03M|#define LJ_FR2			1
  ------------------
  |  Branch (126:9): [True: 0, False: 9.03M]
  ------------------
  127|      0|      break;
  128|  9.03M|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|  9.03M|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  9.03M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  9.03M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  9.03M|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  9.03M|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (76:25): [True: 0, False: 9.03M]
  |  |  ------------------
  ------------------
  129|   383k|    case FRAME_LUA:  /* Lua frame. */
  ------------------
  |  Branch (129:5): [True: 383k, False: 8.65M]
  ------------------
  130|  2.81M|    case FRAME_LUAP:
  ------------------
  |  Branch (130:5): [True: 2.42M, False: 6.61M]
  ------------------
  131|  2.81M|      frame = frame_prevl(frame);
  ------------------
  |  |  108|  2.81M|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  2.81M|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  2.81M|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  132|  2.81M|      break;
  133|    336|    case FRAME_C:  /* C frame. */
  ------------------
  |  Branch (133:5): [True: 336, False: 9.03M]
  ------------------
  134|    336|    unwind_c:
  135|    336|#if LJ_UNWIND_EXT
  136|    336|      if (errcode) {
  ------------------
  |  Branch (136:11): [True: 112, False: 224]
  ------------------
  137|    112|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|    112|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|    112|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    112|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    112|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    112|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    112|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  138|    112|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|    112|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|    112|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  139|    112|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|    112|#define LJ_FR2			1
  ------------------
  140|    224|      } else if (cf != stopcf) {
  ------------------
  |  Branch (140:18): [True: 112, False: 112]
  ------------------
  141|    112|	cf = cframe_prev(cf);
  ------------------
  |  |  281|    112|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|    112|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  142|    112|	frame = frame_prevd(frame);
  ------------------
  |  |  109|    112|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|    112|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    112|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    112|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    112|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    112|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  143|    112|	break;
  144|    112|      }
  145|    224|      return NULL;  /* Continue unwinding. */
  146|       |#else
  147|       |      UNUSED(stopcf);
  148|       |      cf = cframe_prev(cf);
  149|       |      frame = frame_prevd(frame);
  150|       |      break;
  151|       |#endif
  152|  9.11k|    case FRAME_CP:  /* Protected C frame. */
  ------------------
  |  Branch (152:5): [True: 9.11k, False: 9.02M]
  ------------------
  153|  9.11k|      if (cframe_canyield(cf)) {  /* Resume? */
  ------------------
  |  |  292|  9.11k|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|  9.11k|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 74, False: 9.04k]
  |  |  ------------------
  ------------------
  154|     74|	if (errcode) {
  ------------------
  |  Branch (154:6): [True: 37, False: 37]
  ------------------
  155|     37|	  hook_leave(G(L));  /* Assumes nobody uses coroutines inside hooks. */
  ------------------
  |  |  683|     37|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|     37|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  156|     37|	  L->cframe = NULL;
  157|     37|	  L->status = (uint8_t)errcode;
  158|     37|	}
  159|     74|	return cf;
  160|     74|      }
  161|  9.04k|      if (errcode) {
  ------------------
  |  Branch (161:11): [True: 4.52k, False: 4.52k]
  ------------------
  162|  4.52k|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|  4.52k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  4.52k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  4.52k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  4.52k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  4.52k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  4.52k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  163|  4.52k|	L->cframe = cframe_prev(cf);
  ------------------
  |  |  281|  4.52k|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|  4.52k|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  164|  4.52k|	unwindstack(L, frame - LJ_FR2);
  ------------------
  |  |  569|  4.52k|#define LJ_FR2			1
  ------------------
  165|  4.52k|      }
  166|  9.04k|      return cf;
  167|  2.03M|    case FRAME_CONT:  /* Continuation frame. */
  ------------------
  |  Branch (167:5): [True: 2.03M, False: 6.99M]
  ------------------
  168|  2.03M|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|  2.03M|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|  4.07M|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|  2.03M|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 2.03M]
  |  |  ------------------
  ------------------
  169|      0|	goto unwind_c;
  170|       |      /* fallthrough */
  171|  2.15M|    case FRAME_VARG:  /* Vararg frame. */
  ------------------
  |  Branch (171:5): [True: 116k, False: 8.92M]
  ------------------
  172|  2.15M|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  2.15M|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  2.15M|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  2.15M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  2.15M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  2.15M|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  2.15M|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|  2.15M|      break;
  174|  4.06M|    case FRAME_PCALL:  /* FF pcall() frame. */
  ------------------
  |  Branch (174:5): [True: 4.06M, False: 4.97M]
  ------------------
  175|  4.06M|    case FRAME_PCALLH:  /* FF pcall() frame inside hook. */
  ------------------
  |  Branch (175:5): [True: 44, False: 9.03M]
  ------------------
  176|  4.06M|      if (errcode) {
  ------------------
  |  Branch (176:11): [True: 2.03M, False: 2.03M]
  ------------------
  177|  2.03M|	global_State *g;
  178|  2.03M|	if (errcode == LUA_YIELD) {
  ------------------
  |  |   44|  2.03M|#define LUA_YIELD	1
  ------------------
  |  Branch (178:6): [True: 0, False: 2.03M]
  ------------------
  179|      0|	  frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  180|      0|	  break;
  181|      0|	}
  182|  2.03M|	g = G(L);
  ------------------
  |  |  705|  2.03M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.03M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  183|  2.03M|	setgcref(g->cur_L, obj2gco(L));
  ------------------
  |  |   72|  2.03M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  184|  2.03M|	if (frame_typep(frame) == FRAME_PCALL)
  ------------------
  |  |   76|  2.03M|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  2.03M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  2.03M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  2.03M|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  2.03M|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (184:6): [True: 2.03M, False: 22]
  ------------------
  185|  2.03M|	  hook_leave(g);
  ------------------
  |  |  683|  2.03M|#define hook_leave(g)		((g)->hookmask &= ~HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  2.03M|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  186|  2.03M|	L->base = frame_prevd(frame) + 1;
  ------------------
  |  |  109|  2.03M|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  2.03M|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  2.03M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  2.03M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  2.03M|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  2.03M|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  187|  2.03M|	L->cframe = cf;
  188|  2.03M|	unwindstack(L, L->base);
  189|  2.03M|      }
  190|  4.06M|      return (void *)((intptr_t)cf | CFRAME_UNWIND_FF);
  ------------------
  |  |  276|  4.06M|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  ------------------
  191|  9.03M|    }
  192|  9.03M|  }
  193|       |  /* No C frame. */
  194|      0|  if (errcode) {
  ------------------
  |  Branch (194:7): [True: 0, False: 0]
  ------------------
  195|      0|    L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = tvref(L->stack)+1+LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  196|      0|    L->cframe = NULL;
  197|      0|    unwindstack(L, L->base);
  198|      0|    if (G(L)->panic)
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (198:9): [True: 0, False: 0]
  ------------------
  199|      0|      G(L)->panic(L);
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  200|      0|    exit(EXIT_FAILURE);
  201|      0|  }
  202|      0|  return L;  /* Anything non-NULL will do. */
  203|      0|}
lj_err.c:unwindstack:
   99|  4.02M|{
  100|  4.02M|  lj_func_closeuv(L, top);
  101|  4.02M|  if (top < L->top-1) {
  ------------------
  |  Branch (101:7): [True: 4.02M, False: 1.60k]
  ------------------
  102|  4.02M|    copyTV(L, top, L->top-1);
  103|  4.02M|    L->top = top+1;
  104|  4.02M|  }
  105|  4.02M|  lj_state_relimitstack(L);
  106|  4.02M|}
lj_err.c:err_raise_ext:
  754|  4.02M|{
  755|  4.02M|  memset(&static_uex, 0, sizeof(static_uex));
  756|  4.02M|  static_uex.ex.exclass = LJ_UEXCLASS_MAKE(errcode);
  ------------------
  |  |  410|  4.02M|#define LJ_UEXCLASS_MAKE(c)	(LJ_UEXCLASS | (uint64_t)(c))
  |  |  ------------------
  |  |  |  |  409|  4.02M|#define LJ_UEXCLASS		0x4c55414a49543200ULL	/* LUAJIT2\0 */
  |  |  ------------------
  ------------------
  757|  4.02M|  static_uex.g = g;
  758|  4.02M|  _Unwind_RaiseException(&static_uex.ex);
  759|  4.02M|}
lj_err.c:finderrfunc:
  829|  2.03M|{
  830|  2.03M|  cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  217|  2.03M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.03M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                cTValue *frame = L->base-1, *bot = tvref(L->stack)+LJ_FR2;
  ------------------
  |  |  569|  2.03M|#define LJ_FR2			1
  ------------------
  831|  2.03M|  void *cf = L->cframe;
  832|  5.73M|  while (frame > bot && cf) {
  ------------------
  |  Branch (832:10): [True: 5.73M, False: 0]
  |  Branch (832:25): [True: 5.73M, False: 0]
  ------------------
  833|  5.73M|    while (cframe_nres(cframe_raw(cf)) < 0) {  /* cframe without frame? */
  ------------------
  |  |  280|  5.73M|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|  5.73M|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
  |  Branch (833:12): [True: 167, False: 5.73M]
  ------------------
  834|    167|      if (frame >= restorestack(L, -cframe_nres(cf)))
  ------------------
  |  |   15|    167|#define restorestack(L, n)	((TValue *)(mref(L->stack, char) + (n)))
  |  |  ------------------
  |  |  |  |   36|    167|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (834:11): [True: 0, False: 167]
  ------------------
  835|      0|	break;
  836|    167|      if (cframe_errfunc(cf) >= 0)  /* Error handler not inherited (-1)? */
  ------------------
  |  |  279|    167|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|    167|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (836:11): [True: 167, False: 0]
  ------------------
  837|    167|	return cframe_errfunc(cf);
  ------------------
  |  |  279|    167|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|    167|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  838|      0|      cf = cframe_prev(cf);  /* Else unwind cframe and continue searching. */
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  839|      0|      if (cf == NULL)
  ------------------
  |  Branch (839:11): [True: 0, False: 0]
  ------------------
  840|      0|	return 0;
  841|      0|    }
  842|  5.73M|    switch (frame_typep(frame)) {
  ------------------
  |  |   76|  5.73M|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   47|  5.73M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  ------------------
  |  |  |  |   30|  5.73M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  5.73M|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  ------------------
  |  |  |  |  |  |   29|  5.73M|#define FRAME_P			4
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  843|   191k|    case FRAME_LUA:
  ------------------
  |  Branch (843:5): [True: 191k, False: 5.53M]
  ------------------
  844|  2.61M|    case FRAME_LUAP:
  ------------------
  |  Branch (844:5): [True: 2.42M, False: 3.30M]
  ------------------
  845|  2.61M|      frame = frame_prevl(frame);
  ------------------
  |  |  108|  2.61M|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  2.61M|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  2.61M|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  846|  2.61M|      break;
  847|    112|    case FRAME_C:
  ------------------
  |  Branch (847:5): [True: 112, False: 5.73M]
  ------------------
  848|    112|      cf = cframe_prev(cf);
  ------------------
  |  |  281|    112|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|    112|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  849|       |      /* fallthrough */
  850|  58.4k|    case FRAME_VARG:
  ------------------
  |  Branch (850:5): [True: 58.2k, False: 5.67M]
  ------------------
  851|  58.4k|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  58.4k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  58.4k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  58.4k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  58.4k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  58.4k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  58.4k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  852|  58.4k|      break;
  853|  1.01M|    case FRAME_CONT:
  ------------------
  |  Branch (853:5): [True: 1.01M, False: 4.71M]
  ------------------
  854|  1.01M|      if (frame_iscont_fficb(frame))
  ------------------
  |  |  106|  1.01M|  (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |  585|  2.03M|#define LJ_HASFFI		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASFFI && frame_contv(f) == LJ_CONT_FFI_CALLBACK)
  |  |  ------------------
  |  |  |  |   91|  1.01M|#define frame_contv(f)		(((f)-3)->u64)
  |  |  ------------------
  |  |  |  Branch (106:17): [True: 0, False: 1.01M]
  |  |  ------------------
  ------------------
  855|      0|	cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  856|  1.01M|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  1.01M|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  1.01M|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.01M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  1.01M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  1.01M|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.01M|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  857|  1.01M|      break;
  858|  4.55k|    case FRAME_CP:
  ------------------
  |  Branch (858:5): [True: 4.55k, False: 5.72M]
  ------------------
  859|  4.55k|      if (cframe_canyield(cf)) return 0;
  ------------------
  |  |  292|  4.55k|#define cframe_canyield(cf)	((intptr_t)(cf) & CFRAME_RESUME)
  |  |  ------------------
  |  |  |  |  275|  4.55k|#define CFRAME_RESUME		1
  |  |  ------------------
  |  |  |  Branch (292:29): [True: 37, False: 4.52k]
  |  |  ------------------
  ------------------
  860|  4.52k|      if (cframe_errfunc(cf) >= 0)
  ------------------
  |  |  279|  4.52k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  4.52k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  |  Branch (860:11): [True: 4.52k, False: 0]
  ------------------
  861|  4.52k|	return cframe_errfunc(cf);
  ------------------
  |  |  279|  4.52k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  4.52k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  862|      0|      cf = cframe_prev(cf);
  ------------------
  |  |  281|      0|#define cframe_prev(cf)		(*(void **)(((char *)(cf))+CFRAME_OFS_PREV))
  |  |  ------------------
  |  |  |  |  159|      0|#define CFRAME_OFS_PREV		(4*8)
  |  |  ------------------
  ------------------
  863|      0|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  864|      0|      break;
  865|  2.03M|    case FRAME_PCALL:
  ------------------
  |  Branch (865:5): [True: 2.03M, False: 3.69M]
  ------------------
  866|  2.03M|    case FRAME_PCALLH:
  ------------------
  |  Branch (866:5): [True: 22, False: 5.73M]
  ------------------
  867|  2.03M|      if (frame_func(frame_prevd(frame))->c.ffid == FF_xpcall)
  ------------------
  |  |   83|  2.03M|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|  2.03M|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|  2.03M|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|  2.03M|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|  2.03M|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (867:11): [True: 77, False: 2.03M]
  ------------------
  868|     77|	return savestack(L, frame_prevd(frame)+1);  /* xpcall's errorfunc. */
  ------------------
  |  |   14|     77|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|     77|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  869|  2.03M|      return 0;
  870|      0|    default:
  ------------------
  |  Branch (870:5): [True: 0, False: 5.73M]
  ------------------
  871|      0|      lj_assertL(0, "bad frame type");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  872|      0|      return 0;
  873|  5.73M|    }
  874|  5.73M|  }
  875|      0|  return 0;
  876|  2.03M|}
lj_err.c:err_msgv:
  922|  2.03M|{
  923|  2.03M|  const char *msg;
  924|  2.03M|  va_list argp;
  925|  2.03M|  va_start(argp, em);
  926|  2.03M|  if (LJ_HASJIT) {
  ------------------
  |  |  578|  2.03M|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  927|  2.03M|    TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|  2.03M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.03M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  928|  2.03M|    if (base) L->base = base;
  ------------------
  |  Branch (928:9): [True: 0, False: 2.03M]
  ------------------
  929|  2.03M|  }
  930|  2.03M|  if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  716|  2.03M|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|  2.03M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|  2.03M|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 55.7k, False: 1.97M]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  718|  55.7k|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|  55.7k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|  55.7k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|  55.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|  55.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|  55.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 55.7k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|  55.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  931|  2.03M|  msg = lj_strfmt_pushvf(L, err2msg(em), argp);
  ------------------
  |  |   21|  2.03M|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
  932|  2.03M|  va_end(argp);
  933|  2.03M|  lj_debug_addloc(L, msg, L->base-1, NULL);
  934|  2.03M|  lj_err_run(L);
  935|  2.03M|}
lj_err.c:err_argmsg:
 1051|     97|{
 1052|     97|  const char *fname = "?";
 1053|     97|  const char *ftype = lj_debug_funcname(L, L->base - 1, &fname);
 1054|     97|  if (narg < 0 && narg > LUA_REGISTRYINDEX)
  ------------------
  |  |   36|      0|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  |  Branch (1054:7): [True: 0, False: 97]
  |  Branch (1054:19): [True: 0, False: 0]
  ------------------
 1055|      0|    narg = (int)(L->top - L->base) + narg + 1;
 1056|     97|  if (ftype && ftype[3] == 'h' && --narg == 0)  /* Check for "method". */
  ------------------
  |  Branch (1056:7): [True: 97, False: 0]
  |  Branch (1056:16): [True: 2, False: 95]
  |  Branch (1056:35): [True: 0, False: 2]
  ------------------
 1057|      0|    msg = lj_strfmt_pushf(L, err2msg(LJ_ERR_BADSELF), fname, msg);
  ------------------
  |  |   21|      0|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1058|     97|  else
 1059|     97|    msg = lj_strfmt_pushf(L, err2msg(LJ_ERR_BADARG), narg, fname, msg);
  ------------------
  |  |   21|     97|#define err2msg(em)	(lj_err_allmsg+(int)(em))
  ------------------
 1060|     97|  lj_err_callermsg(L, msg);
 1061|     97|}

lj_ffrecord_func:
 1586|  37.7k|{
 1587|  37.7k|  RecordFFData rd;
 1588|  37.7k|  uint32_t m = recdef_lookup(J->fn);
 1589|  37.7k|  rd.data = m & 0xff;
 1590|  37.7k|  rd.nres = 1;  /* Default is one result. */
 1591|  37.7k|  rd.argv = J->L->base;
 1592|  37.7k|  J->base[J->maxslot] = 0;  /* Mark end of arguments. */
 1593|  37.7k|  (recff_func[m >> 8])(J, &rd);  /* Call recff_* handler. */
 1594|  37.7k|  if (rd.nres >= 0) {
  ------------------
  |  Branch (1594:7): [True: 36.9k, False: 820]
  ------------------
 1595|  36.9k|    if (J->postproc == LJ_POST_NONE) J->postproc = LJ_POST_FFRETRY;
  ------------------
  |  Branch (1595:9): [True: 36.9k, False: 0]
  ------------------
 1596|  36.9k|    lj_record_ret(J, 0, rd.nres);
 1597|  36.9k|  }
 1598|  37.7k|}
lj_ffrecord.c:argv2int:
   70|    332|{
   71|    332|  if (!lj_strscan_numberobj(o))
  ------------------
  |  Branch (71:7): [True: 0, False: 332]
  ------------------
   72|      0|    lj_trace_err(J, LJ_TRERR_BADTYPE);
   73|    332|  return tvisint(o) ? intV(o) : lj_num2int(numV(o));
  ------------------
  |  |  803|    332|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|    664|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? intV(o) : lj_num2int(numV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return tvisint(o) ? intV(o) : lj_num2int(numV(o));
  ------------------
  |  | 1000|    664|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 332, False: 0]
  |  |  ------------------
  ------------------
   74|    332|}
lj_ffrecord.c:recdef_lookup:
 1577|  37.7k|{
 1578|  37.7k|  if (fn->c.ffid < sizeof(recff_idmap)/sizeof(recff_idmap[0]))
  ------------------
  |  Branch (1578:7): [True: 37.7k, False: 0]
  ------------------
 1579|  37.7k|    return recff_idmap[fn->c.ffid];
 1580|      0|  else
 1581|      0|    return 0;
 1582|  37.7k|}
lj_ffrecord.c:recff_nyi:
  163|    817|{
  164|    817|  if (J->cur.nins < (IRRef)J->param[JIT_P_minstitch] + REF_BASE) {
  ------------------
  |  Branch (164:7): [True: 0, False: 817]
  ------------------
  165|      0|    lj_trace_err_info(J, LJ_TRERR_TRACEUV);
  166|    817|  } else {
  167|       |    /* Can only stitch from Lua call. */
  168|    817|    if (J->framedepth && frame_islua(J->L->base-1)) {
  ------------------
  |  |   77|    817|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|    817|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    817|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|    817|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 817, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (168:9): [True: 817, False: 0]
  ------------------
  169|    817|      BCOp op = bc_op(*frame_pc(J->L->base-1));
  ------------------
  |  |   34|    817|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  170|       |      /* Stitched trace cannot start with *M op with variable # of args. */
  171|    817|      if (!(op == BC_CALLM || op == BC_CALLMT ||
  ------------------
  |  Branch (171:13): [True: 166, False: 651]
  |  Branch (171:31): [True: 0, False: 651]
  ------------------
  172|    817|	    op == BC_RETM || op == BC_TSETM)) {
  ------------------
  |  Branch (172:6): [True: 0, False: 651]
  |  Branch (172:23): [True: 0, False: 651]
  ------------------
  173|    651|	switch (J->fn->c.ffid) {
  174|      0|	case FF_error:
  ------------------
  |  Branch (174:2): [True: 0, False: 651]
  ------------------
  175|      0|	case FF_debug_sethook:
  ------------------
  |  Branch (175:2): [True: 0, False: 651]
  ------------------
  176|     18|	case FF_jit_flush:
  ------------------
  |  Branch (176:2): [True: 18, False: 633]
  ------------------
  177|     18|	  break;  /* Don't stitch across special builtins. */
  178|    633|	default:
  ------------------
  |  Branch (178:2): [True: 633, False: 18]
  ------------------
  179|    633|	  recff_stitch(J);  /* Use trace stitching. */
  180|    633|	  rd->nres = -1;
  181|    633|	  return;
  182|    651|	}
  183|    651|      }
  184|    817|    }
  185|       |    /* Otherwise stop trace and return to interpreter. */
  186|    184|    lj_record_stop(J, LJ_TRLINK_RETURN, 0);
  187|    184|    rd->nres = -1;
  188|    184|  }
  189|    817|}
lj_ffrecord.c:recff_stitch:
  111|    633|{
  112|    633|  ASMFunction cont = lj_cont_stitch;
  113|    633|  lua_State *L = J->L;
  114|    633|  TValue *base = L->base;
  115|    633|  BCReg nslot = J->maxslot + 1 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  116|    633|  TValue *nframe = base + 1 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  117|    633|  const BCIns *pc = frame_pc(base-1);
  ------------------
  |  |   48|    633|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  ------------------
  |  |  |  |   47|    633|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
  118|    633|  TValue *pframe = frame_prevl(base-1);
  ------------------
  |  |  108|    633|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|    633|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|    633|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  119|    633|  int errcode;
  120|       |
  121|       |  /* Move func + args up in Lua stack and insert continuation. */
  122|    633|  memmove(&base[1], &base[-1-LJ_FR2], sizeof(TValue)*nslot);
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  123|    633|  setframe_ftsz(nframe, ((char *)nframe - (char *)pframe) + FRAME_CONT);
  ------------------
  |  |   50|    633|#define setframe_ftsz(f, sz)	((f)->ftsz = (sz))
  ------------------
  124|    633|  setcont(base-LJ_FR2, cont);
  ------------------
  |  |  895|    633|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|    633|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  125|    633|  setframe_pc(base, pc);
  ------------------
  |  |   51|    633|#define setframe_pc(f, pc)	((f)->ftsz = (int64_t)(intptr_t)(pc))
  ------------------
  126|    633|  setnilV(base-1-LJ_FR2);  /* Incorrect, but rec_check_slots() won't run anymore. */
  ------------------
  |  |  872|    633|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  127|    633|  L->base += 2 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  128|    633|  L->top += 2 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  129|       |
  130|       |  /* Ditto for the IR. */
  131|    633|  memmove(&J->base[1], &J->base[-1-LJ_FR2], sizeof(TRef)*nslot);
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  132|    633|#if LJ_FR2
  133|    633|  J->base[2] = TREF_FRAME;
  ------------------
  |  |  498|    633|#define TREF_FRAME		0x00010000
  ------------------
  134|    633|  J->base[-1] = lj_ir_k64(J, IR_KNUM, u64ptr(contptr(cont)));
  ------------------
  |  |   98|    633|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
  135|    633|  J->base[0] = lj_ir_k64(J, IR_KNUM, u64ptr(pc)) | TREF_CONT;
  ------------------
  |  |   98|    633|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
                J->base[0] = lj_ir_k64(J, IR_KNUM, u64ptr(pc)) | TREF_CONT;
  ------------------
  |  |  499|    633|#define TREF_CONT		0x00020000
  ------------------
  136|       |#else
  137|       |  J->base[0] = lj_ir_kptr(J, contptr(cont)) | TREF_CONT;
  138|       |#endif
  139|    633|  J->ktrace = tref_ref((J->base[-1-LJ_FR2] = lj_ir_ktrace(J)));
  ------------------
  |  |  504|    633|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  140|    633|  J->base += 2 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  141|    633|  J->baseslot += 2 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  142|    633|  J->framedepth++;
  143|       |
  144|    633|  errcode = lj_vm_cpcall(L, NULL, J, rec_stop_stitch_cp);
  145|       |
  146|       |  /* Undo Lua stack changes. */
  147|    633|  memmove(&base[-1-LJ_FR2], &base[1], sizeof(TValue)*nslot);
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  148|    633|  setframe_pc(base-1, pc);
  ------------------
  |  |   51|    633|#define setframe_pc(f, pc)	((f)->ftsz = (int64_t)(intptr_t)(pc))
  ------------------
  149|    633|  L->base -= 2 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  150|    633|  L->top -= 2 + LJ_FR2;
  ------------------
  |  |  569|    633|#define LJ_FR2			1
  ------------------
  151|       |
  152|    633|  if (errcode) {
  ------------------
  |  Branch (152:7): [True: 0, False: 633]
  ------------------
  153|      0|    if (errcode == LUA_ERRRUN)
  ------------------
  |  |   45|      0|#define LUA_ERRRUN	2
  ------------------
  |  Branch (153:9): [True: 0, False: 0]
  ------------------
  154|      0|      copyTV(L, L->top-1, L->top + (1 + LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  155|      0|    else
  156|      0|      setintV(L->top-1, (int32_t)LJ_TRERR_RECERR);
  157|      0|    lj_err_throw(L, errcode);  /* Propagate errors. */
  158|      0|  }
  159|    633|}
lj_ffrecord.c:rec_stop_stitch_cp:
  102|    633|{
  103|    633|  jit_State *J = (jit_State *)ud;
  104|    633|  lj_record_stop(J, LJ_TRLINK_STITCH, 0);
  105|    633|  UNUSED(L); UNUSED(dummy);
  ------------------
  |  |   91|    633|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(dummy);
  ------------------
  |  |   91|    633|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  106|    633|  return NULL;
  107|    633|}
lj_ffrecord.c:recff_assert:
  215|     36|{
  216|       |  /* Arguments already specialized. The interpreter throws for nil/false. */
  217|     36|  rd->nres = J->maxslot;  /* Pass through all arguments. */
  218|     36|}
lj_ffrecord.c:recff_type:
  221|     60|{
  222|       |  /* Arguments already specialized. Result is a constant string. Neat, huh? */
  223|     60|  uint32_t t;
  224|     60|  if (tvisnumber(&rd->argv[0]))
  ------------------
  |  |  802|     60|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|     60|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     60|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     60|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 60]
  |  |  ------------------
  ------------------
  225|      0|    t = ~LJ_TNUMX;
  ------------------
  |  |  274|      0|#define LJ_TNUMX		(~13u)
  ------------------
  226|     60|  else if (LJ_64 && !LJ_GC64 && tvislightud(&rd->argv[0]))
  ------------------
  |  |  640|    120|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                else if (LJ_64 && !LJ_GC64 && tvislightud(&rd->argv[0]))
  ------------------
  |  |  562|     60|#define LJ_GC64			1
  ------------------
                else if (LJ_64 && !LJ_GC64 && tvislightud(&rd->argv[0]))
  ------------------
  |  |  793|      0|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|      0|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (793:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (226:21): [Folded - Ignored]
  ------------------
  227|      0|    t = ~LJ_TLIGHTUD;
  ------------------
  |  |  263|      0|#define LJ_TLIGHTUD		(~3u)
  ------------------
  228|     60|  else
  229|     60|    t = ~itype(&rd->argv[0]);
  ------------------
  |  |  781|     60|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  230|     60|  J->base[0] = lj_ir_kstr(J, strV(&J->fn->c.upvalue[t]));
  ------------------
  |  |   72|     60|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|    120|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 60, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  231|     60|  UNUSED(rd);
  ------------------
  |  |   91|     60|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  232|     60|}
lj_ffrecord.c:recff_next:
  538|      3|{
  539|       |#if LJ_BE
  540|       |  /* YAGNI: Disabled on big-endian due to issues with lj_vm_next,
  541|       |  ** IR_HIOP, RID_RETLO/RID_RETHI and ra_destpair.
  542|       |  */
  543|       |  recff_nyi(J, rd);
  544|       |#else
  545|      3|  TRef tab = J->base[0];
  546|      3|  if (tref_istab(tab)) {
  ------------------
  |  |  518|      3|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|      3|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  547|      3|    RecordIndex ix;
  548|      3|    cTValue *keyv;
  549|      3|    ix.tab = tab;
  550|      3|    if (tref_isnil(J->base[1])) {  /* Shortcut for start of traversal. */
  ------------------
  |  |  511|      3|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|      3|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  551|      0|      ix.key = lj_ir_kint(J, 0);
  552|      0|      keyv = niltvg(J2G(J));
  ------------------
  |  |  669|      0|  check_exp(tvisnil(&(g)->nilnode.val), &(g)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  553|      3|    } else {
  554|      3|      TRef tmp = recff_tmpref(J, J->base[1], IRTMPREF_IN1);
  ------------------
  |  |  228|      3|#define IRTMPREF_IN1		0x01	/* First input value. */
  ------------------
  555|      3|      ix.key = lj_ir_call(J, IRCALL_lj_tab_keyindex, tab, tmp);
  556|      3|      keyv = &rd->argv[1];
  557|      3|    }
  558|      3|    copyTV(J->L, &ix.tabv, &rd->argv[0]);
  559|      3|    ix.keyv.u32.lo = lj_tab_keyindex(tabV(&ix.tabv), keyv);
  ------------------
  |  |  864|      3|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  560|       |    /* Omit the value, if not used by the caller. */
  561|      3|    ix.idxchain = (J->framedepth && frame_islua(J->L->base-1) &&
  ------------------
  |  |   77|      6|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|      3|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      3|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|      3|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (561:20): [True: 3, False: 0]
  ------------------
  562|      3|		   bc_b(frame_pc(J->L->base-1)[-1])-1 < 2);
  ------------------
  |  |   36|      3|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
  |  Branch (562:6): [True: 0, False: 3]
  ------------------
  563|      3|    ix.mobj = 0;  /* We don't need the next index. */
  564|      3|    rd->nres = lj_record_next(J, &ix);
  565|      3|    J->base[0] = ix.key;
  566|      3|    J->base[1] = ix.val;
  567|      3|  }  /* else: Interpreter will throw. */
  568|      3|#endif
  569|      3|}
lj_ffrecord.c:recff_tmpref:
  206|      3|{
  207|      3|  if (!LJ_DUALNUM && tref_isinteger(tr))
  ------------------
  |  |  549|      6|#define LJ_DUALNUM		0
  ------------------
                if (!LJ_DUALNUM && tref_isinteger(tr))
  ------------------
  |  |  526|      3|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|      3|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  |  Branch (207:7): [Folded - Ignored]
  ------------------
  208|      0|    tr = emitir(IRTN(IR_CONV), tr, IRCONV_NUM_INT);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  209|      3|  return emitir(IRT(IR_TMPREF, IRT_PGC), tr, mode);
  ------------------
  |  |   38|      3|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      3|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  210|      3|}
lj_ffrecord.c:recff_ipairs_aux:
  446|    282|{
  447|    282|  RecordIndex ix;
  448|    282|  ix.tab = J->base[0];
  449|    282|  if (tref_istab(ix.tab)) {
  ------------------
  |  |  518|    282|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|    282|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 282, False: 0]
  |  |  ------------------
  ------------------
  450|    282|    if (!tvisnumber(&rd->argv[1]))  /* No support for string coercion. */
  ------------------
  |  |  802|    282|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    282|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    282|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    282|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (450:9): [True: 0, False: 282]
  ------------------
  451|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);
  452|    282|    setintV(&ix.keyv, numberVint(&rd->argv[1])+1);
  453|    282|    settabV(J->L, &ix.tabv, tabV(&rd->argv[0]));
  ------------------
  |  |  864|    282|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    282|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    282|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    282|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 282, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    282|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  454|      0|    ix.val = 0; ix.idxchain = 0;
  455|    282|    ix.key = lj_opt_narrow_toint(J, J->base[1]);
  456|    282|    J->base[0] = ix.key = emitir(IRTI(IR_ADD), ix.key, lj_ir_kint(J, 1));
  ------------------
  |  |   38|    282|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    282|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  457|    282|    J->base[1] = lj_record_idx(J, &ix);
  458|    282|    rd->nres = tref_isnil(J->base[1]) ? 0 : 2;
  ------------------
  |  |  511|    282|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|    282|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 0, False: 282]
  |  |  ------------------
  ------------------
  459|    282|  }  /* else: Interpreter will throw. */
  460|    282|}
lj_ffrecord.c:recff_getmetatable:
  235|     23|{
  236|     23|  TRef tr = J->base[0];
  237|     23|  if (tr) {
  ------------------
  |  Branch (237:7): [True: 23, False: 0]
  ------------------
  238|     23|    RecordIndex ix;
  239|     23|    ix.tab = tr;
  240|     23|    copyTV(J->L, &ix.tabv, &rd->argv[0]);
  241|     23|    if (lj_record_mm_lookup(J, &ix, MM_metatable))
  ------------------
  |  Branch (241:9): [True: 0, False: 23]
  ------------------
  242|      0|      J->base[0] = ix.mobj;
  243|     23|    else
  244|     23|      J->base[0] = ix.mt;
  245|     23|  }  /* else: Interpreter will throw. */
  246|     23|}
lj_ffrecord.c:recff_setmetatable:
  249|     20|{
  250|     20|  TRef tr = J->base[0];
  251|     20|  TRef mt = J->base[1];
  252|     20|  if (tref_istab(tr) && (tref_istab(mt) || (mt && tref_isnil(mt)))) {
  ------------------
  |  |  518|     40|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|     20|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
                if (tref_istab(tr) && (tref_istab(mt) || (mt && tref_isnil(mt)))) {
  ------------------
  |  |  518|     40|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|     20|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 20, False: 0]
  |  |  ------------------
  ------------------
                if (tref_istab(tr) && (tref_istab(mt) || (mt && tref_isnil(mt)))) {
  ------------------
  |  |  511|      0|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (252:45): [True: 0, False: 0]
  ------------------
  253|     20|    TRef fref, mtref;
  254|     20|    RecordIndex ix;
  255|     20|    ix.tab = tr;
  256|     20|    copyTV(J->L, &ix.tabv, &rd->argv[0]);
  257|     20|    lj_record_mm_lookup(J, &ix, MM_metatable); /* Guard for no __metatable. */
  258|     20|    fref = emitir(IRT(IR_FREF, IRT_PGC), tr, IRFL_TAB_META);
  ------------------
  |  |   38|     20|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     20|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  259|     20|    mtref = tref_isnil(mt) ? lj_ir_knull(J, IRT_TAB) : mt;
  ------------------
  |  |  511|     20|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|     20|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 0, False: 20]
  |  |  ------------------
  ------------------
  260|     20|    emitir(IRT(IR_FSTORE, IRT_TAB), fref, mtref);
  ------------------
  |  |   38|     20|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     20|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  261|     20|    if (!tref_isnil(mt))
  ------------------
  |  |  511|     20|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|     20|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (261:9): [True: 20, False: 0]
  ------------------
  262|     20|      emitir(IRT(IR_TBAR, IRT_NIL), tr, 0);
  ------------------
  |  |   38|     20|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     20|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  263|     20|    J->base[0] = tr;
  264|     20|    J->needsnap = 1;
  265|     20|  }  /* else: Interpreter will throw. */
  266|     20|}
lj_ffrecord.c:recff_tonumber:
  361|  11.0k|{
  362|  11.0k|  TRef tr = J->base[0];
  363|  11.0k|  TRef base = J->base[1];
  364|  11.0k|  if (tr && !tref_isnil(base)) {
  ------------------
  |  |  511|  11.0k|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|  11.0k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (364:7): [True: 11.0k, False: 0]
  |  Branch (364:13): [True: 0, False: 11.0k]
  ------------------
  365|      0|    base = lj_opt_narrow_toint(J, base);
  366|      0|    if (!tref_isk(base) || IR(tref_ref(base))->i != 10) {
  ------------------
  |  |  531|      0|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  ------------------
                  if (!tref_isk(base) || IR(tref_ref(base))->i != 10) {
  ------------------
  |  |   35|      0|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  |  Branch (366:9): [True: 0, False: 0]
  |  Branch (366:28): [True: 0, False: 0]
  ------------------
  367|      0|      recff_nyiu(J, rd);
  ------------------
  |  |  192|      0|#define recff_nyiu	recff_nyi
  ------------------
  368|      0|      return;
  369|      0|    }
  370|      0|  }
  371|  11.0k|  if (tref_isnumber_str(tr)) {
  ------------------
  |  |  528|  11.0k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  22.0k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  11.0k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 0, False: 11.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|  11.0k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|  11.0k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 11.0k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  372|  11.0k|    if (tref_isstr(tr)) {
  ------------------
  |  |  515|  11.0k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|  11.0k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
  373|  11.0k|      TValue tmp;
  374|  11.0k|      if (!lj_strscan_num(strV(&rd->argv[0]), &tmp)) {
  ------------------
  |  |  859|  11.0k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  11.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  11.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (374:11): [True: 0, False: 11.0k]
  ------------------
  375|      0|	recff_nyiu(J, rd);  /* Would need an inverted STRTO for this case. */
  ------------------
  |  |  192|      0|#define recff_nyiu	recff_nyi
  ------------------
  376|      0|	return;
  377|      0|      }
  378|  11.0k|      tr = emitir(IRTG(IR_STRTO, IRT_NUM), tr, 0);
  ------------------
  |  |   38|  11.0k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  11.0k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  379|  11.0k|    }
  380|  11.0k|#if LJ_HASFFI
  381|  11.0k|  } else if (tref_iscdata(tr)) {
  ------------------
  |  |  517|      0|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  382|      0|    lj_crecord_tonumber(J, rd);
  383|      0|    return;
  384|      0|#endif
  385|      0|  } else {
  386|      0|    tr = TREF_NIL;
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  387|      0|  }
  388|  11.0k|  J->base[0] = tr;
  389|  11.0k|  UNUSED(rd);
  ------------------
  |  |   91|  11.0k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  390|  11.0k|}
lj_ffrecord.c:recff_pcall:
  477|      3|{
  478|      3|  if (J->maxslot >= 1) {
  ------------------
  |  Branch (478:7): [True: 3, False: 0]
  ------------------
  479|      3|#if LJ_FR2
  480|       |    /* Shift function arguments up. */
  481|      3|    memmove(J->base + 1, J->base, sizeof(TRef) * J->maxslot);
  482|      3|#endif
  483|      3|    lj_record_call(J, 0, J->maxslot - 1);
  484|      3|    rd->nres = -1;  /* Pending call. */
  485|      3|    J->needsnap = 1;  /* Start catching on-trace errors. */
  486|      3|  }  /* else: Interpreter will throw. */
  487|      3|}
lj_ffrecord.c:recff_math_abs:
  574|     56|{
  575|     56|  TRef tr = lj_ir_tonum(J, J->base[0]);
  576|     56|  J->base[0] = emitir(IRTN(IR_ABS), tr, lj_ir_ksimd(J, LJ_KSIMD_ABS));
  ------------------
  |  |   38|     56|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     56|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  577|     56|  UNUSED(rd);
  ------------------
  |  |   91|     56|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  578|     56|}
lj_ffrecord.c:recff_math_round:
  582|  6.53k|{
  583|  6.53k|  TRef tr = J->base[0];
  584|  6.53k|  if (!tref_isinteger(tr)) {  /* Pass through integers unmodified. */
  ------------------
  |  |  526|  6.53k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  6.53k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (584:7): [True: 6.51k, False: 24]
  ------------------
  585|  6.51k|    tr = emitir(IRTN(IR_FPMATH), lj_ir_tonum(J, tr), rd->data);
  ------------------
  |  |   38|  6.51k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  6.51k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  586|       |    /* Result is integral (or NaN/Inf), but may not fit an int32_t. */
  587|  6.51k|    if (LJ_DUALNUM) {  /* Try to narrow using a guarded conversion to int. */
  ------------------
  |  |  549|  6.51k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  588|      0|      lua_Number n = lj_vm_foldfpm(numberVnum(&rd->argv[0]), rd->data);
  589|      0|      if (n == (lua_Number)lj_num2int(n))
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  |  Branch (589:11): [True: 0, False: 0]
  ------------------
  590|      0|	tr = emitir(IRTGI(IR_CONV), tr, IRCONV_INT_NUM|IRCONV_CHECK);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  591|      0|    }
  592|  6.51k|    J->base[0] = tr;
  593|  6.51k|  }
  594|  6.53k|}
lj_ffrecord.c:recff_math_unary:
  598|      3|{
  599|      3|  J->base[0] = emitir(IRTN(IR_FPMATH), lj_ir_tonum(J, J->base[0]), rd->data);
  ------------------
  |  |   38|      3|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      3|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  600|      3|}
lj_ffrecord.c:recff_math_call:
  647|     15|{
  648|     15|  TRef tr = lj_ir_tonum(J, J->base[0]);
  649|     15|  J->base[0] = emitir(IRTN(IR_CALLN), tr, rd->data);
  ------------------
  |  |   38|     15|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     15|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  650|     15|}
lj_ffrecord.c:recff_math_log:
  604|      3|{
  605|      3|  TRef tr = lj_ir_tonum(J, J->base[0]);
  606|      3|  if (J->base[1]) {
  ------------------
  |  Branch (606:7): [True: 0, False: 3]
  ------------------
  607|       |#ifdef LUAJIT_NO_LOG2
  608|       |    uint32_t fpm = IRFPM_LOG;
  609|       |#else
  610|      0|    uint32_t fpm = IRFPM_LOG2;
  611|      0|#endif
  612|      0|    TRef trb = lj_ir_tonum(J, J->base[1]);
  613|      0|    tr = emitir(IRTN(IR_FPMATH), tr, fpm);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  614|      0|    trb = emitir(IRTN(IR_FPMATH), trb, fpm);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  615|      0|    trb = emitir(IRTN(IR_DIV), lj_ir_knum_one(J), trb);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  616|      0|    tr = emitir(IRTN(IR_MUL), tr, trb);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  617|      3|  } else {
  618|      3|    tr = emitir(IRTN(IR_FPMATH), tr, IRFPM_LOG);
  ------------------
  |  |   38|      3|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      3|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  619|      3|  }
  620|      3|  J->base[0] = tr;
  621|      3|  UNUSED(rd);
  ------------------
  |  |   91|      3|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  622|      3|}
lj_ffrecord.c:recff_math_atan2:
  626|     10|{
  627|     10|  TRef tr = lj_ir_tonum(J, J->base[0]);
  628|     10|  TRef tr2 = lj_ir_tonum(J, J->base[1]);
  629|     10|  J->base[0] = lj_ir_call(J, IRCALL_atan2, tr, tr2);
  630|     10|  UNUSED(rd);
  ------------------
  |  |   91|     10|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  631|     10|}
lj_ffrecord.c:recff_math_ldexp:
  635|      9|{
  636|      9|  TRef tr = lj_ir_tonum(J, J->base[0]);
  637|      9|#if LJ_TARGET_X86ORX64
  638|      9|  TRef tr2 = lj_ir_tonum(J, J->base[1]);
  639|       |#else
  640|       |  TRef tr2 = lj_opt_narrow_toint(J, J->base[1]);
  641|       |#endif
  642|      9|  J->base[0] = emitir(IRTN(IR_LDEXP), tr, tr2);
  ------------------
  |  |   38|      9|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      9|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  643|      9|  UNUSED(rd);
  ------------------
  |  |   91|      9|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  644|      9|}
lj_ffrecord.c:recff_math_minmax:
  660|     67|{
  661|     67|  TRef tr = lj_ir_tonumber(J, J->base[0]);
  662|     67|  uint32_t op = rd->data;
  663|     67|  BCReg i;
  664|    134|  for (i = 1; J->base[i] != 0; i++) {
  ------------------
  |  Branch (664:15): [True: 67, False: 67]
  ------------------
  665|     67|    TRef tr2 = lj_ir_tonumber(J, J->base[i]);
  666|     67|    IRType t = IRT_INT;
  667|     67|    if (!(tref_isinteger(tr) && tref_isinteger(tr2))) {
  ------------------
  |  |  526|    134|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|     67|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 34, False: 33]
  |  |  ------------------
  ------------------
                  if (!(tref_isinteger(tr) && tref_isinteger(tr2))) {
  ------------------
  |  |  526|     34|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|     34|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 34, False: 0]
  |  |  ------------------
  ------------------
  668|     33|      if (tref_isinteger(tr)) tr = emitir(IRTN(IR_CONV), tr, IRCONV_NUM_INT);
  ------------------
  |  |  526|     33|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|     33|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 0, False: 33]
  |  |  ------------------
  ------------------
                    if (tref_isinteger(tr)) tr = emitir(IRTN(IR_CONV), tr, IRCONV_NUM_INT);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  669|     33|      if (tref_isinteger(tr2)) tr2 = emitir(IRTN(IR_CONV), tr2, IRCONV_NUM_INT);
  ------------------
  |  |  526|     33|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|     33|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 0, False: 33]
  |  |  ------------------
  ------------------
                    if (tref_isinteger(tr2)) tr2 = emitir(IRTN(IR_CONV), tr2, IRCONV_NUM_INT);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  670|     33|      t = IRT_NUM;
  671|     33|    }
  672|     67|    tr = emitir(IRT(op, t), tr, tr2);
  ------------------
  |  |   38|     67|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     67|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  673|     67|  }
  674|     67|  J->base[0] = tr;
  675|     67|}
lj_ffrecord.c:recff_bufhdr:
  199|  15.5k|{
  200|  15.5k|  return emitir(IRT(IR_BUFHDR, IRT_PGC),
  ------------------
  |  |   38|  15.5k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  15.5k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  201|  15.5k|		lj_ir_kptr(J, &J2G(J)->tmpbuf), IRBUFHDR_RESET);
  202|  15.5k|}
lj_ffrecord.c:recff_string_range:
  809|    166|{
  810|    166|  TRef trstr = lj_ir_tostr(J, J->base[0]);
  811|    166|  TRef trlen = emitir(IRTI(IR_FLOAD), trstr, IRFL_STR_LEN);
  ------------------
  |  |   38|    166|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    166|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  812|    166|  TRef tr0 = lj_ir_kint(J, 0);
  813|    166|  TRef trstart, trend;
  814|    166|  GCstr *str = argv2str(J, &rd->argv[0]);
  815|    166|  int32_t start, end;
  816|    166|  if (rd->data) {  /* string.sub(str, start [,end]) */
  ------------------
  |  Branch (816:7): [True: 166, False: 0]
  ------------------
  817|    166|    start = argv2int(J, &rd->argv[1]);
  818|    166|    trstart = lj_opt_narrow_toint(J, J->base[1]);
  819|    166|    trend = J->base[2];
  820|    166|    if (tref_isnil(trend)) {
  ------------------
  |  |  511|    166|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|    166|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 0, False: 166]
  |  |  ------------------
  ------------------
  821|      0|      trend = lj_ir_kint(J, -1);
  822|      0|      end = -1;
  823|    166|    } else {
  824|    166|      trend = lj_opt_narrow_toint(J, trend);
  825|    166|      end = argv2int(J, &rd->argv[2]);
  826|    166|    }
  827|    166|  } else {  /* string.byte(str, [,start [,end]]) */
  828|      0|    if (tref_isnil(J->base[1])) {
  ------------------
  |  |  511|      0|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  829|      0|      start = 1;
  830|      0|      trstart = lj_ir_kint(J, 1);
  831|      0|    } else {
  832|      0|      start = argv2int(J, &rd->argv[1]);
  833|      0|      trstart = lj_opt_narrow_toint(J, J->base[1]);
  834|      0|    }
  835|      0|    if (J->base[1] && !tref_isnil(J->base[2])) {
  ------------------
  |  |  511|      0|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (835:9): [True: 0, False: 0]
  |  Branch (835:23): [True: 0, False: 0]
  ------------------
  836|      0|      trend = lj_opt_narrow_toint(J, J->base[2]);
  837|      0|      end = argv2int(J, &rd->argv[2]);
  838|      0|    } else {
  839|      0|      trend = trstart;
  840|      0|      end = start;
  841|      0|    }
  842|      0|  }
  843|    166|  if (end < 0) {
  ------------------
  |  Branch (843:7): [True: 0, False: 166]
  ------------------
  844|      0|    emitir(IRTGI(IR_LT), trend, tr0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  845|      0|    trend = emitir(IRTI(IR_ADD), emitir(IRTI(IR_ADD), trlen, trend),
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  846|      0|		   lj_ir_kint(J, 1));
  847|      0|    end = end+(int32_t)str->len+1;
  848|    166|  } else if ((MSize)end <= str->len) {
  ------------------
  |  Branch (848:14): [True: 166, False: 0]
  ------------------
  849|    166|    emitir(IRTGI(IR_ULE), trend, trlen);
  ------------------
  |  |   38|    166|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    166|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  850|    166|  } else {
  851|      0|    emitir(IRTGI(IR_UGT), trend, trlen);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  852|      0|    end = (int32_t)str->len;
  853|      0|    trend = trlen;
  854|      0|  }
  855|    166|  trstart = recff_string_start(J, str, &start, trstart, trlen, tr0);
  856|    166|  if (rd->data) {  /* Return string.sub result. */
  ------------------
  |  Branch (856:7): [True: 166, False: 0]
  ------------------
  857|    166|    if (end - start >= 0) {
  ------------------
  |  Branch (857:9): [True: 166, False: 0]
  ------------------
  858|       |      /* Also handle empty range here, to avoid extra traces. */
  859|    166|      TRef trptr, trslen = emitir(IRTI(IR_SUB), trend, trstart);
  ------------------
  |  |   38|    166|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    166|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  860|    166|      emitir(IRTGI(IR_GE), trslen, tr0);
  ------------------
  |  |   38|    166|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    166|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  861|    166|      trptr = emitir(IRT(IR_STRREF, IRT_PGC), trstr, trstart);
  ------------------
  |  |   38|    166|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    166|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  862|    166|      J->base[0] = emitir(IRT(IR_SNEW, IRT_STR), trptr, trslen);
  ------------------
  |  |   38|    166|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    166|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  863|    166|    } else {  /* Range underflow: return empty string. */
  864|      0|      emitir(IRTGI(IR_LT), trend, trstart);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  865|      0|      J->base[0] = lj_ir_kstr(J, &J2G(J)->strempty);
  ------------------
  |  |   72|      0|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  866|      0|    }
  867|    166|  } else {  /* Return string.byte result(s). */
  868|      0|    ptrdiff_t i, len = end - start;
  869|      0|    if (len > 0) {
  ------------------
  |  Branch (869:9): [True: 0, False: 0]
  ------------------
  870|      0|      TRef trslen = emitir(IRTI(IR_SUB), trend, trstart);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  871|      0|      emitir(IRTGI(IR_EQ), trslen, lj_ir_kint(J, (int32_t)len));
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  872|      0|      if (J->baseslot + len > LJ_MAX_JSLOTS)
  ------------------
  |  |   85|      0|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (872:11): [True: 0, False: 0]
  ------------------
  873|      0|	lj_trace_err_info(J, LJ_TRERR_STACKOV);
  874|      0|      rd->nres = len;
  875|      0|      for (i = 0; i < len; i++) {
  ------------------
  |  Branch (875:19): [True: 0, False: 0]
  ------------------
  876|      0|	TRef tmp = emitir(IRTI(IR_ADD), trstart, lj_ir_kint(J, (int32_t)i));
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  877|      0|	tmp = emitir(IRT(IR_STRREF, IRT_PGC), trstr, tmp);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  878|      0|	J->base[i] = emitir(IRT(IR_XLOAD, IRT_U8), tmp, IRXLOAD_READONLY);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  879|      0|      }
  880|      0|    } else {  /* Empty range or range underflow: return no results. */
  881|      0|      emitir(IRTGI(IR_LE), trend, trstart);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  882|      0|      rd->nres = 0;
  883|      0|    }
  884|      0|  }
  885|    166|}
lj_ffrecord.c:argv2str:
   78|  11.4k|{
   79|  11.4k|  if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  11.4k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 11.4k, False: 0]
  |  |  ------------------
  ------------------
   80|  11.4k|    return strV(o);
  ------------------
  |  |  859|  11.4k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  11.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  11.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 11.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|  11.4k|  } else {
   82|      0|    GCstr *s;
   83|      0|    if (!tvisnumber(o))
  ------------------
  |  |  802|      0|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (83:9): [True: 0, False: 0]
  ------------------
   84|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);
   85|      0|    s = lj_strfmt_number(J->L, o);
   86|      0|    setstrV(J->L, o, s);
   87|      0|    return s;
   88|      0|  }
   89|  11.4k|}
lj_ffrecord.c:recff_string_start:
  784|    208|{
  785|    208|  int32_t start = *st;
  786|    208|  if (start < 0) {
  ------------------
  |  Branch (786:7): [True: 0, False: 208]
  ------------------
  787|      0|    emitir(IRTGI(IR_LT), tr, tr0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  788|      0|    tr = emitir(IRTI(IR_ADD), trlen, tr);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  789|      0|    start = start + (int32_t)s->len;
  790|      0|    emitir(start < 0 ? IRTGI(IR_LT) : IRTGI(IR_GE), tr, tr0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  791|      0|    if (start < 0) {
  ------------------
  |  Branch (791:9): [True: 0, False: 0]
  ------------------
  792|      0|      tr = tr0;
  793|      0|      start = 0;
  794|      0|    }
  795|    208|  } else if (start == 0) {
  ------------------
  |  Branch (795:14): [True: 0, False: 208]
  ------------------
  796|      0|    emitir(IRTGI(IR_EQ), tr, tr0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  797|      0|    tr = tr0;
  798|    208|  } else {
  799|    208|    tr = emitir(IRTI(IR_ADD), tr, lj_ir_kint(J, -1));
  ------------------
  |  |   38|    208|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    208|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  800|    208|    emitir(IRTGI(IR_GE), tr, tr0);
  ------------------
  |  |   38|    208|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    208|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  801|    208|    start--;
  802|    208|  }
  803|    208|  *st = start;
  804|    208|  return tr;
  805|    208|}
lj_ffrecord.c:recff_string_char:
  888|  4.35k|{
  889|  4.35k|  TRef k255 = lj_ir_kint(J, 255);
  890|  4.35k|  BCReg i;
  891|  15.2k|  for (i = 0; J->base[i] != 0; i++) {  /* Convert char values to strings. */
  ------------------
  |  Branch (891:15): [True: 10.8k, False: 4.35k]
  ------------------
  892|  10.8k|    TRef tr = lj_opt_narrow_toint(J, J->base[i]);
  893|  10.8k|    emitir(IRTGI(IR_ULE), tr, k255);
  ------------------
  |  |   38|  10.8k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  10.8k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  894|  10.8k|    J->base[i] = emitir(IRT(IR_TOSTR, IRT_STR), tr, IRTOSTR_CHAR);
  ------------------
  |  |   38|  10.8k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  10.8k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  895|  10.8k|  }
  896|  4.35k|  if (i > 1) {  /* Concatenate the strings, if there's more than one. */
  ------------------
  |  Branch (896:7): [True: 4.35k, False: 0]
  ------------------
  897|  4.35k|    TRef hdr = recff_bufhdr(J), tr = hdr;
  898|  15.2k|    for (i = 0; J->base[i] != 0; i++)
  ------------------
  |  Branch (898:17): [True: 10.8k, False: 4.35k]
  ------------------
  899|  10.8k|      tr = emitir(IRTG(IR_BUFPUT, IRT_PGC), tr, J->base[i]);
  ------------------
  |  |   38|  10.8k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  10.8k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  900|  4.35k|    J->base[0] = emitir(IRTG(IR_BUFSTR, IRT_STR), tr, hdr);
  ------------------
  |  |   38|  4.35k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  4.35k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  901|  4.35k|  } else if (i == 0) {
  ------------------
  |  Branch (901:14): [True: 0, False: 0]
  ------------------
  902|      0|    J->base[0] = lj_ir_kstr(J, &J2G(J)->strempty);
  ------------------
  |  |   72|      0|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  903|      0|  }
  904|  4.35k|  UNUSED(rd);
  ------------------
  |  |   91|  4.35k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  905|  4.35k|}
lj_ffrecord.c:recff_string_find:
  942|     42|{
  943|     42|  TRef trstr = lj_ir_tostr(J, J->base[0]);
  944|     42|  TRef trpat = lj_ir_tostr(J, J->base[1]);
  945|     42|  TRef trlen = emitir(IRTI(IR_FLOAD), trstr, IRFL_STR_LEN);
  ------------------
  |  |   38|     42|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     42|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  946|     42|  TRef tr0 = lj_ir_kint(J, 0);
  947|     42|  TRef trstart;
  948|     42|  GCstr *str = argv2str(J, &rd->argv[0]);
  949|     42|  GCstr *pat = argv2str(J, &rd->argv[1]);
  950|     42|  int32_t start;
  951|     42|  J->needsnap = 1;
  952|     42|  if (tref_isnil(J->base[2])) {
  ------------------
  |  |  511|     42|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|     42|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (511:25): [True: 42, False: 0]
  |  |  ------------------
  ------------------
  953|     42|    trstart = lj_ir_kint(J, 1);
  954|     42|    start = 1;
  955|     42|  } else {
  956|      0|    trstart = lj_opt_narrow_toint(J, J->base[2]);
  957|      0|    start = argv2int(J, &rd->argv[2]);
  958|      0|  }
  959|     42|  trstart = recff_string_start(J, str, &start, trstart, trlen, tr0);
  960|     42|  if ((MSize)start <= str->len) {
  ------------------
  |  Branch (960:7): [True: 42, False: 0]
  ------------------
  961|     42|    emitir(IRTGI(IR_ULE), trstart, trlen);
  ------------------
  |  |   38|     42|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     42|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  962|     42|  } else {
  963|      0|    emitir(IRTGI(IR_UGT), trstart, trlen);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  964|       |#if LJ_52
  965|       |    J->base[0] = TREF_NIL;
  966|       |    return;
  967|       |#else
  968|      0|    trstart = trlen;
  969|      0|    start = str->len;
  970|      0|#endif
  971|      0|  }
  972|       |  /* Fixed arg or no pattern matching chars? (Specialized to pattern string.) */
  973|     42|  if ((J->base[2] && tref_istruecond(J->base[3])) ||
  ------------------
  |  |  525|      0|#define tref_istruecond(tr)	(!tref_typerange((tr), IRT_NIL, IRT_FALSE))
  |  |  ------------------
  |  |  |  |  508|      0|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (525:29): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (973:8): [True: 0, False: 42]
  ------------------
  974|     42|      (emitir(IRTG(IR_EQ, IRT_STR), trpat, lj_ir_kstr(J, pat)),
  ------------------
  |  |   38|     42|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     42|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  |  Branch (974:7): [True: 0, False: 42]
  ------------------
  975|     42|       !lj_str_haspattern(pat))) {  /* Search for fixed string. */
  976|      0|    TRef trsptr = emitir(IRT(IR_STRREF, IRT_PGC), trstr, trstart);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  977|      0|    TRef trpptr = emitir(IRT(IR_STRREF, IRT_PGC), trpat, tr0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  978|      0|    TRef trslen = emitir(IRTI(IR_SUB), trlen, trstart);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  979|      0|    TRef trplen = emitir(IRTI(IR_FLOAD), trpat, IRFL_STR_LEN);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  980|      0|    TRef tr = lj_ir_call(J, IRCALL_lj_str_find, trsptr, trpptr, trslen, trplen);
  981|      0|    TRef trp0 = lj_ir_kkptr(J, NULL);
  ------------------
  |  |   76|      0|#define lj_ir_kkptr(J, ptr)	lj_ir_kptr_(J, IR_KKPTR, (ptr))
  ------------------
  982|      0|    if (lj_str_find(strdata(str)+(MSize)start, strdata(pat),
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
                  if (lj_str_find(strdata(str)+(MSize)start, strdata(pat),
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (982:9): [True: 0, False: 0]
  ------------------
  983|      0|		    str->len-(MSize)start, pat->len)) {
  984|      0|      TRef pos;
  985|      0|      emitir(IRTG(IR_NE, IRT_PGC), tr, trp0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  986|       |      /* Recompute offset. trsptr may not point into trstr after folding. */
  987|      0|      pos = emitir(IRTI(IR_ADD), emitir(IRTI(IR_SUB), tr, trsptr), trstart);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  988|      0|      J->base[0] = emitir(IRTI(IR_ADD), pos, lj_ir_kint(J, 1));
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  989|      0|      J->base[1] = emitir(IRTI(IR_ADD), pos, trplen);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  990|      0|      rd->nres = 2;
  991|      0|    } else {
  992|      0|      emitir(IRTG(IR_EQ, IRT_PGC), tr, trp0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  993|      0|      J->base[0] = TREF_NIL;
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  994|      0|    }
  995|     42|  } else {  /* Search for pattern. */
  996|     42|    recff_nyiu(J, rd);
  ------------------
  |  |  192|     42|#define recff_nyiu	recff_nyi
  ------------------
  997|     42|    return;
  998|     42|  }
  999|     42|}
lj_ffrecord.c:recff_string_format:
 1096|  11.2k|{
 1097|  11.2k|  recff_format(J, rd, recff_bufhdr(J), 0);
 1098|  11.2k|}
lj_ffrecord.c:recff_format:
 1002|  11.2k|{
 1003|  11.2k|  ptrdiff_t arg = sbufx;
 1004|  11.2k|  TRef tr = hdr, trfmt = lj_ir_tostr(J, J->base[arg]);
 1005|  11.2k|  GCstr *fmt = argv2str(J, &rd->argv[arg]);
 1006|  11.2k|  FormatState fs;
 1007|  11.2k|  SFormat sf;
 1008|  11.2k|  int nfmt = 0;
 1009|       |  /* Specialize to the format string. */
 1010|  11.2k|  emitir(IRTG(IR_EQ, IRT_STR), trfmt, lj_ir_kstr(J, fmt));
  ------------------
  |  |   38|  11.2k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  11.2k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1011|  11.2k|  lj_strfmt_init(&fs, strdata(fmt), fmt->len);
  ------------------
  |  |  316|  11.2k|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1012|  22.8k|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {  /* Parse format. */
  ------------------
  |  Branch (1012:10): [True: 11.6k, False: 11.2k]
  ------------------
 1013|  11.6k|    TRef tra = sf == STRFMT_LIT ? 0 : J->base[++arg];
  ------------------
  |  Branch (1013:16): [True: 380, False: 11.2k]
  ------------------
 1014|  11.6k|    TRef trsf = lj_ir_kint(J, (int32_t)sf);
 1015|  11.6k|    IRCallID id;
 1016|  11.6k|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|  11.6k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
 1017|    380|    case STRFMT_LIT:
  ------------------
  |  Branch (1017:5): [True: 380, False: 11.2k]
  ------------------
 1018|    380|      tr = emitir(IRTG(IR_BUFPUT, IRT_PGC), tr,
  ------------------
  |  |   38|    380|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    380|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1019|    380|		  lj_ir_kstr(J, lj_str_new(J->L, fs.str, fs.len)));
 1020|    380|      break;
 1021|    190|    case STRFMT_INT:
  ------------------
  |  Branch (1021:5): [True: 190, False: 11.4k]
  ------------------
 1022|    190|      id = IRCALL_lj_strfmt_putfnum_int;
 1023|    190|    handle_int:
 1024|    190|      if (!tref_isinteger(tra)) {
  ------------------
  |  |  526|    190|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|    190|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (1024:11): [True: 190, False: 0]
  ------------------
 1025|    190|#if LJ_HASFFI
 1026|    190|	if (tref_iscdata(tra)) {
  ------------------
  |  |  517|    190|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|    190|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 190]
  |  |  ------------------
  ------------------
 1027|      0|	  tra = lj_crecord_loadiu64(J, tra, &rd->argv[arg]);
 1028|      0|	  tr = lj_ir_call(J, IRCALL_lj_strfmt_putfxint, tr, trsf, tra);
 1029|      0|	  break;
 1030|      0|	}
 1031|    190|#endif
 1032|    190|	goto handle_num;
 1033|    190|      }
 1034|      0|      if (sf == STRFMT_INT) { /* Shortcut for plain %d. */
  ------------------
  |  Branch (1034:11): [True: 0, False: 0]
  ------------------
 1035|      0|	tr = emitir(IRTG(IR_BUFPUT, IRT_PGC), tr,
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1036|      0|		    emitir(IRT(IR_TOSTR, IRT_STR), tra, IRTOSTR_INT));
 1037|      0|      } else {
 1038|      0|#if LJ_HASFFI
 1039|      0|	tra = emitir(IRT(IR_CONV, IRT_U64), tra,
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1040|      0|		     (IRT_INT|(IRT_U64<<5)|IRCONV_SEXT));
 1041|      0|	tr = lj_ir_call(J, IRCALL_lj_strfmt_putfxint, tr, trsf, tra);
 1042|      0|	lj_needsplit(J);
  ------------------
  |  |  410|      0|#define lj_needsplit(J)		UNUSED(J)
  |  |  ------------------
  |  |  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
 1043|       |#else
 1044|       |	recff_nyiu(J, rd);  /* Don't bother working around this NYI. */
 1045|       |	return;
 1046|       |#endif
 1047|      0|      }
 1048|      0|      break;
 1049|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (1049:5): [True: 0, False: 11.6k]
  ------------------
 1050|      0|      id = IRCALL_lj_strfmt_putfnum_uint;
 1051|      0|      goto handle_int;
 1052|  11.0k|    case STRFMT_NUM:
  ------------------
  |  Branch (1052:5): [True: 11.0k, False: 570]
  ------------------
 1053|  11.0k|      id = IRCALL_lj_strfmt_putfnum;
 1054|  11.2k|    handle_num:
 1055|  11.2k|      tra = lj_ir_tonum(J, tra);
 1056|  11.2k|      tr = lj_ir_call(J, id, tr, trsf, tra);
 1057|  11.2k|      if (LJ_SOFTFP32) lj_needsplit(J);
  ------------------
  |  |  617|  11.2k|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|  22.4k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  11.2k|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (LJ_SOFTFP32) lj_needsplit(J);
  ------------------
  |  |  410|      0|#define lj_needsplit(J)		UNUSED(J)
  |  |  ------------------
  |  |  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
 1058|  11.2k|      break;
 1059|      0|    case STRFMT_STR:
  ------------------
  |  Branch (1059:5): [True: 0, False: 11.6k]
  ------------------
 1060|      0|      if (!tref_isstr(tra)) {
  ------------------
  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (1060:11): [True: 0, False: 0]
  ------------------
 1061|      0|	recff_nyiu(J, rd);  /* NYI: __tostring and non-string types for %s. */
  ------------------
  |  |  192|      0|#define recff_nyiu	recff_nyi
  ------------------
 1062|       |	/* NYI: also buffers. */
 1063|      0|	return;
 1064|      0|      }
 1065|      0|      if (sf == STRFMT_STR)  /* Shortcut for plain %s. */
  ------------------
  |  Branch (1065:11): [True: 0, False: 0]
  ------------------
 1066|      0|	tr = emitir(IRTG(IR_BUFPUT, IRT_PGC), tr, tra);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1067|      0|      else if ((sf & STRFMT_T_QUOTED))
  ------------------
  |  |   34|      0|#define STRFMT_T_QUOTED	0x0010	/* STRFMT_STR */
  ------------------
  |  Branch (1067:16): [True: 0, False: 0]
  ------------------
 1068|      0|	tr = lj_ir_call(J, IRCALL_lj_strfmt_putquoted, tr, tra);
 1069|      0|      else
 1070|      0|	tr = lj_ir_call(J, IRCALL_lj_strfmt_putfstr, tr, trsf, tra);
 1071|      0|      break;
 1072|      0|    case STRFMT_CHAR:
  ------------------
  |  Branch (1072:5): [True: 0, False: 11.6k]
  ------------------
 1073|      0|      tra = lj_opt_narrow_toint(J, tra);
 1074|      0|      if (sf == STRFMT_CHAR)  /* Shortcut for plain %c. */
  ------------------
  |  Branch (1074:11): [True: 0, False: 0]
  ------------------
 1075|      0|	tr = emitir(IRTG(IR_BUFPUT, IRT_PGC), tr,
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1076|      0|		    emitir(IRT(IR_TOSTR, IRT_STR), tra, IRTOSTR_CHAR));
 1077|      0|      else
 1078|      0|	tr = lj_ir_call(J, IRCALL_lj_strfmt_putfchar, tr, trsf, tra);
 1079|      0|      break;
 1080|      0|    case STRFMT_PTR:  /* NYI */
  ------------------
  |  Branch (1080:5): [True: 0, False: 11.6k]
  ------------------
 1081|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (1081:5): [True: 0, False: 11.6k]
  ------------------
 1082|      0|    default:
  ------------------
  |  Branch (1082:5): [True: 0, False: 11.6k]
  ------------------
 1083|      0|      recff_nyiu(J, rd);
  ------------------
  |  |  192|      0|#define recff_nyiu	recff_nyi
  ------------------
 1084|      0|      return;
 1085|  11.6k|    }
 1086|  11.6k|    if (++nfmt > 100) lj_trace_err(J, LJ_TRERR_TRACEOV);
  ------------------
  |  Branch (1086:9): [True: 0, False: 11.6k]
  ------------------
 1087|  11.6k|  }
 1088|  11.2k|  if (sbufx) {
  ------------------
  |  Branch (1088:7): [True: 0, False: 11.2k]
  ------------------
 1089|      0|    emitir(IRT(IR_USE, IRT_NIL), tr, 0);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1090|  11.2k|  } else {
 1091|  11.2k|    J->base[0] = emitir(IRTG(IR_BUFSTR, IRT_STR), tr, hdr);
  ------------------
  |  |   38|  11.2k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  11.2k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1092|  11.2k|  }
 1093|  11.2k|}
lj_ffrecord.c:recff_io_write:
 1515|  3.04k|{
 1516|  3.04k|  TRef ud, fp = recff_io_fp(J, &ud, rd->data);
 1517|  3.04k|  TRef zero = lj_ir_kint(J, 0);
 1518|  3.04k|  TRef one = lj_ir_kint(J, 1);
 1519|  3.04k|  ptrdiff_t i = rd->data == 0 ? 1 : 0;
  ------------------
  |  Branch (1519:17): [True: 0, False: 3.04k]
  ------------------
 1520|  18.2k|  for (; J->base[i]; i++) {
  ------------------
  |  Branch (1520:10): [True: 15.1k, False: 3.04k]
  ------------------
 1521|  15.1k|    TRef str = lj_ir_tostr(J, J->base[i]);
 1522|  15.1k|    TRef buf = emitir(IRT(IR_STRREF, IRT_PGC), str, zero);
  ------------------
  |  |   38|  15.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  15.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1523|  15.1k|    TRef len = emitir(IRTI(IR_FLOAD), str, IRFL_STR_LEN);
  ------------------
  |  |   38|  15.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  15.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1524|  15.1k|    if (tref_isk(len) && IR(tref_ref(len))->i == 1) {
  ------------------
  |  |  531|  30.3k|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  15.1k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 9.12k, False: 6.06k]
  |  |  ------------------
  ------------------
                  if (tref_isk(len) && IR(tref_ref(len))->i == 1) {
  ------------------
  |  |   35|  9.12k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  |  Branch (1524:26): [True: 5.06k, False: 4.05k]
  ------------------
 1525|  5.06k|      IRIns *irs = IR(tref_ref(str));
  ------------------
  |  |   35|  5.06k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
 1526|  5.06k|      TRef tr = (irs->o == IR_TOSTR && irs->op2 == IRTOSTR_CHAR) ?
  ------------------
  |  |  271|      0|#define IRTOSTR_CHAR		2	/* Convert char value to string. */
  ------------------
  |  Branch (1526:18): [True: 0, False: 5.06k]
  |  Branch (1526:40): [True: 0, False: 0]
  ------------------
 1527|      0|		irs->op1 :
 1528|  5.06k|		emitir(IRT(IR_XLOAD, IRT_U8), buf, IRXLOAD_READONLY);
  ------------------
  |  |   38|  5.06k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  5.06k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1529|  5.06k|      tr = lj_ir_call(J, IRCALL_fputc, tr, fp);
 1530|  5.06k|      if (results_wanted(J) != 0)  /* Check result only if not ignored. */
  ------------------
  |  Branch (1530:11): [True: 0, False: 5.06k]
  ------------------
 1531|      0|	emitir(IRTGI(IR_NE), tr, lj_ir_kint(J, -1));
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1532|  10.1k|    } else {
 1533|  10.1k|      TRef tr = lj_ir_call(J, IRCALL_fwrite, buf, one, len, fp);
 1534|  10.1k|      if (results_wanted(J) != 0)  /* Check result only if not ignored. */
  ------------------
  |  Branch (1534:11): [True: 0, False: 10.1k]
  ------------------
 1535|      0|	emitir(IRTGI(IR_EQ), tr, len);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1536|  10.1k|    }
 1537|  15.1k|  }
 1538|  3.04k|  J->base[0] = LJ_52 ? ud : TREF_TRUE;
  ------------------
  |  |  697|  3.04k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                J->base[0] = LJ_52 ? ud : TREF_TRUE;
  ------------------
  |  |  537|  6.08k|#define TREF_TRUE		(TREF_PRI(IRT_TRUE))
  |  |  ------------------
  |  |  |  |  534|  3.04k|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|  3.04k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1539|  3.04k|}
lj_ffrecord.c:recff_io_fp:
 1497|  3.04k|{
 1498|  3.04k|  TRef tr, ud, fp;
 1499|  3.04k|  if (id) {  /* io.func() */
  ------------------
  |  Branch (1499:7): [True: 3.04k, False: 0]
  ------------------
 1500|  3.04k|    ud = lj_ir_ggfload(J, IRT_UDATA, GG_OFS(g.gcroot[id]));
  ------------------
  |  |  111|  3.04k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  ------------------
 1501|  3.04k|  } else {  /* fp:method() */
 1502|      0|    ud = J->base[0];
 1503|      0|    if (!tref_isudata(ud))
  ------------------
  |  |  519|      0|#define tref_isudata(tr)	(tref_istype((tr), IRT_UDATA))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (1503:9): [True: 0, False: 0]
  ------------------
 1504|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);
 1505|      0|    tr = emitir(IRT(IR_FLOAD, IRT_U8), ud, IRFL_UDATA_UDTYPE);
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1506|      0|    emitir(IRTGI(IR_EQ), tr, lj_ir_kint(J, UDTYPE_IO_FILE));
  ------------------
  |  |   38|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1507|      0|  }
 1508|  3.04k|  *udp = ud;
 1509|  3.04k|  fp = emitir(IRT(IR_FLOAD, IRT_PTR), ud, IRFL_UDATA_FILE);
  ------------------
  |  |   38|  3.04k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  3.04k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1510|  3.04k|  emitir(IRTG(IR_NE, IRT_PTR), fp, lj_ir_knull(J, IRT_PTR));
  ------------------
  |  |   38|  3.04k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  3.04k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1511|  3.04k|  return fp;
 1512|  3.04k|}
lj_ffrecord.c:results_wanted:
   93|  15.1k|{
   94|  15.1k|  TValue *frame = J->L->base-1;
   95|  15.1k|  if (frame_islua(frame))
  ------------------
  |  |   77|  15.1k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  15.1k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  15.1k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  15.1k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 15.1k, False: 0]
  |  |  ------------------
  ------------------
   96|  15.1k|    return (ptrdiff_t)bc_b(frame_pc(frame)[-1]) - 1;
  ------------------
  |  |   36|  15.1k|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
   97|      0|  else
   98|      0|    return -1;
   99|  15.1k|}

lj_func_freeproto:
   21|  2.01M|{
   22|  2.01M|  lj_mem_free(g, pt, pt->sizept);
   23|  2.01M|}
lj_func_closeuv:
   84|  4.05M|{
   85|  4.05M|  GCupval *uv;
   86|  4.05M|  global_State *g = G(L);
  ------------------
  |  |  705|  4.05M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.05M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   87|  4.05M|  while (gcref(L->openupval) != NULL &&
  ------------------
  |  |   67|  4.05M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (87:10): [True: 5.70k, False: 4.04M]
  ------------------
   88|  4.05M|	 uvval((uv = gco2uv(gcref(L->openupval)))) >= level) {
  ------------------
  |  |  449|  5.70k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  11.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 5.70k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (88:3): [True: 4.23k, False: 1.47k]
  ------------------
   89|  4.23k|    GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|  4.23k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   90|  4.23k|    lj_assertG(!isblack(o), "bad black upvalue");
  ------------------
  |  |  364|  4.23k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.23k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.23k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.23k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   91|  4.23k|    lj_assertG(!uv->closed && uvval(uv) != &uv->tv, "closed upvalue in chain");
  ------------------
  |  |  364|  4.23k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.47k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.23k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 4.23k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.23k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   92|  4.23k|    setgcrefr(L->openupval, uv->nextgc);  /* No longer in open list. */
  ------------------
  |  |   77|  4.23k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   93|  4.23k|    if (isdead(g, o)) {
  ------------------
  |  |   37|  4.23k|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|  4.23k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.23k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.23k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.23k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  4.23k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  4.23k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  4.23k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 4.23k]
  |  |  ------------------
  ------------------
   94|      0|      lj_func_freeuv(g, uv);
   95|  4.23k|    } else {
   96|  4.23k|      unlinkuv(g, uv);
   97|  4.23k|      lj_gc_closeuv(g, uv);
   98|  4.23k|    }
   99|  4.23k|  }
  100|  4.05M|}
lj_func_freeuv:
  103|  4.23k|{
  104|  4.23k|  if (!uv->closed)
  ------------------
  |  Branch (104:7): [True: 0, False: 4.23k]
  ------------------
  105|      0|    unlinkuv(g, uv);
  106|  4.23k|  lj_mem_freet(g, uv);
  ------------------
  |  |  134|  4.23k|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  107|  4.23k|}
lj_func_newC:
  112|  2.47M|{
  113|  2.47M|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeCfunc(nelems));
  ------------------
  |  |  481|  2.47M|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  114|  2.47M|  fn->c.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  2.47M|#define LJ_TFUNC		(~8u)
  ------------------
  115|  2.47M|  fn->c.ffid = FF_C;
  ------------------
  |  |  475|  2.47M|#define FF_C		1
  ------------------
  116|  2.47M|  fn->c.nupvalues = (uint8_t)nelems;
  117|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  118|  2.47M|  setmref(fn->c.pc, &G(L)->bc_cfunc_ext);
  ------------------
  |  |   39|  2.47M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  119|  2.47M|  setgcref(fn->c.env, obj2gco(env));
  ------------------
  |  |   72|  2.47M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  120|  2.47M|  return fn;
  121|  2.47M|}
lj_func_newL_empty:
  141|  1.09M|{
  142|  1.09M|  GCfunc *fn = func_newL(L, pt, env);
  143|  1.09M|  MSize i, nuv = pt->sizeuv;
  144|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  145|  1.09M|  for (i = 0; i < nuv; i++) {
  ------------------
  |  Branch (145:15): [True: 0, False: 1.09M]
  ------------------
  146|      0|    GCupval *uv = func_emptyuv(L);
  147|      0|    int32_t v = proto_uv(pt)[i];
  ------------------
  |  |  422|      0|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  148|      0|    uv->immutable = ((v / PROTO_UV_IMMUTABLE) & 1);
  ------------------
  |  |  413|      0|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
  149|      0|    uv->dhash = (uint32_t)(uintptr_t)pt ^ (v << 24);
  150|      0|    setgcref(fn->l.uvptr[i], obj2gco(uv));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  151|      0|  }
  152|  1.09M|  fn->l.nupvalues = (uint8_t)nuv;
  153|  1.09M|  return fn;
  154|  1.09M|}
lj_func_newL_gc:
  158|   904k|{
  159|   904k|  GCfunc *fn;
  160|   904k|  GCRef *puv;
  161|   904k|  MSize i, nuv;
  162|   904k|  TValue *base;
  163|   904k|  lj_gc_check_fixtop(L);
  ------------------
  |  |   69|   904k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   904k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 366, False: 903k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   70|   904k|      lj_gc_step_fixtop(L); }
  ------------------
  164|   904k|  fn = func_newL(L, pt, tabref(parent->env));
  ------------------
  |  |  514|   904k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   904k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|       |  /* NOBARRIER: The GCfunc is new (marked white). */
  166|   904k|  puv = parent->uvptr;
  167|   904k|  nuv = pt->sizeuv;
  168|   904k|  base = L->base;
  169|   909k|  for (i = 0; i < nuv; i++) {
  ------------------
  |  Branch (169:15): [True: 4.96k, False: 904k]
  ------------------
  170|  4.96k|    uint32_t v = proto_uv(pt)[i];
  ------------------
  |  |  422|  4.96k|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|  4.96k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  171|  4.96k|    GCupval *uv;
  172|  4.96k|    if ((v & PROTO_UV_LOCAL)) {
  ------------------
  |  |  412|  4.96k|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
  |  Branch (172:9): [True: 4.81k, False: 157]
  ------------------
  173|  4.81k|      uv = func_finduv(L, base + (v & 0xff));
  174|  4.81k|      uv->immutable = ((v / PROTO_UV_IMMUTABLE) & 1);
  ------------------
  |  |  413|  4.81k|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
  175|  4.81k|      uv->dhash = (uint32_t)(uintptr_t)mref(parent->pc, char) ^ (v << 24);
  ------------------
  |  |   36|  4.81k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  176|  4.81k|    } else {
  177|    157|      uv = &gcref(puv[v])->uv;
  ------------------
  |  |   67|    157|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  178|    157|    }
  179|  4.96k|    setgcref(fn->l.uvptr[i], obj2gco(uv));
  ------------------
  |  |   72|  4.96k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  180|  4.96k|  }
  181|   904k|  fn->l.nupvalues = (uint8_t)nuv;
  182|   904k|  return fn;
  183|   904k|}
lj_func_free:
  186|  4.47M|{
  187|  4.47M|  MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  4.47M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  4.47M|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 2.00M, False: 2.47M]
  |  |  ------------------
  ------------------
                MSize size = isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|  2.00M|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  188|  4.47M|			       sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  6.95M|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  189|  4.47M|  lj_mem_free(g, fn, size);
  190|  4.47M|}
lj_func.c:unlinkuv:
   28|  4.23k|{
   29|  4.23k|  UNUSED(g);
  ------------------
  |  |   91|  4.23k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   30|  4.23k|  lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|  4.23k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.47k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.23k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 4.23k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.23k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   31|  4.23k|	     "broken upvalue chain");
   32|  4.23k|  setgcrefr(uvnext(uv)->prev, uv->prev);
  ------------------
  |  |   77|  4.23k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   33|  4.23k|  setgcrefr(uvprev(uv)->next, uv->next);
  ------------------
  |  |   77|  4.23k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   34|  4.23k|}
lj_func.c:func_newL:
  124|  2.00M|{
  125|  2.00M|  uint32_t count;
  126|  2.00M|  GCfunc *fn = (GCfunc *)lj_mem_newgco(L, sizeLfunc((MSize)pt->sizeuv));
  ------------------
  |  |  482|  2.00M|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  127|  2.00M|  fn->l.gct = ~LJ_TFUNC;
  ------------------
  |  |  268|  2.00M|#define LJ_TFUNC		(~8u)
  ------------------
  128|  2.00M|  fn->l.ffid = FF_LUA;
  ------------------
  |  |  474|  2.00M|#define FF_LUA		0
  ------------------
  129|  2.00M|  fn->l.nupvalues = 0;  /* Set to zero until upvalues are initialized. */
  130|       |  /* NOBARRIER: Really a setgcref. But the GCfunc is new (marked white). */
  131|  2.00M|  setmref(fn->l.pc, proto_bc(pt));
  ------------------
  |  |   39|  2.00M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  132|  2.00M|  setgcref(fn->l.env, obj2gco(env));
  ------------------
  |  |   72|  2.00M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  133|       |  /* Saturating 3 bit counter (0..7) for created closures. */
  134|  2.00M|  count = (uint32_t)pt->flags + PROTO_CLCOUNT;
  ------------------
  |  |  408|  2.00M|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  135|  2.00M|  pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  409|  2.00M|#define PROTO_CLC_BITS		3
  ------------------
                pt->flags = (uint8_t)(count - ((count >> PROTO_CLC_BITS) & PROTO_CLCOUNT));
  ------------------
  |  |  408|  2.00M|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  ------------------
  136|  2.00M|  return fn;
  137|  2.00M|}
lj_func.c:func_finduv:
   38|  4.81k|{
   39|  4.81k|  global_State *g = G(L);
  ------------------
  |  |  705|  4.81k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  4.81k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   40|  4.81k|  GCRef *pp = &L->openupval;
   41|  4.81k|  GCupval *p;
   42|  4.81k|  GCupval *uv;
   43|       |  /* Search the sorted list of open upvalues. */
   44|  5.85k|  while (gcref(*pp) != NULL && uvval((p = gco2uv(gcref(*pp)))) >= slot) {
  ------------------
  |  |   67|  5.75k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                while (gcref(*pp) != NULL && uvval((p = gco2uv(gcref(*pp)))) >= slot) {
  ------------------
  |  |  449|  2.92k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  5.85k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 2.92k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (44:10): [True: 2.92k, False: 2.82k]
  |  Branch (44:32): [True: 1.51k, False: 1.41k]
  ------------------
   45|  1.51k|    lj_assertG(!p->closed && uvval(p) != &p->tv, "closed upvalue in chain");
  ------------------
  |  |  364|  1.51k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.03k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.51k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.51k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.51k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   46|  1.51k|    if (uvval(p) == slot) {  /* Found open upvalue pointing to same slot? */
  ------------------
  |  |  449|  1.51k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.51k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (46:9): [True: 574, False: 942]
  ------------------
   47|    574|      if (isdead(g, obj2gco(p)))  /* Resurrect it, if it's dead. */
  ------------------
  |  |   37|    574|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|    574|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    574|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    574|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    574|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|    574|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|    574|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|    574|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 0, False: 574]
  |  |  ------------------
  ------------------
   48|      0|	flipwhite(obj2gco(p));
  ------------------
  |  |   43|      0|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   49|    574|      return p;
   50|    574|    }
   51|    942|    pp = &p->nextgc;
   52|    942|  }
   53|       |  /* No matching upvalue found. Create a new one. */
   54|  4.23k|  uv = lj_mem_newt(L, sizeof(GCupval), GCupval);
  ------------------
  |  |  133|  4.23k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  4.23k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   55|  4.23k|  newwhite(g, uv);
  ------------------
  |  |   40|  4.23k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  4.23k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  4.23k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  4.23k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  4.23k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  4.23k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   56|  4.23k|  uv->gct = ~LJ_TUPVAL;
  ------------------
  |  |  265|  4.23k|#define LJ_TUPVAL		(~5u)
  ------------------
   57|  4.23k|  uv->closed = 0;  /* Still open. */
   58|  4.23k|  setmref(uv->v, slot);  /* Pointing to the stack slot. */
  ------------------
  |  |   39|  4.23k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   59|       |  /* NOBARRIER: The GCupval is new (marked white) and open. */
   60|  4.23k|  setgcrefr(uv->nextgc, *pp);  /* Insert into sorted list of open upvalues. */
  ------------------
  |  |   77|  4.23k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   61|  4.23k|  setgcref(*pp, obj2gco(uv));
  ------------------
  |  |   72|  4.23k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   62|  4.23k|  setgcref(uv->prev, obj2gco(&g->uvhead));  /* Insert into GC list, too. */
  ------------------
  |  |   72|  4.23k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   63|  4.23k|  setgcrefr(uv->next, g->uvhead.next);
  ------------------
  |  |   77|  4.23k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   64|  4.23k|  setgcref(uvnext(uv)->prev, obj2gco(uv));
  ------------------
  |  |   72|  4.23k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   65|  4.23k|  setgcref(g->uvhead.next, obj2gco(uv));
  ------------------
  |  |   72|  4.23k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   66|  4.23k|  lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|  4.23k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  8.47k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 4.23k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 4.23k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.23k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   67|  4.23k|	     "broken upvalue chain");
   68|  4.23k|  return uv;
   69|  4.23k|}

lj_gc_separateudata:
  142|   287k|{
  143|   287k|  size_t m = 0;
  144|   287k|  GCRef *p = &mainthread(g)->nextgc;
  ------------------
  |  |  665|   287k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|   287k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  145|   287k|  GCobj *o;
  146|  1.69M|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  1.69M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (146:10): [True: 1.40M, False: 287k]
  ------------------
  147|  1.40M|    if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   32|  2.80M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  1.40M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  1.40M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  1.40M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 105k, False: 1.29M]
  |  |  ------------------
  ------------------
                  if (!(iswhite(o) || all) || isfinalized(gco2ud(o))) {
  ------------------
  |  |   40|   238k|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|   119k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 59.6k, False: 59.6k]
  |  |  |  Branch (40:27): [True: 119k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (147:25): [True: 13.4k, False: 1.28M]
  ------------------
  148|  1.34M|      p = &o->gch.nextgc;  /* Nothing to do. */
  149|  1.34M|    } else if (!lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc)) {
  ------------------
  |  |   20|   119k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 13.8k, False: 45.7k]
  |  |  |  Branch (20:5): [True: 59.6k, False: 0]
  |  |  |  Branch (20:26): [True: 69, False: 45.7k]
  |  |  |  Branch (20:28): [True: 45.7k, False: 0]
  |  |  ------------------
  |  |   21|  91.4k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  45.7k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  45.7k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  45.7k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 45.7k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (149:16): [True: 13.9k, False: 45.6k]
  ------------------
  150|  13.9k|      markfinalized(o);  /* Done, as there's no __gc metamethod. */
  ------------------
  |  |   46|  13.9k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  13.9k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  151|  13.9k|      p = &o->gch.nextgc;
  152|  45.6k|    } else {  /* Otherwise move userdata to be finalized to mmudata list. */
  153|  45.6k|      m += sizeudata(gco2ud(o));
  ------------------
  |  |  343|  91.3k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  |  |  ------------------
  |  |  |  Branch (343:47): [True: 45.6k, False: 0]
  |  |  ------------------
  ------------------
  154|  45.6k|      markfinalized(o);
  ------------------
  |  |   46|  45.6k|#define markfinalized(x)	((x)->gch.marked |= LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|  45.6k|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  ------------------
  155|  45.6k|      *p = o->gch.nextgc;
  156|  45.6k|      if (gcref(g->gc.mmudata)) {  /* Link to end of mmudata list. */
  ------------------
  |  |   67|  45.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 31.9k, False: 13.6k]
  |  |  ------------------
  ------------------
  157|  31.9k|	GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|  31.9k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  158|  31.9k|	setgcrefr(o->gch.nextgc, root->gch.nextgc);
  ------------------
  |  |   77|  31.9k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  159|  31.9k|	setgcref(root->gch.nextgc, o);
  ------------------
  |  |   72|  31.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  160|  31.9k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  31.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  161|  31.9k|      } else {  /* Create circular list. */
  162|  13.6k|	setgcref(o->gch.nextgc, o);
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  163|  13.6k|	setgcref(g->gc.mmudata, o);
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  164|  13.6k|      }
  165|  45.6k|    }
  166|  1.40M|  }
  167|   287k|  return m;
  168|   287k|}
lj_gc_finalize_udata:
  576|  13.6k|{
  577|  59.3k|  while (gcref(G(L)->gc.mmudata) != NULL)
  ------------------
  |  |   67|  59.3k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (577:10): [True: 45.6k, False: 13.6k]
  ------------------
  578|  45.6k|    gc_finalize(L);
  579|  13.6k|}
lj_gc_finalize_cdata:
  584|  13.6k|{
  585|  13.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  586|  13.6k|  GCtab *t = tabref(g->gcroot[GCROOT_FFI_FIN]);
  ------------------
  |  |  514|  13.6k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  587|  13.6k|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  13.6k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  588|  13.6k|  ptrdiff_t i;
  589|  13.6k|  setgcrefnull(t->metatable);  /* Mark finalizer table as disabled. */
  ------------------
  |  |   76|  13.6k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  590|  41.0k|  for (i = (ptrdiff_t)t->hmask; i >= 0; i--)
  ------------------
  |  Branch (590:33): [True: 27.3k, False: 13.6k]
  ------------------
  591|  27.3k|    if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  782|  54.7k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
                  if (!tvisnil(&node[i].val) && tviscdata(&node[i].key)) {
  ------------------
  |  |  799|  13.6k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  13.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  13.6k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 13.6k]
  |  |  ------------------
  ------------------
  |  Branch (591:9): [True: 13.6k, False: 13.6k]
  ------------------
  592|      0|      GCobj *o = gcV(&node[i].key);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  593|      0|      TValue tmp;
  594|      0|      makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  595|      0|      o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  596|      0|      copyTV(L, &tmp, &node[i].val);
  597|      0|      setnilV(&node[i].val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  598|      0|      gc_call_finalizer(g, L, &tmp, o);
  599|      0|    }
  600|  13.6k|}
lj_gc_freeall:
  605|  13.6k|{
  606|  13.6k|  MSize i;
  607|       |  /* Free everything, except super-fixed objects (the main thread). */
  608|  13.6k|  g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   27|  13.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  13.6k|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  13.6k|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
                g->gc.currentwhite = LJ_GC_WHITES | LJ_GC_SFIXED;
  ------------------
  |  |   25|  13.6k|#define LJ_GC_SFIXED	0x40
  ------------------
  609|  13.6k|  gc_fullsweep(g, &g->gc.root);
  ------------------
  |  |  401|  13.6k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  ------------------
  610|   243M|  for (i = g->str.mask; i != ~(MSize)0; i--)  /* Free all string hash chains. */
  ------------------
  |  Branch (610:25): [True: 243M, False: 13.6k]
  ------------------
  611|   243M|    gc_sweepstr(g, &g->str.tab[i]);
  612|  13.6k|}
lj_gc_step:
  721|  9.87M|{
  722|  9.87M|  global_State *g = G(L);
  ------------------
  |  |  705|  9.87M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  9.87M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  723|  9.87M|  GCSize lim;
  724|  9.87M|  int32_t ostate = g->vmstate;
  725|  9.87M|  setvmstate(g, GC);
  ------------------
  |  |  539|  9.87M|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  726|  9.87M|  lim = (GCSTEPSIZE/100) * g->gc.stepmul;
  ------------------
  |  |   32|  9.87M|#define GCSTEPSIZE	1024u
  ------------------
  727|  9.87M|  if (lim == 0)
  ------------------
  |  Branch (727:7): [True: 0, False: 9.87M]
  ------------------
  728|      0|    lim = LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  729|  9.87M|  if (g->gc.total > g->gc.threshold)
  ------------------
  |  Branch (729:7): [True: 4.18M, False: 5.68M]
  ------------------
  730|  4.18M|    g->gc.debt += g->gc.total - g->gc.threshold;
  731|  1.36G|  do {
  732|  1.36G|    lim -= (GCSize)gc_onestep(L);
  733|  1.36G|    if (g->gc.state == GCSpause) {
  ------------------
  |  Branch (733:9): [True: 252k, False: 1.35G]
  ------------------
  734|   252k|      g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  735|   252k|      g->vmstate = ostate;
  736|   252k|      return 1;  /* Finished a GC cycle. */
  737|   252k|    }
  738|  1.36G|  } while (sizeof(lim) == 8 ? ((int64_t)lim > 0) : ((int32_t)lim > 0));
  ------------------
  |  Branch (738:12): [Folded - Ignored]
  |  Branch (738:12): [True: 1.35G, False: 9.61M]
  ------------------
  739|  9.61M|  if (g->gc.debt < GCSTEPSIZE) {
  ------------------
  |  |   32|  9.61M|#define GCSTEPSIZE	1024u
  ------------------
  |  Branch (739:7): [True: 9.20M, False: 417k]
  ------------------
  740|  9.20M|    g->gc.threshold = g->gc.total + GCSTEPSIZE;
  ------------------
  |  |   32|  9.20M|#define GCSTEPSIZE	1024u
  ------------------
  741|  9.20M|    g->vmstate = ostate;
  742|  9.20M|    return -1;
  743|  9.20M|  } else {
  744|   417k|    g->gc.debt -= GCSTEPSIZE;
  ------------------
  |  |   32|   417k|#define GCSTEPSIZE	1024u
  ------------------
  745|   417k|    g->gc.threshold = g->gc.total;
  746|   417k|    g->vmstate = ostate;
  747|   417k|    return 0;
  748|   417k|  }
  749|  9.61M|}
lj_gc_step_fixtop:
  753|  3.26k|{
  754|  3.26k|  if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  716|  3.26k|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|  3.26k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|  3.26k|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 3.26k, False: 0]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) L->top = curr_topL(L);
  ------------------
  |  |  718|  3.26k|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|  3.26k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|  3.26k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|  3.26k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|  3.26k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|  3.26k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.26k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|  3.26k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  755|  3.26k|  lj_gc_step(L);
  756|  3.26k|}
lj_gc_step_jit:
  761|  7.28M|{
  762|  7.28M|  lua_State *L = gco2th(gcref(g->cur_L));
  ------------------
  |  |  767|  7.28M|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|  7.28M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.28M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  7.28M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.28M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.28M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  763|  7.28M|  L->base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|  7.28M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.28M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  764|  7.28M|  L->top = curr_topL(L);
  ------------------
  |  |  718|  7.28M|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|  7.28M|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|  7.28M|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|  7.28M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|  7.28M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|  7.28M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.28M, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|  7.28M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  765|  7.34M|  while (steps-- > 0 && lj_gc_step(L) == 0)
  ------------------
  |  Branch (765:10): [True: 7.31M, False: 30.0k]
  |  Branch (765:25): [True: 65.0k, False: 7.25M]
  ------------------
  766|  65.0k|    ;
  767|       |  /* Return 1 to force a trace exit. */
  768|  7.28M|  return (G(L)->gc.state == GCSatomic || G(L)->gc.state == GCSfinalize);
  ------------------
  |  |  705|  7.28M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  7.28M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                return (G(L)->gc.state == GCSatomic || G(L)->gc.state == GCSfinalize);
  ------------------
  |  |  705|  7.05M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  7.05M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (768:11): [True: 225k, False: 7.05M]
  |  Branch (768:42): [True: 0, False: 7.05M]
  ------------------
  769|  7.28M|}
lj_gc_fullgc:
  774|  6.74k|{
  775|  6.74k|  global_State *g = G(L);
  ------------------
  |  |  705|  6.74k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  6.74k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  776|  6.74k|  int32_t ostate = g->vmstate;
  777|  6.74k|  setvmstate(g, GC);
  ------------------
  |  |  539|  6.74k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  778|  6.74k|  if (g->gc.state <= GCSatomic) {  /* Caught somewhere in the middle. */
  ------------------
  |  Branch (778:7): [True: 6.74k, False: 3]
  ------------------
  779|  6.74k|    setmref(g->gc.sweep, &g->gc.root);  /* Sweep everything (preserving it). */
  ------------------
  |  |   39|  6.74k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  780|  6.74k|    setgcrefnull(g->gc.gray);  /* Reset lists from partial propagation. */
  ------------------
  |  |   76|  6.74k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  781|  6.74k|    setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|  6.74k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  782|  6.74k|    setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|  6.74k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  783|  6.74k|    g->gc.state = GCSsweepstring;  /* Fast forward to the sweep phase. */
  784|  6.74k|    g->gc.sweepstr = 0;
  785|  6.74k|  }
  786|  3.51M|  while (g->gc.state == GCSsweepstring || g->gc.state == GCSsweep)
  ------------------
  |  Branch (786:10): [True: 3.45M, False: 59.0k]
  |  Branch (786:43): [True: 52.3k, False: 6.74k]
  ------------------
  787|  3.51M|    gc_onestep(L);  /* Finish sweep. */
  788|  6.74k|  lj_assertG(g->gc.state == GCSfinalize || g->gc.state == GCSpause,
  ------------------
  |  |  364|  6.74k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 0, False: 6.74k]
  |  |  |  |  |  Branch (355:5): [True: 6.74k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.74k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  789|  6.74k|	     "bad GC state");
  790|       |  /* Now perform a full GC. */
  791|  6.74k|  g->gc.state = GCSpause;
  792|  5.45M|  do { gc_onestep(L); } while (g->gc.state != GCSpause);
  ------------------
  |  Branch (792:32): [True: 5.44M, False: 6.74k]
  ------------------
  793|  6.74k|  g->gc.threshold = (g->gc.estimate/100) * g->gc.pause;
  794|  6.74k|  g->vmstate = ostate;
  795|  6.74k|}
lj_gc_closeuv:
  828|  4.23k|{
  829|  4.23k|  GCobj *o = obj2gco(uv);
  ------------------
  |  |  775|  4.23k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  830|       |  /* Copy stack slot to upvalue itself and point to the copy. */
  831|  4.23k|  copyTV(mainthread(g), &uv->tv, uvval(uv));
  ------------------
  |  |  665|  4.23k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  4.23k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                copyTV(mainthread(g), &uv->tv, uvval(uv));
  ------------------
  |  |  449|  4.23k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  4.23k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  832|  4.23k|  setmref(uv->v, &uv->tv);
  ------------------
  |  |   39|  4.23k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  833|  4.23k|  uv->closed = 1;
  834|  4.23k|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|  4.23k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  835|  4.23k|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|  4.23k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  836|  4.23k|  if (isgray(o)) {  /* A closed upvalue is never gray, so fix this. */
  ------------------
  |  |   34|  4.23k|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|  4.23k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|  4.23k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  4.23k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  4.23k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 196, False: 4.04k]
  |  |  ------------------
  ------------------
  837|    196|    if (g->gc.state == GCSpropagate || g->gc.state == GCSatomic) {
  ------------------
  |  Branch (837:9): [True: 33, False: 163]
  |  Branch (837:40): [True: 0, False: 163]
  ------------------
  838|     33|      gray2black(o);  /* Make it black and preserve invariant. */
  ------------------
  |  |   39|     33|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|     33|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  839|     33|      if (tviswhite(&uv->tv))
  ------------------
  |  |   35|     33|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  ------------------
  |  |  |  |  809|     66|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     33|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  ------------------
  |  |  |  |  |  |  284|     33|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  264|     33|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     33|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  ------------------
  |  |  |  |  |  |  284|     33|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  264|     33|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (809:20): [True: 33, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  ------------------
  |  |  |  |   32|     66|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|     33|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|     33|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|     33|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 33]
  |  |  |  |  |  Branch (32:22): [True: 33, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  840|      0|	lj_gc_barrierf(g, o, gcV(&uv->tv));
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  841|    163|    } else {
  842|    163|      makewhite(g, o);  /* Make it white, i.e. sweep the upvalue. */
  ------------------
  |  |   42|    163|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|    163|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    163|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    163|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    163|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    163|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|    163|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    163|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    163|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    163|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  843|    163|      lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    163|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    326|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 163, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 163, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    163|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  844|    163|		 "bad GC state");
  845|    163|    }
  846|    196|  }
  847|  4.23k|}
lj_gc_barriertrace:
  852|  24.2k|{
  853|  24.2k|  if (g->gc.state == GCSpropagate || g->gc.state == GCSatomic)
  ------------------
  |  Branch (853:7): [True: 4.32k, False: 19.8k]
  |  Branch (853:38): [True: 0, False: 19.8k]
  ------------------
  854|  4.32k|    gc_marktrace(g, traceno);
  855|  24.2k|}
lj_mem_realloc:
  862|   788M|{
  863|   788M|  global_State *g = G(L);
  ------------------
  |  |  705|   788M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   788M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  864|   788M|  lj_assertG((osz == 0) == (p == NULL), "realloc API violation");
  ------------------
  |  |  364|   788M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   788M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 788M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   788M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  865|   788M|  p = g->allocf(g->allocd, p, osz, nsz);
  866|   788M|  if (p == NULL && nsz > 0)
  ------------------
  |  Branch (866:7): [True: 105, False: 788M]
  |  Branch (866:20): [True: 0, False: 105]
  ------------------
  867|      0|    lj_err_mem(L);
  868|   788M|  lj_assertG((nsz == 0) == (p == NULL), "allocf API violation");
  ------------------
  |  |  364|   788M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   788M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 788M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   788M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  869|   788M|  lj_assertG(checkptrGC(p),
  ------------------
  |  |  364|   788M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.57G|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 788M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|   788M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  870|   788M|	     "allocated memory address %p outside required range", p);
  871|   788M|  g->gc.total = (g->gc.total - osz) + nsz;
  872|   788M|  return p;
  873|   788M|}
lj_mem_newgco:
  877|  14.0M|{
  878|  14.0M|  global_State *g = G(L);
  ------------------
  |  |  705|  14.0M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  14.0M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  879|  14.0M|  GCobj *o = (GCobj *)g->allocf(g->allocd, NULL, 0, size);
  880|  14.0M|  if (o == NULL)
  ------------------
  |  Branch (880:7): [True: 0, False: 14.0M]
  ------------------
  881|      0|    lj_err_mem(L);
  882|  14.0M|  lj_assertG(checkptrGC(o),
  ------------------
  |  |  364|  14.0M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  28.0M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 14.0M, False: 0]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  14.0M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  883|  14.0M|	     "allocated memory address %p outside required range", o);
  884|  14.0M|  g->gc.total += size;
  885|  14.0M|  setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|  14.0M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  886|  14.0M|  setgcref(g->gc.root, o);
  ------------------
  |  |   72|  14.0M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  887|  14.0M|  newwhite(g, o);
  ------------------
  |  |   40|  14.0M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  14.0M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  14.0M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  14.0M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  14.0M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  14.0M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  888|  14.0M|  return o;
  889|  14.0M|}
lj_mem_grow:
  893|  4.55M|{
  894|  4.55M|  MSize sz = (*szp) << 1;
  895|  4.55M|  if (sz < LJ_MIN_VECSZ)
  ------------------
  |  |   81|  4.55M|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  |  Branch (895:7): [True: 4.26M, False: 289k]
  ------------------
  896|  4.26M|    sz = LJ_MIN_VECSZ;
  ------------------
  |  |   81|  4.26M|#define LJ_MIN_VECSZ	8		/* Min. size for growable vectors. */
  ------------------
  897|  4.55M|  if (sz > lim)
  ------------------
  |  Branch (897:7): [True: 3, False: 4.55M]
  ------------------
  898|      3|    sz = lim;
  899|  4.55M|  p = lj_mem_realloc(L, p, (*szp)*esz, sz*esz);
  900|  4.55M|  *szp = sz;
  901|  4.55M|  return p;
  902|  4.55M|}
lj_gc.c:gc_finalize:
  535|  45.6k|{
  536|  45.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  45.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  45.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  537|  45.6k|  GCobj *o = gcnext(gcref(g->gc.mmudata));
  ------------------
  |  |   90|  45.6k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  45.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  538|  45.6k|  cTValue *mo;
  539|  45.6k|  lj_assertG(tvref(g->jit_base) == NULL, "finalizer called on trace");
  ------------------
  |  |  364|  45.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  45.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 45.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  45.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|       |  /* Unchain from list of userdata to be finalized. */
  541|  45.6k|  if (o == gcref(g->gc.mmudata))
  ------------------
  |  |   67|  45.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (541:7): [True: 13.6k, False: 31.9k]
  ------------------
  542|  13.6k|    setgcrefnull(g->gc.mmudata);
  ------------------
  |  |   76|  13.6k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  543|  31.9k|  else
  544|  31.9k|    setgcrefr(gcref(g->gc.mmudata)->gch.nextgc, o->gch.nextgc);
  ------------------
  |  |   77|  31.9k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  545|  45.6k|#if LJ_HASFFI
  546|  45.6k|  if (o->gch.gct == ~LJ_TCDATA) {
  ------------------
  |  |  270|  45.6k|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (546:7): [True: 0, False: 45.6k]
  ------------------
  547|      0|    TValue tmp, *tv;
  548|       |    /* Add cdata back to the GC list and make it white. */
  549|      0|    setgcrefr(o->gch.nextgc, g->gc.root);
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  550|      0|    setgcref(g->gc.root, o);
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  551|      0|    makewhite(g, o);
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|      0|    o->gch.marked &= (uint8_t)~LJ_GC_CDATA_FIN;
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  553|       |    /* Resolve finalizer. */
  554|      0|    setcdataV(L, &tmp, gco2cd(o));
  ------------------
  |  |  770|      0|#define gco2cd(o)	check_exp((o)->gch.gct == ~LJ_TCDATA, &(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  555|      0|    tv = lj_tab_set(L, tabref(g->gcroot[GCROOT_FFI_FIN]), &tmp);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  556|      0|    if (!tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (556:9): [True: 0, False: 0]
  ------------------
  557|      0|      copyTV(L, &tmp, tv);
  558|      0|      setnilV(tv);  /* Clear entry in finalizer table. */
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  559|      0|      gc_call_finalizer(g, L, &tmp, o);
  560|      0|    }
  561|      0|    return;
  562|      0|  }
  563|  45.6k|#endif
  564|       |  /* Add userdata back to the main userdata list and make it white. */
  565|  45.6k|  setgcrefr(o->gch.nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  45.6k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  566|  45.6k|  setgcref(mainthread(g)->nextgc, o);
  ------------------
  |  |   72|  45.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  567|  45.6k|  makewhite(g, o);
  ------------------
  |  |   42|  45.6k|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  45.6k|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  45.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  45.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  45.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  45.6k|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  45.6k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  45.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  45.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  45.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  568|       |  /* Resolve the __gc metamethod. */
  569|  45.6k|  mo = lj_meta_fastg(g, tabref(gco2ud(o)->metatable), MM_gc);
  ------------------
  |  |   20|  91.3k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 0, False: 45.6k]
  |  |  |  Branch (20:5): [True: 45.6k, False: 0]
  |  |  |  Branch (20:26): [True: 0, False: 45.6k]
  |  |  |  Branch (20:28): [True: 45.6k, False: 0]
  |  |  ------------------
  |  |   21|  91.3k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|  45.6k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|  45.6k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|  45.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (21:18): [True: 45.6k, False: 0]
  |  |  ------------------
  ------------------
  570|  45.6k|  if (mo)
  ------------------
  |  Branch (570:7): [True: 45.6k, False: 0]
  ------------------
  571|  45.6k|    gc_call_finalizer(g, L, mo, o);
  572|  45.6k|}
lj_gc.c:gc_call_finalizer:
  505|  45.6k|{
  506|       |  /* Save and restore lots of state around the __gc callback. */
  507|  45.6k|  uint8_t oldh = hook_save(g);
  ------------------
  |  |  684|  45.6k|#define hook_save(g)		((g)->hookmask & ~HOOK_EVENTMASK)
  |  |  ------------------
  |  |  |  |  672|  45.6k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  508|  45.6k|  GCSize oldt = g->gc.threshold;
  509|  45.6k|  int errcode;
  510|  45.6k|  TValue *top;
  511|  45.6k|  lj_trace_abort(g);
  ------------------
  |  |   45|  45.6k|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|  45.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  45.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  45.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  512|  45.6k|  hook_entergc(g);  /* Disable hooks and new traces during __gc. */
  ------------------
  |  |  681|  45.6k|  ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  673|  45.6k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  676|  45.6k|#define HOOK_GC			0x40
  |  |  ------------------
  |  |                 ((g)->hookmask = ((g)->hookmask | (HOOK_ACTIVE|HOOK_GC)) & ~HOOK_PROFILE)
  |  |  ------------------
  |  |  |  |  677|  45.6k|#define HOOK_PROFILE		0x80
  |  |  ------------------
  ------------------
  513|  45.6k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|  91.3k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  45.6k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (513:24): [True: 0, False: 45.6k]
  ------------------
  514|  45.6k|  g->gc.threshold = LJ_MAX_MEM;  /* Prevent GC steps. */
  ------------------
  |  |   52|  45.6k|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|  45.6k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|  45.6k|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  515|  45.6k|  top = L->top;
  516|  45.6k|  copyTV(L, top++, mo);
  517|  45.6k|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|  45.6k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|  45.6k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  518|  45.6k|  setgcV(L, top, o, ~o->gch.gct);
  519|  45.6k|  L->top = top+1;
  520|  45.6k|  errcode = lj_vm_pcall(L, top, 1+0, -1);  /* Stack: |mo|o| -> | */
  521|  45.6k|  hook_restore(g, oldh);
  ------------------
  |  |  686|  45.6k|  ((g)->hookmask = ((g)->hookmask & HOOK_EVENTMASK) | (h))
  |  |  ------------------
  |  |  |  |  672|  45.6k|#define HOOK_EVENTMASK		0x0f
  |  |  ------------------
  ------------------
  522|  45.6k|  if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  598|  91.3k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASPROFILE && (oldh & HOOK_PROFILE)) lj_dispatch_update(g);
  ------------------
  |  |  677|  45.6k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (522:24): [True: 0, False: 45.6k]
  ------------------
  523|  45.6k|  g->gc.threshold = oldt;  /* Restore GC threshold. */
  524|  45.6k|  if (errcode) {
  ------------------
  |  Branch (524:7): [True: 0, False: 45.6k]
  ------------------
  525|      0|    ptrdiff_t errobj = savestack(L, L->top-1);  /* Stack may be resized. */
  ------------------
  |  |   14|      0|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  526|      0|    lj_vmevent_send(L, ERRFIN,
  ------------------
  |  |   39|      0|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|      0|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  527|      0|      copyTV(L, L->top++, restorestack(L, errobj));
  528|      0|    );
  529|      0|    L->top--;
  530|      0|  }
  531|  45.6k|}
lj_gc.c:gc_sweep:
  405|  2.20M|{
  406|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  407|  2.20M|  int ow = otherwhite(g);
  ------------------
  |  |   36|  2.20M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  2.20M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  2.20M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  2.20M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|  2.20M|  GCobj *o;
  409|  78.9M|  while ((o = gcref(*p)) != NULL && lim-- > 0) {
  ------------------
  |  |   67|  78.9M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (409:10): [True: 78.4M, False: 559k]
  |  Branch (409:37): [True: 76.7M, False: 1.65M]
  ------------------
  410|  76.7M|    if (o->gch.gct == ~LJ_TTHREAD)  /* Need to sweep open upvalues, too. */
  ------------------
  |  |  266|  76.7M|#define LJ_TTHREAD		(~6u)
  ------------------
  |  Branch (410:9): [True: 279k, False: 76.4M]
  ------------------
  411|   279k|      gc_fullsweep(g, &gco2th(o)->openupval);
  ------------------
  |  |  401|   559k|#define gc_fullsweep(g, p)	gc_sweep(g, (p), ~(uint32_t)0)
  |  |  ------------------
  |  |  |  Branch (401:41): [True: 279k, False: 0]
  |  |  ------------------
  ------------------
  412|  76.7M|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  76.7M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  76.7M|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  76.7M|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (412:9): [True: 62.6M, False: 14.1M]
  ------------------
  413|  62.6M|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|  62.6M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  62.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 62.6M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  62.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  414|  62.6M|		 "sweep of undead object");
  415|  62.6M|      makewhite(g, o);  /* Value is alive, change to the current white. */
  ------------------
  |  |   42|  62.6M|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|  62.6M|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  62.6M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  62.6M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  62.6M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  62.6M|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  62.6M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  62.6M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  62.6M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  62.6M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  416|  62.6M|      p = &o->gch.nextgc;
  417|  62.6M|    } else {  /* Otherwise value is dead, free it. */
  418|  14.1M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|  14.1M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  20.0M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 8.15M, False: 5.96M]
  |  |  |  |  |  Branch (355:5): [True: 5.96M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  14.1M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  419|  14.1M|		 "sweep of unlive object");
  420|  14.1M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|  14.1M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  421|  14.1M|      if (o == gcref(g->gc.root))
  ------------------
  |  |   67|  14.1M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (421:11): [True: 0, False: 14.1M]
  ------------------
  422|      0|	setgcrefr(g->gc.root, o->gch.nextgc);  /* Adjust list anchor. */
  ------------------
  |  |   77|      0|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  423|  14.1M|      gc_freefunc[o->gch.gct - ~LJ_TSTR](g, o);
  ------------------
  |  |  264|  14.1M|#define LJ_TSTR			(~4u)
  ------------------
  424|  14.1M|    }
  425|  76.7M|  }
  426|  2.20M|  return p;
  427|  2.20M|}
lj_gc.c:gc_sweepstr:
  431|  1.55G|{
  432|       |  /* Mask with other white and LJ_GC_FIXED. Or LJ_GC_SFIXED on shutdown. */
  433|  1.55G|  int ow = otherwhite(g);
  ------------------
  |  |   36|  1.55G|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  1.55G|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  1.55G|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  1.55G|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  434|  1.55G|  uintptr_t u = gcrefu(*chain);
  ------------------
  |  |   69|  1.55G|#define gcrefu(r)	((r).gcptr64)
  ------------------
  435|  1.55G|  GCRef q;
  436|  1.55G|  GCRef *p = &q;
  437|  1.55G|  GCobj *o;
  438|  1.55G|  setgcrefp(q, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  1.55G|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  439|  2.72G|  while ((o = gcref(*p)) != NULL) {
  ------------------
  |  |   67|  2.72G|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (439:10): [True: 1.17G, False: 1.55G]
  ------------------
  440|  1.17G|    if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* Black or current white? */
  ------------------
  |  |   27|  1.17G|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|  1.17G|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|  1.17G|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (440:9): [True: 399M, False: 772M]
  ------------------
  441|   399M|      lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|   399M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   405M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 392M, False: 6.47M]
  |  |  |  |  |  Branch (355:5): [True: 6.47M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   399M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|   399M|		 "sweep of undead string");
  443|   399M|      makewhite(g, o);  /* String is alive, change to the current white. */
  ------------------
  |  |   42|   399M|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|   399M|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   399M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   399M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   399M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|   399M|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   399M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   399M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   399M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   399M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|   399M|      p = &o->gch.nextgc;
  445|   772M|    } else {  /* Otherwise string is dead, free it. */
  446|   772M|      lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|   772M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   954M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 590M, False: 181M]
  |  |  |  |  |  Branch (355:5): [True: 181M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   772M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  447|   772M|		 "sweep of unlive string");
  448|   772M|      setgcrefr(*p, o->gch.nextgc);
  ------------------
  |  |   77|   772M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  449|   772M|      lj_str_free(g, gco2str(o));
  ------------------
  |  |  765|   772M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   772M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   772M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   772M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 772M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   772M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  450|   772M|    }
  451|  1.17G|  }
  452|  1.55G|  setgcrefp(*chain, (gcrefu(q) | (u & 1)));
  ------------------
  |  |   75|  1.55G|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  453|  1.55G|}
lj_gc.c:gc_onestep:
  654|  1.36G|{
  655|  1.36G|  global_State *g = G(L);
  ------------------
  |  |  705|  1.36G|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  1.36G|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  656|  1.36G|  switch (g->gc.state) {
  657|   263k|  case GCSpause:
  ------------------
  |  Branch (657:3): [True: 263k, False: 1.36G]
  ------------------
  658|   263k|    gc_mark_start(g);  /* Start a new GC cycle by marking all GC roots. */
  659|   263k|    return 0;
  660|  59.1M|  case GCSpropagate:
  ------------------
  |  Branch (660:3): [True: 59.1M, False: 1.30G]
  ------------------
  661|  59.1M|    if (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  59.1M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (661:9): [True: 58.8M, False: 259k]
  ------------------
  662|  58.8M|      return propagatemark(g);  /* Propagate one gray object. */
  663|   259k|    g->gc.state = GCSatomic;  /* End of mark phase. */
  664|   259k|    return 0;
  665|   487k|  case GCSatomic:
  ------------------
  |  Branch (665:3): [True: 487k, False: 1.36G]
  ------------------
  666|   487k|    if (tvref(g->jit_base))  /* Don't run atomic phase on trace. */
  ------------------
  |  |  217|   487k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   487k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 227k, False: 259k]
  |  |  ------------------
  ------------------
  667|   227k|      return LJ_MAX_MEM;
  ------------------
  |  |   52|   227k|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|   227k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|   227k|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  668|   259k|    atomic(g, L);
  669|   259k|    g->gc.state = GCSsweepstring;  /* Start of sweep phase. */
  670|   259k|    g->gc.sweepstr = 0;
  671|   259k|    return 0;
  672|  1.30G|  case GCSsweepstring: {
  ------------------
  |  Branch (672:3): [True: 1.30G, False: 61.7M]
  ------------------
  673|  1.30G|    GCSize old = g->gc.total;
  674|  1.30G|    gc_sweepstr(g, &g->str.tab[g->gc.sweepstr++]);  /* Sweep one chain. */
  675|  1.30G|    if (g->gc.sweepstr > g->str.mask)
  ------------------
  |  Branch (675:9): [True: 266k, False: 1.30G]
  ------------------
  676|   266k|      g->gc.state = GCSsweep;  /* All string hash chains sweeped. */
  677|  1.30G|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  1.30G|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.30G|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.30G, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.30G|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  678|  1.30G|    g->gc.estimate -= old - g->gc.total;
  679|  1.30G|    return GCSWEEPCOST;
  ------------------
  |  |   34|  1.30G|#define GCSWEEPCOST	10
  ------------------
  680|  1.30G|    }
  681|  1.91M|  case GCSsweep: {
  ------------------
  |  Branch (681:3): [True: 1.91M, False: 1.36G]
  ------------------
  682|  1.91M|    GCSize old = g->gc.total;
  683|  1.91M|    setmref(g->gc.sweep, gc_sweep(g, mref(g->gc.sweep, GCRef), GCSWEEPMAX));
  ------------------
  |  |   39|  1.91M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  684|  1.91M|    lj_assertG(old >= g->gc.total, "sweep increased memory");
  ------------------
  |  |  364|  1.91M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.91M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.91M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.91M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  685|  1.91M|    g->gc.estimate -= old - g->gc.total;
  686|  1.91M|    if (gcref(*mref(g->gc.sweep, GCRef)) == NULL) {
  ------------------
  |  |   67|  1.91M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (686:9): [True: 265k, False: 1.65M]
  ------------------
  687|   265k|      if (g->str.num <= (g->str.mask >> 2) && g->str.mask > LJ_MIN_STRTAB*2-1)
  ------------------
  |  |   79|   221k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  |  Branch (687:11): [True: 221k, False: 44.7k]
  |  Branch (687:47): [True: 221k, False: 0]
  ------------------
  688|   221k|	lj_str_resize(L, g->str.mask >> 1);  /* Shrink string table. */
  689|   265k|      if (gcref(g->gc.mmudata)) {  /* Need any finalizations? */
  ------------------
  |  |   67|   265k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 265k]
  |  |  ------------------
  ------------------
  690|      0|	g->gc.state = GCSfinalize;
  691|   265k|      } else {  /* Otherwise skip this phase to help the JIT. */
  692|   265k|	g->gc.state = GCSpause;  /* End of GC cycle. */
  693|   265k|	g->gc.debt = 0;
  694|   265k|      }
  695|   265k|    }
  696|  1.91M|    return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   33|  1.91M|#define GCSWEEPMAX	40
  ------------------
                  return GCSWEEPMAX*GCSWEEPCOST;
  ------------------
  |  |   34|  1.91M|#define GCSWEEPCOST	10
  ------------------
  697|  1.91M|    }
  698|      0|  case GCSfinalize:
  ------------------
  |  Branch (698:3): [True: 0, False: 1.36G]
  ------------------
  699|      0|    if (gcref(g->gc.mmudata) != NULL) {
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (699:9): [True: 0, False: 0]
  ------------------
  700|      0|      GCSize old = g->gc.total;
  701|      0|      if (tvref(g->jit_base))  /* Don't call finalizers on trace. */
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (217:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  702|      0|	return LJ_MAX_MEM;
  ------------------
  |  |   52|      0|#define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |  562|      0|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   50|      0|#define LJ_MAX_MEM64	((uint64_t)1<<47)  /* Max. 64 bit memory allocation. */
  |  |  ------------------
  |  |               #define LJ_MAX_MEM	(LJ_GC64 ? LJ_MAX_MEM64 : LJ_MAX_MEM32)
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  703|      0|      gc_finalize(L);  /* Finalize one userdata object. */
  704|      0|      if (old >= g->gc.total && g->gc.estimate > old - g->gc.total)
  ------------------
  |  Branch (704:11): [True: 0, False: 0]
  |  Branch (704:33): [True: 0, False: 0]
  ------------------
  705|      0|	g->gc.estimate -= old - g->gc.total;
  706|      0|      if (g->gc.estimate > GCFINALIZECOST)
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  |  Branch (706:11): [True: 0, False: 0]
  ------------------
  707|      0|	g->gc.estimate -= GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  708|      0|      return GCFINALIZECOST;
  ------------------
  |  |   35|      0|#define GCFINALIZECOST	100
  ------------------
  709|      0|    }
  710|      0|    g->gc.state = GCSpause;  /* End of GC cycle. */
  711|      0|    g->gc.debt = 0;
  712|      0|    return 0;
  713|      0|  default:
  ------------------
  |  Branch (713:3): [True: 0, False: 1.36G]
  ------------------
  714|      0|    lj_assertG(0, "bad GC state");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  715|      0|    return 0;
  716|  1.36G|  }
  717|  1.36G|}
lj_gc.c:gc_mark_start:
  103|   263k|{
  104|   263k|  setgcrefnull(g->gc.gray);
  ------------------
  |  |   76|   263k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  105|   263k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|   263k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  106|   263k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|   263k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  107|   263k|  gc_markobj(g, mainthread(g));
  ------------------
  |  |   52|   263k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   263k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   263k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   263k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   263k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 263k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   263k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  108|   263k|  gc_markobj(g, tabref(mainthread(g)->env));
  ------------------
  |  |   52|   263k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   263k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   263k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   263k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   263k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 263k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   263k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  109|   263k|  gc_marktv(g, &g->registrytv);
  ------------------
  |  |   46|   263k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|   263k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   527k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 263k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 263k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   263k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|   263k|	       "TValue and GC type mismatch"); \
  |  |   48|   263k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|   263k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|   527k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|   263k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   263k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   263k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|   263k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|   263k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|   263k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 263k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   527k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|   263k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|   263k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|   263k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 263k, False: 0]
  |  |  |  |  |  |  |  Branch (32:22): [True: 263k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   263k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   263k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   263k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   263k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 263k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   263k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|   263k|  gc_mark_gcroot(g);
  111|   263k|  g->gc.state = GCSpropagate;
  112|   263k|}
lj_gc.c:gc_mark_gcroot:
   94|   523k|{
   95|   523k|  ptrdiff_t i;
   96|  20.9M|  for (i = 0; i < GCROOT_MAX; i++)
  ------------------
  |  Branch (96:15): [True: 20.4M, False: 523k]
  ------------------
   97|  20.4M|    if (gcref(g->gcroot[i]) != NULL)
  ------------------
  |  |   67|  20.4M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (97:9): [True: 13.6M, False: 6.77M]
  ------------------
   98|  13.6M|      gc_markobj(g, gcref(g->gcroot[i]));
  ------------------
  |  |   52|  13.6M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  13.6M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  13.6M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  13.6M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  13.6M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 6.87M, False: 6.76M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  6.87M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   99|   523k|}
lj_gc.c:propagatemark:
  324|  59.9M|{
  325|  59.9M|  GCobj *o = gcref(g->gc.gray);
  ------------------
  |  |   67|  59.9M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  326|  59.9M|  int gct = o->gch.gct;
  327|  59.9M|  lj_assertG(isgray(o), "propagation of non-gray object");
  ------------------
  |  |  364|  59.9M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  59.9M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 59.9M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  59.9M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  328|  59.9M|  gray2black(o);
  ------------------
  |  |   39|  59.9M|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  59.9M|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  329|  59.9M|  setgcrefr(g->gc.gray, o->gch.gclist);  /* Remove from gray list. */
  ------------------
  |  |   77|  59.9M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  330|  59.9M|  if (LJ_LIKELY(gct == ~LJ_TTAB)) {
  ------------------
  |  |  145|  59.9M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 9.56M, False: 50.3M]
  |  |  ------------------
  ------------------
  331|  9.56M|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|  9.56M|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  9.56M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.56M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.56M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.56M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.56M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  332|  9.56M|    if (gc_traverse_tab(g, t) > 0)
  ------------------
  |  Branch (332:9): [True: 519k, False: 9.04M]
  ------------------
  333|   519k|      black2gray(o);  /* Keep weak tables gray. */
  ------------------
  |  |   44|   519k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   519k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  334|  9.56M|    return sizeof(GCtab) + sizeof(TValue) * t->asize +
  335|  9.56M|			   (t->hmask ? sizeof(Node) * (t->hmask + 1) : 0);
  ------------------
  |  Branch (335:8): [True: 6.80M, False: 2.76M]
  ------------------
  336|  50.3M|  } else if (LJ_LIKELY(gct == ~LJ_TFUNC)) {
  ------------------
  |  |  145|  50.3M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 46.0M, False: 4.32M]
  |  |  ------------------
  ------------------
  337|  46.0M|    GCfunc *fn = gco2func(o);
  ------------------
  |  |  769|  46.0M|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  46.0M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  46.0M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  46.0M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 46.0M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  46.0M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|      0|    gc_traverse_func(g, fn);
  339|  46.0M|    return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  476|  46.0M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  46.0M|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 3.16M, False: 42.8M]
  |  |  ------------------
  ------------------
                  return isluafunc(fn) ? sizeLfunc((MSize)fn->l.nupvalues) :
  ------------------
  |  |  482|  3.16M|#define sizeLfunc(n)	(sizeof(GCfuncL)-sizeof(GCRef)+sizeof(GCRef)*(n))
  ------------------
  340|  46.0M|			   sizeCfunc((MSize)fn->c.nupvalues);
  ------------------
  |  |  481|  42.8M|#define sizeCfunc(n)	(sizeof(GCfuncC)-sizeof(TValue)+sizeof(TValue)*(n))
  ------------------
  341|  46.0M|  } else if (LJ_LIKELY(gct == ~LJ_TPROTO)) {
  ------------------
  |  |  145|  4.32M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 3.31M, False: 1.01M]
  |  |  ------------------
  ------------------
  342|  3.31M|    GCproto *pt = gco2pt(o);
  ------------------
  |  |  768|  3.31M|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  3.31M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.31M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.31M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.31M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|      0|    gc_traverse_proto(g, pt);
  344|  3.31M|    return pt->sizept;
  345|  3.31M|  } else if (LJ_LIKELY(gct == ~LJ_TTHREAD)) {
  ------------------
  |  |  145|  1.01M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 519k, False: 494k]
  |  |  ------------------
  ------------------
  346|   519k|    lua_State *th = gco2th(o);
  ------------------
  |  |  767|   519k|#define gco2th(o)	check_exp((o)->gch.gct == ~LJ_TTHREAD, &(o)->th)
  |  |  ------------------
  |  |  |  |  367|   519k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   519k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   519k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 519k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   519k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  347|   519k|    setgcrefr(th->gclist, g->gc.grayagain);
  ------------------
  |  |   77|   519k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  348|   519k|    setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|   519k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  349|   519k|    black2gray(o);  /* Threads are never black. */
  ------------------
  |  |   44|   519k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|   519k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
  350|   519k|    gc_traverse_thread(g, th);
  351|   519k|    return sizeof(lua_State) + sizeof(TValue) * th->stacksize;
  352|   519k|  } else {
  353|   494k|#if LJ_HASJIT
  354|   494k|    GCtrace *T = gco2trace(o);
  ------------------
  |  |  296|   494k|#define gco2trace(o)	check_exp((o)->gch.gct == ~LJ_TTRACE, (GCtrace *)(o))
  |  |  ------------------
  |  |  |  |  367|   494k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   494k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   494k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 494k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   494k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  355|      0|    gc_traverse_trace(g, T);
  356|   494k|    return ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  357|   494k|	   T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry);
  358|       |#else
  359|       |    lj_assertG(0, "bad GC type %d", gct);
  360|       |    return 0;
  361|       |#endif
  362|   494k|  }
  363|  59.9M|}
lj_gc.c:gc_traverse_tab:
  174|  9.56M|{
  175|  9.56M|  int weak = 0;
  176|  9.56M|  cTValue *mode;
  177|  9.56M|  GCtab *mt = tabref(t->metatable);
  ------------------
  |  |  514|  9.56M|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  9.56M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  178|  9.56M|  if (mt)
  ------------------
  |  Branch (178:7): [True: 816k, False: 8.74M]
  ------------------
  179|   816k|    gc_markobj(g, mt);
  ------------------
  |  |   52|   816k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   816k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   816k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   816k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   816k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 16.2k, False: 800k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  16.2k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  180|  9.56M|  mode = lj_meta_fastg(g, mt, MM_mode);
  ------------------
  |  |   20|  9.56M|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  ------------------
  |  |  |  Branch (20:4): [True: 8.74M, False: 816k]
  |  |  |  Branch (20:26): [True: 31.7k, False: 784k]
  |  |  ------------------
  |  |   21|   816k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  ------------------
  |  |  |  |  590|   784k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  ------------------
  |  |  |  |  |  |  315|   784k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   67|   784k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|  9.56M|  if (mode && tvisstr(mode)) {  /* Valid __mode field? */
  ------------------
  |  |  795|   783k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   783k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   783k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 783k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (181:7): [True: 783k, False: 8.78M]
  ------------------
  182|   783k|    const char *modestr = strVdata(mode);
  ------------------
  |  |  318|   783k|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  1.56M|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 783k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|    int c;
  184|  2.08M|    while ((c = *modestr++)) {
  ------------------
  |  Branch (184:12): [True: 1.30M, False: 783k]
  ------------------
  185|  1.30M|      if (c == 'k') weak |= LJ_GC_WEAKKEY;
  ------------------
  |  |   21|   783k|#define LJ_GC_WEAKKEY	0x08
  ------------------
  |  Branch (185:11): [True: 783k, False: 519k]
  ------------------
  186|   519k|      else if (c == 'v') weak |= LJ_GC_WEAKVAL;
  ------------------
  |  |   22|   519k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (186:16): [True: 519k, False: 0]
  ------------------
  187|  1.30M|    }
  188|   783k|    if (weak) {  /* Weak tables are cleared in the atomic phase. */
  ------------------
  |  Branch (188:9): [True: 783k, False: 0]
  ------------------
  189|   783k|#if LJ_HASFFI
  190|   783k|      if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |   67|   783k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                    if (gcref(g->gcroot[GCROOT_FFI_FIN]) == obj2gco(t)) {
  ------------------
  |  |  775|   783k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  |  Branch (190:11): [True: 263k, False: 519k]
  ------------------
  191|   263k|	weak = (int)(~0u & ~LJ_GC_WEAKVAL);
  ------------------
  |  |   22|   263k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  192|   263k|      } else
  193|   519k|#endif
  194|   519k|      {
  195|   519k|	t->marked = (uint8_t)((t->marked & ~LJ_GC_WEAK) | weak);
  ------------------
  |  |   29|   519k|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|   519k|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|   519k|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  196|   519k|	setgcrefr(t->gclist, g->gc.weak);
  ------------------
  |  |   77|   519k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  197|   519k|	setgcref(g->gc.weak, obj2gco(t));
  ------------------
  |  |   72|   519k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  198|   519k|      }
  199|   783k|    }
  200|   783k|  }
  201|  9.56M|  if (weak == LJ_GC_WEAK)  /* Nothing to mark if both keys/values are weak. */
  ------------------
  |  |   29|  9.56M|#define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   21|  9.56M|#define LJ_GC_WEAKKEY	0x08
  |  |  ------------------
  |  |               #define LJ_GC_WEAK	(LJ_GC_WEAKKEY | LJ_GC_WEAKVAL)
  |  |  ------------------
  |  |  |  |   22|  9.56M|#define LJ_GC_WEAKVAL	0x10
  |  |  ------------------
  ------------------
  |  Branch (201:7): [True: 519k, False: 9.04M]
  ------------------
  202|   519k|    return 1;
  203|  9.04M|  if (!(weak & LJ_GC_WEAKVAL)) {  /* Mark array part. */
  ------------------
  |  |   22|  9.04M|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (203:7): [True: 9.04M, False: 0]
  ------------------
  204|  9.04M|    MSize i, asize = t->asize;
  205|  43.9M|    for (i = 0; i < asize; i++)
  ------------------
  |  Branch (205:17): [True: 34.8M, False: 9.04M]
  ------------------
  206|  34.8M|      gc_marktv(g, arrayslot(t, i));
  ------------------
  |  |   46|  34.8M|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  34.8M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  47.6M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 22.0M, False: 12.7M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 12.7M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  34.8M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  34.8M|	       "TValue and GC type mismatch"); \
  |  |   48|  34.8M|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  34.8M|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  69.7M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  34.8M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  34.8M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  34.8M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  34.8M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  34.8M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  34.8M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 12.7M, False: 22.0M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  25.5M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  12.7M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  12.7M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  12.7M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 3.81M, False: 8.98M]
  |  |  |  |  |  |  |  Branch (32:22): [True: 12.7M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  3.81M|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  3.81M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  3.81M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  3.81M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.81M, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  3.81M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  207|  9.04M|  }
  208|  9.04M|  if (t->hmask > 0) {  /* Mark hash part. */
  ------------------
  |  Branch (208:7): [True: 6.28M, False: 2.76M]
  ------------------
  209|  6.28M|    Node *node = noderef(t->node);
  ------------------
  |  |  515|  6.28M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  6.28M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  6.28M|    MSize i, hmask = t->hmask;
  211|  1.65G|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (211:17): [True: 1.64G, False: 6.28M]
  ------------------
  212|  1.64G|      Node *n = &node[i];
  213|  1.64G|      if (!tvisnil(&n->val)) {  /* Mark non-empty slot. */
  ------------------
  |  |  782|  1.64G|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (213:11): [True: 1.10G, False: 540M]
  ------------------
  214|  1.10G|	lj_assertG(!tvisnil(&n->key), "mark of nil key in non-empty slot");
  ------------------
  |  |  364|  1.10G|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.10G|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.10G, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.10G|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  1.10G|	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   21|  1.10G|#define LJ_GC_WEAKKEY	0x08
  ------------------
              	if (!(weak & LJ_GC_WEAKKEY)) gc_marktv(g, &n->key);
  ------------------
  |  |   46|  1.10G|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  1.10G|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.21G|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 303k, False: 1.10G]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.10G, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.10G|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  1.10G|	       "TValue and GC type mismatch"); \
  |  |   48|  1.10G|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  1.10G|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  2.21G|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  1.10G|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.10G|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.10G|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.10G|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.10G|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.10G|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 1.10G, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  2.21G|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  1.10G|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  1.10G|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  1.10G|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 315M, False: 790M]
  |  |  |  |  |  |  |  Branch (32:22): [True: 1.10G, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|   315M|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   315M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   315M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   315M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 315M, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   315M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (215:6): [True: 1.10G, False: 263k]
  ------------------
  216|  1.10G|	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   22|  1.10G|#define LJ_GC_WEAKVAL	0x10
  ------------------
              	if (!(weak & LJ_GC_WEAKVAL)) gc_marktv(g, &n->val);
  ------------------
  |  |   46|  1.10G|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  1.10G|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.16G|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.04G, False: 56.7M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 56.7M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.10G|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  1.10G|	       "TValue and GC type mismatch"); \
  |  |   48|  1.10G|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  1.10G|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  2.21G|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  1.10G|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.10G|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.10G|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  1.10G|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  1.10G|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  1.10G|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 56.7M, False: 1.04G]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|   113M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  56.7M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  56.7M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  56.7M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 51.0M, False: 5.67M]
  |  |  |  |  |  |  |  Branch (32:22): [True: 56.7M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  51.0M|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  51.0M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  51.0M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  51.0M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 51.0M, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  51.0M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 1.10G, False: 0]
  ------------------
  217|  1.10G|      }
  218|  1.64G|    }
  219|  6.28M|  }
  220|  9.04M|  return weak;
  221|  9.04M|}
lj_gc.c:gc_traverse_func:
  225|  46.0M|{
  226|  46.0M|  gc_markobj(g, tabref(fn->c.env));
  ------------------
  |  |   52|  46.0M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  46.0M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  46.0M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  46.0M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  46.0M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 75.9k, False: 45.9M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  75.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  227|  46.0M|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  46.0M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  46.0M|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 3.16M, False: 42.8M]
  |  |  ------------------
  ------------------
  228|  3.16M|    uint32_t i;
  229|  3.16M|    lj_assertG(fn->l.nupvalues <= funcproto(fn)->sizeuv,
  ------------------
  |  |  364|  3.16M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.33M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.16M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 3.16M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.16M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  230|  3.16M|	       "function upvalues out of range");
  231|  3.16M|    gc_markobj(g, funcproto(fn));
  ------------------
  |  |   52|  3.16M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  6.33M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  3.16M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  3.16M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  3.16M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.12M, False: 42.2k]
  |  |  |  |  |  Branch (32:22): [True: 3.16M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  6.24M|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 3.12M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|  3.21M|    for (i = 0; i < fn->l.nupvalues; i++)  /* Mark Lua function upvalues. */
  ------------------
  |  Branch (232:17): [True: 49.6k, False: 3.16M]
  ------------------
  233|  49.6k|      gc_markobj(g, &gcref(fn->l.uvptr[i])->uv);
  ------------------
  |  |   52|  3.21M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  49.6k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  49.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  49.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  49.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 48.7k, False: 896]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  48.7k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  234|  42.8M|  } else {
  235|  42.8M|    uint32_t i;
  236|  48.7M|    for (i = 0; i < fn->c.nupvalues; i++)  /* Mark C function upvalues. */
  ------------------
  |  Branch (236:17): [True: 5.87M, False: 42.8M]
  ------------------
  237|  42.8M|      gc_marktv(g, &fn->c.upvalue[i]);
  ------------------
  |  |   46|  5.87M|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  5.87M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.5M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 224k, False: 5.65M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 5.65M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.87M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  5.87M|	       "TValue and GC type mismatch"); \
  |  |   48|  5.87M|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  5.87M|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  11.7M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  5.87M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  5.87M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  5.87M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  5.87M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  5.87M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  5.87M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 5.65M, False: 224k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  11.3M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  5.65M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  5.65M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  5.65M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 3.60M, False: 2.04M]
  |  |  |  |  |  |  |  Branch (32:22): [True: 5.65M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  3.60M|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  3.60M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  3.60M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  3.60M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.60M, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  3.60M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|  42.8M|  }
  239|  46.0M|}
lj_gc.c:gc_traverse_proto:
  280|  3.31M|{
  281|  3.31M|  ptrdiff_t i;
  282|  3.31M|  gc_mark_str(proto_chunkname(pt));
  ------------------
  |  |   55|  3.31M|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  3.31M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  3.31M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  3.31M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  283|  15.3M|  for (i = -(ptrdiff_t)pt->sizekgc; i < 0; i++)  /* Mark collectable consts. */
  ------------------
  |  Branch (283:37): [True: 11.9M, False: 3.31M]
  ------------------
  284|  11.9M|    gc_markobj(g, proto_kgc(pt, i));
  ------------------
  |  |   52|  11.9M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  23.9M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  11.9M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  11.9M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  11.9M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.50M, False: 8.49M]
  |  |  |  |  |  Branch (32:22): [True: 11.9M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  7.00M|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 3.50M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|  3.31M|#if LJ_HASJIT
  286|  3.31M|  if (pt->trace) gc_marktrace(g, pt->trace);
  ------------------
  |  Branch (286:7): [True: 427k, False: 2.88M]
  ------------------
  287|  3.31M|#endif
  288|  3.31M|}
lj_gc.c:gc_traverse_thread:
  309|   519k|{
  310|   519k|  TValue *o, *top = th->top;
  311|  29.6M|  for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  217|   519k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   519k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                for (o = tvref(th->stack)+1+LJ_FR2; o < top; o++)
  ------------------
  |  |  569|   519k|#define LJ_FR2			1
  ------------------
  |  Branch (311:39): [True: 29.1M, False: 519k]
  ------------------
  312|  29.1M|    gc_marktv(g, o);
  ------------------
  |  |   46|  29.1M|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  29.1M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  40.6M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 17.7M, False: 11.4M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 11.4M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  29.1M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  29.1M|	       "TValue and GC type mismatch"); \
  |  |   48|  29.1M|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  29.1M|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  58.3M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  29.1M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  29.1M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  29.1M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  29.1M|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  29.1M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  29.1M|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 11.4M, False: 17.7M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  22.9M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  11.4M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  11.4M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  11.4M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 1.71M, False: 9.73M]
  |  |  |  |  |  |  |  Branch (32:22): [True: 11.4M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  1.71M|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  1.71M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  1.71M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  1.71M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.71M, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  1.71M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  313|   519k|  if (g->gc.state == GCSatomic) {
  ------------------
  |  Branch (313:7): [True: 259k, False: 260k]
  ------------------
  314|   259k|    top = tvref(th->stack) + th->stacksize;
  ------------------
  |  |  217|   259k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   259k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  315|  12.6M|    for (; o < top; o++)  /* Clear unmarked slots. */
  ------------------
  |  Branch (315:12): [True: 12.3M, False: 259k]
  ------------------
  316|  12.3M|      setnilV(o);
  ------------------
  |  |  872|  12.3M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  317|   259k|  }
  318|   519k|  gc_markobj(g, tabref(th->env));
  ------------------
  |  |   52|   519k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   519k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   519k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   519k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   519k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 519k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  319|   519k|  lj_state_shrinkstack(th, gc_traverse_frames(g, th));
  320|   519k|}
lj_gc.c:gc_traverse_frames:
  292|   519k|{
  293|   519k|  TValue *frame, *top = th->top-1, *bot = tvref(th->stack);
  ------------------
  |  |  217|   519k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   519k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  294|       |  /* Note: extra vararg frame not skipped, marks function twice (harmless). */
  295|  5.97M|  for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  569|  5.97M|#define LJ_FR2			1
  ------------------
                for (frame = th->base-1; frame > bot+LJ_FR2; frame = frame_prev(frame)) {
  ------------------
  |  |  110|  5.45M|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|  5.45M|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|  5.45M|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|  5.45M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  5.45M|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 2.94M, False: 2.50M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|  2.94M|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  2.94M|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|  2.94M|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|  2.50M|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|  2.50M|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|  2.50M|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|  2.50M|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|  2.50M|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|  2.50M|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (295:28): [True: 5.45M, False: 519k]
  ------------------
  296|  5.45M|    GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|  5.45M|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|  5.45M|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|  5.45M|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|  5.45M|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|  5.45M|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|  5.45M|    TValue *ftop = frame;
  298|  5.45M|    if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  476|  5.45M|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  5.45M|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 5.38M, False: 66.6k]
  |  |  ------------------
  ------------------
                  if (isluafunc(fn)) ftop += funcproto(fn)->framesize;
  ------------------
  |  |  480|  5.38M|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  5.38M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.38M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  5.38M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5.38M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.38M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  299|  5.45M|    if (ftop > top) top = ftop;
  ------------------
  |  Branch (299:9): [True: 55.7k, False: 5.39M]
  ------------------
  300|  5.45M|    if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |  569|  5.45M|#define LJ_FR2			1
  ------------------
                  if (!LJ_FR2) gc_markobj(g, fn);  /* Need to mark hidden function (or L). */
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (300:9): [Folded - Ignored]
  ------------------
  301|  5.45M|  }
  302|   519k|  top++;  /* Correct bias of -1 (frame == base-1). */
  303|   519k|  if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|   519k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|   519k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (top > tvref(th->maxstack)) top = tvref(th->maxstack);
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (303:7): [True: 0, False: 519k]
  ------------------
  304|   519k|  return (MSize)(top - bot);  /* Return minimum needed stack size. */
  305|   519k|}
lj_gc.c:gc_traverse_trace:
  256|   754k|{
  257|   754k|  IRRef ref;
  258|   754k|  if (T->traceno == 0) return;
  ------------------
  |  Branch (258:7): [True: 259k, False: 494k]
  ------------------
  259|  12.0M|  for (ref = T->nk; ref < REF_TRUE; ref++) {
  ------------------
  |  Branch (259:21): [True: 11.5M, False: 494k]
  ------------------
  260|  11.5M|    IRIns *ir = &T->ir[ref];
  261|  11.5M|    if (ir->o == IR_KGC)
  ------------------
  |  Branch (261:9): [True: 2.96M, False: 8.61M]
  ------------------
  262|  11.5M|      gc_markobj(g, ir_kgc(ir));
  ------------------
  |  |   52|  2.96M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  5.93M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  2.96M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  2.96M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  2.96M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 53.0k, False: 2.91M]
  |  |  |  |  |  Branch (32:22): [True: 2.96M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   106k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 53.0k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|  11.5M|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|  23.1M|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  11.5M|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  11.5M|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  11.5M|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  11.5M|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  11.5M|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 5.93M, False: 5.63M]
  |  |  ------------------
  ------------------
  |  Branch (263:28): [True: 5.51M, False: 422k]
  ------------------
  264|  5.51M|      ref++;
  265|  11.5M|  }
  266|   494k|  if (T->link) gc_marktrace(g, T->link);
  ------------------
  |  Branch (266:7): [True: 482k, False: 11.9k]
  ------------------
  267|   494k|  if (T->nextroot) gc_marktrace(g, T->nextroot);
  ------------------
  |  Branch (267:7): [True: 33.7k, False: 460k]
  ------------------
  268|   494k|  if (T->nextside) gc_marktrace(g, T->nextside);
  ------------------
  |  Branch (268:7): [True: 13.5k, False: 480k]
  ------------------
  269|   494k|  gc_markobj(g, gcref(T->startpt));
  ------------------
  |  |   52|   494k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   494k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   494k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   494k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   494k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.00k, False: 491k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  3.00k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  270|   494k|}
lj_gc.c:atomic:
  618|   259k|{
  619|   259k|  size_t udsize;
  620|       |
  621|   259k|  gc_mark_uv(g);  /* Need to remark open upvalues (the thread may be dead). */
  622|   259k|  gc_propagate_gray(g);  /* Propagate any left-overs. */
  623|       |
  624|   259k|  setgcrefr(g->gc.gray, g->gc.weak);  /* Empty the list of weak tables. */
  ------------------
  |  |   77|   259k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  625|   259k|  setgcrefnull(g->gc.weak);
  ------------------
  |  |   76|   259k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  626|   259k|  lj_assertG(!iswhite(obj2gco(mainthread(g))), "main thread turned white");
  ------------------
  |  |  364|   259k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   259k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 259k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   259k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  627|   259k|  gc_markobj(g, L);  /* Mark running thread. */
  ------------------
  |  |   52|   259k|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|   259k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   259k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   259k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   259k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 259k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  628|   259k|  gc_traverse_curtrace(g);  /* Traverse current trace. */
  ------------------
  |  |  273|   259k|#define gc_traverse_curtrace(g)	gc_traverse_trace(g, &G2J(g)->cur)
  |  |  ------------------
  |  |  |  |  116|   259k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|   259k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|   259k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  629|   259k|  gc_mark_gcroot(g);  /* Mark GC roots (again). */
  630|   259k|  gc_propagate_gray(g);  /* Propagate all of the above. */
  631|       |
  632|   259k|  setgcrefr(g->gc.gray, g->gc.grayagain);  /* Empty the 2nd chance list. */
  ------------------
  |  |   77|   259k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  633|   259k|  setgcrefnull(g->gc.grayagain);
  ------------------
  |  |   76|   259k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  634|   259k|  gc_propagate_gray(g);  /* Propagate it. */
  635|       |
  636|   259k|  udsize = lj_gc_separateudata(g, 0);  /* Separate userdata to be finalized. */
  637|   259k|  gc_mark_mmudata(g);  /* Mark them. */
  638|   259k|  udsize += gc_propagate_gray(g);  /* And propagate the marks. */
  639|       |
  640|       |  /* All marking done, clear weak tables. */
  641|   259k|  gc_clearweak(g, gcref(g->gc.weak));
  ------------------
  |  |   67|   259k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  642|       |
  643|   259k|  lj_buf_shrink(L, &g->tmpbuf);  /* Shrink temp buffer. */
  644|       |
  645|       |  /* Prepare for sweep phase. */
  646|   259k|  g->gc.currentwhite = (uint8_t)otherwhite(g);  /* Flip current white. */
  ------------------
  |  |   36|   259k|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   259k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   259k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   259k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|   259k|  g->strempty.marked = g->gc.currentwhite;
  648|   259k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|   259k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  649|   259k|  g->gc.estimate = g->gc.total - (GCSize)udsize;  /* Initial estimate. */
  650|   259k|}
lj_gc.c:gc_mark_uv:
  116|   259k|{
  117|   259k|  GCupval *uv;
  118|   272k|  for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|   259k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|   259k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                for (uv = uvnext(&g->uvhead); uv != &g->uvhead; uv = uvnext(uv)) {
  ------------------
  |  |  448|  12.4k|#define uvnext(uv_)	(&gcref((uv_)->next)->uv)
  |  |  ------------------
  |  |  |  |   67|  12.4k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (118:33): [True: 12.4k, False: 259k]
  ------------------
  119|  12.4k|    lj_assertG(uvprev(uvnext(uv)) == uv && uvnext(uvprev(uv)) == uv,
  ------------------
  |  |  364|  12.4k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  24.9k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 12.4k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 12.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  120|  12.4k|	       "broken upvalue chain");
  121|  12.4k|    if (isgray(obj2gco(uv)))
  ------------------
  |  |   34|  12.4k|#define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   19|  12.4k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  |  |               #define isgray(x)	(!((x)->gch.marked & (LJ_GC_BLACK|LJ_GC_WHITES)))
  |  |  ------------------
  |  |  |  |   27|  12.4k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  12.4k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  12.4k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (34:19): [True: 12.4k, False: 0]
  |  |  ------------------
  ------------------
  122|  12.4k|      gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|  12.4k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  12.4k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  24.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 12.4k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 12.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  12.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  12.4k|	       "TValue and GC type mismatch"); \
  |  |   48|  12.4k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  12.4k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  24.9k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  12.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  12.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  12.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  12.4k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  12.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  12.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 12.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  24.9k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  12.4k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  12.4k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  12.4k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 0, False: 12.4k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 12.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|  12.4k|  }
  124|   259k|}
lj_gc.c:gc_propagate_gray:
  367|  1.03M|{
  368|  1.03M|  size_t m = 0;
  369|  2.11M|  while (gcref(g->gc.gray) != NULL)
  ------------------
  |  |   67|  2.11M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (369:10): [True: 1.07M, False: 1.03M]
  ------------------
  370|  1.07M|    m += propagatemark(g);
  371|  1.03M|  return m;
  372|  1.03M|}
lj_gc.c:gc_mark_mmudata:
  128|   259k|{
  129|   259k|  GCobj *root = gcref(g->gc.mmudata);
  ------------------
  |  |   67|   259k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  130|   259k|  GCobj *u = root;
  131|   259k|  if (u) {
  ------------------
  |  Branch (131:7): [True: 0, False: 259k]
  ------------------
  132|      0|    do {
  133|      0|      u = gcnext(u);
  ------------------
  |  |   90|      0|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  134|      0|      makewhite(g, u);  /* Could be from previous GC. */
  ------------------
  |  |   42|      0|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|      0|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|      0|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|      0|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|      0|      gc_mark(g, u);
  136|      0|    } while (u != root);
  ------------------
  |  Branch (136:14): [True: 0, False: 0]
  ------------------
  137|      0|  }
  138|   259k|}
lj_gc.c:gc_clearweak:
  473|   259k|{
  474|   259k|  UNUSED(g);
  ------------------
  |  |   91|   259k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  475|   519k|  while (o) {
  ------------------
  |  Branch (475:10): [True: 259k, False: 259k]
  ------------------
  476|   259k|    GCtab *t = gco2tab(o);
  ------------------
  |  |  771|   259k|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   259k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   259k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   259k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 259k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   259k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  477|   259k|    lj_assertG((t->marked & LJ_GC_WEAK), "clear of non-weak table");
  ------------------
  |  |  364|   259k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   259k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 259k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   259k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  478|   259k|    if ((t->marked & LJ_GC_WEAKVAL)) {
  ------------------
  |  |   22|   259k|#define LJ_GC_WEAKVAL	0x10
  ------------------
  |  Branch (478:9): [True: 259k, False: 0]
  ------------------
  479|   259k|      MSize i, asize = t->asize;
  480|   259k|      for (i = 0; i < asize; i++) {
  ------------------
  |  Branch (480:19): [True: 0, False: 259k]
  ------------------
  481|       |	/* Clear array slot when value is about to be collected. */
  482|      0|	TValue *tv = arrayslot(t, i);
  ------------------
  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  483|      0|	if (gc_mayclear(tv, 1))
  ------------------
  |  Branch (483:6): [True: 0, False: 0]
  ------------------
  484|      0|	  setnilV(tv);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  485|      0|      }
  486|   259k|    }
  487|   259k|    if (t->hmask > 0) {
  ------------------
  |  Branch (487:9): [True: 259k, False: 0]
  ------------------
  488|   259k|      Node *node = noderef(t->node);
  ------------------
  |  |  515|   259k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   259k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  489|   259k|      MSize i, hmask = t->hmask;
  490|   779k|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (490:19): [True: 519k, False: 259k]
  ------------------
  491|   519k|	Node *n = &node[i];
  492|       |	/* Clear hash slot when key or value is about to be collected. */
  493|   519k|	if (!tvisnil(&n->val) && (gc_mayclear(&n->key, 0) ||
  ------------------
  |  |  782|  1.03M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (493:6): [True: 259k, False: 259k]
  |  Branch (493:28): [True: 0, False: 259k]
  ------------------
  494|   259k|				  gc_mayclear(&n->val, 1)))
  ------------------
  |  Branch (494:7): [True: 0, False: 259k]
  ------------------
  495|      0|	  setnilV(&n->val);
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  496|   519k|      }
  497|   259k|    }
  498|   259k|    o = gcref(t->gclist);
  ------------------
  |  |   67|   259k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  499|   259k|  }
  500|   259k|}
lj_gc.c:gc_mayclear:
  457|   519k|{
  458|   519k|  if (tvisgcv(o)) {  /* Only collectable objects can be weak references. */
  ------------------
  |  |  809|   519k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   519k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   519k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   519k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   519k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   519k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   519k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 519k, False: 0]
  |  |  ------------------
  ------------------
  459|   519k|    if (tvisstr(o)) {  /* But strings cannot be used as weak references. */
  ------------------
  |  |  795|   519k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   519k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   519k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 519k, False: 0]
  |  |  ------------------
  ------------------
  460|   519k|      gc_mark_str(strV(o));  /* And need to be marked. */
  ------------------
  |  |   55|  1.03M|#define gc_mark_str(s)		((s)->marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   519k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   519k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   519k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (55:27): [True: 519k, False: 0]
  |  |  ------------------
  ------------------
  461|      0|      return 0;
  462|   519k|    }
  463|      0|    if (iswhite(gcV(o)))
  ------------------
  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  Branch (32:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  464|      0|      return 1;  /* Object is about to be collected. */
  465|      0|    if (tvisudata(o) && val && isfinalized(udataV(o)))
  ------------------
  |  |  801|      0|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      0|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (tvisudata(o) && val && isfinalized(udataV(o)))
  ------------------
  |  |   40|      0|#define isfinalized(u)		((u)->marked & LJ_GC_FINALIZED)
  |  |  ------------------
  |  |  |  |   20|      0|#define LJ_GC_FINALIZED	0x08
  |  |  ------------------
  |  |  |  Branch (40:25): [True: 0, False: 0]
  |  |  |  Branch (40:27): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (465:25): [True: 0, False: 0]
  ------------------
  466|      0|      return 1;  /* Finalized userdata is dropped only from values. */
  467|      0|  }
  468|      0|  return 0;  /* Cannot clear. */
  469|   519k|}
lj_gc.c:gc_mark:
   59|   390M|{
   60|   390M|  int gct = o->gch.gct;
   61|   390M|  lj_assertG(iswhite(o), "mark of non-white object");
  ------------------
  |  |  364|   390M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   390M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 390M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   390M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   62|   390M|  lj_assertG(!isdead(g, o), "mark of dead object");
  ------------------
  |  |  364|   390M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   390M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 390M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   390M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   390M|  white2gray(o);
  ------------------
  |  |   38|   390M|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   390M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   390M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   390M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|   390M|  if (LJ_UNLIKELY(gct == ~LJ_TUDATA)) {
  ------------------
  |  |  146|   390M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.29M, False: 389M]
  |  |  ------------------
  ------------------
   65|  1.29M|    GCtab *mt = tabref(gco2ud(o)->metatable);
  ------------------
  |  |  514|  1.29M|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  2.58M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1.29M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|  1.29M|    gray2black(o);  /* Userdata are never gray. */
  ------------------
  |  |   39|  1.29M|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  1.29M|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   67|  1.29M|    if (mt) gc_markobj(g, mt);
  ------------------
  |  |   52|  1.03M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  1.03M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.03M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.03M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.03M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 279k, False: 753k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|   279k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 1.03M, False: 260k]
  ------------------
   68|  1.29M|    gc_markobj(g, tabref(gco2ud(o)->env));
  ------------------
  |  |   52|  1.29M|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|  2.58M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  1.29M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  1.29M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  1.29M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 15.3k, False: 1.27M]
  |  |  |  |  |  Branch (32:22): [True: 1.29M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|  30.7k|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 15.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   69|  2.58M|    if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  592|  2.58M|#define LJ_HASBUFFER		1
  |  |  ------------------
  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASBUFFER && gco2ud(o)->udtype == UDTYPE_BUFFER) {
  ------------------
  |  |  772|  1.29M|#define gco2ud(o)	check_exp((o)->gch.gct == ~LJ_TUDATA, &(o)->ud)
  |  |  ------------------
  |  |  |  |  367|  1.29M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.29M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.29M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.29M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.29M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (69:25): [True: 0, False: 1.29M]
  ------------------
   70|      0|      SBufExt *sbx = (SBufExt *)uddata(gco2ud(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   71|      0|      if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   57|      0|#define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   55|      0|#define sbufflag(sb)		(mrefu((sb)->L))
  |  |  |  |  ------------------
  |  |  |  |  |  |   37|      0|#define mrefu(r)	((r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define sbufiscow(sb)		(sbufflag((sb)) & SBUF_FLAG_COW)
  |  |  ------------------
  |  |  |  |   44|      0|#define SBUF_FLAG_COW		2	/* Copy-on-write buffer. */
  |  |  ------------------
  |  |  |  Branch (57:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (sbufiscow(sbx) && gcref(sbx->cowref))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   72|      0|	gc_markobj(g, gcref(sbx->cowref));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   73|      0|      if (gcref(sbx->dict_str))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   74|      0|	gc_markobj(g, gcref(sbx->dict_str));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   75|      0|      if (gcref(sbx->dict_mt))
  ------------------
  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  |  |  |  Branch (67:18): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   76|      0|	gc_markobj(g, gcref(sbx->dict_mt));
  ------------------
  |  |   52|      0|  { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |   32|      0|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|      0|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|      0|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|      0|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o))) gc_mark(g, obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
   77|      0|    }
   78|   389M|  } else if (LJ_UNLIKELY(gct == ~LJ_TUPVAL)) {
  ------------------
  |  |  146|   389M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 48.7k, False: 388M]
  |  |  ------------------
  ------------------
   79|  48.7k|    GCupval *uv = gco2uv(o);
  ------------------
  |  |  766|  48.7k|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|  48.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  48.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  48.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 48.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  48.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   80|  48.7k|    gc_marktv(g, uvval(uv));
  ------------------
  |  |   46|  48.7k|  { lj_assertG(!tvisgcv(tv) || (~itype(tv) == gcval(tv)->gch.gct), \
  |  |  ------------------
  |  |  |  |  364|  48.7k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  97.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 2, False: 48.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 48.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  48.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   47|  48.7k|	       "TValue and GC type mismatch"); \
  |  |   48|  48.7k|    if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |   35|  48.7k|#define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  809|  97.4k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|  48.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  48.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  48.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  274|  48.7k|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  284|  48.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  264|  48.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (809:20): [True: 48.7k, False: 2]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define tviswhite(x)	(tvisgcv(x) && iswhite(gcV(x)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  97.4k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   27|  48.7k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   17|  48.7k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   18|  48.7k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (32:20): [True: 26.2k, False: 22.5k]
  |  |  |  |  |  |  |  Branch (32:22): [True: 48.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                   if (tviswhite(tv)) gc_mark(g, gcV(tv)); }
  |  |  ------------------
  |  |  |  |  858|  26.2k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  26.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  26.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  26.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 26.2k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  26.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   81|  48.7k|    if (uv->closed)
  ------------------
  |  Branch (81:9): [True: 36.2k, False: 12.5k]
  ------------------
   82|  36.2k|      gray2black(o);  /* Closed upvalues are never gray. */
  ------------------
  |  |   39|  36.2k|#define gray2black(x)		((x)->gch.marked |= LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  36.2k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   83|   388M|  } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  264|   777M|#define LJ_TSTR			(~4u)
  ------------------
                } else if (gct != ~LJ_TSTR && gct != ~LJ_TCDATA) {
  ------------------
  |  |  270|  59.0M|#define LJ_TCDATA		(~10u)
  ------------------
  |  Branch (83:14): [True: 59.0M, False: 329M]
  |  Branch (83:33): [True: 59.0M, False: 33.5k]
  ------------------
   84|  59.0M|    lj_assertG(gct == ~LJ_TFUNC || gct == ~LJ_TTAB ||
  ------------------
  |  |  364|  59.0M|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   255M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 46.0M, False: 12.9M]
  |  |  |  |  |  Branch (355:5): [True: 9.38M, False: 3.57M]
  |  |  |  |  |  Branch (355:5): [True: 263k, False: 3.31M]
  |  |  |  |  |  Branch (355:5): [True: 3.31M, False: 711]
  |  |  |  |  |  Branch (355:5): [True: 711, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  59.0M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|  59.0M|	       gct == ~LJ_TTHREAD || gct == ~LJ_TPROTO || gct == ~LJ_TTRACE,
   86|  59.0M|	       "bad GC type %d", gct);
   87|  59.0M|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|  59.0M|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   88|  59.0M|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|  59.0M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   89|  59.0M|  }
   90|   390M|}
lj_gc.c:gc_marktrace:
  244|   961k|{
  245|   961k|  GCobj *o = obj2gco(traceref(G2J(g), traceno));
  ------------------
  |  |  775|  3.84M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |  |  Branch (775:31): [True: 961k, False: 0]
  |  |  |  Branch (775:31): [True: 961k, False: 0]
  |  |  ------------------
  ------------------
  246|   961k|  lj_assertG(traceno != G2J(g)->cur.traceno, "active trace escaped");
  ------------------
  |  |  364|   961k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   961k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 961k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   961k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  247|   961k|  if (iswhite(o)) {
  ------------------
  |  |   32|   961k|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   961k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   961k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   961k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (32:20): [True: 494k, False: 467k]
  |  |  ------------------
  ------------------
  248|   494k|    white2gray(o);
  ------------------
  |  |   38|   494k|#define white2gray(x)		((x)->gch.marked &= (uint8_t)~LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   494k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   494k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   494k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  249|   494k|    setgcrefr(o->gch.gclist, g->gc.gray);
  ------------------
  |  |   77|   494k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  250|   494k|    setgcref(g->gc.gray, o);
  ------------------
  |  |   72|   494k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  251|   494k|  }
  252|   961k|}

lj_state.c:lj_mem_free:
  120|  41.1k|{
  121|  41.1k|  g->gc.total -= (GCSize)osize;
  122|  41.1k|  g->allocf(g->allocd, p, osize, 0);
  123|  41.1k|}
lj_lex.c:lj_mem_free:
  120|  8.92M|{
  121|  8.92M|  g->gc.total -= (GCSize)osize;
  122|  8.92M|  g->allocf(g->allocd, p, osize, 0);
  123|  8.92M|}
lj_parse.c:lj_gc_barrierback:
   82|    263|{
   83|    263|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|    263|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|    263|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|    263|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    526|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 263, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 263, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    263|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|    263|	     "bad object states for backward barrier");
   86|    263|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|    263|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    526|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 263, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 263, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    263|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|    263|	     "bad GC state");
   88|    263|  black2gray(o);
  ------------------
  |  |   44|    263|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|    263|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|    263|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|    263|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|    263|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|    263|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|    263|}
lj_trace.c:lj_mem_free:
  120|  79.3k|{
  121|  79.3k|  g->gc.total -= (GCSize)osize;
  122|  79.3k|  g->allocf(g->allocd, p, osize, 0);
  123|  79.3k|}
lj_ctype.c:lj_mem_free:
  120|  9.95k|{
  121|  9.95k|  g->gc.total -= (GCSize)osize;
  122|  9.95k|  g->allocf(g->allocd, p, osize, 0);
  123|  9.95k|}
lj_str.c:lj_mem_free:
  120|   772M|{
  121|   772M|  g->gc.total -= (GCSize)osize;
  122|   772M|  g->allocf(g->allocd, p, osize, 0);
  123|   772M|}
lj_tab.c:lj_mem_free:
  120|  15.4M|{
  121|  15.4M|  g->gc.total -= (GCSize)osize;
  122|  15.4M|  g->allocf(g->allocd, p, osize, 0);
  123|  15.4M|}
lj_tab.c:lj_gc_barrierback:
   82|  61.1k|{
   83|  61.1k|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|  61.1k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|  61.1k|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|  61.1k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   122k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 61.1k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 61.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  61.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|  61.1k|	     "bad object states for backward barrier");
   86|  61.1k|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|  61.1k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   122k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 61.1k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 61.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  61.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|  61.1k|	     "bad GC state");
   88|  61.1k|  black2gray(o);
  ------------------
  |  |   44|  61.1k|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|  61.1k|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|  61.1k|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|  61.1k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|  61.1k|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|  61.1k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|  61.1k|}
lj_func.c:lj_mem_free:
  120|  6.49M|{
  121|  6.49M|  g->gc.total -= (GCSize)osize;
  122|  6.49M|  g->allocf(g->allocd, p, osize, 0);
  123|  6.49M|}
lj_udata.c:lj_mem_free:
  120|  59.6k|{
  121|  59.6k|  g->gc.total -= (GCSize)osize;
  122|  59.6k|  g->allocf(g->allocd, p, osize, 0);
  123|  59.6k|}
lj_meta.c:lj_gc_barrierback:
   82|      9|{
   83|      9|  GCobj *o = obj2gco(t);
  ------------------
  |  |  775|      9|#define obj2gco(v)	((GCobj *)(v))
  ------------------
   84|      9|  lj_assertG(isblack(o) && !isdead(g, o),
  ------------------
  |  |  364|      9|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     18|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 9, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 9, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   85|      9|	     "bad object states for backward barrier");
   86|      9|  lj_assertG(g->gc.state != GCSfinalize && g->gc.state != GCSpause,
  ------------------
  |  |  364|      9|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     18|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 9, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 9, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      9|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   87|      9|	     "bad GC state");
   88|      9|  black2gray(o);
  ------------------
  |  |   44|      9|#define black2gray(x)	((x)->gch.marked &= (uint8_t)~LJ_GC_BLACK)
  |  |  ------------------
  |  |  |  |   19|      9|#define LJ_GC_BLACK	0x04
  |  |  ------------------
  ------------------
   89|      9|  setgcrefr(t->gclist, g->gc.grayagain);
  ------------------
  |  |   77|      9|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   90|      9|  setgcref(g->gc.grayagain, o);
  ------------------
  |  |   72|      9|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   91|      9|}
lj_opt_loop.c:lj_mem_free:
  120|  9.93k|{
  121|  9.93k|  g->gc.total -= (GCSize)osize;
  122|  9.93k|  g->allocf(g->allocd, p, osize, 0);
  123|  9.93k|}
lj_cdata.c:lj_mem_free:
  120|   113k|{
  121|   113k|  g->gc.total -= (GCSize)osize;
  122|   113k|  g->allocf(g->allocd, p, osize, 0);
  123|   113k|}
lj_ir.c:lj_mem_free:
  120|  3.58k|{
  121|  3.58k|  g->gc.total -= (GCSize)osize;
  122|  3.58k|  g->allocf(g->allocd, p, osize, 0);
  123|  3.58k|}

lj_ir_growtop:
   74|  4.22k|{
   75|  4.22k|  IRIns *baseir = J->irbuf + J->irbotlim;
   76|  4.22k|  MSize szins = J->irtoplim - J->irbotlim;
   77|  4.22k|  if (szins) {
  ------------------
  |  Branch (77:7): [True: 1.74k, False: 2.47k]
  ------------------
   78|  1.74k|    baseir = (IRIns *)lj_mem_realloc(J->L, baseir, szins*sizeof(IRIns),
   79|  1.74k|				     2*szins*sizeof(IRIns));
   80|  1.74k|    J->irtoplim = J->irbotlim + 2*szins;
   81|  2.47k|  } else {
   82|  2.47k|    baseir = (IRIns *)lj_mem_realloc(J->L, NULL, 0, LJ_MIN_IRSZ*sizeof(IRIns));
  ------------------
  |  |   82|  2.47k|#define LJ_MIN_IRSZ	32		/* Min. size for growable IR. */
  ------------------
   83|  2.47k|    J->irbotlim = REF_BASE - LJ_MIN_IRSZ/4;
  ------------------
  |  |   82|  2.47k|#define LJ_MIN_IRSZ	32		/* Min. size for growable IR. */
  ------------------
   84|  2.47k|    J->irtoplim = J->irbotlim + LJ_MIN_IRSZ;
  ------------------
  |  |   82|  2.47k|#define LJ_MIN_IRSZ	32		/* Min. size for growable IR. */
  ------------------
   85|  2.47k|  }
   86|  4.22k|  J->cur.ir = J->irbuf = baseir - J->irbotlim;
   87|  4.22k|}
lj_ir_emit:
  118|   501k|{
  119|   501k|  IRRef ref = lj_ir_nextins(J);
  120|   501k|  IRIns *ir = IR(ref);
  ------------------
  |  |   38|   501k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  121|   501k|  IROp op = fins->o;
  ------------------
  |  |   39|   501k|#define fins			(&J->fold.ins)
  ------------------
  122|   501k|  ir->prev = J->chain[op];
  123|   501k|  J->chain[op] = (IRRef1)ref;
  124|   501k|  ir->o = op;
  125|   501k|  ir->op1 = fins->op1;
  ------------------
  |  |   39|   501k|#define fins			(&J->fold.ins)
  ------------------
  126|   501k|  ir->op2 = fins->op2;
  ------------------
  |  |   39|   501k|#define fins			(&J->fold.ins)
  ------------------
  127|   501k|  J->guardemit.irt |= fins->t.irt;
  ------------------
  |  |   39|   501k|#define fins			(&J->fold.ins)
  ------------------
  128|   501k|  return TREF(ref, irt_t((ir->t = fins->t)));
  ------------------
  |  |  502|   501k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  129|   501k|}
lj_ir_call:
  133|  26.7k|{
  134|  26.7k|  const CCallInfo *ci = &lj_ir_callinfo[id];
  135|  26.7k|  uint32_t n = CCI_NARGS(ci);
  ------------------
  |  |   19|  26.7k|#define CCI_NARGS(ci)		((ci)->flags & 0xff)	/* # of args. */
  ------------------
  136|  26.7k|  TRef tr = TREF_NIL;
  ------------------
  |  |  535|  26.7k|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|  26.7k|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|  26.7k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  137|  26.7k|  va_list argp;
  138|  26.7k|  va_start(argp, id);
  139|  26.7k|  if ((ci->flags & CCI_L)) n--;
  ------------------
  |  |   39|  26.7k|#define CCI_L			0x0100	/* Implicit L arg. */
  ------------------
  |  Branch (139:7): [True: 0, False: 26.7k]
  ------------------
  140|  26.7k|  if (n > 0)
  ------------------
  |  Branch (140:7): [True: 26.7k, False: 0]
  ------------------
  141|  26.7k|    tr = va_arg(argp, IRRef);
  142|  84.9k|  while (n-- > 1)
  ------------------
  |  Branch (142:10): [True: 58.2k, False: 26.7k]
  ------------------
  143|  58.2k|    tr = emitir(IRT(IR_CARG, IRT_NIL), tr, va_arg(argp, IRRef));
  ------------------
  |  |   42|  58.2k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  58.2k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  144|  26.7k|  va_end(argp);
  145|  26.7k|  if (CCI_OP(ci) == IR_CALLS)
  ------------------
  |  |   26|  26.7k|#define CCI_OP(ci)		((ci)->flags >> CCI_OPSHIFT)  /* Get op. */
  |  |  ------------------
  |  |  |  |   25|  26.7k|#define CCI_OPSHIFT		24
  |  |  ------------------
  ------------------
  |  Branch (145:7): [True: 15.1k, False: 11.5k]
  ------------------
  146|  15.1k|    J->needsnap = 1;  /* Need snapshot after call with side effect. */
  147|  26.7k|  return emitir(CCI_OPTYPE(ci), tr, id);
  ------------------
  |  |   42|  26.7k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  26.7k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  148|  26.7k|}
lj_ir_ggfload:
  152|  3.15k|{
  153|  3.15k|  lj_assertJ((ofs & 3) == 0, "unaligned GG_State field offset");
  ------------------
  |  |  527|  3.15k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.15k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.15k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.15k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.15k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  154|  3.15k|  ofs >>= 2;
  155|  3.15k|  lj_assertJ(ofs >= IRFL__MAX && ofs <= 0x3ff,
  ------------------
  |  |  527|  3.15k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.15k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  6.30k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.15k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.15k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.15k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  156|  3.15k|	     "GG_State field offset breaks 10 bit FOLD key limit");
  157|  3.15k|  lj_ir_set(J, IRT(IR_FLOAD, t), REF_NIL, ofs);
  ------------------
  |  |   26|  3.15k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  ------------------
  158|  3.15k|  return lj_opt_fold(J);
  159|  3.15k|}
lj_ir_kint:
  201|   161k|{
  202|   161k|  IRIns *ir, *cir = J->cur.ir;
  203|   161k|  IRRef ref;
  204|   525k|  for (ref = J->chain[IR_KINT]; ref; ref = cir[ref].prev)
  ------------------
  |  Branch (204:33): [True: 437k, False: 88.3k]
  ------------------
  205|   437k|    if (cir[ref].i == k)
  ------------------
  |  Branch (205:9): [True: 73.2k, False: 364k]
  ------------------
  206|  73.2k|      goto found;
  207|  88.3k|  ref = ir_nextk(J);
  208|  88.3k|  ir = IR(ref);
  ------------------
  |  |   38|  88.3k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  209|  88.3k|  ir->i = k;
  210|  88.3k|  ir->t.irt = IRT_INT;
  211|  88.3k|  ir->o = IR_KINT;
  212|  88.3k|  ir->prev = J->chain[IR_KINT];
  213|  88.3k|  J->chain[IR_KINT] = (IRRef1)ref;
  214|   161k|found:
  215|   161k|  return TREF(ref, IRT_INT);
  ------------------
  |  |  502|   161k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  216|  88.3k|}
lj_ir_k64:
  220|  87.7k|{
  221|  87.7k|  IRIns *ir, *cir = J->cur.ir;
  222|  87.7k|  IRRef ref;
  223|  87.7k|  IRType t = op == IR_KNUM ? IRT_NUM : IRT_I64;
  ------------------
  |  Branch (223:14): [True: 87.4k, False: 344]
  ------------------
  224|   201k|  for (ref = J->chain[op]; ref; ref = cir[ref].prev)
  ------------------
  |  Branch (224:28): [True: 150k, False: 50.5k]
  ------------------
  225|   301k|    if (ir_k64(&cir[ref])->u64 == u64)
  ------------------
  |  |  594|   150k|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|   150k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   150k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   301k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 150k, False: 216]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 216, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   150k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (225:9): [True: 37.1k, False: 113k]
  ------------------
  226|  37.1k|      goto found;
  227|  50.5k|  ref = ir_nextk64(J);
  228|  50.5k|  ir = IR(ref);
  ------------------
  |  |   38|  50.5k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  229|  50.5k|  ir[1].tv.u64 = u64;
  230|  50.5k|  ir->t.irt = t;
  231|  50.5k|  ir->o = op;
  232|  50.5k|  ir->op12 = 0;
  233|  50.5k|  ir->prev = J->chain[op];
  234|  50.5k|  J->chain[op] = (IRRef1)ref;
  235|  87.7k|found:
  236|  87.7k|  return TREF(ref, t);
  ------------------
  |  |  502|  87.7k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  237|  50.5k|}
lj_ir_knum_u64:
  241|  61.3k|{
  242|  61.3k|  return lj_ir_k64(J, IR_KNUM, u64);
  243|  61.3k|}
lj_ir_kint64:
  247|    344|{
  248|    344|  return lj_ir_k64(J, IR_KINT64, u64);
  249|    344|}
lj_ir_knumint:
  270|  37.6k|{
  271|  37.6k|  int32_t k;
  272|  37.6k|  if (numistrueint(n, &k))
  ------------------
  |  Branch (272:7): [True: 37.3k, False: 252]
  ------------------
  273|  37.3k|    return lj_ir_kint(J, k);
  274|    252|  else
  275|    252|    return lj_ir_knum(J, n);
  276|  37.6k|}
lj_ir_kgc:
  280|   181k|{
  281|   181k|  IRIns *ir, *cir = J->cur.ir;
  282|   181k|  IRRef ref;
  283|   181k|  lj_assertJ(!isdead(J2G(J), o), "interning of dead GC object");
  ------------------
  |  |  527|   181k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   181k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   181k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 181k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   181k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  284|   597k|  for (ref = J->chain[IR_KGC]; ref; ref = cir[ref].prev)
  ------------------
  |  Branch (284:32): [True: 499k, False: 97.9k]
  ------------------
  285|   999k|    if (ir_kgc(&cir[ref]) == o)
  ------------------
  |  |  587|   499k|#define ir_kgc(ir)	check_exp((ir)->o == IR_KGC, gcref((ir)[LJ_GC64].gcr))
  |  |  ------------------
  |  |  |  |  367|   499k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   499k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   499k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 499k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   499k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (285:9): [True: 83.9k, False: 415k]
  ------------------
  286|  83.9k|      goto found;
  287|  97.9k|  ref = ir_nextkgc(J);
  ------------------
  |  |  194|  97.9k|#define ir_nextkgc ir_nextk64
  ------------------
  288|  97.9k|  ir = IR(ref);
  ------------------
  |  |   38|  97.9k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  289|       |  /* NOBARRIER: Current trace is a GC root. */
  290|  97.9k|  ir->op12 = 0;
  291|  97.9k|  setgcref(ir[LJ_GC64].gcr, o);
  ------------------
  |  |   72|  97.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  292|  97.9k|  ir->t.irt = (uint8_t)t;
  293|  97.9k|  ir->o = IR_KGC;
  294|  97.9k|  ir->prev = J->chain[IR_KGC];
  295|  97.9k|  J->chain[IR_KGC] = (IRRef1)ref;
  296|   181k|found:
  297|   181k|  return TREF(ref, t);
  ------------------
  |  |  502|   181k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  298|  97.9k|}
lj_ir_ktrace:
  302|    633|{
  303|    633|  IRRef ref = ir_nextkgc(J);
  ------------------
  |  |  194|    633|#define ir_nextkgc ir_nextk64
  ------------------
  304|    633|  IRIns *ir = IR(ref);
  ------------------
  |  |   38|    633|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  305|    633|  lj_assertJ(irt_toitype_(IRT_P64) == LJ_TTRACE, "mismatched type mapping");
  ------------------
  |  |  527|    633|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    633|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    633|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 633, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    633|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|    633|  ir->t.irt = IRT_P64;
  307|    633|  ir->o = LJ_GC64 ? IR_KNUM : IR_KNULL;  /* Not IR_KGC yet, but same size. */
  ------------------
  |  |  562|    633|#define LJ_GC64			1
  |  |  ------------------
  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  ------------------
  ------------------
  308|    633|  ir->op12 = 0;
  309|    633|  ir->prev = 0;
  310|    633|  return TREF(ref, IRT_P64);
  ------------------
  |  |  502|    633|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  311|    633|}
lj_ir_kptr_:
  315|  59.1k|{
  316|  59.1k|  IRIns *ir, *cir = J->cur.ir;
  317|  59.1k|  IRRef ref;
  318|       |#if LJ_64 && !LJ_GC64
  319|       |  lj_assertJ((void *)(uintptr_t)u32ptr(ptr) == ptr, "out-of-range GC pointer");
  320|       |#endif
  321|  72.1k|  for (ref = J->chain[op]; ref; ref = cir[ref].prev)
  ------------------
  |  Branch (321:28): [True: 47.7k, False: 24.3k]
  ------------------
  322|  95.5k|    if (ir_kptr(&cir[ref]) == ptr)
  ------------------
  |  |  596|  47.7k|  check_exp((ir)->o == IR_KPTR || (ir)->o == IR_KKPTR, \
  |  |  ------------------
  |  |  |  |  367|  47.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  47.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  57.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 38.1k, False: 9.62k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 9.62k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  47.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  597|  47.7k|    mref((ir)[LJ_GC64].ptr, void))
  ------------------
  |  Branch (322:9): [True: 34.7k, False: 12.9k]
  ------------------
  323|  34.7k|      goto found;
  324|  24.3k|#if LJ_GC64
  325|  24.3k|  ref = ir_nextk64(J);
  326|       |#else
  327|       |  ref = ir_nextk(J);
  328|       |#endif
  329|  24.3k|  ir = IR(ref);
  ------------------
  |  |   38|  24.3k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  330|  24.3k|  ir->op12 = 0;
  331|  24.3k|  setmref(ir[LJ_GC64].ptr, ptr);
  ------------------
  |  |   39|  24.3k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  332|  24.3k|  ir->t.irt = IRT_PGC;
  333|  24.3k|  ir->o = op;
  334|  24.3k|  ir->prev = J->chain[op];
  335|  24.3k|  J->chain[op] = (IRRef1)ref;
  336|  59.1k|found:
  337|  59.1k|  return TREF(ref, IRT_PGC);
  ------------------
  |  |  502|  59.1k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  338|  24.3k|}
lj_ir_knull:
  342|  5.50k|{
  343|  5.50k|  IRIns *ir, *cir = J->cur.ir;
  344|  5.50k|  IRRef ref;
  345|  5.50k|  for (ref = J->chain[IR_KNULL]; ref; ref = cir[ref].prev)
  ------------------
  |  Branch (345:34): [True: 1.16k, False: 4.33k]
  ------------------
  346|  1.16k|    if (irt_t(cir[ref].t) == t)
  ------------------
  |  |  364|  1.16k|#define irt_t(t)		((IRType)(t).irt)
  ------------------
  |  Branch (346:9): [True: 1.16k, False: 0]
  ------------------
  347|  1.16k|      goto found;
  348|  4.33k|  ref = ir_nextk(J);
  349|  4.33k|  ir = IR(ref);
  ------------------
  |  |   38|  4.33k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  350|  4.33k|  ir->i = 0;
  351|  4.33k|  ir->t.irt = (uint8_t)t;
  352|  4.33k|  ir->o = IR_KNULL;
  353|  4.33k|  ir->prev = J->chain[IR_KNULL];
  354|  4.33k|  J->chain[IR_KNULL] = (IRRef1)ref;
  355|  5.50k|found:
  356|  5.50k|  return TREF(ref, t);
  ------------------
  |  |  502|  5.50k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  357|  4.33k|}
lj_ir_kslot:
  361|  14.1k|{
  362|  14.1k|  IRIns *ir, *cir = J->cur.ir;
  363|  14.1k|  IRRef2 op12 = IRREF2((IRRef1)key, (IRRef1)slot);
  ------------------
  |  |  483|  14.1k|#define IRREF2(lo, hi)		((IRRef2)(lo) | ((IRRef2)(hi) << 16))
  ------------------
  364|  14.1k|  IRRef ref;
  365|       |  /* Const part is not touched by CSE/DCE, so 0-65535 is ok for IRMlit here. */
  366|  14.1k|  lj_assertJ(tref_isk(key) && slot == (IRRef)(IRRef1)slot,
  ------------------
  |  |  527|  14.1k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  14.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  28.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 14.1k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 14.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  14.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  367|  14.1k|	     "out-of-range key/slot");
  368|  24.4k|  for (ref = J->chain[IR_KSLOT]; ref; ref = cir[ref].prev)
  ------------------
  |  Branch (368:34): [True: 12.5k, False: 11.8k]
  ------------------
  369|  12.5k|    if (cir[ref].op12 == op12)
  ------------------
  |  Branch (369:9): [True: 2.22k, False: 10.3k]
  ------------------
  370|  2.22k|      goto found;
  371|  11.8k|  ref = ir_nextk(J);
  372|  11.8k|  ir = IR(ref);
  ------------------
  |  |   38|  11.8k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  373|  11.8k|  ir->op12 = op12;
  374|  11.8k|  ir->t.irt = IRT_P32;
  375|  11.8k|  ir->o = IR_KSLOT;
  376|  11.8k|  ir->prev = J->chain[IR_KSLOT];
  377|  11.8k|  J->chain[IR_KSLOT] = (IRRef1)ref;
  378|  14.1k|found:
  379|  14.1k|  return TREF(ref, IRT_P32);
  ------------------
  |  |  502|  14.1k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  380|  11.8k|}
lj_ir_kvalue:
  386|   858k|{
  387|   858k|  UNUSED(L);
  ------------------
  |  |   91|   858k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  388|   858k|  lj_assertL(ir->o != IR_KSLOT, "unexpected KSLOT");  /* Common mistake. */
  ------------------
  |  |  365|   858k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   858k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 858k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   858k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  389|   858k|  switch (ir->o) {
  390|   115k|  case IR_KPRI: setpriV(tv, irt_toitype(ir->t)); break;
  ------------------
  |  |  873|   115k|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
  |  Branch (390:3): [True: 115k, False: 742k]
  ------------------
  391|   132k|  case IR_KINT: setintV(tv, ir->i); break;
  ------------------
  |  Branch (391:3): [True: 132k, False: 726k]
  ------------------
  392|   588k|  case IR_KGC: setgcV(L, tv, ir_kgc(ir), irt_toitype(ir->t)); break;
  ------------------
  |  |  587|   588k|#define ir_kgc(ir)	check_exp((ir)->o == IR_KGC, gcref((ir)[LJ_GC64].gcr))
  |  |  ------------------
  |  |  |  |  367|   588k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   588k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   588k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 588k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   588k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                case IR_KGC: setgcV(L, tv, ir_kgc(ir), irt_toitype(ir->t)); break;
  ------------------
  |  |  442|   588k|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|   588k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (392:3): [True: 588k, False: 269k]
  ------------------
  393|      0|  case IR_KPTR: case IR_KKPTR:
  ------------------
  |  Branch (393:3): [True: 0, False: 858k]
  |  Branch (393:17): [True: 0, False: 858k]
  ------------------
  394|      0|    setnumV(tv, (lua_Number)(uintptr_t)ir_kptr(ir));
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  395|      0|    break;
  396|      0|  case IR_KNULL: setintV(tv, 0); break;
  ------------------
  |  Branch (396:3): [True: 0, False: 858k]
  ------------------
  397|  22.1k|  case IR_KNUM: setnumV(tv, ir_knum(ir)->n); break;
  ------------------
  |  |  945|  44.3k|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [True: 22.1k, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (397:3): [True: 22.1k, False: 836k]
  ------------------
  398|      0|#if LJ_HASFFI
  399|      0|  case IR_KINT64: {
  ------------------
  |  Branch (399:3): [True: 0, False: 858k]
  ------------------
  400|      0|    GCcdata *cd = lj_cdata_new_(L, CTID_INT64, 8);
  401|      0|    *(uint64_t *)cdataptr(cd) = ir_kint64(ir)->u64;
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
                  *(uint64_t *)cdataptr(cd) = ir_kint64(ir)->u64;
  ------------------
  |  |  593|      0|#define ir_kint64(ir)	check_exp((ir)->o == IR_KINT64, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|      0|    setcdataV(L, tv, cd);
  403|      0|    break;
  404|      0|    }
  405|      0|#endif
  406|      0|  default: lj_assertL(0, "bad IR constant op %d", ir->o); break;
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  |  Branch (406:3): [True: 0, False: 858k]
  ------------------
  407|   858k|  }
  408|   858k|}
lj_ir_tonumber:
  414|    134|{
  415|    134|  if (!tref_isnumber(tr)) {
  ------------------
  |  |  527|    134|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|    134|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (415:7): [True: 0, False: 134]
  ------------------
  416|      0|    if (tref_isstr(tr))
  ------------------
  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  417|      0|      tr = emitir(IRTG(IR_STRTO, IRT_NUM), tr, 0);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  418|      0|    else
  419|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);
  420|      0|  }
  421|    134|  return tr;
  422|    134|}
lj_ir_tonum:
  426|  22.2k|{
  427|  22.2k|  if (!tref_isnum(tr)) {
  ------------------
  |  |  520|  22.2k|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|  22.2k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (427:7): [True: 2.25k, False: 19.9k]
  ------------------
  428|  2.25k|    if (tref_isinteger(tr))
  ------------------
  |  |  526|  2.25k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  2.25k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 2.25k, False: 0]
  |  |  ------------------
  ------------------
  429|  2.25k|      tr = emitir(IRTN(IR_CONV), tr, IRCONV_NUM_INT);
  ------------------
  |  |   42|  2.25k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  2.25k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  430|      0|    else if (tref_isstr(tr))
  ------------------
  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  431|      0|      tr = emitir(IRTG(IR_STRTO, IRT_NUM), tr, 0);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  432|      0|    else
  433|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);
  434|  2.25k|  }
  435|  22.2k|  return tr;
  436|  22.2k|}
lj_ir_tostr:
  440|  26.8k|{
  441|  26.8k|  if (!tref_isstr(tr)) {
  ------------------
  |  |  515|  26.8k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|  26.8k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (441:7): [True: 6.08k, False: 20.7k]
  ------------------
  442|  6.08k|    if (!tref_isnumber(tr))
  ------------------
  |  |  527|  6.08k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  6.08k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (442:9): [True: 0, False: 6.08k]
  ------------------
  443|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);
  444|  6.08k|    tr = emitir(IRT(IR_TOSTR, IRT_STR), tr,
  ------------------
  |  |   42|  6.08k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  12.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:55): [True: 3.01k, False: 3.07k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  445|  6.08k|		tref_isnum(tr) ? IRTOSTR_NUM : IRTOSTR_INT);
  446|  6.08k|  }
  447|  26.8k|  return tr;
  448|  26.8k|}
lj_ir_numcmp:
  454|  13.1k|{
  455|  13.1k|  switch (op) {
  456|      3|  case IR_EQ: return (a == b);
  ------------------
  |  Branch (456:3): [True: 3, False: 13.1k]
  ------------------
  457|     13|  case IR_NE: return (a != b);
  ------------------
  |  Branch (457:3): [True: 13, False: 13.1k]
  ------------------
  458|      0|  case IR_LT: return (a < b);
  ------------------
  |  Branch (458:3): [True: 0, False: 13.1k]
  ------------------
  459|      3|  case IR_GE: return (a >= b);
  ------------------
  |  Branch (459:3): [True: 3, False: 13.1k]
  ------------------
  460|      0|  case IR_LE: return (a <= b);
  ------------------
  |  Branch (460:3): [True: 0, False: 13.1k]
  ------------------
  461|      0|  case IR_GT: return (a > b);
  ------------------
  |  Branch (461:3): [True: 0, False: 13.1k]
  ------------------
  462|      0|  case IR_ULT: return !(a >= b);
  ------------------
  |  Branch (462:3): [True: 0, False: 13.1k]
  ------------------
  463|  12.6k|  case IR_UGE: return !(a < b);
  ------------------
  |  Branch (463:3): [True: 12.6k, False: 502]
  ------------------
  464|      0|  case IR_ULE: return !(a > b);
  ------------------
  |  Branch (464:3): [True: 0, False: 13.1k]
  ------------------
  465|    483|  case IR_UGT: return !(a <= b);
  ------------------
  |  Branch (465:3): [True: 483, False: 12.6k]
  ------------------
  466|      0|  default: lj_assertX(0, "bad IR op %d", op); return 0;
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  |  Branch (466:3): [True: 0, False: 13.1k]
  ------------------
  467|  13.1k|  }
  468|  13.1k|}
lj_ir_rollback:
  485|  2.26k|{
  486|  2.26k|  IRRef nins = J->cur.nins;
  487|  2.36k|  while (nins > ref) {
  ------------------
  |  Branch (487:10): [True: 101, False: 2.26k]
  ------------------
  488|    101|    IRIns *ir;
  489|    101|    nins--;
  490|    101|    ir = IR(nins);
  ------------------
  |  |   38|    101|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  491|    101|    J->chain[ir->o] = ir->prev;
  492|    101|  }
  493|  2.26k|  J->cur.nins = nins;
  494|  2.26k|}
lj_ir.c:ir_nextk:
  174|   104k|{
  175|   104k|  IRRef ref = J->cur.nk;
  176|   104k|  if (LJ_UNLIKELY(ref <= J->irbotlim)) lj_ir_growbot(J);
  ------------------
  |  |  146|   104k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.50k, False: 103k]
  |  |  ------------------
  ------------------
  177|   104k|  J->cur.nk = --ref;
  178|   104k|  return ref;
  179|   104k|}
lj_ir.c:lj_ir_growbot:
   91|  5.53k|{
   92|  5.53k|  IRIns *baseir = J->irbuf + J->irbotlim;
   93|  5.53k|  MSize szins = J->irtoplim - J->irbotlim;
   94|  5.53k|  lj_assertJ(szins != 0, "zero IR size");
  ------------------
  |  |  527|  5.53k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  5.53k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  5.53k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 5.53k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.53k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   95|  5.53k|  lj_assertJ(J->cur.nk == J->irbotlim || J->cur.nk-1 == J->irbotlim,
  ------------------
  |  |  527|  5.53k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  5.53k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  6.32k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.73k, False: 798]
  |  |  |  |  |  |  |  Branch (355:5): [True: 798, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.53k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   96|  5.53k|	     "unexpected IR growth");
   97|  5.53k|  if (J->cur.nins + (szins >> 1) < J->irtoplim) {
  ------------------
  |  Branch (97:7): [True: 1.94k, False: 3.58k]
  ------------------
   98|       |    /* More than half of the buffer is free on top: shift up by a quarter. */
   99|  1.94k|    MSize ofs = szins >> 2;
  100|  1.94k|    memmove(baseir + ofs, baseir, (J->cur.nins - J->irbotlim)*sizeof(IRIns));
  101|  1.94k|    J->irbotlim -= ofs;
  102|  1.94k|    J->irtoplim -= ofs;
  103|  1.94k|    J->cur.ir = J->irbuf = baseir - J->irbotlim;
  104|  3.58k|  } else {
  105|       |    /* Double the buffer size, but split the growth amongst top/bottom. */
  106|  3.58k|    IRIns *newbase = lj_mem_newt(J->L, 2*szins*sizeof(IRIns), IRIns);
  ------------------
  |  |  133|  3.58k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  3.58k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  107|  3.58k|    MSize ofs = szins >= 256 ? 128 : (szins >> 1);  /* Limit bottom growth. */
  ------------------
  |  Branch (107:17): [True: 0, False: 3.58k]
  ------------------
  108|  3.58k|    memcpy(newbase + ofs, baseir, (J->cur.nins - J->irbotlim)*sizeof(IRIns));
  109|  3.58k|    lj_mem_free(G(J->L), baseir, szins*sizeof(IRIns));
  ------------------
  |  |  705|  3.58k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.58k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  110|  3.58k|    J->irbotlim -= ofs;
  111|  3.58k|    J->irtoplim = J->irbotlim + 2*szins;
  112|  3.58k|    J->cur.ir = J->irbuf = newbase - J->irbotlim;
  113|  3.58k|  }
  114|  5.53k|}
lj_ir.c:ir_nextk64:
  185|   173k|{
  186|   173k|  IRRef ref = J->cur.nk - 2;
  187|   173k|  lj_assertJ(J->state != LJ_TRACE_ASM, "bad JIT state");
  ------------------
  |  |  527|   173k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   173k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   173k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 173k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   173k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  188|   173k|  if (LJ_UNLIKELY(ref < J->irbotlim)) lj_ir_growbot(J);
  ------------------
  |  |  146|   173k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 4.02k, False: 169k]
  |  |  ------------------
  ------------------
  189|   173k|  J->cur.nk = ref;
  190|   173k|  return ref;
  191|   173k|}
lj_ir.c:numistrueint:
  253|  37.6k|{
  254|  37.6k|  int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|  37.6k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  255|  37.6k|  if (n == (lua_Number)k) {
  ------------------
  |  Branch (255:7): [True: 37.3k, False: 252]
  ------------------
  256|  37.3k|    if (kp) *kp = k;
  ------------------
  |  Branch (256:9): [True: 37.3k, False: 0]
  ------------------
  257|  37.3k|    if (k == 0) {  /* Special check for -0. */
  ------------------
  |  Branch (257:9): [True: 118, False: 37.2k]
  ------------------
  258|    118|      TValue tv;
  259|    118|      setnumV(&tv, n);
  ------------------
  |  |  945|    118|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  260|    118|      if (tv.u32.hi != 0)
  ------------------
  |  Branch (260:11): [True: 0, False: 118]
  ------------------
  261|      0|	return 0;
  262|    118|    }
  263|  37.3k|    return 1;
  264|  37.3k|  }
  265|    252|  return 0;
  266|  37.6k|}

lj_opt_dce.c:ir_sideeff:
  601|  88.6k|{
  602|  88.6k|  return (((ir->t.irt | ~IRT_GUARD) & lj_ir_mode[ir->o]) >= IRM_S);
  ------------------
  |  |  291|  88.6k|#define IRM_S			0x60
  ------------------
  603|  88.6k|}
lj_opt_dce.c:lj_ir_nop:
  609|  9.23k|{
  610|  9.23k|  ir->ot = IRT(IR_NOP, IRT_NIL);
  ------------------
  |  |  358|  9.23k|#define IRT(o, t)		((uint32_t)(((o)<<8) | (t)))
  ------------------
  611|  9.23k|  ir->op1 = ir->op2 = 0;
  612|  9.23k|  ir->prev = 0;
  613|  9.23k|}
lj_snap.c:irt_toitype_:
  431|  4.92k|{
  432|  4.92k|  lj_assertX(!LJ_64 || LJ_GC64 || t != IRT_LIGHTUD,
  ------------------
  |  |  366|  4.92k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.84k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.92k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  433|  4.92k|	     "no plain type tag for lightuserdata");
  434|  4.92k|  if (LJ_DUALNUM && t > IRT_NUM) {
  ------------------
  |  |  549|  9.84k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (434:21): [True: 0, False: 0]
  ------------------
  435|      0|    return LJ_TISNUM;
  ------------------
  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  ------------------
  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  ------------------
  436|  4.92k|  } else {
  437|  4.92k|    lj_assertX(t <= IRT_NUM, "no plain type tag for IR type %d", t);
  ------------------
  |  |  366|  4.92k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.92k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.92k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.92k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  438|  4.92k|    return ~(uint32_t)t;
  439|  4.92k|  }
  440|  4.92k|}
lj_record.c:itype2irt:
  417|  2.72M|{
  418|  2.72M|  if (tvisint(tv))
  ------------------
  |  |  803|  2.72M|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  5.45M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  419|      0|    return IRT_INT;
  420|  2.72M|  else if (tvisnum(tv))
  ------------------
  |  |  804|  2.72M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  2.72M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  2.72M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  2.72M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 15.1k, False: 2.71M]
  |  |  ------------------
  ------------------
  421|  15.1k|    return IRT_NUM;
  422|       |#if LJ_64 && !LJ_GC64
  423|       |  else if (tvislightud(tv))
  424|       |    return IRT_LIGHTUD;
  425|       |#endif
  426|  2.71M|  else
  427|  2.71M|    return (IRType)~itype(tv);
  ------------------
  |  |  781|  2.71M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  428|  2.72M|}
lj_asm.c:lj_ir_nop:
  609|  24.2k|{
  610|  24.2k|  ir->ot = IRT(IR_NOP, IRT_NIL);
  ------------------
  |  |  358|  24.2k|#define IRT(o, t)		((uint32_t)(((o)<<8) | (t)))
  ------------------
  611|  24.2k|  ir->op1 = ir->op2 = 0;
  612|  24.2k|  ir->prev = 0;
  613|  24.2k|}
lj_asm.c:irt_toitype_:
  431|  56.7k|{
  432|  56.7k|  lj_assertX(!LJ_64 || LJ_GC64 || t != IRT_LIGHTUD,
  ------------------
  |  |  366|  56.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   113k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  56.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  433|  56.7k|	     "no plain type tag for lightuserdata");
  434|  56.7k|  if (LJ_DUALNUM && t > IRT_NUM) {
  ------------------
  |  |  549|   113k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (434:21): [True: 0, False: 0]
  ------------------
  435|      0|    return LJ_TISNUM;
  ------------------
  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  ------------------
  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  ------------------
  436|  56.7k|  } else {
  437|  56.7k|    lj_assertX(t <= IRT_NUM, "no plain type tag for IR type %d", t);
  ------------------
  |  |  366|  56.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  56.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 56.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  56.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  438|  56.7k|    return ~(uint32_t)t;
  439|  56.7k|  }
  440|  56.7k|}
lj_asm.c:ir_sideeff:
  601|   351k|{
  602|   351k|  return (((ir->t.irt | ~IRT_GUARD) & lj_ir_mode[ir->o]) >= IRM_S);
  ------------------
  |  |  291|   351k|#define IRM_S			0x60
  ------------------
  603|   351k|}
lj_ir.c:irt_toitype_:
  431|   704k|{
  432|   704k|  lj_assertX(!LJ_64 || LJ_GC64 || t != IRT_LIGHTUD,
  ------------------
  |  |  366|   704k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.40M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   704k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  433|   704k|	     "no plain type tag for lightuserdata");
  434|   704k|  if (LJ_DUALNUM && t > IRT_NUM) {
  ------------------
  |  |  549|  1.40M|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (434:21): [True: 0, False: 0]
  ------------------
  435|      0|    return LJ_TISNUM;
  ------------------
  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  ------------------
  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  ------------------
  436|   704k|  } else {
  437|   704k|    lj_assertX(t <= IRT_NUM, "no plain type tag for IR type %d", t);
  ------------------
  |  |  366|   704k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   704k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 704k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   704k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  438|   704k|    return ~(uint32_t)t;
  439|   704k|  }
  440|   704k|}
lj_opt_mem.c:lj_ir_nop:
  609|    170|{
  610|    170|  ir->ot = IRT(IR_NOP, IRT_NIL);
  ------------------
  |  |  358|    170|#define IRT(o, t)		((uint32_t)(((o)<<8) | (t)))
  ------------------
  611|    170|  ir->op1 = ir->op2 = 0;
  612|    170|  ir->prev = 0;
  613|    170|}

lj_opt_loop.c:lj_ir_set_:
   21|   414k|{
   22|   414k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|   414k|}
lj_snap.c:lj_ir_set_:
   21|  11.3k|{
   22|  11.3k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|  11.3k|}
lj_record.c:lj_ir_set_:
   21|   432k|{
   22|   432k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|   432k|}
lj_record.c:lj_ir_knum:
   66|  9.11k|{
   67|  9.11k|  TValue tv;
   68|  9.11k|  tv.n = n;
   69|  9.11k|  return lj_ir_knum_u64(J, tv.u64);
   70|  9.11k|}
lj_ffrecord.c:lj_ir_set_:
   21|   136k|{
   22|   136k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|   136k|}
lj_asm.c:lj_ir_nextins:
   32|  24.2k|{
   33|  24.2k|  IRRef ref = J->cur.nins;
   34|  24.2k|  if (LJ_UNLIKELY(ref >= J->irtoplim)) lj_ir_growtop(J);
  ------------------
  |  |  146|  24.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 5, False: 24.2k]
  |  |  ------------------
  ------------------
   35|  24.2k|  J->cur.nins = ref + 1;
   36|  24.2k|  return ref;
   37|  24.2k|}
lj_asm.c:lj_ir_set_:
   21|  3.36k|{
   22|  3.36k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|  3.36k|}
lj_ir.c:lj_ir_nextins:
   32|   501k|{
   33|   501k|  IRRef ref = J->cur.nins;
   34|   501k|  if (LJ_UNLIKELY(ref >= J->irtoplim)) lj_ir_growtop(J);
  ------------------
  |  |  146|   501k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.71k, False: 498k]
  |  |  ------------------
  ------------------
   35|   501k|  J->cur.nins = ref + 1;
   36|   501k|  return ref;
   37|   501k|}
lj_ir.c:lj_ir_set_:
   21|  96.4k|{
   22|  96.4k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|  96.4k|}
lj_ir.c:lj_ir_knum:
   66|    252|{
   67|    252|  TValue tv;
   68|    252|  tv.n = n;
   69|    252|  return lj_ir_knum_u64(J, tv.u64);
   70|    252|}
lj_opt_fold.c:lj_ir_knum:
   66|  49.0k|{
   67|  49.0k|  TValue tv;
   68|  49.0k|  tv.n = n;
   69|  49.0k|  return lj_ir_knum_u64(J, tv.u64);
   70|  49.0k|}
lj_opt_fold.c:lj_ir_nextins:
   32|   474k|{
   33|   474k|  IRRef ref = J->cur.nins;
   34|   474k|  if (LJ_UNLIKELY(ref >= J->irtoplim)) lj_ir_growtop(J);
  ------------------
  |  |  146|   474k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.50k, False: 473k]
  |  |  ------------------
  ------------------
   35|   474k|  J->cur.nins = ref + 1;
   36|   474k|  return ref;
   37|   474k|}
lj_opt_narrow.c:lj_ir_set_:
   21|   135k|{
   22|   135k|  J->fold.ins.ot = ot; J->fold.ins.op1 = a; J->fold.ins.op2 = b;
   23|   135k|}

lj_opt_loop.c:snap_nextofs:
  303|  23.5k|{
  304|  23.5k|  if (snap+1 == &T->snap[T->nsnap])
  ------------------
  |  Branch (304:7): [True: 0, False: 23.5k]
  ------------------
  305|      0|    return T->nsnapmap;
  306|  23.5k|  else
  307|  23.5k|    return (snap+1)->mapofs;
  308|  23.5k|}
lj_snap.c:snap_pc:
  226|   396k|{
  227|   396k|#if LJ_FR2
  228|   396k|  uint64_t pcbase;
  229|   396k|  memcpy(&pcbase, sn, sizeof(uint64_t));
  230|   396k|  return (const BCIns *)(pcbase >> 8);
  231|       |#else
  232|       |  return (const BCIns *)(uintptr_t)*sn;
  233|       |#endif
  234|   396k|}
lj_snap.c:snap_nextofs:
  303|   371k|{
  304|   371k|  if (snap+1 == &T->snap[T->nsnap])
  ------------------
  |  Branch (304:7): [True: 18.4k, False: 353k]
  ------------------
  305|  18.4k|    return T->nsnapmap;
  306|   353k|  else
  307|   353k|    return (snap+1)->mapofs;
  308|   371k|}
lj_asm.c:snap_pc:
  226|  7.29k|{
  227|  7.29k|#if LJ_FR2
  228|  7.29k|  uint64_t pcbase;
  229|  7.29k|  memcpy(&pcbase, sn, sizeof(uint64_t));
  230|  7.29k|  return (const BCIns *)(pcbase >> 8);
  231|       |#else
  232|       |  return (const BCIns *)(uintptr_t)*sn;
  233|       |#endif
  234|  7.29k|}
lj_asm.c:snap_nextofs:
  303|  14.3k|{
  304|  14.3k|  if (snap+1 == &T->snap[T->nsnap])
  ------------------
  |  Branch (304:7): [True: 14.3k, False: 0]
  ------------------
  305|  14.3k|    return T->nsnapmap;
  306|      0|  else
  307|      0|    return (snap+1)->mapofs;
  308|  14.3k|}

lj_lex_setup:
  399|  2.97M|{
  400|  2.97M|  int header = 0;
  401|  2.97M|  ls->L = L;
  402|  2.97M|  ls->fs = NULL;
  403|  2.97M|  ls->pe = ls->p = NULL;
  404|  2.97M|  ls->vstack = NULL;
  405|  2.97M|  ls->sizevstack = 0;
  406|  2.97M|  ls->vtop = 0;
  407|  2.97M|  ls->bcstack = NULL;
  408|  2.97M|  ls->sizebcstack = 0;
  409|  2.97M|  ls->tok = 0;
  410|  2.97M|  ls->lookahead = TK_eof;  /* No look-ahead token. */
  411|  2.97M|  ls->linenumber = 1;
  412|  2.97M|  ls->lastline = 1;
  413|  2.97M|  ls->endmark = 0;
  414|  2.97M|  ls->fr2 = LJ_FR2;  /* Generate native bytecode by default. */
  ------------------
  |  |  569|  2.97M|#define LJ_FR2			1
  ------------------
  415|  2.97M|  lex_next(ls);  /* Read-ahead first char. */
  416|  2.97M|  if (ls->c == 0xef && ls->p + 2 <= ls->pe && (uint8_t)ls->p[0] == 0xbb &&
  ------------------
  |  Branch (416:7): [True: 0, False: 2.97M]
  |  Branch (416:24): [True: 0, False: 0]
  |  Branch (416:47): [True: 0, False: 0]
  ------------------
  417|  2.97M|      (uint8_t)ls->p[1] == 0xbf) {  /* Skip UTF-8 BOM (if buffered). */
  ------------------
  |  Branch (417:7): [True: 0, False: 0]
  ------------------
  418|      0|    ls->p += 2;
  419|      0|    lex_next(ls);
  420|      0|    header = 1;
  421|      0|  }
  422|  2.97M|  if (ls->c == '#') {  /* Skip POSIX #! header line. */
  ------------------
  |  Branch (422:7): [True: 22, False: 2.97M]
  ------------------
  423|  2.19k|    do {
  424|  2.19k|      lex_next(ls);
  425|  2.19k|      if (ls->c == LEX_EOF) return 0;
  ------------------
  |  |   42|  2.19k|#define LEX_EOF			(-1)
  ------------------
  |  Branch (425:11): [True: 15, False: 2.18k]
  ------------------
  426|  2.19k|    } while (!lex_iseol(ls));
  ------------------
  |  |   43|  2.18k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 7, False: 2.17k]
  |  |  |  Branch (43:42): [True: 0, False: 2.17k]
  |  |  ------------------
  ------------------
  427|      7|    lex_newline(ls);
  428|      7|    header = 1;
  429|      7|  }
  430|  2.97M|  if (ls->c == LUA_SIGNATURE[0]) {  /* Bytecode dump. */
  ------------------
  |  |   27|  2.97M|#define	LUA_SIGNATURE	"\033Lua"
  ------------------
  |  Branch (430:7): [True: 2, False: 2.97M]
  ------------------
  431|      2|    if (header) {
  ------------------
  |  Branch (431:9): [True: 0, False: 2]
  ------------------
  432|       |      /*
  433|       |      ** Loading bytecode with an extra header is disabled for security
  434|       |      ** reasons. This may circumvent the usual check for bytecode vs.
  435|       |      ** Lua code by looking at the first char. Since this is a potential
  436|       |      ** security violation no attempt is made to echo the chunkname either.
  437|       |      */
  438|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_BCBAD));
  439|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
  440|      0|    }
  441|      2|    return 1;
  442|      2|  }
  443|  2.97M|  return 0;
  444|  2.97M|}
lj_lex_cleanup:
  448|  2.97M|{
  449|  2.97M|  global_State *g = G(L);
  ------------------
  |  |  705|  2.97M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.97M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  450|  2.97M|  lj_mem_freevec(g, ls->bcstack, ls->sizebcstack, BCInsLine);
  ------------------
  |  |  130|  2.97M|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  451|  2.97M|  lj_mem_freevec(g, ls->vstack, ls->sizevstack, VarInfo);
  ------------------
  |  |  130|  2.97M|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  452|  2.97M|  lj_buf_free(g, &ls->sb);
  453|  2.97M|}
lj_lex_next:
  457|   765M|{
  458|   765M|  ls->lastline = ls->linenumber;
  459|   765M|  if (LJ_LIKELY(ls->lookahead == TK_eof)) {  /* No lookahead token? */
  ------------------
  |  |  145|   765M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 588M, False: 177M]
  |  |  ------------------
  ------------------
  460|   588M|    ls->tok = lex_scan(ls, &ls->tokval);  /* Get next token. */
  461|   588M|  } else {  /* Otherwise return lookahead token. */
  462|   177M|    ls->tok = ls->lookahead;
  463|   177M|    ls->lookahead = TK_eof;
  464|   177M|    ls->tokval = ls->lookaheadval;
  465|   177M|  }
  466|   765M|}
lj_lex_lookahead:
  470|   177M|{
  471|   177M|  lj_assertLS(ls->lookahead == TK_eof, "double lookahead");
  ------------------
  |  |   89|   177M|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   177M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   177M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 177M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   177M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  472|   177M|  ls->lookahead = lex_scan(ls, &ls->lookaheadval);
  473|   177M|  return ls->lookahead;
  474|   177M|}
lj_lex_token2str:
  478|  2.34M|{
  479|  2.34M|  if (tok > TK_OFS)
  ------------------
  |  Branch (479:7): [True: 741k, False: 1.60M]
  ------------------
  480|   741k|    return tokennames[tok-TK_OFS-1];
  481|  1.60M|  else if (!lj_char_iscntrl(tok))
  ------------------
  |  |   25|  1.60M|#define lj_char_iscntrl(c)	lj_char_isa((c), LJ_CHAR_CNTRL)
  |  |  ------------------
  |  |  |  |   24|  1.60M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (481:12): [True: 1.60M, False: 2]
  ------------------
  482|  1.60M|    return lj_strfmt_pushf(ls->L, "%c", tok);
  483|      2|  else
  484|      2|    return lj_strfmt_pushf(ls->L, "char(%d)", tok);
  485|  2.34M|}
lj_lex_error:
  489|  1.98M|{
  490|  1.98M|  const char *tokstr;
  491|  1.98M|  va_list argp;
  492|  1.98M|  if (tok == 0) {
  ------------------
  |  Branch (492:7): [True: 121, False: 1.98M]
  ------------------
  493|    121|    tokstr = NULL;
  494|  1.98M|  } else if (tok == TK_name || tok == TK_string || tok == TK_number) {
  ------------------
  |  Branch (494:14): [True: 329k, False: 1.65M]
  |  Branch (494:32): [True: 1.28k, False: 1.65M]
  |  Branch (494:52): [True: 292k, False: 1.36M]
  ------------------
  495|   623k|    lex_save(ls, '\0');
  496|   623k|    tokstr = ls->sb.b;
  497|  1.36M|  } else {
  498|  1.36M|    tokstr = lj_lex_token2str(ls, tok);
  499|  1.36M|  }
  500|  1.98M|  va_start(argp, em);
  501|  1.98M|  lj_err_lex(ls->L, ls->chunkname, tokstr, ls->linenumber, em, argp);
  502|      0|  va_end(argp);
  503|      0|}
lj_lex_init:
  507|  13.6k|{
  508|  13.6k|  uint32_t i;
  509|   314k|  for (i = 0; i < TK_RESERVED; i++) {
  ------------------
  |  Branch (509:15): [True: 301k, False: 13.6k]
  ------------------
  510|   301k|    GCstr *s = lj_str_newz(L, tokennames[i]);
  ------------------
  |  |   27|   301k|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
  511|   301k|    fixstring(s);  /* Reserved words are never collected. */
  ------------------
  |  |   45|   301k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|   301k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  512|   301k|    s->reserved = (uint8_t)(i+1);
  513|   301k|  }
  514|  13.6k|}
lj_lex.c:lex_next:
   64|  3.29G|{
   65|  3.29G|  return (ls->c = ls->p < ls->pe ? (LexChar)(uint8_t)*ls->p++ : lex_more(ls));
  ------------------
  |  Branch (65:19): [True: 3.28G, False: 5.01M]
  ------------------
   66|  3.29G|}
lj_lex.c:lex_more:
   47|  5.01M|{
   48|  5.01M|  size_t sz;
   49|  5.01M|  const char *p = ls->rfunc(ls->L, ls->rdata, &sz);
   50|  5.01M|  if (p == NULL || sz == 0) return LEX_EOF;
  ------------------
  |  |   42|  1.35M|#define LEX_EOF			(-1)
  ------------------
  |  Branch (50:7): [True: 1.35M, False: 3.65M]
  |  Branch (50:20): [True: 1.64k, False: 3.65M]
  ------------------
   51|  3.65M|  if (sz >= LJ_MAX_BUF) {
  ------------------
  |  |   55|  3.65M|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|  3.65M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 0, False: 3.65M]
  ------------------
   52|      0|    if (sz != ~(size_t)0) lj_err_mem(ls->L);
  ------------------
  |  Branch (52:9): [True: 0, False: 0]
  ------------------
   53|      0|    sz = ~(uintptr_t)0 - (uintptr_t)p;
   54|      0|    if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
                  if (sz >= LJ_MAX_BUF) sz = LJ_MAX_BUF-1;
  ------------------
  |  |   55|      0|#define LJ_MAX_BUF	LJ_MAX_MEM32	/* Max. buffer length. */
  |  |  ------------------
  |  |  |  |   49|      0|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (54:9): [True: 0, False: 0]
  ------------------
   55|      0|    ls->endmark = 1;
   56|      0|  }
   57|  3.65M|  ls->pe = p + sz;
   58|  3.65M|  ls->p = p + 1;
   59|  3.65M|  return (LexChar)(uint8_t)p[0];
   60|  3.65M|}
lj_lex.c:lex_newline:
   83|  1.40M|{
   84|  1.40M|  LexChar old = ls->c;
   85|  1.40M|  lj_assertLS(lex_iseol(ls), "bad usage");
  ------------------
  |  |   89|  1.40M|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.40M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.43M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.37M, False: 27.9k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 27.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.40M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   86|  1.40M|  lex_next(ls);  /* Skip "\n" or "\r". */
   87|  1.40M|  if (lex_iseol(ls) && ls->c != old) lex_next(ls);  /* Skip "\n\r" or "\r\n". */
  ------------------
  |  |   43|  2.81M|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 116k, False: 1.29M]
  |  |  |  Branch (43:42): [True: 16.0k, False: 1.27M]
  |  |  ------------------
  ------------------
  |  Branch (87:24): [True: 2.68k, False: 130k]
  ------------------
   88|  1.40M|  if (++ls->linenumber >= LJ_MAX_LINE)
  ------------------
  |  |   64|  1.40M|#define LJ_MAX_LINE	LJ_MAX_MEM32	/* Max. source code line number. */
  |  |  ------------------
  |  |  |  |   49|  1.40M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (88:7): [True: 0, False: 1.40M]
  ------------------
   89|      0|    lj_lex_error(ls, ls->tok, LJ_ERR_XLINES);
   90|  1.40M|}
lj_lex.c:lex_scan:
  292|   765M|{
  293|   765M|  lj_buf_reset(&ls->sb);
  294|  1.15G|  for (;;) {
  295|  1.15G|    if (lj_char_isident(ls->c)) {
  ------------------
  |  |   32|  1.15G|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  1.15G|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 375M, False: 777M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  296|   375M|      GCstr *s;
  297|   375M|      if (lj_char_isdigit(ls->c)) {  /* Numeric literal. */
  ------------------
  |  |   28|   375M|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|   375M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 186M, False: 188M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|   186M|	lex_number(ls, tv);
  299|   186M|	return TK_number;
  300|   186M|      }
  301|       |      /* Identifier or reserved word. */
  302|  1.23G|      do {
  303|  1.23G|	lex_savenext(ls);
  304|  1.23G|      } while (lj_char_isident(ls->c));
  ------------------
  |  |   32|  1.23G|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  1.23G|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.04G, False: 188M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  305|   188M|      s = lj_parse_keepstr(ls, ls->sb.b, sbuflen(&ls->sb));
  ------------------
  |  |   36|   188M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  306|   188M|      setstrV(ls->L, tv, s);
  307|   188M|      if (s->reserved > 0)  /* Reserved word? */
  ------------------
  |  Branch (307:11): [True: 4.37M, False: 183M]
  ------------------
  308|  4.37M|	return TK_OFS + s->reserved;
  309|   183M|      return TK_name;
  310|   188M|    }
  311|   777M|    switch (ls->c) {
  312|  1.29M|    case '\n':
  ------------------
  |  Branch (312:5): [True: 1.29M, False: 775M]
  ------------------
  313|  1.31M|    case '\r':
  ------------------
  |  Branch (313:5): [True: 25.1k, False: 777M]
  ------------------
  314|  1.31M|      lex_newline(ls);
  315|  1.31M|      continue;
  316|   380M|    case ' ':
  ------------------
  |  Branch (316:5): [True: 380M, False: 396M]
  ------------------
  317|   380M|    case '\t':
  ------------------
  |  Branch (317:5): [True: 6.34k, False: 777M]
  ------------------
  318|   380M|    case '\v':
  ------------------
  |  Branch (318:5): [True: 141k, False: 776M]
  ------------------
  319|   385M|    case '\f':
  ------------------
  |  Branch (319:5): [True: 4.75M, False: 772M]
  ------------------
  320|   385M|      lex_next(ls);
  321|   385M|      continue;
  322|   705k|    case '-':
  ------------------
  |  Branch (322:5): [True: 705k, False: 776M]
  ------------------
  323|   705k|      lex_next(ls);
  324|   705k|      if (ls->c != '-') return '-';
  ------------------
  |  Branch (324:11): [True: 670k, False: 35.2k]
  ------------------
  325|  35.2k|      lex_next(ls);
  326|  35.2k|      if (ls->c == '[') {  /* Long comment "--[=*[...]=*]". */
  ------------------
  |  Branch (326:11): [True: 195, False: 35.0k]
  ------------------
  327|    195|	int sep = lex_skipeq(ls);
  328|    195|	lj_buf_reset(&ls->sb);  /* `lex_skipeq' may dirty the buffer */
  329|    195|	if (sep >= 0) {
  ------------------
  |  Branch (329:6): [True: 64, False: 131]
  ------------------
  330|     64|	  lex_longstring(ls, NULL, sep);
  331|     64|	  lj_buf_reset(&ls->sb);
  332|     64|	  continue;
  333|     64|	}
  334|    195|      }
  335|       |      /* Short comment "--.*\n". */
  336|  1.34M|      while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   43|  2.68M|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 34.1k, False: 1.30M]
  |  |  |  Branch (43:42): [True: 157, False: 1.30M]
  |  |  ------------------
  ------------------
                    while (!lex_iseol(ls) && ls->c != LEX_EOF)
  ------------------
  |  |   42|  1.30M|#define LEX_EOF			(-1)
  ------------------
  |  Branch (336:32): [True: 1.30M, False: 950]
  ------------------
  337|  1.30M|	lex_next(ls);
  338|  35.2k|      continue;
  339|  51.2k|    case '[': {
  ------------------
  |  Branch (339:5): [True: 51.2k, False: 777M]
  ------------------
  340|  51.2k|      int sep = lex_skipeq(ls);
  341|  51.2k|      if (sep >= 0) {
  ------------------
  |  Branch (341:11): [True: 3.45k, False: 47.7k]
  ------------------
  342|  3.45k|	lex_longstring(ls, tv, sep);
  343|  3.45k|	return TK_string;
  344|  47.7k|      } else if (sep == -1) {
  ------------------
  |  Branch (344:18): [True: 47.7k, False: 29]
  ------------------
  345|  47.7k|	return '[';
  346|  47.7k|      } else {
  347|     29|	lj_lex_error(ls, TK_string, LJ_ERR_XLDELIM);
  348|      0|	continue;
  349|     29|      }
  350|  51.2k|      }
  351|   177M|    case '=':
  ------------------
  |  Branch (351:5): [True: 177M, False: 599M]
  ------------------
  352|   177M|      lex_next(ls);
  353|   177M|      if (ls->c != '=') return '='; else { lex_next(ls); return TK_eq; }
  ------------------
  |  Branch (353:11): [True: 177M, False: 74.7k]
  ------------------
  354|  21.0k|    case '<':
  ------------------
  |  Branch (354:5): [True: 21.0k, False: 777M]
  ------------------
  355|  21.0k|      lex_next(ls);
  356|  21.0k|      if (ls->c != '=') return '<'; else { lex_next(ls); return TK_le; }
  ------------------
  |  Branch (356:11): [True: 14.7k, False: 6.27k]
  ------------------
  357|  22.5k|    case '>':
  ------------------
  |  Branch (357:5): [True: 22.5k, False: 777M]
  ------------------
  358|  22.5k|      lex_next(ls);
  359|  22.5k|      if (ls->c != '=') return '>'; else { lex_next(ls); return TK_ge; }
  ------------------
  |  Branch (359:11): [True: 18.2k, False: 4.30k]
  ------------------
  360|  4.97k|    case '~':
  ------------------
  |  Branch (360:5): [True: 4.97k, False: 777M]
  ------------------
  361|  4.97k|      lex_next(ls);
  362|  4.97k|      if (ls->c != '=') return '~'; else { lex_next(ls); return TK_ne; }
  ------------------
  |  Branch (362:11): [True: 249, False: 4.72k]
  ------------------
  363|  17.4k|    case ':':
  ------------------
  |  Branch (363:5): [True: 17.4k, False: 777M]
  ------------------
  364|  17.4k|      lex_next(ls);
  365|  17.4k|      if (ls->c != ':') return ':'; else { lex_next(ls); return TK_label; }
  ------------------
  |  Branch (365:11): [True: 14.9k, False: 2.52k]
  ------------------
  366|  8.55M|    case '"':
  ------------------
  |  Branch (366:5): [True: 8.55M, False: 768M]
  ------------------
  367|  9.50M|    case '\'':
  ------------------
  |  Branch (367:5): [True: 950k, False: 776M]
  ------------------
  368|  9.50M|      lex_string(ls, tv);
  369|  9.50M|      return TK_string;
  370|   123k|    case '.':
  ------------------
  |  Branch (370:5): [True: 123k, False: 776M]
  ------------------
  371|   123k|      if (lex_savenext(ls) == '.') {
  ------------------
  |  Branch (371:11): [True: 35.5k, False: 87.7k]
  ------------------
  372|  35.5k|	lex_next(ls);
  373|  35.5k|	if (ls->c == '.') {
  ------------------
  |  Branch (373:6): [True: 4.99k, False: 30.5k]
  ------------------
  374|  4.99k|	  lex_next(ls);
  375|  4.99k|	  return TK_dots;   /* ... */
  376|  4.99k|	}
  377|  30.5k|	return TK_concat;   /* .. */
  378|  87.7k|      } else if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  87.7k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  87.7k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (378:18): [True: 46.8k, False: 40.9k]
  ------------------
  379|  46.8k|	return '.';
  380|  46.8k|      } else {
  381|  40.9k|	lex_number(ls, tv);
  382|  40.9k|	return TK_number;
  383|  40.9k|      }
  384|  1.30M|    case LEX_EOF:
  ------------------
  |  |   42|  1.30M|#define LEX_EOF			(-1)
  ------------------
  |  Branch (384:5): [True: 1.30M, False: 775M]
  ------------------
  385|  1.30M|      return TK_eof;
  386|   200M|    default: {
  ------------------
  |  Branch (386:5): [True: 200M, False: 576M]
  ------------------
  387|   200M|      LexChar c = ls->c;
  388|   200M|      lex_next(ls);
  389|   200M|      return c;  /* Single-char tokens (+ - / ...). */
  390|   123k|    }
  391|   777M|    }
  392|   777M|  }
  393|   765M|}
lj_lex.c:lex_number:
   96|   186M|{
   97|   186M|  StrScanFmt fmt;
   98|   186M|  LexChar c, xp = 'e';
   99|   186M|  lj_assertLS(lj_char_isdigit(ls->c), "bad usage");
  ------------------
  |  |   89|   186M|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   186M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   186M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 186M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   186M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  100|   186M|  if ((c = ls->c) == '0' && (lex_savenext(ls) | 0x20) == 'x')
  ------------------
  |  Branch (100:7): [True: 1.09M, False: 185M]
  |  Branch (100:29): [True: 5.74k, False: 1.09M]
  ------------------
  101|  5.74k|    xp = 'p';
  102|  1.38G|  while (lj_char_isident(ls->c) || ls->c == '.' ||
  ------------------
  |  |   32|  1.38G|#define lj_char_isident(c)	lj_char_isa((c), LJ_CHAR_IDENT)
  |  |  ------------------
  |  |  |  |   24|  2.77G|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.10G, False: 280M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (102:36): [True: 92.7M, False: 187M]
  ------------------
  103|  1.38G|	 ((ls->c == '-' || ls->c == '+') && (c | 0x20) == xp)) {
  ------------------
  |  Branch (103:5): [True: 915k, False: 186M]
  |  Branch (103:21): [True: 10.8k, False: 186M]
  |  Branch (103:38): [True: 436k, False: 490k]
  ------------------
  104|  1.19G|    c = ls->c;
  105|  1.19G|    lex_savenext(ls);
  106|  1.19G|  }
  107|   186M|  lex_save(ls, '\0');
  108|   186M|  fmt = lj_strscan_scan((const uint8_t *)ls->sb.b, sbuflen(&ls->sb)-1, tv,
  ------------------
  |  |   36|   186M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  109|   186M|	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |  549|   186M|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   12|      0|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
              	  (LJ_DUALNUM ? STRSCAN_OPT_TOINT : STRSCAN_OPT_TONUM) |
  ------------------
  |  |   13|   186M|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  110|   186M|	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |  585|   186M|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   15|   186M|#define STRSCAN_OPT_LL		0x08
  ------------------
              	  (LJ_HASFFI ? (STRSCAN_OPT_LL|STRSCAN_OPT_IMAG) : 0));
  ------------------
  |  |   14|   186M|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  111|   186M|  if (LJ_DUALNUM && fmt == STRSCAN_INT) {
  ------------------
  |  |  549|   373M|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (111:21): [True: 0, False: 0]
  ------------------
  112|      0|    setitype(tv, LJ_TISNUM);
  ------------------
  |  |  871|      0|#define setitype(o, i)		((o)->it = ((i) << 15))
  ------------------
  113|   186M|  } else if (fmt == STRSCAN_NUM) {
  ------------------
  |  Branch (113:14): [True: 186M, False: 89.9k]
  ------------------
  114|       |    /* Already in correct format. */
  115|   186M|#if LJ_HASFFI
  116|   186M|  } else if (fmt != STRSCAN_ERROR) {
  ------------------
  |  Branch (116:14): [True: 70.2k, False: 19.7k]
  ------------------
  117|  70.2k|    lua_State *L = ls->L;
  118|  70.2k|    GCcdata *cd;
  119|  70.2k|    lj_assertLS(fmt == STRSCAN_I64 || fmt == STRSCAN_U64 || fmt == STRSCAN_IMAG,
  ------------------
  |  |   89|  70.2k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  70.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   195k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 22.4k, False: 47.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 40.5k, False: 7.24k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 7.24k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  70.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|  70.2k|		"unexpected number format %d", fmt);
  121|  70.2k|    ctype_loadffi(L);
  ------------------
  |  |  396|  70.2k|  do { \
  |  |  397|  70.2k|    if (!ctype_ctsG(G(L))) { \
  |  |  ------------------
  |  |  |  |  384|  70.2k|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  70.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (397:9): [True: 3.31k, False: 66.9k]
  |  |  ------------------
  |  |  398|  3.31k|      ptrdiff_t oldtop = (char *)L->top - mref(L->stack, char); \
  |  |  ------------------
  |  |  |  |   36|  3.31k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  399|  3.31k|      luaopen_ffi(L); \
  |  |  400|  3.31k|      L->top = (TValue *)(mref(L->stack, char) + oldtop); \
  |  |  ------------------
  |  |  |  |   36|  3.31k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  401|  3.31k|    } \
  |  |  402|  70.2k|  } while (0)
  |  |  ------------------
  |  |  |  Branch (402:12): [Folded - Ignored]
  |  |  ------------------
  ------------------
  122|  70.2k|    if (fmt == STRSCAN_IMAG) {
  ------------------
  |  Branch (122:9): [True: 7.24k, False: 62.9k]
  ------------------
  123|  7.24k|      cd = lj_cdata_new_(L, CTID_COMPLEX_DOUBLE, 2*sizeof(double));
  124|  7.24k|      ((double *)cdataptr(cd))[0] = 0;
  ------------------
  |  |  360|  7.24k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  125|  7.24k|      ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  360|  7.24k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
                    ((double *)cdataptr(cd))[1] = numV(tv);
  ------------------
  |  |  866|  7.24k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  7.24k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  7.24k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  7.24k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 7.24k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  7.24k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|  62.9k|    } else {
  127|  62.9k|      cd = lj_cdata_new_(L, fmt==STRSCAN_I64 ? CTID_INT64 : CTID_UINT64, 8);
  ------------------
  |  Branch (127:29): [True: 22.4k, False: 40.5k]
  ------------------
  128|  62.9k|      *(uint64_t *)cdataptr(cd) = tv->u64;
  ------------------
  |  |  360|  62.9k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  129|  62.9k|    }
  130|  70.2k|    lj_parse_keepcdata(ls, tv, cd);
  131|  70.2k|#endif
  132|  70.2k|  } else {
  133|  19.7k|    lj_assertLS(fmt == STRSCAN_ERROR,
  ------------------
  |  |   89|  19.7k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  19.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  19.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 19.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  19.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|  19.7k|		"unexpected number format %d", fmt);
  135|  19.7k|    lj_lex_error(ls, TK_number, LJ_ERR_XNUMBER);
  136|  19.7k|  }
  137|   186M|}
lj_lex.c:lex_savenext:
   76|  2.52G|{
   77|  2.52G|  lex_save(ls, ls->c);
   78|  2.52G|  return lex_next(ls);
   79|  2.52G|}
lj_lex.c:lex_skipeq:
  141|  65.7k|{
  142|  65.7k|  int count = 0;
  143|  65.7k|  LexChar s = ls->c;
  144|  65.7k|  lj_assertLS(s == '[' || s == ']', "bad usage");
  ------------------
  |  |   89|  65.7k|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  65.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  80.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 51.4k, False: 14.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 14.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  65.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  145|  89.7k|  while (lex_savenext(ls) == '=' && count < 0x20000000)
  ------------------
  |  Branch (145:10): [True: 23.9k, False: 65.7k]
  |  Branch (145:37): [True: 23.9k, False: 0]
  ------------------
  146|  23.9k|    count++;
  147|  65.7k|  return (ls->c == s) ? count : (-count) - 1;
  ------------------
  |  Branch (147:10): [True: 7.17k, False: 58.6k]
  ------------------
  148|  65.7k|}
lj_lex.c:lex_longstring:
  152|  3.52k|{
  153|  3.52k|  lex_savenext(ls);  /* Skip second '['. */
  154|  3.52k|  if (lex_iseol(ls))  /* Skip initial newline. */
  ------------------
  |  |   43|  3.52k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 860, False: 2.66k]
  |  |  |  Branch (43:42): [True: 656, False: 2.00k]
  |  |  ------------------
  ------------------
  155|  1.51k|    lex_newline(ls);
  156|  5.89M|  for (;;) {
  157|  5.89M|    switch (ls->c) {
  158|    197|    case LEX_EOF:
  ------------------
  |  |   42|    197|#define LEX_EOF			(-1)
  ------------------
  |  Branch (158:5): [True: 197, False: 5.89M]
  ------------------
  159|    197|      lj_lex_error(ls, TK_eof, tv ? LJ_ERR_XLSTR : LJ_ERR_XLCOM);
  ------------------
  |  Branch (159:32): [True: 184, False: 13]
  ------------------
  160|      0|      break;
  161|  14.3k|    case ']':
  ------------------
  |  Branch (161:5): [True: 14.3k, False: 5.87M]
  ------------------
  162|  14.3k|      if (lex_skipeq(ls) == sep) {
  ------------------
  |  Branch (162:11): [True: 3.32k, False: 11.0k]
  ------------------
  163|  3.32k|	lex_savenext(ls);  /* Skip second ']'. */
  164|  3.32k|	goto endloop;
  165|  3.32k|      }
  166|  11.0k|      break;
  167|  85.8k|    case '\n':
  ------------------
  |  Branch (167:5): [True: 85.8k, False: 5.80M]
  ------------------
  168|  87.3k|    case '\r':
  ------------------
  |  Branch (168:5): [True: 1.58k, False: 5.89M]
  ------------------
  169|  87.3k|      lex_save(ls, '\n');
  170|  87.3k|      lex_newline(ls);
  171|  87.3k|      if (!tv) lj_buf_reset(&ls->sb);  /* Don't waste space for comments. */
  ------------------
  |  Branch (171:11): [True: 647, False: 86.7k]
  ------------------
  172|  87.3k|      break;
  173|  5.79M|    default:
  ------------------
  |  Branch (173:5): [True: 5.79M, False: 101k]
  ------------------
  174|  5.79M|      lex_savenext(ls);
  175|  5.79M|      break;
  176|  5.89M|    }
  177|  5.89M|  } endloop:
  178|  3.32k|  if (tv) {
  ------------------
  |  Branch (178:7): [True: 3.27k, False: 51]
  ------------------
  179|  3.27k|    GCstr *str = lj_parse_keepstr(ls, ls->sb.b + (2 + (MSize)sep),
  180|  3.27k|				      sbuflen(&ls->sb) - 2*(2 + (MSize)sep));
  ------------------
  |  |   36|  3.27k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  181|  3.27k|    setstrV(ls->L, tv, str);
  182|  3.27k|  }
  183|  3.32k|}
lj_lex.c:lex_string:
  187|  9.50M|{
  188|  9.50M|  LexChar delim = ls->c;  /* Delimiter is '\'' or '"'. */
  189|  9.50M|  lex_savenext(ls);
  190|  71.8M|  while (ls->c != delim) {
  ------------------
  |  Branch (190:10): [True: 62.3M, False: 9.50M]
  ------------------
  191|  62.3M|    switch (ls->c) {
  192|    708|    case LEX_EOF:
  ------------------
  |  |   42|    708|#define LEX_EOF			(-1)
  ------------------
  |  Branch (192:5): [True: 708, False: 62.3M]
  ------------------
  193|    708|      lj_lex_error(ls, TK_eof, LJ_ERR_XSTR);
  194|      0|      continue;
  195|    992|    case '\n':
  ------------------
  |  Branch (195:5): [True: 992, False: 62.3M]
  ------------------
  196|  1.01k|    case '\r':
  ------------------
  |  Branch (196:5): [True: 26, False: 62.3M]
  ------------------
  197|  1.01k|      lj_lex_error(ls, TK_string, LJ_ERR_XSTR);
  198|      0|      continue;
  199|  12.4k|    case '\\': {
  ------------------
  |  Branch (199:5): [True: 12.4k, False: 62.3M]
  ------------------
  200|  12.4k|      LexChar c = lex_next(ls);  /* Skip the '\\'. */
  201|  12.4k|      switch (c) {
  202|     86|      case 'a': c = '\a'; break;
  ------------------
  |  Branch (202:7): [True: 86, False: 12.3k]
  ------------------
  203|    132|      case 'b': c = '\b'; break;
  ------------------
  |  Branch (203:7): [True: 132, False: 12.3k]
  ------------------
  204|     99|      case 'f': c = '\f'; break;
  ------------------
  |  Branch (204:7): [True: 99, False: 12.3k]
  ------------------
  205|    228|      case 'n': c = '\n'; break;
  ------------------
  |  Branch (205:7): [True: 228, False: 12.2k]
  ------------------
  206|    128|      case 'r': c = '\r'; break;
  ------------------
  |  Branch (206:7): [True: 128, False: 12.3k]
  ------------------
  207|     88|      case 't': c = '\t'; break;
  ------------------
  |  Branch (207:7): [True: 88, False: 12.3k]
  ------------------
  208|     75|      case 'v': c = '\v'; break;
  ------------------
  |  Branch (208:7): [True: 75, False: 12.3k]
  ------------------
  209|    719|      case 'x':  /* Hexadecimal escape '\xXX'. */
  ------------------
  |  Branch (209:7): [True: 719, False: 11.7k]
  ------------------
  210|    719|	c = (lex_next(ls) & 15u) << 4;
  211|    719|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    719|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    719|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (211:6): [True: 518, False: 201]
  ------------------
  212|    518|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|    518|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|    518|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (212:8): [True: 5, False: 513]
  ------------------
  213|    513|	  c += 9 << 4;
  214|    513|	}
  215|    714|	c += (lex_next(ls) & 15u);
  216|    714|	if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|    714|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|    714|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (216:6): [True: 386, False: 328]
  ------------------
  217|    386|	  if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|    386|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|    386|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (217:8): [True: 7, False: 379]
  ------------------
  218|    379|	  c += 9;
  219|    379|	}
  220|    707|	break;
  221|  3.21k|      case 'u':  /* Unicode escape '\u{XX...}'. */
  ------------------
  |  Branch (221:7): [True: 3.21k, False: 9.23k]
  ------------------
  222|  3.21k|	if (lex_next(ls) != '{') goto err_xesc;
  ------------------
  |  Branch (222:6): [True: 10, False: 3.20k]
  ------------------
  223|  3.20k|	lex_next(ls);
  224|  3.20k|	c = 0;
  225|  11.1k|	do {
  226|  11.1k|	  c = (c << 4) | (ls->c & 15u);
  227|  11.1k|	  if (!lj_char_isdigit(ls->c)) {
  ------------------
  |  |   28|  11.1k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  11.1k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (227:8): [True: 10.7k, False: 401]
  ------------------
  228|  10.7k|	    if (!lj_char_isxdigit(ls->c)) goto err_xesc;
  ------------------
  |  |   29|  10.7k|#define lj_char_isxdigit(c)	lj_char_isa((c), LJ_CHAR_XDIGIT)
  |  |  ------------------
  |  |  |  |   24|  10.7k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (228:10): [True: 32, False: 10.6k]
  ------------------
  229|  10.6k|	    c += 9;
  230|  10.6k|	  }
  231|  11.0k|	  if (c >= 0x110000) goto err_xesc;  /* Out of Unicode range. */
  ------------------
  |  Branch (231:8): [True: 9, False: 11.0k]
  ------------------
  232|  11.0k|	} while (lex_next(ls) != '}');
  ------------------
  |  Branch (232:11): [True: 7.91k, False: 3.16k]
  ------------------
  233|  3.16k|	if (c < 0x800) {
  ------------------
  |  Branch (233:6): [True: 546, False: 2.61k]
  ------------------
  234|    546|	  if (c < 0x80) break;
  ------------------
  |  Branch (234:8): [True: 396, False: 150]
  ------------------
  235|    150|	  lex_save(ls, 0xc0 | (c >> 6));
  236|  2.61k|	} else {
  237|  2.61k|	  if (c >= 0x10000) {
  ------------------
  |  Branch (237:8): [True: 1.04k, False: 1.57k]
  ------------------
  238|  1.04k|	    lex_save(ls, 0xf0 | (c >> 18));
  239|  1.04k|	    lex_save(ls, 0x80 | ((c >> 12) & 0x3f));
  240|  1.57k|	  } else {
  241|  1.57k|	    if (c >= 0xd800 && c < 0xe000) goto err_xesc;  /* No surrogates. */
  ------------------
  |  Branch (241:10): [True: 226, False: 1.34k]
  |  Branch (241:25): [True: 2, False: 224]
  ------------------
  242|  1.56k|	    lex_save(ls, 0xe0 | (c >> 12));
  243|  1.56k|	  }
  244|  2.61k|	  lex_save(ls, 0x80 | ((c >> 6) & 0x3f));
  245|  2.61k|	}
  246|  2.76k|	c = 0x80 | (c & 0x3f);
  247|  2.76k|	break;
  248|    576|      case 'z':  /* Skip whitespace. */
  ------------------
  |  Branch (248:7): [True: 576, False: 11.8k]
  ------------------
  249|    576|	lex_next(ls);
  250|    576|	while (lj_char_isspace(ls->c))
  251|  3.86k|	  if (lex_iseol(ls)) lex_newline(ls); else lex_next(ls);
  ------------------
  |  |   43|  3.86k|#define lex_iseol(ls)		(ls->c == '\n' || ls->c == '\r')
  |  |  ------------------
  |  |  |  Branch (43:25): [True: 303, False: 3.56k]
  |  |  |  Branch (43:42): [True: 211, False: 3.35k]
  |  |  ------------------
  ------------------
  252|    576|	continue;
  253|    425|      case '\n': case '\r': lex_save(ls, '\n'); lex_newline(ls); continue;
  ------------------
  |  Branch (253:7): [True: 159, False: 12.2k]
  |  Branch (253:18): [True: 266, False: 12.1k]
  ------------------
  254|  4.53k|      case '\\': case '\"': case '\'': break;
  ------------------
  |  Branch (254:7): [True: 4.31k, False: 8.13k]
  |  Branch (254:18): [True: 147, False: 12.3k]
  |  Branch (254:29): [True: 68, False: 12.3k]
  ------------------
  255|     22|      case LEX_EOF: continue;
  ------------------
  |  |   42|     22|#define LEX_EOF			(-1)
  ------------------
  |  Branch (255:7): [True: 22, False: 12.4k]
  ------------------
  256|  2.12k|      default:
  ------------------
  |  Branch (256:7): [True: 2.12k, False: 10.3k]
  ------------------
  257|  2.12k|	if (!lj_char_isdigit(c))
  ------------------
  |  |   28|  2.12k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  2.12k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (257:6): [True: 15, False: 2.11k]
  ------------------
  258|     15|	  goto err_xesc;
  259|  2.11k|	c -= '0';  /* Decimal escape '\ddd'. */
  260|  2.11k|	if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|  2.11k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  2.11k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.61k, False: 493]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  261|  1.61k|	  c = c*10 + (ls->c - '0');
  262|  1.61k|	  if (lj_char_isdigit(lex_next(ls))) {
  ------------------
  |  |   28|  1.61k|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  1.61k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.25k, False: 362]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  263|  1.25k|	    c = c*10 + (ls->c - '0');
  264|  1.25k|	    if (c > 255) {
  ------------------
  |  Branch (264:10): [True: 1, False: 1.25k]
  ------------------
  265|     81|	    err_xesc:
  266|     81|	      lj_lex_error(ls, TK_string, LJ_ERR_XESC);
  267|      1|	    }
  268|  1.25k|	    lex_next(ls);
  269|  1.25k|	  }
  270|  1.61k|	}
  271|  2.11k|	lex_save(ls, c);
  272|  2.11k|	continue;
  273|  12.4k|      }
  274|  9.23k|      lex_save(ls, c);
  275|  9.23k|      lex_next(ls);
  276|  9.23k|      continue;
  277|  12.4k|      }
  278|  62.3M|    default:
  ------------------
  |  Branch (278:5): [True: 62.3M, False: 14.1k]
  ------------------
  279|  62.3M|      lex_savenext(ls);
  280|  62.3M|      break;
  281|  62.3M|    }
  282|  62.3M|  }
  283|  9.50M|  lex_savenext(ls);  /* Skip trailing delimiter. */
  284|  9.50M|  setstrV(ls->L, tv,
  285|  9.50M|	  lj_parse_keepstr(ls, ls->sb.b+1, sbuflen(&ls->sb)-2));
  ------------------
  |  |   36|  9.50M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  286|  9.50M|}
lj_lex.c:lex_save:
   70|  2.70G|{
   71|  2.70G|  lj_buf_putb(&ls->sb, c);
   72|  2.70G|}

lj_lib_register:
   77|   177k|{
   78|   177k|  GCtab *env = tabref(L->env);
  ------------------
  |  |  514|   177k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   177k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   79|   177k|  GCfunc *ofn = NULL;
   80|   177k|  int ffid = *p++;
   81|   177k|  BCIns *bcff = &L2GG(L)->bcff[*p++];
  ------------------
  |  |  114|   177k|#define L2GG(L)		(G2GG(G(L)))
  |  |  ------------------
  |  |  |  |  112|   177k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|   177k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   82|   177k|  GCtab *tab = lib_create_table(L, libname, *p++);
   83|   177k|  ptrdiff_t tpos = L->top - L->base;
   84|       |
   85|       |  /* Avoid barriers further down. */
   86|   177k|  lj_gc_anybarriert(L, tab);
  ------------------
  |  |   95|   177k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   177k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 177k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   87|   177k|  tab->nomm = 0;
   88|       |
   89|  3.16M|  for (;;) {
   90|  3.16M|    uint32_t tag = *p++;
   91|  3.16M|    MSize len = tag & LIBINIT_LENMASK;
  ------------------
  |  |  102|  3.16M|#define LIBINIT_LENMASK	0x3f
  ------------------
   92|  3.16M|    tag &= LIBINIT_TAGMASK;
  ------------------
  |  |  103|  3.16M|#define LIBINIT_TAGMASK	0xc0
  ------------------
   93|  3.16M|    if (tag != LIBINIT_STRING) {
  ------------------
  |  |  107|  3.16M|#define LIBINIT_STRING	0xc0
  ------------------
  |  Branch (93:9): [True: 2.10M, False: 1.05M]
  ------------------
   94|  2.10M|      const char *name;
   95|  2.10M|      MSize nuv = (MSize)(L->top - L->base - tpos);
   96|  2.10M|      GCfunc *fn = lj_func_newC(L, nuv, env);
   97|  2.10M|      if (nuv) {
  ------------------
  |  Branch (97:11): [True: 95.8k, False: 2.00M]
  ------------------
   98|  95.8k|	L->top = L->base + tpos;
   99|  95.8k|	memcpy(fn->c.upvalue, L->top, sizeof(TValue)*nuv);
  100|  95.8k|      }
  101|  2.10M|      fn->c.ffid = (uint8_t)(ffid++);
  102|  2.10M|      name = (const char *)p;
  103|  2.10M|      p += len;
  104|  2.10M|      if (tag == LIBINIT_CF)
  ------------------
  |  |  104|  2.10M|#define LIBINIT_CF	0x00
  ------------------
  |  Branch (104:11): [True: 1.33M, False: 766k]
  ------------------
  105|  1.33M|	setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|  1.33M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  106|   766k|      else
  107|   766k|	setmref(fn->c.pc, bcff++);
  ------------------
  |  |   39|   766k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|  2.10M|      if (tag == LIBINIT_ASM_)
  ------------------
  |  |  106|  2.10M|#define LIBINIT_ASM_	0x80
  ------------------
  |  Branch (108:11): [True: 397k, False: 1.70M]
  ------------------
  109|   397k|	fn->c.f = ofn->c.f;  /* Copy handler from previous function. */
  110|  1.70M|      else
  111|  1.70M|	fn->c.f = *cf++;  /* Get cf or handler from C function table. */
  112|  2.10M|      if (len) {
  ------------------
  |  Branch (112:11): [True: 2.09M, False: 13.6k]
  ------------------
  113|       |	/* NOBARRIER: See above for common barrier. */
  114|  2.09M|	setfuncV(L, lj_tab_setstr(L, tab, lj_str_new(L, name, len)), fn);
  115|  2.09M|      }
  116|  2.10M|      ofn = fn;
  117|  2.10M|    } else {
  118|  1.05M|      switch (tag | len) {
  119|   109k|      case LIBINIT_LUA:
  ------------------
  |  |  109|   109k|#define LIBINIT_LUA	0xf9
  ------------------
  |  Branch (119:7): [True: 109k, False: 945k]
  ------------------
  120|   109k|	p = lib_read_lfunc(L, p, tab);
  121|   109k|	break;
  122|   146k|      case LIBINIT_SET:
  ------------------
  |  |  110|   146k|#define LIBINIT_SET	0xfa
  ------------------
  |  Branch (122:7): [True: 146k, False: 908k]
  ------------------
  123|   146k|	L->top -= 2;
  124|   292k|	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  795|   292k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   146k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   146k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 146k, False: 0]
  |  |  ------------------
  ------------------
              	if (tvisstr(L->top+1) && strV(L->top+1)->len == 0)
  ------------------
  |  |  859|   146k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   146k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   146k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   146k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 146k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   146k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (124:27): [True: 20.3k, False: 126k]
  ------------------
  125|  20.3k|	  env = tabV(L->top);
  ------------------
  |  |  864|  20.3k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  20.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  20.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  20.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  126|   126k|	else  /* NOBARRIER: See above for common barrier. */
  127|   126k|	  copyTV(L, lj_tab_set(L, tab, L->top+1), L->top);
  128|   146k|	break;
  129|   146k|      case LIBINIT_NUMBER:
  ------------------
  |  |  111|  27.3k|#define LIBINIT_NUMBER	0xfb
  ------------------
  |  Branch (129:7): [True: 27.3k, False: 1.02M]
  ------------------
  130|  27.3k|	memcpy(&L->top->n, p, sizeof(double));
  131|  27.3k|	L->top++;
  132|  27.3k|	p += sizeof(double);
  133|  27.3k|	break;
  134|   184k|      case LIBINIT_COPY:
  ------------------
  |  |  112|   184k|#define LIBINIT_COPY	0xfc
  ------------------
  |  Branch (134:7): [True: 184k, False: 871k]
  ------------------
  135|   184k|	copyTV(L, L->top, L->top - *p++);
  136|   184k|	L->top++;
  137|   184k|	break;
  138|  27.3k|      case LIBINIT_LASTCL:
  ------------------
  |  |  113|  27.3k|#define LIBINIT_LASTCL	0xfd
  ------------------
  |  Branch (138:7): [True: 27.3k, False: 1.02M]
  ------------------
  139|  27.3k|	setfuncV(L, L->top++, ofn);
  140|  27.3k|	break;
  141|  54.7k|      case LIBINIT_FFID:
  ------------------
  |  |  114|  54.7k|#define LIBINIT_FFID	0xfe
  ------------------
  |  Branch (141:7): [True: 54.7k, False: 1.00M]
  ------------------
  142|  54.7k|	ffid++;
  143|  54.7k|	break;
  144|   177k|      case LIBINIT_END:
  ------------------
  |  |  115|   177k|#define LIBINIT_END	0xff
  ------------------
  |  Branch (144:7): [True: 177k, False: 877k]
  ------------------
  145|   177k|	return;
  146|   327k|      default:
  ------------------
  |  Branch (146:7): [True: 327k, False: 727k]
  ------------------
  147|   327k|	setstrV(L, L->top++, lj_str_new(L, (const char *)p, len));
  148|   327k|	p += len;
  149|   327k|	break;
  150|  1.05M|      }
  151|  1.05M|    }
  152|  3.16M|  }
  153|   177k|}
lj_lib_pushcc:
  157|  69.7k|{
  158|  69.7k|  GCfunc *fn;
  159|  69.7k|  lua_pushcclosure(L, f, n);
  160|  69.7k|  fn = funcV(L->top-1);
  ------------------
  |  |  860|  69.7k|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  69.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  69.7k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  69.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 69.7k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  69.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  161|      0|  fn->c.ffid = (uint8_t)id;
  162|  69.7k|  setmref(fn->c.pc, &G(L)->bc_cfunc_int);
  ------------------
  |  |   39|  69.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  163|  69.7k|  return fn;
  164|  69.7k|}
lj_lib_prereg:
  167|  68.4k|{
  168|  68.4k|  luaL_findtable(L, LUA_REGISTRYINDEX, "_PRELOAD", 4);
  ------------------
  |  |   36|  68.4k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
  169|  68.4k|  lua_pushcfunction(L, f);
  ------------------
  |  |  262|  68.4k|#define lua_pushcfunction(L,f)	lua_pushcclosure(L, (f), 0)
  ------------------
  170|       |  /* NOBARRIER: The function is new (marked white). */
  171|  68.4k|  setgcref(funcV(L->top-1)->c.env, obj2gco(env));
  ------------------
  |  |   72|   136k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:27): [True: 68.4k, False: 0]
  |  |  ------------------
  ------------------
  172|      0|  lua_setfield(L, -2, name);
  173|  68.4k|  L->top--;
  174|  68.4k|}
lj_lib_checkany:
  189|  59.1k|{
  190|  59.1k|  TValue *o = L->base + narg-1;
  191|  59.1k|  if (o >= L->top)
  ------------------
  |  Branch (191:7): [True: 3, False: 59.1k]
  ------------------
  192|      3|    lj_err_arg(L, narg, LJ_ERR_NOVAL);
  193|  59.1k|  return o;
  194|  59.1k|}
lj_lib_checkstr:
  197|  3.92M|{
  198|  3.92M|  TValue *o = L->base + narg-1;
  199|  3.92M|  if (o < L->top) {
  ------------------
  |  Branch (199:7): [True: 3.92M, False: 0]
  ------------------
  200|  3.92M|    if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|  3.92M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 3.92M, False: 38]
  |  |  ------------------
  ------------------
  201|  3.92M|      return strV(o);
  ------------------
  |  |  859|  3.92M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  3.92M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.92M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.92M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.92M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.92M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  202|  3.92M|    } else if (tvisnumber(o)) {
  ------------------
  |  |  802|     38|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|     38|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     38|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     38|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 6, False: 32]
  |  |  ------------------
  ------------------
  203|      6|      GCstr *s = lj_strfmt_number(L, o);
  204|      6|      setstrV(L, o, s);
  205|      6|      return s;
  206|      6|    }
  207|  3.92M|  }
  208|     32|  lj_err_argt(L, narg, LUA_TSTRING);
  ------------------
  |  |   79|     32|#define LUA_TSTRING		4
  ------------------
  209|      0|  return NULL;  /* unreachable */
  210|  3.92M|}
lj_lib_optstr:
  213|  5.93M|{
  214|  5.93M|  TValue *o = L->base + narg-1;
  215|  5.93M|  return (o < L->top && !tvisnil(o)) ? lj_lib_checkstr(L, narg) : NULL;
  ------------------
  |  |  782|    982|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (215:11): [True: 982, False: 5.93M]
  |  Branch (215:25): [True: 976, False: 6]
  ------------------
  216|  5.93M|}
lj_lib_checknum:
  228|   951k|{
  229|   951k|  TValue *o = L->base + narg-1;
  230|   951k|  if (!(o < L->top &&
  ------------------
  |  Branch (230:9): [True: 951k, False: 1]
  ------------------
  231|   951k|	(tvisnumber(o) || (tvisstr(o) && lj_strscan_num(strV(o), o)))))
  ------------------
  |  |  802|  1.90M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   951k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   951k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   951k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 951k, False: 14]
  |  |  ------------------
  ------------------
              	(tvisnumber(o) || (tvisstr(o) && lj_strscan_num(strV(o), o)))))
  ------------------
  |  |  795|     28|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     14|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     14|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 14]
  |  |  ------------------
  ------------------
              	(tvisnumber(o) || (tvisstr(o) && lj_strscan_num(strV(o), o)))))
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (231:35): [True: 0, False: 0]
  ------------------
  232|     15|    lj_err_argt(L, narg, LUA_TNUMBER);
  ------------------
  |  |   78|     15|#define LUA_TNUMBER		3
  ------------------
  233|   951k|  if (LJ_UNLIKELY(tvisint(o))) {
  ------------------
  |  |  146|   951k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  234|      0|    lua_Number n = (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|      0|    setnumV(o, n);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  236|      0|    return n;
  237|   951k|  } else {
  238|   951k|    return numV(o);
  ------------------
  |  |  866|   951k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   951k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   951k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   951k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 951k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   951k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  239|   951k|  }
  240|   951k|}
lj_lib_checkint:
  243|   159k|{
  244|   159k|  TValue *o = L->base + narg-1;
  245|   159k|  if (!(o < L->top && lj_strscan_numberobj(o)))
  ------------------
  |  Branch (245:9): [True: 159k, False: 0]
  |  Branch (245:23): [True: 159k, False: 6]
  ------------------
  246|      6|    lj_err_argt(L, narg, LUA_TNUMBER);
  ------------------
  |  |   78|      6|#define LUA_TNUMBER		3
  ------------------
  247|   159k|  if (LJ_LIKELY(tvisint(o))) {
  ------------------
  |  |  145|   159k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  248|      0|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  249|   159k|  } else {
  250|   159k|    int32_t i = lj_num2int(numV(o));
  ------------------
  |  | 1000|   318k|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 159k, False: 0]
  |  |  ------------------
  ------------------
  251|   159k|    if (LJ_DUALNUM) setintV(o, i);
  ------------------
  |  |  549|   159k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  252|   159k|    return i;
  253|   159k|  }
  254|   159k|}
lj_lib_optint:
  257|  58.0k|{
  258|  58.0k|  TValue *o = L->base + narg-1;
  259|  58.0k|  return (o < L->top && !tvisnil(o)) ? lj_lib_checkint(L, narg) : def;
  ------------------
  |  |  782|    514|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (259:11): [True: 514, False: 57.4k]
  |  Branch (259:25): [True: 513, False: 1]
  ------------------
  260|  58.0k|}
lj_lib_checkfunc:
  263|      4|{
  264|      4|  TValue *o = L->base + narg-1;
  265|      4|  if (!(o < L->top && tvisfunc(o)))
  ------------------
  |  |  796|      4|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      4|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 4]
  |  |  ------------------
  ------------------
  |  Branch (265:9): [True: 4, False: 0]
  ------------------
  266|      4|    lj_err_argt(L, narg, LUA_TFUNCTION);
  ------------------
  |  |   81|      4|#define LUA_TFUNCTION		6
  ------------------
  267|      0|  return funcV(o);
  ------------------
  |  |  860|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  268|      0|}
lj_lib_checktab:
  288|  3.13k|{
  289|  3.13k|  TValue *o = L->base + narg-1;
  290|  3.13k|  if (!(o < L->top && tvistab(o)))
  ------------------
  |  |  800|  3.13k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  3.13k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  3.13k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 3.12k, False: 12]
  |  |  ------------------
  ------------------
  |  Branch (290:9): [True: 3.13k, False: 0]
  ------------------
  291|     12|    lj_err_argt(L, narg, LUA_TTABLE);
  ------------------
  |  |   80|     12|#define LUA_TTABLE		5
  ------------------
  292|  3.12k|  return tabV(o);
  ------------------
  |  |  864|  3.12k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  3.12k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.12k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.12k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|  3.12k|}
lj_lib_checktabornil:
  296|  1.01k|{
  297|  1.01k|  TValue *o = L->base + narg-1;
  298|  1.01k|  if (o < L->top) {
  ------------------
  |  Branch (298:7): [True: 1.01k, False: 1]
  ------------------
  299|  1.01k|    if (tvistab(o))
  ------------------
  |  |  800|  1.01k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  1.01k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  1.01k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 668, False: 347]
  |  |  ------------------
  ------------------
  300|  1.01k|      return tabV(o);
  ------------------
  |  |  864|    668|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    668|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    668|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    668|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 668, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    668|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  301|    347|    else if (tvisnil(o))
  ------------------
  |  |  782|    347|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 344, False: 3]
  |  |  ------------------
  ------------------
  302|    344|      return NULL;
  303|  1.01k|  }
  304|      4|  lj_err_arg(L, narg, LJ_ERR_NOTABN);
  305|      0|  return NULL;  /* unreachable */
  306|  1.01k|}
lj_lib_checkopt:
  309|  6.74k|{
  310|  6.74k|  GCstr *s = def >= 0 ? lj_lib_optstr(L, narg) : lj_lib_checkstr(L, narg);
  ------------------
  |  Branch (310:14): [True: 6.74k, False: 0]
  ------------------
  311|  6.74k|  if (s) {
  ------------------
  |  Branch (311:7): [True: 0, False: 6.74k]
  ------------------
  312|      0|    const char *opt = strdata(s);
  ------------------
  |  |  316|      0|#define strdata(s)	((const char *)((s)+1))
  ------------------
  313|      0|    MSize len = s->len;
  314|      0|    int i;
  315|      0|    for (i = 0; *(const uint8_t *)lst; i++) {
  ------------------
  |  Branch (315:17): [True: 0, False: 0]
  ------------------
  316|      0|      if (*(const uint8_t *)lst == len && memcmp(opt, lst+1, len) == 0)
  ------------------
  |  Branch (316:11): [True: 0, False: 0]
  |  Branch (316:43): [True: 0, False: 0]
  ------------------
  317|      0|	return i;
  318|      0|      lst += 1+*(const uint8_t *)lst;
  319|      0|    }
  320|      0|    lj_err_argv(L, narg, LJ_ERR_INVOPTM, opt);
  321|      0|  }
  322|  6.74k|  return def;
  323|  6.74k|}
lj_lib.c:lib_create_table:
   32|   177k|{
   33|   177k|  if (libname) {
  ------------------
  |  Branch (33:7): [True: 150k, False: 26.9k]
  ------------------
   34|   150k|    luaL_findtable(L, LUA_REGISTRYINDEX, "_LOADED", 16);
  ------------------
  |  |   36|   150k|#define LUA_REGISTRYINDEX	(-10000)
  ------------------
   35|   150k|    lua_getfield(L, -1, libname);
   36|   150k|    if (!tvistab(L->top-1)) {
  ------------------
  |  |  800|   150k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|   150k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|   150k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  ------------------
  |  Branch (36:9): [True: 150k, False: 0]
  ------------------
   37|   150k|      L->top--;
   38|   150k|      if (luaL_findtable(L, LUA_GLOBALSINDEX, libname, hsize) != NULL)
  ------------------
  |  |   38|   150k|#define LUA_GLOBALSINDEX	(-10002)
  ------------------
  |  Branch (38:11): [True: 0, False: 150k]
  ------------------
   39|      0|	lj_err_callerv(L, LJ_ERR_BADMODN, libname);
   40|   150k|      settabV(L, L->top, tabV(L->top-1));
  ------------------
  |  |  864|   150k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   150k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   150k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   150k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 150k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   150k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   41|      0|      L->top++;
   42|   150k|      lua_setfield(L, -3, libname);  /* _LOADED[libname] = new table */
   43|   150k|    }
   44|   150k|    L->top--;
   45|   150k|    settabV(L, L->top-1, tabV(L->top));
  ------------------
  |  |  864|   150k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   150k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   150k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   150k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 150k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   150k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   46|   150k|  } else {
   47|  26.9k|    lua_createtable(L, 0, hsize);
   48|  26.9k|  }
   49|   177k|  return tabV(L->top-1);
  ------------------
  |  |  864|   177k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   177k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   177k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   177k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 177k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   177k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   50|   177k|}
lj_lib.c:lib_read_lfunc:
   53|   109k|{
   54|   109k|  int len = *p++;
   55|   109k|  GCstr *name = lj_str_new(L, (const char *)p, len);
   56|   109k|  LexState ls;
   57|   109k|  GCproto *pt;
   58|   109k|  GCfunc *fn;
   59|   109k|  memset(&ls, 0, sizeof(ls));
   60|   109k|  ls.L = L;
   61|   109k|  ls.p = (const char *)(p+len);
   62|   109k|  ls.pe = (const char *)~(uintptr_t)0;
   63|   109k|  ls.c = -1;
   64|   109k|  ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |   43|   109k|#define BCDUMP_F_STRIP		0x02
  ------------------
                ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |  630|   109k|#define LJ_BE			0
  ------------------
                ls.level = (BCDUMP_F_STRIP|(LJ_BE*BCDUMP_F_BE));
  ------------------
  |  |   42|   109k|#define BCDUMP_F_BE		0x01
  ------------------
   65|   109k|  ls.fr2 = LJ_FR2;
  ------------------
  |  |  569|   109k|#define LJ_FR2			1
  ------------------
   66|   109k|  ls.chunkname = name;
   67|   109k|  pt = lj_bcread_proto(&ls);
   68|   109k|  pt->firstline = ~(BCLine)0;
   69|   109k|  fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|   109k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   109k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   70|       |  /* NOBARRIER: See below for common barrier. */
   71|   109k|  setfuncV(L, lj_tab_setstr(L, tab, name), fn);
   72|   109k|  return (const uint8_t *)ls.p;
   73|   109k|}

lua_loadx:
   64|  2.97M|{
   65|  2.97M|  LexState ls;
   66|  2.97M|  int status;
   67|  2.97M|  ls.rfunc = reader;
   68|  2.97M|  ls.rdata = data;
   69|  2.97M|  ls.chunkarg = chunkname ? chunkname : "?";
  ------------------
  |  Branch (69:17): [True: 2.97M, False: 0]
  ------------------
   70|  2.97M|  ls.mode = mode;
   71|  2.97M|  lj_buf_init(L, &ls.sb);
   72|  2.97M|  status = lj_vm_cpcall(L, NULL, &ls, cpparser);
   73|  2.97M|  lj_lex_cleanup(L, &ls);
   74|  2.97M|  lj_gc_check(L);
  ------------------
  |  |   66|  2.97M|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  2.97M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 42.8k, False: 2.93M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  2.97M|      lj_gc_step(L); }
  ------------------
   75|  2.97M|  return status;
   76|  2.97M|}
lua_load:
   80|  13.6k|{
   81|  13.6k|  return lua_loadx(L, reader, data, chunkname, NULL);
   82|  13.6k|}
luaL_loadfilex:
  100|    951|{
  101|    951|  FileReaderCtx ctx;
  102|    951|  int status;
  103|    951|  const char *chunkname;
  104|    951|  int err = 0;
  105|    951|  if (filename) {
  ------------------
  |  Branch (105:7): [True: 945, False: 6]
  ------------------
  106|    945|    chunkname = lua_pushfstring(L, "@%s", filename);
  107|    945|    ctx.fp = fopen(filename, "rb");
  108|    945|    if (ctx.fp == NULL) {
  ------------------
  |  Branch (108:9): [True: 0, False: 945]
  ------------------
  109|      0|      L->top--;
  110|      0|      lua_pushfstring(L, "cannot open %s: %s", filename, strerror(errno));
  111|      0|      return LUA_ERRFILE;
  ------------------
  |  |   19|      0|#define LUA_ERRFILE     (LUA_ERRERR+1)
  |  |  ------------------
  |  |  |  |   48|      0|#define LUA_ERRERR	5
  |  |  ------------------
  ------------------
  112|      0|    }
  113|    945|  } else {
  114|      6|    ctx.fp = stdin;
  115|      6|    chunkname = "=stdin";
  116|      6|  }
  117|    951|  status = lua_loadx(L, reader_file, &ctx, chunkname, mode);
  118|    951|  if (ferror(ctx.fp)) err = errno;
  ------------------
  |  Branch (118:7): [True: 0, False: 951]
  ------------------
  119|    951|  if (filename) {
  ------------------
  |  Branch (119:7): [True: 945, False: 6]
  ------------------
  120|    945|    fclose(ctx.fp);
  121|    945|    L->top--;
  122|    945|    copyTV(L, L->top-1, L->top);
  123|    945|  }
  124|    951|  if (err) {
  ------------------
  |  Branch (124:7): [True: 0, False: 951]
  ------------------
  125|      0|    L->top--;
  126|      0|    lua_pushfstring(L, "cannot read %s: %s", chunkname+1, strerror(err));
  127|      0|    return LUA_ERRFILE;
  ------------------
  |  |   19|      0|#define LUA_ERRFILE     (LUA_ERRERR+1)
  |  |  ------------------
  |  |  |  |   48|      0|#define LUA_ERRERR	5
  |  |  ------------------
  ------------------
  128|      0|  }
  129|    951|  return status;
  130|    951|}
luaL_loadfile:
  133|    951|{
  134|    951|  return luaL_loadfilex(L, filename, NULL);
  135|    951|}
luaL_loadbufferx:
  154|  2.95M|{
  155|  2.95M|  StringReaderCtx ctx;
  156|  2.95M|  ctx.str = buf;
  157|  2.95M|  ctx.size = size;
  158|  2.95M|  return lua_loadx(L, reader_string, &ctx, name, mode);
  159|  2.95M|}
lj_load.c:cpparser:
   29|  2.97M|{
   30|  2.97M|  LexState *ls = (LexState *)ud;
   31|  2.97M|  GCproto *pt;
   32|  2.97M|  GCfunc *fn;
   33|  2.97M|  int bc;
   34|  2.97M|  UNUSED(dummy);
  ------------------
  |  |   91|  2.97M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   35|  2.97M|  cframe_errfunc(L->cframe) = -1;  /* Inherit error function. */
  ------------------
  |  |  279|  2.97M|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|  2.97M|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
   36|  2.97M|  bc = lj_lex_setup(L, ls);
   37|  2.97M|  if (ls->mode) {
  ------------------
  |  Branch (37:7): [True: 0, False: 2.97M]
  ------------------
   38|      0|    int xmode = 1;
   39|      0|    const char *mode = ls->mode;
   40|      0|    char c;
   41|      0|    while ((c = *mode++)) {
  ------------------
  |  Branch (41:12): [True: 0, False: 0]
  ------------------
   42|      0|      if (c == (bc ? 'b' : 't')) xmode = 0;
  ------------------
  |  Branch (42:11): [True: 0, False: 0]
  |  Branch (42:17): [True: 0, False: 0]
  ------------------
   43|      0|      if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (c == (LJ_FR2 ? 'W' : 'X')) ls->fr2 = !LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (43:11): [True: 0, False: 0]
  ------------------
   44|      0|    }
   45|      0|    if (xmode) {
  ------------------
  |  Branch (45:9): [True: 0, False: 0]
  ------------------
   46|      0|      setstrV(L, L->top++, lj_err_str(L, LJ_ERR_XMODE));
   47|      0|      lj_err_throw(L, LUA_ERRSYNTAX);
  ------------------
  |  |   46|      0|#define LUA_ERRSYNTAX	3
  ------------------
   48|      0|    }
   49|      0|  }
   50|  2.97M|  pt = bc ? lj_bcread(ls) : lj_parse(ls);
  ------------------
  |  Branch (50:8): [True: 2, False: 2.97M]
  ------------------
   51|  2.97M|  if (ls->fr2 == LJ_FR2) {
  ------------------
  |  |  569|  2.97M|#define LJ_FR2			1
  ------------------
  |  Branch (51:7): [True: 989k, False: 1.98M]
  ------------------
   52|   989k|    fn = lj_func_newL_empty(L, pt, tabref(L->env));
  ------------------
  |  |  514|   989k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|   989k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
   53|       |    /* Don't combine above/below into one statement. */
   54|   989k|    setfuncV(L, L->top++, fn);
   55|  1.98M|  } else {
   56|       |    /* Non-native generation returns a dumpable, but non-runnable prototype. */
   57|  1.98M|    setprotoV(L, L->top++, pt);
   58|  1.98M|  }
   59|  2.97M|  return NULL;
   60|  2.97M|}
lj_load.c:reader_file:
   90|   391k|{
   91|   391k|  FileReaderCtx *ctx = (FileReaderCtx *)ud;
   92|   391k|  UNUSED(L);
  ------------------
  |  |   91|   391k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   93|   391k|  if (feof(ctx->fp)) return NULL;
  ------------------
  |  Branch (93:7): [True: 158, False: 391k]
  ------------------
   94|   391k|  *size = fread(ctx->buf, 1, sizeof(ctx->buf), ctx->fp);
   95|   391k|  return *size > 0 ? ctx->buf : NULL;
  ------------------
  |  Branch (95:10): [True: 391k, False: 21]
  ------------------
   96|   391k|}
lj_load.c:reader_string:
  143|  4.30M|{
  144|  4.30M|  StringReaderCtx *ctx = (StringReaderCtx *)ud;
  145|  4.30M|  UNUSED(L);
  ------------------
  |  |   91|  4.30M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  146|  4.30M|  if (ctx->size == 0) return NULL;
  ------------------
  |  Branch (146:7): [True: 1.34M, False: 2.95M]
  ------------------
  147|  2.95M|  *size = ctx->size;
  148|  2.95M|  ctx->size = 0;
  149|  2.95M|  return ctx->str;
  150|  4.30M|}

lj_mcode_sync:
   43|  34.6k|{
   44|       |#ifdef LUAJIT_USE_VALGRIND
   45|       |  VALGRIND_DISCARD_TRANSLATIONS(start, (char *)end-(char *)start);
   46|       |#endif
   47|  34.6k|#if LJ_TARGET_X86ORX64
   48|  34.6k|  UNUSED(start); UNUSED(end);
  ------------------
  |  |   91|  34.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(start); UNUSED(end);
  ------------------
  |  |   91|  34.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   49|       |#elif LJ_TARGET_WINDOWS
   50|       |  FlushInstructionCache(GetCurrentProcess(), start, (char *)end-(char *)start);
   51|       |#elif LJ_TARGET_IOS
   52|       |  sys_icache_invalidate(start, (char *)end-(char *)start);
   53|       |#elif LJ_TARGET_PPC
   54|       |  lj_vm_cachesync(start, end);
   55|       |#elif defined(__GNUC__) || defined(__clang__)
   56|       |  __clear_cache(start, end);
   57|       |#else
   58|       |#error "Missing builtin to flush instruction cache"
   59|       |#endif
   60|  34.6k|}
lj_mcode_free:
  287|  15.0k|{
  288|  15.0k|  MCode *mc = J->mcarea;
  289|  15.0k|  J->mcarea = NULL;
  290|  15.0k|  J->szallmcarea = 0;
  291|  18.2k|  while (mc) {
  ------------------
  |  Branch (291:10): [True: 3.20k, False: 15.0k]
  ------------------
  292|  3.20k|    MCode *next = ((MCLink *)mc)->next;
  293|  3.20k|    size_t sz = ((MCLink *)mc)->size;
  294|  3.20k|    lj_err_deregister_mcode(mc, sz, (uint8_t *)mc + sizeof(MCLink));
  295|  3.20k|    mcode_free(J, mc, sz);
  296|  3.20k|    mc = next;
  297|  3.20k|  }
  298|  15.0k|}
lj_mcode_reserve:
  304|  24.2k|{
  305|  24.2k|  if (!J->mcarea)
  ------------------
  |  Branch (305:7): [True: 3.20k, False: 21.0k]
  ------------------
  306|  3.20k|    mcode_allocarea(J);
  307|  21.0k|  else
  308|  21.0k|    mcode_protect(J, MCPROT_GEN);
  ------------------
  |  |  171|  21.0k|#define MCPROT_GEN	MCPROT_RW
  |  |  ------------------
  |  |  |  |  101|  21.0k|#define MCPROT_RW	(PROT_READ|PROT_WRITE)
  |  |  ------------------
  ------------------
  309|  24.2k|  *lim = J->mcbot;
  310|  24.2k|  return J->mctop;
  311|  24.2k|}
lj_mcode_commit:
  315|  24.2k|{
  316|  24.2k|  J->mctop = top;
  317|  24.2k|  mcode_protect(J, MCPROT_RUN);
  ------------------
  |  |  172|  24.2k|#define MCPROT_RUN	MCPROT_RX
  |  |  ------------------
  |  |  |  |  102|  24.2k|#define MCPROT_RX	(PROT_READ|PROT_EXEC)
  |  |  ------------------
  ------------------
  318|  24.2k|}
lj_mcode_abort:
  322|  1.72k|{
  323|  1.72k|  if (J->mcarea)
  ------------------
  |  Branch (323:7): [True: 1.16k, False: 553]
  ------------------
  324|  1.16k|    mcode_protect(J, MCPROT_RUN);
  ------------------
  |  |  172|  1.16k|#define MCPROT_RUN	MCPROT_RX
  |  |  ------------------
  |  |  |  |  102|  1.16k|#define MCPROT_RX	(PROT_READ|PROT_EXEC)
  |  |  ------------------
  ------------------
  325|  1.72k|}
lj_mcode_patch:
  329|  20.9k|{
  330|  20.9k|  if (finish) {
  ------------------
  |  Branch (330:7): [True: 10.4k, False: 10.4k]
  ------------------
  331|  10.4k|#if LUAJIT_SECURITY_MCODE
  332|  10.4k|    if (J->mcarea == ptr)
  ------------------
  |  Branch (332:9): [True: 10.4k, False: 0]
  ------------------
  333|  10.4k|      mcode_protect(J, MCPROT_RUN);
  ------------------
  |  |  172|  10.4k|#define MCPROT_RUN	MCPROT_RX
  |  |  ------------------
  |  |  |  |  102|  10.4k|#define MCPROT_RX	(PROT_READ|PROT_EXEC)
  |  |  ------------------
  ------------------
  334|      0|    else if (LJ_UNLIKELY(mcode_setprot(ptr, ((MCLink *)ptr)->size, MCPROT_RUN)))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  335|      0|      mcode_protfail(J);
  336|  10.4k|#endif
  337|  10.4k|    return NULL;
  338|  10.4k|  } else {
  339|  10.4k|    MCode *mc = J->mcarea;
  340|       |    /* Try current area first to use the protection cache. */
  341|  10.4k|    if (ptr >= mc && ptr < (MCode *)((char *)mc + J->szmcarea)) {
  ------------------
  |  Branch (341:9): [True: 10.4k, False: 0]
  |  Branch (341:22): [True: 10.4k, False: 0]
  ------------------
  342|  10.4k|#if LUAJIT_SECURITY_MCODE
  343|  10.4k|      mcode_protect(J, MCPROT_GEN);
  ------------------
  |  |  171|  10.4k|#define MCPROT_GEN	MCPROT_RW
  |  |  ------------------
  |  |  |  |  101|  10.4k|#define MCPROT_RW	(PROT_READ|PROT_WRITE)
  |  |  ------------------
  ------------------
  344|  10.4k|#endif
  345|  10.4k|      return mc;
  346|  10.4k|    }
  347|       |    /* Otherwise search through the list of MCode areas. */
  348|      0|    for (;;) {
  349|      0|      mc = ((MCLink *)mc)->next;
  350|      0|      lj_assertJ(mc != NULL, "broken MCode area chain");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  351|      0|      if (ptr >= mc && ptr < (MCode *)((char *)mc + ((MCLink *)mc)->size)) {
  ------------------
  |  Branch (351:11): [True: 0, False: 0]
  |  Branch (351:24): [True: 0, False: 0]
  ------------------
  352|      0|#if LUAJIT_SECURITY_MCODE
  353|      0|	if (LJ_UNLIKELY(mcode_setprot(mc, ((MCLink *)mc)->size, MCPROT_GEN)))
  ------------------
  |  |  146|      0|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  354|      0|	  mcode_protfail(J);
  355|      0|#endif
  356|      0|	return mc;
  357|      0|      }
  358|      0|    }
  359|      0|  }
  360|  20.9k|}
lj_mcode.c:mcode_free:
  121|  3.23k|{
  122|  3.23k|  UNUSED(J);
  ------------------
  |  |   91|  3.23k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  123|  3.23k|  munmap(p, sz);
  124|  3.23k|}
lj_mcode.c:mcode_allocarea:
  270|  3.20k|{
  271|  3.20k|  MCode *oldarea = J->mcarea;
  272|  3.20k|  size_t sz = (size_t)J->param[JIT_P_sizemcode] << 10;
  273|  3.20k|  sz = (sz + LJ_PAGESIZE-1) & ~(size_t)(LJ_PAGESIZE - 1);
  ------------------
  |  |  648|  3.20k|#define LJ_PAGESIZE		4096
  ------------------
                sz = (sz + LJ_PAGESIZE-1) & ~(size_t)(LJ_PAGESIZE - 1);
  ------------------
  |  |  648|  3.20k|#define LJ_PAGESIZE		4096
  ------------------
  274|  3.20k|  J->mcarea = (MCode *)mcode_alloc(J, sz);
  275|  3.20k|  J->szmcarea = sz;
  276|  3.20k|  J->mcprot = MCPROT_GEN;
  ------------------
  |  |  171|  3.20k|#define MCPROT_GEN	MCPROT_RW
  |  |  ------------------
  |  |  |  |  101|  3.20k|#define MCPROT_RW	(PROT_READ|PROT_WRITE)
  |  |  ------------------
  ------------------
  277|  3.20k|  J->mctop = (MCode *)((char *)J->mcarea + J->szmcarea);
  278|  3.20k|  J->mcbot = (MCode *)((char *)J->mcarea + sizeof(MCLink));
  279|  3.20k|  ((MCLink *)J->mcarea)->next = oldarea;
  280|  3.20k|  ((MCLink *)J->mcarea)->size = sz;
  281|  3.20k|  J->szallmcarea += sz;
  282|  3.20k|  J->mcbot = (MCode *)lj_err_register_mcode(J->mcarea, sz, (uint8_t *)J->mcbot);
  283|  3.20k|}
lj_mcode.c:mcode_alloc:
  210|  3.20k|{
  211|       |  /* Target an address in the static assembler code (64K aligned).
  212|       |  ** Try addresses within a distance of target-range/2+1MB..target+range/2-1MB.
  213|       |  ** Use half the jump range so every address in the range can reach any other.
  214|       |  */
  215|       |#if LJ_TARGET_MIPS
  216|       |  /* Use the middle of the 256MB-aligned region. */
  217|       |  uintptr_t target = ((uintptr_t)(void *)lj_vm_exit_handler &
  218|       |		      ~(uintptr_t)0x0fffffffu) + 0x08000000u;
  219|       |#else
  220|  3.20k|  uintptr_t target = (uintptr_t)(void *)lj_vm_exit_handler & ~(uintptr_t)0xffff;
  221|  3.20k|#endif
  222|  3.20k|  const uintptr_t range = (1u << (LJ_TARGET_JUMPRANGE-1)) - (1u << 21);
  ------------------
  |  |  208|  3.20k|#define LJ_TARGET_JUMPRANGE	31	/* +-2^31 = +-2GB */
  ------------------
  223|       |  /* First try a contiguous area below the last one. */
  224|  3.20k|  uintptr_t hint = J->mcarea ? (uintptr_t)J->mcarea - sz : 0;
  ------------------
  |  Branch (224:20): [True: 0, False: 3.20k]
  ------------------
  225|  3.20k|  int i;
  226|       |  /* Limit probing iterations, depending on the available pool size. */
  227|  6.43k|  for (i = 0; i < LJ_TARGET_JUMPRANGE; i++) {
  ------------------
  |  |  208|  6.43k|#define LJ_TARGET_JUMPRANGE	31	/* +-2^31 = +-2GB */
  ------------------
  |  Branch (227:15): [True: 6.43k, False: 0]
  ------------------
  228|  6.43k|    if (mcode_validptr(hint)) {
  ------------------
  |  |  201|  6.43k|#define mcode_validptr(p)	(p)
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 3.23k, False: 3.20k]
  |  |  ------------------
  ------------------
  229|  3.23k|      void *p = mcode_alloc_at(J, hint, sz, MCPROT_GEN);
  ------------------
  |  |  171|  3.23k|#define MCPROT_GEN	MCPROT_RW
  |  |  ------------------
  |  |  |  |  101|  3.23k|#define MCPROT_RW	(PROT_READ|PROT_WRITE)
  |  |  ------------------
  ------------------
  230|       |
  231|  3.23k|      if (mcode_validptr(p) &&
  ------------------
  |  |  201|  6.47k|#define mcode_validptr(p)	(p)
  |  |  ------------------
  |  |  |  Branch (201:27): [True: 3.23k, False: 0]
  |  |  ------------------
  ------------------
  232|  3.23k|	  ((uintptr_t)p + sz - target < range || target - (uintptr_t)p < range))
  ------------------
  |  Branch (232:5): [True: 1.61k, False: 1.62k]
  |  Branch (232:43): [True: 1.59k, False: 35]
  ------------------
  233|  3.20k|	return p;
  234|     35|      if (p) mcode_free(J, p, sz);  /* Free badly placed area. */
  ------------------
  |  Branch (234:11): [True: 35, False: 0]
  ------------------
  235|     35|    }
  236|       |    /* Next try probing 64K-aligned pseudo-random addresses. */
  237|  3.24k|    do {
  238|  3.24k|      hint = lj_prng_u64(&J2G(J)->prng) & ((1u<<LJ_TARGET_JUMPRANGE)-0x10000);
  ------------------
  |  |  115|  3.24k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  3.24k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  3.24k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    hint = lj_prng_u64(&J2G(J)->prng) & ((1u<<LJ_TARGET_JUMPRANGE)-0x10000);
  ------------------
  |  |  208|  3.24k|#define LJ_TARGET_JUMPRANGE	31	/* +-2^31 = +-2GB */
  ------------------
  239|  3.24k|    } while (!(hint + sz < range+range));
  ------------------
  |  Branch (239:14): [True: 8, False: 3.23k]
  ------------------
  240|  3.23k|    hint = target + hint - range;
  241|  3.23k|  }
  242|      0|  lj_trace_err(J, LJ_TRERR_MCODEAL);  /* Give up. OS probably ignores hints? */
  243|      0|  return NULL;
  244|  3.20k|}
lj_mcode.c:mcode_alloc_at:
  111|  3.23k|{
  112|  3.23k|  void *p = mmap((void *)hint, sz, prot|MCPROT_CREATE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);
  ------------------
  |  |  107|  3.23k|#define MCPROT_CREATE	0
  ------------------
  113|  3.23k|  if (p == MAP_FAILED) {
  ------------------
  |  Branch (113:7): [True: 0, False: 3.23k]
  ------------------
  114|      0|    if (!hint) lj_trace_err(J, LJ_TRERR_MCODEAL);
  ------------------
  |  Branch (114:9): [True: 0, False: 0]
  ------------------
  115|      0|    p = NULL;
  116|      0|  }
  117|  3.23k|  return p;
  118|  3.23k|}
lj_mcode.c:mcode_protect:
  188|  67.2k|{
  189|  67.2k|  if (J->mcprot != prot) {
  ------------------
  |  Branch (189:7): [True: 45.2k, False: 22.0k]
  ------------------
  190|  45.2k|    if (LJ_UNLIKELY(mcode_setprot(J->mcarea, J->szmcarea, prot)))
  ------------------
  |  |  146|  45.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 45.2k]
  |  |  ------------------
  ------------------
  191|      0|      mcode_protfail(J);
  192|  45.2k|    J->mcprot = prot;
  193|  45.2k|  }
  194|  67.2k|}
lj_mcode.c:mcode_setprot:
  127|  45.2k|{
  128|  45.2k|  return mprotect(p, sz, prot);
  129|  45.2k|}

lj_meta_init:
   30|  13.6k|{
   31|  13.6k|#define MMNAME(name)	"__" #name
   32|  13.6k|  const char *metanames = MMDEF(MMNAME);
  ------------------
  |  |  557|  13.6k|  _(index) _(newindex) _(gc) _(mode) _(eq) _(len) \
  |  |  ------------------
  |  |  |  |   32|  13.6k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  ------------------
  |  |  |  |  |  |   31|  13.6k|#define MMNAME(name)	"__" #name
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  558|  13.6k|  /* Only the above (fast) metamethods are negative cached (max. 8). */ \
  |  |  559|  13.6k|  _(lt) _(le) _(concat) _(call) \
  |  |  560|  13.6k|  /* The following must be in ORDER ARITH. */ \
  |  |  561|  13.6k|  _(add) _(sub) _(mul) _(div) _(mod) _(pow) _(unm) \
  |  |  562|  13.6k|  /* The following are used in the standard libraries. */ \
  |  |  563|  13.6k|  _(metatable) _(tostring) MMDEF_FFI(_) MMDEF_PAIRS(_)
  |  |  ------------------
  |  |  |  |  549|  13.6k|#define MMDEF_PAIRS(_) _(pairs) _(ipairs)
  |  |  |  |  ------------------
  |  |  |  |  |  |   32|  13.6k|  const char *metanames = MMDEF(MMNAME);
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   31|  13.6k|#define MMNAME(name)	"__" #name
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   33|  13.6k|#undef MMNAME
   34|  13.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   35|  13.6k|  const char *p, *q;
   36|  13.6k|  uint32_t mm;
   37|   314k|  for (mm = 0, p = metanames; *p; mm++, p = q) {
  ------------------
  |  Branch (37:31): [True: 301k, False: 13.6k]
  ------------------
   38|   301k|    GCstr *s;
   39|  1.53M|    for (q = p+2; *q && *q != '_'; q++) ;
  ------------------
  |  Branch (39:19): [True: 1.52M, False: 13.6k]
  |  Branch (39:25): [True: 1.23M, False: 287k]
  ------------------
   40|   301k|    s = lj_str_new(L, p, (size_t)(q-p));
   41|       |    /* NOBARRIER: g->gcroot[] is a GC root. */
   42|   301k|    setgcref(g->gcroot[GCROOT_MMNAME+mm], obj2gco(s));
  ------------------
  |  |   72|   301k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   43|   301k|  }
   44|  13.6k|}
lj_meta_cache:
   48|  1.49M|{
   49|  1.49M|  cTValue *mo = lj_tab_getstr(mt, name);
   50|  1.49M|  lj_assertX(mm <= MM_FAST, "bad metamethod %d", mm);
  ------------------
  |  |  366|  1.49M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.49M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.49M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.49M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   51|  1.49M|  if (!mo || tvisnil(mo)) {  /* No metamethod? */
  ------------------
  |  |  782|  1.48M|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 1, False: 1.48M]
  |  |  ------------------
  ------------------
  |  Branch (51:7): [True: 3.02k, False: 1.48M]
  ------------------
   52|  3.02k|    mt->nomm |= (uint8_t)(1u<<mm);  /* Set negative cache flag. */
   53|  3.02k|    return NULL;
   54|  3.02k|  }
   55|  1.48M|  return mo;
   56|  1.49M|}
lj_meta_lookup:
   60|  2.18M|{
   61|  2.18M|  GCtab *mt;
   62|  2.18M|  if (tvistab(o))
  ------------------
  |  |  800|  2.18M|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  2.18M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  2.18M|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 40.5k, False: 2.14M]
  |  |  ------------------
  ------------------
   63|  40.5k|    mt = tabref(tabV(o)->metatable);
  ------------------
  |  |  514|  40.5k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  81.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 40.5k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   64|  2.14M|  else if (tvisudata(o))
  ------------------
  |  |  801|  2.14M|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  2.14M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  2.14M|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 1.40k, False: 2.14M]
  |  |  ------------------
  ------------------
   65|  1.40k|    mt = tabref(udataV(o)->metatable);
  ------------------
  |  |  514|  1.40k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  2.81k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1.40k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   66|  2.14M|  else
   67|  2.14M|    mt = tabref(basemt_obj(G(L), o));
  ------------------
  |  |  514|  2.14M|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  4.29M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 30.9k, False: 2.11M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   68|  2.18M|  if (mt) {
  ------------------
  |  Branch (68:7): [True: 105k, False: 2.08M]
  ------------------
   69|   105k|    cTValue *mo = lj_tab_getstr(mt, mmname_str(G(L), mm));
  ------------------
  |  |  590|   105k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|   105k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|   105k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   70|   105k|    if (mo)
  ------------------
  |  Branch (70:9): [True: 99.9k, False: 5.64k]
  ------------------
   71|  99.9k|      return mo;
   72|   105k|  }
   73|  2.08M|  return niltv(L);
  ------------------
  |  |  667|  2.08M|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  2.08M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.08M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.08M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.08M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.08M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   74|  2.08M|}
lj_meta_tget:
  136|   460k|{
  137|   460k|  int loop;
  138|   906k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|   906k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (138:18): [True: 906k, False: 2]
  ------------------
  139|   906k|    cTValue *mo;
  140|   906k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|   906k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 889k, False: 17.3k]
  |  |  ------------------
  ------------------
  141|   889k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|   889k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   889k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   889k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   889k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 889k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   889k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|      0|      cTValue *tv = lj_tab_get(L, t, k);
  143|   889k|      if (!tvisnil(tv) ||
  ------------------
  |  |  782|  1.77M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (143:11): [True: 96.8k, False: 792k]
  ------------------
  144|   889k|	  !(mo = lj_meta_fast(L, tabref(t->metatable), MM_index)))
  ------------------
  |  |   22|   792k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|   792k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 180k, False: 611k]
  |  |  |  |  |  Branch (20:26): [True: 251, False: 610k]
  |  |  |  |  ------------------
  |  |  |  |   21|   611k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|   610k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|   610k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|   610k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (144:4): [True: 181k, False: 610k]
  ------------------
  145|   278k|	return tv;
  146|   889k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_index))) {
  ------------------
  |  |  782|  17.3k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 1.46k, False: 15.8k]
  |  |  ------------------
  ------------------
  147|  1.46k|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  148|      0|      return NULL;  /* unreachable */
  149|  1.46k|    }
  150|   626k|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|   626k|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|   626k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|   626k|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 180k, False: 445k]
  |  |  ------------------
  ------------------
  151|   180k|      L->top = mmcall(L, lj_cont_ra, mo, o, k);
  152|   180k|      return NULL;  /* Trigger metamethod call. */
  153|   180k|    }
  154|   445k|    o = mo;
  155|   445k|  }
  156|      2|  lj_err_msg(L, LJ_ERR_GETLOOP);
  157|      0|  return NULL;  /* unreachable */
  158|   460k|}
lj_meta_tset:
  162|   669k|{
  163|   669k|  TValue tmp;
  164|   669k|  int loop;
  165|   670k|  for (loop = 0; loop < LJ_MAX_IDXCHAIN; loop++) {
  ------------------
  |  |   71|   670k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
  |  Branch (165:18): [True: 670k, False: 0]
  ------------------
  166|   670k|    cTValue *mo;
  167|   670k|    if (LJ_LIKELY(tvistab(o))) {
  ------------------
  |  |  145|   670k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 669k, False: 748]
  |  |  ------------------
  ------------------
  168|   669k|      GCtab *t = tabV(o);
  ------------------
  |  |  864|   669k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|   669k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   669k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   669k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 669k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   669k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  169|      0|      cTValue *tv = lj_tab_get(L, t, k);
  170|   669k|      if (LJ_LIKELY(!tvisnil(tv))) {
  ------------------
  |  |  145|   669k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 55, False: 669k]
  |  |  ------------------
  ------------------
  171|     55|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  172|     55|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|     55|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|     55|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 0, False: 55]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|     55|	return (TValue *)tv;
  174|   669k|      } else if (!(mo = lj_meta_fast(L, tabref(t->metatable), MM_newindex))) {
  ------------------
  |  |   22|   669k|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|   669k|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 666k, False: 3.03k]
  |  |  |  |  |  Branch (20:26): [True: 50, False: 2.98k]
  |  |  |  |  ------------------
  |  |  |  |   21|  3.03k|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|  2.98k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|  2.98k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|  2.98k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (174:18): [True: 667k, False: 1.95k]
  ------------------
  175|   667k|	t->nomm = 0;  /* Invalidate negative metamethod cache. */
  176|   667k|	lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   667k|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   667k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 9, False: 667k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|      9|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      9|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|   667k|	if (tv != niltv(L))
  ------------------
  |  |  667|   667k|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|   667k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   667k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   667k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 667k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   667k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (177:6): [True: 225, False: 667k]
  ------------------
  178|    225|	  return (TValue *)tv;
  179|   667k|	if (tvisnil(k)) lj_err_msg(L, LJ_ERR_NILIDX);
  ------------------
  |  |  782|   667k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 5, False: 667k]
  |  |  ------------------
  ------------------
  180|   667k|	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  803|   667k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.33M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	else if (tvisint(k)) { setnumV(&tmp, (lua_Number)intV(k)); k = &tmp; }
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  181|   667k|	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  804|  1.33M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   667k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   667k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   667k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 8.74k, False: 658k]
  |  |  ------------------
  ------------------
              	else if (tvisnum(k) && tvisnan(k)) lj_err_msg(L, LJ_ERR_NANIDX);
  ------------------
  |  |  812|  8.74k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 1, False: 8.74k]
  |  |  ------------------
  ------------------
  182|   667k|	return lj_tab_newkey(L, t, k);
  183|   667k|      }
  184|   669k|    } else if (tvisnil(mo = lj_meta_lookup(L, o, MM_newindex))) {
  ------------------
  |  |  782|    748|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 44, False: 704]
  |  |  ------------------
  ------------------
  185|     44|      lj_err_optype(L, o, LJ_ERR_OPINDEX);
  186|      0|      return NULL;  /* unreachable */
  187|     44|    }
  188|  2.66k|    if (tvisfunc(mo)) {
  ------------------
  |  |  796|  2.66k|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|  2.66k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|  2.66k|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 1.97k, False: 685]
  |  |  ------------------
  ------------------
  189|  1.97k|      L->top = mmcall(L, lj_cont_nop, mo, o, k);
  190|       |      /* L->top+2 = v filled in by caller. */
  191|  1.97k|      return NULL;  /* Trigger metamethod call. */
  192|  1.97k|    }
  193|    685|    copyTV(L, &tmp, mo);
  194|    685|    o = &tmp;
  195|    685|  }
  196|      0|  lj_err_msg(L, LJ_ERR_SETLOOP);
  197|      0|  return NULL;  /* unreachable */
  198|   669k|}
lj_meta_arith:
  215|  82.4k|{
  216|  82.4k|  MMS mm = bcmode_mm(op);
  ------------------
  |  |  251|  82.4k|#define bcmode_mm(op)	((MMS)(lj_bc_mode[op]>>11))
  ------------------
  217|  82.4k|  TValue tempb, tempc;
  218|  82.4k|  cTValue *b, *c;
  219|  82.4k|  if ((b = str2num(rb, &tempb)) != NULL &&
  ------------------
  |  Branch (219:7): [True: 10.4k, False: 72.0k]
  ------------------
  220|  82.4k|      (c = str2num(rc, &tempc)) != NULL) {  /* Try coercion first. */
  ------------------
  |  Branch (220:7): [True: 863, False: 9.60k]
  ------------------
  221|    863|    setnumV(ra, lj_vm_foldarith(numV(b), numV(c), (int)mm-MM_add));
  ------------------
  |  |  945|  3.45k|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [True: 863, False: 0]
  |  |  |  Branch (945:35): [True: 863, False: 0]
  |  |  ------------------
  ------------------
  222|      0|    return NULL;
  223|  81.6k|  } else {
  224|  81.6k|    cTValue *mo = lj_meta_lookup(L, rb, mm);
  225|  81.6k|    if (tvisnil(mo)) {
  ------------------
  |  |  782|  81.6k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 44.3k, False: 37.3k]
  |  |  ------------------
  ------------------
  226|  44.3k|      mo = lj_meta_lookup(L, rc, mm);
  227|  44.3k|      if (tvisnil(mo)) {
  ------------------
  |  |  782|  44.3k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 22.4k, False: 21.8k]
  |  |  ------------------
  ------------------
  228|  22.4k|	if (str2num(rb, &tempb) == NULL) rc = rb;
  ------------------
  |  Branch (228:6): [True: 22.3k, False: 86]
  ------------------
  229|  22.4k|	lj_err_optype(L, rc, LJ_ERR_OPARITH);
  230|      0|	return NULL;  /* unreachable */
  231|  22.4k|      }
  232|  44.3k|    }
  233|  59.1k|    return mmcall(L, lj_cont_ra, mo, rb, rc);
  234|  81.6k|  }
  235|  82.4k|}
lj_meta_cat:
  239|   263k|{
  240|   263k|  int fromc = 0;
  241|   263k|  if (left < 0) { left = -left; fromc = 1; }
  ------------------
  |  Branch (241:7): [True: 475, False: 263k]
  ------------------
  242|   264k|  do {
  243|   264k|    if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  795|   528k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   264k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   264k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 258k, False: 5.62k]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |  802|   269k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  5.62k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  5.62k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  5.62k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 4.79k, False: 833]
  |  |  ------------------
  ------------------
                  if (!(tvisstr(top) || tvisnumber(top) || tvisbuf(top)) ||
  ------------------
  |  |   65|    833|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  1.66k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  1.66k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    833|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|    833|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 833]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  244|   264k|	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  795|   526k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   263k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   263k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 249k, False: 14.1k]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |  802|   277k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  14.1k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  14.1k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  14.1k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 13.3k, False: 846]
  |  |  ------------------
  ------------------
              	!(tvisstr(top-1) || tvisnumber(top-1) || tvisbuf(top-1))) {
  ------------------
  |  |   65|    846|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  1.69k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  1.69k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    846|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|    846|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 846]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  245|  1.67k|      cTValue *mo = lj_meta_lookup(L, top-1, MM_concat);
  246|  1.67k|      if (tvisnil(mo)) {
  ------------------
  |  |  782|  1.67k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 784, False: 895]
  |  |  ------------------
  ------------------
  247|    784|	mo = lj_meta_lookup(L, top, MM_concat);
  248|    784|	if (tvisnil(mo)) {
  ------------------
  |  |  782|    784|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 332, False: 452]
  |  |  ------------------
  ------------------
  249|    332|	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  795|    664|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|    332|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|    332|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 9, False: 323]
  |  |  ------------------
  ------------------
              	  if (tvisstr(top-1) || tvisnumber(top-1)) top++;
  ------------------
  |  |  802|    323|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    323|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    323|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    323|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 30, False: 293]
  |  |  ------------------
  ------------------
  250|    332|	  lj_err_optype(L, top-1, LJ_ERR_OPCAT);
  251|      0|	  return NULL;  /* unreachable */
  252|    332|	}
  253|    784|      }
  254|       |      /* One of the top two elements is not a string, call __cat metamethod:
  255|       |      **
  256|       |      ** before:    [...][CAT stack .........................]
  257|       |      **                                 top-1     top         top+1 top+2
  258|       |      ** pick two:  [...][CAT stack ...] [o1]      [o2]
  259|       |      ** setup mm:  [...][CAT stack ...] [cont|?]  [mo|tmtype] [o1]  [o2]
  260|       |      ** in asm:    [...][CAT stack ...] [cont|PC] [mo|delta]  [o1]  [o2]
  261|       |      **            ^-- func base                              ^-- mm base
  262|       |      ** after mm:  [...][CAT stack ...] <--push-- [result]
  263|       |      ** next step: [...][CAT stack .............]
  264|       |      */
  265|  1.34k|      copyTV(L, top+2*LJ_FR2+2, top);  /* Carefully ordered stack copies! */
  ------------------
  |  |  569|  1.34k|#define LJ_FR2			1
  ------------------
  266|  1.34k|      copyTV(L, top+2*LJ_FR2+1, top-1);
  ------------------
  |  |  569|  1.34k|#define LJ_FR2			1
  ------------------
  267|  1.34k|      copyTV(L, top+LJ_FR2, mo);
  ------------------
  |  |  569|  1.34k|#define LJ_FR2			1
  ------------------
  268|  1.34k|      setcont(top-1, lj_cont_cat);
  ------------------
  |  |  895|  1.34k|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|  1.34k|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  269|  1.34k|      if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  569|  1.34k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|  1.34k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
                    if (LJ_FR2) { setnilV(top); setnilV(top+2); top += 2; }
  ------------------
  |  |  872|  1.34k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  270|  1.34k|      return top+1;  /* Trigger metamethod call. */
  271|   262k|    } else {
  272|       |      /* Pick as many strings as possible from the top and concatenate them:
  273|       |      **
  274|       |      ** before:    [...][CAT stack ...........................]
  275|       |      ** pick str:  [...][CAT stack ...] [...... strings ......]
  276|       |      ** concat:    [...][CAT stack ...] [result]
  277|       |      ** next step: [...][CAT stack ............]
  278|       |      */
  279|   262k|      TValue *e, *o = top;
  280|   515k|      uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|   262k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   262k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   262k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 257k, False: 4.71k]
  |  |  ------------------
  ------------------
                    uint64_t tlen = tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|   257k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   257k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   257k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   257k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 257k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   257k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  281|   262k|		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|  4.71k|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  9.43k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  9.43k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  4.71k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|  4.71k|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 4.71k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		      tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|   267k|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  282|   262k|      SBuf *sb;
  283|   392k|      do {
  284|   752k|	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  795|   392k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   392k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   392k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 376k, False: 15.9k]
  |  |  ------------------
  ------------------
              	o--; tlen += tvisstr(o) ? strV(o)->len :
  ------------------
  |  |  859|   376k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   376k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   376k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   376k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 376k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   376k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  285|   392k|		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   65|  15.9k|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  31.9k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  31.9k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  15.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|  15.9k|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 15.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  |  |  ------------------
  |  |  |  Branch (38:34): [Folded - Ignored]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:34): [True: 0, False: 0]
  |  |  |  Branch (38:45): [Folded - Ignored]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  |  Branch (38:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		     tvisbuf(o) ? sbufxlen(bufV(o)) : STRFMT_MAXBUF_NUM;
  ------------------
  |  |   72|   408k|#define STRFMT_MAXBUF_NUM	32  /* Must correspond with STRFMT_G14. */
  ------------------
  286|   392k|      } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  795|   260k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   130k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   130k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 127k, False: 3.09k]
  |  |  ------------------
  ------------------
                    } while (--left > 0 && (tvisstr(o-1) || tvisnumber(o-1)));
  ------------------
  |  |  802|  3.09k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  3.09k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  3.09k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  3.09k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 2.64k, False: 448]
  |  |  ------------------
  ------------------
  |  Branch (286:16): [True: 130k, False: 262k]
  ------------------
  287|   262k|      if (tlen >= LJ_MAX_STR) lj_err_msg(L, LJ_ERR_STROV);
  ------------------
  |  |   54|   262k|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|   262k|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 0, False: 262k]
  ------------------
  288|   262k|      sb = lj_buf_tmp_(L);
  289|   262k|      lj_buf_more(sb, (MSize)tlen);
  290|   917k|      for (e = top, top = o; o <= e; o++) {
  ------------------
  |  Branch (290:30): [True: 654k, False: 262k]
  ------------------
  291|   654k|	if (tvisstr(o)) {
  ------------------
  |  |  795|   654k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   654k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   654k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 634k, False: 20.6k]
  |  |  ------------------
  ------------------
  292|   634k|	  GCstr *s = strV(o);
  ------------------
  |  |  859|   634k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   634k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   634k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   634k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 634k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   634k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  293|      0|	  MSize len = s->len;
  294|   634k|	  lj_buf_putmem(sb, strdata(s), len);
  ------------------
  |  |  316|   634k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  295|   634k|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|  20.6k|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  41.3k|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  41.3k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  20.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|  20.6k|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 20.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  296|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  297|      0|	  lj_buf_putmem(sb, sbx->r, sbufxlen(sbx));
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  298|  20.6k|	} else if (tvisint(o)) {
  ------------------
  |  |  803|  20.6k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  41.3k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  299|      0|	  lj_strfmt_putint(sb, intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  300|  20.6k|	} else {
  301|  20.6k|	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |   67|  20.6k|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|  20.6k|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|  20.6k|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|  20.6k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
              	  lj_strfmt_putfnum(sb, STRFMT_G14, numV(o));
  ------------------
  |  |  866|  20.6k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  20.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  20.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  20.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|  20.6k|	}
  303|   654k|      }
  304|   262k|      setstrV(L, top, lj_buf_str(L, sb));
  305|   262k|    }
  306|   264k|  } while (left >= 1);
  ------------------
  |  Branch (306:12): [True: 448, False: 262k]
  ------------------
  307|   262k|  if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) {
  ------------------
  |  |  146|   262k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.56k, False: 260k]
  |  |  ------------------
  ------------------
  308|  1.56k|    if (!fromc) L->top = curr_topL(L);
  ------------------
  |  |  718|  1.54k|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|  1.54k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|  1.54k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|  1.54k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|  1.54k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|  1.54k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.54k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|  1.54k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (308:9): [True: 1.54k, False: 21]
  ------------------
  309|  1.56k|    lj_gc_step(L);
  310|  1.56k|  }
  311|   262k|  return NULL;
  312|   262k|}
lj_meta_len:
  316|     74|{
  317|     74|  cTValue *mo = lj_meta_lookup(L, o, MM_len);
  318|     74|  if (tvisnil(mo)) {
  ------------------
  |  |  782|     74|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 46, False: 28]
  |  |  ------------------
  ------------------
  319|     46|    if (LJ_52 && tvistab(o))
  ------------------
  |  |  697|     92|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_52 && tvistab(o))
  ------------------
  |  |  800|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  320|      0|      tabref(tabV(o)->metatable)->nomm |= (uint8_t)(1u<<MM_len);
  ------------------
  |  |  514|      0|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  321|     46|    else
  322|     46|      lj_err_optype(L, o, LJ_ERR_OPLEN);
  323|      0|    return NULL;
  324|     46|  }
  325|     28|  return mmcall(L, lj_cont_ra, mo, o, LJ_52 ? o : niltv(L));
  ------------------
  |  |  697|     28|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                return mmcall(L, lj_cont_ra, mo, o, LJ_52 ? o : niltv(L));
  ------------------
  |  |  667|     28|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|     28|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     28|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     28|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 28, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     28|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  326|     28|}
lj_meta_equal:
  330|    627|{
  331|       |  /* Field metatable must be at same offset for GCtab and GCudata! */
  332|    627|  cTValue *mo = lj_meta_fast(L, tabref(o1->gch.metatable), MM_eq);
  ------------------
  |  |   22|    627|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|    627|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 0, False: 627]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 627]
  |  |  |  |  ------------------
  |  |  |  |   21|    627|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|    627|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|    627|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|    627|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  333|    627|  if (mo) {
  ------------------
  |  Branch (333:7): [True: 626, False: 1]
  ------------------
  334|    626|    TValue *top;
  335|    626|    uint32_t it;
  336|    626|    if (tabref(o1->gch.metatable) != tabref(o2->gch.metatable)) {
  ------------------
  |  |  514|    626|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    626|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                  if (tabref(o1->gch.metatable) != tabref(o2->gch.metatable)) {
  ------------------
  |  |  514|    626|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    626|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (336:9): [True: 183, False: 443]
  ------------------
  337|    183|      cTValue *mo2 = lj_meta_fast(L, tabref(o2->gch.metatable), MM_eq);
  ------------------
  |  |   22|    183|#define lj_meta_fast(L, mt, mm)	lj_meta_fastg(G(L), mt, mm)
  |  |  ------------------
  |  |  |  |   20|    183|  ((mt) == NULL ? NULL : ((mt)->nomm & (1u<<(mm))) ? NULL : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (20:4): [True: 96, False: 87]
  |  |  |  |  |  Branch (20:26): [True: 0, False: 87]
  |  |  |  |  ------------------
  |  |  |  |   21|     87|   lj_meta_cache(mt, mm, mmname_str(g, mm)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  590|     87|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  315|     87|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   67|     87|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  338|    183|      if (mo2 == NULL || !lj_obj_equal(mo, mo2))
  ------------------
  |  Branch (338:11): [True: 96, False: 87]
  |  Branch (338:26): [True: 0, False: 87]
  ------------------
  339|     96|	return (TValue *)(intptr_t)ne;
  340|    183|    }
  341|    530|    top = curr_top(L);
  ------------------
  |  |  719|    530|#define curr_top(L)		(curr_funcisL(L) ? curr_topL(L) : L->top)
  |  |  ------------------
  |  |  |  |  716|    530|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  476|    530|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  474|    530|#define FF_LUA		0
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (716:26): [True: 530, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define curr_top(L)		(curr_funcisL(L) ? curr_topL(L) : L->top)
  |  |  ------------------
  |  |  |  |  718|    530|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  |  |  ------------------
  |  |  |  |  |  |  717|    530|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  480|    530|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  367|    530|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  366|    530|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  355|    530|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 530, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  |  356|    530|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|    530|    setcont(top++, ne ? lj_cont_condf : lj_cont_condt);
  ------------------
  |  |  895|    530|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|  1.06k|#define contptr(f)		((void *)(f))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (894:31): [True: 292, False: 238]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  343|    530|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|    530|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|    530|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  344|    530|    copyTV(L, top++, mo);
  345|    530|    if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|    530|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|    530|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  346|    530|    it = ~(uint32_t)o1->gch.gct;
  347|    530|    setgcV(L, top, o1, it);
  348|    530|    setgcV(L, top+1, o2, it);
  349|    530|    return top;  /* Trigger metamethod call. */
  350|    530|  }
  351|      1|  return (TValue *)(intptr_t)ne;
  352|    627|}
lj_meta_equal_cd:
  356|  1.69k|{
  357|  1.69k|  ASMFunction cont = (bc_op(ins) & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  |   34|  1.69k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (357:22): [True: 1.13k, False: 565]
  ------------------
  358|  1.69k|  int op = (int)bc_op(ins) & ~1;
  ------------------
  |  |   34|  1.69k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  359|  1.69k|  TValue tv;
  360|  1.69k|  cTValue *mo, *o2, *o1 = &L->base[bc_a(ins)];
  ------------------
  |  |   35|  1.69k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  361|  1.69k|  cTValue *o1mm = o1;
  362|  1.69k|  if (op == BC_ISEQV) {
  ------------------
  |  Branch (362:7): [True: 1.14k, False: 555]
  ------------------
  363|  1.14k|    o2 = &L->base[bc_d(ins)];
  ------------------
  |  |   38|  1.14k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  364|  1.14k|    if (!tviscdata(o1mm)) o1mm = o2;
  ------------------
  |  |  799|  1.14k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  1.14k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  1.14k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  ------------------
  |  Branch (364:9): [True: 1.05k, False: 82]
  ------------------
  365|  1.14k|  } else if (op == BC_ISEQS) {
  ------------------
  |  Branch (365:14): [True: 71, False: 484]
  ------------------
  366|    213|    setstrV(L, &tv, gco2str(proto_kgc(curr_proto(L), ~(ptrdiff_t)bc_d(ins))));
  ------------------
  |  |  765|     71|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|    497|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     71|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    497|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 71, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 71, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 71, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 71, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     71|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 71, False: 0]
  |  |  |  |  |  Branch (367:49): [True: 71, False: 0]
  |  |  |  |  |  Branch (367:49): [True: 71, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  367|      0|    o2 = &tv;
  368|    484|  } else if (op == BC_ISEQN) {
  ------------------
  |  Branch (368:14): [True: 483, False: 1]
  ------------------
  369|    483|    o2 = &mref(curr_proto(L)->k, cTValue)[bc_d(ins)];
  ------------------
  |  |   36|    966|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:35): [True: 483, False: 0]
  |  |  ------------------
  ------------------
                  o2 = &mref(curr_proto(L)->k, cTValue)[bc_d(ins)];
  ------------------
  |  |   38|    483|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  370|    483|  } else {
  371|      1|    lj_assertL(op == BC_ISEQP, "bad bytecode op %d", op);
  ------------------
  |  |  365|      1|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      1|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      1|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  372|      1|    setpriV(&tv, ~bc_d(ins));
  ------------------
  |  |  873|      1|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
  373|      1|    o2 = &tv;
  374|      1|  }
  375|  1.69k|  mo = lj_meta_lookup(L, o1mm, MM_eq);
  376|  1.69k|  if (LJ_LIKELY(!tvisnil(mo)))
  ------------------
  |  |  145|  1.69k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.69k, False: 0]
  |  |  ------------------
  ------------------
  377|  1.69k|    return mmcall(L, cont, mo, o1, o2);
  378|      0|  else
  379|      0|    return (TValue *)(intptr_t)(bc_op(ins) & 1);
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  380|  1.69k|}
lj_meta_comp:
  385|  15.5k|{
  386|  15.5k|  if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  585|  31.1k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  799|  31.1k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  15.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  15.5k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 667, False: 14.9k]
  |  |  ------------------
  ------------------
                if (LJ_HASFFI && (tviscdata(o1) || tviscdata(o2))) {
  ------------------
  |  |  799|  14.9k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  14.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  14.9k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 1.82k, False: 13.0k]
  |  |  ------------------
  ------------------
  387|  2.48k|    ASMFunction cont = (op & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  Branch (387:24): [True: 0, False: 2.48k]
  ------------------
  388|  2.48k|    MMS mm = (op & 2) ? MM_le : MM_lt;
  ------------------
  |  Branch (388:14): [True: 642, False: 1.84k]
  ------------------
  389|  2.48k|    cTValue *mo = lj_meta_lookup(L, tviscdata(o1) ? o1 : o2, mm);
  ------------------
  |  |  799|  2.48k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  2.48k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  2.48k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 667, False: 1.82k]
  |  |  ------------------
  ------------------
  390|  2.48k|    if (LJ_UNLIKELY(tvisnil(mo))) goto err;
  ------------------
  |  |  146|  2.48k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 2.48k]
  |  |  ------------------
  ------------------
  391|  2.48k|    return mmcall(L, cont, mo, o1, o2);
  392|  13.0k|  } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  697|  26.1k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  13.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                } else if (LJ_52 || itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  13.0k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (392:23): [True: 12.6k, False: 481]
  ------------------
  393|       |    /* Never called with two numbers. */
  394|  12.6k|    if (tvisstr(o1) && tvisstr(o2)) {
  ------------------
  |  |  795|  25.2k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  12.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  12.6k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4.36k, False: 8.25k]
  |  |  ------------------
  ------------------
                  if (tvisstr(o1) && tvisstr(o2)) {
  ------------------
  |  |  795|  4.36k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  4.36k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  4.36k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4.36k, False: 0]
  |  |  ------------------
  ------------------
  395|  4.36k|      int32_t res = lj_str_cmp(strV(o1), strV(o2));
  ------------------
  |  |  859|  4.36k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  4.36k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.36k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.36k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.36k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.36k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    int32_t res = lj_str_cmp(strV(o1), strV(o2));
  ------------------
  |  |  859|  4.36k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  4.36k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.36k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.36k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.36k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.36k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  396|  4.36k|      return (TValue *)(intptr_t)(((op&2) ? res <= 0 : res < 0) ^ (op&1));
  ------------------
  |  Branch (396:36): [True: 787, False: 3.57k]
  ------------------
  397|  8.25k|    } else {
  398|  8.25k|    trymt:
  399|  10.6k|      while (1) {
  ------------------
  |  Branch (399:14): [Folded - Ignored]
  ------------------
  400|  10.6k|	ASMFunction cont = (op & 1) ? lj_cont_condf : lj_cont_condt;
  ------------------
  |  Branch (400:21): [True: 5.24k, False: 5.36k]
  ------------------
  401|  10.6k|	MMS mm = (op & 2) ? MM_le : MM_lt;
  ------------------
  |  Branch (401:11): [True: 4.28k, False: 6.31k]
  ------------------
  402|  10.6k|	cTValue *mo = lj_meta_lookup(L, o1, mm);
  403|       |#if LJ_52
  404|       |	if (tvisnil(mo) && tvisnil((mo = lj_meta_lookup(L, o2, mm))))
  405|       |#else
  406|  10.6k|	cTValue *mo2 = lj_meta_lookup(L, o2, mm);
  407|  10.6k|	if (tvisnil(mo) || !lj_obj_equal(mo, mo2))
  ------------------
  |  |  782|  21.2k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 2.36k, False: 8.24k]
  |  |  ------------------
  ------------------
  |  Branch (407:21): [True: 95, False: 8.14k]
  ------------------
  408|  2.45k|#endif
  409|  2.45k|	{
  410|  2.45k|	  if (op & 2) {  /* MM_le not found: retry with MM_lt. */
  ------------------
  |  Branch (410:8): [True: 2.35k, False: 106]
  ------------------
  411|  2.35k|	    cTValue *ot = o1; o1 = o2; o2 = ot;  /* Swap operands. */
  412|  2.35k|	    op ^= 3;  /* Use LT and flip condition. */
  413|  2.35k|	    continue;
  414|  2.35k|	  }
  415|    106|	  goto err;
  416|  2.45k|	}
  417|  8.14k|	return mmcall(L, cont, mo, o1, o2);
  418|  10.6k|      }
  419|  8.25k|    }
  420|  12.6k|  } else if (tvisbool(o1) && tvisbool(o2)) {
  ------------------
  |  |  789|    962|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|    962|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    481|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|    481|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 70, False: 411]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|    411|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    411|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|    411|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 54, False: 357]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (tvisbool(o1) && tvisbool(o2)) {
  ------------------
  |  |  789|    124|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|    248|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    124|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|    124|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 124]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|    124|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|    124|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|    124|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 124]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  421|      0|    goto trymt;
  422|    481|  } else {
  423|    587|  err:
  424|    587|    lj_err_comp(L, o1, o2);
  425|      0|    return NULL;
  426|    481|  }
  427|  15.5k|}
lj_meta_istype:
  431|     25|{
  432|     25|  L->top = curr_topL(L);
  ------------------
  |  |  718|     25|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|     25|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|     25|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|     25|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|     25|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|     25|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 25, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|     25|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  433|      0|  ra++; tp--;
  434|     25|  lj_assertL(LJ_DUALNUM || tp != ~LJ_TNUMX, "bad type for ISTYPE");
  ------------------
  |  |  365|     25|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     50|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 25, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     25|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  435|     25|  if (LJ_DUALNUM && tp == ~LJ_TNUMX) lj_lib_checkint(L, ra);
  ------------------
  |  |  549|     50|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM && tp == ~LJ_TNUMX) lj_lib_checkint(L, ra);
  ------------------
  |  |  274|      0|#define LJ_TNUMX		(~13u)
  ------------------
  |  Branch (435:21): [True: 0, False: 0]
  ------------------
  436|     25|  else if (tp == ~LJ_TNUMX+1) lj_lib_checknum(L, ra);
  ------------------
  |  |  274|     25|#define LJ_TNUMX		(~13u)
  ------------------
  |  Branch (436:12): [True: 0, False: 25]
  ------------------
  437|     25|  else if (tp == ~LJ_TSTR) lj_lib_checkstr(L, ra);
  ------------------
  |  |  264|     25|#define LJ_TSTR			(~4u)
  ------------------
  |  Branch (437:12): [True: 25, False: 0]
  ------------------
  438|      0|  else lj_err_argtype(L, ra, lj_obj_itypename[tp]);
  439|     25|}
lj_meta_call:
  443|  2.00M|{
  444|  2.00M|  cTValue *mo = lj_meta_lookup(L, func, MM_call);
  445|  2.00M|  TValue *p;
  446|  2.00M|  if (!tvisfunc(mo))
  ------------------
  |  |  796|  2.00M|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|  2.00M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|  2.00M|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  ------------------
  |  Branch (446:7): [True: 2.00M, False: 693]
  ------------------
  447|  2.00M|    lj_err_optype_call(L, func);
  448|  1.94k|  for (p = top; p > func+2*LJ_FR2; p--) copyTV(L, p, p-1);
  ------------------
  |  |  569|  1.94k|#define LJ_FR2			1
  ------------------
  |  Branch (448:17): [True: 1.25k, False: 693]
  ------------------
  449|    693|  if (LJ_FR2) copyTV(L, func+2, func);
  ------------------
  |  |  569|    693|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  450|    693|  copyTV(L, func, mo);
  451|    693|}
lj_meta_for:
  455|    914|{
  456|    914|  if (!lj_strscan_numberobj(o)) lj_err_msg(L, LJ_ERR_FORINIT);
  ------------------
  |  Branch (456:7): [True: 2, False: 912]
  ------------------
  457|    912|  if (!lj_strscan_numberobj(o+1)) lj_err_msg(L, LJ_ERR_FORLIM);
  ------------------
  |  Branch (457:7): [True: 4, False: 908]
  ------------------
  458|    908|  if (!lj_strscan_numberobj(o+2)) lj_err_msg(L, LJ_ERR_FORSTEP);
  ------------------
  |  Branch (458:7): [True: 4, False: 904]
  ------------------
  459|    904|  if (LJ_DUALNUM) {
  ------------------
  |  |  549|    904|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  460|       |    /* Ensure all slots are integers or all slots are numbers. */
  461|      0|    int32_t k[3];
  462|      0|    int nint = 0;
  463|      0|    ptrdiff_t i;
  464|      0|    for (i = 0; i <= 2; i++) {
  ------------------
  |  Branch (464:17): [True: 0, False: 0]
  ------------------
  465|      0|      if (tvisint(o+i)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  466|      0|	k[i] = intV(o+i); nint++;
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  467|      0|      } else {
  468|      0|	k[i] = lj_num2int(numV(o+i)); nint += ((lua_Number)k[i] == numV(o+i));
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	k[i] = lj_num2int(numV(o+i)); nint += ((lua_Number)k[i] == numV(o+i));
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  469|      0|      }
  470|      0|    }
  471|      0|    if (nint == 3) {  /* Narrow to integers. */
  ------------------
  |  Branch (471:9): [True: 0, False: 0]
  ------------------
  472|      0|      setintV(o, k[0]);
  473|      0|      setintV(o+1, k[1]);
  474|      0|      setintV(o+2, k[2]);
  475|      0|    } else if (nint != 0) {  /* Widen to numbers. */
  ------------------
  |  Branch (475:16): [True: 0, False: 0]
  ------------------
  476|      0|      if (tvisint(o)) setnumV(o, (lua_Number)intV(o));
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (tvisint(o)) setnumV(o, (lua_Number)intV(o));
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  477|      0|      if (tvisint(o+1)) setnumV(o+1, (lua_Number)intV(o+1));
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (tvisint(o+1)) setnumV(o+1, (lua_Number)intV(o+1));
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  478|      0|      if (tvisint(o+2)) setnumV(o+2, (lua_Number)intV(o+2));
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (tvisint(o+2)) setnumV(o+2, (lua_Number)intV(o+2));
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  479|      0|    }
  480|      0|  }
  481|    904|}
lj_meta.c:mmcall:
  108|   253k|{
  109|       |  /*
  110|       |  **           |-- framesize -> top       top+1       top+2 top+3
  111|       |  ** before:   [func slots ...]
  112|       |  ** mm setup: [func slots ...] [cont|?]  [mo|tmtype] [a]   [b]
  113|       |  ** in asm:   [func slots ...] [cont|PC] [mo|delta]  [a]   [b]
  114|       |  **           ^-- func base                          ^-- mm base
  115|       |  ** after mm: [func slots ...]           [result]
  116|       |  **                ^-- copy to base[PC_RA] --/     for lj_cont_ra
  117|       |  **                          istruecond + branch   for lj_cont_cond*
  118|       |  **                                       ignore   for lj_cont_nop
  119|       |  ** next PC:  [func slots ...]
  120|       |  */
  121|   253k|  TValue *top = L->top;
  122|   253k|  if (curr_funcisL(L)) top = curr_topL(L);
  ------------------
  |  |  716|   253k|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|   253k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|   253k|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 253k, False: 0]
  |  |  ------------------
  ------------------
                if (curr_funcisL(L)) top = curr_topL(L);
  ------------------
  |  |  718|   253k|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|   253k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|   253k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|   253k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|   253k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|   253k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 253k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|   253k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  123|   253k|  setcont(top++, cont);  /* Assembler VM stores PC in upper word or FR2. */
  ------------------
  |  |  895|   253k|#define setcont(o, f)		((o)->u64 = (uint64_t)(uintptr_t)contptr(f))
  |  |  ------------------
  |  |  |  |  894|   253k|#define contptr(f)		((void *)(f))
  |  |  ------------------
  ------------------
  124|   253k|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|   253k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|   253k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  125|   253k|  copyTV(L, top++, mo);  /* Store metamethod and two arguments. */
  126|   253k|  if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  569|   253k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(top++);
  ------------------
  |  |  872|   253k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  127|   253k|  copyTV(L, top, a);
  128|   253k|  copyTV(L, top+1, b);
  129|   253k|  return top;  /* Return new base. */
  130|   253k|}
lj_meta.c:str2num:
  201|   115k|{
  202|   115k|  if (tvisnum(o))
  ------------------
  |  |  804|   115k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   115k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   115k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   115k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 9.87k, False: 105k]
  |  |  ------------------
  ------------------
  203|  9.87k|    return o;
  204|   105k|  else if (tvisint(o))
  ------------------
  |  |  803|   105k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|   211k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  205|      0|    return (setnumV(n, (lua_Number)intV(o)), n);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  206|   105k|  else if (tvisstr(o) && lj_strscan_num(strV(o), n))
  ------------------
  |  |  795|   211k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   105k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   105k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.65k, False: 103k]
  |  |  ------------------
  ------------------
                else if (tvisstr(o) && lj_strscan_num(strV(o), n))
  ------------------
  |  |  859|  1.65k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.65k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.65k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.65k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.65k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.65k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (206:26): [True: 1.54k, False: 116]
  ------------------
  207|  1.54k|    return n;
  208|   104k|  else
  209|   104k|    return NULL;
  210|   115k|}

lj_obj_equal:
   24|  6.07M|{
   25|  6.07M|  if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  6.07M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
                if (itype(o1) == itype(o2)) {
  ------------------
  |  |  781|  6.07M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  ------------------
  |  Branch (25:7): [True: 1.85M, False: 4.22M]
  ------------------
   26|  1.85M|    if (tvispri(o1))
  ------------------
  |  |  807|  1.85M|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|  1.85M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|  1.85M|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  1.85M|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 110k, False: 1.74M]
  |  |  ------------------
  ------------------
   27|   110k|      return 1;
   28|  1.74M|    if (!tvisnum(o1))
  ------------------
  |  |  804|  1.74M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.74M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.74M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.74M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (28:9): [True: 1.22M, False: 511k]
  ------------------
   29|  1.22M|      return gcrefeq(o1->gcr, o2->gcr);
  ------------------
  |  |   70|  1.22M|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  ------------------
   30|  4.22M|  } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  8.44M|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  4.22M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  4.22M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  4.22M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                } else if (!tvisnumber(o1) || !tvisnumber(o2)) {
  ------------------
  |  |  802|  96.5k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  96.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  96.5k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  96.5k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (30:14): [True: 4.12M, False: 96.5k]
  |  Branch (30:33): [True: 10.6k, False: 85.8k]
  ------------------
   31|  4.13M|    return 0;
   32|  4.13M|  }
   33|   597k|  return numberVnum(o1) == numberVnum(o2);
   34|  6.07M|}
lj_obj_ptr:
   38|      3|{
   39|      3|  UNUSED(g);
  ------------------
  |  |   91|      3|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
   40|      3|  if (tvisudata(o))
  ------------------
  |  |  801|      3|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|      3|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 3]
  |  |  ------------------
  ------------------
   41|      3|    return uddata(udataV(o));
  ------------------
  |  |  342|      0|#define uddata(u)	((void *)((u)+1))
  |  |  ------------------
  |  |  |  Branch (342:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   42|      3|  else if (tvislightud(o))
  ------------------
  |  |  793|      3|#define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvislightud(o)	(itype(o) == LJ_TLIGHTUD)
  |  |  ------------------
  |  |  |  |  263|      3|#define LJ_TLIGHTUD		(~3u)
  |  |  ------------------
  |  |  |  Branch (793:24): [True: 0, False: 3]
  |  |  ------------------
  ------------------
   43|      0|    return lightudV(g, o);
   44|      3|  else if (LJ_HASFFI && tviscdata(o))
  ------------------
  |  |  585|      6|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                else if (LJ_HASFFI && tviscdata(o))
  ------------------
  |  |  799|      3|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      3|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 3]
  |  |  ------------------
  ------------------
   45|      3|    return cdataptr(cdataV(o));
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  |  |  ------------------
  |  |  |  Branch (360:33): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   46|      3|  else if (tvisgcv(o))
  ------------------
  |  |  809|      3|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      3|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      3|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      3|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      3|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3, False: 0]
  |  |  ------------------
  ------------------
   47|      3|    return gcV(o);
  ------------------
  |  |  858|      3|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      3|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      3|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   48|      0|  else
   49|      0|    return NULL;
   50|      3|}

lj_state.c:setgcVraw:
  918|  27.4k|{
  919|  27.4k|#if LJ_GC64
  920|  27.4k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  27.4k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  27.4k|}
lj_state.c:setgcV:
  927|  27.4k|{
  928|  27.4k|  setgcVraw(o, v, it);
  929|  27.4k|  checklivetv(L, o, "store to dead GC object");
  930|  27.4k|}
lj_state.c:checklivetv:
  904|  27.4k|{
  905|  27.4k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  27.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  27.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  27.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  27.4k|#if LUA_USE_ASSERT
  907|  27.4k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  27.4k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  27.4k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  27.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  27.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  27.4k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  27.4k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  27.4k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 27.4k, False: 0]
  |  |  ------------------
  ------------------
  908|  27.4k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  27.4k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  27.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 27.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  27.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  27.4k|	       "mismatch of TValue type %d vs GC type %d",
  910|  27.4k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  27.4k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  27.4k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  27.4k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 27.4k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  27.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  27.4k|  }
  914|  27.4k|#endif
  915|  27.4k|}
lj_state.c:settabV:
  933|  13.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  13.6k|{ \
  935|  13.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  13.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  13.6k|}
lj_state.c:setthreadV:
  933|  13.7k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  13.7k|{ \
  935|  13.7k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  13.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  13.7k|}
lj_api.c:copyTV:
  975|  5.49M|{
  976|  5.49M|  *o1 = *o2;
  977|  5.49M|  checklivetv(L, o1, "copy of dead GC object");
  978|  5.49M|}
lj_api.c:checklivetv:
  904|  10.0M|{
  905|  10.0M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  10.0M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  10.0M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  10.0M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  10.0M|#if LUA_USE_ASSERT
  907|  10.0M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  10.0M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  10.0M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  10.0M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  10.0M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  10.0M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  10.0M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  10.0M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 9.33M, False: 727k]
  |  |  ------------------
  ------------------
  908|  9.33M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  9.33M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.33M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.33M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.33M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  9.33M|	       "mismatch of TValue type %d vs GC type %d",
  910|  9.33M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  9.33M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  9.33M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.33M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.33M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.33M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  9.33M|  }
  914|  10.0M|#endif
  915|  10.0M|}
lj_api.c:setstrV:
  933|  3.70M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.70M|{ \
  935|  3.70M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.70M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.70M|}
lj_api.c:setgcV:
  927|  4.56M|{
  928|  4.56M|  setgcVraw(o, v, it);
  929|  4.56M|  checklivetv(L, o, "store to dead GC object");
  930|  4.56M|}
lj_api.c:setint64V:
  960|   939k|{
  961|   939k|  if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  549|  1.87M|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM && LJ_LIKELY(i == (int64_t)(int32_t)i))
  ------------------
  |  |  145|      0|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  962|      0|    setintV(o, (int32_t)i);
  963|   939k|  else
  964|   939k|    setnumV(o, (lua_Number)i);
  ------------------
  |  |  945|   939k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  965|   939k|}
lj_api.c:setfuncV:
  933|   371k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   371k|{ \
  935|   371k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   371k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   371k|}
lj_api.c:settabV:
  933|   438k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   438k|{ \
  935|   438k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   438k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   438k|}
lj_api.c:setthreadV:
  933|     46|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|     46|{ \
  935|     46|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|     46|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|     46|}
lj_api.c:setudataV:
  933|  56.3k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  56.3k|{ \
  935|  56.3k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  56.3k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  56.3k|}
lj_api.c:setgcVraw:
  918|  4.56M|{
  919|  4.56M|#if LJ_GC64
  920|  4.56M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  4.56M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  4.56M|}
lj_lex.c:setstrV:
  933|   197M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   197M|{ \
  935|   197M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   197M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   197M|}
lj_lex.c:setgcV:
  927|   197M|{
  928|   197M|  setgcVraw(o, v, it);
  929|   197M|  checklivetv(L, o, "store to dead GC object");
  930|   197M|}
lj_lex.c:setgcVraw:
  918|   197M|{
  919|   197M|#if LJ_GC64
  920|   197M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   197M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   197M|}
lj_lex.c:checklivetv:
  904|   197M|{
  905|   197M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   197M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   197M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   197M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   197M|#if LUA_USE_ASSERT
  907|   197M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   197M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   197M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   197M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   197M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   197M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   197M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   197M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 197M, False: 0]
  |  |  ------------------
  ------------------
  908|   197M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   197M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   197M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 197M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   197M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   197M|	       "mismatch of TValue type %d vs GC type %d",
  910|   197M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   197M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   197M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   197M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 197M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   197M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   197M|  }
  914|   197M|#endif
  915|   197M|}
lj_parse.c:setcdataV:
  933|  70.2k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  70.2k|{ \
  935|  70.2k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  70.2k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  70.2k|}
lj_parse.c:setgcV:
  927|  13.6M|{
  928|  13.6M|  setgcVraw(o, v, it);
  929|  13.6M|  checklivetv(L, o, "store to dead GC object");
  930|  13.6M|}
lj_parse.c:setgcVraw:
  918|   198M|{
  919|   198M|#if LJ_GC64
  920|   198M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   198M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   198M|}
lj_parse.c:checklivetv:
  904|   200M|{
  905|   200M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   200M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   200M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   200M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   200M|#if LUA_USE_ASSERT
  907|   200M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   200M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   200M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   200M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   200M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   200M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   200M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   200M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 13.6M, False: 186M]
  |  |  ------------------
  ------------------
  908|  13.6M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  13.6M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  13.6M|	       "mismatch of TValue type %d vs GC type %d",
  910|  13.6M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  13.6M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  13.6M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  13.6M|  }
  914|   200M|#endif
  915|   200M|}
lj_parse.c:setstrV:
  933|  2.97M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  2.97M|{ \
  935|  2.97M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  2.97M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  2.97M|}
lj_parse.c:settabV:
  933|  4.39M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  4.39M|{ \
  935|  4.39M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  4.39M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  4.39M|}
lj_parse.c:copyTV:
  975|   186M|{
  976|   186M|  *o1 = *o2;
  977|   186M|  checklivetv(L, o1, "copy of dead GC object");
  978|   186M|}
lj_parse.c:numberVnum:
 1029|   960k|{
 1030|   960k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|   960k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|   960k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|   960k|  else
 1033|   960k|    return numV(o);
  ------------------
  |  |  866|   960k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   960k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   960k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   960k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 960k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   960k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|   960k|}
lj_parse.c:setintV:
  951|  16.7M|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  16.7M|  o->n = (lua_Number)i;
  956|  16.7M|#endif
  957|  16.7M|}
lj_load.c:setgcV:
  927|   989k|{
  928|   989k|  setgcVraw(o, v, it);
  929|   989k|  checklivetv(L, o, "store to dead GC object");
  930|   989k|}
lj_load.c:setgcVraw:
  918|   989k|{
  919|   989k|#if LJ_GC64
  920|   989k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   989k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   989k|}
lj_load.c:checklivetv:
  904|   990k|{
  905|   990k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   990k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   990k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   990k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   990k|#if LUA_USE_ASSERT
  907|   990k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   990k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   990k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   990k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   990k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   990k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   990k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   990k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 990k, False: 0]
  |  |  ------------------
  ------------------
  908|   990k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   990k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   990k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 990k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   990k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   990k|	       "mismatch of TValue type %d vs GC type %d",
  910|   990k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   990k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   990k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   990k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 990k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   990k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   990k|  }
  914|   990k|#endif
  915|   990k|}
lj_load.c:setfuncV:
  933|   989k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   989k|{ \
  935|   989k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   989k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   989k|}
lj_load.c:copyTV:
  975|    945|{
  976|    945|  *o1 = *o2;
  977|    945|  checklivetv(L, o1, "copy of dead GC object");
  978|    945|}
lj_trace.c:setintV:
  951|  1.80k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  1.80k|  o->n = (lua_Number)i;
  956|  1.80k|#endif
  957|  1.80k|}
lj_trace.c:numberVint:
 1021|  1.72k|{
 1022|  1.72k|  if (LJ_LIKELY(tvisint(o)))
  ------------------
  |  |  145|  1.72k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1023|  1.72k|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  1.72k|  else
 1025|  1.72k|    return lj_num2int(numV(o));
  ------------------
  |  | 1000|  3.44k|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 1.72k, False: 0]
  |  |  ------------------
  ------------------
 1026|  1.72k|}
lj_ctype.c:setstrV:
  933|  13.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  13.6k|{ \
  935|  13.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  13.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  13.6k|}
lj_ctype.c:setgcV:
  927|  13.6k|{
  928|  13.6k|  setgcVraw(o, v, it);
  929|  13.6k|  checklivetv(L, o, "store to dead GC object");
  930|  13.6k|}
lj_ctype.c:setgcVraw:
  918|  13.6k|{
  919|  13.6k|#if LJ_GC64
  920|  13.6k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  13.6k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  13.6k|}
lj_ctype.c:checklivetv:
  904|  13.6k|{
  905|  13.6k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  13.6k|#if LUA_USE_ASSERT
  907|  13.6k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  13.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  13.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  13.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  13.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  13.6k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  13.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  13.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 13.6k, False: 0]
  |  |  ------------------
  ------------------
  908|  13.6k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  13.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  13.6k|	       "mismatch of TValue type %d vs GC type %d",
  910|  13.6k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  13.6k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  13.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  13.6k|  }
  914|  13.6k|#endif
  915|  13.6k|}
lib_ffi.c:settabV:
  933|  6.63k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  6.63k|{ \
  935|  6.63k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  6.63k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  6.63k|}
lib_ffi.c:setgcV:
  927|  6.63k|{
  928|  6.63k|  setgcVraw(o, v, it);
  929|  6.63k|  checklivetv(L, o, "store to dead GC object");
  930|  6.63k|}
lib_ffi.c:setgcVraw:
  918|  6.63k|{
  919|  6.63k|#if LJ_GC64
  920|  6.63k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  6.63k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  6.63k|}
lib_ffi.c:checklivetv:
  904|  9.95k|{
  905|  9.95k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.95k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.95k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  9.95k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  9.95k|#if LUA_USE_ASSERT
  907|  9.95k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  9.95k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  9.95k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  9.95k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  9.95k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  9.95k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  9.95k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  9.95k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 9.95k, False: 0]
  |  |  ------------------
  ------------------
  908|  9.95k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  9.95k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.95k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.95k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.95k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  9.95k|	       "mismatch of TValue type %d vs GC type %d",
  910|  9.95k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  9.95k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  9.95k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  9.95k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 9.95k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  9.95k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  9.95k|  }
  914|  9.95k|#endif
  915|  9.95k|}
lib_ffi.c:copyTV:
  975|  3.31k|{
  976|  3.31k|  *o1 = *o2;
  977|  3.31k|  checklivetv(L, o1, "copy of dead GC object");
  978|  3.31k|}
lj_gc.c:setgcV:
  927|  45.6k|{
  928|  45.6k|  setgcVraw(o, v, it);
  929|  45.6k|  checklivetv(L, o, "store to dead GC object");
  930|  45.6k|}
lj_gc.c:setgcVraw:
  918|  45.6k|{
  919|  45.6k|#if LJ_GC64
  920|  45.6k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  45.6k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  45.6k|}
lj_gc.c:checklivetv:
  904|  95.5k|{
  905|  95.5k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  95.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  95.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  95.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  95.5k|#if LUA_USE_ASSERT
  907|  95.5k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  95.5k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  95.5k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  95.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  95.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  95.5k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  95.5k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  95.5k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 95.1k, False: 416]
  |  |  ------------------
  ------------------
  908|  95.1k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  95.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  95.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 95.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  95.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  95.1k|	       "mismatch of TValue type %d vs GC type %d",
  910|  95.1k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  95.1k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  95.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  95.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 95.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  95.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  95.1k|  }
  914|  95.5k|#endif
  915|  95.5k|}
lj_gc.c:copyTV:
  975|  49.8k|{
  976|  49.8k|  *o1 = *o2;
  977|  49.8k|  checklivetv(L, o1, "copy of dead GC object");
  978|  49.8k|}
lj_err.c:checklivetv:
  904|  4.02M|{
  905|  4.02M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.02M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.02M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.02M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  4.02M|#if LUA_USE_ASSERT
  907|  4.02M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  4.02M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  4.02M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.02M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.02M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  4.02M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.02M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.02M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 4.02M, False: 1]
  |  |  ------------------
  ------------------
  908|  4.02M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  4.02M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.02M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.02M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.02M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  4.02M|	       "mismatch of TValue type %d vs GC type %d",
  910|  4.02M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  4.02M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  4.02M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.02M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.02M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.02M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  4.02M|  }
  914|  4.02M|#endif
  915|  4.02M|}
lj_err.c:setgcVraw:
  918|  1.97M|{
  919|  1.97M|#if LJ_GC64
  920|  1.97M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  1.97M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  1.97M|}
lj_err.c:copyTV:
  975|  4.02M|{
  976|  4.02M|  *o1 = *o2;
  977|  4.02M|  checklivetv(L, o1, "copy of dead GC object");
  978|  4.02M|}
lj_obj.c:numberVnum:
 1029|  1.19M|{
 1030|  1.19M|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  1.19M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  1.19M|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  1.19M|  else
 1033|  1.19M|    return numV(o);
  ------------------
  |  |  866|  1.19M|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  1.19M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.19M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.19M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.19M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.19M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  1.19M|}
lj_tab.c:copyTV:
  975|   484M|{
  976|   484M|  *o1 = *o2;
  977|   484M|  checklivetv(L, o1, "copy of dead GC object");
  978|   484M|}
lj_tab.c:checklivetv:
  904|  1.34G|{
  905|  1.34G|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.34G|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.34G|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.34G|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.34G|#if LUA_USE_ASSERT
  907|  1.34G|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.34G|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.34G|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.34G|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.34G|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.34G|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.34G|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.34G|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 857M, False: 484M]
  |  |  ------------------
  ------------------
  908|   857M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   857M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   857M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 857M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   857M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   857M|	       "mismatch of TValue type %d vs GC type %d",
  910|   857M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   857M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   857M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   857M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 857M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   857M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   857M|  }
  914|  1.34G|#endif
  915|  1.34G|}
lj_tab.c:setstrV:
  933|   856M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   856M|{ \
  935|   856M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   856M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   856M|}
lj_tab.c:setgcV:
  927|   856M|{
  928|   856M|  setgcVraw(o, v, it);
  929|   856M|  checklivetv(L, o, "store to dead GC object");
  930|   856M|}
lj_tab.c:setgcVraw:
  918|   856M|{
  919|   856M|#if LJ_GC64
  920|   856M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   856M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   856M|}
lj_tab.c:setintV:
  951|    430|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|    430|  o->n = (lua_Number)i;
  956|    430|#endif
  957|    430|}
lj_meta.c:copyTV:
  975|   769k|{
  976|   769k|  *o1 = *o2;
  977|   769k|  checklivetv(L, o1, "copy of dead GC object");
  978|   769k|}
lj_meta.c:checklivetv:
  904|  1.03M|{
  905|  1.03M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.03M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.03M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.03M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.03M|#if LUA_USE_ASSERT
  907|  1.03M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.03M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.03M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.03M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.03M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.03M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.03M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.03M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 812k, False: 220k]
  |  |  ------------------
  ------------------
  908|   812k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   812k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   812k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 812k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   812k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   812k|	       "mismatch of TValue type %d vs GC type %d",
  910|   812k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   812k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   812k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   812k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 812k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   812k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   812k|  }
  914|  1.03M|#endif
  915|  1.03M|}
lj_meta.c:setgcVraw:
  918|   263k|{
  919|   263k|#if LJ_GC64
  920|   263k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   263k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   263k|}
lj_meta.c:setstrV:
  933|   262k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   262k|{ \
  935|   262k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   262k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   262k|}
lj_meta.c:setgcV:
  927|   263k|{
  928|   263k|  setgcVraw(o, v, it);
  929|   263k|  checklivetv(L, o, "store to dead GC object");
  930|   263k|}
lj_debug.c:checklivetv:
  904|    784|{
  905|    784|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    784|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    784|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    784|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    784|#if LUA_USE_ASSERT
  907|    784|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    784|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    784|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    784|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    784|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    784|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    784|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    784|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 784, False: 0]
  |  |  ------------------
  ------------------
  908|    784|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    784|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    784|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 784, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    784|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    784|	       "mismatch of TValue type %d vs GC type %d",
  910|    784|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    784|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    784|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    784|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 784, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    784|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    784|  }
  914|    784|#endif
  915|    784|}
lj_debug.c:setfuncV:
  933|    784|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    784|{ \
  935|    784|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    784|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    784|}
lj_debug.c:setgcV:
  927|    784|{
  928|    784|  setgcVraw(o, v, it);
  929|    784|  checklivetv(L, o, "store to dead GC object");
  930|    784|}
lj_debug.c:setgcVraw:
  918|    784|{
  919|    784|#if LJ_GC64
  920|    784|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    784|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    784|}
lj_strfmt.c:checklivetv:
  904|  11.6M|{
  905|  11.6M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.6M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.6M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  11.6M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  11.6M|#if LUA_USE_ASSERT
  907|  11.6M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  11.6M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  11.6M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.6M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.6M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  11.6M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  11.6M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  11.6M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 11.6M, False: 0]
  |  |  ------------------
  ------------------
  908|  11.6M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  11.6M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.6M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  11.6M|	       "mismatch of TValue type %d vs GC type %d",
  910|  11.6M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  11.6M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  11.6M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.6M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.6M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  11.6M|  }
  914|  11.6M|#endif
  915|  11.6M|}
lj_strfmt.c:setstrV:
  933|  11.6M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  11.6M|{ \
  935|  11.6M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  11.6M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  11.6M|}
lj_strfmt.c:setgcV:
  927|  11.6M|{
  928|  11.6M|  setgcVraw(o, v, it);
  929|  11.6M|  checklivetv(L, o, "store to dead GC object");
  930|  11.6M|}
lj_strfmt.c:setgcVraw:
  918|  11.6M|{
  919|  11.6M|#if LJ_GC64
  920|  11.6M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  11.6M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  11.6M|}
lj_bcread.c:setintV:
  951|  27.3k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  27.3k|  o->n = (lua_Number)i;
  956|  27.3k|#endif
  957|  27.3k|}
lj_opt_loop.c:numberVint:
 1021|     81|{
 1022|     81|  if (LJ_LIKELY(tvisint(o)))
  ------------------
  |  |  145|     81|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1023|     81|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|     81|  else
 1025|     81|    return lj_num2int(numV(o));
  ------------------
  |  | 1000|    162|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 81, False: 0]
  |  |  ------------------
  ------------------
 1026|     81|}
lj_snap.c:checklivetv:
  904|  4.92k|{
  905|  4.92k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.92k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.92k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.92k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  4.92k|#if LUA_USE_ASSERT
  907|  4.92k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  4.92k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  4.92k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.92k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.92k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  4.92k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.92k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.92k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 4.92k, False: 0]
  |  |  ------------------
  ------------------
  908|  4.92k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  4.92k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.92k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.92k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.92k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  4.92k|	       "mismatch of TValue type %d vs GC type %d",
  910|  4.92k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  4.92k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  4.92k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.92k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.92k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.92k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  4.92k|  }
  914|  4.92k|#endif
  915|  4.92k|}
lj_snap.c:setgcV:
  927|  4.92k|{
  928|  4.92k|  setgcVraw(o, v, it);
  929|  4.92k|  checklivetv(L, o, "store to dead GC object");
  930|  4.92k|}
lj_snap.c:setgcVraw:
  918|  4.92k|{
  919|  4.92k|#if LJ_GC64
  920|  4.92k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  4.92k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  4.92k|}
lj_snap.c:settabV:
  933|      7|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|      7|{ \
  935|      7|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|      7|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|      7|}
lj_snap.c:setintV:
  951|   453k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|   453k|  o->n = (lua_Number)i;
  956|   453k|#endif
  957|   453k|}
lj_record.c:copyTV:
  975|   274k|{
  976|   274k|  *o1 = *o2;
  977|   274k|  checklivetv(L, o1, "copy of dead GC object");
  978|   274k|}
lj_record.c:checklivetv:
  904|   333k|{
  905|   333k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   333k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   333k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   333k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   333k|#if LUA_USE_ASSERT
  907|   333k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   333k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   333k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   333k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   333k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   333k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   333k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   333k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 167k, False: 165k]
  |  |  ------------------
  ------------------
  908|   167k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   167k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   167k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 167k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   167k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   167k|	       "mismatch of TValue type %d vs GC type %d",
  910|   167k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   167k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   167k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   167k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 167k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   167k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   167k|  }
  914|   333k|#endif
  915|   333k|}
lj_record.c:settabV:
  933|  10.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  10.6k|{ \
  935|  10.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  10.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  10.6k|}
lj_record.c:setgcV:
  927|  58.5k|{
  928|  58.5k|  setgcVraw(o, v, it);
  929|  58.5k|  checklivetv(L, o, "store to dead GC object");
  930|  58.5k|}
lj_record.c:setgcVraw:
  918|  58.5k|{
  919|  58.5k|#if LJ_GC64
  920|  58.5k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  58.5k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  58.5k|}
lj_record.c:setstrV:
  933|  47.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  47.8k|{ \
  935|  47.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  47.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  47.8k|}
lj_record.c:setfuncV:
  933|     17|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|     17|{ \
  935|     17|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|     17|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|     17|}
lj_record.c:numberVint:
 1021|  4.72k|{
 1022|  4.72k|  if (LJ_LIKELY(tvisint(o)))
  ------------------
  |  |  145|  4.72k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1023|  4.72k|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|  4.72k|  else
 1025|  4.72k|    return lj_num2int(numV(o));
  ------------------
  |  | 1000|  9.45k|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 4.72k, False: 0]
  |  |  ------------------
  ------------------
 1026|  4.72k|}
lj_record.c:numberVnum:
 1029|  70.2k|{
 1030|  70.2k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  70.2k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  70.2k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  70.2k|  else
 1033|  70.2k|    return numV(o);
  ------------------
  |  |  866|  70.2k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  70.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  70.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  70.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 70.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  70.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  70.2k|}
lj_record.c:setintV:
  951|    439|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|    439|  o->n = (lua_Number)i;
  956|    439|#endif
  957|    439|}
lj_ffrecord.c:copyTV:
  975|     46|{
  976|     46|  *o1 = *o2;
  977|     46|  checklivetv(L, o1, "copy of dead GC object");
  978|     46|}
lj_ffrecord.c:checklivetv:
  904|    328|{
  905|    328|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    328|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    328|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|    328|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|    328|#if LUA_USE_ASSERT
  907|    328|  if (tvisgcv(o)) {
  ------------------
  |  |  809|    328|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|    328|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    328|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    328|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|    328|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|    328|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|    328|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 328, False: 0]
  |  |  ------------------
  ------------------
  908|    328|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|    328|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    328|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 328, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    328|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|    328|	       "mismatch of TValue type %d vs GC type %d",
  910|    328|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|    328|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|    328|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    328|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 328, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    328|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|    328|  }
  914|    328|#endif
  915|    328|}
lj_ffrecord.c:setintV:
  951|    282|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|    282|  o->n = (lua_Number)i;
  956|    282|#endif
  957|    282|}
lj_ffrecord.c:numberVint:
 1021|    282|{
 1022|    282|  if (LJ_LIKELY(tvisint(o)))
  ------------------
  |  |  145|    282|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1023|    282|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|    282|  else
 1025|    282|    return lj_num2int(numV(o));
  ------------------
  |  | 1000|    564|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 282, False: 0]
  |  |  ------------------
  ------------------
 1026|    282|}
lj_ffrecord.c:settabV:
  933|    282|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    282|{ \
  935|    282|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    282|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    282|}
lj_ffrecord.c:setgcV:
  927|    282|{
  928|    282|  setgcVraw(o, v, it);
  929|    282|  checklivetv(L, o, "store to dead GC object");
  930|    282|}
lj_ffrecord.c:setgcVraw:
  918|    282|{
  919|    282|#if LJ_GC64
  920|    282|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|    282|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|    282|}
lj_cconv.c:lj_num2u64:
 1010|  6.69k|{
 1011|  6.69k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS
 1012|  6.69k|  int64_t i = (int64_t)n;
 1013|  6.69k|  if (i < 0) i = (int64_t)(n - 18446744073709551616.0);
  ------------------
  |  Branch (1013:7): [True: 1.28k, False: 5.41k]
  ------------------
 1014|  6.69k|  return (uint64_t)i;
 1015|       |#else
 1016|       |  return (uint64_t)n;
 1017|       |#endif
 1018|  6.69k|}
lj_carith.c:setcdataV:
  933|  42.8k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  42.8k|{ \
  935|  42.8k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  42.8k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  42.8k|}
lj_carith.c:setgcV:
  927|  42.8k|{
  928|  42.8k|  setgcVraw(o, v, it);
  929|  42.8k|  checklivetv(L, o, "store to dead GC object");
  930|  42.8k|}
lj_carith.c:setgcVraw:
  918|  42.8k|{
  919|  42.8k|#if LJ_GC64
  920|  42.8k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  42.8k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  42.8k|}
lj_carith.c:checklivetv:
  904|  88.3k|{
  905|  88.3k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  88.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  88.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  88.3k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  88.3k|#if LUA_USE_ASSERT
  907|  88.3k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  88.3k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  88.3k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  88.3k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  88.3k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  88.3k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  88.3k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  88.3k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 85.6k, False: 2.65k]
  |  |  ------------------
  ------------------
  908|  85.6k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  85.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  85.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 85.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  85.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  85.6k|	       "mismatch of TValue type %d vs GC type %d",
  910|  85.6k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  85.6k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  85.6k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  85.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 85.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  85.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  85.6k|  }
  914|  88.3k|#endif
  915|  88.3k|}
lj_carith.c:copyTV:
  975|  45.4k|{
  976|  45.4k|  *o1 = *o2;
  977|  45.4k|  checklivetv(L, o1, "copy of dead GC object");
  978|  45.4k|}
lj_clib.c:setgcV:
  927|  3.31k|{
  928|  3.31k|  setgcVraw(o, v, it);
  929|  3.31k|  checklivetv(L, o, "store to dead GC object");
  930|  3.31k|}
lj_clib.c:setgcVraw:
  918|  3.31k|{
  919|  3.31k|#if LJ_GC64
  920|  3.31k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  3.31k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  3.31k|}
lj_clib.c:checklivetv:
  904|  3.31k|{
  905|  3.31k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.31k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.31k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.31k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.31k|#if LUA_USE_ASSERT
  907|  3.31k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.31k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.31k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.31k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.31k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.31k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.31k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.31k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.31k, False: 0]
  |  |  ------------------
  ------------------
  908|  3.31k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.31k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.31k|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.31k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.31k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.31k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.31k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.31k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.31k|  }
  914|  3.31k|#endif
  915|  3.31k|}
lj_clib.c:setudataV:
  933|  3.31k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  3.31k|{ \
  935|  3.31k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  3.31k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  3.31k|}
lj_lib.c:settabV:
  933|   301k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   301k|{ \
  935|   301k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   301k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   301k|}
lj_lib.c:setgcV:
  927|  2.85M|{
  928|  2.85M|  setgcVraw(o, v, it);
  929|  2.85M|  checklivetv(L, o, "store to dead GC object");
  930|  2.85M|}
lj_lib.c:setgcVraw:
  918|  2.85M|{
  919|  2.85M|#if LJ_GC64
  920|  2.85M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  2.85M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  2.85M|}
lj_lib.c:checklivetv:
  904|  3.16M|{
  905|  3.16M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.16M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.16M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  3.16M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  3.16M|#if LUA_USE_ASSERT
  907|  3.16M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  3.16M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  3.16M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.16M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.16M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  3.16M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  3.16M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  3.16M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3.11M, False: 54.7k]
  |  |  ------------------
  ------------------
  908|  3.11M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  3.11M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.11M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.11M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.11M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  3.11M|	       "mismatch of TValue type %d vs GC type %d",
  910|  3.11M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  3.11M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  3.11M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.11M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3.11M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  3.11M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  3.11M|  }
  914|  3.16M|#endif
  915|  3.16M|}
lj_lib.c:setfuncV:
  933|  2.22M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  2.22M|{ \
  935|  2.22M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  2.22M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  2.22M|}
lj_lib.c:copyTV:
  975|   310k|{
  976|   310k|  *o1 = *o2;
  977|   310k|  checklivetv(L, o1, "copy of dead GC object");
  978|   310k|}
lj_lib.c:setstrV:
  933|   327k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|   327k|{ \
  935|   327k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|   327k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|   327k|}
lib_base.c:copyTV:
  975|  69.1k|{
  976|  69.1k|  *o1 = *o2;
  977|  69.1k|  checklivetv(L, o1, "copy of dead GC object");
  978|  69.1k|}
lib_base.c:checklivetv:
  904|   117k|{
  905|   117k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   117k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   117k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   117k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   117k|#if LUA_USE_ASSERT
  907|   117k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   117k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   117k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   117k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   117k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   117k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   117k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   117k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 65.1k, False: 52.1k]
  |  |  ------------------
  ------------------
  908|  65.1k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  65.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  65.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 65.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  65.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  65.1k|	       "mismatch of TValue type %d vs GC type %d",
  910|  65.1k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  65.1k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  65.1k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  65.1k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 65.1k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  65.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  65.1k|  }
  914|   117k|#endif
  915|   117k|}
lib_base.c:settabV:
  933|  28.0k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  28.0k|{ \
  935|  28.0k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  28.0k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  28.0k|}
lib_base.c:setgcV:
  927|  48.1k|{
  928|  48.1k|  setgcVraw(o, v, it);
  929|  48.1k|  checklivetv(L, o, "store to dead GC object");
  930|  48.1k|}
lib_base.c:setgcVraw:
  918|  48.1k|{
  919|  48.1k|#if LJ_GC64
  920|  48.1k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  48.1k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  48.1k|}
lib_base.c:setstrV:
  933|  19.7k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  19.7k|{ \
  935|  19.7k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  19.7k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  19.7k|}
lib_base.c:setfuncV:
  933|    378|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|    378|{ \
  935|    378|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|    378|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|    378|}
lib_base.c:setintV:
  951|  28.7k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  28.7k|  o->n = (lua_Number)i;
  956|  28.7k|#endif
  957|  28.7k|}
lib_string.c:setintV:
  951|  2.02k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|  2.02k|  o->n = (lua_Number)i;
  956|  2.02k|#endif
  957|  2.02k|}
lib_string.c:setstrV:
  933|  1.01M|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  1.01M|{ \
  935|  1.01M|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  1.01M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  1.01M|}
lib_string.c:setgcV:
  927|  1.03M|{
  928|  1.03M|  setgcVraw(o, v, it);
  929|  1.03M|  checklivetv(L, o, "store to dead GC object");
  930|  1.03M|}
lib_string.c:setgcVraw:
  918|  1.03M|{
  919|  1.03M|#if LJ_GC64
  920|  1.03M|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  1.03M|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  1.03M|}
lib_string.c:checklivetv:
  904|  1.03M|{
  905|  1.03M|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.03M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.03M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  1.03M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  1.03M|#if LUA_USE_ASSERT
  907|  1.03M|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  1.03M|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  1.03M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.03M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.03M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  1.03M|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  1.03M|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  1.03M|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 1.03M, False: 0]
  |  |  ------------------
  ------------------
  908|  1.03M|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  1.03M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.03M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.03M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.03M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  1.03M|	       "mismatch of TValue type %d vs GC type %d",
  910|  1.03M|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  1.03M|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  1.03M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.03M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.03M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.03M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  1.03M|  }
  914|  1.03M|#endif
  915|  1.03M|}
lib_string.c:settabV:
  933|  13.6k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  13.6k|{ \
  935|  13.6k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  13.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  13.6k|}
lib_table.c:copyTV:
  975|      2|{
  976|      2|  *o1 = *o2;
  977|      2|  checklivetv(L, o1, "copy of dead GC object");
  978|      2|}
lib_table.c:checklivetv:
  904|     32|{
  905|     32|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     32|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     32|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|     32|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|     32|#if LUA_USE_ASSERT
  907|     32|  if (tvisgcv(o)) {
  ------------------
  |  |  809|     32|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|     32|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     32|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     32|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|     32|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|     32|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|     32|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 30, False: 2]
  |  |  ------------------
  ------------------
  908|     30|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|     30|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     30|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 30, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     30|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|     30|	       "mismatch of TValue type %d vs GC type %d",
  910|     30|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|     30|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|     30|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     30|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 30, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     30|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|     30|  }
  914|     32|#endif
  915|     32|}
lib_table.c:setstrV:
  933|     30|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|     30|{ \
  935|     30|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|     30|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|     30|}
lib_table.c:setgcV:
  927|     30|{
  928|     30|  setgcVraw(o, v, it);
  929|     30|  checklivetv(L, o, "store to dead GC object");
  930|     30|}
lib_table.c:setgcVraw:
  918|     30|{
  919|     30|#if LJ_GC64
  920|     30|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     30|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|     30|}
lib_io.c:setgcV:
  927|     14|{
  928|     14|  setgcVraw(o, v, it);
  929|     14|  checklivetv(L, o, "store to dead GC object");
  930|     14|}
lib_io.c:setgcVraw:
  918|     14|{
  919|     14|#if LJ_GC64
  920|     14|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|     14|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|     14|}
lib_io.c:checklivetv:
  904|  13.7k|{
  905|  13.7k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  13.7k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  13.7k|#if LUA_USE_ASSERT
  907|  13.7k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  13.7k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  13.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  13.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  13.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  13.7k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  13.7k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  13.7k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 13.7k, False: 0]
  |  |  ------------------
  ------------------
  908|  13.7k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  13.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  13.7k|	       "mismatch of TValue type %d vs GC type %d",
  910|  13.7k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  13.7k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  13.7k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.7k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.7k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  13.7k|  }
  914|  13.7k|#endif
  915|  13.7k|}
lib_io.c:copyTV:
  975|  13.6k|{
  976|  13.6k|  *o1 = *o2;
  977|  13.6k|  checklivetv(L, o1, "copy of dead GC object");
  978|  13.6k|}
lib_io.c:setudataV:
  933|     14|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|     14|{ \
  935|     14|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|     14|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|     14|}
lib_debug.c:checklivetv:
  904|      3|{
  905|      3|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      3|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      3|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|      3|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|      3|#if LUA_USE_ASSERT
  907|      3|  if (tvisgcv(o)) {
  ------------------
  |  |  809|      3|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      3|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      3|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      3|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      3|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 3, False: 0]
  |  |  ------------------
  ------------------
  908|      3|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|      3|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|      3|	       "mismatch of TValue type %d vs GC type %d",
  910|      3|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|      3|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|      3|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|      3|  }
  914|      3|#endif
  915|      3|}
lib_debug.c:setfuncV:
  933|      3|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|      3|{ \
  935|      3|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|      3|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|      3|}
lib_debug.c:setgcV:
  927|      3|{
  928|      3|  setgcVraw(o, v, it);
  929|      3|  checklivetv(L, o, "store to dead GC object");
  930|      3|}
lib_debug.c:setgcVraw:
  918|      3|{
  919|      3|#if LJ_GC64
  920|      3|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|      3|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|      3|}
lib_jit.c:setstrV:
  933|  4.40k|static LJ_AINLINE void name(lua_State *L, TValue *o, const type *v) \
  934|  4.40k|{ \
  935|  4.40k|  setgcV(L, o, obj2gco(v), tag); \
  ------------------
  |  |  775|  4.40k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  936|  4.40k|}
lib_jit.c:setgcV:
  927|  4.40k|{
  928|  4.40k|  setgcVraw(o, v, it);
  929|  4.40k|  checklivetv(L, o, "store to dead GC object");
  930|  4.40k|}
lib_jit.c:setgcVraw:
  918|  4.40k|{
  919|  4.40k|#if LJ_GC64
  920|  4.40k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|  4.40k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|  4.40k|}
lib_jit.c:checklivetv:
  904|  4.40k|{
  905|  4.40k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.40k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.40k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|  4.40k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|  4.40k|#if LUA_USE_ASSERT
  907|  4.40k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|  4.40k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  4.40k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.40k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.40k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  4.40k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  4.40k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  4.40k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 4.40k, False: 0]
  |  |  ------------------
  ------------------
  908|  4.40k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|  4.40k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.40k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.40k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.40k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|  4.40k|	       "mismatch of TValue type %d vs GC type %d",
  910|  4.40k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|  4.40k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|  4.40k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.40k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 4.40k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  4.40k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|  4.40k|  }
  914|  4.40k|#endif
  915|  4.40k|}
lj_ir.c:setintV:
  951|   132k|{
  952|       |#if LJ_DUALNUM
  953|       |  o->i = (uint32_t)i; setitype(o, LJ_TISNUM);
  954|       |#else
  955|   132k|  o->n = (lua_Number)i;
  956|   132k|#endif
  957|   132k|}
lj_ir.c:setgcV:
  927|   588k|{
  928|   588k|  setgcVraw(o, v, it);
  929|   588k|  checklivetv(L, o, "store to dead GC object");
  930|   588k|}
lj_ir.c:setgcVraw:
  918|   588k|{
  919|   588k|#if LJ_GC64
  920|   588k|  setgcreft(o->gcr, v, itype);
  ------------------
  |  |   74|   588k|  (r).gcptr64 = (uint64_t)&(gc)->gch | (((uint64_t)(it)) << 47)
  ------------------
  921|       |#else
  922|       |  setgcref(o->gcr, v); setitype(o, itype);
  923|       |#endif
  924|   588k|}
lj_ir.c:checklivetv:
  904|   588k|{
  905|   588k|  UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   588k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   588k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(o); UNUSED(msg);
  ------------------
  |  |   91|   588k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  906|   588k|#if LUA_USE_ASSERT
  907|   588k|  if (tvisgcv(o)) {
  ------------------
  |  |  809|   588k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|   588k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   588k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   588k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|   588k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|   588k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|   588k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 588k, False: 0]
  |  |  ------------------
  ------------------
  908|   588k|    lj_assertL(~itype(o) == gcval(o)->gch.gct,
  ------------------
  |  |  365|   588k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   588k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 588k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   588k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  909|   588k|	       "mismatch of TValue type %d vs GC type %d",
  910|   588k|	       ~itype(o), gcval(o)->gch.gct);
  911|       |    /* Copy of isdead check from lj_gc.h to avoid circular include. */
  912|   588k|    lj_assertL(!(gcval(o)->gch.marked & (G(L)->gc.currentwhite ^ 3) & 3), msg);
  ------------------
  |  |  365|   588k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   588k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 588k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   588k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  913|   588k|  }
  914|   588k|#endif
  915|   588k|}
lj_opt_narrow.c:numberVnum:
 1029|  35.8k|{
 1030|  35.8k|  if (LJ_UNLIKELY(tvisint(o)))
  ------------------
  |  |  146|  35.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [Folded - Ignored]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1031|  35.8k|    return (lua_Number)intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1032|  35.8k|  else
 1033|  35.8k|    return numV(o);
  ------------------
  |  |  866|  35.8k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  35.8k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  35.8k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  35.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 35.8k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  35.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1034|  35.8k|}
lj_opt_narrow.c:numberVint:
 1021|      9|{
 1022|      9|  if (LJ_LIKELY(tvisint(o)))
  ------------------
  |  |  145|      9|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [Folded - Ignored]
  |  |  |  Branch (145:42): [Folded - Ignored]
  |  |  |  Branch (145:42): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1023|      9|    return intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1024|      9|  else
 1025|      9|    return lj_num2int(numV(o));
  ------------------
  |  | 1000|     18|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 9, False: 0]
  |  |  ------------------
  ------------------
 1026|      9|}

lj_opt_dce:
   65|  9.93k|{
   66|  9.93k|  if ((J->flags & JIT_F_OPT_DCE)) {
  ------------------
  |  |   82|  9.93k|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  ------------------
  |  |  |  |   77|  9.93k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (66:7): [True: 9.93k, False: 0]
  ------------------
   67|  9.93k|    dce_marksnap(J);
   68|  9.93k|    dce_propagate(J);
   69|  9.93k|    memset(J->bpropcache, 0, sizeof(J->bpropcache));  /* Invalidate cache. */
   70|  9.93k|  }
   71|  9.93k|}
lj_opt_dce.c:dce_marksnap:
   22|  9.93k|{
   23|  9.93k|  SnapNo i, nsnap = J->cur.nsnap;
   24|  53.4k|  for (i = 0; i < nsnap; i++) {
  ------------------
  |  Branch (24:15): [True: 43.5k, False: 9.93k]
  ------------------
   25|  43.5k|    SnapShot *snap = &J->cur.snap[i];
   26|  43.5k|    SnapEntry *map = &J->cur.snapmap[snap->mapofs];
   27|  43.5k|    MSize n, nent = snap->nent;
   28|   176k|    for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (28:17): [True: 132k, False: 43.5k]
  ------------------
   29|   132k|      IRRef ref = snap_ref(map[n]);
  ------------------
  |  |  220|   132k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
   30|   132k|      if (ref >= REF_FIRST)
  ------------------
  |  Branch (30:11): [True: 96.0k, False: 36.3k]
  ------------------
   31|  96.0k|	irt_setmark(IR(ref)->t);
  ------------------
  |  |  446|  96.0k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
   32|   132k|    }
   33|  43.5k|  }
   34|  9.93k|}
lj_opt_dce.c:dce_propagate:
   38|  9.93k|{
   39|  9.93k|  IRRef1 *pchain[IR__MAX];
   40|  9.93k|  IRRef ins;
   41|  9.93k|  uint32_t i;
   42|  1.01M|  for (i = 0; i < IR__MAX; i++) pchain[i] = &J->chain[i];
  ------------------
  |  Branch (42:15): [True: 1.00M, False: 9.93k]
  ------------------
   43|   474k|  for (ins = J->cur.nins-1; ins >= REF_FIRST; ins--) {
  ------------------
  |  Branch (43:29): [True: 464k, False: 9.93k]
  ------------------
   44|   464k|    IRIns *ir = IR(ins);
  ------------------
  |  |   18|   464k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   45|   464k|    if (irt_ismarked(ir->t)) {
  ------------------
  |  |  445|   464k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 375k, False: 88.6k]
  |  |  ------------------
  ------------------
   46|   375k|      irt_clearmark(ir->t);
  ------------------
  |  |  447|   375k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
   47|   375k|    } else if (!ir_sideeff(ir)) {
  ------------------
  |  Branch (47:16): [True: 9.23k, False: 79.4k]
  ------------------
   48|  9.23k|      *pchain[ir->o] = ir->prev;  /* Reroute original instruction chain. */
   49|  9.23k|      lj_ir_nop(ir);
   50|  9.23k|      continue;
   51|  9.23k|    }
   52|   455k|    pchain[ir->o] = &ir->prev;
   53|   455k|    if (ir->op1 >= REF_FIRST) irt_setmark(IR(ir->op1)->t);
  ------------------
  |  |  446|   370k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  |  Branch (53:9): [True: 370k, False: 84.4k]
  ------------------
   54|   455k|    if (ir->op2 >= REF_FIRST) irt_setmark(IR(ir->op2)->t);
  ------------------
  |  |  446|   122k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  |  Branch (54:9): [True: 122k, False: 332k]
  ------------------
   55|   455k|  }
   56|  9.93k|}

lj_opt_fold:
 2524|  1.08M|{
 2525|  1.08M|  uint32_t key, any;
 2526|  1.08M|  IRRef ref;
 2527|       |
 2528|  1.08M|  if (LJ_UNLIKELY((J->flags & JIT_F_OPT_MASK) != JIT_F_OPT_DEFAULT)) {
  ------------------
  |  |  146|  1.08M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 1.08M]
  |  |  ------------------
  ------------------
 2529|      0|    lj_assertJ(((JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE|JIT_F_OPT_DSE) |
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2530|      0|		JIT_F_OPT_DEFAULT) == JIT_F_OPT_DEFAULT,
 2531|      0|	       "bad JIT_F_OPT_DEFAULT");
 2532|       |    /* Folding disabled? Chain to CSE, but not for loads/stores/allocs. */
 2533|      0|    if (!(J->flags & JIT_F_OPT_FOLD) && irm_kind(lj_ir_mode[fins->o]) == IRM_N)
  ------------------
  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                  if (!(J->flags & JIT_F_OPT_FOLD) && irm_kind(lj_ir_mode[fins->o]) == IRM_N)
  ------------------
  |  |  303|      0|#define irm_kind(m)		((m) & IRM_S)
  |  |  ------------------
  |  |  |  |  291|      0|#define IRM_S			0x60
  |  |  ------------------
  ------------------
                  if (!(J->flags & JIT_F_OPT_FOLD) && irm_kind(lj_ir_mode[fins->o]) == IRM_N)
  ------------------
  |  |  287|      0|#define IRM_N			0x00
  ------------------
  |  Branch (2533:9): [True: 0, False: 0]
  |  Branch (2533:41): [True: 0, False: 0]
  ------------------
 2534|      0|      return lj_opt_cse(J);
 2535|       |
 2536|       |    /* No FOLD, forwarding or CSE? Emit raw IR for loads, except for SLOAD. */
 2537|      0|    if ((J->flags & (JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE)) !=
  ------------------
  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                  if ((J->flags & (JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE)) !=
  ------------------
  |  |   83|      0|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                  if ((J->flags & (JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE)) !=
  ------------------
  |  |   81|      0|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (2537:9): [True: 0, False: 0]
  ------------------
 2538|      0|		    (JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE) &&
  ------------------
  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
              		    (JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE) &&
  ------------------
  |  |   83|      0|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
              		    (JIT_F_OPT_FOLD|JIT_F_OPT_FWD|JIT_F_OPT_CSE) &&
  ------------------
  |  |   81|      0|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
 2539|      0|	irm_kind(lj_ir_mode[fins->o]) == IRM_L && fins->o != IR_SLOAD)
  ------------------
  |  |  303|      0|#define irm_kind(m)		((m) & IRM_S)
  |  |  ------------------
  |  |  |  |  291|      0|#define IRM_S			0x60
  |  |  ------------------
  ------------------
              	irm_kind(lj_ir_mode[fins->o]) == IRM_L && fins->o != IR_SLOAD)
  ------------------
  |  |  290|      0|#define IRM_L			0x40
  ------------------
              	irm_kind(lj_ir_mode[fins->o]) == IRM_L && fins->o != IR_SLOAD)
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2539:2): [True: 0, False: 0]
  |  Branch (2539:44): [True: 0, False: 0]
  ------------------
 2540|      0|      return lj_ir_emit(J);
 2541|       |
 2542|       |    /* No FOLD or DSE? Emit raw IR for stores. */
 2543|      0|    if ((J->flags & (JIT_F_OPT_FOLD|JIT_F_OPT_DSE)) !=
  ------------------
  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                  if ((J->flags & (JIT_F_OPT_FOLD|JIT_F_OPT_DSE)) !=
  ------------------
  |  |   84|      0|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (2543:9): [True: 0, False: 0]
  ------------------
 2544|      0|		    (JIT_F_OPT_FOLD|JIT_F_OPT_DSE) &&
  ------------------
  |  |   80|      0|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
              		    (JIT_F_OPT_FOLD|JIT_F_OPT_DSE) &&
  ------------------
  |  |   84|      0|#define JIT_F_OPT_DSE		(JIT_F_OPT << 4)
  |  |  ------------------
  |  |  |  |   77|      0|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
 2545|      0|	irm_kind(lj_ir_mode[fins->o]) == IRM_S)
  ------------------
  |  |  303|      0|#define irm_kind(m)		((m) & IRM_S)
  |  |  ------------------
  |  |  |  |  291|      0|#define IRM_S			0x60
  |  |  ------------------
  ------------------
              	irm_kind(lj_ir_mode[fins->o]) == IRM_S)
  ------------------
  |  |  291|      0|#define IRM_S			0x60
  ------------------
  |  Branch (2545:2): [True: 0, False: 0]
  ------------------
 2546|      0|      return lj_ir_emit(J);
 2547|      0|  }
 2548|       |
 2549|       |  /* Fold engine start/retry point. */
 2550|  1.11M|retry:
 2551|       |  /* Construct key from opcode and operand opcodes (unless literal/none). */
 2552|  1.11M|  key = ((uint32_t)fins->o << 17);
  ------------------
  |  |  138|  1.11M|#define fins		(&J->fold.ins)
  ------------------
 2553|  1.11M|  if (fins->op1 >= J->cur.nk) {
  ------------------
  |  |  138|  1.11M|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2553:7): [True: 1.07M, False: 41.6k]
  ------------------
 2554|  1.07M|    key += (uint32_t)IR(fins->op1)->o << 10;
  ------------------
  |  |  137|  1.07M|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2555|  1.07M|    *fleft = *IR(fins->op1);
  ------------------
  |  |  139|  1.07M|#define fleft		(J->fold.left)
  ------------------
                  *fleft = *IR(fins->op1);
  ------------------
  |  |  137|  1.07M|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2556|  1.07M|    if (fins->op1 < REF_TRUE)
  ------------------
  |  |  138|  1.07M|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2556:9): [True: 212k, False: 860k]
  ------------------
 2557|   212k|      fleft[1] = IR(fins->op1)[1];
  ------------------
  |  |  139|   212k|#define fleft		(J->fold.left)
  ------------------
                    fleft[1] = IR(fins->op1)[1];
  ------------------
  |  |  137|   212k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2558|  1.07M|  }
 2559|  1.11M|  if (fins->op2 >= J->cur.nk) {
  ------------------
  |  |  138|  1.11M|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2559:7): [True: 668k, False: 445k]
  ------------------
 2560|   668k|    key += (uint32_t)IR(fins->op2)->o;
  ------------------
  |  |  137|   668k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2561|   668k|    *fright = *IR(fins->op2);
  ------------------
  |  |  140|   668k|#define fright		(J->fold.right)
  ------------------
                  *fright = *IR(fins->op2);
  ------------------
  |  |  137|   668k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2562|   668k|    if (fins->op2 < REF_TRUE)
  ------------------
  |  |  138|   668k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2562:9): [True: 389k, False: 278k]
  ------------------
 2563|   389k|      fright[1] = IR(fins->op2)[1];
  ------------------
  |  |  140|   389k|#define fright		(J->fold.right)
  ------------------
                    fright[1] = IR(fins->op2)[1];
  ------------------
  |  |  137|   389k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2564|   668k|  } else {
 2565|   445k|    key += (fins->op2 & 0x3ffu);  /* Literal mask. Must include IRCONV_*MASK. */
  ------------------
  |  |  138|   445k|#define fins		(&J->fold.ins)
  ------------------
 2566|   445k|  }
 2567|       |
 2568|       |  /* Check for a match in order from most specific to least specific. */
 2569|  1.11M|  any = 0;
 2570|  3.73M|  for (;;) {
 2571|  3.73M|    uint32_t k = key | (any & 0x1ffff);
 2572|  3.73M|    uint32_t h = fold_hashkey(k);
  ------------------
  |  | 1171|  3.73M|#define fold_hashkey(k)	(lj_rol(lj_rol((k),21)-(k),14)%1001)
  |  |  ------------------
  |  |  |  |  113|  3.73M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  |  |  ------------------
  ------------------
 2573|  3.73M|    uint32_t fh = fold_hash[h];  /* Lookup key in semi-perfect hash table. */
 2574|  3.73M|    if ((fh & 0xffffff) == k || (fh = fold_hash[h+1], (fh & 0xffffff) == k)) {
  ------------------
  |  Branch (2574:9): [True: 677k, False: 3.05M]
  |  Branch (2574:33): [True: 438k, False: 2.61M]
  ------------------
 2575|  1.11M|      ref = (IRRef)tref_ref(fold_func[fh >> 24](J));
  ------------------
  |  |  504|  1.11M|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
 2576|  1.11M|      if (ref != NEXTFOLD)
  ------------------
  |  Branch (2576:11): [True: 766k, False: 349k]
  ------------------
 2577|   766k|	break;
 2578|  1.11M|    }
 2579|  2.96M|    if (any == 0xfffff)  /* Exhausted folding. Pass on to CSE. */
  ------------------
  |  Branch (2579:9): [True: 348k, False: 2.61M]
  ------------------
 2580|   348k|      return lj_opt_cse(J);
 2581|  2.61M|    any = (any | (any >> 10)) ^ 0xffc00;
 2582|  2.61M|  }
 2583|       |
 2584|       |  /* Return value processing, ordered by frequency. */
 2585|   766k|  if (LJ_LIKELY(ref >= MAX_FOLD))
  ------------------
  |  |  145|   766k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 681k, False: 84.6k]
  |  |  ------------------
  ------------------
 2586|   681k|    return TREF(ref, irt_t(IR(ref)->t));
  ------------------
  |  |  502|   681k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
 2587|  84.6k|  if (ref == RETRYFOLD)
  ------------------
  |  Branch (2587:7): [True: 29.1k, False: 55.4k]
  ------------------
 2588|  29.1k|    goto retry;
 2589|  55.4k|  if (ref == KINTFOLD)
  ------------------
  |  Branch (2589:7): [True: 13.7k, False: 41.7k]
  ------------------
 2590|  13.7k|    return lj_ir_kint(J, fins->i);
  ------------------
  |  |  138|  13.7k|#define fins		(&J->fold.ins)
  ------------------
 2591|  41.7k|  if (ref == FAILFOLD)
  ------------------
  |  Branch (2591:7): [True: 6, False: 41.7k]
  ------------------
 2592|      6|    lj_trace_err(J, LJ_TRERR_GFAIL);
 2593|  41.7k|  lj_assertJ(ref == DROPFOLD, "bad fold result");
  ------------------
  |  |  527|  41.7k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  41.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  41.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 41.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  41.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2594|  41.7k|  return REF_DROP;
 2595|  41.7k|}
lj_opt_cse:
 2601|   537k|{
 2602|       |  /* Avoid narrow to wide store-to-load forwarding stall */
 2603|   537k|  IRRef2 op12 = (IRRef2)fins->op1 + ((IRRef2)fins->op2 << 16);
  ------------------
  |  |  138|   537k|#define fins		(&J->fold.ins)
  ------------------
                IRRef2 op12 = (IRRef2)fins->op1 + ((IRRef2)fins->op2 << 16);
  ------------------
  |  |  138|   537k|#define fins		(&J->fold.ins)
  ------------------
 2604|   537k|  IROp op = fins->o;
  ------------------
  |  |  138|   537k|#define fins		(&J->fold.ins)
  ------------------
 2605|   537k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_CSE)) {
  ------------------
  |  |  145|   537k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 537k, False: 0]
  |  |  ------------------
  ------------------
 2606|       |    /* Limited search for same operands in per-opcode chain. */
 2607|   537k|    IRRef ref = J->chain[op];
 2608|   537k|    IRRef lim = fins->op1;
  ------------------
  |  |  138|   537k|#define fins		(&J->fold.ins)
  ------------------
 2609|   537k|    if (fins->op2 > lim) lim = fins->op2;  /* Relies on lit < REF_BIAS. */
  ------------------
  |  |  138|   537k|#define fins		(&J->fold.ins)
  ------------------
                  if (fins->op2 > lim) lim = fins->op2;  /* Relies on lit < REF_BIAS. */
  ------------------
  |  |  138|  15.5k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2609:9): [True: 15.5k, False: 522k]
  ------------------
 2610|   800k|    while (ref > lim) {
  ------------------
  |  Branch (2610:12): [True: 325k, False: 474k]
  ------------------
 2611|   325k|      if (IR(ref)->op12 == op12)
  ------------------
  |  |  137|   325k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (2611:11): [True: 62.9k, False: 262k]
  ------------------
 2612|  62.9k|	return TREF(ref, irt_t(IR(ref)->t));  /* Common subexpression found. */
  ------------------
  |  |  502|  62.9k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
 2613|   262k|      ref = IR(ref)->prev;
  ------------------
  |  |  137|   262k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2614|   262k|    }
 2615|   537k|  }
 2616|       |  /* Otherwise emit IR (inlined for speed). */
 2617|   474k|  {
 2618|   474k|    IRRef ref = lj_ir_nextins(J);
 2619|   474k|    IRIns *ir = IR(ref);
  ------------------
  |  |  137|   474k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2620|   474k|    ir->prev = J->chain[op];
 2621|   474k|    ir->op12 = op12;
 2622|   474k|    J->chain[op] = (IRRef1)ref;
 2623|   474k|    ir->o = fins->o;
  ------------------
  |  |  138|   474k|#define fins		(&J->fold.ins)
  ------------------
 2624|   474k|    J->guardemit.irt |= fins->t.irt;
  ------------------
  |  |  138|   474k|#define fins		(&J->fold.ins)
  ------------------
 2625|   474k|    return TREF(ref, irt_t((ir->t = fins->t)));
  ------------------
  |  |  502|   474k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
 2626|   537k|  }
 2627|   537k|}
lj_opt_cselim:
 2631|  15.5k|{
 2632|  15.5k|  IRRef ref = J->chain[fins->o];
  ------------------
  |  |  138|  15.5k|#define fins		(&J->fold.ins)
  ------------------
 2633|  15.5k|  IRRef2 op12 = (IRRef2)fins->op1 + ((IRRef2)fins->op2 << 16);
  ------------------
  |  |  138|  15.5k|#define fins		(&J->fold.ins)
  ------------------
                IRRef2 op12 = (IRRef2)fins->op1 + ((IRRef2)fins->op2 << 16);
  ------------------
  |  |  138|  15.5k|#define fins		(&J->fold.ins)
  ------------------
 2634|  49.6k|  while (ref > lim) {
  ------------------
  |  Branch (2634:10): [True: 41.6k, False: 8.02k]
  ------------------
 2635|  41.6k|    if (IR(ref)->op12 == op12)
  ------------------
  |  |  137|  41.6k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (2635:9): [True: 7.47k, False: 34.1k]
  ------------------
 2636|  7.47k|      return ref;
 2637|  34.1k|    ref = IR(ref)->prev;
  ------------------
  |  |  137|  34.1k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2638|  34.1k|  }
 2639|  8.02k|  return lj_ir_emit(J);
 2640|  15.5k|}
lj_opt_fold.c:fold_kfold_numarith:
  180|    157|{
  181|    157|  lua_Number a = knumleft;
  ------------------
  |  |  141|    157|#define knumleft	(ir_knum(fleft)->n)
  |  |  ------------------
  |  |  |  |  592|    157|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    157|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    157|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    157|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 157, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    157|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  182|    157|  lua_Number b = knumright;
  ------------------
  |  |  142|    157|#define knumright	(ir_knum(fright)->n)
  |  |  ------------------
  |  |  |  |  592|    157|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    157|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    157|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    157|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 157, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    157|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|    157|  lua_Number y = lj_vm_foldarith(a, b, fins->o - IR_ADD);
  ------------------
  |  |  138|    157|#define fins		(&J->fold.ins)
  ------------------
  184|    157|  return lj_ir_knum(J, y);
  185|    157|}
lj_opt_fold.c:fold_kfold_numabsneg:
  190|     65|{
  191|     65|  lua_Number a = knumleft;
  ------------------
  |  |  141|     65|#define knumleft	(ir_knum(fleft)->n)
  |  |  ------------------
  |  |  |  |  592|     65|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|     65|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     65|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|     65|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 65, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     65|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  192|     65|  lua_Number y = lj_vm_foldarith(a, a, fins->o - IR_ADD);
  ------------------
  |  |  138|     65|#define fins		(&J->fold.ins)
  ------------------
  193|     65|  return lj_ir_knum(J, y);
  194|     65|}
lj_opt_fold.c:fold_kfold_fpmath:
  209|     49|{
  210|     49|  lua_Number a = knumleft;
  ------------------
  |  |  141|     49|#define knumleft	(ir_knum(fleft)->n)
  |  |  ------------------
  |  |  |  |  592|     49|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|     49|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     49|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|     49|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 49, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     49|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  211|     49|  lua_Number y = lj_vm_foldfpm(a, fins->op2);
  ------------------
  |  |  138|     49|#define fins		(&J->fold.ins)
  ------------------
  212|     49|  return lj_ir_knum(J, y);
  213|     49|}
lj_opt_fold.c:fold_kfold_fpcall1:
  217|     15|{
  218|     15|  const CCallInfo *ci = &lj_ir_callinfo[fins->op2];
  ------------------
  |  |  138|     15|#define fins		(&J->fold.ins)
  ------------------
  219|     15|  if (CCI_TYPE(ci) == IRT_NUM) {
  ------------------
  |  |   24|     15|#define CCI_TYPE(ci)		(((ci)->flags>>CCI_OTSHIFT) & IRT_TYPE)
  |  |  ------------------
  |  |  |  |   22|     15|#define CCI_OTSHIFT		16
  |  |  ------------------
  ------------------
  |  Branch (219:7): [True: 15, False: 0]
  ------------------
  220|     15|    double y = ((double (*)(double))ci->func)(knumleft);
  ------------------
  |  |  141|     15|#define knumleft	(ir_knum(fleft)->n)
  |  |  ------------------
  |  |  |  |  592|     15|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|     15|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     15|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|     15|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 15, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     15|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  221|      0|    return lj_ir_knum(J, y);
  222|     15|  }
  223|      0|  return NEXTFOLD;
  224|     15|}
lj_opt_fold.c:fold_kfold_fpcall2:
  228|     10|{
  229|     10|  if (irref_isk(fleft->op1) && irref_isk(fleft->op2)) {
  ------------------
  |  |  485|     20|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
                if (irref_isk(fleft->op1) && irref_isk(fleft->op2)) {
  ------------------
  |  |  485|     10|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 10, False: 0]
  |  |  ------------------
  ------------------
  230|     10|    const CCallInfo *ci = &lj_ir_callinfo[fins->op2];
  ------------------
  |  |  138|     10|#define fins		(&J->fold.ins)
  ------------------
  231|     10|    double a = ir_knum(IR(fleft->op1))->n;
  ------------------
  |  |  592|     10|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|     10|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     10|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     10|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     10|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  232|     10|    double b = ir_knum(IR(fleft->op2))->n;
  ------------------
  |  |  592|     10|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|     10|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     10|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     10|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 10, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     10|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  233|      0|    double y = ((double (*)(double, double))ci->func)(a, b);
  234|     10|    return lj_ir_knum(J, y);
  235|     10|  }
  236|      0|  return NEXTFOLD;
  237|     10|}
lj_opt_fold.c:fold_kfold_numpow:
  241|     14|{
  242|     14|  return lj_ir_knum(J, lj_vm_foldarith(knumleft, knumright, IR_POW - IR_ADD));
  ------------------
  |  |  141|     14|#define knumleft	(ir_knum(fleft)->n)
  |  |  ------------------
  |  |  |  |  592|     14|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|     14|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     14|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|     14|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 14, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     14|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return lj_ir_knum(J, lj_vm_foldarith(knumleft, knumright, IR_POW - IR_ADD));
  ------------------
  |  |  142|     14|#define knumright	(ir_knum(fright)->n)
  |  |  ------------------
  |  |  |  |  592|     14|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|     14|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     14|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|     14|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 14, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     14|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  243|     14|}
lj_opt_fold.c:fold_kfold_numcomp:
  257|     16|{
  258|     16|  return CONDFOLD(lj_ir_numcmp(knumleft, knumright, (IROp)fins->o));
  ------------------
  |  |  117|     64|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  |  |  ------------------
  |  |  |  Branch (117:49): [True: 16, False: 0]
  |  |  |  Branch (117:49): [True: 16, False: 0]
  |  |  ------------------
  ------------------
  259|     16|}
lj_opt_fold.c:fold_kfold_intarith:
  307|    106|{
  308|    106|  return INTFOLD(kfold_intop(fleft->i, fright->i, (IROp)fins->o));
  ------------------
  |  |  115|    106|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  ------------------
  309|    106|}
lj_opt_fold.c:kfold_intop:
  269|  9.64k|{
  270|  9.64k|  switch (op) {
  271|  9.59k|  case IR_ADD: k1 += k2; break;
  ------------------
  |  Branch (271:3): [True: 9.59k, False: 48]
  ------------------
  272|      0|  case IR_SUB: k1 -= k2; break;
  ------------------
  |  Branch (272:3): [True: 0, False: 9.64k]
  ------------------
  273|      0|  case IR_MUL: k1 *= k2; break;
  ------------------
  |  Branch (273:3): [True: 0, False: 9.64k]
  ------------------
  274|     14|  case IR_MOD: k1 = lj_vm_modi(k1, k2); break;
  ------------------
  |  Branch (274:3): [True: 14, False: 9.62k]
  ------------------
  275|      0|  case IR_NEG: k1 = (int32_t)(~(uint32_t)k1+1u); break;
  ------------------
  |  Branch (275:3): [True: 0, False: 9.64k]
  ------------------
  276|      0|  case IR_BAND: k1 &= k2; break;
  ------------------
  |  Branch (276:3): [True: 0, False: 9.64k]
  ------------------
  277|      0|  case IR_BOR: k1 |= k2; break;
  ------------------
  |  Branch (277:3): [True: 0, False: 9.64k]
  ------------------
  278|      0|  case IR_BXOR: k1 ^= k2; break;
  ------------------
  |  Branch (278:3): [True: 0, False: 9.64k]
  ------------------
  279|      0|  case IR_BSHL: k1 <<= (k2 & 31); break;
  ------------------
  |  Branch (279:3): [True: 0, False: 9.64k]
  ------------------
  280|      0|  case IR_BSHR: k1 = (int32_t)((uint32_t)k1 >> (k2 & 31)); break;
  ------------------
  |  Branch (280:3): [True: 0, False: 9.64k]
  ------------------
  281|      0|  case IR_BSAR: k1 >>= (k2 & 31); break;
  ------------------
  |  Branch (281:3): [True: 0, False: 9.64k]
  ------------------
  282|      0|  case IR_BROL: k1 = (int32_t)lj_rol((uint32_t)k1, (k2 & 31)); break;
  ------------------
  |  |  113|      0|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  |  Branch (282:3): [True: 0, False: 9.64k]
  ------------------
  283|      0|  case IR_BROR: k1 = (int32_t)lj_ror((uint32_t)k1, (k2 & 31)); break;
  ------------------
  |  |  114|      0|#define lj_ror(x, n)	(((x)<<(-(int)(n)&(8*sizeof(x)-1))) | ((x)>>(n)))
  ------------------
  |  Branch (283:3): [True: 0, False: 9.64k]
  ------------------
  284|     17|  case IR_MIN: k1 = k1 < k2 ? k1 : k2; break;
  ------------------
  |  Branch (284:3): [True: 17, False: 9.62k]
  |  Branch (284:21): [True: 8, False: 9]
  ------------------
  285|     17|  case IR_MAX: k1 = k1 > k2 ? k1 : k2; break;
  ------------------
  |  Branch (285:3): [True: 17, False: 9.62k]
  |  Branch (285:21): [True: 9, False: 8]
  ------------------
  286|      0|  default: lj_assertX(0, "bad IR op %d", op); break;
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  |  Branch (286:3): [True: 0, False: 9.64k]
  ------------------
  287|  9.64k|  }
  288|  9.64k|  return k1;
  289|  9.64k|}
lj_opt_fold.c:fold_kfold_intovarith:
  315|  4.18k|{
  316|  4.18k|  lua_Number n = lj_vm_foldarith((lua_Number)fleft->i, (lua_Number)fright->i,
  ------------------
  |  |  139|  4.18k|#define fleft		(J->fold.left)
  ------------------
                lua_Number n = lj_vm_foldarith((lua_Number)fleft->i, (lua_Number)fright->i,
  ------------------
  |  |  140|  4.18k|#define fright		(J->fold.right)
  ------------------
  317|  4.18k|				 fins->o - IR_ADDOV);
  ------------------
  |  |  138|  4.18k|#define fins		(&J->fold.ins)
  ------------------
  318|  4.18k|  int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|  4.18k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  319|  4.18k|  if (n != (lua_Number)k)
  ------------------
  |  Branch (319:7): [True: 0, False: 4.18k]
  ------------------
  320|      0|    return FAILFOLD;
  321|  4.18k|  return INTFOLD(k);
  ------------------
  |  |  115|  4.18k|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  ------------------
  322|  4.18k|}
lj_opt_fold.c:fold_kfold_intcomp:
  346|  1.00k|{
  347|  1.00k|  int32_t a = fleft->i, b = fright->i;
  ------------------
  |  |  139|  1.00k|#define fleft		(J->fold.left)
  ------------------
                int32_t a = fleft->i, b = fright->i;
  ------------------
  |  |  140|  1.00k|#define fright		(J->fold.right)
  ------------------
  348|  1.00k|  switch ((IROp)fins->o) {
  ------------------
  |  |  138|  1.00k|#define fins		(&J->fold.ins)
  ------------------
  349|      0|  case IR_LT: return CONDFOLD(a < b);
  ------------------
  |  |  117|      0|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (349:3): [True: 0, False: 1.00k]
  ------------------
  350|     42|  case IR_GE: return CONDFOLD(a >= b);
  ------------------
  |  |  117|     42|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (350:3): [True: 42, False: 963]
  ------------------
  351|    722|  case IR_LE: return CONDFOLD(a <= b);
  ------------------
  |  |  117|    722|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (351:3): [True: 722, False: 283]
  ------------------
  352|     13|  case IR_GT: return CONDFOLD(a > b);
  ------------------
  |  |  117|     13|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (352:3): [True: 13, False: 992]
  ------------------
  353|      0|  case IR_ULT: return CONDFOLD((uint32_t)a < (uint32_t)b);
  ------------------
  |  |  117|      0|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (353:3): [True: 0, False: 1.00k]
  ------------------
  354|      0|  case IR_UGE: return CONDFOLD((uint32_t)a >= (uint32_t)b);
  ------------------
  |  |  117|      0|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (354:3): [True: 0, False: 1.00k]
  ------------------
  355|     35|  case IR_ULE: return CONDFOLD((uint32_t)a <= (uint32_t)b);
  ------------------
  |  |  117|     35|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (355:3): [True: 35, False: 970]
  ------------------
  356|    193|  case IR_ABC:
  ------------------
  |  Branch (356:3): [True: 193, False: 812]
  ------------------
  357|    193|  case IR_UGT: return CONDFOLD((uint32_t)a > (uint32_t)b);
  ------------------
  |  |  117|    193|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  |  Branch (357:3): [True: 0, False: 1.00k]
  ------------------
  358|      0|  default: lj_assertJ(0, "bad IR op %d", fins->o); return FAILFOLD;
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (358:3): [True: 0, False: 1.00k]
  ------------------
  359|  1.00k|  }
  360|  1.00k|}
lj_opt_fold.c:fold_kfold_intcomp0:
  364|      7|{
  365|      7|  if (fright->i == 0)
  ------------------
  |  |  140|      7|#define fright		(J->fold.right)
  ------------------
  |  Branch (365:7): [True: 7, False: 0]
  ------------------
  366|      7|    return DROPFOLD;
  367|      0|  return NEXTFOLD;
  368|      7|}
lj_opt_fold.c:fold_kfold_strref:
  528|  9.12k|{
  529|  18.2k|  GCstr *str = ir_kstr(fleft);
  ------------------
  |  |  588|  9.12k|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|  9.12k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  18.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  9.12k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  18.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.12k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 9.12k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  9.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 9.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  530|  9.12k|  lj_assertJ((MSize)fright->i <= str->len, "bad string ref");
  ------------------
  |  |  527|  9.12k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  9.12k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 9.12k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  9.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  531|  9.12k|  return lj_ir_kkptr(J, (char *)strdata(str) + fright->i);
  ------------------
  |  |   76|  9.12k|#define lj_ir_kkptr(J, ptr)	lj_ir_kptr_(J, IR_KKPTR, (ptr))
  ------------------
  532|  18.2k|}
lj_opt_fold.c:fold_bufhdr_merge:
  589|  63.7k|{
  590|  63.7k|  return fins->op2 == IRBUFHDR_WRITE ? CSEFOLD : EMITFOLD;
  ------------------
  |  |  138|  63.7k|#define fins		(&J->fold.ins)
  ------------------
                return fins->op2 == IRBUFHDR_WRITE ? CSEFOLD : EMITFOLD;
  ------------------
  |  |  249|  63.7k|#define IRBUFHDR_WRITE		2	/* Write to string buffer. */
  ------------------
                return fins->op2 == IRBUFHDR_WRITE ? CSEFOLD : EMITFOLD;
  ------------------
  |  |  120|      0|#define CSEFOLD		(lj_opt_cse(J))
  ------------------
                return fins->op2 == IRBUFHDR_WRITE ? CSEFOLD : EMITFOLD;
  ------------------
  |  |  121|  63.7k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  |  Branch (590:10): [True: 0, False: 63.7k]
  ------------------
  591|  63.7k|}
lj_opt_fold.c:fold_bufput_bufstr:
  595|  34.8k|{
  596|  34.8k|  if ((J->flags & JIT_F_OPT_FWD)) {
  ------------------
  |  |   83|  34.8k|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  ------------------
  |  |  |  |   77|  34.8k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (596:7): [True: 34.8k, False: 0]
  ------------------
  597|  34.8k|    IRRef hdr = fright->op2;
  ------------------
  |  |  140|  34.8k|#define fright		(J->fold.right)
  ------------------
  598|       |    /* New buffer, no other buffer op inbetween and same buffer? */
  599|  34.8k|    if (fleft->o == IR_BUFHDR && fleft->op2 == IRBUFHDR_RESET &&
  ------------------
  |  |  139|  34.8k|#define fleft		(J->fold.left)
  ------------------
                  if (fleft->o == IR_BUFHDR && fleft->op2 == IRBUFHDR_RESET &&
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
                  if (fleft->o == IR_BUFHDR && fleft->op2 == IRBUFHDR_RESET &&
  ------------------
  |  |  247|  34.8k|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
  |  Branch (599:9): [True: 0, False: 34.8k]
  |  Branch (599:34): [True: 0, False: 0]
  ------------------
  600|  34.8k|	fleft->prev == hdr &&
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
  |  Branch (600:2): [True: 0, False: 0]
  ------------------
  601|  34.8k|	fleft->op1 == IR(hdr)->op1 &&
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
              	fleft->op1 == IR(hdr)->op1 &&
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (601:2): [True: 0, False: 0]
  ------------------
  602|  34.8k|	!(irt_isphi(fright->t) && IR(hdr)->prev) &&
  ------------------
  |  |  448|      0|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	!(irt_isphi(fright->t) && IR(hdr)->prev) &&
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (602:28): [True: 0, False: 0]
  ------------------
  603|  34.8k|	(!LJ_HASBUFFER || J->chain[IR_CALLA] < hdr)) {
  ------------------
  |  |  592|      0|#define LJ_HASBUFFER		1
  ------------------
  |  Branch (603:3): [Folded - Ignored]
  |  Branch (603:20): [True: 0, False: 0]
  ------------------
  604|      0|      IRRef ref = fins->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
  605|      0|      IR(ref)->op2 = IRBUFHDR_APPEND;  /* Modify BUFHDR. */
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                    IR(ref)->op2 = IRBUFHDR_APPEND;  /* Modify BUFHDR. */
  ------------------
  |  |  248|      0|#define IRBUFHDR_APPEND		1	/* Append to buffer. */
  ------------------
  606|      0|      IR(ref)->op1 = fright->op1;
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                    IR(ref)->op1 = fright->op1;
  ------------------
  |  |  140|      0|#define fright		(J->fold.right)
  ------------------
  607|      0|      return ref;
  608|      0|    }
  609|       |    /* Replay puts to global temporary buffer. */
  610|  34.8k|    if (IR(hdr)->op2 == IRBUFHDR_RESET && !irt_isphi(fright->t)) {
  ------------------
  |  |  137|  34.8k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                  if (IR(hdr)->op2 == IRBUFHDR_RESET && !irt_isphi(fright->t)) {
  ------------------
  |  |  247|  69.6k|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
                  if (IR(hdr)->op2 == IRBUFHDR_RESET && !irt_isphi(fright->t)) {
  ------------------
  |  |  448|  34.8k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (610:9): [True: 34.8k, False: 0]
  |  Branch (610:43): [True: 34.8k, False: 0]
  ------------------
  611|  34.8k|      IRIns *ir = IR(fright->op1);
  ------------------
  |  |  137|  34.8k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  612|       |      /* For now only handle single string.reverse .lower .upper .rep. */
  613|  34.8k|      if (ir->o == IR_CALLL &&
  ------------------
  |  Branch (613:11): [True: 0, False: 34.8k]
  ------------------
  614|  34.8k|	  ir->op2 >= IRCALL_lj_buf_putstr_reverse &&
  ------------------
  |  Branch (614:4): [True: 0, False: 0]
  ------------------
  615|  34.8k|	  ir->op2 <= IRCALL_lj_buf_putstr_rep) {
  ------------------
  |  Branch (615:4): [True: 0, False: 0]
  ------------------
  616|      0|	IRIns *carg1 = IR(ir->op1);
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  617|      0|	if (ir->op2 == IRCALL_lj_buf_putstr_rep) {
  ------------------
  |  Branch (617:6): [True: 0, False: 0]
  ------------------
  618|      0|	  IRIns *carg2 = IR(carg1->op1);
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  619|      0|	  if (carg2->op1 == hdr) {
  ------------------
  |  Branch (619:8): [True: 0, False: 0]
  ------------------
  620|      0|	    return lj_ir_call(J, ir->op2, fins->op1, carg2->op2, carg1->op2);
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
  621|      0|	  }
  622|      0|	} else if (carg1->op1 == hdr) {
  ------------------
  |  Branch (622:13): [True: 0, False: 0]
  ------------------
  623|      0|	  return lj_ir_call(J, ir->op2, fins->op1, carg1->op2);
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
  624|      0|	}
  625|      0|      }
  626|  34.8k|    }
  627|  34.8k|  }
  628|  34.8k|  return EMITFOLD;  /* Always emit, CSE later. */
  ------------------
  |  |  121|  34.8k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  629|  34.8k|}
lj_opt_fold.c:fold_bufput_kgc:
  633|  74.9k|{
  634|  74.9k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && fright->o == IR_KGC) {
  ------------------
  |  |  145|   149k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 74.9k, False: 0]
  |  |  ------------------
  ------------------
                if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && fright->o == IR_KGC) {
  ------------------
  |  |  140|  74.9k|#define fright		(J->fold.right)
  ------------------
  |  Branch (634:47): [True: 35.5k, False: 39.4k]
  ------------------
  635|  71.0k|    GCstr *s2 = ir_kstr(fright);
  ------------------
  |  |  588|  35.5k|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|  35.5k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  71.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  35.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  71.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 35.5k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 35.5k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  35.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 35.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  636|  35.5k|    if (s2->len == 0) {  /* Empty string? */
  ------------------
  |  Branch (636:9): [True: 0, False: 35.5k]
  ------------------
  637|      0|      return LEFTFOLD;
  ------------------
  |  |  118|      0|#define LEFTFOLD	(J->fold.ins.op1)
  ------------------
  638|  35.5k|    } else {
  639|  35.5k|      if (fleft->o == IR_BUFPUT && irref_isk(fleft->op2) &&
  ------------------
  |  |  139|  35.5k|#define fleft		(J->fold.left)
  ------------------
                    if (fleft->o == IR_BUFPUT && irref_isk(fleft->op2) &&
  ------------------
  |  |  485|  53.1k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 17.6k]
  |  |  ------------------
  ------------------
  |  Branch (639:11): [True: 17.6k, False: 17.8k]
  ------------------
  640|  35.5k|	  !irt_isphi(fleft->t)) {  /* Join two constant string puts in a row. */
  ------------------
  |  |  448|      0|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (640:4): [True: 0, False: 0]
  ------------------
  641|      0|	GCstr *s1 = ir_kstr(IR(fleft->op2));
  ------------------
  |  |  588|      0|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  642|      0|	IRRef kref = lj_ir_kstr(J, lj_buf_cat2str(J->L, s1, s2));
  ------------------
  |  |   72|      0|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  643|       |	/* lj_ir_kstr() may realloc the IR and invalidates any IRIns *. */
  644|      0|	IR(fins->op1)->op2 = kref;  /* Modify previous BUFPUT. */
  ------------------
  |  |  137|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  645|      0|	return fins->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
  646|      0|      }
  647|  35.5k|    }
  648|  71.0k|  }
  649|  74.9k|  return EMITFOLD;  /* Always emit, CSE later. */
  ------------------
  |  |  121|  74.9k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  650|  74.9k|}
lj_opt_fold.c:fold_bufstr_kfold_cse:
  654|  63.7k|{
  655|  63.7k|  lj_assertJ(fleft->o == IR_BUFHDR || fleft->o == IR_BUFPUT ||
  ------------------
  |  |  527|  63.7k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  63.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   210k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 63.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 44.0k, False: 19.6k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 19.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  63.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  656|  63.7k|	     fleft->o == IR_CALLL,
  657|  63.7k|	     "bad buffer constructor IR op %d", fleft->o);
  658|  63.7k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD)) {
  ------------------
  |  |  145|  63.7k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 63.7k, False: 0]
  |  |  ------------------
  ------------------
  659|  63.7k|    if (fleft->o == IR_BUFHDR) {  /* No put operations? */
  ------------------
  |  |  139|  63.7k|#define fleft		(J->fold.left)
  ------------------
  |  Branch (659:9): [True: 0, False: 63.7k]
  ------------------
  660|      0|      if (fleft->op2 == IRBUFHDR_RESET)  /* Empty buffer? */
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
                    if (fleft->op2 == IRBUFHDR_RESET)  /* Empty buffer? */
  ------------------
  |  |  247|      0|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
  |  Branch (660:11): [True: 0, False: 0]
  ------------------
  661|      0|	return lj_ir_kstr(J, &J2G(J)->strempty);
  ------------------
  |  |   72|      0|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  662|      0|      fins->op1 = fleft->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                    fins->op1 = fleft->op1;
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
  663|      0|      fins->op2 = fleft->prev;  /* Relies on checks in bufput_append. */
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                    fins->op2 = fleft->prev;  /* Relies on checks in bufput_append. */
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
  664|      0|      return CSEFOLD;
  ------------------
  |  |  120|      0|#define CSEFOLD		(lj_opt_cse(J))
  ------------------
  665|  63.7k|    } else if (fleft->o == IR_BUFPUT) {
  ------------------
  |  |  139|  63.7k|#define fleft		(J->fold.left)
  ------------------
  |  Branch (665:16): [True: 44.0k, False: 19.6k]
  ------------------
  666|  44.0k|      IRIns *irb = IR(fleft->op1);
  ------------------
  |  |  137|  44.0k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  667|  44.0k|      if (irb->o == IR_BUFHDR && irb->op2 == IRBUFHDR_RESET)
  ------------------
  |  |  247|     64|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
  |  Branch (667:11): [True: 64, False: 43.9k]
  |  Branch (667:34): [True: 64, False: 0]
  ------------------
  668|     64|	return fleft->op2;  /* Shortcut for a single put operation. */
  ------------------
  |  |  139|     64|#define fleft		(J->fold.left)
  ------------------
  669|  44.0k|    }
  670|  63.7k|  }
  671|       |  /* Try to CSE the whole chain. */
  672|  63.6k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_CSE)) {
  ------------------
  |  |  145|  63.6k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 63.6k, False: 0]
  |  |  ------------------
  ------------------
  673|  63.6k|    IRRef ref = J->chain[IR_BUFSTR];
  674|   459k|    while (ref) {
  ------------------
  |  Branch (674:12): [True: 395k, False: 63.6k]
  ------------------
  675|   395k|      IRIns *irs = IR(ref), *ira = fleft, *irb = IR(irs->op1);
  ------------------
  |  |  137|   395k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                    IRIns *irs = IR(ref), *ira = fleft, *irb = IR(irs->op1);
  ------------------
  |  |  139|   395k|#define fleft		(J->fold.left)
  ------------------
                    IRIns *irs = IR(ref), *ira = fleft, *irb = IR(irs->op1);
  ------------------
  |  |  137|   395k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  676|   474k|      while (ira->o == irb->o && ira->op2 == irb->op2) {
  ------------------
  |  Branch (676:14): [True: 300k, False: 174k]
  |  Branch (676:34): [True: 78.3k, False: 221k]
  ------------------
  677|  78.3k|	lj_assertJ(ira->o == IR_BUFHDR || ira->o == IR_BUFPUT ||
  ------------------
  |  |  527|  78.3k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  78.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   339k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 78.3k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 52.2k, False: 26.1k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 26.1k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  78.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  678|  78.3k|		   ira->o == IR_CALLL || ira->o == IR_CARG,
  679|  78.3k|		   "bad buffer constructor IR op %d", ira->o);
  680|  78.3k|	if (ira->o == IR_BUFHDR && ira->op2 == IRBUFHDR_RESET)
  ------------------
  |  |  247|      0|#define IRBUFHDR_RESET		0	/* Reset buffer. */
  ------------------
  |  Branch (680:6): [True: 0, False: 78.3k]
  |  Branch (680:29): [True: 0, False: 0]
  ------------------
  681|      0|	  return ref;  /* CSE succeeded. */
  682|  78.3k|	if (ira->o == IR_CALLL && ira->op2 == IRCALL_lj_buf_puttab)
  ------------------
  |  Branch (682:6): [True: 26.1k, False: 52.2k]
  |  Branch (682:28): [True: 0, False: 26.1k]
  ------------------
  683|      0|	  break;
  684|  78.3k|	ira = IR(ira->op1);
  ------------------
  |  |  137|  78.3k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  685|  78.3k|	irb = IR(irb->op1);
  ------------------
  |  |  137|  78.3k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  686|  78.3k|      }
  687|   395k|      ref = irs->prev;
  688|   395k|    }
  689|  63.6k|  }
  690|  63.6k|  return EMITFOLD;  /* No CSE possible. */
  ------------------
  |  |  121|  63.6k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  691|  63.6k|}
lj_opt_fold.c:fold_bufput_kfold_fmt:
  736|  19.9k|{
  737|  19.9k|  IRIns *irc = IR(fleft->op1);
  ------------------
  |  |  137|  19.9k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  738|  19.9k|  lj_assertJ(irref_isk(irc->op2), "SFormat must be const");
  ------------------
  |  |  527|  19.9k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  19.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  19.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 19.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  19.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  739|  19.9k|  if (irref_isk(fleft->op2)) {
  ------------------
  |  |  485|  19.9k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 64, False: 19.8k]
  |  |  ------------------
  ------------------
  740|     64|    SFormat sf = (SFormat)IR(irc->op2)->i;
  ------------------
  |  |  137|     64|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  741|     64|    IRIns *ira = IR(fleft->op2);
  ------------------
  |  |  137|     64|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  742|     64|    SBuf *sb = lj_buf_tmp_(J->L);
  743|     64|    switch (fins->op2) {
  ------------------
  |  |  138|     64|#define fins		(&J->fold.ins)
  ------------------
  744|      0|    case IRCALL_lj_strfmt_putfxint:
  ------------------
  |  Branch (744:5): [True: 0, False: 64]
  ------------------
  745|      0|      sb = lj_strfmt_putfxint(sb, sf, ir_k64(ira)->u64);
  ------------------
  |  |  594|      0|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  746|      0|      break;
  747|      0|    case IRCALL_lj_strfmt_putfstr:
  ------------------
  |  Branch (747:5): [True: 0, False: 64]
  ------------------
  748|      0|      sb = lj_strfmt_putfstr(sb, sf, ir_kstr(ira));
  ------------------
  |  |  588|      0|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|      0|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  749|      0|      break;
  750|      0|    case IRCALL_lj_strfmt_putfchar:
  ------------------
  |  Branch (750:5): [True: 0, False: 64]
  ------------------
  751|      0|      sb = lj_strfmt_putfchar(sb, sf, ira->i);
  752|      0|      break;
  753|      0|    case IRCALL_lj_strfmt_putfnum_int:
  ------------------
  |  Branch (753:5): [True: 0, False: 64]
  ------------------
  754|      0|    case IRCALL_lj_strfmt_putfnum_uint:
  ------------------
  |  Branch (754:5): [True: 0, False: 64]
  ------------------
  755|     64|    case IRCALL_lj_strfmt_putfnum:
  ------------------
  |  Branch (755:5): [True: 64, False: 0]
  ------------------
  756|     64|    default: {
  ------------------
  |  Branch (756:5): [True: 0, False: 64]
  ------------------
  757|     64|      const CCallInfo *ci = &lj_ir_callinfo[fins->op2];
  ------------------
  |  |  138|     64|#define fins		(&J->fold.ins)
  ------------------
  758|     64|      sb = ((SBuf * (*)(SBuf *, SFormat, lua_Number))ci->func)(sb, sf,
  759|     64|							 ir_knum(ira)->n);
  ------------------
  |  |  592|     64|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|     64|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     64|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     64|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 64, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     64|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  760|      0|      break;
  761|     64|      }
  762|     64|    }
  763|     64|    fins->o = IR_BUFPUT;
  ------------------
  |  |  138|     64|#define fins		(&J->fold.ins)
  ------------------
  764|     64|    fins->op1 = irc->op1;
  ------------------
  |  |  138|     64|#define fins		(&J->fold.ins)
  ------------------
  765|     64|    fins->op2 = lj_ir_kstr(J, lj_buf_tostr(sb));
  ------------------
  |  |  138|     64|#define fins		(&J->fold.ins)
  ------------------
                  fins->op2 = lj_ir_kstr(J, lj_buf_tostr(sb));
  ------------------
  |  |   72|     64|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|     64|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  766|     64|    return RETRYFOLD;
  767|     64|  }
  768|  19.8k|  return EMITFOLD;  /* Always emit, CSE later. */
  ------------------
  |  |  121|  19.8k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  769|  19.9k|}
lj_opt_fold.c:fold_kfold_conv_kint_num:
  832|  48.6k|{
  833|  48.6k|  return lj_ir_knum(J, (lua_Number)fleft->i);
  ------------------
  |  |  139|  48.6k|#define fleft		(J->fold.left)
  ------------------
  834|  48.6k|}
lj_opt_fold.c:fold_kfold_conv_knum_int_num:
  889|     34|{
  890|     34|  lua_Number n = knumleft;
  ------------------
  |  |  141|     34|#define knumleft	(ir_knum(fleft)->n)
  |  |  ------------------
  |  |  |  |  592|     34|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|     34|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     34|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|     34|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 34, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     34|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  891|     34|  int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|     34|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  892|     34|  if (irt_isguard(fins->t) && n != (lua_Number)k) {
  ------------------
  |  |  444|     68|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 34, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (892:31): [True: 0, False: 34]
  ------------------
  893|       |    /* We're about to create a guard which always fails, like CONV +1.5.
  894|       |    ** Some pathological loops cause this during LICM, e.g.:
  895|       |    **   local x,k,t = 0,1.5,{1,[1.5]=2}
  896|       |    **   for i=1,200 do x = x+ t[k]; k = k == 1 and 1.5 or 1 end
  897|       |    **   assert(x == 300)
  898|       |    */
  899|      0|    return FAILFOLD;
  900|      0|  }
  901|     34|  return INTFOLD(k);
  ------------------
  |  |  115|     34|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  ------------------
  902|     34|}
lj_opt_fold.c:fold_kfold_tostr_kint:
  937|     25|{
  938|     25|  return lj_ir_kstr(J, fins->op2 == IRTOSTR_INT ?
  ------------------
  |  |   72|     25|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|     50|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 25, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  939|     25|		       lj_strfmt_int(J->L, fleft->i) :
  940|     25|		       lj_strfmt_char(J->L, fleft->i));
  941|     25|}
lj_opt_fold.c:fold_kfold_strto:
  945|     64|{
  946|     64|  TValue n;
  947|    128|  if (lj_strscan_num(ir_kstr(fleft), &n))
  ------------------
  |  |  588|     64|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|     64|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    128|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|     64|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    128|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 64, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 64, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|     64|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 64, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (947:7): [True: 64, False: 0]
  ------------------
  948|     64|    return lj_ir_knum(J, numV(&n));
  ------------------
  |  |  866|     64|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|     64|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     64|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     64|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 64, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     64|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  949|      0|  return FAILFOLD;
  950|     64|}
lj_opt_fold.c:fold_kfold_kref:
  971|  40.4k|{
  972|  40.4k|  return CONDFOLD((fins->op1 == fins->op2) ^ (fins->o == IR_NE));
  ------------------
  |  |  117|  40.4k|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
  973|  40.4k|}
lj_opt_fold.c:fold_simplify_numsub_k:
 1042|  14.6k|{
 1043|  29.2k|  if (ir_knum(fright)->u64 == 0)  /* x - (+0) ==> x */
  ------------------
  |  |  592|  14.6k|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|  14.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  14.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  14.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 14.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  14.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1043:7): [True: 57, False: 14.5k]
  ------------------
 1044|     57|    return LEFTFOLD;
  ------------------
  |  |  118|     57|#define LEFTFOLD	(J->fold.ins.op1)
  ------------------
 1045|  14.5k|  return NEXTFOLD;
 1046|  14.6k|}
lj_opt_fold.c:fold_simplify_nummuldiv_k:
 1069|  30.6k|{
 1070|  30.6k|  lua_Number n = knumright;
  ------------------
  |  |  142|  30.6k|#define knumright	(ir_knum(fright)->n)
  |  |  ------------------
  |  |  |  |  592|  30.6k|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  30.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  30.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  30.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 30.6k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  30.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1071|  30.6k|  if (n == 1.0) {  /* x o 1 ==> x */
  ------------------
  |  Branch (1071:7): [True: 35, False: 30.5k]
  ------------------
 1072|     35|    return LEFTFOLD;
  ------------------
  |  |  118|     35|#define LEFTFOLD	(J->fold.ins.op1)
  ------------------
 1073|  30.5k|  } else if (n == -1.0) {  /* x o -1 ==> -x */
  ------------------
  |  Branch (1073:14): [True: 0, False: 30.5k]
  ------------------
 1074|      0|    IRRef op1 = fins->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1075|      0|    fins->op2 = (IRRef1)lj_ir_ksimd(J, LJ_KSIMD_NEG);  /* Modifies fins. */
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                  fins->op2 = (IRRef1)lj_ir_ksimd(J, LJ_KSIMD_NEG);  /* Modifies fins. */
  ------------------
  |  |   85|      0|  lj_ir_ggfload(J, IRT_NUM, (uintptr_t)LJ_KSIMD(J, idx) - (uintptr_t)J2GG(J))
  |  |  ------------------
  |  |  |  |  403|      0|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  |  |  ------------------
  |  |                 lj_ir_ggfload(J, IRT_NUM, (uintptr_t)LJ_KSIMD(J, idx) - (uintptr_t)J2GG(J))
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1076|      0|    fins->op1 = op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1077|      0|    fins->o = IR_NEG;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1078|      0|    return RETRYFOLD;
 1079|  30.5k|  } else if (fins->o == IR_MUL && n == 2.0) {  /* x * 2 ==> x + x */
  ------------------
  |  |  138|  30.5k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1079:14): [True: 10.2k, False: 20.3k]
  |  Branch (1079:35): [True: 0, False: 10.2k]
  ------------------
 1080|      0|    fins->o = IR_ADD;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1081|      0|    fins->op2 = fins->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                  fins->op2 = fins->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1082|      0|    return RETRYFOLD;
 1083|  30.5k|  } else if (fins->o == IR_DIV) {  /* x / 2^k ==> x * 2^-k */
  ------------------
  |  |  138|  30.5k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1083:14): [True: 20.3k, False: 10.2k]
  ------------------
 1084|  20.3k|    uint64_t u = ir_knum(fright)->u64;
  ------------------
  |  |  592|  20.3k|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|  20.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  20.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 20.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  20.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1085|      0|    uint32_t ex = ((uint32_t)(u >> 52) & 0x7ff);
 1086|  20.3k|    if ((u & U64x(000fffff,ffffffff)) == 0 && ex - 1 < 0x7fd) {
  ------------------
  |  |   94|  20.3k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (1086:9): [True: 2.95k, False: 17.3k]
  |  Branch (1086:47): [True: 2.95k, False: 0]
  ------------------
 1087|  2.95k|      u = (u & ((uint64_t)1 << 63)) | ((uint64_t)(0x7fe - ex) << 52);
 1088|  2.95k|      fins->o = IR_MUL;  /* Multiply by exact reciprocal. */
  ------------------
  |  |  138|  2.95k|#define fins		(&J->fold.ins)
  ------------------
 1089|  2.95k|      fins->op2 = lj_ir_knum_u64(J, u);
  ------------------
  |  |  138|  2.95k|#define fins		(&J->fold.ins)
  ------------------
 1090|  2.95k|      return RETRYFOLD;
 1091|  2.95k|    }
 1092|  20.3k|  }
 1093|  27.6k|  return NEXTFOLD;
 1094|  30.6k|}
lj_opt_fold.c:fold_shortcut_conv_num_int:
 1134|    165|{
 1135|    165|  PHIBARRIER(fleft);
  ------------------
  |  |  157|    165|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|    165|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 0, False: 165]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1136|       |  /* Only safe with a guarded conversion to int. */
 1137|    165|  if ((fleft->op2 & IRCONV_SRCMASK) == IRT_NUM && irt_isguard(fleft->t))
  ------------------
  |  |  139|    165|#define fleft		(J->fold.left)
  ------------------
                if ((fleft->op2 & IRCONV_SRCMASK) == IRT_NUM && irt_isguard(fleft->t))
  ------------------
  |  |  252|    165|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
                if ((fleft->op2 & IRCONV_SRCMASK) == IRT_NUM && irt_isguard(fleft->t))
  ------------------
  |  |  444|    165|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 165, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1137:7): [True: 165, False: 0]
  ------------------
 1138|    165|    return fleft->op1;  /* f(g(x)) ==> x */
  ------------------
  |  |  139|    165|#define fleft		(J->fold.left)
  ------------------
 1139|      0|  return NEXTFOLD;
 1140|    165|}
lj_opt_fold.c:fold_simplify_conv_int_num:
 1145|    282|{
 1146|       |  /* Fold even across PHI to avoid expensive num->int conversions in loop. */
 1147|    282|  if ((fleft->op2 & IRCONV_SRCMASK) ==
  ------------------
  |  |  139|    282|#define fleft		(J->fold.left)
  ------------------
                if ((fleft->op2 & IRCONV_SRCMASK) ==
  ------------------
  |  |  252|    282|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
  |  Branch (1147:7): [True: 282, False: 0]
  ------------------
 1148|    282|      ((fins->op2 & IRCONV_DSTMASK) >> IRCONV_DSH))
  ------------------
  |  |  138|    282|#define fins		(&J->fold.ins)
  ------------------
                    ((fins->op2 & IRCONV_DSTMASK) >> IRCONV_DSH))
  ------------------
  |  |  253|    282|#define IRCONV_DSTMASK		0x03e0	/* Dest. IRType (also in ir->t). */
  ------------------
                    ((fins->op2 & IRCONV_DSTMASK) >> IRCONV_DSH))
  ------------------
  |  |  254|    282|#define IRCONV_DSH		5
  ------------------
 1149|    282|    return fleft->op1;
  ------------------
  |  |  139|    282|#define fleft		(J->fold.left)
  ------------------
 1150|      0|  return NEXTFOLD;
 1151|    282|}
lj_opt_fold.c:fold_cse_conv:
 1307|  30.6k|{
 1308|  30.6k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_CSE)) {
  ------------------
  |  |  145|  30.6k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 30.6k, False: 0]
  |  |  ------------------
  ------------------
 1309|  30.6k|    IRRef op1 = fins->op1, op2 = (fins->op2 & IRCONV_MODEMASK);
  ------------------
  |  |  138|  30.6k|#define fins		(&J->fold.ins)
  ------------------
                  IRRef op1 = fins->op1, op2 = (fins->op2 & IRCONV_MODEMASK);
  ------------------
  |  |  138|  30.6k|#define fins		(&J->fold.ins)
  ------------------
                  IRRef op1 = fins->op1, op2 = (fins->op2 & IRCONV_MODEMASK);
  ------------------
  |  |  258|  30.6k|#define IRCONV_MODEMASK		0x0fff
  ------------------
 1310|  30.6k|    uint8_t guard = irt_isguard(fins->t);
  ------------------
  |  |  444|  30.6k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  ------------------
 1311|  30.6k|    IRRef ref = J->chain[IR_CONV];
 1312|  33.9k|    while (ref > op1) {
  ------------------
  |  Branch (1312:12): [True: 6.17k, False: 27.7k]
  ------------------
 1313|  6.17k|      IRIns *ir = IR(ref);
  ------------------
  |  |  137|  6.17k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 1314|       |      /* Commoning with stronger checks is ok. */
 1315|  6.17k|      if (ir->op1 == op1 && (ir->op2 & IRCONV_MODEMASK) == op2 &&
  ------------------
  |  |  258|  2.85k|#define IRCONV_MODEMASK		0x0fff
  ------------------
  |  Branch (1315:11): [True: 2.85k, False: 3.31k]
  |  Branch (1315:29): [True: 2.85k, False: 0]
  ------------------
 1316|  6.17k|	  irt_isguard(ir->t) >= guard)
  ------------------
  |  |  444|  2.85k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  ------------------
  |  Branch (1316:4): [True: 2.85k, False: 0]
  ------------------
 1317|  2.85k|	return ref;
 1318|  3.31k|      ref = ir->prev;
 1319|  3.31k|    }
 1320|  30.6k|  }
 1321|  27.7k|  return EMITFOLD;  /* No fallthrough to regular CSE. */
  ------------------
  |  |  121|  27.7k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 1322|  30.6k|}
lj_opt_fold.c:fold_narrow_convert:
 1332|  17.3k|{
 1333|  17.3k|  PHIBARRIER(fleft);
  ------------------
  |  |  157|  17.3k|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|  17.3k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 0, False: 17.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1334|       |  /* Narrowing ignores PHIs and repeating it inside the loop is not useful. */
 1335|  17.3k|  if (J->chain[IR_LOOP])
  ------------------
  |  Branch (1335:7): [True: 6.50k, False: 10.8k]
  ------------------
 1336|  6.50k|    return NEXTFOLD;
 1337|  10.8k|  lj_assertJ(fins->o != IR_CONV || (fins->op2&IRCONV_CONVMASK) != IRCONV_TOBIT,
  ------------------
  |  |  527|  10.8k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  10.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  21.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 10.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1338|  10.8k|	     "unexpected CONV TOBIT");
 1339|  10.8k|  return lj_opt_narrow_convert(J);
 1340|  10.8k|}
lj_opt_fold.c:fold_simplify_intadd_k:
 1348|  25.1k|{
 1349|  25.1k|  if (fright->i == 0)  /* i o 0 ==> i */
  ------------------
  |  |  140|  25.1k|#define fright		(J->fold.right)
  ------------------
  |  Branch (1349:7): [True: 20, False: 25.1k]
  ------------------
 1350|     20|    return LEFTFOLD;
  ------------------
  |  |  118|     20|#define LEFTFOLD	(J->fold.ins.op1)
  ------------------
 1351|  25.1k|  return NEXTFOLD;
 1352|  25.1k|}
lj_opt_fold.c:fold_simplify_intsub_k:
 1371|     28|{
 1372|     28|  if (fright->i == 0)  /* i - 0 ==> i */
  ------------------
  |  |  140|     28|#define fright		(J->fold.right)
  ------------------
  |  Branch (1372:7): [True: 0, False: 28]
  ------------------
 1373|      0|    return LEFTFOLD;
  ------------------
  |  |  118|      0|#define LEFTFOLD	(J->fold.ins.op1)
  ------------------
 1374|     28|  fins->o = IR_ADD;  /* i - k ==> i + (-k) */
  ------------------
  |  |  138|     28|#define fins		(&J->fold.ins)
  ------------------
 1375|     28|  fins->op2 = (IRRef1)lj_ir_kint(J, (int32_t)(~(uint32_t)fright->i+1u));  /* Overflow for -2^31 ok. */
  ------------------
  |  |  138|     28|#define fins		(&J->fold.ins)
  ------------------
                fins->op2 = (IRRef1)lj_ir_kint(J, (int32_t)(~(uint32_t)fright->i+1u));  /* Overflow for -2^31 ok. */
  ------------------
  |  |  140|     28|#define fright		(J->fold.right)
  ------------------
 1376|     28|  return RETRYFOLD;
 1377|     28|}
lj_opt_fold.c:fold_simplify_intmod_k:
 1450|  8.70k|{
 1451|  8.70k|  int32_t k = fright->i;
  ------------------
  |  |  140|  8.70k|#define fright		(J->fold.right)
  ------------------
 1452|  8.70k|  lj_assertJ(k != 0, "integer mod 0");
  ------------------
  |  |  527|  8.70k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  8.70k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  8.70k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 8.70k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  8.70k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1453|  8.70k|  if (k > 0 && (k & (k-1)) == 0) {  /* i % (2^k) ==> i & (2^k-1) */
  ------------------
  |  Branch (1453:7): [True: 8.70k, False: 0]
  |  Branch (1453:16): [True: 0, False: 8.70k]
  ------------------
 1454|      0|    fins->o = IR_BAND;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1455|      0|    fins->op2 = lj_ir_kint(J, k-1);
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1456|      0|    return RETRYFOLD;
 1457|      0|  }
 1458|  8.70k|  return NEXTFOLD;
 1459|  8.70k|}
lj_opt_fold.c:fold_simplify_intsub:
 1472|  25.0k|{
 1473|  25.0k|  if (fins->op1 == fins->op2 && !irt_isnum(fins->t))  /* i - i ==> 0 */
  ------------------
  |  |  138|  25.0k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 == fins->op2 && !irt_isnum(fins->t))  /* i - i ==> 0 */
  ------------------
  |  |  138|  25.0k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 == fins->op2 && !irt_isnum(fins->t))  /* i - i ==> 0 */
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1473:7): [True: 0, False: 25.0k]
  |  Branch (1473:33): [True: 0, False: 0]
  ------------------
 1474|      0|    return irt_is64(fins->t) ? INT64FOLD(0) : INTFOLD(0);
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  return irt_is64(fins->t) ? INT64FOLD(0) : INTFOLD(0);
  ------------------
  |  |  116|      0|#define INT64FOLD(k)	(lj_ir_kint64(J, (k)))
  ------------------
                  return irt_is64(fins->t) ? INT64FOLD(0) : INTFOLD(0);
  ------------------
  |  |  115|      0|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  ------------------
 1475|  25.0k|  return NEXTFOLD;
 1476|  25.0k|}
lj_opt_fold.c:fold_simplify_intsubadd_leftcancel:
 1480|      3|{
 1481|      3|  if (!irt_isnum(fins->t)) {
  ------------------
  |  |  377|      3|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      3|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1481:7): [True: 0, False: 3]
  ------------------
 1482|      0|    PHIBARRIER(fleft);
  ------------------
  |  |  157|      0|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|      0|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1483|      0|    if (fins->op2 == fleft->op1)  /* (i + j) - i ==> j */
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                  if (fins->op2 == fleft->op1)  /* (i + j) - i ==> j */
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
  |  Branch (1483:9): [True: 0, False: 0]
  ------------------
 1484|      0|      return fleft->op2;
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
 1485|      0|    if (fins->op2 == fleft->op2)  /* (i + j) - j ==> i */
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                  if (fins->op2 == fleft->op2)  /* (i + j) - j ==> i */
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
  |  Branch (1485:9): [True: 0, False: 0]
  ------------------
 1486|      0|      return fleft->op1;
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
 1487|      0|  }
 1488|      3|  return NEXTFOLD;
 1489|      3|}
lj_opt_fold.c:fold_simplify_intsubsub_leftcancel:
 1493|  8.75k|{
 1494|  8.75k|  if (!irt_isnum(fins->t)) {
  ------------------
  |  |  377|  8.75k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  8.75k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1494:7): [True: 0, False: 8.75k]
  ------------------
 1495|      0|    PHIBARRIER(fleft);
  ------------------
  |  |  157|      0|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|      0|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1496|      0|    if (fins->op2 == fleft->op1) {  /* (i - j) - i ==> 0 - j */
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                  if (fins->op2 == fleft->op1) {  /* (i - j) - i ==> 0 - j */
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
  |  Branch (1496:9): [True: 0, False: 0]
  ------------------
 1497|      0|      fins->op1 = (IRRef1)lj_ir_kint(J, 0);
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1498|      0|      fins->op2 = fleft->op2;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                    fins->op2 = fleft->op2;
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
 1499|      0|      return RETRYFOLD;
 1500|      0|    }
 1501|      0|  }
 1502|  8.75k|  return NEXTFOLD;
 1503|  8.75k|}
lj_opt_fold.c:fold_simplify_intsubadd_rightcancel:
 1518|    166|{
 1519|    166|  if (!irt_isnum(fins->t)) {
  ------------------
  |  |  377|    166|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|    166|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1519:7): [True: 166, False: 0]
  ------------------
 1520|    166|    PHIBARRIER(fright);
  ------------------
  |  |  157|    166|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|    166|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 0, False: 166]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1521|    166|    if (fins->op1 == fright->op1) {  /* i - (i + j) ==> 0 - j */
  ------------------
  |  |  138|    166|#define fins		(&J->fold.ins)
  ------------------
                  if (fins->op1 == fright->op1) {  /* i - (i + j) ==> 0 - j */
  ------------------
  |  |  140|    166|#define fright		(J->fold.right)
  ------------------
  |  Branch (1521:9): [True: 0, False: 166]
  ------------------
 1522|      0|      fins->op2 = fright->op2;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                    fins->op2 = fright->op2;
  ------------------
  |  |  140|      0|#define fright		(J->fold.right)
  ------------------
 1523|      0|      fins->op1 = (IRRef1)lj_ir_kint(J, 0);
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1524|      0|      return RETRYFOLD;
 1525|      0|    }
 1526|    166|    if (fins->op1 == fright->op2) {  /* i - (j + i) ==> 0 - j */
  ------------------
  |  |  138|    166|#define fins		(&J->fold.ins)
  ------------------
                  if (fins->op1 == fright->op2) {  /* i - (j + i) ==> 0 - j */
  ------------------
  |  |  140|    166|#define fright		(J->fold.right)
  ------------------
  |  Branch (1526:9): [True: 0, False: 166]
  ------------------
 1527|      0|      fins->op2 = fright->op1;
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
                    fins->op2 = fright->op1;
  ------------------
  |  |  140|      0|#define fright		(J->fold.right)
  ------------------
 1528|      0|      fins->op1 = (IRRef1)lj_ir_kint(J, 0);
  ------------------
  |  |  138|      0|#define fins		(&J->fold.ins)
  ------------------
 1529|      0|      return RETRYFOLD;
 1530|      0|    }
 1531|    166|  }
 1532|    166|  return NEXTFOLD;
 1533|    166|}
lj_opt_fold.c:fold_reassoc_intarith_k:
 1774|  9.53k|{
 1775|  9.53k|  IRIns *irk = IR(fleft->op2);
  ------------------
  |  |  137|  9.53k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 1776|  9.53k|  if (irk->o == IR_KINT) {
  ------------------
  |  Branch (1776:7): [True: 9.53k, False: 0]
  ------------------
 1777|  9.53k|    int32_t k = kfold_intop(irk->i, fright->i, (IROp)fins->o);
  ------------------
  |  |  140|  9.53k|#define fright		(J->fold.right)
  ------------------
                  int32_t k = kfold_intop(irk->i, fright->i, (IROp)fins->o);
  ------------------
  |  |  138|  9.53k|#define fins		(&J->fold.ins)
  ------------------
 1778|  9.53k|    if (k == irk->i)  /* (i o k1) o k2 ==> i o k1, if (k1 o k2) == k1. */
  ------------------
  |  Branch (1778:9): [True: 0, False: 9.53k]
  ------------------
 1779|      0|      return LEFTFOLD;
  ------------------
  |  |  118|      0|#define LEFTFOLD	(J->fold.ins.op1)
  ------------------
 1780|  9.53k|    PHIBARRIER(fleft);
  ------------------
  |  |  157|  9.53k|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|  9.53k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 9.45k, False: 81]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1781|     81|    fins->op1 = fleft->op1;
  ------------------
  |  |  138|     81|#define fins		(&J->fold.ins)
  ------------------
                  fins->op1 = fleft->op1;
  ------------------
  |  |  139|     81|#define fleft		(J->fold.left)
  ------------------
 1782|     81|    fins->op2 = (IRRef1)lj_ir_kint(J, k);
  ------------------
  |  |  138|     81|#define fins		(&J->fold.ins)
  ------------------
 1783|     81|    return RETRYFOLD;  /* (i o k1) o k2 ==> i o (k1 o k2) */
 1784|  9.53k|  }
 1785|      0|  return NEXTFOLD;
 1786|  9.53k|}
lj_opt_fold.c:fold_abc_fwd:
 1893|    842|{
 1894|    842|  if (LJ_LIKELY(J->flags & JIT_F_OPT_ABC)) {
  ------------------
  |  |  145|    842|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 842, False: 0]
  |  |  ------------------
  ------------------
 1895|    842|    if (irref_isk(fright->op2)) {
  ------------------
  |  |  485|    842|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 842, False: 0]
  |  |  ------------------
  ------------------
 1896|    842|      IRIns *add2 = IR(fright->op1);
  ------------------
  |  |  137|    842|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 1897|    842|      if (add2->o == IR_ADD && irref_isk(add2->op2) &&
  ------------------
  |  |  485|  1.14k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 298, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1897:11): [True: 298, False: 544]
  ------------------
 1898|    842|	  IR(fright->op2)->i == -IR(add2->op2)->i) {
  ------------------
  |  |  137|    298|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
              	  IR(fright->op2)->i == -IR(add2->op2)->i) {
  ------------------
  |  |  137|    298|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (1898:4): [True: 16, False: 282]
  ------------------
 1899|     16|	IRRef ref = J->chain[IR_ABC];
 1900|     16|	IRRef lim = add2->op1;
 1901|     16|	if (fins->op1 > lim) lim = fins->op1;
  ------------------
  |  |  138|     16|#define fins		(&J->fold.ins)
  ------------------
              	if (fins->op1 > lim) lim = fins->op1;
  ------------------
  |  |  138|     16|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1901:6): [True: 16, False: 0]
  ------------------
 1902|     16|	while (ref > lim) {
  ------------------
  |  Branch (1902:9): [True: 16, False: 0]
  ------------------
 1903|     16|	  IRIns *ir = IR(ref);
  ------------------
  |  |  137|     16|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 1904|     16|	  if (ir->op1 == fins->op1 && ir->op2 == add2->op1)
  ------------------
  |  |  138|     16|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1904:8): [True: 16, False: 0]
  |  Branch (1904:32): [True: 16, False: 0]
  ------------------
 1905|     16|	    return DROPFOLD;
 1906|      0|	  ref = ir->prev;
 1907|      0|	}
 1908|     16|      }
 1909|    842|    }
 1910|    842|  }
 1911|    826|  return NEXTFOLD;
 1912|    842|}
lj_opt_fold.c:fold_abc_k:
 1920|    205|{
 1921|    205|  PHIBARRIER(fleft);
  ------------------
  |  |  157|    205|#define PHIBARRIER(ir)	if (irt_isphi((ir)->t)) return NEXTFOLD
  |  |  ------------------
  |  |  |  |  448|    205|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (448:23): [True: 0, False: 205]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1922|    205|  if (LJ_LIKELY(J->flags & JIT_F_OPT_ABC)) {
  ------------------
  |  |  145|    205|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 205, False: 0]
  |  |  ------------------
  ------------------
 1923|    205|    IRRef ref = J->chain[IR_ABC];
 1924|    205|    IRRef asize = fins->op1;
  ------------------
  |  |  138|    205|#define fins		(&J->fold.ins)
  ------------------
 1925|    259|    while (ref > asize) {
  ------------------
  |  Branch (1925:12): [True: 110, False: 149]
  ------------------
 1926|    110|      IRIns *ir = IR(ref);
  ------------------
  |  |  137|    110|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 1927|    110|      if (ir->op1 == asize && irref_isk(ir->op2)) {
  ------------------
  |  |  485|     90|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 56, False: 34]
  |  |  ------------------
  ------------------
  |  Branch (1927:11): [True: 90, False: 20]
  ------------------
 1928|     56|	uint32_t k = (uint32_t)IR(ir->op2)->i;
  ------------------
  |  |  137|     56|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 1929|     56|	if ((uint32_t)fright->i > k)
  ------------------
  |  |  140|     56|#define fright		(J->fold.right)
  ------------------
  |  Branch (1929:6): [True: 19, False: 37]
  ------------------
 1930|     19|	  ir->op2 = fins->op2;
  ------------------
  |  |  138|     19|#define fins		(&J->fold.ins)
  ------------------
 1931|     56|	return DROPFOLD;
 1932|     56|      }
 1933|     54|      ref = ir->prev;
 1934|     54|    }
 1935|    149|    return EMITFOLD;  /* Already performed CSE. */
  ------------------
  |  |  121|    149|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 1936|    205|  }
 1937|      0|  return NEXTFOLD;
 1938|    205|}
lj_opt_fold.c:fold_abc_invar:
 1943|  1.13k|{
 1944|       |  /* Invariant ABC marked as P32 or U32. Drop if op1 is invariant too. */
 1945|  1.13k|  if (!irt_isint(fins->t) && fins->op1 < J->chain[IR_LOOP] &&
  ------------------
  |  |  378|  2.26k|#define irt_isint(t)		(irt_type(t) == IRT_INT)
  |  |  ------------------
  |  |  |  |  365|  1.13k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
                if (!irt_isint(fins->t) && fins->op1 < J->chain[IR_LOOP] &&
  ------------------
  |  |  138|     31|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1945:7): [True: 31, False: 1.10k]
  |  Branch (1945:30): [True: 4, False: 27]
  ------------------
 1946|  1.13k|      (irt_isu32(fins->t) ||
  ------------------
  |  |  383|      8|#define irt_isu32(t)		(irt_type(t) == IRT_U32)
  |  |  ------------------
  |  |  |  |  365|      4|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (383:23): [True: 0, False: 4]
  |  |  ------------------
  ------------------
 1947|      4|       (!irref_isk(fins->op1) && !irt_isphi(IR(fins->op1)->t))))
  ------------------
  |  |  485|      8|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
                     (!irref_isk(fins->op1) && !irt_isphi(IR(fins->op1)->t))))
  ------------------
  |  |  448|      4|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (1947:9): [True: 4, False: 0]
  |  Branch (1947:34): [True: 4, False: 0]
  ------------------
 1948|      4|    return DROPFOLD;
 1949|  1.12k|  return NEXTFOLD;
 1950|  1.13k|}
lj_opt_fold.c:fold_comm_swap:
 1967|   174k|{
 1968|   174k|  if (fins->op1 < fins->op2) {  /* Move lower ref to the right. */
  ------------------
  |  |  138|   174k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 < fins->op2) {  /* Move lower ref to the right. */
  ------------------
  |  |  138|   174k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1968:7): [True: 25.0k, False: 149k]
  ------------------
 1969|  25.0k|    IRRef1 tmp = fins->op1;
  ------------------
  |  |  138|  25.0k|#define fins		(&J->fold.ins)
  ------------------
 1970|  25.0k|    fins->op1 = fins->op2;
  ------------------
  |  |  138|  25.0k|#define fins		(&J->fold.ins)
  ------------------
                  fins->op1 = fins->op2;
  ------------------
  |  |  138|  25.0k|#define fins		(&J->fold.ins)
  ------------------
 1971|  25.0k|    fins->op2 = tmp;
  ------------------
  |  |  138|  25.0k|#define fins		(&J->fold.ins)
  ------------------
 1972|  25.0k|    return RETRYFOLD;
 1973|  25.0k|  }
 1974|   149k|  return NEXTFOLD;
 1975|   174k|}
lj_opt_fold.c:fold_comm_equal:
 1980|  81.1k|{
 1981|       |  /* For non-numbers only: x == x ==> drop; x ~= x ==> fail */
 1982|  81.1k|  if (fins->op1 == fins->op2 &&
  ------------------
  |  |  138|  81.1k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 == fins->op2 &&
  ------------------
  |  |  138|  81.1k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (1982:7): [True: 297, False: 80.8k]
  ------------------
 1983|  81.1k|      (!irt_isnum(fins->t) ||
  ------------------
  |  |  377|    594|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|    297|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (1983:8): [True: 53, False: 244]
  ------------------
 1984|    297|       (fleft->o == IR_CONV &&  /* Converted integers cannot be NaN. */
  ------------------
  |  |  139|    244|#define fleft		(J->fold.left)
  ------------------
  |  Branch (1984:9): [True: 0, False: 244]
  ------------------
 1985|    244|	(uint32_t)(fleft->op2 & IRCONV_SRCMASK) - (uint32_t)IRT_I8 <= (uint32_t)(IRT_U64 - IRT_U8))))
  ------------------
  |  |  139|      0|#define fleft		(J->fold.left)
  ------------------
              	(uint32_t)(fleft->op2 & IRCONV_SRCMASK) - (uint32_t)IRT_I8 <= (uint32_t)(IRT_U64 - IRT_U8))))
  ------------------
  |  |  252|      0|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
  |  Branch (1985:2): [True: 0, False: 0]
  ------------------
 1986|     53|    return CONDFOLD(fins->o == IR_EQ);
  ------------------
  |  |  117|     53|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
 1987|  81.1k|  return fold_comm_swap(J);
 1988|  81.1k|}
lj_opt_fold.c:fold_comm_comp:
 1999|  61.0k|{
 2000|       |  /* For non-numbers only: x <=> x ==> drop; x <> x ==> fail */
 2001|  61.0k|  if (fins->op1 == fins->op2 && !irt_isnum(fins->t))
  ------------------
  |  |  138|  61.0k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 == fins->op2 && !irt_isnum(fins->t))
  ------------------
  |  |  138|  61.0k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 == fins->op2 && !irt_isnum(fins->t))
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (2001:7): [True: 0, False: 61.0k]
  |  Branch (2001:33): [True: 0, False: 0]
  ------------------
 2002|      0|    return CONDFOLD((fins->o ^ (fins->o >> 1)) & 1);
  ------------------
  |  |  117|      0|#define CONDFOLD(cond)	((TRef)FAILFOLD + (TRef)(cond))
  ------------------
 2003|  61.0k|  if (fins->op1 < fins->op2) {  /* Move lower ref to the right. */
  ------------------
  |  |  138|  61.0k|#define fins		(&J->fold.ins)
  ------------------
                if (fins->op1 < fins->op2) {  /* Move lower ref to the right. */
  ------------------
  |  |  138|  61.0k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2003:7): [True: 1.02k, False: 59.9k]
  ------------------
 2004|  1.02k|    IRRef1 tmp = fins->op1;
  ------------------
  |  |  138|  1.02k|#define fins		(&J->fold.ins)
  ------------------
 2005|  1.02k|    fins->op1 = fins->op2;
  ------------------
  |  |  138|  1.02k|#define fins		(&J->fold.ins)
  ------------------
                  fins->op1 = fins->op2;
  ------------------
  |  |  138|  1.02k|#define fins		(&J->fold.ins)
  ------------------
 2006|  1.02k|    fins->op2 = tmp;
  ------------------
  |  |  138|  1.02k|#define fins		(&J->fold.ins)
  ------------------
 2007|  1.02k|    fins->o ^= 3; /* GT <-> LT, GE <-> LE, does not affect U */
  ------------------
  |  |  138|  1.02k|#define fins		(&J->fold.ins)
  ------------------
 2008|  1.02k|    return RETRYFOLD;
 2009|  1.02k|  }
 2010|  59.9k|  return NEXTFOLD;
 2011|  61.0k|}
lj_opt_fold.c:kfold_xload:
 2042|  5.06k|{
 2043|  5.06k|  int32_t k;
 2044|  5.06k|  switch (irt_type(ir->t)) {
  ------------------
  |  |  365|  5.06k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
 2045|      0|  case IRT_NUM: return lj_ir_knum_u64(J, *(uint64_t *)p);
  ------------------
  |  Branch (2045:3): [True: 0, False: 5.06k]
  ------------------
 2046|      0|  case IRT_I8: k = (int32_t)*(int8_t *)p; break;
  ------------------
  |  Branch (2046:3): [True: 0, False: 5.06k]
  ------------------
 2047|  5.06k|  case IRT_U8: k = (int32_t)*(uint8_t *)p; break;
  ------------------
  |  Branch (2047:3): [True: 5.06k, False: 0]
  ------------------
 2048|      0|  case IRT_I16: k = (int32_t)(int16_t)lj_getu16(p); break;
  ------------------
  |  Branch (2048:3): [True: 0, False: 5.06k]
  ------------------
 2049|      0|  case IRT_U16: k = (int32_t)(uint16_t)lj_getu16(p); break;
  ------------------
  |  Branch (2049:3): [True: 0, False: 5.06k]
  ------------------
 2050|      0|  case IRT_INT: case IRT_U32: k = (int32_t)lj_getu32(p); break;
  ------------------
  |  Branch (2050:3): [True: 0, False: 5.06k]
  |  Branch (2050:17): [True: 0, False: 5.06k]
  ------------------
 2051|      0|  case IRT_I64: case IRT_U64: return lj_ir_kint64(J, *(uint64_t *)p);
  ------------------
  |  Branch (2051:3): [True: 0, False: 5.06k]
  |  Branch (2051:17): [True: 0, False: 5.06k]
  ------------------
 2052|      0|  default: return 0;
  ------------------
  |  Branch (2052:3): [True: 0, False: 5.06k]
  ------------------
 2053|  5.06k|  }
 2054|  5.06k|  return lj_ir_kint(J, k);
 2055|  5.06k|}
lj_opt_fold.c:fold_cse_uref:
 2171|    187|{
 2172|    187|  if (LJ_LIKELY(J->flags & JIT_F_OPT_CSE)) {
  ------------------
  |  |  145|    187|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 187, False: 0]
  |  |  ------------------
  ------------------
 2173|    187|    IRRef ref = J->chain[fins->o];
  ------------------
  |  |  138|    187|#define fins		(&J->fold.ins)
  ------------------
 2174|    374|    GCfunc *fn = ir_kfunc(fleft);
  ------------------
  |  |  590|    187|#define ir_kfunc(ir)	(gco2func(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  769|    187|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    374|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    187|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    374|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 187, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 187, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    187|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 187, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2175|    187|    GCupval *uv = gco2uv(gcref(fn->l.uvptr[(fins->op2 >> 8)]));
  ------------------
  |  |  766|    187|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|    187|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    187|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    187|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 187, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    187|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2176|    233|    while (ref > 0) {
  ------------------
  |  Branch (2176:12): [True: 179, False: 54]
  ------------------
 2177|    179|      IRIns *ir = IR(ref);
  ------------------
  |  |  137|    179|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2178|    179|      if (irref_isk(ir->op1)) {
  ------------------
  |  |  485|    179|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 133, False: 46]
  |  |  ------------------
  ------------------
 2179|    266|	GCfunc *fn2 = ir_kfunc(IR(ir->op1));
  ------------------
  |  |  590|    133|#define ir_kfunc(ir)	(gco2func(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  769|    133|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    266|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    133|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    266|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 133, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 133, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    133|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 133, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2180|    266|	if (gco2uv(gcref(fn2->l.uvptr[(ir->op2 >> 8)])) == uv) {
  ------------------
  |  |  766|    133|#define gco2uv(o)	check_exp((o)->gch.gct == ~LJ_TUPVAL, &(o)->uv)
  |  |  ------------------
  |  |  |  |  367|    133|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    133|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    133|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 133, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    133|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2180:6): [True: 133, False: 0]
  ------------------
 2181|    133|	  return merge_uref(J, ref, ir);
 2182|    133|	}
 2183|    266|      }
 2184|     46|      ref = ir->prev;
 2185|     46|    }
 2186|    187|  }
 2187|     54|  return EMITFOLD;
  ------------------
  |  |  121|     54|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 2188|    187|}
lj_opt_fold.c:merge_uref:
 2146|    142|{
 2147|    142|  if (ir->o == IR_UREFO && irt_isguard(ir->t)) {
  ------------------
  |  |  444|    142|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 142, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2147:7): [True: 142, False: 0]
  ------------------
 2148|       |    /* Might be pointing to some other coroutine's stack.
 2149|       |    ** And GC might shrink said stack, thereby repointing the upvalue.
 2150|       |    ** GC might even collect said coroutine, thereby closing the upvalue.
 2151|       |    */
 2152|    142|    if (gcstep_barrier(J, ref))
  ------------------
  |  |  164|    142|  ((ref) < J->chain[IR_LOOP] && \
  |  |  ------------------
  |  |  |  Branch (164:4): [True: 66, False: 76]
  |  |  ------------------
  |  |  165|    142|   (J->chain[IR_SNEW] || J->chain[IR_XSNEW] || \
  |  |  ------------------
  |  |  |  Branch (165:5): [True: 0, False: 66]
  |  |  |  Branch (165:26): [True: 0, False: 66]
  |  |  ------------------
  |  |  166|     66|    J->chain[IR_TNEW] || J->chain[IR_TDUP] || \
  |  |  ------------------
  |  |  |  Branch (166:5): [True: 0, False: 66]
  |  |  |  Branch (166:26): [True: 0, False: 66]
  |  |  ------------------
  |  |  167|     66|    J->chain[IR_CNEW] || J->chain[IR_CNEWI] || \
  |  |  ------------------
  |  |  |  Branch (167:5): [True: 0, False: 66]
  |  |  |  Branch (167:26): [True: 0, False: 66]
  |  |  ------------------
  |  |  168|     66|    J->chain[IR_BUFSTR] || J->chain[IR_TOSTR] || J->chain[IR_CALLA]))
  |  |  ------------------
  |  |  |  Branch (168:5): [True: 0, False: 66]
  |  |  |  Branch (168:28): [True: 0, False: 66]
  |  |  |  Branch (168:50): [True: 0, False: 66]
  |  |  ------------------
  ------------------
 2153|      0|      return EMITFOLD;  /* So cannot merge. */
  ------------------
  |  |  121|      0|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 2154|       |    /* Current fins wants a check, but ir doesn't have one. */
 2155|    142|    if ((irt_t(fins->t) & (IRT_GUARD|IRT_TYPE)) == (IRT_GUARD|IRT_PGC) &&
  ------------------
  |  |  364|    142|#define irt_t(t)		((IRType)(t).irt)
  ------------------
  |  Branch (2155:9): [True: 0, False: 142]
  ------------------
 2156|    142|	irt_type(ir->t) == IRT_IGC)
  ------------------
  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
  |  Branch (2156:2): [True: 0, False: 0]
  ------------------
 2157|      0|      ir->t.irt += IRT_PGC-IRT_IGC;  /* So install a check. */
 2158|    142|  }
 2159|    142|  return ref;  /* Not a TRef, but the caller doesn't care. */
 2160|    142|}
lj_opt_fold.c:fold_cse_urefo:
 2193|    223|{
 2194|    223|  if (LJ_LIKELY(J->flags & JIT_F_OPT_CSE)) {
  ------------------
  |  |  145|    223|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 223, False: 0]
  |  |  ------------------
  ------------------
 2195|    223|    IRRef ref = J->chain[IR_UREFO];
 2196|    223|    IRRef lim = fins->op1;
  ------------------
  |  |  138|    223|#define fins		(&J->fold.ins)
  ------------------
 2197|    223|    IRRef2 op12 = (IRRef2)fins->op1 + ((IRRef2)fins->op2 << 16);
  ------------------
  |  |  138|    223|#define fins		(&J->fold.ins)
  ------------------
                  IRRef2 op12 = (IRRef2)fins->op1 + ((IRRef2)fins->op2 << 16);
  ------------------
  |  |  138|    223|#define fins		(&J->fold.ins)
  ------------------
 2198|    223|    while (ref > lim) {
  ------------------
  |  Branch (2198:12): [True: 9, False: 214]
  ------------------
 2199|      9|      IRIns *ir = IR(ref);
  ------------------
  |  |  137|      9|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
 2200|      9|      if (ir->op12 == op12)
  ------------------
  |  Branch (2200:11): [True: 9, False: 0]
  ------------------
 2201|      9|	return merge_uref(J, ref, ir);
 2202|      0|      ref = ir->prev;
 2203|      0|    }
 2204|    223|  }
 2205|    214|  return EMITFOLD;
  ------------------
  |  |  121|    214|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 2206|    223|}
lj_opt_fold.c:fold_fload_tab_tnew_asize:
 2241|    193|{
 2242|    193|  if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && lj_opt_fwd_tptr(J, fins->op1))
  ------------------
  |  |  145|    386|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 193, False: 0]
  |  |  ------------------
  ------------------
                if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && lj_opt_fwd_tptr(J, fins->op1))
  ------------------
  |  |  138|    193|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2242:47): [True: 193, False: 0]
  ------------------
 2243|    193|    return INTFOLD(fleft->op1);
  ------------------
  |  |  115|    193|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  ------------------
 2244|      0|  return NEXTFOLD;
 2245|    193|}
lj_opt_fold.c:fold_fload_tab_tdup_hmask:
 2265|      5|{
 2266|      5|  if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && lj_opt_fwd_tptr(J, fins->op1))
  ------------------
  |  |  145|     10|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 5, False: 0]
  |  |  ------------------
  ------------------
                if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && lj_opt_fwd_tptr(J, fins->op1))
  ------------------
  |  |  138|      5|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2266:47): [True: 5, False: 0]
  ------------------
 2267|      5|    return INTFOLD((int32_t)ir_ktab(IR(fleft->op1))->hmask);
  ------------------
  |  |  115|     35|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  |  |  ------------------
  |  |  |  Branch (115:39): [True: 5, False: 0]
  |  |  |  Branch (115:39): [True: 5, False: 0]
  |  |  |  Branch (115:39): [True: 5, False: 0]
  |  |  ------------------
  ------------------
 2268|      0|  return NEXTFOLD;
 2269|      5|}
lj_opt_fold.c:fold_fload_tab_ah:
 2277|  47.4k|{
 2278|  47.4k|  TRef tr = lj_opt_cse(J);
 2279|  47.4k|  return lj_opt_fwd_tptr(J, tref_ref(tr)) ? tr : EMITFOLD;
  ------------------
  |  |  504|  47.4k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
                return lj_opt_fwd_tptr(J, tref_ref(tr)) ? tr : EMITFOLD;
  ------------------
  |  |  121|    145|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  |  Branch (2279:10): [True: 47.3k, False: 145]
  ------------------
 2280|  47.4k|}
lj_opt_fold.c:fold_fload_str_len_kgc:
 2285|  9.17k|{
 2286|  9.17k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD))
  ------------------
  |  |  145|  9.17k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 9.17k, False: 0]
  |  |  ------------------
  ------------------
 2287|  9.17k|    return INTFOLD((int32_t)ir_kstr(fleft)->len);
  ------------------
  |  |  115|  64.2k|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  |  |  ------------------
  |  |  |  Branch (115:39): [True: 9.17k, False: 0]
  |  |  |  Branch (115:39): [True: 9.17k, False: 0]
  |  |  |  Branch (115:39): [True: 9.17k, False: 0]
  |  |  ------------------
  ------------------
 2288|      0|  return NEXTFOLD;
 2289|  9.17k|}
lj_opt_fold.c:fold_fload_str_len_tostr:
 2303|  12.1k|{
 2304|  12.1k|  if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && fleft->op2 == IRTOSTR_CHAR)
  ------------------
  |  |  145|  24.2k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 12.1k, False: 0]
  |  |  ------------------
  ------------------
                if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && fleft->op2 == IRTOSTR_CHAR)
  ------------------
  |  |  139|  12.1k|#define fleft		(J->fold.left)
  ------------------
                if (LJ_LIKELY(J->flags & JIT_F_OPT_FOLD) && fleft->op2 == IRTOSTR_CHAR)
  ------------------
  |  |  271|  12.1k|#define IRTOSTR_CHAR		2	/* Convert char value to string. */
  ------------------
  |  Branch (2304:47): [True: 0, False: 12.1k]
  ------------------
 2305|      0|    return INTFOLD(1);
  ------------------
  |  |  115|      0|#define INTFOLD(k)	((J->fold.ins.i = (k)), (TRef)KINTFOLD)
  ------------------
 2306|  12.1k|  return NEXTFOLD;
 2307|  12.1k|}
lj_opt_fold.c:fold_fwd_sload:
 2392|  41.1k|{
 2393|  41.1k|  if ((fins->op2 & IRSLOAD_FRAME)) {
  ------------------
  |  |  138|  41.1k|#define fins		(&J->fold.ins)
  ------------------
                if ((fins->op2 & IRSLOAD_FRAME)) {
  ------------------
  |  |  234|  41.1k|#define IRSLOAD_FRAME		0x02	/* Load 32 bits of ftsz. */
  ------------------
  |  Branch (2393:7): [True: 0, False: 41.1k]
  ------------------
 2394|      0|    TRef tr = lj_opt_cse(J);
 2395|      0|    return tref_ref(tr) < J->chain[IR_RETF] ? EMITFOLD : tr;
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
                  return tref_ref(tr) < J->chain[IR_RETF] ? EMITFOLD : tr;
  ------------------
  |  |  121|      0|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  |  Branch (2395:12): [True: 0, False: 0]
  ------------------
 2396|  41.1k|  } else {
 2397|  41.1k|    lj_assertJ(J->slot[fins->op1] != 0, "uninitialized slot accessed");
  ------------------
  |  |  527|  41.1k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  41.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  41.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 41.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  41.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2398|  41.1k|    return J->slot[fins->op1];
  ------------------
  |  |  138|  41.1k|#define fins		(&J->fold.ins)
  ------------------
 2399|  41.1k|  }
 2400|  41.1k|}
lj_opt_fold.c:fold_xload_kptr:
 2405|  5.06k|{
 2406|  5.06k|  TRef tr = kfold_xload(J, fins, ir_kptr(fleft));
  ------------------
  |  |  138|  5.06k|#define fins		(&J->fold.ins)
  ------------------
                TRef tr = kfold_xload(J, fins, ir_kptr(fleft));
  ------------------
  |  |  596|  5.06k|  check_exp((ir)->o == IR_KPTR || (ir)->o == IR_KKPTR, \
  |  |  ------------------
  |  |  |  |  367|  5.06k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  5.06k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  10.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 5.06k]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 5.06k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  5.06k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  597|  5.06k|    mref((ir)[LJ_GC64].ptr, void))
  ------------------
 2407|  5.06k|  return tr ? tr : NEXTFOLD;
  ------------------
  |  Branch (2407:10): [True: 5.06k, False: 0]
  ------------------
 2408|  5.06k|}
lj_opt_fold.c:fold_fold_base:
 2420|    377|{
 2421|    377|  return lj_opt_cselim(J, J->chain[IR_RETF]);
 2422|    377|}
lj_opt_fold.c:fold_barrier_tab:
 2432|    870|{
 2433|    870|  TRef tr = lj_opt_cse(J);
 2434|    870|  if (gcstep_barrier(J, tref_ref(tr)))  /* CSE across GC step? */
  ------------------
  |  |  164|    870|  ((ref) < J->chain[IR_LOOP] && \
  |  |  ------------------
  |  |  |  Branch (164:4): [True: 131, False: 739]
  |  |  ------------------
  |  |  165|    870|   (J->chain[IR_SNEW] || J->chain[IR_XSNEW] || \
  |  |  ------------------
  |  |  |  Branch (165:5): [True: 0, False: 131]
  |  |  |  Branch (165:26): [True: 0, False: 131]
  |  |  ------------------
  |  |  166|    131|    J->chain[IR_TNEW] || J->chain[IR_TDUP] || \
  |  |  ------------------
  |  |  |  Branch (166:5): [True: 41, False: 90]
  |  |  |  Branch (166:26): [True: 37, False: 53]
  |  |  ------------------
  |  |  167|    131|    J->chain[IR_CNEW] || J->chain[IR_CNEWI] || \
  |  |  ------------------
  |  |  |  Branch (167:5): [True: 0, False: 53]
  |  |  |  Branch (167:26): [True: 0, False: 53]
  |  |  ------------------
  |  |  168|    131|    J->chain[IR_BUFSTR] || J->chain[IR_TOSTR] || J->chain[IR_CALLA]))
  |  |  ------------------
  |  |  |  Branch (168:5): [True: 0, False: 53]
  |  |  |  Branch (168:28): [True: 0, False: 53]
  |  |  |  Branch (168:50): [True: 0, False: 53]
  |  |  ------------------
  ------------------
 2435|     78|    return EMITFOLD;  /* Raw emit. Assumes fins is left intact by CSE. */
  ------------------
  |  |  121|     78|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 2436|    792|  return tr;
 2437|    870|}
lj_opt_fold.c:fold_barrier_tnew_tdup:
 2442|     31|{
 2443|       |  /* New tables are always white and never need a barrier. */
 2444|     31|  if (fins->op1 < J->chain[IR_LOOP])  /* Except across a GC step. */
  ------------------
  |  |  138|     31|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (2444:7): [True: 0, False: 31]
  ------------------
 2445|      0|    return NEXTFOLD;
 2446|     31|  return DROPFOLD;
 2447|     31|}
lj_opt_fold.c:fold_cse_carg:
 2499|  94.0k|{
 2500|  94.0k|  TRef tr = lj_opt_cse(J);
 2501|  94.0k|  if (tref_ref(tr) < J->chain[IR_LOOP])  /* CSE across loop? */
  ------------------
  |  |  504|  94.0k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  |  Branch (2501:7): [True: 0, False: 94.0k]
  ------------------
 2502|      0|    return EMITFOLD;  /* Raw emit. Assumes fins is left intact by CSE. */
  ------------------
  |  |  121|      0|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
 2503|  94.0k|  return tr;
 2504|  94.0k|}

lj_opt_loop:
  416|  9.93k|{
  417|  9.93k|  IRRef nins = J->cur.nins;
  418|  9.93k|  SnapNo nsnap = J->cur.nsnap;
  419|  9.93k|  MSize nsnapmap = J->cur.nsnapmap;
  420|  9.93k|  LoopState lps;
  421|  9.93k|  int errcode;
  422|  9.93k|  lps.J = J;
  423|  9.93k|  lps.subst = NULL;
  424|  9.93k|  lps.sizesubst = 0;
  425|  9.93k|  errcode = lj_vm_cpcall(J->L, NULL, &lps, cploop_opt);
  426|  9.93k|  lj_mem_freevec(J2G(J), lps.subst, lps.sizesubst, IRRef1);
  ------------------
  |  |  130|  9.93k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  427|  9.93k|  if (LJ_UNLIKELY(errcode)) {
  ------------------
  |  |  146|  9.93k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 81, False: 9.85k]
  |  |  ------------------
  ------------------
  428|     81|    lua_State *L = J->L;
  429|     81|    if (errcode == LUA_ERRRUN && tvisnumber(L->top-1)) {  /* Trace error? */
  ------------------
  |  |   45|    162|#define LUA_ERRRUN	2
  ------------------
                  if (errcode == LUA_ERRRUN && tvisnumber(L->top-1)) {  /* Trace error? */
  ------------------
  |  |  802|     81|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|     81|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|     81|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|     81|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 81, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (429:9): [True: 81, False: 0]
  ------------------
  430|     81|      int32_t e = numberVint(L->top-1);
  431|     81|      switch ((TraceError)e) {
  432|     75|      case LJ_TRERR_TYPEINS:  /* Type instability. */
  ------------------
  |  Branch (432:7): [True: 75, False: 6]
  ------------------
  433|     81|      case LJ_TRERR_GFAIL:  /* Guard would always fail. */
  ------------------
  |  Branch (433:7): [True: 6, False: 75]
  ------------------
  434|       |	/* Unrolling via recording fixes many cases, e.g. a flipped boolean. */
  435|     81|	if (--J->instunroll < 0)  /* But do not unroll forever. */
  ------------------
  |  Branch (435:6): [True: 0, False: 81]
  ------------------
  436|      0|	  break;
  437|     81|	L->top--;  /* Remove error object. */
  438|     81|	loop_undo(J, nins, nsnap, nsnapmap);
  439|     81|	return 1;  /* Loop optimization failed, continue recording. */
  440|      0|      default:
  ------------------
  |  Branch (440:7): [True: 0, False: 81]
  ------------------
  441|      0|	break;
  442|     81|      }
  443|     81|    }
  444|      0|    lj_err_throw(L, errcode);  /* Propagate all other errors. */
  445|     81|  }
  446|  9.85k|  return 0;  /* Loop optimization is ok. */
  447|  9.93k|}
lj_opt_loop.c:cploop_opt:
  408|  9.93k|{
  409|  9.93k|  UNUSED(L); UNUSED(dummy);
  ------------------
  |  |   91|  9.93k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(dummy);
  ------------------
  |  |   91|  9.93k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  410|  9.93k|  loop_unroll((LoopState *)ud);
  411|  9.93k|  return NULL;
  412|  9.93k|}
lj_opt_loop.c:loop_unroll:
  266|  9.93k|{
  267|  9.93k|  jit_State *J = lps->J;
  268|  9.93k|  IRRef1 phi[LJ_MAX_PHI];
  269|  9.93k|  uint32_t nphi = 0;
  270|  9.93k|  IRRef1 *subst;
  271|  9.93k|  SnapNo onsnap;
  272|  9.93k|  SnapShot *osnap, *loopsnap;
  273|  9.93k|  SnapEntry *loopmap, *psentinel;
  274|  9.93k|  IRRef ins, invar;
  275|       |
  276|       |  /* Allocate substitution table.
  277|       |  ** Only non-constant refs in [REF_BIAS,invar) are valid indexes.
  278|       |  */
  279|  9.93k|  invar = J->cur.nins;
  280|  9.93k|  lps->sizesubst = invar - REF_BIAS;
  281|  9.93k|  lps->subst = lj_mem_newvec(J->L, lps->sizesubst, IRRef1);
  ------------------
  |  |  125|  9.93k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  9.93k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  282|  9.93k|  subst = lps->subst - REF_BIAS;
  283|  9.93k|  subst[REF_BASE] = REF_BASE;
  284|       |
  285|       |  /* LOOP separates the pre-roll from the loop body. */
  286|  9.93k|  emitir_raw(IRTG(IR_LOOP, IRT_NIL), 0, 0);
  ------------------
  |  |   99|  9.93k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  9.93k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  287|       |
  288|       |  /* Grow snapshot buffer and map for copy-substituted snapshots.
  289|       |  ** Need up to twice the number of snapshots minus #0 and loop snapshot.
  290|       |  ** Need up to twice the number of entries plus fallback substitutions
  291|       |  ** from the loop snapshot entries for each new snapshot.
  292|       |  ** Caveat: both calls may reallocate J->cur.snap and J->cur.snapmap!
  293|       |  */
  294|  9.93k|  onsnap = J->cur.nsnap;
  295|  9.93k|  lj_snap_grow_buf(J, 2*onsnap-2);
  296|  9.93k|  lj_snap_grow_map(J, J->cur.nsnapmap*2+(onsnap-2)*J->cur.snap[onsnap-1].nent);
  297|       |
  298|       |  /* The loop snapshot is used for fallback substitutions. */
  299|  9.93k|  loopsnap = &J->cur.snap[onsnap-1];
  300|  9.93k|  loopmap = &J->cur.snapmap[loopsnap->mapofs];
  301|       |  /* The PC of snapshot #0 and the loop snapshot must match. */
  302|  9.93k|  psentinel = &loopmap[loopsnap->nent];
  303|  9.93k|  lj_assertJ(*psentinel == J->cur.snapmap[J->cur.snap[0].nent],
  ------------------
  |  |  527|  9.93k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  9.93k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.93k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 9.93k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  9.93k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  304|  9.93k|	     "mismatched PC for loop snapshot");
  305|  9.93k|  *psentinel = SNAP(255, 0, 0);  /* Replace PC with temporary sentinel. */
  ------------------
  |  |  212|  9.93k|#define SNAP(slot, flags, ref)	(((SnapEntry)(slot) << 24) + (flags) + (ref))
  ------------------
  306|       |
  307|       |  /* Start substitution with snapshot #1 (#0 is empty for root traces). */
  308|  9.93k|  osnap = &J->cur.snap[1];
  309|       |
  310|       |  /* Copy and substitute all recorded instructions and snapshots. */
  311|   474k|  for (ins = REF_FIRST; ins < invar; ins++) {
  ------------------
  |  Branch (311:25): [True: 464k, False: 9.85k]
  ------------------
  312|   464k|    IRIns *ir;
  313|   464k|    IRRef op1, op2;
  314|       |
  315|   464k|    if (ins >= osnap->ref)  /* Instruction belongs to next snapshot? */
  ------------------
  |  Branch (315:9): [True: 23.5k, False: 440k]
  ------------------
  316|  23.5k|      loop_subst_snap(J, osnap++, loopmap, subst);  /* Copy-substitute it. */
  317|       |
  318|       |    /* Substitute instruction operands. */
  319|   464k|    ir = IR(ins);
  ------------------
  |  |   93|   464k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  320|   464k|    op1 = ir->op1;
  321|   464k|    if (!irref_isk(op1)) op1 = subst[op1];
  ------------------
  |  |  485|   464k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (321:9): [True: 370k, False: 93.6k]
  ------------------
  322|   464k|    op2 = ir->op2;
  323|   464k|    if (!irref_isk(op2)) op2 = subst[op2];
  ------------------
  |  |  485|   464k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (323:9): [True: 122k, False: 341k]
  ------------------
  324|   464k|    if (irm_kind(lj_ir_mode[ir->o]) == IRM_N &&
  ------------------
  |  |  303|   464k|#define irm_kind(m)		((m) & IRM_S)
  |  |  ------------------
  |  |  |  |  291|   464k|#define IRM_S			0x60
  |  |  ------------------
  ------------------
                  if (irm_kind(lj_ir_mode[ir->o]) == IRM_N &&
  ------------------
  |  |  287|   928k|#define IRM_N			0x00
  ------------------
  |  Branch (324:9): [True: 240k, False: 224k]
  ------------------
  325|   464k|	op1 == ir->op1 && op2 == ir->op2) {  /* Regular invariant ins? */
  ------------------
  |  Branch (325:2): [True: 81.4k, False: 158k]
  |  Branch (325:20): [True: 71.0k, False: 10.3k]
  ------------------
  326|  71.0k|      subst[ins] = (IRRef1)ins;  /* Shortcut. */
  327|   393k|    } else {
  328|       |      /* Re-emit substituted instruction to the FOLD/CSE/etc. pipeline. */
  329|   393k|      IRType1 t = ir->t;  /* Get this first, since emitir may invalidate ir. */
  330|   393k|      IRRef ref = tref_ref(emitir(ir->ot & ~IRT_ISPHI, op1, op2));
  ------------------
  |  |  504|   393k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  331|   393k|      subst[ins] = (IRRef1)ref;
  332|   393k|      if (ref != ins) {
  ------------------
  |  Branch (332:11): [True: 328k, False: 65.1k]
  ------------------
  333|   328k|	IRIns *irr = IR(ref);
  ------------------
  |  |   93|   328k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  334|   328k|	if (ref < invar) {  /* Loop-carried dependency? */
  ------------------
  |  Branch (334:6): [True: 11.0k, False: 317k]
  ------------------
  335|       |	  /* Potential PHI? */
  336|  11.0k|	  if (!irref_isk(ref) && !irt_isphi(irr->t) && !irt_ispri(irr->t)) {
  ------------------
  |  |  485|  22.0k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
              	  if (!irref_isk(ref) && !irt_isphi(irr->t) && !irt_ispri(irr->t)) {
  ------------------
  |  |  448|  21.7k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
              	  if (!irref_isk(ref) && !irt_isphi(irr->t) && !irt_ispri(irr->t)) {
  ------------------
  |  |  371|  10.4k|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|  10.4k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (336:8): [True: 10.7k, False: 269]
  |  Branch (336:27): [True: 10.4k, False: 282]
  |  Branch (336:49): [True: 10.4k, False: 0]
  ------------------
  337|  10.4k|	    irt_setphi(irr->t);
  ------------------
  |  |  449|  10.4k|#define irt_setphi(t)		((t).irt |= IRT_ISPHI)
  ------------------
  338|  10.4k|	    if (nphi >= LJ_MAX_PHI)
  ------------------
  |  |   86|  10.4k|#define LJ_MAX_PHI	64		/* Max. # of PHIs for a loop. */
  ------------------
  |  Branch (338:10): [True: 0, False: 10.4k]
  ------------------
  339|      0|	      lj_trace_err(J, LJ_TRERR_PHIOV);
  340|  10.4k|	    phi[nphi++] = (IRRef1)ref;
  341|  10.4k|	  }
  342|       |	  /* Check all loop-carried dependencies for type instability. */
  343|  11.0k|	  if (!irt_sametype(t, irr->t)) {
  ------------------
  |  |  366|  11.0k|#define irt_sametype(t1, t2)	((((t1).irt ^ (t2).irt) & IRT_TYPE) == 0)
  ------------------
  |  Branch (343:8): [True: 391, False: 10.6k]
  ------------------
  344|    391|	    if (irt_isinteger(t) && irt_isinteger(irr->t))
  ------------------
  |  |  389|    782|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|    391|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 0, False: 391]
  |  |  ------------------
  ------------------
              	    if (irt_isinteger(t) && irt_isinteger(irr->t))
  ------------------
  |  |  389|      0|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|      0|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  345|      0|	      continue;
  346|    391|	    else if (irt_isnum(t) && irt_isinteger(irr->t))  /* Fix int->num. */
  ------------------
  |  |  377|    782|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|    391|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 356, False: 35]
  |  |  ------------------
  ------------------
              	    else if (irt_isnum(t) && irt_isinteger(irr->t))  /* Fix int->num. */
  ------------------
  |  |  389|    356|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|    356|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 316, False: 40]
  |  |  ------------------
  ------------------
  347|    316|	      ref = tref_ref(emitir(IRTN(IR_CONV), ref, IRCONV_NUM_INT));
  ------------------
  |  |  504|    316|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  348|     75|	    else if (irt_isnum(irr->t) && irt_isinteger(t))  /* Fix num->int. */
  ------------------
  |  |  377|    150|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|     75|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 75]
  |  |  ------------------
  ------------------
              	    else if (irt_isnum(irr->t) && irt_isinteger(t))  /* Fix num->int. */
  ------------------
  |  |  389|      0|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|      0|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  349|      0|	      ref = tref_ref(emitir(IRTGI(IR_CONV), ref,
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  350|     75|				    IRCONV_INT_NUM|IRCONV_CHECK));
  351|     75|	    else
  352|     75|	      lj_trace_err(J, LJ_TRERR_TYPEINS);
  353|    316|	    subst[ins] = (IRRef1)ref;
  354|    316|	    irr = IR(ref);
  ------------------
  |  |   93|    316|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  355|    316|	    goto phiconv;
  356|    391|	  }
  357|   317k|	} else if (ref != REF_DROP && ref > invar &&
  ------------------
  |  Branch (357:13): [True: 316k, False: 169]
  |  Branch (357:32): [True: 316k, False: 0]
  ------------------
  358|   317k|		   ((irr->o == IR_CONV && irr->op1 < invar) ||
  ------------------
  |  Branch (358:8): [True: 14.2k, False: 302k]
  |  Branch (358:29): [True: 4.58k, False: 9.63k]
  ------------------
  359|   316k|		    (irr->o == IR_ALEN && irr->op2 < invar &&
  ------------------
  |  Branch (359:8): [True: 0, False: 312k]
  |  Branch (359:29): [True: 0, False: 0]
  ------------------
  360|   312k|					  irr->op2 != REF_NIL))) {
  ------------------
  |  Branch (360:8): [True: 0, False: 0]
  ------------------
  361|       |	  /* May need an extra PHI for a CONV or ALEN hint. */
  362|  4.58k|	  ref = irr->o == IR_CONV ? irr->op1 : irr->op2;
  ------------------
  |  Branch (362:10): [True: 4.58k, False: 0]
  ------------------
  363|  4.58k|	  irr = IR(ref);
  ------------------
  |  |   93|  4.58k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  364|  4.90k|	phiconv:
  365|  4.90k|	  if (ref < invar && !irref_isk(ref) && !irt_isphi(irr->t)) {
  ------------------
  |  |  485|  9.52k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
              	  if (ref < invar && !irref_isk(ref) && !irt_isphi(irr->t)) {
  ------------------
  |  |  448|  4.58k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  ------------------
  |  Branch (365:8): [True: 4.62k, False: 282]
  |  Branch (365:23): [True: 4.58k, False: 34]
  |  Branch (365:42): [True: 0, False: 4.58k]
  ------------------
  366|      0|	    irt_setphi(irr->t);
  ------------------
  |  |  449|      0|#define irt_setphi(t)		((t).irt |= IRT_ISPHI)
  ------------------
  367|      0|	    if (nphi >= LJ_MAX_PHI)
  ------------------
  |  |   86|      0|#define LJ_MAX_PHI	64		/* Max. # of PHIs for a loop. */
  ------------------
  |  Branch (367:10): [True: 0, False: 0]
  ------------------
  368|      0|	      lj_trace_err(J, LJ_TRERR_PHIOV);
  369|      0|	    phi[nphi++] = (IRRef1)ref;
  370|      0|	  }
  371|  4.90k|	}
  372|   328k|      }
  373|   393k|    }
  374|   464k|  }
  375|  9.85k|  if (!irt_isguard(J->guardemit))  /* Drop redundant snapshot. */
  ------------------
  |  |  444|  9.85k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  ------------------
  |  Branch (375:7): [True: 101, False: 9.75k]
  ------------------
  376|    101|    J->cur.nsnapmap = (uint32_t)J->cur.snap[--J->cur.nsnap].mapofs;
  377|  9.85k|  lj_assertJ(J->cur.nsnapmap <= J->sizesnapmap, "bad snapshot map index");
  ------------------
  |  |  527|  9.85k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  9.85k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.85k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 9.85k, False: 6]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  9.85k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  378|  9.85k|  *psentinel = J->cur.snapmap[J->cur.snap[0].nent];  /* Restore PC. */
  379|       |
  380|  9.85k|  loop_emit_phi(J, subst, phi, nphi, onsnap);
  381|  9.85k|}
lj_opt_loop.c:loop_subst_snap:
  210|  23.5k|{
  211|  23.5k|  SnapEntry *nmap, *omap = &J->cur.snapmap[osnap->mapofs];
  212|  23.5k|  SnapEntry *nextmap = &J->cur.snapmap[snap_nextofs(&J->cur, osnap)];
  213|  23.5k|  MSize nmapofs;
  214|  23.5k|  MSize on, ln, nn, onent = osnap->nent;
  215|  23.5k|  BCReg nslots = osnap->nslots;
  216|  23.5k|  SnapShot *snap = &J->cur.snap[J->cur.nsnap];
  217|  23.5k|  if (irt_isguard(J->guardemit)) {  /* Guard inbetween? */
  ------------------
  |  |  444|  23.5k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 23.1k, False: 479]
  |  |  ------------------
  ------------------
  218|  23.1k|    nmapofs = J->cur.nsnapmap;
  219|  23.1k|    J->cur.nsnap++;  /* Add new snapshot. */
  220|  23.1k|  } else {  /* Otherwise overwrite previous snapshot. */
  221|    479|    snap--;
  222|    479|    nmapofs = snap->mapofs;
  223|    479|  }
  224|  23.5k|  J->guardemit.irt = 0;
  225|       |  /* Setup new snapshot. */
  226|  23.5k|  snap->mapofs = (uint32_t)nmapofs;
  227|  23.5k|  snap->ref = (IRRef1)J->cur.nins;
  228|  23.5k|  snap->mcofs = 0;
  229|  23.5k|  snap->nslots = nslots;
  230|  23.5k|  snap->topslot = osnap->topslot;
  231|  23.5k|  snap->count = 0;
  232|  23.5k|  nmap = &J->cur.snapmap[nmapofs];
  233|       |  /* Substitute snapshot slots. */
  234|  23.5k|  on = ln = nn = 0;
  235|   134k|  while (on < onent) {
  ------------------
  |  Branch (235:10): [True: 111k, False: 23.5k]
  ------------------
  236|   111k|    SnapEntry osn = omap[on], lsn = loopmap[ln];
  237|   111k|    if (snap_slot(lsn) < snap_slot(osn)) {  /* Copy slot from loop map. */
  ------------------
  |  |  221|   111k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
                  if (snap_slot(lsn) < snap_slot(osn)) {  /* Copy slot from loop map. */
  ------------------
  |  |  221|   111k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  |  Branch (237:9): [True: 124, False: 111k]
  ------------------
  238|    124|      nmap[nn++] = lsn;
  239|    124|      ln++;
  240|   111k|    } else {  /* Copy substituted slot from snapshot map. */
  241|   111k|      if (snap_slot(lsn) == snap_slot(osn)) ln++;  /* Shadowed loop slot. */
  ------------------
  |  |  221|   111k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
                    if (snap_slot(lsn) == snap_slot(osn)) ln++;  /* Shadowed loop slot. */
  ------------------
  |  |  221|   111k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  |  Branch (241:11): [True: 28.3k, False: 82.9k]
  ------------------
  242|   111k|      if (!irref_isk(snap_ref(osn)))
  ------------------
  |  |  485|   111k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (242:11): [True: 75.6k, False: 35.6k]
  ------------------
  243|  75.6k|	osn = snap_setref(osn, subst[snap_ref(osn)]);
  ------------------
  |  |  223|  75.6k|#define snap_setref(sn, ref)	(((sn) & (0xffff0000&~SNAP_NORESTORE)) | (ref))
  |  |  ------------------
  |  |  |  |  205|  75.6k|#define SNAP_NORESTORE		0x040000	/* No need to restore slot. */
  |  |  ------------------
  ------------------
  244|   111k|      nmap[nn++] = osn;
  245|   111k|      on++;
  246|   111k|    }
  247|   111k|  }
  248|  24.4k|  while (snap_slot(loopmap[ln]) < nslots)  /* Copy remaining loop slots. */
  ------------------
  |  |  221|  24.4k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  |  Branch (248:10): [True: 815, False: 23.5k]
  ------------------
  249|    815|    nmap[nn++] = loopmap[ln++];
  250|  23.5k|  snap->nent = (uint8_t)nn;
  251|  23.5k|  omap += onent;
  252|  23.5k|  nmap += nn;
  253|  70.7k|  while (omap < nextmap)  /* Copy PC + frame links. */
  ------------------
  |  Branch (253:10): [True: 47.1k, False: 23.5k]
  ------------------
  254|  47.1k|    *nmap++ = *omap++;
  255|  23.5k|  J->cur.nsnapmap = (uint32_t)(nmap - J->cur.snapmap);
  256|  23.5k|}
lj_opt_loop.c:loop_emit_phi:
  106|  9.85k|{
  107|  9.85k|  int passx = 0;
  108|  9.85k|  IRRef i, j, nslots;
  109|  9.85k|  IRRef invar = J->chain[IR_LOOP];
  110|       |  /* Pass #1: mark redundant and potentially redundant PHIs. */
  111|  20.2k|  for (i = 0, j = 0; i < nphi; i++) {
  ------------------
  |  Branch (111:22): [True: 10.3k, False: 9.85k]
  ------------------
  112|  10.3k|    IRRef lref = phi[i];
  113|  10.3k|    IRRef rref = subst[lref];
  114|  10.3k|    if (lref == rref || rref == REF_DROP) {  /* Invariants are redundant. */
  ------------------
  |  Branch (114:9): [True: 175, False: 10.1k]
  |  Branch (114:25): [True: 0, False: 10.1k]
  ------------------
  115|    175|      irt_clearphi(IR(lref)->t);
  ------------------
  |  |  450|    175|#define irt_clearphi(t)		((t).irt &= ~IRT_ISPHI)
  ------------------
  116|  10.1k|    } else {
  117|  10.1k|      phi[j++] = (IRRef1)lref;
  118|  10.1k|      if (!(IR(rref)->op1 == lref || IR(rref)->op2 == lref)) {
  ------------------
  |  |   93|  10.1k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                    if (!(IR(rref)->op1 == lref || IR(rref)->op2 == lref)) {
  ------------------
  |  |   93|    482|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (118:13): [True: 9.69k, False: 482]
  |  Branch (118:38): [True: 122, False: 360]
  ------------------
  119|       |	/* Quick check for simple recurrences failed, need pass2. */
  120|    360|	irt_setmark(IR(lref)->t);
  ------------------
  |  |  446|    360|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  121|    360|	passx = 1;
  122|    360|      }
  123|  10.1k|    }
  124|  10.3k|  }
  125|  9.85k|  nphi = j;
  126|       |  /* Pass #2: traverse variant part and clear marks of non-redundant PHIs. */
  127|  9.85k|  if (passx) {
  ------------------
  |  Branch (127:7): [True: 334, False: 9.51k]
  ------------------
  128|    334|    SnapNo s;
  129|  3.69k|    for (i = J->cur.nins-1; i > invar; i--) {
  ------------------
  |  Branch (129:29): [True: 3.36k, False: 334]
  ------------------
  130|  3.36k|      IRIns *ir = IR(i);
  ------------------
  |  |   93|  3.36k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  131|  3.36k|      if (!irref_isk(ir->op2)) irt_clearmark(IR(ir->op2)->t);
  ------------------
  |  |  485|  3.36k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
                    if (!irref_isk(ir->op2)) irt_clearmark(IR(ir->op2)->t);
  ------------------
  |  |  447|  1.40k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  |  Branch (131:11): [True: 1.40k, False: 1.95k]
  ------------------
  132|  3.36k|      if (!irref_isk(ir->op1)) {
  ------------------
  |  |  485|  3.36k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (132:11): [True: 3.34k, False: 24]
  ------------------
  133|  3.34k|	irt_clearmark(IR(ir->op1)->t);
  ------------------
  |  |  447|  3.34k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  134|  3.34k|	if (ir->op1 < invar &&
  ------------------
  |  Branch (134:6): [True: 1.21k, False: 2.12k]
  ------------------
  135|  3.34k|	    ir->o >= IR_CALLN && ir->o <= IR_CARG) {  /* ORDER IR */
  ------------------
  |  Branch (135:6): [True: 233, False: 985]
  |  Branch (135:27): [True: 233, False: 0]
  ------------------
  136|    233|	  ir = IR(ir->op1);
  ------------------
  |  |   93|    233|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  137|    233|	  while (ir->o == IR_CARG) {
  ------------------
  |  Branch (137:11): [True: 0, False: 233]
  ------------------
  138|      0|	    if (!irref_isk(ir->op2)) irt_clearmark(IR(ir->op2)->t);
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
              	    if (!irref_isk(ir->op2)) irt_clearmark(IR(ir->op2)->t);
  ------------------
  |  |  447|      0|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  |  Branch (138:10): [True: 0, False: 0]
  ------------------
  139|      0|	    if (irref_isk(ir->op1)) break;
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  140|      0|	    ir = IR(ir->op1);
  ------------------
  |  |   93|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  141|      0|	    irt_clearmark(ir->t);
  ------------------
  |  |  447|      0|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  142|      0|	  }
  143|    233|	}
  144|  3.34k|      }
  145|  3.36k|    }
  146|    937|    for (s = J->cur.nsnap-1; s >= onsnap; s--) {
  ------------------
  |  Branch (146:30): [True: 603, False: 334]
  ------------------
  147|    603|      SnapShot *snap = &J->cur.snap[s];
  148|    603|      SnapEntry *map = &J->cur.snapmap[snap->mapofs];
  149|    603|      MSize n, nent = snap->nent;
  150|  1.87k|      for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (150:19): [True: 1.26k, False: 603]
  ------------------
  151|  1.26k|	IRRef ref = snap_ref(map[n]);
  ------------------
  |  |  220|  1.26k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  152|  1.26k|	if (!irref_isk(ref)) irt_clearmark(IR(ref)->t);
  ------------------
  |  |  485|  1.26k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
              	if (!irref_isk(ref)) irt_clearmark(IR(ref)->t);
  ------------------
  |  |  447|    899|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  |  Branch (152:6): [True: 899, False: 370]
  ------------------
  153|  1.26k|      }
  154|    603|    }
  155|    334|  }
  156|       |  /* Pass #3: add PHIs for variant slots without a corresponding SLOAD. */
  157|  9.85k|  nslots = J->baseslot+J->maxslot;
  158|   119k|  for (i = 1; i < nslots; i++) {
  ------------------
  |  Branch (158:15): [True: 109k, False: 9.85k]
  ------------------
  159|   109k|    IRRef ref = tref_ref(J->slot[i]);
  ------------------
  |  |  504|   109k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  160|   109k|    while (!irref_isk(ref) && ref != subst[ref]) {
  ------------------
  |  |  485|   219k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (160:12): [True: 47.4k, False: 62.4k]
  |  Branch (160:31): [True: 19.9k, False: 27.4k]
  ------------------
  161|  19.9k|      IRIns *ir = IR(ref);
  ------------------
  |  |   93|  19.9k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  162|  19.9k|      irt_clearmark(ir->t);  /* Unmark potential uses, too. */
  ------------------
  |  |  447|  19.9k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  163|  19.9k|      if (irt_isphi(ir->t) || irt_ispri(ir->t))
  ------------------
  |  |  448|  39.8k|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 19.1k, False: 776]
  |  |  ------------------
  ------------------
                    if (irt_isphi(ir->t) || irt_ispri(ir->t))
  ------------------
  |  |  371|    776|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|    776|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (371:23): [True: 0, False: 776]
  |  |  ------------------
  ------------------
  164|  19.1k|	break;
  165|    776|      irt_setphi(ir->t);
  ------------------
  |  |  449|    776|#define irt_setphi(t)		((t).irt |= IRT_ISPHI)
  ------------------
  166|    776|      if (nphi >= LJ_MAX_PHI)
  ------------------
  |  |   86|    776|#define LJ_MAX_PHI	64		/* Max. # of PHIs for a loop. */
  ------------------
  |  Branch (166:11): [True: 0, False: 776]
  ------------------
  167|      0|	lj_trace_err(J, LJ_TRERR_PHIOV);
  168|    776|      phi[nphi++] = (IRRef1)ref;
  169|    776|      ref = subst[ref];
  170|    776|      if (ref > invar)
  ------------------
  |  Branch (170:11): [True: 776, False: 0]
  ------------------
  171|    776|	break;
  172|    776|    }
  173|   109k|  }
  174|       |  /* Pass #4: propagate non-redundant PHIs. */
  175|  10.1k|  while (passx) {
  ------------------
  |  Branch (175:10): [True: 334, False: 9.85k]
  ------------------
  176|    334|    passx = 0;
  177|  1.40k|    for (i = 0; i < nphi; i++) {
  ------------------
  |  Branch (177:17): [True: 1.07k, False: 334]
  ------------------
  178|  1.07k|      IRRef lref = phi[i];
  179|  1.07k|      IRIns *ir = IR(lref);
  ------------------
  |  |   93|  1.07k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  180|  1.07k|      if (!irt_ismarked(ir->t)) {  /* Propagate only from unmarked PHIs. */
  ------------------
  |  |  445|  1.07k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  ------------------
  |  Branch (180:11): [True: 1.05k, False: 23]
  ------------------
  181|  1.05k|	IRIns *irr = IR(subst[lref]);
  ------------------
  |  |   93|  1.05k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  182|  1.05k|	if (irt_ismarked(irr->t)) {  /* Right ref points to other PHI? */
  ------------------
  |  |  445|  1.05k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 0, False: 1.05k]
  |  |  ------------------
  ------------------
  183|      0|	  irt_clearmark(irr->t);  /* Mark that PHI as non-redundant. */
  ------------------
  |  |  447|      0|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  184|      0|	  passx = 1;  /* Retry. */
  185|      0|	}
  186|  1.05k|      }
  187|  1.07k|    }
  188|    334|  }
  189|       |  /* Pass #5: emit PHI instructions or eliminate PHIs. */
  190|  20.8k|  for (i = 0; i < nphi; i++) {
  ------------------
  |  Branch (190:15): [True: 10.9k, False: 9.85k]
  ------------------
  191|  10.9k|    IRRef lref = phi[i];
  192|  10.9k|    IRIns *ir = IR(lref);
  ------------------
  |  |   93|  10.9k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  193|  10.9k|    if (!irt_ismarked(ir->t)) {  /* Emit PHI if not marked. */
  ------------------
  |  |  445|  10.9k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  ------------------
  |  Branch (193:9): [True: 10.9k, False: 23]
  ------------------
  194|  10.9k|      IRRef rref = subst[lref];
  195|  10.9k|      if (rref > invar)
  ------------------
  |  Branch (195:11): [True: 10.9k, False: 0]
  ------------------
  196|  10.9k|	irt_setphi(IR(rref)->t);
  ------------------
  |  |  449|  10.9k|#define irt_setphi(t)		((t).irt |= IRT_ISPHI)
  ------------------
  197|  10.9k|      emitir_raw(IRT(IR_PHI, irt_type(ir->t)), lref, rref);
  ------------------
  |  |   99|  10.9k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  10.9k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  198|  10.9k|    } else {  /* Otherwise eliminate PHI. */
  199|     23|      irt_clearmark(ir->t);
  ------------------
  |  |  447|     23|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  200|     23|      irt_clearphi(ir->t);
  ------------------
  |  |  450|     23|#define irt_clearphi(t)		((t).irt &= ~IRT_ISPHI)
  ------------------
  201|     23|    }
  202|  10.9k|  }
  203|  9.85k|}
lj_opt_loop.c:loop_undo:
  385|     81|{
  386|     81|  ptrdiff_t i;
  387|     81|  SnapShot *snap = &J->cur.snap[nsnap-1];
  388|     81|  SnapEntry *map = J->cur.snapmap;
  389|     81|  map[snap->mapofs + snap->nent] = map[J->cur.snap[0].nent];  /* Restore PC. */
  390|     81|  J->cur.nsnapmap = (uint32_t)nsnapmap;
  391|     81|  J->cur.nsnap = nsnap;
  392|     81|  J->guardemit.irt = 0;
  393|     81|  lj_ir_rollback(J, ins);
  394|  1.37k|  for (i = 0; i < BPROP_SLOTS; i++) {  /* Remove backprop. cache entries. */
  ------------------
  |  |  330|  1.37k|#define BPROP_SLOTS	16
  ------------------
  |  Branch (394:15): [True: 1.29k, False: 81]
  ------------------
  395|  1.29k|    BPropEntry *bp = &J->bpropcache[i];
  396|  1.29k|    if (bp->val >= ins)
  ------------------
  |  Branch (396:9): [True: 0, False: 1.29k]
  ------------------
  397|      0|      bp->key = 0;
  398|  1.29k|  }
  399|    594|  for (ins--; ins >= REF_FIRST; ins--) {  /* Remove flags. */
  ------------------
  |  Branch (399:15): [True: 513, False: 81]
  ------------------
  400|    513|    IRIns *ir = IR(ins);
  ------------------
  |  |   93|    513|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  401|    513|    irt_clearphi(ir->t);
  ------------------
  |  |  450|    513|#define irt_clearphi(t)		((t).irt &= ~IRT_ISPHI)
  ------------------
  402|    513|    irt_clearmark(ir->t);
  ------------------
  |  |  447|    513|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  403|    513|  }
  404|     81|}

lj_opt_fwd_tptr:
   91|  47.6k|{
   92|  47.6k|  IRRef ta = fins->op1;
  ------------------
  |  |   25|  47.6k|#define fins		(&J->fold.ins)
  ------------------
   93|  47.6k|  IRRef ref = J->chain[IR_NEWREF];
   94|  47.6k|  while (ref > lim) {
  ------------------
  |  Branch (94:10): [True: 145, False: 47.5k]
  ------------------
   95|    145|    IRIns *newref = IR(ref);
  ------------------
  |  |   24|    145|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   96|    145|    if (ta == newref->op1 || aa_table(J, ta, newref->op1) != ALIAS_NO)
  ------------------
  |  Branch (96:9): [True: 129, False: 16]
  |  Branch (96:30): [True: 16, False: 0]
  ------------------
   97|    145|      return 0;  /* Conflict. */
   98|      0|    ref = newref->prev;
   99|      0|  }
  100|  47.5k|  return fwd_aa_tab_clear(J, lim, ta);
  101|  47.6k|}
lj_opt_fwd_aload:
  280|  1.00k|{
  281|  1.00k|  IRRef ref;
  282|  1.00k|  if ((ref = fwd_ahload(J, fins->op1)) ||
  ------------------
  |  |   25|  1.00k|#define fins		(&J->fold.ins)
  ------------------
  |  Branch (282:7): [True: 137, False: 864]
  ------------------
  283|  1.00k|      (ref = fwd_aload_reassoc(J)))
  ------------------
  |  Branch (283:7): [True: 28, False: 836]
  ------------------
  284|    165|    return ref;
  285|    836|  return EMITFOLD;
  ------------------
  |  |  121|    836|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  286|  1.00k|}
lj_opt_fwd_hload:
  290|  20.3k|{
  291|  20.3k|  IRRef ref = fwd_ahload(J, fins->op1);
  ------------------
  |  |   25|  20.3k|#define fins		(&J->fold.ins)
  ------------------
  292|  20.3k|  if (ref)
  ------------------
  |  Branch (292:7): [True: 8.87k, False: 11.4k]
  ------------------
  293|  8.87k|    return ref;
  294|  11.4k|  return EMITFOLD;
  ------------------
  |  |  121|  11.4k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  295|  20.3k|}
lj_opt_fwd_hrefk:
  299|  14.1k|{
  300|  14.1k|  IRRef tab = fleft->op1;
  ------------------
  |  |   26|  14.1k|#define fleft		(J->fold.left)
  ------------------
  301|  14.1k|  IRRef ref = J->chain[IR_NEWREF];
  302|  14.1k|  while (ref > tab) {
  ------------------
  |  Branch (302:10): [True: 0, False: 14.1k]
  ------------------
  303|      0|    IRIns *newref = IR(ref);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  304|      0|    if (tab == newref->op1) {
  ------------------
  |  Branch (304:9): [True: 0, False: 0]
  ------------------
  305|      0|      if (fright->op1 == newref->op2 && fwd_aa_tab_clear(J, ref, tab))
  ------------------
  |  |   27|      0|#define fright		(J->fold.right)
  ------------------
  |  Branch (305:11): [True: 0, False: 0]
  |  Branch (305:41): [True: 0, False: 0]
  ------------------
  306|      0|	return ref;  /* Forward from NEWREF. */
  307|      0|      else
  308|      0|	goto docse;
  309|      0|    } else if (aa_table(J, tab, newref->op1) != ALIAS_NO) {
  ------------------
  |  Branch (309:16): [True: 0, False: 0]
  ------------------
  310|      0|      goto docse;
  311|      0|    }
  312|      0|    ref = newref->prev;
  313|      0|  }
  314|       |  /* No conflicting NEWREF: key location unchanged for HREFK of TDUP. */
  315|  14.1k|  if (IR(tab)->o == IR_TDUP && fwd_aa_tab_clear(J, tab, tab))
  ------------------
  |  |   24|  14.1k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (315:7): [True: 7, False: 14.1k]
  |  Branch (315:32): [True: 7, False: 0]
  ------------------
  316|      7|    fins->t.irt &= ~IRT_GUARD;  /* Drop HREFK guard. */
  ------------------
  |  |   25|      7|#define fins		(&J->fold.ins)
  ------------------
  317|  14.1k|docse:
  318|  14.1k|  return CSEFOLD;
  ------------------
  |  |  120|  14.1k|#define CSEFOLD		(lj_opt_cse(J))
  ------------------
  319|  14.1k|}
lj_opt_dse_ahstore:
  351|  2.88k|{
  352|  2.88k|  IRRef xref = fins->op1;  /* xREF reference. */
  ------------------
  |  |   25|  2.88k|#define fins		(&J->fold.ins)
  ------------------
  353|  2.88k|  IRRef val = fins->op2;  /* Stored value reference. */
  ------------------
  |  |   25|  2.88k|#define fins		(&J->fold.ins)
  ------------------
  354|  2.88k|  IRIns *xr = IR(xref);
  ------------------
  |  |   24|  2.88k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  355|  2.88k|  IRRef1 *refp = &J->chain[fins->o];
  ------------------
  |  |   25|  2.88k|#define fins		(&J->fold.ins)
  ------------------
  356|  2.88k|  IRRef ref = *refp;
  357|  3.17k|  while (ref > xref) {  /* Search for redundant or conflicting stores. */
  ------------------
  |  Branch (357:10): [True: 1.00k, False: 2.17k]
  ------------------
  358|  1.00k|    IRIns *store = IR(ref);
  ------------------
  |  |   24|  1.00k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  359|  1.00k|    switch (aa_ahref(J, xr, IR(store->op1))) {
  ------------------
  |  |   24|  1.00k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (359:13): [True: 0, False: 1.00k]
  ------------------
  360|    290|    case ALIAS_NO:
  ------------------
  |  Branch (360:5): [True: 290, False: 712]
  ------------------
  361|    290|      break;  /* Continue searching. */
  362|      0|    case ALIAS_MAY:	/* Store to MAYBE the same location. */
  ------------------
  |  Branch (362:5): [True: 0, False: 1.00k]
  ------------------
  363|      0|      if (store->op2 != val)  /* Conflict if the value is different. */
  ------------------
  |  Branch (363:11): [True: 0, False: 0]
  ------------------
  364|      0|	goto doemit;
  365|      0|      break;  /* Otherwise continue searching. */
  366|    712|    case ALIAS_MUST:	/* Store to the same location. */
  ------------------
  |  Branch (366:5): [True: 712, False: 290]
  ------------------
  367|    712|      if (store->op2 == val)  /* Same value: drop the new store. */
  ------------------
  |  Branch (367:11): [True: 101, False: 611]
  ------------------
  368|    101|	return DROPFOLD;
  369|       |      /* Different value: try to eliminate the redundant store. */
  370|    611|      if (ref > J->chain[IR_LOOP]) {  /* Quick check to avoid crossing LOOP. */
  ------------------
  |  Branch (370:11): [True: 174, False: 437]
  ------------------
  371|    174|	IRIns *ir;
  372|       |	/* Check for any intervening guards (includes conflicting loads).
  373|       |	** Note that lj_tab_keyindex and lj_vm_next don't need guards,
  374|       |	** since they are followed by at least one guarded VLOAD.
  375|       |	*/
  376|    344|	for (ir = IR(J->cur.nins-1); ir > store; ir--)
  ------------------
  |  |   24|    174|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (376:31): [True: 174, False: 170]
  ------------------
  377|    174|	  if (irt_isguard(ir->t) || ir->o == IR_ALEN)
  ------------------
  |  |  444|    348|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 4, False: 170]
  |  |  ------------------
  ------------------
  |  Branch (377:30): [True: 0, False: 170]
  ------------------
  378|      4|	    goto doemit;  /* No elimination possible. */
  379|       |	/* Remove redundant store from chain and replace with NOP. */
  380|    170|	*refp = store->prev;
  381|    170|	lj_ir_nop(store);
  382|       |	/* Now emit the new store instead. */
  383|    170|      }
  384|    607|      goto doemit;
  385|  1.00k|    }
  386|    290|    ref = *(refp = &store->prev);
  387|    290|  }
  388|  2.78k|doemit:
  389|  2.78k|  return EMITFOLD;  /* Otherwise we have a conflict or simply no match. */
  ------------------
  |  |  121|  2.78k|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  390|  2.88k|}
lj_opt_fwd_uload:
  487|    407|{
  488|    407|  IRRef uref = fins->op1;
  ------------------
  |  |   25|    407|#define fins		(&J->fold.ins)
  ------------------
  489|    407|  IRRef lim = REF_BASE;  /* Search limit. */
  490|    407|  IRIns *xr = IR(uref);
  ------------------
  |  |   24|    407|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  491|    407|  IRRef ref;
  492|       |
  493|       |  /* Search for conflicting stores. */
  494|    407|  ref = J->chain[IR_USTORE];
  495|    407|  while (ref > lim) {
  ------------------
  |  Branch (495:10): [True: 0, False: 407]
  ------------------
  496|      0|    IRIns *store = IR(ref);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  497|      0|    switch (aa_uref(xr, IR(store->op1))) {
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (497:13): [True: 0, False: 0]
  ------------------
  498|      0|    case ALIAS_NO:   break;  /* Continue searching. */
  ------------------
  |  Branch (498:5): [True: 0, False: 0]
  ------------------
  499|      0|    case ALIAS_MAY:  lim = ref; goto cselim;  /* Limit search for load. */
  ------------------
  |  Branch (499:5): [True: 0, False: 0]
  ------------------
  500|      0|    case ALIAS_MUST: return store->op2;  /* Store forwarding. */
  ------------------
  |  Branch (500:5): [True: 0, False: 0]
  ------------------
  501|      0|    }
  502|      0|    ref = store->prev;
  503|      0|  }
  504|       |
  505|    407|cselim:
  506|       |  /* Try to find a matching load. Below the conflicting store, if any. */
  507|    407|  ref = J->chain[IR_ULOAD];
  508|    453|  while (ref > lim) {
  ------------------
  |  Branch (508:10): [True: 185, False: 268]
  ------------------
  509|    185|    IRIns *ir = IR(ref);
  ------------------
  |  |   24|    185|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  510|    185|    if (ir->op1 == uref ||
  ------------------
  |  Branch (510:9): [True: 139, False: 46]
  ------------------
  511|    185|	(IR(ir->op1)->op12 == IR(uref)->op12 && IR(ir->op1)->o == IR(uref)->o))
  ------------------
  |  |   24|     46|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
              	(IR(ir->op1)->op12 == IR(uref)->op12 && IR(ir->op1)->o == IR(uref)->o))
  ------------------
  |  |   24|     46|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
              	(IR(ir->op1)->op12 == IR(uref)->op12 && IR(ir->op1)->o == IR(uref)->o))
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
              	(IR(ir->op1)->op12 == IR(uref)->op12 && IR(ir->op1)->o == IR(uref)->o))
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (511:3): [True: 0, False: 46]
  |  Branch (511:42): [True: 0, False: 0]
  ------------------
  512|    139|      return ref;  /* Match for identical or equal UREFx (non-CSEable UREFO). */
  513|     46|    ref = ir->prev;
  514|     46|  }
  515|    268|  return lj_ir_emit(J);
  516|    407|}
lj_opt_dse_ustore:
  520|      3|{
  521|      3|  IRRef xref = fins->op1;  /* xREF reference. */
  ------------------
  |  |   25|      3|#define fins		(&J->fold.ins)
  ------------------
  522|      3|  IRRef val = fins->op2;  /* Stored value reference. */
  ------------------
  |  |   25|      3|#define fins		(&J->fold.ins)
  ------------------
  523|      3|  IRIns *xr = IR(xref);
  ------------------
  |  |   24|      3|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  524|      3|  IRRef1 *refp = &J->chain[IR_USTORE];
  525|      3|  IRRef ref = *refp;
  526|      3|  while (ref > xref) {  /* Search for redundant or conflicting stores. */
  ------------------
  |  Branch (526:10): [True: 0, False: 3]
  ------------------
  527|      0|    IRIns *store = IR(ref);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  528|      0|    switch (aa_uref(xr, IR(store->op1))) {
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (528:13): [True: 0, False: 0]
  ------------------
  529|      0|    case ALIAS_NO:
  ------------------
  |  Branch (529:5): [True: 0, False: 0]
  ------------------
  530|      0|      break;  /* Continue searching. */
  531|      0|    case ALIAS_MAY:	/* Store to MAYBE the same location. */
  ------------------
  |  Branch (531:5): [True: 0, False: 0]
  ------------------
  532|      0|      if (store->op2 != val)  /* Conflict if the value is different. */
  ------------------
  |  Branch (532:11): [True: 0, False: 0]
  ------------------
  533|      0|	goto doemit;
  534|      0|      break;  /* Otherwise continue searching. */
  535|      0|    case ALIAS_MUST:	/* Store to the same location. */
  ------------------
  |  Branch (535:5): [True: 0, False: 0]
  ------------------
  536|      0|      if (store->op2 == val)  /* Same value: drop the new store. */
  ------------------
  |  Branch (536:11): [True: 0, False: 0]
  ------------------
  537|      0|	return DROPFOLD;
  538|       |      /* Different value: try to eliminate the redundant store. */
  539|      0|      if (ref > J->chain[IR_LOOP]) {  /* Quick check to avoid crossing LOOP. */
  ------------------
  |  Branch (539:11): [True: 0, False: 0]
  ------------------
  540|      0|	IRIns *ir;
  541|       |	/* Check for any intervening guards (includes conflicting loads). */
  542|      0|	for (ir = IR(J->cur.nins-1); ir > store; ir--)
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (542:31): [True: 0, False: 0]
  ------------------
  543|      0|	  if (irt_isguard(ir->t))
  ------------------
  |  |  444|      0|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  544|      0|	    goto doemit;  /* No elimination possible. */
  545|       |	/* Remove redundant store from chain and replace with NOP. */
  546|      0|	*refp = store->prev;
  547|      0|	lj_ir_nop(store);
  548|      0|	if (ref+1 < J->cur.nins &&
  ------------------
  |  Branch (548:6): [True: 0, False: 0]
  ------------------
  549|      0|	    store[1].o == IR_OBAR && store[1].op1 == xref) {
  ------------------
  |  Branch (549:6): [True: 0, False: 0]
  |  Branch (549:31): [True: 0, False: 0]
  ------------------
  550|      0|	  IRRef1 *bp = &J->chain[IR_OBAR];
  551|      0|	  IRIns *obar;
  552|      0|	  for (obar = IR(*bp); *bp > ref+1; obar = IR(*bp))
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
              	  for (obar = IR(*bp); *bp > ref+1; obar = IR(*bp))
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (552:25): [True: 0, False: 0]
  ------------------
  553|      0|	    bp = &obar->prev;
  554|       |	  /* Remove OBAR, too. */
  555|      0|	  *bp = obar->prev;
  556|      0|	  lj_ir_nop(obar);
  557|      0|	}
  558|       |	/* Now emit the new store instead. */
  559|      0|      }
  560|      0|      goto doemit;
  561|      0|    }
  562|      0|    ref = *(refp = &store->prev);
  563|      0|  }
  564|      3|doemit:
  565|      3|  return EMITFOLD;  /* Otherwise we have a conflict or simply no match. */
  ------------------
  |  |  121|      3|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  566|      3|}
lj_opt_fwd_fload:
  588|  15.2k|{
  589|  15.2k|  IRRef oref = fins->op1;  /* Object reference. */
  ------------------
  |  |   25|  15.2k|#define fins		(&J->fold.ins)
  ------------------
  590|  15.2k|  IRRef fid = fins->op2;  /* Field ID. */
  ------------------
  |  |   25|  15.2k|#define fins		(&J->fold.ins)
  ------------------
  591|  15.2k|  IRRef lim = oref;  /* Search limit. */
  592|  15.2k|  IRRef ref;
  593|       |
  594|       |  /* Search for conflicting stores. */
  595|  15.2k|  ref = J->chain[IR_FSTORE];
  596|  15.2k|  while (ref > oref) {
  ------------------
  |  Branch (596:10): [True: 18, False: 15.2k]
  ------------------
  597|     18|    IRIns *store = IR(ref);
  ------------------
  |  |   24|     18|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  598|     18|    switch (aa_fref(J, fins, IR(store->op1))) {
  ------------------
  |  |   25|     18|#define fins		(&J->fold.ins)
  ------------------
                  switch (aa_fref(J, fins, IR(store->op1))) {
  ------------------
  |  |   24|     18|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (598:13): [True: 0, False: 18]
  ------------------
  599|      9|    case ALIAS_NO:   break;  /* Continue searching. */
  ------------------
  |  Branch (599:5): [True: 9, False: 9]
  ------------------
  600|      0|    case ALIAS_MAY:  lim = ref; goto cselim;  /* Limit search for load. */
  ------------------
  |  Branch (600:5): [True: 0, False: 18]
  ------------------
  601|      9|    case ALIAS_MUST: return store->op2;  /* Store forwarding. */
  ------------------
  |  Branch (601:5): [True: 9, False: 9]
  ------------------
  602|     18|    }
  603|      9|    ref = store->prev;
  604|      9|  }
  605|       |
  606|       |  /* No conflicting store: const-fold field loads from allocations. */
  607|  15.2k|  if (fid == IRFL_TAB_META) {
  ------------------
  |  Branch (607:7): [True: 2.98k, False: 12.2k]
  ------------------
  608|  2.98k|    IRIns *ir = IR(oref);
  ------------------
  |  |   24|  2.98k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  609|  2.98k|    if (ir->o == IR_TNEW || ir->o == IR_TDUP)
  ------------------
  |  Branch (609:9): [True: 125, False: 2.86k]
  |  Branch (609:29): [True: 8, False: 2.85k]
  ------------------
  610|    133|      return lj_ir_knull(J, IRT_TAB);
  611|  2.98k|  }
  612|       |
  613|  15.1k|cselim:
  614|       |  /* Try to find a matching load. Below the conflicting store, if any. */
  615|  15.1k|  return lj_opt_cselim(J, lim);
  616|  15.2k|}
lj_opt_dse_fstore:
  620|     29|{
  621|     29|  IRRef fref = fins->op1;  /* FREF reference. */
  ------------------
  |  |   25|     29|#define fins		(&J->fold.ins)
  ------------------
  622|     29|  IRRef val = fins->op2;  /* Stored value reference. */
  ------------------
  |  |   25|     29|#define fins		(&J->fold.ins)
  ------------------
  623|     29|  IRIns *xr = IR(fref);
  ------------------
  |  |   24|     29|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  624|     29|  IRRef1 *refp = &J->chain[IR_FSTORE];
  625|     29|  IRRef ref = *refp;
  626|     29|  while (ref > fref) {  /* Search for redundant or conflicting stores. */
  ------------------
  |  Branch (626:10): [True: 0, False: 29]
  ------------------
  627|      0|    IRIns *store = IR(ref);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  628|      0|    switch (aa_fref(J, xr, IR(store->op1))) {
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (628:13): [True: 0, False: 0]
  ------------------
  629|      0|    case ALIAS_NO:
  ------------------
  |  Branch (629:5): [True: 0, False: 0]
  ------------------
  630|      0|      break;  /* Continue searching. */
  631|      0|    case ALIAS_MAY:
  ------------------
  |  Branch (631:5): [True: 0, False: 0]
  ------------------
  632|      0|      if (store->op2 != val)  /* Conflict if the value is different. */
  ------------------
  |  Branch (632:11): [True: 0, False: 0]
  ------------------
  633|      0|	goto doemit;
  634|      0|      break;  /* Otherwise continue searching. */
  635|      0|    case ALIAS_MUST:
  ------------------
  |  Branch (635:5): [True: 0, False: 0]
  ------------------
  636|      0|      if (store->op2 == val &&
  ------------------
  |  Branch (636:11): [True: 0, False: 0]
  ------------------
  637|      0|	  !(xr->op2 >= IRFL_SBUF_W && xr->op2 <= IRFL_SBUF_R))
  ------------------
  |  Branch (637:6): [True: 0, False: 0]
  |  Branch (637:32): [True: 0, False: 0]
  ------------------
  638|      0|	return DROPFOLD;  /* Same value: drop the new store. */
  639|       |      /* Different value: try to eliminate the redundant store. */
  640|      0|      if (ref > J->chain[IR_LOOP]) {  /* Quick check to avoid crossing LOOP. */
  ------------------
  |  Branch (640:11): [True: 0, False: 0]
  ------------------
  641|      0|	IRIns *ir;
  642|       |	/* Check for any intervening guards or conflicting loads. */
  643|      0|	for (ir = IR(J->cur.nins-1); ir > store; ir--)
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (643:31): [True: 0, False: 0]
  ------------------
  644|      0|	  if (irt_isguard(ir->t) || (ir->o == IR_FLOAD && ir->op2 == xr->op2))
  ------------------
  |  |  444|      0|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (644:31): [True: 0, False: 0]
  |  Branch (644:52): [True: 0, False: 0]
  ------------------
  645|      0|	    goto doemit;  /* No elimination possible. */
  646|       |	/* Remove redundant store from chain and replace with NOP. */
  647|      0|	*refp = store->prev;
  648|      0|	lj_ir_nop(store);
  649|       |	/* Now emit the new store instead. */
  650|      0|      }
  651|      0|      goto doemit;
  652|      0|    }
  653|      0|    ref = *(refp = &store->prev);
  654|      0|  }
  655|     29|doemit:
  656|     29|  return EMITFOLD;  /* Otherwise we have a conflict or simply no match. */
  ------------------
  |  |  121|     29|#define EMITFOLD	(lj_ir_emit(J))
  ------------------
  657|     29|}
lj_opt_fwd_wasnonnil:
  947|  1.27k|{
  948|       |  /* First check stores. */
  949|  1.27k|  IRRef ref = J->chain[loadop+IRDELTA_L2S];
  ------------------
  |  |  170|  1.27k|#define IRDELTA_L2S		((int)IR_ASTORE - (int)IR_ALOAD)
  ------------------
  950|  1.27k|  while (ref > xref) {
  ------------------
  |  Branch (950:10): [True: 173, False: 1.10k]
  ------------------
  951|    173|    IRIns *store = IR(ref);
  ------------------
  |  |   24|    173|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  952|    173|    if (store->op1 == xref) {  /* Same xREF. */
  ------------------
  |  Branch (952:9): [True: 173, False: 0]
  ------------------
  953|       |      /* A nil store MAY alias, but a non-nil store MUST alias. */
  954|    173|      return !irt_isnil(store->t);
  ------------------
  |  |  370|    173|#define irt_isnil(t)		(irt_type(t) == IRT_NIL)
  |  |  ------------------
  |  |  |  |  365|    173|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  955|    173|    } else if (irt_isnil(store->t)) {  /* Must check any nil store. */
  ------------------
  |  |  370|      0|#define irt_isnil(t)		(irt_type(t) == IRT_NIL)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (370:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  956|      0|      IRRef skref = IR(store->op1)->op2;
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  957|      0|      IRRef xkref = IR(xref)->op2;
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  958|       |      /* Same key type MAY alias. Need ALOAD check due to multiple int types. */
  959|      0|      if (loadop == IR_ALOAD || irt_sametype(IR(skref)->t, IR(xkref)->t)) {
  ------------------
  |  |  366|      0|#define irt_sametype(t1, t2)	((((t1).irt ^ (t2).irt) & IRT_TYPE) == 0)
  |  |  ------------------
  |  |  |  Branch (366:30): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (959:11): [True: 0, False: 0]
  ------------------
  960|      0|	if (skref == xkref || !irref_isk(skref) || !irref_isk(xkref))
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
              	if (skref == xkref || !irref_isk(skref) || !irref_isk(xkref))
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (960:6): [True: 0, False: 0]
  |  Branch (960:24): [True: 0, False: 0]
  |  Branch (960:45): [True: 0, False: 0]
  ------------------
  961|      0|	  return 0;  /* A nil store with same const key or var key MAY alias. */
  962|       |	/* Different const keys CANNOT alias. */
  963|      0|      } else if (irt_isp32(IR(skref)->t) != irt_isp32(IR(xkref)->t)) {
  ------------------
  |  |  386|      0|#define irt_isp32(t)		(irt_type(t) == IRT_P32)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
                    } else if (irt_isp32(IR(skref)->t) != irt_isp32(IR(xkref)->t)) {
  ------------------
  |  |  386|      0|#define irt_isp32(t)		(irt_type(t) == IRT_P32)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (963:18): [True: 0, False: 0]
  ------------------
  964|      0|	return 0;  /* HREF and HREFK MAY alias. */
  965|      0|      }  /* Different key types CANNOT alias. */
  966|      0|    }  /* Other non-nil stores MAY alias. */
  967|      0|    ref = store->prev;
  968|      0|  }
  969|       |
  970|       |  /* Check loads since nothing could be derived from stores. */
  971|  1.10k|  ref = J->chain[loadop];
  972|  1.10k|  while (ref > xref) {
  ------------------
  |  Branch (972:10): [True: 611, False: 494]
  ------------------
  973|    611|    IRIns *load = IR(ref);
  ------------------
  |  |   24|    611|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  974|    611|    if (load->op1 == xref) {  /* Same xREF. */
  ------------------
  |  Branch (974:9): [True: 611, False: 0]
  ------------------
  975|       |      /* A nil load MAY alias, but a non-nil load MUST alias. */
  976|    611|      return !irt_isnil(load->t);
  ------------------
  |  |  370|    611|#define irt_isnil(t)		(irt_type(t) == IRT_NIL)
  |  |  ------------------
  |  |  |  |  365|    611|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  977|    611|    }  /* Other non-nil loads MAY alias. */
  978|      0|    ref = load->prev;
  979|      0|  }
  980|    494|  return 0;  /* Nothing derived at all, previous value MAY be nil. */
  981|  1.10k|}
lj_opt_mem.c:aa_table:
   57|     97|{
   58|     97|  IRIns *taba = IR(ta), *tabb = IR(tb);
  ------------------
  |  |   24|     97|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                IRIns *taba = IR(ta), *tabb = IR(tb);
  ------------------
  |  |   24|     97|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   59|     97|  int newa, newb;
   60|     97|  lj_assertJ(ta != tb, "bad usage");
  ------------------
  |  |  527|     97|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     97|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     97|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 97, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     97|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   61|     97|  lj_assertJ(irt_istab(taba->t) && irt_istab(tabb->t), "bad usage");
  ------------------
  |  |  527|     97|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     97|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    194|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 97, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 97, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     97|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   62|       |  /* Disambiguate new allocations. */
   63|     97|  newa = (taba->o == IR_TNEW || taba->o == IR_TDUP);
  ------------------
  |  Branch (63:11): [True: 35, False: 62]
  |  Branch (63:33): [True: 0, False: 62]
  ------------------
   64|     97|  newb = (tabb->o == IR_TNEW || tabb->o == IR_TDUP);
  ------------------
  |  Branch (64:11): [True: 62, False: 35]
  |  Branch (64:33): [True: 0, False: 35]
  ------------------
   65|     97|  if (newa && newb)
  ------------------
  |  Branch (65:7): [True: 35, False: 62]
  |  Branch (65:15): [True: 16, False: 19]
  ------------------
   66|     16|    return ALIAS_NO;  /* Two different allocations never alias. */
   67|     81|  if (newb) {  /* At least one allocation? */
  ------------------
  |  Branch (67:7): [True: 46, False: 35]
  ------------------
   68|     46|    IRIns *tmp = taba; taba = tabb; tabb = tmp;
   69|     46|  } else if (!newa) {
  ------------------
  |  Branch (69:14): [True: 16, False: 19]
  ------------------
   70|     16|    return ALIAS_MAY;  /* Anything else: we just don't know. */
   71|     16|  }
   72|     65|  return aa_escape(J, taba, tabb);
   73|     81|}
lj_opt_mem.c:aa_escape:
   45|     65|{
   46|     65|  IRRef ref = (IRRef)(ir - J->cur.ir);  /* The ref that might be stored. */
   47|    318|  for (ir++; ir < stop; ir++)
  ------------------
  |  Branch (47:14): [True: 253, False: 65]
  ------------------
   48|    253|    if (ir->op2 == ref &&
  ------------------
  |  Branch (48:9): [True: 0, False: 253]
  ------------------
   49|    253|	(ir->o == IR_ASTORE || ir->o == IR_HSTORE ||
  ------------------
  |  Branch (49:3): [True: 0, False: 0]
  |  Branch (49:25): [True: 0, False: 0]
  ------------------
   50|      0|	 ir->o == IR_USTORE || ir->o == IR_FSTORE))
  ------------------
  |  Branch (50:3): [True: 0, False: 0]
  |  Branch (50:25): [True: 0, False: 0]
  ------------------
   51|      0|      return ALIAS_MAY;  /* Reference was stored and might alias. */
   52|     65|  return ALIAS_NO;  /* Reference was not stored. */
   53|     65|}
lj_opt_mem.c:fwd_aa_tab_clear:
   77|  47.5k|{
   78|  47.5k|  IRRef ref = J->chain[IR_CALLS];
   79|   108k|  while (ref > lim) {
  ------------------
  |  Branch (79:10): [True: 60.7k, False: 47.5k]
  ------------------
   80|  60.7k|    IRIns *calls = IR(ref);
  ------------------
  |  |   24|  60.7k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   81|  60.7k|    if (calls->op2 == IRCALL_lj_tab_clear &&
  ------------------
  |  Branch (81:9): [True: 0, False: 60.7k]
  ------------------
   82|  60.7k|	(ta == calls->op1 || aa_table(J, ta, calls->op1) != ALIAS_NO))
  ------------------
  |  Branch (82:3): [True: 0, False: 0]
  |  Branch (82:23): [True: 0, False: 0]
  ------------------
   83|      0|      return 0;  /* Conflict. */
   84|  60.7k|    ref = calls->prev;
   85|  60.7k|  }
   86|  47.5k|  return 1;  /* No conflict. Can safely FOLD/CSE. */
   87|  47.5k|}
lj_opt_mem.c:fwd_ahload:
  163|  21.4k|{
  164|  21.4k|  IRIns *xr = IR(xref);
  ------------------
  |  |   24|  21.4k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  165|  21.4k|  IRRef lim = xref;  /* Search limit. */
  166|  21.4k|  IRRef ref;
  167|       |
  168|       |  /* Search for conflicting stores. */
  169|  21.4k|  ref = J->chain[fins->o+IRDELTA_L2S];
  ------------------
  |  |   25|  21.4k|#define fins		(&J->fold.ins)
  ------------------
                ref = J->chain[fins->o+IRDELTA_L2S];
  ------------------
  |  |  170|  21.4k|#define IRDELTA_L2S		((int)IR_ASTORE - (int)IR_ALOAD)
  ------------------
  170|  22.0k|  while (ref > xref) {
  ------------------
  |  Branch (170:10): [True: 1.74k, False: 20.2k]
  ------------------
  171|  1.74k|    IRIns *store = IR(ref);
  ------------------
  |  |   24|  1.74k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  172|  1.74k|    switch (aa_ahref(J, xr, IR(store->op1))) {
  ------------------
  |  |   24|  1.74k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (172:13): [True: 0, False: 1.74k]
  ------------------
  173|    617|    case ALIAS_NO:   break;  /* Continue searching. */
  ------------------
  |  Branch (173:5): [True: 617, False: 1.13k]
  ------------------
  174|      0|    case ALIAS_MAY:  lim = ref; goto cselim;  /* Limit search for load. */
  ------------------
  |  Branch (174:5): [True: 0, False: 1.74k]
  ------------------
  175|  1.13k|    case ALIAS_MUST: return store->op2;  /* Store forwarding. */
  ------------------
  |  Branch (175:5): [True: 1.13k, False: 617]
  ------------------
  176|  1.74k|    }
  177|    617|    ref = store->prev;
  178|    617|  }
  179|       |
  180|       |  /* No conflicting store (yet): const-fold loads from allocations. */
  181|  20.2k|  {
  182|  20.2k|    IRIns *ir = (xr->o == IR_HREFK || xr->o == IR_AREF) ? IR(xr->op1) : xr;
  ------------------
  |  |   24|  20.2k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (182:18): [True: 19.3k, False: 944]
  |  Branch (182:39): [True: 928, False: 16]
  ------------------
  183|  20.2k|    IRRef tab = ir->op1;
  184|  20.2k|    ir = IR(tab);
  ------------------
  |  |   24|  20.2k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  185|  20.2k|    if ((ir->o == IR_TNEW || (ir->o == IR_TDUP && irref_isk(xr->op2))) &&
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (185:10): [True: 4, False: 20.2k]
  |  Branch (185:31): [True: 0, False: 20.2k]
  ------------------
  186|  20.2k|	fwd_aa_tab_clear(J, tab, tab)) {
  ------------------
  |  Branch (186:2): [True: 4, False: 0]
  ------------------
  187|       |      /* A NEWREF with a number key may end up pointing to the array part.
  188|       |      ** But it's referenced from HSTORE and not found in the ASTORE chain.
  189|       |      ** Or a NEWREF may rehash the table and move unrelated number keys.
  190|       |      ** For now simply consider this a conflict without forwarding anything.
  191|       |      */
  192|      4|      if (xr->o == IR_AREF) {
  ------------------
  |  Branch (192:11): [True: 4, False: 0]
  ------------------
  193|      4|	IRRef ref2 = J->chain[IR_NEWREF];
  194|      4|	while (ref2 > tab) {
  ------------------
  |  Branch (194:9): [True: 0, False: 4]
  ------------------
  195|      0|	  IRIns *newref = IR(ref2);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  196|      0|	  if (irt_isnum(IR(newref->op2)->t))
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  197|      0|	    goto cselim;
  198|      0|	  ref2 = newref->prev;
  199|      0|	}
  200|      4|      } else {
  201|      0|	IRIns *key = IR(xr->op2);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  202|      0|	if (key->o == IR_KSLOT) key = IR(key->op1);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (202:6): [True: 0, False: 0]
  ------------------
  203|      0|	if (irt_isnum(key->t) && J->chain[IR_NEWREF] > tab)
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (203:27): [True: 0, False: 0]
  ------------------
  204|      0|	  goto cselim;
  205|      0|      }
  206|       |      /* NEWREF inhibits CSE for HREF, and dependent FLOADs from HREFK/AREF.
  207|       |      ** But the above search for conflicting stores was limited by xref.
  208|       |      ** So continue searching, limited by the TNEW/TDUP. Store forwarding
  209|       |      ** is ok, too. A conflict does NOT limit the search for a matching load.
  210|       |      */
  211|     10|      while (ref > tab) {
  ------------------
  |  Branch (211:14): [True: 6, False: 4]
  ------------------
  212|      6|	IRIns *store = IR(ref);
  ------------------
  |  |   24|      6|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  213|      6|	switch (aa_ahref(J, xr, IR(store->op1))) {
  ------------------
  |  |   24|      6|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (213:10): [True: 0, False: 6]
  ------------------
  214|      6|	case ALIAS_NO:   break;  /* Continue searching. */
  ------------------
  |  Branch (214:2): [True: 6, False: 0]
  ------------------
  215|      0|	case ALIAS_MAY:  goto cselim;  /* Conflicting store. */
  ------------------
  |  Branch (215:2): [True: 0, False: 6]
  ------------------
  216|      0|	case ALIAS_MUST: return store->op2;  /* Store forwarding. */
  ------------------
  |  Branch (216:2): [True: 0, False: 6]
  ------------------
  217|      6|	}
  218|      6|	ref = store->prev;
  219|      6|      }
  220|       |      /* Simplified here: let loop_unroll() figure out any type instability. */
  221|      4|      if (ir->o == IR_TNEW) {
  ------------------
  |  Branch (221:11): [True: 4, False: 0]
  ------------------
  222|      4|	return TREF_NIL;
  ------------------
  |  |  535|      4|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      4|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      4|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  223|      4|      } else {
  224|      0|	TValue keyv;
  225|      0|	cTValue *tv;
  226|      0|	IRIns *key = IR(xr->op2);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  227|      0|	if (key->o == IR_KSLOT) key = IR(key->op1);
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (227:6): [True: 0, False: 0]
  ------------------
  228|      0|	lj_ir_kvalue(J->L, &keyv, key);
  229|      0|	tv = lj_tab_get(J->L, ir_ktab(IR(ir->op1)), &keyv);
  ------------------
  |  |  589|      0|#define ir_ktab(ir)	(gco2tab(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  771|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  230|      0|	if (tvispri(tv))
  ------------------
  |  |  807|      0|#define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvispri(o)	(itype(o) >= LJ_TISPRI)
  |  |  ------------------
  |  |  |  |  283|      0|#define LJ_TISPRI		LJ_TTRUE
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (807:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  231|      0|	  return TREF_PRI(itype2irt(tv));
  ------------------
  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
  232|      0|	else if (tvisnum(tv))
  ------------------
  |  |  804|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  233|      0|	  return lj_ir_knum_u64(J, tv->u64);
  234|      0|	else if (tvisint(tv))
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  235|      0|	  return lj_ir_kint(J, intV(tv));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  236|      0|	else if (tvisgcv(tv))
  ------------------
  |  |  809|      0|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|      0|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  237|      0|	  return lj_ir_kstr(J, strV(tv));
  ------------------
  |  |   72|      0|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (775:31): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  238|      0|      }
  239|       |      /* Othwerwise: don't intern as a constant. */
  240|      4|    }
  241|  20.2k|  }
  242|       |
  243|  20.2k|cselim:
  244|       |  /* Try to find a matching load. Below the conflicting store, if any. */
  245|  20.2k|  ref = J->chain[fins->o];
  ------------------
  |  |   25|  20.2k|#define fins		(&J->fold.ins)
  ------------------
  246|  23.9k|  while (ref > lim) {
  ------------------
  |  Branch (246:10): [True: 11.5k, False: 12.3k]
  ------------------
  247|  11.5k|    IRIns *load = IR(ref);
  ------------------
  |  |   24|  11.5k|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  248|  11.5k|    if (load->op1 == xref)
  ------------------
  |  Branch (248:9): [True: 7.90k, False: 3.66k]
  ------------------
  249|  7.90k|      return ref;  /* Load forwarding. */
  250|  3.66k|    ref = load->prev;
  251|  3.66k|  }
  252|  12.3k|  return 0;  /* Conflict or no match. */
  253|  20.2k|}
lj_opt_mem.c:fwd_aload_reassoc:
  257|    864|{
  258|    864|  IRIns *irx = IR(fins->op1);
  ------------------
  |  |   24|    864|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  259|    864|  IRIns *key = IR(irx->op2);
  ------------------
  |  |   24|    864|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  260|    864|  if (key->o == IR_ADD && irref_isk(key->op2)) {
  ------------------
  |  |  485|    676|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 676, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (260:7): [True: 676, False: 188]
  ------------------
  261|    676|    IRIns *add2 = IR(key->op1);
  ------------------
  |  |   24|    676|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  262|    676|    if (add2->o == IR_ADD && irref_isk(add2->op2) &&
  ------------------
  |  |  485|    986|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 310, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (262:9): [True: 310, False: 366]
  ------------------
  263|    676|	IR(key->op2)->i == -IR(add2->op2)->i) {
  ------------------
  |  |   24|    310|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
              	IR(key->op2)->i == -IR(add2->op2)->i) {
  ------------------
  |  |   24|    310|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (263:2): [True: 28, False: 282]
  ------------------
  264|     28|      IRRef ref = J->chain[IR_AREF];
  265|     28|      IRRef lim = add2->op1;
  266|     28|      if (irx->op1 > lim) lim = irx->op1;
  ------------------
  |  Branch (266:11): [True: 28, False: 0]
  ------------------
  267|    104|      while (ref > lim) {
  ------------------
  |  Branch (267:14): [True: 104, False: 0]
  ------------------
  268|    104|	IRIns *ir = IR(ref);
  ------------------
  |  |   24|    104|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  269|    104|	if (ir->op1 == irx->op1 && ir->op2 == add2->op1)
  ------------------
  |  Branch (269:6): [True: 80, False: 24]
  |  Branch (269:29): [True: 28, False: 52]
  ------------------
  270|     28|	  return fwd_ahload(J, ref);
  271|     76|	ref = ir->prev;
  272|     76|      }
  273|     28|    }
  274|    676|  }
  275|    836|  return 0;
  276|    864|}
lj_opt_mem.c:aa_ahref:
  105|  2.75k|{
  106|  2.75k|  IRRef ka = refa->op2;
  107|  2.75k|  IRRef kb = refb->op2;
  108|  2.75k|  IRIns *keya, *keyb;
  109|  2.75k|  IRRef ta, tb;
  110|  2.75k|  if (refa == refb)
  ------------------
  |  Branch (110:7): [True: 1.84k, False: 913]
  ------------------
  111|  1.84k|    return ALIAS_MUST;  /* Shortcut for same refs. */
  112|    913|  keya = IR(ka);
  ------------------
  |  |   24|    913|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  113|    913|  if (keya->o == IR_KSLOT) { ka = keya->op1; keya = IR(ka); }
  ------------------
  |  |   24|    804|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (113:7): [True: 804, False: 109]
  ------------------
  114|    913|  keyb = IR(kb);
  ------------------
  |  |   24|    913|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  115|    913|  if (keyb->o == IR_KSLOT) { kb = keyb->op1; keyb = IR(kb); }
  ------------------
  |  |   24|    804|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (115:7): [True: 804, False: 109]
  ------------------
  116|    913|  ta = (refa->o==IR_HREFK || refa->o==IR_AREF) ? IR(refa->op1)->op1 : refa->op1;
  ------------------
  |  |   24|    913|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (116:9): [True: 804, False: 109]
  |  Branch (116:30): [True: 109, False: 0]
  ------------------
  117|    913|  tb = (refb->o==IR_HREFK || refb->o==IR_AREF) ? IR(refb->op1)->op1 : refb->op1;
  ------------------
  |  |   24|    913|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (117:9): [True: 804, False: 109]
  |  Branch (117:30): [True: 109, False: 0]
  ------------------
  118|    913|  if (ka == kb) {
  ------------------
  |  Branch (118:7): [True: 72, False: 841]
  ------------------
  119|       |    /* Same key. Check for same table with different ref (NEWREF vs. HREF). */
  120|     72|    if (ta == tb)
  ------------------
  |  Branch (120:9): [True: 0, False: 72]
  ------------------
  121|      0|      return ALIAS_MUST;  /* Same key, same table. */
  122|     72|    else
  123|     72|      return aa_table(J, ta, tb);  /* Same key, possibly different table. */
  124|     72|  }
  125|    841|  if (irref_isk(ka) && irref_isk(kb))
  ------------------
  |  |  485|  1.68k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 841, False: 0]
  |  |  ------------------
  ------------------
                if (irref_isk(ka) && irref_isk(kb))
  ------------------
  |  |  485|    841|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 841, False: 0]
  |  |  ------------------
  ------------------
  126|    841|    return ALIAS_NO;  /* Different constant keys. */
  127|      0|  if (refa->o == IR_AREF) {
  ------------------
  |  Branch (127:7): [True: 0, False: 0]
  ------------------
  128|       |    /* Disambiguate array references based on index arithmetic. */
  129|      0|    int32_t ofsa = 0, ofsb = 0;
  130|      0|    IRRef basea = ka, baseb = kb;
  131|      0|    lj_assertJ(refb->o == IR_AREF, "expected AREF");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  132|       |    /* Gather base and offset from t[base] or t[base+-ofs]. */
  133|      0|    if (keya->o == IR_ADD && irref_isk(keya->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (133:9): [True: 0, False: 0]
  ------------------
  134|      0|      basea = keya->op1;
  135|      0|      ofsa = IR(keya->op2)->i;
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  136|      0|      if (basea == kb && ofsa != 0)
  ------------------
  |  Branch (136:11): [True: 0, False: 0]
  |  Branch (136:26): [True: 0, False: 0]
  ------------------
  137|      0|	return ALIAS_NO;  /* t[base+-ofs] vs. t[base]. */
  138|      0|    }
  139|      0|    if (keyb->o == IR_ADD && irref_isk(keyb->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (139:9): [True: 0, False: 0]
  ------------------
  140|      0|      baseb = keyb->op1;
  141|      0|      ofsb = IR(keyb->op2)->i;
  ------------------
  |  |   24|      0|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  142|      0|      if (ka == baseb && ofsb != 0)
  ------------------
  |  Branch (142:11): [True: 0, False: 0]
  |  Branch (142:26): [True: 0, False: 0]
  ------------------
  143|      0|	return ALIAS_NO;  /* t[base] vs. t[base+-ofs]. */
  144|      0|    }
  145|      0|    if (basea == baseb && ofsa != ofsb)
  ------------------
  |  Branch (145:9): [True: 0, False: 0]
  |  Branch (145:27): [True: 0, False: 0]
  ------------------
  146|      0|      return ALIAS_NO;  /* t[base+-o1] vs. t[base+-o2] and o1 != o2. */
  147|      0|  } else {
  148|       |    /* Disambiguate hash references based on the type of their keys. */
  149|      0|    lj_assertJ((refa->o==IR_HREF || refa->o==IR_HREFK || refa->o==IR_NEWREF) &&
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  150|      0|	       (refb->o==IR_HREF || refb->o==IR_HREFK || refb->o==IR_NEWREF),
  151|      0|	       "bad xREF IR op %d or %d", refa->o, refb->o);
  152|      0|    if (!irt_sametype(keya->t, keyb->t))
  ------------------
  |  |  366|      0|#define irt_sametype(t1, t2)	((((t1).irt ^ (t2).irt) & IRT_TYPE) == 0)
  ------------------
  |  Branch (152:9): [True: 0, False: 0]
  ------------------
  153|      0|      return ALIAS_NO;  /* Different key types. */
  154|      0|  }
  155|      0|  if (ta == tb)
  ------------------
  |  Branch (155:7): [True: 0, False: 0]
  ------------------
  156|      0|    return ALIAS_MAY;  /* Same table, cannot disambiguate keys. */
  157|      0|  else
  158|      0|    return aa_table(J, ta, tb);  /* Try to disambiguate tables. */
  159|      0|}
lj_opt_mem.c:aa_fref:
  575|     18|{
  576|     18|  if (refa->op2 != refb->op2)
  ------------------
  |  Branch (576:7): [True: 0, False: 18]
  ------------------
  577|      0|    return ALIAS_NO;  /* Different fields. */
  578|     18|  if (refa->op1 == refb->op1)
  ------------------
  |  Branch (578:7): [True: 9, False: 9]
  ------------------
  579|      9|    return ALIAS_MUST;  /* Same field, same object. */
  580|      9|  else if (refa->op2 >= IRFL_TAB_META && refa->op2 <= IRFL_TAB_NOMM)
  ------------------
  |  Branch (580:12): [True: 9, False: 0]
  |  Branch (580:42): [True: 9, False: 0]
  ------------------
  581|      9|    return aa_table(J, refa->op1, refb->op1);  /* Disambiguate tables. */
  582|      0|  else
  583|      0|    return ALIAS_MAY;  /* Same field, possibly different object. */
  584|     18|}

lj_opt_narrow_convert:
  408|  10.8k|{
  409|  10.8k|  if ((J->flags & JIT_F_OPT_NARROW)) {
  ------------------
  |  |   85|  10.8k|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  ------------------
  |  |  |  |   77|  10.8k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (409:7): [True: 10.8k, False: 0]
  ------------------
  410|  10.8k|    NarrowConv nc;
  411|  10.8k|    nc.J = J;
  412|  10.8k|    nc.sp = nc.stack;
  413|  10.8k|    nc.maxsp = &nc.stack[NARROW_MAX_STACK-4];
  ------------------
  |  |  184|  10.8k|#define NARROW_MAX_STACK	256
  ------------------
  414|  10.8k|    nc.t = irt_type(fins->t);
  ------------------
  |  |  365|  10.8k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
  415|  10.8k|    if (fins->o == IR_TOBIT) {
  ------------------
  |  |   94|  10.8k|#define fins			(&J->fold.ins)
  ------------------
  |  Branch (415:9): [True: 0, False: 10.8k]
  ------------------
  416|      0|      nc.mode = IRCONV_TOBIT;  /* Used only in the backpropagation cache. */
  ------------------
  |  |  262|      0|#define IRCONV_TOBIT  (0<<IRCONV_CSH)	/* None. Cache only: TOBIT conv. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  417|  10.8k|    } else {
  418|  10.8k|      nc.mode = fins->op2;
  ------------------
  |  |   94|  10.8k|#define fins			(&J->fold.ins)
  ------------------
  419|  10.8k|    }
  420|  10.8k|    if (narrow_conv_backprop(&nc, fins->op1, 0) <= 1)
  ------------------
  |  |   94|  10.8k|#define fins			(&J->fold.ins)
  ------------------
  |  Branch (420:9): [True: 10.8k, False: 0]
  ------------------
  421|  10.8k|      return narrow_conv_emit(J, &nc);
  422|  10.8k|  }
  423|      0|  return NEXTFOLD;
  424|  10.8k|}
lj_opt_narrow_index:
  454|  1.09k|{
  455|  1.09k|  IRIns *ir;
  456|  1.09k|  lj_assertJ(tref_isnumber(tr), "expected number type");
  ------------------
  |  |  527|  1.09k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.09k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.09k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.09k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.09k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  457|  1.09k|  if (tref_isnum(tr))  /* Conversion may be narrowed, too. See above. */
  ------------------
  |  |  520|  1.09k|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|  1.09k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (520:25): [True: 177, False: 913]
  |  |  ------------------
  ------------------
  458|    177|    return emitir(IRTGI(IR_CONV), tr, IRCONV_INT_NUM|IRCONV_INDEX);
  ------------------
  |  |   97|    177|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    177|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  459|       |  /* Omit some overflow checks for array indexing. See comments above. */
  460|    913|  ir = IR(tref_ref(tr));
  ------------------
  |  |   93|    913|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  461|    913|  if ((ir->o == IR_ADDOV || ir->o == IR_SUBOV) && irref_isk(ir->op2) &&
  ------------------
  |  |  485|    941|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 28, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (461:8): [True: 0, False: 913]
  |  Branch (461:29): [True: 28, False: 885]
  ------------------
  462|    913|      (uint32_t)IR(ir->op2)->i + 0x40000000u < 0x80000000u)
  ------------------
  |  |   93|     28|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  |  Branch (462:7): [True: 28, False: 0]
  ------------------
  463|     28|    return emitir(IRTI(ir->o - IR_ADDOV + IR_ADD), ir->op1, ir->op2);
  ------------------
  |  |   97|     28|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     28|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  464|    885|  return tr;
  465|    913|}
lj_opt_narrow_toint:
  469|  11.4k|{
  470|  11.4k|  if (tref_isstr(tr))
  ------------------
  |  |  515|  11.4k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|  11.4k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
  471|      0|    tr = emitir(IRTG(IR_STRTO, IRT_NUM), tr, 0);
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  472|  11.4k|  if (tref_isnum(tr))  /* Conversion may be narrowed, too. See above. */
  ------------------
  |  |  520|  11.4k|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|  11.4k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (520:25): [True: 11.3k, False: 166]
  |  |  ------------------
  ------------------
  473|  11.3k|    return emitir(IRTI(IR_CONV), tr, IRCONV_INT_NUM|IRCONV_ANY);
  ------------------
  |  |   97|  11.3k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  11.3k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  474|    166|  if (!tref_isinteger(tr))
  ------------------
  |  |  526|    166|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|    166|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (474:7): [True: 0, False: 166]
  ------------------
  475|      0|    lj_trace_err(J, LJ_TRERR_BADTYPE);
  476|       |  /*
  477|       |  ** Undefined overflow semantics allow stripping of ADDOV, SUBOV and MULOV.
  478|       |  ** Use IRCONV_TOBIT for the cache entries, since the semantics are the same.
  479|       |  */
  480|    166|  return narrow_stripov(J, tr, IR_MULOV, (IRT_INT<<5)|IRT_INT|IRCONV_TOBIT);
  ------------------
  |  |  262|    166|#define IRCONV_TOBIT  (0<<IRCONV_CSH)	/* None. Cache only: TOBIT conv. */
  |  |  ------------------
  |  |  |  |  260|    166|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  481|    166|}
lj_opt_narrow_arith:
  536|  48.9k|{
  537|  48.9k|  rb = conv_str_tonum(J, rb, vb);
  538|  48.9k|  rc = conv_str_tonum(J, rc, vc);
  539|       |  /* Must not narrow MUL in non-DUALNUM variant, because it loses -0. */
  540|  48.9k|  if ((op >= IR_ADD && op <= (LJ_DUALNUM ? IR_MUL : IR_SUB)) &&
  ------------------
  |  |  549|  48.9k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (540:8): [True: 48.9k, False: 0]
  |  Branch (540:24): [True: 39.3k, False: 9.61k]
  ------------------
  541|  48.9k|      tref_isinteger(rb) && tref_isinteger(rc) &&
  ------------------
  |  |  526|  88.2k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  39.3k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 10.2k, False: 29.0k]
  |  |  ------------------
  ------------------
                    tref_isinteger(rb) && tref_isinteger(rc) &&
  ------------------
  |  |  526|  59.2k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  10.2k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 7.26k, False: 3.02k]
  |  |  ------------------
  ------------------
  542|  48.9k|      numisint(lj_vm_foldarith(numberVnum(vb), numberVnum(vc),
  ------------------
  |  Branch (542:7): [True: 7.26k, False: 0]
  ------------------
  543|  7.26k|			       (int)op - (int)IR_ADD)))
  544|  7.26k|    return emitir(IRTGI((int)op - (int)IR_ADD + (int)IR_ADDOV), rb, rc);
  ------------------
  |  |   97|  7.26k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  7.26k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  545|  41.6k|  if (!tref_isnum(rb)) rb = emitir(IRTN(IR_CONV), rb, IRCONV_NUM_INT);
  ------------------
  |  |  520|  41.6k|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|  41.6k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
                if (!tref_isnum(rb)) rb = emitir(IRTN(IR_CONV), rb, IRCONV_NUM_INT);
  ------------------
  |  |   97|  12.5k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  12.5k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  |  Branch (545:7): [True: 12.5k, False: 29.0k]
  ------------------
  546|  41.6k|  if (!tref_isnum(rc)) rc = emitir(IRTN(IR_CONV), rc, IRCONV_NUM_INT);
  ------------------
  |  |  520|  41.6k|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|  41.6k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
                if (!tref_isnum(rc)) rc = emitir(IRTN(IR_CONV), rc, IRCONV_NUM_INT);
  ------------------
  |  |   97|  30.0k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  30.0k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  |  Branch (546:7): [True: 30.0k, False: 11.6k]
  ------------------
  547|  41.6k|  return emitir(IRTN(op), rb, rc);
  ------------------
  |  |   97|  41.6k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  41.6k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  548|  48.9k|}
lj_opt_narrow_unm:
  552|      9|{
  553|      9|  rc = conv_str_tonum(J, rc, vc);
  554|      9|  if (tref_isinteger(rc)) {
  ------------------
  |  |  526|      9|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|      9|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 9, False: 0]
  |  |  ------------------
  ------------------
  555|      9|    uint32_t k = (uint32_t)numberVint(vc);
  556|      9|    if ((LJ_DUALNUM || k != 0) && k != 0x80000000u) {
  ------------------
  |  |  549|     18|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (556:24): [True: 0, False: 9]
  |  Branch (556:35): [True: 0, False: 0]
  ------------------
  557|      0|      TRef zero = lj_ir_kint(J, 0);
  558|      0|      if (!LJ_DUALNUM)
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  ------------------
  |  Branch (558:11): [Folded - Ignored]
  ------------------
  559|      0|	emitir(IRTGI(IR_NE), rc, zero);
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  560|      0|      return emitir(IRTGI(IR_SUBOV), zero, rc);
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  561|      0|    }
  562|      9|    rc = emitir(IRTN(IR_CONV), rc, IRCONV_NUM_INT);
  ------------------
  |  |   97|      9|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      9|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  563|      9|  }
  564|      9|  return emitir(IRTN(IR_NEG), rc, lj_ir_ksimd(J, LJ_KSIMD_NEG));
  ------------------
  |  |   97|      9|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      9|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  565|      9|}
lj_opt_narrow_mod:
  569|  6.53k|{
  570|  6.53k|  TRef tmp;
  571|  6.53k|  rb = conv_str_tonum(J, rb, vb);
  572|  6.53k|  rc = conv_str_tonum(J, rc, vc);
  573|  6.53k|  if ((LJ_DUALNUM || (J->flags & JIT_F_OPT_NARROW)) &&
  ------------------
  |  |  549|  13.0k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if ((LJ_DUALNUM || (J->flags & JIT_F_OPT_NARROW)) &&
  ------------------
  |  |   85|  6.53k|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  ------------------
  |  |  |  |   77|  6.53k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (573:22): [True: 6.53k, False: 0]
  ------------------
  574|  6.53k|      tref_isinteger(rb) && tref_isinteger(rc) &&
  ------------------
  |  |  526|  13.0k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  6.53k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 4.36k, False: 2.17k]
  |  |  ------------------
  ------------------
                    tref_isinteger(rb) && tref_isinteger(rc) &&
  ------------------
  |  |  526|  10.9k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  4.36k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 4.36k, False: 0]
  |  |  ------------------
  ------------------
  575|  6.53k|      (tvisint(vc) ? intV(vc) != 0 : !tviszero(vc))) {
  ------------------
  |  |  803|  4.36k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  8.73k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    (tvisint(vc) ? intV(vc) != 0 : !tviszero(vc))) {
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    (tvisint(vc) ? intV(vc) != 0 : !tviszero(vc))) {
  ------------------
  |  |  814|  4.36k|#define tviszero(o)	(((o)->u64 << 1) == 0)
  ------------------
  |  Branch (575:7): [True: 4.36k, False: 0]
  ------------------
  576|  4.36k|    emitir(IRTGI(IR_NE), rc, lj_ir_kint(J, 0));
  ------------------
  |  |   97|  4.36k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  4.36k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  577|  4.36k|    return emitir(IRTI(IR_MOD), rb, rc);
  ------------------
  |  |   97|  4.36k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  4.36k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  578|  4.36k|  }
  579|       |  /* b % c ==> b - floor(b/c)*c */
  580|  2.17k|  rb = lj_ir_tonum(J, rb);
  581|  2.17k|  rc = lj_ir_tonum(J, rc);
  582|  2.17k|  tmp = emitir(IRTN(IR_DIV), rb, rc);
  ------------------
  |  |   97|  2.17k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  2.17k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  583|  2.17k|  tmp = emitir(IRTN(IR_FPMATH), tmp, IRFPM_FLOOR);
  ------------------
  |  |   97|  2.17k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  2.17k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  584|  2.17k|  tmp = emitir(IRTN(IR_MUL), tmp, rc);
  ------------------
  |  |   97|  2.17k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  2.17k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  585|  2.17k|  return emitir(IRTN(IR_SUB), rb, tmp);
  ------------------
  |  |   97|  2.17k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  2.17k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  586|  6.53k|}
lj_opt_narrow_forl:
  600|  10.6k|{
  601|  10.6k|  lj_assertJ(tvisnumber(&tv[FORL_IDX]) &&
  ------------------
  |  |  527|  10.6k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  10.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  42.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.6k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.6k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  602|  10.6k|	     tvisnumber(&tv[FORL_STOP]) &&
  603|  10.6k|	     tvisnumber(&tv[FORL_STEP]),
  604|  10.6k|	     "expected number types");
  605|       |  /* Narrow only if the runtime values of start/stop/step are all integers. */
  606|  10.6k|  if (narrow_forl(J, &tv[FORL_IDX]) &&
  ------------------
  |  Branch (606:7): [True: 10.6k, False: 0]
  ------------------
  607|  10.6k|      narrow_forl(J, &tv[FORL_STOP]) &&
  ------------------
  |  Branch (607:7): [True: 10.6k, False: 3]
  ------------------
  608|  10.6k|      narrow_forl(J, &tv[FORL_STEP])) {
  ------------------
  |  Branch (608:7): [True: 10.6k, False: 1]
  ------------------
  609|       |    /* And if the loop index can't possibly overflow. */
  610|  10.6k|    lua_Number step = numberVnum(&tv[FORL_STEP]);
  611|  10.6k|    lua_Number sum = numberVnum(&tv[FORL_STOP]) + step;
  612|  10.6k|    if (0 <= step ? (sum <= 2147483647.0) : (sum >= -2147483648.0))
  ------------------
  |  Branch (612:9): [True: 10.6k, False: 8]
  |  Branch (612:9): [True: 10.6k, False: 7]
  ------------------
  613|  10.6k|      return IRT_INT;
  614|  10.6k|  }
  615|     11|  return IRT_NUM;
  616|  10.6k|}
lj_opt_narrow.c:narrow_conv_backprop:
  266|  36.8k|{
  267|  36.8k|  jit_State *J = nc->J;
  268|  36.8k|  IRIns *ir = IR(ref);
  ------------------
  |  |   93|  36.8k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  269|  36.8k|  IRRef cref;
  270|       |
  271|  36.8k|  if (nc->sp >= nc->maxsp) return 10;  /* Path too deep. */
  ------------------
  |  Branch (271:7): [True: 0, False: 36.8k]
  ------------------
  272|       |
  273|       |  /* Check the easy cases first. */
  274|  36.8k|  if (ir->o == IR_CONV && (ir->op2 & IRCONV_SRCMASK) == IRT_INT) {
  ------------------
  |  |  252|  4.35k|#define IRCONV_SRCMASK		0x001f	/* Source IRType. */
  ------------------
  |  Branch (274:7): [True: 4.35k, False: 32.5k]
  |  Branch (274:27): [True: 4.35k, False: 0]
  ------------------
  275|  4.35k|    if ((nc->mode & IRCONV_CONVMASK) <= IRCONV_ANY)
  ------------------
  |  |  259|  4.35k|#define IRCONV_CONVMASK		0xf000
  ------------------
                  if ((nc->mode & IRCONV_CONVMASK) <= IRCONV_ANY)
  ------------------
  |  |  263|  4.35k|#define IRCONV_ANY    (1<<IRCONV_CSH)	/* Any FP number is ok. */
  |  |  ------------------
  |  |  |  |  260|  4.35k|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  |  Branch (275:9): [True: 4.35k, False: 0]
  ------------------
  276|  4.35k|      narrow_stripov_backprop(nc, ir->op1, depth+1);
  277|      0|    else
  278|      0|      *nc->sp++ = NARROWINS(NARROW_REF, ir->op1);  /* Undo conversion. */
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  279|  4.35k|    if (nc->t == IRT_I64)
  ------------------
  |  Branch (279:9): [True: 0, False: 4.35k]
  ------------------
  280|      0|      *nc->sp++ = NARROWINS(NARROW_SEXT, 0);  /* Sign-extend integer. */
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  281|  4.35k|    return 0;
  282|  32.5k|  } else if (ir->o == IR_KNUM) {  /* Narrow FP constant. */
  ------------------
  |  Branch (282:14): [True: 0, False: 32.5k]
  ------------------
  283|      0|    lua_Number n = ir_knum(ir)->n;
  ------------------
  |  |  592|      0|#define ir_knum(ir)	check_exp((ir)->o == IR_KNUM, &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  284|      0|    if ((nc->mode & IRCONV_CONVMASK) == IRCONV_TOBIT) {
  ------------------
  |  |  259|      0|#define IRCONV_CONVMASK		0xf000
  ------------------
                  if ((nc->mode & IRCONV_CONVMASK) == IRCONV_TOBIT) {
  ------------------
  |  |  262|      0|#define IRCONV_TOBIT  (0<<IRCONV_CSH)	/* None. Cache only: TOBIT conv. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  |  Branch (284:9): [True: 0, False: 0]
  ------------------
  285|       |      /* Allows a wider range of constants. */
  286|      0|      int64_t k64 = (int64_t)n;
  287|      0|      if (n == (lua_Number)k64) {  /* Only if const doesn't lose precision. */
  ------------------
  |  Branch (287:11): [True: 0, False: 0]
  ------------------
  288|      0|	*nc->sp++ = NARROWINS(NARROW_INT, 0);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  289|      0|	*nc->sp++ = (NarrowIns)k64;  /* But always truncate to 32 bits. */
  290|      0|	return 0;
  291|      0|      }
  292|      0|    } else {
  293|      0|      int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  294|       |      /* Only if constant is a small integer. */
  295|      0|      if (checki16(k) && n == (lua_Number)k) {
  ------------------
  |  |  103|      0|#define checki16(x)	((x) == (int32_t)(int16_t)(x))
  |  |  ------------------
  |  |  |  Branch (103:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (295:26): [True: 0, False: 0]
  ------------------
  296|      0|	*nc->sp++ = NARROWINS(NARROW_INT, 0);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  297|      0|	*nc->sp++ = (NarrowIns)k;
  298|      0|	return 0;
  299|      0|      }
  300|      0|    }
  301|      0|    return 10;  /* Never narrow other FP constants (this is rare). */
  302|      0|  }
  303|       |
  304|       |  /* Try to CSE the conversion. Stronger checks are ok, too. */
  305|  32.5k|  cref = J->chain[fins->o];
  ------------------
  |  |   94|  32.5k|#define fins			(&J->fold.ins)
  ------------------
  306|  84.5k|  while (cref > ref) {
  ------------------
  |  Branch (306:10): [True: 52.0k, False: 32.5k]
  ------------------
  307|  52.0k|    IRIns *cr = IR(cref);
  ------------------
  |  |   93|  52.0k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  308|  52.0k|    if (cr->op1 == ref &&
  ------------------
  |  Branch (308:9): [True: 0, False: 52.0k]
  ------------------
  309|  52.0k|	(fins->o == IR_TOBIT ||
  ------------------
  |  |   94|      0|#define fins			(&J->fold.ins)
  ------------------
  |  Branch (309:3): [True: 0, False: 0]
  ------------------
  310|      0|	 ((cr->op2 & IRCONV_MODEMASK) == (nc->mode & IRCONV_MODEMASK) &&
  ------------------
  |  |  258|      0|#define IRCONV_MODEMASK		0x0fff
  ------------------
              	 ((cr->op2 & IRCONV_MODEMASK) == (nc->mode & IRCONV_MODEMASK) &&
  ------------------
  |  |  258|      0|#define IRCONV_MODEMASK		0x0fff
  ------------------
  |  Branch (310:4): [True: 0, False: 0]
  ------------------
  311|      0|	  irt_isguard(cr->t) >= irt_isguard(fins->t)))) {
  ------------------
  |  |  444|      0|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  ------------------
              	  irt_isguard(cr->t) >= irt_isguard(fins->t)))) {
  ------------------
  |  |  444|      0|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  ------------------
  |  Branch (311:4): [True: 0, False: 0]
  ------------------
  312|      0|      *nc->sp++ = NARROWINS(NARROW_REF, cref);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  313|      0|      return 0;  /* Already there, no additional conversion needed. */
  314|      0|    }
  315|  52.0k|    cref = cr->prev;
  316|  52.0k|  }
  317|       |
  318|       |  /* Backpropagate across ADD/SUB. */
  319|  32.5k|  if (ir->o == IR_ADD || ir->o == IR_SUB) {
  ------------------
  |  Branch (319:7): [True: 10.8k, False: 21.6k]
  |  Branch (319:26): [True: 2.15k, False: 19.5k]
  ------------------
  320|       |    /* Try cache lookup first. */
  321|  13.0k|    IRRef mode = nc->mode;
  322|  13.0k|    BPropEntry *bp;
  323|       |    /* Inner conversions need a stronger check. */
  324|  13.0k|    if ((mode & IRCONV_CONVMASK) == IRCONV_INDEX && depth > 0)
  ------------------
  |  |  259|  13.0k|#define IRCONV_CONVMASK		0xf000
  ------------------
                  if ((mode & IRCONV_CONVMASK) == IRCONV_INDEX && depth > 0)
  ------------------
  |  |  264|  26.0k|#define IRCONV_INDEX  (2<<IRCONV_CSH)	/* Check + special backprop rules. */
  |  |  ------------------
  |  |  |  |  260|  13.0k|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  |  Branch (324:9): [True: 0, False: 13.0k]
  |  Branch (324:53): [True: 0, False: 0]
  ------------------
  325|      0|      mode += IRCONV_CHECK-IRCONV_INDEX;
  ------------------
  |  |  265|      0|#define IRCONV_CHECK  (3<<IRCONV_CSH)	/* Number checked for integerness. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
                    mode += IRCONV_CHECK-IRCONV_INDEX;
  ------------------
  |  |  264|      0|#define IRCONV_INDEX  (2<<IRCONV_CSH)	/* Check + special backprop rules. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  326|  13.0k|    bp = narrow_bpc_get(nc->J, (IRRef1)ref, mode);
  327|  13.0k|    if (bp) {
  ------------------
  |  Branch (327:9): [True: 0, False: 13.0k]
  ------------------
  328|      0|      *nc->sp++ = NARROWINS(NARROW_REF, bp->val);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  329|      0|      return 0;
  330|  13.0k|    } else if (nc->t == IRT_I64) {
  ------------------
  |  Branch (330:16): [True: 0, False: 13.0k]
  ------------------
  331|       |      /* Try sign-extending from an existing (checked) conversion to int. */
  332|      0|      mode = (IRT_INT<<5)|IRT_NUM|IRCONV_INDEX;
  ------------------
  |  |  264|      0|#define IRCONV_INDEX  (2<<IRCONV_CSH)	/* Check + special backprop rules. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  333|      0|      bp = narrow_bpc_get(nc->J, (IRRef1)ref, mode);
  334|      0|      if (bp) {
  ------------------
  |  Branch (334:11): [True: 0, False: 0]
  ------------------
  335|      0|	*nc->sp++ = NARROWINS(NARROW_REF, bp->val);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  336|      0|	*nc->sp++ = NARROWINS(NARROW_SEXT, 0);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  337|      0|	return 0;
  338|      0|      }
  339|      0|    }
  340|  13.0k|    if (++depth < NARROW_MAX_BACKPROP && nc->sp < nc->maxsp) {
  ------------------
  |  |  183|  26.0k|#define NARROW_MAX_BACKPROP	100
  ------------------
  |  Branch (340:9): [True: 13.0k, False: 0]
  |  Branch (340:42): [True: 13.0k, False: 0]
  ------------------
  341|  13.0k|      NarrowIns *savesp = nc->sp;
  342|  13.0k|      int count = narrow_conv_backprop(nc, ir->op1, depth);
  343|  13.0k|      count += narrow_conv_backprop(nc, ir->op2, depth);
  344|       |      /* Limit total number of conversions. */
  345|  13.0k|      if (count <= 1 && nc->sp < nc->maxsp) {
  ------------------
  |  Branch (345:11): [True: 4.35k, False: 8.66k]
  |  Branch (345:25): [True: 4.35k, False: 0]
  ------------------
  346|  4.35k|	*nc->sp++ = NARROWINS(IRT(ir->o, nc->t), ref);
  ------------------
  |  |  199|  4.35k|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  347|  4.35k|	return count;
  348|  4.35k|      }
  349|  8.66k|      nc->sp = savesp;  /* Too many conversions, need to backtrack. */
  350|  8.66k|    }
  351|  13.0k|  }
  352|       |
  353|       |  /* Otherwise add a conversion. */
  354|  28.1k|  *nc->sp++ = NARROWINS(NARROW_CONV, ref);
  ------------------
  |  |  199|  28.1k|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  355|  28.1k|  return 1;
  356|  32.5k|}
lj_opt_narrow.c:narrow_stripov_backprop:
  240|  4.35k|{
  241|  4.35k|  jit_State *J = nc->J;
  242|  4.35k|  IRIns *ir = IR(ref);
  ------------------
  |  |   93|  4.35k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  243|  4.35k|  if (ir->o == IR_ADDOV || ir->o == IR_SUBOV ||
  ------------------
  |  Branch (243:7): [True: 0, False: 4.35k]
  |  Branch (243:28): [True: 0, False: 4.35k]
  ------------------
  244|  4.35k|      (ir->o == IR_MULOV && (nc->mode & IRCONV_CONVMASK) == IRCONV_ANY)) {
  ------------------
  |  |  259|      0|#define IRCONV_CONVMASK		0xf000
  ------------------
                    (ir->o == IR_MULOV && (nc->mode & IRCONV_CONVMASK) == IRCONV_ANY)) {
  ------------------
  |  |  263|      0|#define IRCONV_ANY    (1<<IRCONV_CSH)	/* Any FP number is ok. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  |  Branch (244:8): [True: 0, False: 4.35k]
  |  Branch (244:29): [True: 0, False: 0]
  ------------------
  245|      0|    BPropEntry *bp = narrow_bpc_get(nc->J, ref, IRCONV_TOBIT);
  ------------------
  |  |  262|      0|#define IRCONV_TOBIT  (0<<IRCONV_CSH)	/* None. Cache only: TOBIT conv. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  246|      0|    if (bp) {
  ------------------
  |  Branch (246:9): [True: 0, False: 0]
  ------------------
  247|      0|      ref = bp->val;
  248|      0|    } else if (++depth < NARROW_MAX_BACKPROP && nc->sp < nc->maxsp) {
  ------------------
  |  |  183|      0|#define NARROW_MAX_BACKPROP	100
  ------------------
  |  Branch (248:16): [True: 0, False: 0]
  |  Branch (248:49): [True: 0, False: 0]
  ------------------
  249|      0|      NarrowIns *savesp = nc->sp;
  250|      0|      narrow_stripov_backprop(nc, ir->op1, depth);
  251|      0|      if (nc->sp < nc->maxsp) {
  ------------------
  |  Branch (251:11): [True: 0, False: 0]
  ------------------
  252|      0|	narrow_stripov_backprop(nc, ir->op2, depth);
  253|      0|	if (nc->sp < nc->maxsp) {
  ------------------
  |  Branch (253:6): [True: 0, False: 0]
  ------------------
  254|      0|	  *nc->sp++ = NARROWINS(IRT(ir->o - IR_ADDOV + IR_ADD, IRT_INT), ref);
  ------------------
  |  |  199|      0|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  255|      0|	  return;
  256|      0|	}
  257|      0|      }
  258|      0|      nc->sp = savesp;  /* Path too deep, need to backtrack. */
  259|      0|    }
  260|      0|  }
  261|  4.35k|  *nc->sp++ = NARROWINS(NARROW_REF, ref);
  ------------------
  |  |  199|  4.35k|#define NARROWINS(op, ref)	(((op) << 16) + (ref))
  ------------------
  262|  4.35k|}
lj_opt_narrow.c:narrow_bpc_get:
  215|  13.0k|{
  216|  13.0k|  ptrdiff_t i;
  217|   221k|  for (i = 0; i < BPROP_SLOTS; i++) {
  ------------------
  |  |  330|   221k|#define BPROP_SLOTS	16
  ------------------
  |  Branch (217:15): [True: 208k, False: 13.0k]
  ------------------
  218|   208k|    BPropEntry *bp = &J->bpropcache[i];
  219|       |    /* Stronger checks are ok, too. */
  220|   208k|    if (bp->key == key && bp->mode >= mode &&
  ------------------
  |  Branch (220:9): [True: 0, False: 208k]
  |  Branch (220:27): [True: 0, False: 0]
  ------------------
  221|   208k|	((bp->mode ^ mode) & IRCONV_MODEMASK) == 0)
  ------------------
  |  |  258|      0|#define IRCONV_MODEMASK		0x0fff
  ------------------
  |  Branch (221:2): [True: 0, False: 0]
  ------------------
  222|      0|      return bp;
  223|   208k|  }
  224|  13.0k|  return NULL;
  225|  13.0k|}
lj_opt_narrow.c:narrow_conv_emit:
  360|  10.8k|{
  361|       |  /* The fins fields must be saved now -- emitir() overwrites them. */
  362|  10.8k|  IROpT guardot = irt_isguard(fins->t) ? IRTG(IR_ADDOV-IR_ADD, 0) : 0;
  ------------------
  |  |  444|  10.8k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 0, False: 10.8k]
  |  |  ------------------
  ------------------
                IROpT guardot = irt_isguard(fins->t) ? IRTG(IR_ADDOV-IR_ADD, 0) : 0;
  ------------------
  |  |  361|      0|#define IRTG(o, t)		(IRT((o), IRT_GUARD|(t)))
  |  |  ------------------
  |  |  |  |  358|      0|#define IRT(o, t)		((uint32_t)(((o)<<8) | (t)))
  |  |  ------------------
  ------------------
  363|  10.8k|  IROpT convot = fins->ot;
  ------------------
  |  |   94|  10.8k|#define fins			(&J->fold.ins)
  ------------------
  364|  10.8k|  IRRef1 convop2 = fins->op2;
  ------------------
  |  |   94|  10.8k|#define fins			(&J->fold.ins)
  ------------------
  365|  10.8k|  NarrowIns *next = nc->stack;  /* List of instructions from backpropagation. */
  366|  10.8k|  NarrowIns *last = nc->sp;
  367|  10.8k|  NarrowIns *sp = nc->stack;  /* Recycle the stack to store operands. */
  368|  30.4k|  while (next < last) {  /* Simple stack machine to process the ins. list. */
  ------------------
  |  Branch (368:10): [True: 19.5k, False: 10.8k]
  ------------------
  369|  19.5k|    NarrowIns ref = *next++;
  370|  19.5k|    IROpT op = narrow_op(ref);
  ------------------
  |  |  200|  19.5k|#define narrow_op(ins)		((IROpT)((ins) >> 16))
  ------------------
  371|  19.5k|    if (op == NARROW_REF) {
  ------------------
  |  Branch (371:9): [True: 4.35k, False: 15.2k]
  ------------------
  372|  4.35k|      *sp++ = ref;
  373|  15.2k|    } else if (op == NARROW_CONV) {
  ------------------
  |  Branch (373:16): [True: 10.8k, False: 4.35k]
  ------------------
  374|  10.8k|      *sp++ = emitir_raw(convot, ref, convop2);  /* Raw emit avoids a loop. */
  ------------------
  |  |   99|  10.8k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  10.8k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  375|  10.8k|    } else if (op == NARROW_SEXT) {
  ------------------
  |  Branch (375:16): [True: 0, False: 4.35k]
  ------------------
  376|      0|      lj_assertJ(sp >= nc->stack+1, "stack underflow");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  377|      0|      sp[-1] = emitir(IRT(IR_CONV, IRT_I64), sp[-1],
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  378|      0|		      (IRT_I64<<5)|IRT_INT|IRCONV_SEXT);
  379|  4.35k|    } else if (op == NARROW_INT) {
  ------------------
  |  Branch (379:16): [True: 0, False: 4.35k]
  ------------------
  380|      0|      lj_assertJ(next < last, "missing arg to NARROW_INT");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  381|      0|      *sp++ = nc->t == IRT_I64 ?
  ------------------
  |  Branch (381:15): [True: 0, False: 0]
  ------------------
  382|      0|	      lj_ir_kint64(J, (int64_t)(int32_t)*next++) :
  383|      0|	      lj_ir_kint(J, *next++);
  384|  4.35k|    } else {  /* Regular IROpT. Pops two operands and pushes one result. */
  385|  4.35k|      IRRef mode = nc->mode;
  386|  4.35k|      lj_assertJ(sp >= nc->stack+2, "stack underflow");
  ------------------
  |  |  527|  4.35k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  4.35k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.35k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.35k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.35k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  387|  4.35k|      sp--;
  388|       |      /* Omit some overflow checks for array indexing. See comments above. */
  389|  4.35k|      if ((mode & IRCONV_CONVMASK) == IRCONV_INDEX) {
  ------------------
  |  |  259|  4.35k|#define IRCONV_CONVMASK		0xf000
  ------------------
                    if ((mode & IRCONV_CONVMASK) == IRCONV_INDEX) {
  ------------------
  |  |  264|  4.35k|#define IRCONV_INDEX  (2<<IRCONV_CSH)	/* Check + special backprop rules. */
  |  |  ------------------
  |  |  |  |  260|  4.35k|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  |  Branch (389:11): [True: 0, False: 4.35k]
  ------------------
  390|      0|	if (next == last && irref_isk(narrow_ref(sp[0])) &&
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (390:6): [True: 0, False: 0]
  ------------------
  391|      0|	  (uint32_t)IR(narrow_ref(sp[0]))->i + 0x40000000u < 0x80000000u)
  ------------------
  |  |   93|      0|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  |  Branch (391:4): [True: 0, False: 0]
  ------------------
  392|      0|	  guardot = 0;
  393|      0|	else  /* Otherwise cache a stronger check. */
  394|      0|	  mode += IRCONV_CHECK-IRCONV_INDEX;
  ------------------
  |  |  265|      0|#define IRCONV_CHECK  (3<<IRCONV_CSH)	/* Number checked for integerness. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
              	  mode += IRCONV_CHECK-IRCONV_INDEX;
  ------------------
  |  |  264|      0|#define IRCONV_INDEX  (2<<IRCONV_CSH)	/* Check + special backprop rules. */
  |  |  ------------------
  |  |  |  |  260|      0|#define IRCONV_CSH		12
  |  |  ------------------
  ------------------
  395|      0|      }
  396|  4.35k|      sp[-1] = emitir(op+guardot, sp[-1], sp[0]);
  ------------------
  |  |   97|  4.35k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  4.35k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  397|       |      /* Add to cache. */
  398|  4.35k|      if (narrow_ref(ref))
  ------------------
  |  |  201|  4.35k|#define narrow_ref(ins)		((IRRef1)(ins))
  |  |  ------------------
  |  |  |  Branch (201:26): [True: 4.35k, False: 0]
  |  |  ------------------
  ------------------
  399|  4.35k|	narrow_bpc_set(J, narrow_ref(ref), narrow_ref(sp[-1]), mode);
  ------------------
  |  |  201|  4.35k|#define narrow_ref(ins)		((IRRef1)(ins))
  ------------------
              	narrow_bpc_set(J, narrow_ref(ref), narrow_ref(sp[-1]), mode);
  ------------------
  |  |  201|  4.35k|#define narrow_ref(ins)		((IRRef1)(ins))
  ------------------
  400|  4.35k|    }
  401|  19.5k|  }
  402|  10.8k|  lj_assertJ(sp == nc->stack+1, "stack misalignment");
  ------------------
  |  |  527|  10.8k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  10.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  10.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 10.8k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  403|  10.8k|  return nc->stack[0];
  404|  10.8k|}
lj_opt_narrow.c:narrow_bpc_set:
  229|  4.35k|{
  230|  4.35k|  uint32_t slot = J->bpropslot;
  231|  4.35k|  BPropEntry *bp = &J->bpropcache[slot];
  232|  4.35k|  J->bpropslot = (slot + 1) & (BPROP_SLOTS-1);
  ------------------
  |  |  330|  4.35k|#define BPROP_SLOTS	16
  ------------------
  233|  4.35k|  bp->key = key;
  234|  4.35k|  bp->val = val;
  235|  4.35k|  bp->mode = mode;
  236|  4.35k|}
lj_opt_narrow.c:narrow_stripov:
  430|    166|{
  431|    166|  IRRef ref = tref_ref(tr);
  ------------------
  |  |  504|    166|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  432|    166|  IRIns *ir = IR(ref);
  ------------------
  |  |   93|    166|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  433|    166|  int op = ir->o;
  434|    166|  if (op >= IR_ADDOV && op <= lastop) {
  ------------------
  |  Branch (434:7): [True: 166, False: 0]
  |  Branch (434:25): [True: 0, False: 166]
  ------------------
  435|      0|    BPropEntry *bp = narrow_bpc_get(J, ref, mode);
  436|      0|    if (bp) {
  ------------------
  |  Branch (436:9): [True: 0, False: 0]
  ------------------
  437|      0|      return TREF(bp->val, irt_t(IR(bp->val)->t));
  ------------------
  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  ------------------
  438|      0|    } else {
  439|      0|      IRRef op1 = ir->op1, op2 = ir->op2;  /* The IR may be reallocated. */
  440|      0|      op1 = narrow_stripov(J, op1, lastop, mode);
  441|      0|      op2 = narrow_stripov(J, op2, lastop, mode);
  442|      0|      tr = emitir(IRT(op - IR_ADDOV + IR_ADD,
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  443|      0|		      ((mode & IRCONV_DSTMASK) >> IRCONV_DSH)), op1, op2);
  444|      0|      narrow_bpc_set(J, ref, tref_ref(tr), mode);
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  445|      0|    }
  446|    166|  } else if (LJ_64 && (mode & IRCONV_SEXT) && !irt_is64(ir->t)) {
  ------------------
  |  |  640|    332|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
                } else if (LJ_64 && (mode & IRCONV_SEXT) && !irt_is64(ir->t)) {
  ------------------
  |  |  257|    166|#define IRCONV_SEXT		0x0800	/* Sign-extend integer to integer. */
  ------------------
                } else if (LJ_64 && (mode & IRCONV_SEXT) && !irt_is64(ir->t)) {
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  |  Branch (446:23): [True: 0, False: 166]
  |  Branch (446:47): [True: 0, False: 0]
  ------------------
  447|      0|    tr = emitir(IRT(IR_CONV, IRT_INTP), tr, mode);
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  448|      0|  }
  449|    166|  return tr;
  450|    166|}
lj_opt_narrow.c:conv_str_tonum:
  523|   110k|{
  524|   110k|  if (tref_isstr(tr)) {
  ------------------
  |  |  515|   110k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|   110k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 0, False: 110k]
  |  |  ------------------
  ------------------
  525|      0|    tr = emitir(IRTG(IR_STRTO, IRT_NUM), tr, 0);
  ------------------
  |  |   97|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  526|       |    /* Would need an inverted STRTO for this rare and useless case. */
  527|      0|    if (!lj_strscan_num(strV(o), o))  /* Convert in-place. Value used below. */
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (527:9): [True: 0, False: 0]
  ------------------
  528|      0|      lj_trace_err(J, LJ_TRERR_BADTYPE);  /* Punt if non-numeric. */
  529|      0|  }
  530|   110k|  return tr;
  531|   110k|}
lj_opt_narrow.c:numisint:
  517|  39.2k|{
  518|  39.2k|  return (n == (lua_Number)lj_num2int(n));
  ------------------
  |  | 1000|  39.2k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  519|  39.2k|}
lj_opt_narrow.c:narrow_forl:
  592|  32.0k|{
  593|  32.0k|  if (tvisint(o)) return 1;
  ------------------
  |  |  803|  32.0k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  64.0k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  594|  32.0k|  if (LJ_DUALNUM || (J->flags & JIT_F_OPT_NARROW)) return numisint(numV(o));
  ------------------
  |  |  549|  64.0k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM || (J->flags & JIT_F_OPT_NARROW)) return numisint(numV(o));
  ------------------
  |  |   85|  32.0k|#define JIT_F_OPT_NARROW	(JIT_F_OPT << 5)
  |  |  ------------------
  |  |  |  |   77|  32.0k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                if (LJ_DUALNUM || (J->flags & JIT_F_OPT_NARROW)) return numisint(numV(o));
  ------------------
  |  |  866|  32.0k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  32.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  32.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  32.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 32.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  32.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (594:21): [True: 32.0k, False: 0]
  ------------------
  595|      0|  return 0;
  596|  32.0k|}

lj_opt_sink:
  241|  24.2k|{
  242|  24.2k|  const uint32_t need = (JIT_F_OPT_SINK|JIT_F_OPT_FWD|
  ------------------
  |  |   88|  24.2k|#define JIT_F_OPT_SINK		(JIT_F_OPT << 8)
  |  |  ------------------
  |  |  |  |   77|  24.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                const uint32_t need = (JIT_F_OPT_SINK|JIT_F_OPT_FWD|
  ------------------
  |  |   83|  24.2k|#define JIT_F_OPT_FWD		(JIT_F_OPT << 3)
  |  |  ------------------
  |  |  |  |   77|  24.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  243|  24.2k|			 JIT_F_OPT_DCE|JIT_F_OPT_CSE|JIT_F_OPT_FOLD);
  ------------------
  |  |   82|  24.2k|#define JIT_F_OPT_DCE		(JIT_F_OPT << 2)
  |  |  ------------------
  |  |  |  |   77|  24.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
              			 JIT_F_OPT_DCE|JIT_F_OPT_CSE|JIT_F_OPT_FOLD);
  ------------------
  |  |   81|  24.2k|#define JIT_F_OPT_CSE		(JIT_F_OPT << 1)
  |  |  ------------------
  |  |  |  |   77|  24.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
              			 JIT_F_OPT_DCE|JIT_F_OPT_CSE|JIT_F_OPT_FOLD);
  ------------------
  |  |   80|  24.2k|#define JIT_F_OPT_FOLD		(JIT_F_OPT << 0)
  |  |  ------------------
  |  |  |  |   77|  24.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  244|  24.2k|  if ((J->flags & need) == need &&
  ------------------
  |  Branch (244:7): [True: 24.2k, False: 0]
  ------------------
  245|  24.2k|      (J->chain[IR_TNEW] || J->chain[IR_TDUP] ||
  ------------------
  |  Branch (245:8): [True: 105, False: 24.1k]
  |  Branch (245:29): [True: 125, False: 23.9k]
  ------------------
  246|  24.2k|       (LJ_HASFFI && (J->chain[IR_CNEW] || J->chain[IR_CNEWI])))) {
  ------------------
  |  |  585|  47.9k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (246:23): [True: 0, False: 23.9k]
  |  Branch (246:44): [True: 0, False: 23.9k]
  ------------------
  247|    230|    if (!J->loopref)
  ------------------
  |  Branch (247:9): [True: 104, False: 126]
  ------------------
  248|    104|      sink_mark_snap(J, &J->cur.snap[J->cur.nsnap-1]);
  249|    230|    sink_mark_ins(J);
  250|    230|    if (J->loopref)
  ------------------
  |  Branch (250:9): [True: 126, False: 104]
  ------------------
  251|    126|      sink_remark_phi(J);
  252|    230|    sink_sweep_ins(J);
  253|    230|  }
  254|  24.2k|}
lj_opt_sink.c:sink_mark_snap:
  144|    104|{
  145|    104|  SnapEntry *map = &J->cur.snapmap[snap->mapofs];
  146|    104|  MSize n, nent = snap->nent;
  147|  2.60k|  for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (147:15): [True: 2.50k, False: 104]
  ------------------
  148|  2.50k|    IRRef ref = snap_ref(map[n]);
  ------------------
  |  |  220|  2.50k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  149|  2.50k|    if (!irref_isk(ref))
  ------------------
  |  |  485|  2.50k|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (149:9): [True: 620, False: 1.88k]
  ------------------
  150|    620|      irt_setmark(IR(ref)->t);
  ------------------
  |  |  446|    620|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  151|  2.50k|  }
  152|    104|}
lj_opt_sink.c:sink_mark_ins:
   83|    230|{
   84|    230|  IRIns *ir, *irlast = IR(J->cur.nins-1);
  ------------------
  |  |   19|    230|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   85|  6.50k|  for (ir = irlast ; ; ir--) {
   86|  6.50k|    switch (ir->o) {
   87|    230|    case IR_BASE:
  ------------------
  |  Branch (87:5): [True: 230, False: 6.27k]
  ------------------
   88|    230|      return;  /* Finished. */
   89|    335|    case IR_ALOAD: case IR_HLOAD: case IR_XLOAD: case IR_TBAR: case IR_ALEN:
  ------------------
  |  Branch (89:5): [True: 47, False: 6.46k]
  |  Branch (89:20): [True: 132, False: 6.37k]
  |  Branch (89:35): [True: 0, False: 6.50k]
  |  Branch (89:50): [True: 156, False: 6.35k]
  |  Branch (89:64): [True: 0, False: 6.50k]
  ------------------
   90|    335|      irt_setmark(IR(ir->op1)->t);  /* Mark ref for remaining loads. */
  ------------------
  |  |  446|    335|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
   91|    335|      break;
   92|  1.35k|    case IR_FLOAD:
  ------------------
  |  Branch (92:5): [True: 1.35k, False: 5.15k]
  ------------------
   93|  1.35k|      if (irt_ismarked(ir->t) || ir->op2 == IRFL_TAB_META)
  ------------------
  |  |  445|  2.70k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 1.15k, False: 203]
  |  |  ------------------
  ------------------
  |  Branch (93:34): [True: 0, False: 203]
  ------------------
   94|  1.15k|	irt_setmark(IR(ir->op1)->t);  /* Mark table for remaining loads. */
  ------------------
  |  |  446|  1.15k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
   95|  1.35k|      break;
   96|    434|    case IR_ASTORE: case IR_HSTORE: case IR_FSTORE: case IR_XSTORE: {
  ------------------
  |  Branch (96:5): [True: 400, False: 6.10k]
  |  Branch (96:21): [True: 16, False: 6.49k]
  |  Branch (96:37): [True: 18, False: 6.49k]
  |  Branch (96:53): [True: 0, False: 6.50k]
  ------------------
   97|    434|      IRIns *ira = sink_checkalloc(J, ir);
   98|    434|      if (!ira || (irt_isphi(ira->t) && !sink_checkphi(J, ira, ir->op2)))
  ------------------
  |  |  448|    476|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 64, False: 174]
  |  |  ------------------
  ------------------
  |  Branch (98:11): [True: 196, False: 238]
  |  Branch (98:41): [True: 1, False: 63]
  ------------------
   99|    197|	irt_setmark(IR(ir->op1)->t);  /* Mark ineligible ref. */
  ------------------
  |  |  446|    197|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  100|    434|      irt_setmark(IR(ir->op2)->t);  /* Mark stored value. */
  ------------------
  |  |  446|    434|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  101|    434|      break;
  102|    434|      }
  103|      0|#if LJ_HASFFI
  104|      0|    case IR_CNEWI:
  ------------------
  |  Branch (104:5): [True: 0, False: 6.50k]
  ------------------
  105|      0|      if (irt_isphi(ir->t) &&
  ------------------
  |  |  448|      0|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  106|      0|	  (!sink_checkphi(J, ir, ir->op2) ||
  ------------------
  |  Branch (106:5): [True: 0, False: 0]
  ------------------
  107|      0|	   (LJ_32 && ir+1 < irlast && (ir+1)->o == IR_HIOP &&
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (107:15): [True: 0, False: 0]
  |  Branch (107:32): [True: 0, False: 0]
  ------------------
  108|      0|	    !sink_checkphi(J, ir, (ir+1)->op2))))
  ------------------
  |  Branch (108:6): [True: 0, False: 0]
  ------------------
  109|      0|	irt_setmark(ir->t);  /* Mark ineligible allocation. */
  ------------------
  |  |  446|      0|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  110|      0|#endif
  111|       |      /* fallthrough */
  112|      0|    case IR_USTORE:
  ------------------
  |  Branch (112:5): [True: 0, False: 6.50k]
  ------------------
  113|      0|      irt_setmark(IR(ir->op2)->t);  /* Mark stored value. */
  ------------------
  |  |  446|      0|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  114|      0|      break;
  115|      0|#if LJ_HASFFI
  116|      0|    case IR_CALLXS:
  ------------------
  |  Branch (116:5): [True: 0, False: 6.50k]
  ------------------
  117|      0|#endif
  118|      0|    case IR_CALLS:
  ------------------
  |  Branch (118:5): [True: 0, False: 6.50k]
  ------------------
  119|      0|      irt_setmark(IR(ir->op1)->t);  /* Mark (potentially) stored values. */
  ------------------
  |  |  446|      0|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  120|      0|      break;
  121|    208|    case IR_PHI: {
  ------------------
  |  Branch (121:5): [True: 208, False: 6.30k]
  ------------------
  122|    208|      IRIns *irl = IR(ir->op1), *irr = IR(ir->op2);
  ------------------
  |  |   19|    208|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                    IRIns *irl = IR(ir->op1), *irr = IR(ir->op2);
  ------------------
  |  |   19|    208|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  123|    208|      irl->prev = irr->prev = 0;  /* Clear PHI value counts. */
  124|    208|      if (irl->o == irr->o &&
  ------------------
  |  Branch (124:11): [True: 208, False: 0]
  ------------------
  125|    208|	  (irl->o == IR_TNEW || irl->o == IR_TDUP ||
  ------------------
  |  Branch (125:5): [True: 24, False: 184]
  |  Branch (125:26): [True: 0, False: 184]
  ------------------
  126|    208|	   (LJ_HASFFI && (irl->o == IR_CNEW || irl->o == IR_CNEWI))))
  ------------------
  |  |  585|    368|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (126:20): [True: 0, False: 184]
  |  Branch (126:41): [True: 0, False: 184]
  ------------------
  127|     24|	break;
  128|    184|      irt_setmark(irl->t);
  ------------------
  |  |  446|    184|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  129|    184|      irt_setmark(irr->t);
  ------------------
  |  |  446|    184|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  130|    184|      break;
  131|    208|      }
  132|  3.94k|    default:
  ------------------
  |  Branch (132:5): [True: 3.94k, False: 2.56k]
  ------------------
  133|  3.94k|      if (irt_ismarked(ir->t) || irt_isguard(ir->t)) {  /* Propagate mark. */
  ------------------
  |  |  445|  7.89k|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  |  |  ------------------
  |  |  |  Branch (445:26): [True: 1.98k, False: 1.96k]
  |  |  ------------------
  ------------------
                    if (irt_ismarked(ir->t) || irt_isguard(ir->t)) {  /* Propagate mark. */
  ------------------
  |  |  444|  1.96k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  |  |  ------------------
  |  |  |  Branch (444:25): [True: 1.67k, False: 289]
  |  |  ------------------
  ------------------
  134|  3.65k|	if (ir->op1 >= REF_FIRST) irt_setmark(IR(ir->op1)->t);
  ------------------
  |  |  446|  2.43k|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  |  Branch (134:6): [True: 2.43k, False: 1.21k]
  ------------------
  135|  3.65k|	if (ir->op2 >= REF_FIRST) irt_setmark(IR(ir->op2)->t);
  ------------------
  |  |  446|    361|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  |  Branch (135:6): [True: 361, False: 3.29k]
  ------------------
  136|  3.65k|      }
  137|  3.94k|      break;
  138|  6.50k|    }
  139|  6.50k|  }
  140|    230|}
lj_opt_sink.c:sink_checkalloc:
   23|    868|{
   24|    868|  IRIns *ir = IR(irs->op1);
  ------------------
  |  |   19|    868|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   25|    868|  if (!irref_isk(ir->op2))
  ------------------
  |  |  485|    868|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
  |  Branch (25:7): [True: 288, False: 580]
  ------------------
   26|    288|    return NULL;  /* Non-constant key. */
   27|    580|  if (ir->o == IR_HREFK || ir->o == IR_AREF)
  ------------------
  |  Branch (27:7): [True: 32, False: 548]
  |  Branch (27:28): [True: 512, False: 36]
  ------------------
   28|    544|    ir = IR(ir->op1);
  ------------------
  |  |   19|    544|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   29|     36|  else if (!(ir->o == IR_HREF || ir->o == IR_NEWREF ||
  ------------------
  |  Branch (29:14): [True: 0, False: 36]
  |  Branch (29:34): [True: 0, False: 36]
  ------------------
   30|     36|	     ir->o == IR_FREF || ir->o == IR_ADD))
  ------------------
  |  Branch (30:7): [True: 36, False: 0]
  |  Branch (30:27): [True: 0, False: 0]
  ------------------
   31|      0|    return NULL;  /* Unhandled reference type (for XSTORE). */
   32|    580|  ir = IR(ir->op1);
  ------------------
  |  |   19|    580|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   33|    580|  if (!(ir->o == IR_TNEW || ir->o == IR_TDUP || ir->o == IR_CNEW))
  ------------------
  |  Branch (33:9): [True: 468, False: 112]
  |  Branch (33:29): [True: 8, False: 104]
  |  Branch (33:49): [True: 0, False: 104]
  ------------------
   34|    104|    return NULL;  /* Not an allocation. */
   35|    476|  return ir;  /* Return allocation. */
   36|    580|}
lj_opt_sink.c:sink_checkphi:
   52|     64|{
   53|     64|  if (ref >= REF_FIRST) {
  ------------------
  |  Branch (53:7): [True: 64, False: 0]
  ------------------
   54|     64|    IRIns *ir = IR(ref);
  ------------------
  |  |   19|     64|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   55|     64|    if (irt_isphi(ir->t) || (ir->o == IR_CONV && ir->op2 == IRCONV_NUM_INT &&
  ------------------
  |  |  448|    128|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 46, False: 18]
  |  |  ------------------
  ------------------
                  if (irt_isphi(ir->t) || (ir->o == IR_CONV && ir->op2 == IRCONV_NUM_INT &&
  ------------------
  |  |  255|     18|#define IRCONV_NUM_INT		((IRT_NUM<<IRCONV_DSH)|IRT_INT)
  |  |  ------------------
  |  |  |  |  254|      0|#define IRCONV_DSH		5
  |  |  ------------------
  ------------------
  |  Branch (55:30): [True: 0, False: 18]
  |  Branch (55:50): [True: 0, False: 0]
  ------------------
   56|     46|			     irt_isphi(IR(ir->op1)->t))) {
  ------------------
  |  |  448|      0|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   57|     46|      ira->prev++;
   58|     46|      return 1;  /* Sinkable PHI. */
   59|     46|    }
   60|       |    /* Otherwise the value must be loop-invariant. */
   61|     18|    if (ref < J->loopref) {
  ------------------
  |  Branch (61:9): [True: 17, False: 1]
  ------------------
   62|       |      /* Check for PHI dependencies, but give up after reasonable effort. */
   63|     17|      int work = 64;
   64|     17|      return !sink_phidep(J, ref, &work);
   65|     17|    } else {
   66|      1|      return 0;  /* Loop-variant. */
   67|      1|    }
   68|     18|  }
   69|      0|  return 1;  /* Constant (non-PHI). */
   70|     64|}
lj_opt_sink.c:sink_phidep:
   40|    105|{
   41|    105|  IRIns *ir = IR(ref);
  ------------------
  |  |   19|    105|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
   42|    105|  if (!*workp) return 1;  /* Give up and pretend it does. */
  ------------------
  |  Branch (42:7): [True: 0, False: 105]
  ------------------
   43|    105|  (*workp)--;
   44|    105|  if (irt_isphi(ir->t)) return 1;
  ------------------
  |  |  448|    105|#define irt_isphi(t)		((t).irt & IRT_ISPHI)
  |  |  ------------------
  |  |  |  Branch (448:23): [True: 0, False: 105]
  |  |  ------------------
  ------------------
   45|    105|  if (ir->op1 >= REF_FIRST && sink_phidep(J, ir->op1, workp)) return 1;
  ------------------
  |  Branch (45:7): [True: 71, False: 34]
  |  Branch (45:31): [True: 0, False: 71]
  ------------------
   46|    105|  if (ir->op2 >= REF_FIRST && sink_phidep(J, ir->op2, workp)) return 1;
  ------------------
  |  Branch (46:7): [True: 17, False: 88]
  |  Branch (46:31): [True: 0, False: 17]
  ------------------
   47|    105|  return 0;
   48|    105|}
lj_opt_sink.c:sink_remark_phi:
  156|    126|{
  157|    126|  IRIns *ir;
  158|    126|  int remark;
  159|    127|  do {
  160|    127|    remark = 0;
  161|    338|    for (ir = IR(J->cur.nins-1); ir->o == IR_PHI; ir--) {
  ------------------
  |  |   19|    127|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (161:34): [True: 211, False: 127]
  ------------------
  162|    211|      IRIns *irl = IR(ir->op1), *irr = IR(ir->op2);
  ------------------
  |  |   19|    211|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
                    IRIns *irl = IR(ir->op1), *irr = IR(ir->op2);
  ------------------
  |  |   19|    211|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  163|    211|      if (!((irl->t.irt ^ irr->t.irt) & IRT_MARK) && irl->prev == irr->prev)
  ------------------
  |  Branch (163:11): [True: 210, False: 1]
  |  Branch (163:54): [True: 194, False: 16]
  ------------------
  164|    194|	continue;
  165|     17|      remark |= (~(irl->t.irt & irr->t.irt) & IRT_MARK);
  166|     17|      irt_setmark(IR(ir->op1)->t);
  ------------------
  |  |  446|     17|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  167|     17|      irt_setmark(IR(ir->op2)->t);
  ------------------
  |  |  446|     17|#define irt_setmark(t)		((t).irt |= IRT_MARK)
  ------------------
  168|     17|    }
  169|    127|  } while (remark);
  ------------------
  |  Branch (169:12): [True: 1, False: 126]
  ------------------
  170|    126|}
lj_opt_sink.c:sink_sweep_ins:
  174|    230|{
  175|    230|  IRIns *ir, *irbase = IR(REF_BASE);
  ------------------
  |  |   19|    230|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  176|  6.73k|  for (ir = IR(J->cur.nins-1) ; ir >= irbase; ir--) {
  ------------------
  |  |   19|    230|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (176:33): [True: 6.50k, False: 230]
  ------------------
  177|  6.50k|    switch (ir->o) {
  178|    434|    case IR_ASTORE: case IR_HSTORE: case IR_FSTORE: case IR_XSTORE: {
  ------------------
  |  Branch (178:5): [True: 400, False: 6.10k]
  |  Branch (178:21): [True: 16, False: 6.49k]
  |  Branch (178:37): [True: 18, False: 6.49k]
  |  Branch (178:53): [True: 0, False: 6.50k]
  ------------------
  179|    434|      IRIns *ira = sink_checkalloc(J, ir);
  180|    434|      if (ira && !irt_ismarked(ira->t)) {
  ------------------
  |  |  445|    238|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  ------------------
  |  Branch (180:11): [True: 238, False: 196]
  |  Branch (180:18): [True: 154, False: 84]
  ------------------
  181|    154|	int delta = (int)(ir - ira);
  182|    154|	ir->prev = REGSP(RID_SINK, delta > 255 ? 255 : delta);
  ------------------
  |  |   44|    308|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  |  |  |  Branch (44:31): [True: 0, False: 154]
  |  |  ------------------
  ------------------
  183|    280|      } else {
  184|    280|	ir->prev = REGSP_INIT;
  ------------------
  |  |   46|    280|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|    280|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  185|    280|      }
  186|    434|      break;
  187|    434|      }
  188|      0|    case IR_NEWREF:
  ------------------
  |  Branch (188:5): [True: 0, False: 6.50k]
  ------------------
  189|      0|      if (!irt_ismarked(IR(ir->op1)->t)) {
  ------------------
  |  |  445|      0|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  ------------------
  |  Branch (189:11): [True: 0, False: 0]
  ------------------
  190|      0|	ir->prev = REGSP(RID_SINK, 0);
  ------------------
  |  |   44|      0|#define REGSP(r, s)		((r) + ((s) << 8))
  ------------------
  191|      0|      } else {
  192|      0|	irt_clearmark(ir->t);
  ------------------
  |  |  447|      0|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  193|      0|	ir->prev = REGSP_INIT;
  ------------------
  |  |   46|      0|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|      0|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  194|      0|      }
  195|      0|      break;
  196|      0|#if LJ_HASFFI
  197|      0|    case IR_CNEW: case IR_CNEWI:
  ------------------
  |  Branch (197:5): [True: 0, False: 6.50k]
  |  Branch (197:19): [True: 0, False: 6.50k]
  ------------------
  198|      0|#endif
  199|    596|    case IR_TNEW: case IR_TDUP:
  ------------------
  |  Branch (199:5): [True: 260, False: 6.24k]
  |  Branch (199:19): [True: 336, False: 6.17k]
  ------------------
  200|    596|      if (!irt_ismarked(ir->t)) {
  ------------------
  |  |  445|    596|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  ------------------
  |  Branch (200:11): [True: 140, False: 456]
  ------------------
  201|    140|	ir->t.irt &= ~IRT_GUARD;
  202|    140|	ir->prev = REGSP(RID_SINK, 0);
  ------------------
  |  |   44|    140|#define REGSP(r, s)		((r) + ((s) << 8))
  ------------------
  203|    140|	J->cur.sinktags = 1;  /* Signal present SINK tags to assembler. */
  204|    456|      } else {
  205|    456|	irt_clearmark(ir->t);
  ------------------
  |  |  447|    456|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  206|    456|	ir->prev = REGSP_INIT;
  ------------------
  |  |   46|    456|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|    456|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  207|    456|      }
  208|    596|      break;
  209|    208|    case IR_PHI: {
  ------------------
  |  Branch (209:5): [True: 208, False: 6.30k]
  ------------------
  210|    208|      IRIns *ira = IR(ir->op2);
  ------------------
  |  |   19|    208|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  211|    208|      if (!irt_ismarked(ira->t) &&
  ------------------
  |  |  445|    416|#define irt_ismarked(t)		((t).irt & IRT_MARK)
  ------------------
  |  Branch (211:11): [True: 7, False: 201]
  ------------------
  212|    208|	  (ira->o == IR_TNEW || ira->o == IR_TDUP ||
  ------------------
  |  Branch (212:5): [True: 7, False: 0]
  |  Branch (212:26): [True: 0, False: 0]
  ------------------
  213|      7|	   (LJ_HASFFI && (ira->o == IR_CNEW || ira->o == IR_CNEWI)))) {
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (213:20): [True: 0, False: 0]
  |  Branch (213:41): [True: 0, False: 0]
  ------------------
  214|      7|	ir->prev = REGSP(RID_SINK, 0);
  ------------------
  |  |   44|      7|#define REGSP(r, s)		((r) + ((s) << 8))
  ------------------
  215|    201|      } else {
  216|    201|	ir->prev = REGSP_INIT;
  ------------------
  |  |   46|    201|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|    201|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  217|    201|      }
  218|    208|      break;
  219|    260|      }
  220|  5.27k|    default:
  ------------------
  |  Branch (220:5): [True: 5.27k, False: 1.23k]
  ------------------
  221|  5.27k|      irt_clearmark(ir->t);
  ------------------
  |  |  447|  5.27k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  222|  5.27k|      ir->prev = REGSP_INIT;
  ------------------
  |  |   46|  5.27k|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|  5.27k|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  223|  5.27k|      break;
  224|  6.50k|    }
  225|  6.50k|  }
  226|  2.78k|  for (ir = IR(J->cur.nk); ir < irbase; ir++) {
  ------------------
  |  |   19|    230|#define IR(ref)		(&J->cur.ir[(ref)])
  ------------------
  |  Branch (226:28): [True: 2.55k, False: 230]
  ------------------
  227|  2.55k|    irt_clearmark(ir->t);
  ------------------
  |  |  447|  2.55k|#define irt_clearmark(t)	((t).irt &= ~IRT_MARK)
  ------------------
  228|  2.55k|    ir->prev = REGSP_INIT;
  ------------------
  |  |   46|  2.55k|#define REGSP_INIT		REGSP(RID_INIT, 0)
  |  |  ------------------
  |  |  |  |   44|  2.55k|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  229|       |    /* The false-positive of irt_is64() for ASMREF_L (REF_NIL) is OK here. */
  230|  2.55k|    if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|  5.10k|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  2.55k|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  2.55k|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  2.55k|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  2.55k|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  2.55k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 1.44k, False: 1.10k]
  |  |  ------------------
  ------------------
  |  Branch (230:28): [True: 1.21k, False: 230]
  ------------------
  231|  1.21k|      ir++;
  232|  2.55k|  }
  233|    230|}

lj_parse_keepstr:
  240|   197M|{
  241|       |  /* NOBARRIER: the key is new or kept alive. */
  242|   197M|  lua_State *L = ls->L;
  243|   197M|  GCstr *s = lj_str_new(L, str, len);
  244|   197M|  TValue *tv = lj_tab_setstr(L, ls->fs->kt, s);
  245|   197M|  if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  782|   197M|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 187M, False: 9.85M]
  |  |  ------------------
  ------------------
                if (tvisnil(tv)) setboolV(tv, 1);
  ------------------
  |  |  874|   187M|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  246|   197M|  lj_gc_check(L);
  ------------------
  |  |   66|   197M|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|   197M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 2.25M, False: 195M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|   197M|      lj_gc_step(L); }
  ------------------
  247|   197M|  return s;
  248|   197M|}
lj_parse_keepcdata:
  253|  70.2k|{
  254|       |  /* NOBARRIER: the key is new or kept alive. */
  255|  70.2k|  lua_State *L = ls->L;
  256|  70.2k|  setcdataV(L, tv, cd);
  257|  70.2k|  setboolV(lj_tab_set(L, ls->fs->kt, tv), 1);
  ------------------
  |  |  874|  70.2k|#define setboolV(o, x)		((o)->it64 = (int64_t)~((uint64_t)((x)+1)<<47))
  ------------------
  258|  70.2k|}
lj_parse:
 2730|  2.97M|{
 2731|  2.97M|  FuncState fs;
 2732|  2.97M|  FuncScope bl;
 2733|  2.97M|  GCproto *pt;
 2734|  2.97M|  lua_State *L = ls->L;
 2735|       |#ifdef LUAJIT_DISABLE_DEBUGINFO
 2736|       |  ls->chunkname = lj_str_newlit(L, "=");
 2737|       |#else
 2738|  2.97M|  ls->chunkname = lj_str_newz(L, ls->chunkarg);
  ------------------
  |  |   27|  2.97M|#define lj_str_newz(L, s)	(lj_str_new(L, s, strlen(s)))
  ------------------
 2739|  2.97M|#endif
 2740|  2.97M|  setstrV(L, L->top, ls->chunkname);  /* Anchor chunkname string. */
 2741|  2.97M|  incr_top(L);
  ------------------
  |  |   12|  2.97M|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  5.94M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  2.97M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 2.97M]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 2742|  2.97M|  ls->level = 0;
 2743|  2.97M|  fs_init(ls, &fs);
 2744|  2.97M|  fs.linedefined = 0;
 2745|  2.97M|  fs.numparams = 0;
 2746|  2.97M|  fs.bcbase = NULL;
 2747|  2.97M|  fs.bclim = 0;
 2748|  2.97M|  fs.flags |= PROTO_VARARG;  /* Main chunk is always a vararg func. */
  ------------------
  |  |  400|  2.97M|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 2749|  2.97M|  fscope_begin(&fs, &bl, 0);
 2750|  2.97M|  bcemit_AD(&fs, BC_FUNCV, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  2.97M|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  2.97M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2751|  2.97M|  lj_lex_next(ls);  /* Read-ahead first token. */
 2752|  2.97M|  parse_chunk(ls);
 2753|  2.97M|  if (ls->tok != TK_eof)
  ------------------
  |  Branch (2753:7): [True: 72.4k, False: 2.90M]
  ------------------
 2754|  72.4k|    err_token(ls, TK_eof);
 2755|  2.90M|  pt = fs_finish(ls, ls->linenumber);
 2756|  2.90M|  L->top--;  /* Drop chunkname. */
 2757|  2.90M|  lj_assertL(fs.prev == NULL && ls->fs == NULL, "mismatched frame nesting");
  ------------------
  |  |  365|  2.90M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  3.89M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 989k, False: 1.91M]
  |  |  |  |  |  Branch (355:5): [True: 989k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.90M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2758|   989k|  lj_assertL(pt->sizeuv == 0, "toplevel proto has upvalues");
  ------------------
  |  |  365|   989k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   989k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 989k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   989k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 2759|   989k|  return pt;
 2760|   989k|}
lj_parse.c:fs_init:
 1626|  4.36M|{
 1627|  4.36M|  lua_State *L = ls->L;
 1628|  4.36M|  fs->prev = ls->fs; ls->fs = fs;  /* Append to list. */
 1629|  4.36M|  fs->ls = ls;
 1630|  4.36M|  fs->vbase = ls->vtop;
 1631|  4.36M|  fs->L = L;
 1632|  4.36M|  fs->pc = 0;
 1633|  4.36M|  fs->lasttarget = 0;
 1634|  4.36M|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  4.36M|#define NO_JMP		(~(BCPos)0)
  ------------------
 1635|  4.36M|  fs->freereg = 0;
 1636|  4.36M|  fs->nkgc = 0;
 1637|  4.36M|  fs->nkn = 0;
 1638|  4.36M|  fs->nactvar = 0;
 1639|  4.36M|  fs->nuv = 0;
 1640|  4.36M|  fs->bl = NULL;
 1641|  4.36M|  fs->flags = 0;
 1642|  4.36M|  fs->framesize = 1;  /* Minimum frame size. */
 1643|  4.36M|  fs->kt = lj_tab_new(L, 0, 0);
 1644|       |  /* Anchor table of constants in stack to avoid being collected. */
 1645|  4.36M|  settabV(L, L->top, fs->kt);
 1646|  4.36M|  incr_top(L);
  ------------------
  |  |   12|  4.36M|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  8.73M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  4.36M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 0, False: 4.36M]
  |  |  |  Branch (12:38): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1647|  4.36M|}
lj_parse.c:fscope_begin:
 1283|  4.47M|{
 1284|  4.47M|  bl->nactvar = (uint8_t)fs->nactvar;
 1285|  4.47M|  bl->flags = flags;
 1286|  4.47M|  bl->vstart = fs->ls->vtop;
 1287|  4.47M|  bl->prev = fs->bl;
 1288|  4.47M|  fs->bl = bl;
 1289|  4.47M|  lj_assertFS(fs->freereg == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|  4.47M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  4.47M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.47M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.47M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.47M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1290|  4.47M|}
lj_parse.c:bcemit_INS:
  416|  16.2M|{
  417|  16.2M|  BCPos pc = fs->pc;
  418|  16.2M|  LexState *ls = fs->ls;
  419|  16.2M|  jmp_patchval(fs, fs->jpc, pc, NO_REG, pc);
  ------------------
  |  |   30|  16.2M|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  16.2M|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  420|  16.2M|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|  16.2M|#define NO_JMP		(~(BCPos)0)
  ------------------
  421|  16.2M|  if (LJ_UNLIKELY(pc >= fs->bclim)) {
  ------------------
  |  |  146|  16.2M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 3.25M, False: 12.9M]
  |  |  ------------------
  ------------------
  422|  3.25M|    ptrdiff_t base = fs->bcbase - ls->bcstack;
  423|  3.25M|    checklimit(fs, ls->sizebcstack, LJ_MAX_BCINS, "bytecode instructions");
  ------------------
  |  |  192|  3.25M|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 3.25M]
  |  |  ------------------
  ------------------
  424|  3.25M|    lj_mem_growvec(fs->L, ls->bcstack, ls->sizebcstack, LJ_MAX_BCINS,BCInsLine);
  ------------------
  |  |  129|  3.25M|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
  425|  3.25M|    fs->bclim = (BCPos)(ls->sizebcstack - base);
  426|  3.25M|    fs->bcbase = ls->bcstack + base;
  427|  3.25M|  }
  428|  16.2M|  fs->bcbase[pc].ins = ins;
  429|  16.2M|  fs->bcbase[pc].line = ls->lastline;
  430|  16.2M|  fs->pc = pc+1;
  431|  16.2M|  return pc;
  432|  16.2M|}
lj_parse.c:jmp_patchval:
  347|  16.4M|{
  348|  16.5M|  while (list != NO_JMP) {
  ------------------
  |  |   31|  16.5M|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (348:10): [True: 146k, False: 16.4M]
  ------------------
  349|   146k|    BCPos next = jmp_next(fs, list);
  350|   146k|    if (jmp_patchtestreg(fs, list, reg))
  ------------------
  |  Branch (350:9): [True: 11.8k, False: 134k]
  ------------------
  351|  11.8k|      jmp_patchins(fs, list, vtarget);  /* Jump to target with value. */
  352|   134k|    else
  353|   134k|      jmp_patchins(fs, list, dtarget);  /* Jump to default target. */
  354|   146k|    list = next;
  355|   146k|  }
  356|  16.4M|}
lj_parse.c:jmp_next:
  265|   204k|{
  266|   204k|  ptrdiff_t delta = bc_j(fs->bcbase[pc].ins);
  ------------------
  |  |   39|   204k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|   204k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|   204k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  267|   204k|  if ((BCPos)delta == NO_JMP)
  ------------------
  |  |   31|   204k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (267:7): [True: 155k, False: 49.0k]
  ------------------
  268|   155k|    return NO_JMP;
  ------------------
  |  |   31|   155k|#define NO_JMP		(~(BCPos)0)
  ------------------
  269|  49.0k|  else
  270|  49.0k|    return (BCPos)(((ptrdiff_t)pc+1)+delta);
  271|   204k|}
lj_parse.c:jmp_patchtestreg:
  286|   150k|{
  287|   150k|  BCInsLine *ilp = &fs->bcbase[pc >= 1 ? pc-1 : pc];
  ------------------
  |  Branch (287:32): [True: 150k, False: 0]
  ------------------
  288|   150k|  BCOp op = bc_op(ilp->ins);
  ------------------
  |  |   34|   150k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  289|   150k|  if (op == BC_ISTC || op == BC_ISFC) {
  ------------------
  |  Branch (289:7): [True: 6.51k, False: 143k]
  |  Branch (289:24): [True: 3.91k, False: 139k]
  ------------------
  290|  10.4k|    if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   30|  10.4k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  20.8k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
                  if (reg != NO_REG && reg != bc_d(ilp->ins)) {
  ------------------
  |  |   38|  5.60k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (290:9): [True: 5.60k, False: 4.81k]
  |  Branch (290:26): [True: 1.91k, False: 3.69k]
  ------------------
  291|  1.91k|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|  1.91k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  1.91k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.91k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  292|  8.50k|    } else {  /* Nothing to store or already in the right register. */
  293|  8.50k|      setbc_op(&ilp->ins, op+(BC_IST-BC_ISTC));
  ------------------
  |  |   44|  8.50k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  8.50k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  8.50k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  294|  8.50k|      setbc_a(&ilp->ins, 0);
  ------------------
  |  |   45|  8.50k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  8.50k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  8.50k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  295|  8.50k|    }
  296|   139k|  } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   35|   139k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                } else if (bc_a(ilp->ins) == NO_REG) {
  ------------------
  |  |   30|   139k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|   139k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (296:14): [True: 3.71k, False: 135k]
  ------------------
  297|  3.71k|    if (reg == NO_REG) {
  ------------------
  |  |   30|  3.71k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  3.71k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (297:9): [True: 1.38k, False: 2.32k]
  ------------------
  298|  1.38k|      ilp->ins = BCINS_AJ(BC_JMP, bc_a(fs->bcbase[pc].ins), 0);
  ------------------
  |  |   57|  1.38k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   56|  1.38k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  299|  2.32k|    } else {
  300|  2.32k|      setbc_a(&ilp->ins, reg);
  ------------------
  |  |   45|  2.32k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  2.32k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  2.32k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  301|  2.32k|      if (reg >= bc_a(ilp[1].ins))
  ------------------
  |  |   35|  2.32k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (301:11): [True: 2.11k, False: 210]
  ------------------
  302|  2.32k|	setbc_a(&ilp[1].ins, reg+1);
  ------------------
  |  |   45|  2.11k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  2.11k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  2.11k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  303|  2.32k|    }
  304|   135k|  } else {
  305|   135k|    return 0;  /* Cannot patch other instructions. */
  306|   135k|  }
  307|  14.1k|  return 1;
  308|   150k|}
lj_parse.c:jmp_patchins:
  319|   210k|{
  320|   210k|  BCIns *jmp = &fs->bcbase[pc].ins;
  321|   210k|  BCPos offset = dest-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|   210k|#define BCBIAS_J	0x8000
  ------------------
  322|   210k|  lj_assertFS(dest != NO_JMP, "uninitialized jump target");
  ------------------
  |  |  167|   210k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   210k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   210k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 210k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   210k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|   210k|  if (offset > BCMAX_D)
  ------------------
  |  |   28|   210k|#define BCMAX_D		0xffff
  ------------------
  |  Branch (323:7): [True: 0, False: 210k]
  ------------------
  324|      0|    err_syntax(fs->ls, LJ_ERR_XJUMP);
  325|   210k|  setbc_d(jmp, offset);
  ------------------
  |  |   49|   210k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|   210k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  326|   210k|}
lj_parse.c:err_syntax:
  175|  1.00M|{
  176|  1.00M|  lj_lex_error(ls, ls->tok, em);
  177|  1.00M|}
lj_parse.c:err_limit:
  185|      4|{
  186|      4|  if (fs->linedefined == 0)
  ------------------
  |  Branch (186:7): [True: 2, False: 2]
  ------------------
  187|      2|    lj_lex_error(fs->ls, 0, LJ_ERR_XLIMM, limit, what);
  188|      2|  else
  189|      2|    lj_lex_error(fs->ls, 0, LJ_ERR_XLIMF, fs->linedefined, limit, what);
  190|      4|}
lj_parse.c:parse_chunk:
 2714|  4.39M|{
 2715|  4.39M|  int islast = 0;
 2716|  4.39M|  synlevel_begin(ls);
 2717|  7.22M|  while (!islast && !parse_isend(ls->tok)) {
  ------------------
  |  Branch (2717:10): [True: 6.24M, False: 979k]
  |  Branch (2717:21): [True: 5.12M, False: 1.11M]
  ------------------
 2718|  5.12M|    islast = parse_stmt(ls);
 2719|  5.12M|    lex_opt(ls, ';');
 2720|  5.12M|    lj_assertLS(ls->fs->framesize >= ls->fs->freereg &&
  ------------------
  |  |   89|  5.12M|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  5.12M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  7.94M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.82M, False: 2.29M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.82M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.12M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2721|  5.12M|		ls->fs->freereg >= ls->fs->nactvar,
 2722|  5.12M|		"bad regalloc");
 2723|  2.82M|    ls->fs->freereg = ls->fs->nactvar;  /* Free registers after each stmt. */
 2724|  2.82M|  }
 2725|  2.09M|  synlevel_end(ls);
  ------------------
  |  | 2052|  2.09M|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2726|  2.09M|}
lj_parse.c:synlevel_begin:
 2047|   203M|{
 2048|   203M|  if (++ls->level >= LJ_MAX_XLEVEL)
  ------------------
  |  |   65|   203M|#define LJ_MAX_XLEVEL	200		/* Max. syntactic nesting level. */
  ------------------
  |  Branch (2048:7): [True: 9, False: 203M]
  ------------------
 2049|      9|    lj_lex_error(ls, 0, LJ_ERR_XLEVELS);
 2050|   203M|}
lj_parse.c:parse_isend:
 2324|  7.75M|{
 2325|  7.75M|  switch (tok) {
 2326|  1.13M|  case TK_else: case TK_elseif: case TK_end: case TK_until: case TK_eof:
  ------------------
  |  Branch (2326:3): [True: 1.69k, False: 7.75M]
  |  Branch (2326:17): [True: 48, False: 7.75M]
  |  Branch (2326:33): [True: 122k, False: 7.63M]
  |  Branch (2326:46): [True: 763, False: 7.75M]
  |  Branch (2326:61): [True: 1.01M, False: 6.74M]
  ------------------
 2327|  1.13M|    return 1;
 2328|  6.62M|  default:
  ------------------
  |  Branch (2328:3): [True: 6.62M, False: 1.13M]
  ------------------
 2329|  6.62M|    return 0;
 2330|  7.75M|  }
 2331|  7.75M|}
lj_parse.c:parse_stmt:
 2656|  5.12M|{
 2657|  5.12M|  BCLine line = ls->linenumber;
 2658|  5.12M|  switch (ls->tok) {
 2659|  11.2k|  case TK_if:
  ------------------
  |  Branch (2659:3): [True: 11.2k, False: 5.11M]
  ------------------
 2660|  11.2k|    parse_if(ls, line);
 2661|  11.2k|    break;
 2662|  2.15k|  case TK_while:
  ------------------
  |  Branch (2662:3): [True: 2.15k, False: 5.12M]
  ------------------
 2663|  2.15k|    parse_while(ls, line);
 2664|  2.15k|    break;
 2665|  37.2k|  case TK_do:
  ------------------
  |  Branch (2665:3): [True: 37.2k, False: 5.08M]
  ------------------
 2666|  37.2k|    lj_lex_next(ls);
 2667|  37.2k|    parse_block(ls);
 2668|  37.2k|    lex_match(ls, TK_end, TK_do, line);
 2669|  37.2k|    break;
 2670|  19.2k|  case TK_for:
  ------------------
  |  Branch (2670:3): [True: 19.2k, False: 5.10M]
  ------------------
 2671|  19.2k|    parse_for(ls, line);
 2672|  19.2k|    break;
 2673|    780|  case TK_repeat:
  ------------------
  |  Branch (2673:3): [True: 780, False: 5.12M]
  ------------------
 2674|    780|    parse_repeat(ls, line);
 2675|    780|    break;
 2676|  1.11M|  case TK_function:
  ------------------
  |  Branch (2676:3): [True: 1.11M, False: 4.00M]
  ------------------
 2677|  1.11M|    parse_func(ls, line);
 2678|  1.11M|    break;
 2679|  54.3k|  case TK_local:
  ------------------
  |  Branch (2679:3): [True: 54.3k, False: 5.06M]
  ------------------
 2680|  54.3k|    lj_lex_next(ls);
 2681|  54.3k|    parse_local(ls);
 2682|  54.3k|    break;
 2683|  1.51M|  case TK_return:
  ------------------
  |  Branch (2683:3): [True: 1.51M, False: 3.60M]
  ------------------
 2684|  1.51M|    parse_return(ls);
 2685|  1.51M|    return 1;  /* Must be last. */
 2686|    591|  case TK_break:
  ------------------
  |  Branch (2686:3): [True: 591, False: 5.12M]
  ------------------
 2687|    591|    lj_lex_next(ls);
 2688|    591|    parse_break(ls);
 2689|    591|    return !LJ_52;  /* Must be last in Lua 5.1. */
  ------------------
  |  |  697|    591|#define LJ_52			0
  ------------------
 2690|       |#if LJ_52
 2691|       |  case ';':
 2692|       |    lj_lex_next(ls);
 2693|       |    break;
 2694|       |#endif
 2695|    959|  case TK_label:
  ------------------
  |  Branch (2695:3): [True: 959, False: 5.12M]
  ------------------
 2696|    959|    parse_label(ls);
 2697|    959|    break;
 2698|    984|  case TK_goto:
  ------------------
  |  Branch (2698:3): [True: 984, False: 5.12M]
  ------------------
 2699|    984|    if (LJ_52 || lj_lex_lookahead(ls) == TK_name) {
  ------------------
  |  |  697|  1.96k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2699:18): [True: 837, False: 147]
  ------------------
 2700|    837|      lj_lex_next(ls);
 2701|    837|      parse_goto(ls);
 2702|    837|      break;
 2703|    837|    }
 2704|       |    /* fallthrough */
 2705|  2.36M|  default:
  ------------------
  |  Branch (2705:3): [True: 2.36M, False: 2.76M]
  ------------------
 2706|  2.36M|    parse_call_assign(ls);
 2707|  2.36M|    break;
 2708|  5.12M|  }
 2709|  1.84M|  return 0;
 2710|  5.12M|}
lj_parse.c:parse_if:
 2630|  11.2k|{
 2631|  11.2k|  FuncState *fs = ls->fs;
 2632|  11.2k|  BCPos flist;
 2633|  11.2k|  BCPos escapelist = NO_JMP;
  ------------------
  |  |   31|  11.2k|#define NO_JMP		(~(BCPos)0)
  ------------------
 2634|  11.2k|  flist = parse_then(ls);
 2635|  11.6k|  while (ls->tok == TK_elseif) {  /* Parse multiple 'elseif' blocks. */
  ------------------
  |  Branch (2635:10): [True: 423, False: 11.2k]
  ------------------
 2636|    423|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2637|    423|    jmp_tohere(fs, flist);
 2638|    423|    flist = parse_then(ls);
 2639|    423|  }
 2640|  11.2k|  if (ls->tok == TK_else) {  /* Parse optional 'else' block. */
  ------------------
  |  Branch (2640:7): [True: 2.75k, False: 8.45k]
  ------------------
 2641|  2.75k|    jmp_append(fs, &escapelist, bcemit_jmp(fs));
 2642|  2.75k|    jmp_tohere(fs, flist);
 2643|  2.75k|    lj_lex_next(ls);  /* Skip 'else'. */
 2644|  2.75k|    parse_block(ls);
 2645|  8.45k|  } else {
 2646|  8.45k|    jmp_append(fs, &escapelist, flist);
 2647|  8.45k|  }
 2648|  11.2k|  jmp_tohere(fs, escapelist);
 2649|  11.2k|  lex_match(ls, TK_end, TK_if, line);
 2650|  11.2k|}
lj_parse.c:parse_then:
 2619|  11.6k|{
 2620|  11.6k|  BCPos condexit;
 2621|  11.6k|  lj_lex_next(ls);  /* Skip 'if' or 'elseif'. */
 2622|  11.6k|  condexit = expr_cond(ls);
 2623|  11.6k|  lex_check(ls, TK_then);
 2624|  11.6k|  parse_block(ls);
 2625|  11.6k|  return condexit;
 2626|  11.6k|}
lj_parse.c:expr_cond:
 2150|  14.5k|{
 2151|  14.5k|  ExpDesc v;
 2152|  14.5k|  expr(ls, &v);
 2153|  14.5k|  if (v.k == VKNIL) v.k = VKFALSE;
  ------------------
  |  Branch (2153:7): [True: 122, False: 14.4k]
  ------------------
 2154|  14.5k|  bcemit_branch_t(ls->fs, &v);
 2155|  14.5k|  return v.f;
 2156|  14.5k|}
lj_parse.c:expr:
 2136|   197M|{
 2137|   197M|  expr_binop(ls, v, 0);  /* Priority 0: parse whole expression. */
 2138|   197M|}
lj_parse.c:expr_binop:
 2115|   198M|{
 2116|   198M|  BinOpr op;
 2117|   198M|  synlevel_begin(ls);
 2118|   198M|  expr_unop(ls, v);
 2119|   198M|  op = token2binop(ls->tok);
 2120|   200M|  while (op != OPR_NOBINOPR && priority[op].left > limit) {
  ------------------
  |  Branch (2120:10): [True: 1.82M, False: 198M]
  |  Branch (2120:32): [True: 1.21M, False: 618k]
  ------------------
 2121|  1.21M|    ExpDesc v2;
 2122|  1.21M|    BinOpr nextop;
 2123|  1.21M|    lj_lex_next(ls);
 2124|  1.21M|    bcemit_binop_left(ls->fs, op, v);
 2125|       |    /* Parse binary expression with higher priority. */
 2126|  1.21M|    nextop = expr_binop(ls, &v2, priority[op].right);
 2127|  1.21M|    bcemit_binop(ls->fs, op, v, &v2);
 2128|  1.21M|    op = nextop;
 2129|  1.21M|  }
 2130|   198M|  synlevel_end(ls);
  ------------------
  |  | 2052|   198M|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2131|   198M|  return op;  /* Return unconsumed binary operator (if any). */
 2132|   198M|}
lj_parse.c:expr_unop:
 2096|   198M|{
 2097|   198M|  BCOp op;
 2098|   198M|  if (ls->tok == TK_not) {
  ------------------
  |  Branch (2098:7): [True: 15.1k, False: 198M]
  ------------------
 2099|  15.1k|    op = BC_NOT;
 2100|   198M|  } else if (ls->tok == '-') {
  ------------------
  |  Branch (2100:14): [True: 203k, False: 198M]
  ------------------
 2101|   203k|    op = BC_UNM;
 2102|   198M|  } else if (ls->tok == '#') {
  ------------------
  |  Branch (2102:14): [True: 29.6k, False: 198M]
  ------------------
 2103|  29.6k|    op = BC_LEN;
 2104|   198M|  } else {
 2105|   198M|    expr_simple(ls, v);
 2106|   198M|    return;
 2107|   198M|  }
 2108|   248k|  lj_lex_next(ls);
 2109|   248k|  expr_binop(ls, v, UNARY_PRIORITY);
  ------------------
  |  | 2089|   248k|#define UNARY_PRIORITY		8  /* Priority for unary operators. */
  ------------------
 2110|   248k|  bcemit_unop(ls->fs, op, v);
 2111|   248k|}
lj_parse.c:expr_simple:
 2002|   198M|{
 2003|   198M|  switch (ls->tok) {
 2004|   186M|  case TK_number:
  ------------------
  |  Branch (2004:3): [True: 186M, False: 11.9M]
  ------------------
 2005|   186M|    expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  585|   373M|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  expr_init(v, (LJ_HASFFI && tviscdata(&ls->tokval)) ? VKCDATA : VKNUM, 0);
  ------------------
  |  |  799|   186M|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|   186M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|   186M|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 68.4k, False: 186M]
  |  |  ------------------
  ------------------
 2006|   186M|    copyTV(ls->L, &v->u.nval, &ls->tokval);
 2007|   186M|    break;
 2008|  9.11M|  case TK_string:
  ------------------
  |  Branch (2008:3): [True: 9.11M, False: 189M]
  ------------------
 2009|  9.11M|    expr_init(v, VKSTR, 0);
 2010|  9.11M|    v->u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|  9.11M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  9.11M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  9.11M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  9.11M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 9.11M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  9.11M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2011|      0|    break;
 2012|  20.9k|  case TK_nil:
  ------------------
  |  Branch (2012:3): [True: 20.9k, False: 198M]
  ------------------
 2013|  20.9k|    expr_init(v, VKNIL, 0);
 2014|  20.9k|    break;
 2015|  5.61k|  case TK_true:
  ------------------
  |  Branch (2015:3): [True: 5.61k, False: 198M]
  ------------------
 2016|  5.61k|    expr_init(v, VKTRUE, 0);
 2017|  5.61k|    break;
 2018|  7.49k|  case TK_false:
  ------------------
  |  Branch (2018:3): [True: 7.49k, False: 198M]
  ------------------
 2019|  7.49k|    expr_init(v, VKFALSE, 0);
 2020|  7.49k|    break;
 2021|  3.13k|  case TK_dots: {  /* Vararg. */
  ------------------
  |  Branch (2021:3): [True: 3.13k, False: 198M]
  ------------------
 2022|  3.13k|    FuncState *fs = ls->fs;
 2023|  3.13k|    BCReg base;
 2024|  3.13k|    checkcond(ls, fs->flags & PROTO_VARARG, LJ_ERR_XDOTS);
  ------------------
  |  |  194|  3.13k|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:37): [True: 1, False: 3.13k]
  |  |  ------------------
  ------------------
 2025|  3.13k|    bcreg_reserve(fs, 1);
 2026|  3.13k|    base = fs->freereg-1;
 2027|  3.13k|    expr_init(v, VCALL, bcemit_ABC(fs, BC_VARG, base, 2, fs->numparams));
  ------------------
  |  |  434|  3.13k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  3.13k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
 2028|  3.13k|    v->u.s.aux = base;
 2029|  3.13k|    break;
 2030|  3.13k|  }
 2031|  51.0k|  case '{':  /* Table constructor. */
  ------------------
  |  Branch (2031:3): [True: 51.0k, False: 198M]
  ------------------
 2032|  51.0k|    expr_table(ls, v);
 2033|  51.0k|    return;
 2034|   302k|  case TK_function:
  ------------------
  |  Branch (2034:3): [True: 302k, False: 198M]
  ------------------
 2035|   302k|    lj_lex_next(ls);
 2036|   302k|    parse_body(ls, v, 0, ls->linenumber);
 2037|   302k|    return;
 2038|  2.47M|  default:
  ------------------
  |  Branch (2038:3): [True: 2.47M, False: 196M]
  ------------------
 2039|  2.47M|    expr_primary(ls, v);
 2040|  2.47M|    return;
 2041|   198M|  }
 2042|   195M|  lj_lex_next(ls);
 2043|   195M|}
lj_parse.c:expr_init:
   84|   397M|{
   85|   397M|  e->k = k;
   86|   397M|  e->u.s.info = info;
   87|   397M|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|   397M|#define NO_JMP		(~(BCPos)0)
  ------------------
   88|   397M|}
lj_parse.c:bcreg_reserve:
  391|  9.53M|{
  392|  9.53M|  bcreg_bump(fs, n);
  393|  9.53M|  fs->freereg += n;
  394|  9.53M|}
lj_parse.c:bcreg_bump:
  380|  9.54M|{
  381|  9.54M|  BCReg sz = fs->freereg + n;
  382|  9.54M|  if (sz > fs->framesize) {
  ------------------
  |  Branch (382:7): [True: 3.06M, False: 6.47M]
  ------------------
  383|  3.06M|    if (sz >= LJ_MAX_SLOTS)
  ------------------
  |  |   67|  3.06M|#define LJ_MAX_SLOTS	250		/* Max. # of slots in a Lua func. */
  ------------------
  |  Branch (383:9): [True: 18, False: 3.06M]
  ------------------
  384|     18|      err_syntax(fs->ls, LJ_ERR_XSLOTS);
  385|  3.06M|    fs->framesize = (uint8_t)sz;
  386|  3.06M|  }
  387|  9.54M|}
lj_parse.c:expr_table:
 1729|  67.8k|{
 1730|  67.8k|  FuncState *fs = ls->fs;
 1731|  67.8k|  BCLine line = ls->linenumber;
 1732|  67.8k|  GCtab *t = NULL;
 1733|  67.8k|  int vcall = 0, needarr = 0, fixt = 0;
 1734|  67.8k|  uint32_t narr = 1;  /* First array index. */
 1735|  67.8k|  uint32_t nhash = 0;  /* Number of hash entries. */
 1736|  67.8k|  BCReg freg = fs->freereg;
 1737|  67.8k|  BCPos pc = bcemit_AD(fs, BC_TNEW, freg, 0);
  ------------------
  |  |  435|  67.8k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  67.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1738|  67.8k|  expr_init(e, VNONRELOC, freg);
 1739|  67.8k|  bcreg_reserve(fs, 1);
 1740|  67.8k|  freg++;
 1741|  67.8k|  lex_check(ls, '{');
 1742|   193M|  while (ls->tok != '}') {
  ------------------
  |  Branch (1742:10): [True: 193M, False: 14.8k]
  ------------------
 1743|   193M|    ExpDesc key, val;
 1744|   193M|    vcall = 0;
 1745|   193M|    if (ls->tok == '[') {
  ------------------
  |  Branch (1745:9): [True: 1.57k, False: 193M]
  ------------------
 1746|  1.57k|      expr_bracket(ls, &key);  /* Already calls expr_toval. */
 1747|  1.57k|      if (!expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|  1.57k|#define expr_isk(e)		((e)->k <= VKLAST)
  ------------------
  |  Branch (1747:11): [True: 223, False: 1.35k]
  ------------------
 1748|  1.57k|      if (expr_isnumk(&key) && expr_numiszero(&key)) needarr = 1; else nhash++;
  ------------------
  |  |   75|  3.15k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 941, False: 638]
  |  |  ------------------
  ------------------
  |  Branch (1748:32): [True: 353, False: 588]
  ------------------
 1749|  1.57k|      lex_check(ls, '=');
 1750|   193M|    } else if ((ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) &&
  ------------------
  |  |  697|  32.9M|#define LJ_52			0
  ------------------
  |  Branch (1750:17): [True: 177M, False: 16.4M]
  |  Branch (1750:40): [Folded - Ignored]
  |  Branch (1750:50): [True: 0, False: 16.4M]
  ------------------
 1751|   193M|	       lj_lex_lookahead(ls) == '=') {
  ------------------
  |  Branch (1751:9): [True: 177M, False: 280k]
  ------------------
 1752|   177M|      expr_str(ls, &key);
 1753|   177M|      lex_check(ls, '=');
 1754|   177M|      nhash++;
 1755|   177M|    } else {
 1756|  16.7M|      expr_init(&key, VKNUM, 0);
 1757|  16.7M|      setintV(&key.u.nval, (int)narr);
 1758|  16.7M|      narr++;
 1759|  16.7M|      needarr = vcall = 1;
 1760|  16.7M|    }
 1761|   193M|    expr(ls, &val);
 1762|   193M|    if (expr_isk(&key) && key.k != VKNIL &&
  ------------------
  |  |   73|   387M|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 193M, False: 25.1k]
  |  |  ------------------
  ------------------
  |  Branch (1762:27): [True: 193M, False: 0]
  ------------------
 1763|   193M|	(key.k == VKSTR || expr_isk_nojump(&val))) {
  ------------------
  |  |   74|  16.7M|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|  33.4M|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 16.4M, False: 289k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  16.4M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 16.4M, False: 59]
  |  |  ------------------
  ------------------
  |  Branch (1763:3): [True: 177M, False: 16.7M]
  ------------------
 1764|   193M|      TValue k, *v;
 1765|   193M|      if (!t) {  /* Create template table on demand. */
  ------------------
  |  Branch (1765:11): [True: 23.6k, False: 193M]
  ------------------
 1766|  23.6k|	BCReg kidx;
 1767|  23.6k|	t = lj_tab_new(fs->L, needarr ? narr : 0, hsize2hbits(nhash));
  ------------------
  |  |   53|  23.6k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|     22|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 7.60k, False: 16.0k]
  |  |  |  Branch (53:32): [True: 7.58k, False: 22]
  |  |  ------------------
  ------------------
  |  Branch (1767:24): [True: 16.0k, False: 7.58k]
  ------------------
 1768|  23.6k|	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  775|  23.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
              	kidx = const_gc(fs, obj2gco(t), LJ_TTAB);
  ------------------
  |  |  271|  23.6k|#define LJ_TTAB			(~11u)
  ------------------
 1769|  23.6k|	fs->bcbase[pc].ins = BCINS_AD(BC_TDUP, freg-1, kidx);
  ------------------
  |  |   56|  23.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1770|  23.6k|      }
 1771|   193M|      vcall = 0;
 1772|   193M|      expr_kvalue(fs, &k, &key);
 1773|   193M|      v = lj_tab_set(fs->L, t, &k);
 1774|   193M|      lj_gc_anybarriert(fs->L, t);
  ------------------
  |  |   95|   193M|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   193M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 263, False: 193M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|    263|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    263|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1775|   193M|      if (expr_isk_nojump(&val)) {  /* Add const key/value to template table. */
  ------------------
  |  |   74|   193M|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|   386M|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 193M, False: 25.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|   193M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 193M, False: 39]
  |  |  ------------------
  ------------------
 1776|   193M|	expr_kvalue(fs, v, &val);
 1777|   193M|      } else {  /* Otherwise create dummy string key (avoids lj_tab_newkey). */
 1778|  25.1k|	settabV(fs->L, v, t);  /* Preserve key with table itself as value. */
 1779|  25.1k|	fixt = 1;   /* Fix this later, after all resizes. */
 1780|  25.1k|	goto nonconst;
 1781|  25.1k|      }
 1782|   193M|    } else {
 1783|   315k|    nonconst:
 1784|   315k|      if (val.k != VCALL) { expr_toanyreg(fs, &val); vcall = 0; }
  ------------------
  |  Branch (1784:11): [True: 60.0k, False: 255k]
  ------------------
 1785|   315k|      if (expr_isk(&key)) expr_index(fs, e, &key);
  ------------------
  |  |   73|   315k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 314k, False: 149]
  |  |  ------------------
  ------------------
 1786|   315k|      bcemit_store(fs, e, &val);
 1787|   315k|    }
 1788|   193M|    fs->freereg = freg;
 1789|   193M|    if (!lex_opt(ls, ',') && !lex_opt(ls, ';')) break;
  ------------------
  |  Branch (1789:9): [True: 48.6k, False: 193M]
  |  Branch (1789:30): [True: 28.0k, False: 20.6k]
  ------------------
 1790|   193M|  }
 1791|  42.8k|  lex_match(ls, '}', '{', line);
 1792|  42.8k|  if (vcall) {
  ------------------
  |  Branch (1792:7): [True: 3.35k, False: 39.4k]
  ------------------
 1793|  3.35k|    BCInsLine *ilp = &fs->bcbase[fs->pc-1];
 1794|  3.35k|    ExpDesc en;
 1795|  3.35k|    lj_assertFS(bc_a(ilp->ins) == freg &&
  ------------------
  |  |  167|  3.35k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.35k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  13.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 3, False: 3.35k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.35k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.35k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.35k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1796|  3.35k|		bc_op(ilp->ins) == (narr > 256 ? BC_TSETV : BC_TSETB),
 1797|  3.35k|		"bad CALL code generation");
 1798|  3.35k|    expr_init(&en, VKNUM, 0);
 1799|  3.35k|    en.u.nval.u32.lo = narr-1;
 1800|  3.35k|    en.u.nval.u32.hi = 0x43300000;  /* Biased integer to avoid denormals. */
 1801|  3.35k|    if (narr > 256) { fs->pc--; ilp--; }
  ------------------
  |  Branch (1801:9): [True: 3, False: 3.35k]
  ------------------
 1802|  3.35k|    ilp->ins = BCINS_AD(BC_TSETM, freg, const_num(fs, &en));
  ------------------
  |  |   56|  3.35k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1803|  3.35k|    setbc_b(&ilp[-1].ins, 0);
  ------------------
  |  |   46|  3.35k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  3.35k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  3.35k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1804|  3.35k|  }
 1805|  42.8k|  if (pc == fs->pc-1) {  /* Make expr relocable if possible. */
  ------------------
  |  Branch (1805:7): [True: 27.6k, False: 15.1k]
  ------------------
 1806|  27.6k|    e->u.s.info = pc;
 1807|  27.6k|    fs->freereg--;
 1808|  27.6k|    e->k = VRELOCABLE;
 1809|  27.6k|  } else {
 1810|  15.1k|    e->k = VNONRELOC;  /* May have been changed by expr_index. */
 1811|  15.1k|  }
 1812|  42.8k|  if (!t) {  /* Construct TNEW RD: hhhhhaaaaaaaaaaa. */
  ------------------
  |  Branch (1812:7): [True: 20.3k, False: 22.4k]
  ------------------
 1813|  20.3k|    BCIns *ip = &fs->bcbase[pc].ins;
 1814|  20.3k|    if (!needarr) narr = 0;
  ------------------
  |  Branch (1814:9): [True: 12.3k, False: 7.99k]
  ------------------
 1815|  7.99k|    else if (narr < 3) narr = 3;
  ------------------
  |  Branch (1815:14): [True: 5.70k, False: 2.29k]
  ------------------
 1816|  2.29k|    else if (narr > 0x7ff) narr = 0x7ff;
  ------------------
  |  Branch (1816:14): [True: 0, False: 2.29k]
  ------------------
 1817|  20.3k|    setbc_d(ip, narr|(hsize2hbits(nhash)<<11));
  ------------------
  |  |   49|  40.9k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  20.3k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  |  |  |  Branch (49:58): [True: 97, False: 3]
  |  |  |  Branch (49:58): [True: 100, False: 20.2k]
  |  |  ------------------
  ------------------
 1818|  22.4k|  } else {
 1819|  22.4k|    if (needarr && t->asize < narr)
  ------------------
  |  Branch (1819:9): [True: 14.8k, False: 7.62k]
  |  Branch (1819:20): [True: 1.50k, False: 13.3k]
  ------------------
 1820|  1.50k|      lj_tab_reasize(fs->L, t, narr-1);
 1821|  22.4k|    if (fixt) {  /* Fix value for dummy keys in template table. */
  ------------------
  |  Branch (1821:9): [True: 4.67k, False: 17.8k]
  ------------------
 1822|  4.67k|      Node *node = noderef(t->node);
  ------------------
  |  |  515|  4.67k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  4.67k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1823|  4.67k|      uint32_t i, hmask = t->hmask;
 1824|   932k|      for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1824:19): [True: 927k, False: 4.67k]
  ------------------
 1825|   927k|	Node *n = &node[i];
 1826|   927k|	if (tvistab(&n->val)) {
  ------------------
  |  |  800|   927k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|   927k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|   927k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 24.9k, False: 902k]
  |  |  ------------------
  ------------------
 1827|  24.9k|	  lj_assertFS(tabV(&n->val) == t, "bad dummy key in template table");
  ------------------
  |  |  167|  24.9k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  24.9k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  49.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 24.9k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 24.9k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  24.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1828|  24.9k|	  setnilV(&n->val);  /* Turn value into nil. */
  ------------------
  |  |  872|  24.9k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1829|  24.9k|	}
 1830|   927k|      }
 1831|  4.67k|    }
 1832|  22.4k|    lj_gc_check(fs->L);
  ------------------
  |  |   66|  22.4k|  { if (LJ_UNLIKELY(G(L)->gc.total >= G(L)->gc.threshold)) \
  |  |  ------------------
  |  |  |  |  146|  22.4k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 707, False: 21.7k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |   67|  22.4k|      lj_gc_step(L); }
  ------------------
 1833|  22.4k|  }
 1834|  42.8k|}
lj_parse.c:expr_bracket:
 1706|  47.5k|{
 1707|  47.5k|  lj_lex_next(ls);  /* Skip '['. */
 1708|  47.5k|  expr(ls, v);
 1709|  47.5k|  expr_toval(ls->fs, v);
 1710|  47.5k|  lex_check(ls, ']');
 1711|  47.5k|}
lj_parse.c:expr_toval:
  614|  2.14M|{
  615|  2.14M|  if (expr_hasjump(e))
  ------------------
  |  |   71|  2.14M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 1.52k, False: 2.14M]
  |  |  ------------------
  ------------------
  616|  1.52k|    expr_toanyreg(fs, e);
  617|  2.14M|  else
  618|  2.14M|    expr_discharge(fs, e);
  619|  2.14M|}
lj_parse.c:expr_discharge:
  444|  20.8M|{
  445|  20.8M|  BCIns ins;
  446|  20.8M|  if (e->k == VUPVAL) {
  ------------------
  |  Branch (446:7): [True: 13.1k, False: 20.8M]
  ------------------
  447|  13.1k|    ins = BCINS_AD(BC_UGET, 0, e->u.s.info);
  ------------------
  |  |   56|  13.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  448|  20.8M|  } else if (e->k == VGLOBAL) {
  ------------------
  |  Branch (448:14): [True: 2.24M, False: 18.6M]
  ------------------
  449|  2.24M|    ins = BCINS_AD(BC_GGET, 0, const_str(fs, e));
  ------------------
  |  |   56|  2.24M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  450|  18.6M|  } else if (e->k == VINDEXED) {
  ------------------
  |  Branch (450:14): [True: 70.5k, False: 18.5M]
  ------------------
  451|  70.5k|    BCReg rc = e->u.s.aux;
  452|  70.5k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (452:9): [True: 36.6k, False: 33.8k]
  ------------------
  453|  36.6k|      ins = BCINS_ABC(BC_TGETS, 0, e->u.s.info, ~rc);
  ------------------
  |  |   54|  36.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  454|  36.6k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|  33.8k|#define BCMAX_C		0xff
  ------------------
  |  Branch (454:16): [True: 25.5k, False: 8.37k]
  ------------------
  455|  25.5k|      ins = BCINS_ABC(BC_TGETB, 0, e->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|  25.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  456|  25.5k|    } else {
  457|  8.37k|      bcreg_free(fs, rc);
  458|  8.37k|      ins = BCINS_ABC(BC_TGETV, 0, e->u.s.info, rc);
  ------------------
  |  |   54|  8.37k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  459|  8.37k|    }
  460|  70.5k|    bcreg_free(fs, e->u.s.info);
  461|  18.5M|  } else if (e->k == VCALL) {
  ------------------
  |  Branch (461:14): [True: 472k, False: 18.0M]
  ------------------
  462|   472k|    e->u.s.info = e->u.s.aux;
  463|   472k|    e->k = VNONRELOC;
  464|   472k|    return;
  465|  18.0M|  } else if (e->k == VLOCAL) {
  ------------------
  |  Branch (465:14): [True: 221k, False: 17.8M]
  ------------------
  466|   221k|    e->k = VNONRELOC;
  467|   221k|    return;
  468|  17.8M|  } else {
  469|  17.8M|    return;
  470|  17.8M|  }
  471|  2.33M|  e->u.s.info = bcemit_INS(fs, ins);
  472|  2.33M|  e->k = VRELOCABLE;
  473|  2.33M|}
lj_parse.c:const_str:
  233|  5.15M|{
  234|  5.15M|  lj_assertFS(expr_isstrk(e) || e->k == VGLOBAL, "bad usage");
  ------------------
  |  |  167|  5.15M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  5.15M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  8.78M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.53M, False: 3.62M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 3.62M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  5.15M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|  5.15M|  return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|  5.15M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                return const_gc(fs, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|  5.15M|#define LJ_TSTR			(~4u)
  ------------------
  236|  5.15M|}
lj_parse.c:bcreg_free:
  398|  2.44M|{
  399|  2.44M|  if (reg >= fs->nactvar) {
  ------------------
  |  Branch (399:7): [True: 2.30M, False: 137k]
  ------------------
  400|  2.30M|    fs->freereg--;
  401|  2.30M|    lj_assertFS(reg == fs->freereg, "bad regfree");
  ------------------
  |  |  167|  2.30M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  2.30M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.30M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.30M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.30M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  402|  2.30M|  }
  403|  2.44M|}
lj_parse.c:expr_index:
 1663|   406k|{
 1664|       |  /* Already called: expr_toval(fs, e). */
 1665|   406k|  t->k = VINDEXED;
 1666|   406k|  if (expr_isnumk(e)) {
  ------------------
  |  |   75|   406k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 319k, False: 87.7k]
  |  |  ------------------
  ------------------
 1667|       |#if LJ_DUALNUM
 1668|       |    if (tvisint(expr_numtv(e))) {
 1669|       |      int32_t k = intV(expr_numtv(e));
 1670|       |      if (checku8(k)) {
 1671|       |	t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
 1672|       |	return;
 1673|       |      }
 1674|       |    }
 1675|       |#else
 1676|   319k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|   319k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|   319k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   319k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   319k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   319k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 319k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   319k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1677|   319k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|   319k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1678|   319k|    if (checku8(k) && n == (lua_Number)k) {
  ------------------
  |  |  102|   638k|#define checku8(x)	((x) == (int32_t)(uint8_t)(x))
  |  |  ------------------
  |  |  |  Branch (102:20): [True: 68.0k, False: 251k]
  |  |  ------------------
  ------------------
  |  Branch (1678:23): [True: 67.9k, False: 30]
  ------------------
 1679|  67.9k|      t->u.s.aux = BCMAX_C+1+(uint32_t)k;  /* 256..511: const byte key */
  ------------------
  |  |   27|  67.9k|#define BCMAX_C		0xff
  ------------------
 1680|  67.9k|      return;
 1681|  67.9k|    }
 1682|   319k|#endif
 1683|   319k|  } else if (expr_isstrk(e)) {
  ------------------
  |  |   77|  87.7k|#define expr_isstrk(e)		((e)->k == VKSTR)
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 73.8k, False: 13.8k]
  |  |  ------------------
  ------------------
 1684|  73.8k|    BCReg idx = const_str(fs, e);
 1685|  73.8k|    if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  73.8k|#define BCMAX_C		0xff
  ------------------
  |  Branch (1685:9): [True: 54.0k, False: 19.7k]
  ------------------
 1686|  54.0k|      t->u.s.aux = ~idx;  /* -256..-1: const string key */
 1687|  54.0k|      return;
 1688|  54.0k|    }
 1689|  73.8k|  }
 1690|   284k|  t->u.s.aux = expr_toanyreg(fs, e);  /* 0..255: register */
 1691|   284k|}
lj_parse.c:expr_numiszero:
   92|   159k|{
   93|   159k|  TValue *o = expr_numtv(e);
  ------------------
  |  |   79|   159k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|   159k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   159k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   159k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 159k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   159k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   94|   159k|  return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  803|   159k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|   319k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                return tvisint(o) ? (intV(o) == 0) : tviszero(o);
  ------------------
  |  |  814|   159k|#define tviszero(o)	(((o)->u64 << 1) == 0)
  ------------------
   95|   159k|}
lj_parse.c:expr_str:
 1656|   177M|{
 1657|   177M|  expr_init(e, VKSTR, 0);
 1658|   177M|  e->u.sval = lex_str(ls);
 1659|   177M|}
lj_parse.c:lex_str:
 1039|   183M|{
 1040|   183M|  GCstr *s;
 1041|   183M|  if (ls->tok != TK_name && (LJ_52 || ls->tok != TK_goto))
  ------------------
  |  |  697|  66.9k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1041:7): [True: 33.4k, False: 183M]
  |  Branch (1041:39): [True: 33.3k, False: 159]
  ------------------
 1042|  33.3k|    err_token(ls, TK_name);
 1043|   183M|  s = strV(&ls->tokval);
  ------------------
  |  |  859|   183M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   183M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   183M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   183M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 183M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   183M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1044|      0|  lj_lex_next(ls);
 1045|   183M|  return s;
 1046|   183M|}
lj_parse.c:const_gc:
  219|  6.16M|{
  220|  6.16M|  lua_State *L = fs->L;
  221|  6.16M|  TValue key, *o;
  222|  6.16M|  setgcV(L, &key, gc, itype);
  223|       |  /* NOBARRIER: the key is new or kept alive. */
  224|  6.16M|  o = lj_tab_set(L, fs->kt, &key);
  225|  6.16M|  if (tvhaskslot(o))
  ------------------
  |  |  201|  6.16M|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 1.02M, False: 5.14M]
  |  |  ------------------
  ------------------
  226|  1.02M|    return tvkslot(o);
  ------------------
  |  |  202|  1.02M|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  227|  5.14M|  o->u64 = fs->nkgc;
  228|  5.14M|  return fs->nkgc++;
  229|  6.16M|}
lj_parse.c:expr_kvalue:
 1715|   386M|{
 1716|   386M|  UNUSED(fs);
  ------------------
  |  |   91|   386M|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 1717|   386M|  if (e->k <= VKTRUE) {
  ------------------
  |  Branch (1717:7): [True: 615, False: 386M]
  ------------------
 1718|    615|    setpriV(v, ~(uint32_t)e->k);
  ------------------
  |  |  873|    615|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
 1719|   386M|  } else if (e->k == VKSTR) {
  ------------------
  |  Branch (1719:14): [True: 185M, False: 201M]
  ------------------
 1720|   185M|    setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  775|   185M|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                  setgcVraw(v, obj2gco(e->u.sval), LJ_TSTR);
  ------------------
  |  |  264|   185M|#define LJ_TSTR			(~4u)
  ------------------
 1721|   201M|  } else {
 1722|   201M|    lj_assertFS(tvisnumber(expr_numtv(e)), "bad number constant");
  ------------------
  |  |  167|   201M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   201M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   403M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 201M, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 201M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   201M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1723|   201M|    *v = *expr_numtv(e);
  ------------------
  |  |   79|   201M|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|   201M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   201M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   201M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 201M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   201M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1724|   201M|  }
 1725|   386M|}
lj_parse.c:expr_toanyreg:
  599|  5.43M|{
  600|  5.43M|  expr_discharge(fs, e);
  601|  5.43M|  if (e->k == VNONRELOC) {
  ------------------
  |  Branch (601:7): [True: 1.80M, False: 3.62M]
  ------------------
  602|  1.80M|    if (!expr_hasjump(e)) return e->u.s.info;  /* Already in a register. */
  ------------------
  |  |   71|  1.80M|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (602:9): [True: 1.80M, False: 1.92k]
  ------------------
  603|  1.92k|    if (e->u.s.info >= fs->nactvar) {
  ------------------
  |  Branch (603:9): [True: 1.29k, False: 634]
  ------------------
  604|  1.29k|      expr_toreg(fs, e, e->u.s.info);  /* Discharge to temp. register. */
  605|  1.29k|      return e->u.s.info;
  606|  1.29k|    }
  607|  1.92k|  }
  608|  3.62M|  expr_tonextreg(fs, e);  /* Discharge to next register. */
  609|  3.62M|  return e->u.s.info;
  610|  5.43M|}
lj_parse.c:expr_toreg:
  565|  6.55M|{
  566|  6.55M|  expr_toreg_nobranch(fs, e, reg);
  567|  6.55M|  if (e->k == VJMP)
  ------------------
  |  Branch (567:7): [True: 80.2k, False: 6.47M]
  ------------------
  568|  80.2k|    jmp_append(fs, &e->t, e->u.s.info);  /* Add it to the true jump list. */
  569|  6.55M|  if (expr_hasjump(e)) {  /* Discharge expression with branches. */
  ------------------
  |  |   71|  6.55M|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (71:26): [True: 87.8k, False: 6.47M]
  |  |  ------------------
  ------------------
  570|  87.8k|    BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|  87.8k|#define NO_JMP		(~(BCPos)0)
  ------------------
                  BCPos jend, jfalse = NO_JMP, jtrue = NO_JMP;
  ------------------
  |  |   31|  87.8k|#define NO_JMP		(~(BCPos)0)
  ------------------
  571|  87.8k|    if (jmp_novalue(fs, e->t) || jmp_novalue(fs, e->f)) {
  ------------------
  |  Branch (571:9): [True: 81.3k, False: 6.49k]
  |  Branch (571:34): [True: 851, False: 5.64k]
  ------------------
  572|  82.1k|      BCPos jval = (e->k == VJMP) ? NO_JMP : bcemit_jmp(fs);
  ------------------
  |  |   31|  80.2k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (572:20): [True: 80.2k, False: 1.94k]
  ------------------
  573|  82.1k|      jfalse = bcemit_AD(fs, BC_KPRI, reg, VKFALSE);
  ------------------
  |  |  435|  82.1k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  82.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  574|  82.1k|      bcemit_AJ(fs, BC_JMP, fs->freereg, 1);
  ------------------
  |  |  436|  82.1k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  82.1k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  82.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  575|  82.1k|      jtrue = bcemit_AD(fs, BC_KPRI, reg, VKTRUE);
  ------------------
  |  |  435|  82.1k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  82.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  576|  82.1k|      jmp_tohere(fs, jval);
  577|  82.1k|    }
  578|  87.8k|    jend = fs->pc;
  579|  87.8k|    fs->lasttarget = jend;
  580|  87.8k|    jmp_patchval(fs, e->f, jend, reg, jfalse);
  581|  87.8k|    jmp_patchval(fs, e->t, jend, reg, jtrue);
  582|  87.8k|  }
  583|  6.55M|  e->f = e->t = NO_JMP;
  ------------------
  |  |   31|  6.55M|#define NO_JMP		(~(BCPos)0)
  ------------------
  584|  6.55M|  e->u.s.info = reg;
  585|  6.55M|  e->k = VNONRELOC;
  586|  6.55M|}
lj_parse.c:expr_toreg_nobranch:
  513|  6.56M|{
  514|  6.56M|  BCIns ins;
  515|  6.56M|  expr_discharge(fs, e);
  516|  6.56M|  if (e->k == VKSTR) {
  ------------------
  |  Branch (516:7): [True: 1.42M, False: 5.14M]
  ------------------
  517|  1.42M|    ins = BCINS_AD(BC_KSTR, reg, const_str(fs, e));
  ------------------
  |  |   56|  1.42M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  518|  5.14M|  } else if (e->k == VKNUM) {
  ------------------
  |  Branch (518:14): [True: 550k, False: 4.58M]
  ------------------
  519|       |#if LJ_DUALNUM
  520|       |    cTValue *tv = expr_numtv(e);
  521|       |    if (tvisint(tv) && checki16(intV(tv)))
  522|       |      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)intV(tv));
  523|       |    else
  524|       |#else
  525|   550k|    lua_Number n = expr_numberV(e);
  ------------------
  |  |   80|   550k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|   550k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|   550k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|   550k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|   550k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 550k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|   550k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|   550k|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|   550k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  527|   550k|    if (checki16(k) && n == (lua_Number)k)
  ------------------
  |  |  103|  1.10M|#define checki16(x)	((x) == (int32_t)(int16_t)(x))
  |  |  ------------------
  |  |  |  Branch (103:21): [True: 356k, False: 194k]
  |  |  ------------------
  ------------------
  |  Branch (527:24): [True: 317k, False: 38.8k]
  ------------------
  528|   317k|      ins = BCINS_AD(BC_KSHORT, reg, (BCReg)(uint16_t)k);
  ------------------
  |  |   56|   317k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  529|   233k|    else
  530|   233k|#endif
  531|   233k|      ins = BCINS_AD(BC_KNUM, reg, const_num(fs, e));
  ------------------
  |  |   56|   233k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  532|   550k|#if LJ_HASFFI
  533|  4.58M|  } else if (e->k == VKCDATA) {
  ------------------
  |  Branch (533:14): [True: 68.4k, False: 4.52M]
  ------------------
  534|  68.4k|    fs->flags |= PROTO_FFI;
  ------------------
  |  |  401|  68.4k|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
  535|  68.4k|    ins = BCINS_AD(BC_KCDATA, reg,
  ------------------
  |  |   56|   136k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 68.4k, False: 0]
  |  |  ------------------
  ------------------
  536|  68.4k|		   const_gc(fs, obj2gco(cdataV(&e->u.nval)), LJ_TCDATA));
  537|  68.4k|#endif
  538|  4.52M|  } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (538:14): [True: 4.16M, False: 361k]
  ------------------
  539|  4.16M|    setbc_a(bcptr(fs, e), reg);
  ------------------
  |  |   45|  4.16M|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  4.16M|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  4.16M|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  540|  4.16M|    goto noins;
  541|  4.16M|  } else if (e->k == VNONRELOC) {
  ------------------
  |  Branch (541:14): [True: 260k, False: 100k]
  ------------------
  542|   260k|    if (reg == e->u.s.info)
  ------------------
  |  Branch (542:9): [True: 154k, False: 106k]
  ------------------
  543|   154k|      goto noins;
  544|   106k|    ins = BCINS_AD(BC_MOV, reg, e->u.s.info);
  ------------------
  |  |   56|   106k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  545|   106k|  } else if (e->k == VKNIL) {
  ------------------
  |  Branch (545:14): [True: 9.00k, False: 91.1k]
  ------------------
  546|  9.00k|    bcemit_nil(fs, reg, 1);
  547|  9.00k|    goto noins;
  548|  91.1k|  } else if (e->k <= VKTRUE) {
  ------------------
  |  Branch (548:14): [True: 10.9k, False: 80.2k]
  ------------------
  549|  10.9k|    ins = BCINS_AD(BC_KPRI, reg, const_pri(e));
  ------------------
  |  |   56|  21.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 10.9k, False: 0]
  |  |  ------------------
  ------------------
  550|  80.2k|  } else {
  551|  80.2k|    lj_assertFS(e->k == VVOID || e->k == VJMP, "bad expr type %d", e->k);
  ------------------
  |  |  167|  80.2k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  80.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   160k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 80.2k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 80.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  80.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  552|  80.2k|    return;
  553|  80.2k|  }
  554|  2.16M|  bcemit_INS(fs, ins);
  555|  6.48M|noins:
  556|  6.48M|  e->u.s.info = reg;
  557|  6.48M|  e->k = VNONRELOC;
  558|  6.48M|}
lj_parse.c:bcemit_nil:
  477|  15.3k|{
  478|  15.3k|  if (fs->pc > fs->lasttarget) {  /* No jumps to current position? */
  ------------------
  |  Branch (478:7): [True: 14.2k, False: 1.07k]
  ------------------
  479|  14.2k|    BCIns *ip = &fs->bcbase[fs->pc-1].ins;
  480|  14.2k|    BCReg pto, pfrom = bc_a(*ip);
  ------------------
  |  |   35|  14.2k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  481|  14.2k|    switch (bc_op(*ip)) {  /* Try to merge with the previous instruction. */
  ------------------
  |  |   34|  14.2k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  482|  1.69k|    case BC_KPRI:
  ------------------
  |  Branch (482:5): [True: 1.69k, False: 12.6k]
  ------------------
  483|  1.69k|      if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |   38|  1.69k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
                    if (bc_d(*ip) != ~LJ_TNIL) break;
  ------------------
  |  |  260|  1.69k|#define LJ_TNIL			(~0u)
  ------------------
  |  Branch (483:11): [True: 849, False: 846]
  ------------------
  484|    846|      if (from == pfrom) {
  ------------------
  |  Branch (484:11): [True: 3, False: 843]
  ------------------
  485|      3|	if (n == 1) return;
  ------------------
  |  Branch (485:6): [True: 0, False: 3]
  ------------------
  486|    843|      } else if (from == pfrom+1) {
  ------------------
  |  Branch (486:18): [True: 781, False: 62]
  ------------------
  487|    781|	from = pfrom;
  488|    781|	n++;
  489|    781|      } else {
  490|     62|	break;
  491|     62|      }
  492|    784|      *ip = BCINS_AD(BC_KNIL, from, from+n-1);  /* Replace KPRI. */
  ------------------
  |  |   56|    784|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  493|    784|      return;
  494|    356|    case BC_KNIL:
  ------------------
  |  Branch (494:5): [True: 356, False: 13.9k]
  ------------------
  495|    356|      pto = bc_d(*ip);
  ------------------
  |  |   38|    356|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  496|    356|      if (pfrom <= from && from <= pto+1) {  /* Can we connect both ranges? */
  ------------------
  |  Branch (496:11): [True: 356, False: 0]
  |  Branch (496:28): [True: 306, False: 50]
  ------------------
  497|    306|	if (from+n-1 > pto)
  ------------------
  |  Branch (497:6): [True: 306, False: 0]
  ------------------
  498|    306|	  setbc_d(ip, from+n-1);  /* Patch previous instruction range. */
  ------------------
  |  |   49|    306|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|    306|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  499|    306|	return;
  500|    306|      }
  501|     50|      break;
  502|  12.2k|    default:
  ------------------
  |  Branch (502:5): [True: 12.2k, False: 2.05k]
  ------------------
  503|  12.2k|      break;
  504|  14.2k|    }
  505|  14.2k|  }
  506|       |  /* Emit new instruction or replace old instruction. */
  507|  14.2k|  bcemit_INS(fs, n == 1 ? BCINS_AD(BC_KPRI, from, VKNIL) :
  ------------------
  |  |   56|  12.3k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  |  Branch (507:18): [True: 12.3k, False: 1.89k]
  ------------------
  508|  14.2k|			  BCINS_AD(BC_KNIL, from, from+n-1));
  ------------------
  |  |   56|  1.89k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  509|  14.2k|}
lj_parse.c:jmp_novalue:
  275|  94.3k|{
  276|   102k|  for (; list != NO_JMP; list = jmp_next(fs, list)) {
  ------------------
  |  |   31|   102k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (276:10): [True: 89.8k, False: 12.1k]
  ------------------
  277|  89.8k|    BCIns p = fs->bcbase[list >= 1 ? list-1 : list].ins;
  ------------------
  |  Branch (277:26): [True: 89.8k, False: 0]
  ------------------
  278|  89.8k|    if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|  89.8k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   34|  84.9k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   35|  84.4k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  if (!(bc_op(p) == BC_ISTC || bc_op(p) == BC_ISFC || bc_a(p) == NO_REG))
  ------------------
  |  |   30|  84.4k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  84.4k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  |  Branch (278:11): [True: 4.90k, False: 84.9k]
  |  Branch (278:34): [True: 533, False: 84.4k]
  |  Branch (278:57): [True: 2.28k, False: 82.1k]
  ------------------
  279|  82.1k|      return 1;
  280|  89.8k|  }
  281|  12.1k|  return 0;
  282|  94.3k|}
lj_parse.c:expr_tonextreg:
  590|  6.53M|{
  591|  6.53M|  expr_discharge(fs, e);
  592|  6.53M|  expr_free(fs, e);
  593|  6.53M|  bcreg_reserve(fs, 1);
  594|  6.53M|  expr_toreg(fs, e, fs->freereg - 1);
  595|  6.53M|}
lj_parse.c:expr_free:
  407|  8.39M|{
  408|  8.39M|  if (e->k == VNONRELOC)
  ------------------
  |  Branch (408:7): [True: 2.09M, False: 6.29M]
  ------------------
  409|  2.09M|    bcreg_free(fs, e->u.s.info);
  410|  8.39M|}
lj_parse.c:bcemit_store:
  623|  1.73M|{
  624|  1.73M|  BCIns ins;
  625|  1.73M|  if (var->k == VLOCAL) {
  ------------------
  |  Branch (625:7): [True: 18.6k, False: 1.71M]
  ------------------
  626|  18.6k|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|  18.6k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  627|  18.6k|    expr_free(fs, e);
  628|  18.6k|    expr_toreg(fs, e, var->u.s.info);
  629|  18.6k|    return;
  630|  1.71M|  } else if (var->k == VUPVAL) {
  ------------------
  |  Branch (630:14): [True: 1.86k, False: 1.71M]
  ------------------
  631|  1.86k|    fs->ls->vstack[var->u.s.aux].info |= VSTACK_VAR_RW;
  ------------------
  |  |  118|  1.86k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  632|  1.86k|    expr_toval(fs, e);
  633|  1.86k|    if (e->k <= VKTRUE)
  ------------------
  |  Branch (633:9): [True: 433, False: 1.43k]
  ------------------
  634|    433|      ins = BCINS_AD(BC_USETP, var->u.s.info, const_pri(e));
  ------------------
  |  |   56|    866|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 433, False: 0]
  |  |  ------------------
  ------------------
  635|  1.43k|    else if (e->k == VKSTR)
  ------------------
  |  Branch (635:14): [True: 16, False: 1.41k]
  ------------------
  636|     16|      ins = BCINS_AD(BC_USETS, var->u.s.info, const_str(fs, e));
  ------------------
  |  |   56|     16|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  637|  1.41k|    else if (e->k == VKNUM)
  ------------------
  |  Branch (637:14): [True: 161, False: 1.25k]
  ------------------
  638|    161|      ins = BCINS_AD(BC_USETN, var->u.s.info, const_num(fs, e));
  ------------------
  |  |   56|    161|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  639|  1.25k|    else
  640|  1.25k|      ins = BCINS_AD(BC_USETV, var->u.s.info, expr_toanyreg(fs, e));
  ------------------
  |  |   56|  1.25k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  641|  1.71M|  } else if (var->k == VGLOBAL) {
  ------------------
  |  Branch (641:14): [True: 1.38M, False: 335k]
  ------------------
  642|  1.38M|    BCReg ra = expr_toanyreg(fs, e);
  643|  1.38M|    ins = BCINS_AD(BC_GSET, ra, const_str(fs, var));
  ------------------
  |  |   56|  1.38M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  644|  1.38M|  } else {
  645|   335k|    BCReg ra, rc;
  646|   335k|    lj_assertFS(var->k == VINDEXED, "bad expr type %d", var->k);
  ------------------
  |  |  167|   335k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   335k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   335k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 335k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   335k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  647|   335k|    ra = expr_toanyreg(fs, e);
  648|   335k|    rc = var->u.s.aux;
  649|   335k|    if ((int32_t)rc < 0) {
  ------------------
  |  Branch (649:9): [True: 17.1k, False: 318k]
  ------------------
  650|  17.1k|      ins = BCINS_ABC(BC_TSETS, ra, var->u.s.info, ~rc);
  ------------------
  |  |   54|  17.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  651|   318k|    } else if (rc > BCMAX_C) {
  ------------------
  |  |   27|   318k|#define BCMAX_C		0xff
  ------------------
  |  Branch (651:16): [True: 42.4k, False: 276k]
  ------------------
  652|  42.4k|      ins = BCINS_ABC(BC_TSETB, ra, var->u.s.info, rc-(BCMAX_C+1));
  ------------------
  |  |   54|  42.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  653|   276k|    } else {
  654|   276k|#ifdef LUA_USE_ASSERT
  655|       |      /* Free late alloced key reg to avoid assert on free of value reg. */
  656|       |      /* This can only happen when called from expr_table(). */
  657|   276k|      if (e->k == VNONRELOC && ra >= fs->nactvar && rc >= ra)
  ------------------
  |  Branch (657:11): [True: 276k, False: 0]
  |  Branch (657:32): [True: 273k, False: 2.37k]
  |  Branch (657:53): [True: 270k, False: 3.42k]
  ------------------
  658|   270k|	bcreg_free(fs, rc);
  659|   276k|#endif
  660|   276k|      ins = BCINS_ABC(BC_TSETV, ra, var->u.s.info, rc);
  ------------------
  |  |   54|   276k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
  661|   276k|    }
  662|   335k|  }
  663|  1.71M|  bcemit_INS(fs, ins);
  664|  1.71M|  expr_free(fs, e);
  665|  1.71M|}
lj_parse.c:const_num:
  206|  1.09M|{
  207|  1.09M|  lua_State *L = fs->L;
  208|  1.09M|  TValue *o;
  209|  1.09M|  lj_assertFS(expr_isnumk(e), "bad usage");
  ------------------
  |  |  167|  1.09M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.09M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.09M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.09M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.09M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  210|  1.09M|  o = lj_tab_set(L, fs->kt, &e->u.nval);
  211|  1.09M|  if (tvhaskslot(o))
  ------------------
  |  |  201|  1.09M|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 65.0k, False: 1.02M]
  |  |  ------------------
  ------------------
  212|  65.0k|    return tvkslot(o);
  ------------------
  |  |  202|  65.0k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
  213|  1.02M|  o->u64 = fs->nkn;
  214|  1.02M|  return fs->nkn++;
  215|  1.09M|}
lj_parse.c:parse_body:
 1869|  1.39M|{
 1870|  1.39M|  FuncState fs, *pfs = ls->fs;
 1871|  1.39M|  FuncScope bl;
 1872|  1.39M|  GCproto *pt;
 1873|  1.39M|  ptrdiff_t oldbase = pfs->bcbase - ls->bcstack;
 1874|  1.39M|  fs_init(ls, &fs);
 1875|  1.39M|  fscope_begin(&fs, &bl, 0);
 1876|  1.39M|  fs.linedefined = line;
 1877|  1.39M|  fs.numparams = (uint8_t)parse_params(ls, needself);
 1878|  1.39M|  fs.bcbase = pfs->bcbase + pfs->pc;
 1879|  1.39M|  fs.bclim = pfs->bclim - pfs->pc;
 1880|  1.39M|  bcemit_AD(&fs, BC_FUNCF, 0, 0);  /* Placeholder. */
  ------------------
  |  |  435|  1.39M|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  1.39M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1881|  1.39M|  parse_chunk(ls);
 1882|  1.39M|  if (ls->tok != TK_end) lex_match(ls, TK_end, TK_function, line);
  ------------------
  |  Branch (1882:7): [True: 73.9k, False: 1.31M]
  ------------------
 1883|  1.39M|  pt = fs_finish(ls, (ls->lastline = ls->linenumber));
 1884|  1.39M|  pfs->bcbase = ls->bcstack + oldbase;  /* May have been reallocated. */
 1885|  1.39M|  pfs->bclim = (BCPos)(ls->sizebcstack - oldbase);
 1886|       |  /* Store new prototype in the constant array of the parent. */
 1887|  1.39M|  expr_init(e, VRELOCABLE,
 1888|  1.39M|	    bcemit_AD(pfs, BC_FNEW, 0, const_gc(pfs, obj2gco(pt), LJ_TPROTO)));
  ------------------
  |  |  435|  1.39M|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  1.39M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1889|  1.39M|#if LJ_HASFFI
 1890|  1.39M|  pfs->flags |= (fs.flags & PROTO_FFI);
  ------------------
  |  |  401|  1.39M|#define PROTO_FFI		0x04	/* Uses BC_KCDATA for FFI datatypes. */
  ------------------
 1891|  1.39M|#endif
 1892|  1.39M|  if (!(pfs->flags & PROTO_CHILD)) {
  ------------------
  |  |  399|  1.39M|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
  |  Branch (1892:7): [True: 902k, False: 488k]
  ------------------
 1893|   902k|    if (pfs->flags & PROTO_HAS_RETURN)
  ------------------
  |  |  405|   902k|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
  |  Branch (1893:9): [True: 1.99k, False: 900k]
  ------------------
 1894|  1.99k|      pfs->flags |= PROTO_FIXUP_RETURN;
  ------------------
  |  |  406|  1.99k|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1895|   902k|    pfs->flags |= PROTO_CHILD;
  ------------------
  |  |  399|   902k|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
 1896|   902k|  }
 1897|  1.39M|  lj_lex_next(ls);
 1898|  1.39M|}
lj_parse.c:parse_params:
 1838|  1.39M|{
 1839|  1.39M|  FuncState *fs = ls->fs;
 1840|  1.39M|  BCReg nparams = 0;
 1841|  1.39M|  lex_check(ls, '(');
 1842|  1.39M|  if (needself)
  ------------------
  |  Branch (1842:7): [True: 747, False: 1.39M]
  ------------------
 1843|    747|    var_new_lit(ls, nparams++, "self");
  ------------------
  |  | 1073|    747|  var_new(ls, (n), lj_parse_keepstr(ls, "" v, sizeof(v)-1))
  ------------------
 1844|  1.39M|  if (ls->tok != ')') {
  ------------------
  |  Branch (1844:7): [True: 1.36M, False: 23.6k]
  ------------------
 1845|  1.55M|    do {
 1846|  1.55M|      if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|  22.7k|#define LJ_52			0
  ------------------
  |  Branch (1846:11): [True: 1.54M, False: 11.3k]
  |  Branch (1846:34): [Folded - Ignored]
  |  Branch (1846:44): [True: 0, False: 11.3k]
  ------------------
 1847|  1.54M|	var_new(ls, nparams++, lex_str(ls));
 1848|  1.54M|      } else if (ls->tok == TK_dots) {
  ------------------
  |  Branch (1848:18): [True: 1.83k, False: 9.54k]
  ------------------
 1849|  1.83k|	lj_lex_next(ls);
 1850|  1.83k|	fs->flags |= PROTO_VARARG;
  ------------------
  |  |  400|  1.83k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
 1851|  1.83k|	break;
 1852|  9.54k|      } else {
 1853|  9.54k|	err_syntax(ls, LJ_ERR_XPARAM);
 1854|  9.54k|      }
 1855|  1.55M|    } while (lex_opt(ls, ','));
  ------------------
  |  Branch (1855:14): [True: 192k, False: 1.35M]
  ------------------
 1856|  1.36M|  }
 1857|  1.38M|  var_add(ls, nparams);
 1858|  1.38M|  lj_assertFS(fs->nactvar == nparams, "bad regalloc");
  ------------------
  |  |  167|  1.38M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.38M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.38M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.36M, False: 15.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.38M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1859|  1.36M|  bcreg_reserve(fs, nparams);
 1860|  1.36M|  lex_check(ls, ')');
 1861|  1.36M|  return nparams;
 1862|  1.38M|}
lj_parse.c:var_new:
 1054|  1.69M|{
 1055|  1.69M|  FuncState *fs = ls->fs;
 1056|  1.69M|  MSize vtop = ls->vtop;
 1057|  1.69M|  checklimit(fs, fs->nactvar+n, LJ_MAX_LOCVAR, "local variables");
  ------------------
  |  |  192|  1.69M|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 4, False: 1.69M]
  |  |  ------------------
  ------------------
 1058|  1.69M|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|  1.69M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.29M, False: 406k]
  |  |  ------------------
  ------------------
 1059|  1.29M|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|  1.29M|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  1.29M|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1059:9): [True: 0, False: 1.29M]
  ------------------
 1060|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1061|  1.29M|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|  1.29M|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1062|  1.29M|  }
 1063|  1.69M|  lj_assertFS((uintptr_t)name < VARNAME__MAX ||
  ------------------
  |  |  167|  1.69M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.69M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.34M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 57.4k, False: 1.64M]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.64M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.69M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1064|  1.69M|	      lj_tab_getstr(fs->kt, name) != NULL,
 1065|  1.69M|	      "unanchored variable name");
 1066|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1067|  1.69M|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|  1.69M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1068|  1.69M|  fs->varmap[fs->nactvar+n] = (uint16_t)vtop;
 1069|  1.69M|  ls->vtop = vtop+1;
 1070|  1.69M|}
lj_parse.c:var_add:
 1080|  1.44M|{
 1081|  1.44M|  FuncState *fs = ls->fs;
 1082|  1.44M|  BCReg nactvar = fs->nactvar;
 1083|  3.12M|  while (nvars--) {
  ------------------
  |  Branch (1083:10): [True: 1.68M, False: 1.44M]
  ------------------
 1084|  1.68M|    VarInfo *v = &var_get(ls, fs, nactvar);
  ------------------
  |  | 1050|  1.68M|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1085|  1.68M|    v->startpc = fs->pc;
 1086|  1.68M|    v->slot = nactvar++;
 1087|  1.68M|    v->info = 0;
 1088|  1.68M|  }
 1089|  1.44M|  fs->nactvar = nactvar;
 1090|  1.44M|}
lj_parse.c:expr_primary:
 1962|  4.86M|{
 1963|  4.86M|  FuncState *fs = ls->fs;
 1964|       |  /* Parse prefix expression. */
 1965|  4.86M|  if (ls->tok == '(') {
  ------------------
  |  Branch (1965:7): [True: 129k, False: 4.73M]
  ------------------
 1966|   129k|    BCLine line = ls->linenumber;
 1967|   129k|    lj_lex_next(ls);
 1968|   129k|    expr(ls, v);
 1969|   129k|    lex_match(ls, ')', '(', line);
 1970|   129k|    expr_discharge(ls->fs, v);
 1971|  4.73M|  } else if (ls->tok == TK_name || (!LJ_52 && ls->tok == TK_goto)) {
  ------------------
  |  |  697|  1.90M|#define LJ_52			0
  ------------------
  |  Branch (1971:14): [True: 3.78M, False: 952k]
  |  Branch (1971:37): [Folded - Ignored]
  |  Branch (1971:47): [True: 147, False: 952k]
  ------------------
 1972|  3.78M|    var_lookup(ls, v);
  ------------------
  |  | 1157|  3.78M|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 1973|  3.78M|  } else {
 1974|   952k|    err_syntax(ls, LJ_ERR_XSYMBOL);
 1975|   952k|  }
 1976|  5.07M|  for (;;) {  /* Parse multiple expression suffixes. */
 1977|  5.07M|    if (ls->tok == '.') {
  ------------------
  |  Branch (1977:9): [True: 45.8k, False: 5.03M]
  ------------------
 1978|  45.8k|      expr_field(ls, v);
 1979|  5.03M|    } else if (ls->tok == '[') {
  ------------------
  |  Branch (1979:16): [True: 45.9k, False: 4.98M]
  ------------------
 1980|  45.9k|      ExpDesc key;
 1981|  45.9k|      expr_toanyreg(fs, v);
 1982|  45.9k|      expr_bracket(ls, &key);
 1983|  45.9k|      expr_index(fs, v, &key);
 1984|  4.98M|    } else if (ls->tok == ':') {
  ------------------
  |  Branch (1984:16): [True: 13.3k, False: 4.97M]
  ------------------
 1985|  13.3k|      ExpDesc key;
 1986|  13.3k|      lj_lex_next(ls);
 1987|  13.3k|      expr_str(ls, &key);
 1988|  13.3k|      bcemit_method(fs, v, &key);
 1989|  13.3k|      parse_args(ls, v);
 1990|  4.97M|    } else if (ls->tok == '(' || ls->tok == TK_string || ls->tok == '{') {
  ------------------
  |  Branch (1990:16): [True: 1.08M, False: 3.88M]
  |  Branch (1990:34): [True: 390k, False: 3.49M]
  |  Branch (1990:58): [True: 16.1k, False: 3.47M]
  ------------------
 1991|  1.49M|      expr_tonextreg(fs, v);
 1992|  1.49M|      if (ls->fr2) bcreg_reserve(fs, 1);
  ------------------
  |  Branch (1992:11): [True: 1.49M, False: 7]
  ------------------
 1993|  1.49M|      parse_args(ls, v);
 1994|  3.47M|    } else {
 1995|  3.47M|      break;
 1996|  3.47M|    }
 1997|  5.07M|  }
 1998|  3.91M|}
lj_parse.c:var_lookup_:
 1132|  10.4M|{
 1133|  10.4M|  if (fs) {
  ------------------
  |  Branch (1133:7): [True: 5.78M, False: 4.61M]
  ------------------
 1134|  5.78M|    BCReg reg = var_lookup_local(fs, name);
 1135|  5.78M|    if ((int32_t)reg >= 0) {  /* Local in this function? */
  ------------------
  |  Branch (1135:9): [True: 256k, False: 5.53M]
  ------------------
 1136|   256k|      expr_init(e, VLOCAL, reg);
 1137|   256k|      if (!first)
  ------------------
  |  Branch (1137:11): [True: 15.0k, False: 241k]
  ------------------
 1138|  15.0k|	fscope_uvmark(fs, reg);  /* Scope now has an upvalue. */
 1139|   256k|      return (MSize)(e->u.s.aux = (uint32_t)fs->varmap[reg]);
 1140|  5.53M|    } else {
 1141|  5.53M|      MSize vidx = var_lookup_(fs->prev, name, e, 0);  /* Var in outer func? */
 1142|  5.53M|      if ((int32_t)vidx >= 0) {  /* Yes, make it an upvalue here. */
  ------------------
  |  Branch (1142:11): [True: 16.5k, False: 5.51M]
  ------------------
 1143|  16.5k|	e->u.s.info = (uint8_t)var_lookup_uv(fs, vidx, e);
 1144|  16.5k|	e->k = VUPVAL;
 1145|  16.5k|	return vidx;
 1146|  16.5k|      }
 1147|  5.53M|    }
 1148|  5.78M|  } else {  /* Not found in any function, must be a global. */
 1149|  4.61M|    expr_init(e, VGLOBAL, 0);
 1150|  4.61M|    e->u.sval = name;
 1151|  4.61M|  }
 1152|  10.1M|  return (MSize)-1;  /* Global. */
 1153|  10.4M|}
lj_parse.c:var_lookup_local:
 1102|  5.78M|{
 1103|  5.78M|  int i;
 1104|  9.40M|  for (i = fs->nactvar-1; i >= 0; i--) {
  ------------------
  |  Branch (1104:27): [True: 3.87M, False: 5.53M]
  ------------------
 1105|  3.87M|    if (n == strref(var_get(fs->ls, fs, i).name))
  ------------------
  |  |  315|  3.87M|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  3.87M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (1105:9): [True: 256k, False: 3.61M]
  ------------------
 1106|   256k|      return (BCReg)i;
 1107|  3.87M|  }
 1108|  5.53M|  return (BCReg)-1;  /* Not found. */
 1109|  5.78M|}
lj_parse.c:fscope_uvmark:
 1320|  15.0k|{
 1321|  15.0k|  FuncScope *bl;
 1322|  15.7k|  for (bl = fs->bl; bl && bl->nactvar > level; bl = bl->prev)
  ------------------
  |  Branch (1322:21): [True: 15.7k, False: 0]
  |  Branch (1322:27): [True: 715, False: 15.0k]
  ------------------
 1323|    715|    ;
 1324|  15.0k|  if (bl)
  ------------------
  |  Branch (1324:7): [True: 15.0k, False: 0]
  ------------------
 1325|  15.0k|    bl->flags |= FSCOPE_UPVAL;
  ------------------
  |  |  108|  15.0k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
 1326|  15.0k|}
lj_parse.c:var_lookup_uv:
 1113|  16.5k|{
 1114|  16.5k|  MSize i, n = fs->nuv;
 1115|  41.6k|  for (i = 0; i < n; i++)
  ------------------
  |  Branch (1115:15): [True: 32.6k, False: 9.01k]
  ------------------
 1116|  32.6k|    if (fs->uvmap[i] == vidx)
  ------------------
  |  Branch (1116:9): [True: 7.51k, False: 25.1k]
  ------------------
 1117|  7.51k|      return i;  /* Already exists. */
 1118|       |  /* Otherwise create a new one. */
 1119|  9.01k|  checklimit(fs, fs->nuv, LJ_MAX_UPVAL, "upvalues");
  ------------------
  |  |  192|  9.01k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 9.01k]
  |  |  ------------------
  ------------------
 1120|  9.01k|  lj_assertFS(e->k == VLOCAL || e->k == VUPVAL, "bad expr type %d", e->k);
  ------------------
  |  |  167|  9.01k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  9.01k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  9.71k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.30k, False: 703]
  |  |  |  |  |  |  |  Branch (355:5): [True: 703, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  9.01k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1121|  9.01k|  fs->uvmap[n] = (uint16_t)vidx;
 1122|  9.01k|  fs->uvtmp[n] = (uint16_t)(e->k == VLOCAL ? vidx : LJ_MAX_VSTACK+e->u.s.info);
  ------------------
  |  |  115|    703|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|    703|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1122:29): [True: 8.30k, False: 703]
  ------------------
 1123|  9.01k|  fs->nuv = n+1;
 1124|  9.01k|  return n;
 1125|  9.01k|}
lj_parse.c:expr_field:
 1695|  47.0k|{
 1696|  47.0k|  FuncState *fs = ls->fs;
 1697|  47.0k|  ExpDesc key;
 1698|  47.0k|  expr_toanyreg(fs, v);
 1699|  47.0k|  lj_lex_next(ls);  /* Skip dot or colon. */
 1700|  47.0k|  expr_str(ls, &key);
 1701|  47.0k|  expr_index(fs, v, &key);
 1702|  47.0k|}
lj_parse.c:bcemit_method:
  669|  13.1k|{
  670|  13.1k|  BCReg idx, func, fr2, obj = expr_toanyreg(fs, e);
  671|  13.1k|  expr_free(fs, e);
  672|  13.1k|  func = fs->freereg;
  673|  13.1k|  fr2 = fs->ls->fr2;
  674|  13.1k|  bcemit_AD(fs, BC_MOV, func+1+fr2, obj);  /* Copy object to 1st argument. */
  ------------------
  |  |  435|  13.1k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  13.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  675|  13.1k|  lj_assertFS(expr_isstrk(key), "bad usage");
  ------------------
  |  |  167|  13.1k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  13.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  13.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 13.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  13.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  676|  13.1k|  idx = const_str(fs, key);
  677|  13.1k|  if (idx <= BCMAX_C) {
  ------------------
  |  |   27|  13.1k|#define BCMAX_C		0xff
  ------------------
  |  Branch (677:7): [True: 13.1k, False: 0]
  ------------------
  678|  13.1k|    bcreg_reserve(fs, 2+fr2);
  679|  13.1k|    bcemit_ABC(fs, BC_TGETS, func, obj, idx);
  ------------------
  |  |  434|  13.1k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  13.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  680|  13.1k|  } else {
  681|      0|    bcreg_reserve(fs, 3+fr2);
  682|      0|    bcemit_AD(fs, BC_KSTR, func+2+fr2, idx);
  ------------------
  |  |  435|      0|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
  683|      0|    bcemit_ABC(fs, BC_TGETV, func, obj, func+2+fr2);
  ------------------
  |  |  434|      0|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|      0|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  684|      0|    fs->freereg--;
  685|      0|  }
  686|  13.1k|  e->u.s.info = func;
  687|  13.1k|  e->k = VNONRELOC;
  688|  13.1k|}
lj_parse.c:parse_args:
 1915|  1.50M|{
 1916|  1.50M|  FuncState *fs = ls->fs;
 1917|  1.50M|  ExpDesc args;
 1918|  1.50M|  BCIns ins;
 1919|  1.50M|  BCReg base;
 1920|  1.50M|  BCLine line = ls->linenumber;
 1921|  1.50M|  if (ls->tok == '(') {
  ------------------
  |  Branch (1921:7): [True: 1.09M, False: 409k]
  ------------------
 1922|  1.09M|#if !LJ_52
 1923|  1.09M|    if (line != ls->lastline)
  ------------------
  |  Branch (1923:9): [True: 37, False: 1.09M]
  ------------------
 1924|     37|      err_syntax(ls, LJ_ERR_XAMBIG);
 1925|  1.09M|#endif
 1926|  1.09M|    lj_lex_next(ls);
 1927|  1.09M|    if (ls->tok == ')') {  /* f(). */
  ------------------
  |  Branch (1927:9): [True: 15.1k, False: 1.08M]
  ------------------
 1928|  15.1k|      args.k = VVOID;
 1929|  1.08M|    } else {
 1930|  1.08M|      expr_list(ls, &args);
 1931|  1.08M|      if (args.k == VCALL)  /* f(a, b, g()) or f(a, b, ...). */
  ------------------
  |  Branch (1931:11): [True: 7.73k, False: 1.07M]
  ------------------
 1932|  1.08M|	setbc_b(bcptr(fs, &args), 0);  /* Pass on multiple results. */
  ------------------
  |  |   46|  7.73k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  7.73k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  7.73k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1933|  1.08M|    }
 1934|  1.09M|    lex_match(ls, ')', '(', line);
 1935|  1.09M|  } else if (ls->tok == '{') {
  ------------------
  |  Branch (1935:14): [True: 16.7k, False: 392k]
  ------------------
 1936|  16.7k|    expr_table(ls, &args);
 1937|   392k|  } else if (ls->tok == TK_string) {
  ------------------
  |  Branch (1937:14): [True: 391k, False: 1.57k]
  ------------------
 1938|   391k|    expr_init(&args, VKSTR, 0);
 1939|   391k|    args.u.sval = strV(&ls->tokval);
  ------------------
  |  |  859|   391k|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   391k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   391k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   391k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 391k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   391k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1940|      0|    lj_lex_next(ls);
 1941|   391k|  } else {
 1942|  1.57k|    err_syntax(ls, LJ_ERR_XFUNARG);
 1943|      0|    return;  /* Silence compiler. */
 1944|  1.57k|  }
 1945|  1.50M|  lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|  1.50M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.50M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.50M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.11M, False: 386k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.50M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1946|  1.11M|  base = e->u.s.info;  /* Base register for call. */
 1947|  1.11M|  if (args.k == VCALL) {
  ------------------
  |  Branch (1947:7): [True: 7.69k, False: 1.11M]
  ------------------
 1948|  7.69k|    ins = BCINS_ABC(BC_CALLM, base, 2, args.u.s.aux - base - 1 - ls->fr2);
  ------------------
  |  |   54|  7.69k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1949|  1.11M|  } else {
 1950|  1.11M|    if (args.k != VVOID)
  ------------------
  |  Branch (1950:9): [True: 1.09M, False: 15.1k]
  ------------------
 1951|  1.09M|      expr_tonextreg(fs, &args);
 1952|  1.11M|    ins = BCINS_ABC(BC_CALL, base, 2, fs->freereg - base - ls->fr2);
  ------------------
  |  |   54|  1.11M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  ------------------
 1953|  1.11M|  }
 1954|  1.11M|  expr_init(e, VCALL, bcemit_INS(fs, ins));
 1955|  1.11M|  e->u.s.aux = base;
 1956|  1.11M|  fs->bcbase[fs->pc - 1].line = line;
 1957|  1.11M|  fs->freereg = base+1;  /* Leave one result by default. */
 1958|  1.11M|}
lj_parse.c:expr_list:
 1902|  3.23M|{
 1903|  3.23M|  BCReg n = 1;
 1904|  3.23M|  expr(ls, v);
 1905|  3.44M|  while (lex_opt(ls, ',')) {
  ------------------
  |  Branch (1905:10): [True: 211k, False: 3.23M]
  ------------------
 1906|   211k|    expr_tonextreg(ls->fs, v);
 1907|   211k|    expr(ls, v);
 1908|   211k|    n++;
 1909|   211k|  }
 1910|  3.23M|  return n;
 1911|  3.23M|}
lj_parse.c:bcemit_unop:
  943|   246k|{
  944|   246k|  if (op == BC_NOT) {
  ------------------
  |  Branch (944:7): [True: 14.7k, False: 231k]
  ------------------
  945|       |    /* Swap true and false lists. */
  946|  14.7k|    { BCPos temp = e->f; e->f = e->t; e->t = temp; }
  947|  14.7k|    jmp_dropval(fs, e->f);
  948|  14.7k|    jmp_dropval(fs, e->t);
  949|  14.7k|    expr_discharge(fs, e);
  950|  14.7k|    if (e->k == VKNIL || e->k == VKFALSE) {
  ------------------
  |  Branch (950:9): [True: 493, False: 14.2k]
  |  Branch (950:26): [True: 184, False: 14.0k]
  ------------------
  951|    677|      e->k = VKTRUE;
  952|    677|      return;
  953|  14.0k|    } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |   73|  28.1k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 909, False: 13.1k]
  |  |  ------------------
  ------------------
                  } else if (expr_isk(e) || (LJ_HASFFI && e->k == VKCDATA)) {
  ------------------
  |  |  585|  26.3k|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (953:45): [True: 23, False: 13.1k]
  ------------------
  954|    932|      e->k = VKFALSE;
  955|    932|      return;
  956|  13.1k|    } else if (e->k == VJMP) {
  ------------------
  |  Branch (956:16): [True: 5.72k, False: 7.42k]
  ------------------
  957|  5.72k|      invertcond(fs, e);
  958|  5.72k|      return;
  959|  7.42k|    } else if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (959:16): [True: 3.39k, False: 4.02k]
  ------------------
  960|  3.39k|      bcreg_reserve(fs, 1);
  961|  3.39k|      setbc_a(bcptr(fs, e), fs->freereg-1);
  ------------------
  |  |   45|  3.39k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  3.39k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  3.39k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  962|  3.39k|      e->u.s.info = fs->freereg-1;
  963|  3.39k|      e->k = VNONRELOC;
  964|  4.02k|    } else {
  965|  4.02k|      lj_assertFS(e->k == VNONRELOC, "bad expr type %d", e->k);
  ------------------
  |  |  167|  4.02k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  4.02k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.02k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.02k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.02k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  966|  4.02k|    }
  967|   231k|  } else {
  968|   231k|    lj_assertFS(op == BC_UNM || op == BC_LEN, "bad unop %d", op);
  ------------------
  |  |  167|   231k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   231k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   260k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 202k, False: 29.1k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 29.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   231k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  969|   231k|    if (op == BC_UNM && !expr_hasjump(e)) {  /* Constant-fold negations. */
  ------------------
  |  |   71|   202k|#define expr_hasjump(e)		((e)->t != (e)->f)
  ------------------
  |  Branch (969:9): [True: 202k, False: 29.1k]
  |  Branch (969:25): [True: 202k, False: 220]
  ------------------
  970|   202k|#if LJ_HASFFI
  971|   202k|      if (e->k == VKCDATA) {  /* Fold in-place since cdata is not interned. */
  ------------------
  |  Branch (971:11): [True: 38.3k, False: 163k]
  ------------------
  972|  38.3k|	GCcdata *cd = cdataV(&e->u.nval);
  ------------------
  |  |  863|  38.3k|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|  38.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  38.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  38.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 38.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  38.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  973|  38.3k|	uint64_t *p = (uint64_t *)cdataptr(cd);
  ------------------
  |  |  360|  38.3k|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  974|  38.3k|	if (cd->ctypeid == CTID_COMPLEX_DOUBLE)
  ------------------
  |  Branch (974:6): [True: 1.39k, False: 36.9k]
  ------------------
  975|  1.39k|	  p[1] ^= U64x(80000000,00000000);
  ------------------
  |  |   94|  1.39k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  976|  36.9k|	else
  977|  36.9k|	  *p = ~*p+1u;
  978|  38.3k|	return;
  979|  38.3k|      } else
  980|   163k|#endif
  981|   163k|      if (expr_isnumk(e) && !expr_numiszero(e)) {  /* Avoid folding to -0. */
  ------------------
  |  |   75|   327k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 158k, False: 5.06k]
  |  |  ------------------
  ------------------
  |  Branch (981:29): [True: 157k, False: 1.44k]
  ------------------
  982|   157k|	TValue *o = expr_numtv(e);
  ------------------
  |  |   79|   157k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  ------------------
  |  |  |  |  367|   157k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   157k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   157k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 157k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   157k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  983|   157k|	if (tvisint(o)) {
  ------------------
  |  |  803|   157k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|   314k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  984|      0|	  int32_t k = intV(o), negk = (int32_t)(~(uint32_t)k+1u);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  985|      0|	  if (k == negk)
  ------------------
  |  Branch (985:8): [True: 0, False: 0]
  ------------------
  986|      0|	    setnumV(o, -(lua_Number)k);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  987|      0|	  else
  988|      0|	    setintV(o, negk);
  989|      0|	  return;
  990|   157k|	} else {
  991|   157k|	  o->u64 ^= U64x(80000000,00000000);
  ------------------
  |  |   94|   157k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  992|   157k|	  return;
  993|   157k|	}
  994|   157k|      }
  995|   202k|    }
  996|  35.9k|    expr_toanyreg(fs, e);
  997|  35.9k|  }
  998|  43.3k|  expr_free(fs, e);
  999|  43.3k|  e->u.s.info = bcemit_AD(fs, op, 0, e->u.s.info);
  ------------------
  |  |  435|  43.3k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  43.3k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1000|  43.3k|  e->k = VRELOCABLE;
 1001|  43.3k|}
lj_parse.c:jmp_dropval:
  312|  29.5k|{
  313|  33.4k|  for (; list != NO_JMP; list = jmp_next(fs, list))
  ------------------
  |  |   31|  33.4k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (313:10): [True: 3.96k, False: 29.5k]
  ------------------
  314|  3.96k|    jmp_patchtestreg(fs, list, NO_REG);
  ------------------
  |  |   30|  3.96k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  3.96k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  315|  29.5k|}
lj_parse.c:invertcond:
  711|  44.4k|{
  712|  44.4k|  BCIns *ip = &fs->bcbase[e->u.s.info - 1].ins;
  713|  44.4k|  setbc_op(ip, bc_op(*ip)^1);
  ------------------
  |  |   44|  44.4k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  44.4k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  44.4k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  714|  44.4k|}
lj_parse.c:token2binop:
 2056|   197M|{
 2057|   197M|  switch (tok) {
 2058|   458k|  case '+':	return OPR_ADD;
  ------------------
  |  Branch (2058:3): [True: 458k, False: 197M]
  ------------------
 2059|   419k|  case '-':	return OPR_SUB;
  ------------------
  |  Branch (2059:3): [True: 419k, False: 197M]
  ------------------
 2060|  19.6k|  case '*':	return OPR_MUL;
  ------------------
  |  Branch (2060:3): [True: 19.6k, False: 197M]
  ------------------
 2061|  95.2k|  case '/':	return OPR_DIV;
  ------------------
  |  Branch (2061:3): [True: 95.2k, False: 197M]
  ------------------
 2062|  22.8k|  case '%':	return OPR_MOD;
  ------------------
  |  Branch (2062:3): [True: 22.8k, False: 197M]
  ------------------
 2063|  24.6k|  case '^':	return OPR_POW;
  ------------------
  |  Branch (2063:3): [True: 24.6k, False: 197M]
  ------------------
 2064|  31.2k|  case TK_concat: return OPR_CONCAT;
  ------------------
  |  Branch (2064:3): [True: 31.2k, False: 197M]
  ------------------
 2065|  5.18k|  case TK_ne:	return OPR_NE;
  ------------------
  |  Branch (2065:3): [True: 5.18k, False: 197M]
  ------------------
 2066|  76.9k|  case TK_eq:	return OPR_EQ;
  ------------------
  |  Branch (2066:3): [True: 76.9k, False: 197M]
  ------------------
 2067|  15.4k|  case '<':	return OPR_LT;
  ------------------
  |  Branch (2067:3): [True: 15.4k, False: 197M]
  ------------------
 2068|  6.27k|  case TK_le:	return OPR_LE;
  ------------------
  |  Branch (2068:3): [True: 6.27k, False: 197M]
  ------------------
 2069|  24.5k|  case '>':	return OPR_GT;
  ------------------
  |  Branch (2069:3): [True: 24.5k, False: 197M]
  ------------------
 2070|  4.66k|  case TK_ge:	return OPR_GE;
  ------------------
  |  Branch (2070:3): [True: 4.66k, False: 197M]
  ------------------
 2071|  36.0k|  case TK_and:	return OPR_AND;
  ------------------
  |  Branch (2071:3): [True: 36.0k, False: 197M]
  ------------------
 2072|  18.0k|  case TK_or:	return OPR_OR;
  ------------------
  |  Branch (2072:3): [True: 18.0k, False: 197M]
  ------------------
 2073|   196M|  default:	return OPR_NOBINOPR;
  ------------------
  |  Branch (2073:3): [True: 196M, False: 1.25M]
  ------------------
 2074|   197M|  }
 2075|   197M|}
lj_parse.c:bcemit_binop_left:
  884|  1.20M|{
  885|  1.20M|  if (op == OPR_AND) {
  ------------------
  |  Branch (885:7): [True: 32.7k, False: 1.17M]
  ------------------
  886|  32.7k|    bcemit_branch_t(fs, e);
  887|  1.17M|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (887:14): [True: 15.3k, False: 1.15M]
  ------------------
  888|  15.3k|    bcemit_branch_f(fs, e);
  889|  1.15M|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (889:14): [True: 30.4k, False: 1.12M]
  ------------------
  890|  30.4k|    expr_tonextreg(fs, e);
  891|  1.12M|  } else if (op == OPR_EQ || op == OPR_NE) {
  ------------------
  |  Branch (891:14): [True: 74.7k, False: 1.04M]
  |  Branch (891:30): [True: 4.71k, False: 1.04M]
  ------------------
  892|  79.4k|    if (!expr_isk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   74|  79.4k|#define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   73|   158k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (73:22): [True: 2.21k, False: 77.2k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isk_nojump(e)	(expr_isk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  2.21k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (74:44): [True: 1.95k, False: 264]
  |  |  ------------------
  ------------------
  893|  1.04M|  } else {
  894|  1.04M|    if (!expr_isnumk_nojump(e)) expr_toanyreg(fs, e);
  ------------------
  |  |   76|  1.04M|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  2.09M|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 91.6k, False: 953k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  91.6k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 91.3k, False: 352]
  |  |  ------------------
  ------------------
  895|  1.04M|  }
  896|  1.20M|}
lj_parse.c:bcemit_branch_f:
  757|  15.3k|{
  758|  15.3k|  BCPos pc;
  759|  15.3k|  expr_discharge(fs, e);
  760|  15.3k|  if (e->k == VKNIL || e->k == VKFALSE)
  ------------------
  |  Branch (760:7): [True: 50, False: 15.3k]
  |  Branch (760:24): [True: 362, False: 14.9k]
  ------------------
  761|    412|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|    412|#define NO_JMP		(~(BCPos)0)
  ------------------
  762|  14.9k|  else if (e->k == VJMP)
  ------------------
  |  Branch (762:12): [True: 1.57k, False: 13.3k]
  ------------------
  763|  1.57k|    pc = e->u.s.info;
  764|  13.3k|  else if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (764:12): [True: 340, False: 13.0k]
  |  Branch (764:29): [True: 2.90k, False: 10.1k]
  |  Branch (764:46): [True: 353, False: 9.77k]
  ------------------
  765|  3.60k|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|  3.60k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  3.60k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  766|  9.77k|  else
  767|  9.77k|    pc = bcemit_branch(fs, e, 1);
  768|  15.3k|  jmp_append(fs, &e->t, pc);
  769|  15.3k|  jmp_tohere(fs, e->f);
  770|  15.3k|  e->f = NO_JMP;
  ------------------
  |  |   31|  15.3k|#define NO_JMP		(~(BCPos)0)
  ------------------
  771|  15.3k|}
lj_parse.c:bcemit_branch:
  718|  16.7k|{
  719|  16.7k|  BCPos pc;
  720|  16.7k|  if (e->k == VRELOCABLE) {
  ------------------
  |  Branch (720:7): [True: 10.7k, False: 6.00k]
  ------------------
  721|  10.7k|    BCIns *ip = bcptr(fs, e);
  ------------------
  |  |  438|  10.7k|#define bcptr(fs, e)			(&(fs)->bcbase[(e)->u.s.info].ins)
  ------------------
  722|  10.7k|    if (bc_op(*ip) == BC_NOT) {
  ------------------
  |  |   34|  10.7k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (722:9): [True: 3.89k, False: 6.80k]
  ------------------
  723|  3.89k|      *ip = BCINS_AD(cond ? BC_ISF : BC_IST, 0, bc_d(*ip));
  ------------------
  |  |   56|  7.79k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:13): [True: 965, False: 2.93k]
  |  |  ------------------
  ------------------
  724|  3.89k|      return bcemit_jmp(fs);
  725|  3.89k|    }
  726|  10.7k|  }
  727|  12.8k|  if (e->k != VNONRELOC) {
  ------------------
  |  Branch (727:7): [True: 6.80k, False: 6.00k]
  ------------------
  728|  6.80k|    bcreg_reserve(fs, 1);
  729|  6.80k|    expr_toreg_nobranch(fs, e, fs->freereg-1);
  730|  6.80k|  }
  731|  12.8k|  bcemit_AD(fs, cond ? BC_ISTC : BC_ISFC, NO_REG, e->u.s.info);
  ------------------
  |  |  435|  12.8k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  25.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (56:13): [True: 8.81k, False: 3.99k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  732|  12.8k|  pc = bcemit_jmp(fs);
  733|  12.8k|  expr_free(fs, e);
  734|  12.8k|  return pc;
  735|  16.7k|}
lj_parse.c:bcemit_binop:
  900|  1.18M|{
  901|  1.18M|  if (op <= OPR_POW) {
  ------------------
  |  Branch (901:7): [True: 984k, False: 197k]
  ------------------
  902|   984k|    bcemit_arith(fs, op, e1, e2);
  903|   984k|  } else if (op == OPR_AND) {
  ------------------
  |  Branch (903:14): [True: 32.7k, False: 164k]
  ------------------
  904|  32.7k|    lj_assertFS(e1->t == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|  32.7k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  32.7k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  32.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 32.7k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  32.7k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|  32.7k|    expr_discharge(fs, e2);
  906|  32.7k|    jmp_append(fs, &e2->f, e1->f);
  907|  32.7k|    *e1 = *e2;
  908|   164k|  } else if (op == OPR_OR) {
  ------------------
  |  Branch (908:14): [True: 14.1k, False: 150k]
  ------------------
  909|  14.1k|    lj_assertFS(e1->f == NO_JMP, "jump list not closed");
  ------------------
  |  |  167|  14.1k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  14.1k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  14.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 14.1k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  14.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|  14.1k|    expr_discharge(fs, e2);
  911|  14.1k|    jmp_append(fs, &e2->t, e1->t);
  912|  14.1k|    *e1 = *e2;
  913|   150k|  } else if (op == OPR_CONCAT) {
  ------------------
  |  Branch (913:14): [True: 29.3k, False: 120k]
  ------------------
  914|  29.3k|    expr_toval(fs, e2);
  915|  29.3k|    if (e2->k == VRELOCABLE && bc_op(*bcptr(fs, e2)) == BC_CAT) {
  ------------------
  |  |   34|  13.8k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (915:9): [True: 13.8k, False: 15.5k]
  |  Branch (915:32): [True: 12.6k, False: 1.12k]
  ------------------
  916|  12.6k|      lj_assertFS(e1->u.s.info == bc_b(*bcptr(fs, e2))-1,
  ------------------
  |  |  167|  12.6k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  12.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  12.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 12.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  12.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  917|  12.6k|		  "bad CAT stack layout");
  918|  12.6k|      expr_free(fs, e1);
  919|  12.6k|      setbc_b(bcptr(fs, e2), e1->u.s.info);
  ------------------
  |  |   46|  12.6k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  12.6k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  12.6k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  920|  12.6k|      e1->u.s.info = e2->u.s.info;
  921|  16.6k|    } else {
  922|  16.6k|      expr_tonextreg(fs, e2);
  923|  16.6k|      expr_free(fs, e2);
  924|  16.6k|      expr_free(fs, e1);
  925|  16.6k|      e1->u.s.info = bcemit_ABC(fs, BC_CAT, 0, e1->u.s.info, e2->u.s.info);
  ------------------
  |  |  434|  16.6k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  16.6k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  926|  16.6k|    }
  927|  29.3k|    e1->k = VRELOCABLE;
  928|   120k|  } else {
  929|   120k|    lj_assertFS(op == OPR_NE || op == OPR_EQ ||
  ------------------
  |  |  167|   120k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   120k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   832k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.65k, False: 116k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 74.2k, False: 42.0k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 13.9k, False: 28.0k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.29k, False: 23.7k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.23k, False: 17.5k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 17.5k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   120k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  930|   120k|	       op == OPR_LT || op == OPR_GE || op == OPR_LE || op == OPR_GT,
  931|   120k|	       "bad binop %d", op);
  932|   120k|    bcemit_comp(fs, op, e1, e2);
  933|   120k|  }
  934|  1.18M|}
lj_parse.c:bcemit_arith:
  797|   984k|{
  798|   984k|  BCReg rb, rc, t;
  799|   984k|  uint32_t op;
  800|   984k|  if (foldarith(opr, e1, e2))
  ------------------
  |  Branch (800:7): [True: 44.6k, False: 939k]
  ------------------
  801|  44.6k|    return;
  802|   939k|  if (opr == OPR_POW) {
  ------------------
  |  Branch (802:7): [True: 17.4k, False: 922k]
  ------------------
  803|  17.4k|    op = BC_POW;
  804|  17.4k|    rc = expr_toanyreg(fs, e2);
  805|  17.4k|    rb = expr_toanyreg(fs, e1);
  806|   922k|  } else {
  807|   922k|    op = opr-OPR_ADD+BC_ADDVV;
  808|       |    /* Must discharge 2nd operand first since VINDEXED might free regs. */
  809|   922k|    expr_toval(fs, e2);
  810|   922k|    if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   75|  1.84M|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 790k, False: 131k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e2) && (rc = const_num(fs, e2)) <= BCMAX_C)
  ------------------
  |  |   27|   790k|#define BCMAX_C		0xff
  ------------------
  |  Branch (810:28): [True: 790k, False: 2]
  ------------------
  811|   790k|      op -= BC_ADDVV-BC_ADDVN;
  812|   131k|    else
  813|   131k|      rc = expr_toanyreg(fs, e2);
  814|       |    /* 1st operand discharged by bcemit_binop_left, but need KNUM/KSHORT. */
  815|   922k|    lj_assertFS(expr_isnumk(e1) || e1->k == VNONRELOC,
  ------------------
  |  |  167|   922k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   922k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.80M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 38.2k, False: 883k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 883k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   922k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  816|   922k|		"bad expr type %d", e1->k);
  817|   922k|    expr_toval(fs, e1);
  818|       |    /* Avoid two consts to satisfy bytecode constraints. */
  819|   922k|    if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|  1.84M|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  ------------------
  |  |  |  Branch (75:25): [True: 38.2k, False: 883k]
  |  |  ------------------
  ------------------
                  if (expr_isnumk(e1) && !expr_isnumk(e2) &&
  ------------------
  |  |   75|   960k|#define expr_isnumk(e)		((e)->k == VKNUM)
  ------------------
  |  Branch (819:28): [True: 37.7k, False: 446]
  ------------------
  820|   922k|	(t = const_num(fs, e1)) <= BCMAX_B) {
  ------------------
  |  |   26|  37.7k|#define BCMAX_B		0xff
  ------------------
  |  Branch (820:2): [True: 37.7k, False: 0]
  ------------------
  821|  37.7k|      rb = rc; rc = t; op -= BC_ADDVV-BC_ADDNV;
  822|   884k|    } else {
  823|   884k|      rb = expr_toanyreg(fs, e1);
  824|   884k|    }
  825|   922k|  }
  826|       |  /* Using expr_free might cause asserts if the order is wrong. */
  827|   939k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (827:7): [True: 901k, False: 37.7k]
  |  Branch (827:29): [True: 883k, False: 18.5k]
  ------------------
  828|   939k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (828:7): [True: 148k, False: 790k]
  |  Branch (828:29): [True: 134k, False: 14.1k]
  ------------------
  829|   939k|  e1->u.s.info = bcemit_ABC(fs, op, 0, rb, rc);
  ------------------
  |  |  434|   939k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|   939k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  ------------------
  ------------------
  830|   939k|  e1->k = VRELOCABLE;
  831|   939k|}
lj_parse.c:foldarith:
  777|   984k|{
  778|   984k|  TValue o;
  779|   984k|  lua_Number n;
  780|   984k|  if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|  1.96M|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|  1.96M|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 86.3k, False: 897k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  86.3k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 86.3k, False: 0]
  |  |  ------------------
  ------------------
                if (!expr_isnumk_nojump(e1) || !expr_isnumk_nojump(e2)) return 0;
  ------------------
  |  |   76|  86.3k|#define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   75|   172k|#define expr_isnumk(e)		((e)->k == VKNUM)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (75:25): [True: 45.4k, False: 40.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define expr_isnumk_nojump(e)	(expr_isnumk(e) && !expr_hasjump(e))
  |  |  ------------------
  |  |  |  |   71|  45.4k|#define expr_hasjump(e)		((e)->t != (e)->f)
  |  |  ------------------
  |  |  |  Branch (76:50): [True: 45.0k, False: 350]
  |  |  ------------------
  ------------------
  781|  45.0k|  n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|  45.0k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  45.0k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  45.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  45.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  45.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 45.0k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  45.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                n = lj_vm_foldarith(expr_numberV(e1), expr_numberV(e2), (int)opr-OPR_ADD);
  ------------------
  |  |   80|  45.0k|#define expr_numberV(e)		numberVnum(expr_numtv((e)))
  |  |  ------------------
  |  |  |  |   79|  45.0k|#define expr_numtv(e)		check_exp(expr_isnumk((e)), &(e)->u.nval)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  45.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  45.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  45.0k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 45.0k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  45.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  782|  45.0k|  setnumV(&o, n);
  ------------------
  |  |  945|  45.0k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  783|  45.0k|  if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  812|  90.1k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 230, False: 44.8k]
  |  |  ------------------
  ------------------
                if (tvisnan(&o) || tvismzero(&o)) return 0;  /* Avoid NaN and -0 as consts. */
  ------------------
  |  |  819|  44.8k|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|  44.8k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  |  |  |  Branch (819:22): [True: 216, False: 44.6k]
  |  |  ------------------
  ------------------
  784|  44.6k|  if (LJ_DUALNUM) {
  ------------------
  |  |  549|  44.6k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  785|      0|    int32_t k = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  786|      0|    if ((lua_Number)k == n) {
  ------------------
  |  Branch (786:9): [True: 0, False: 0]
  ------------------
  787|      0|      setintV(&e1->u.nval, k);
  788|      0|      return 1;
  789|      0|    }
  790|      0|  }
  791|  44.6k|  setnumV(&e1->u.nval, n);
  ------------------
  |  |  945|  44.6k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  792|  44.6k|  return 1;
  793|  44.6k|}
lj_parse.c:bcemit_comp:
  835|   120k|{
  836|   120k|  ExpDesc *eret = e1;
  837|   120k|  BCIns ins;
  838|   120k|  expr_toval(fs, e1);
  839|   120k|  if (opr == OPR_EQ || opr == OPR_NE) {
  ------------------
  |  Branch (839:7): [True: 74.2k, False: 46.6k]
  |  Branch (839:24): [True: 4.65k, False: 42.0k]
  ------------------
  840|  78.8k|    BCOp op = opr == OPR_EQ ? BC_ISEQV : BC_ISNEV;
  ------------------
  |  Branch (840:15): [True: 74.2k, False: 4.65k]
  ------------------
  841|  78.8k|    BCReg ra;
  842|  78.8k|    if (expr_isk(e1)) { e1 = e2; e2 = eret; }  /* Need constant in 2nd arg. */
  ------------------
  |  |   73|  78.8k|#define expr_isk(e)		((e)->k <= VKLAST)
  |  |  ------------------
  |  |  |  Branch (73:22): [True: 1.89k, False: 76.9k]
  |  |  ------------------
  ------------------
  843|  78.8k|    ra = expr_toanyreg(fs, e1);  /* First arg must be in a reg. */
  844|  78.8k|    expr_toval(fs, e2);
  845|  78.8k|    switch (e2->k) {
  846|  13.1k|    case VKNIL: case VKFALSE: case VKTRUE:
  ------------------
  |  Branch (846:5): [True: 10.7k, False: 68.1k]
  |  Branch (846:17): [True: 1.40k, False: 77.4k]
  |  Branch (846:31): [True: 1.03k, False: 77.8k]
  ------------------
  847|  13.1k|      ins = BCINS_AD(op+(BC_ISEQP-BC_ISEQV), ra, const_pri(e2));
  ------------------
  |  |   56|  26.3k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  |  |  |  Branch (56:42): [True: 13.1k, False: 0]
  |  |  ------------------
  ------------------
  848|      0|      break;
  849|  15.1k|    case VKSTR:
  ------------------
  |  Branch (849:5): [True: 15.1k, False: 63.7k]
  ------------------
  850|  15.1k|      ins = BCINS_AD(op+(BC_ISEQS-BC_ISEQV), ra, const_str(fs, e2));
  ------------------
  |  |   56|  15.1k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  851|  15.1k|      break;
  852|  26.7k|    case VKNUM:
  ------------------
  |  Branch (852:5): [True: 26.7k, False: 52.1k]
  ------------------
  853|  26.7k|      ins = BCINS_AD(op+(BC_ISEQN-BC_ISEQV), ra, const_num(fs, e2));
  ------------------
  |  |   56|  26.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  854|  26.7k|      break;
  855|  23.8k|    default:
  ------------------
  |  Branch (855:5): [True: 23.8k, False: 55.0k]
  ------------------
  856|  23.8k|      ins = BCINS_AD(op, ra, expr_toanyreg(fs, e2));
  ------------------
  |  |   56|  23.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  857|  23.8k|      break;
  858|  78.8k|    }
  859|  78.8k|  } else {
  860|  42.0k|    uint32_t op = opr-OPR_LT+BC_ISLT;
  861|  42.0k|    BCReg ra, rd;
  862|  42.0k|    if ((op-BC_ISLT) & 1) {  /* GT -> LT, GE -> LE */
  ------------------
  |  Branch (862:9): [True: 21.8k, False: 20.2k]
  ------------------
  863|  21.8k|      e1 = e2; e2 = eret;  /* Swap operands. */
  864|  21.8k|      op = ((op-BC_ISLT)^3)+BC_ISLT;
  865|  21.8k|      expr_toval(fs, e1);
  866|  21.8k|      ra = expr_toanyreg(fs, e1);
  867|  21.8k|      rd = expr_toanyreg(fs, e2);
  868|  21.8k|    } else {
  869|  20.2k|      rd = expr_toanyreg(fs, e2);
  870|  20.2k|      ra = expr_toanyreg(fs, e1);
  871|  20.2k|    }
  872|  42.0k|    ins = BCINS_AD(op, ra, rd);
  ------------------
  |  |   56|  42.0k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  873|  42.0k|  }
  874|       |  /* Using expr_free might cause asserts if the order is wrong. */
  875|   120k|  if (e1->k == VNONRELOC && e1->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (875:7): [True: 120k, False: 0]
  |  Branch (875:29): [True: 106k, False: 13.9k]
  ------------------
  876|   120k|  if (e2->k == VNONRELOC && e2->u.s.info >= fs->nactvar) fs->freereg--;
  ------------------
  |  Branch (876:7): [True: 65.8k, False: 55.0k]
  |  Branch (876:29): [True: 50.0k, False: 15.7k]
  ------------------
  877|   120k|  bcemit_INS(fs, ins);
  878|   120k|  eret->u.s.info = bcemit_jmp(fs);
  879|   120k|  eret->k = VJMP;
  880|   120k|}
lj_parse.c:bcemit_branch_t:
  739|  47.2k|{
  740|  47.2k|  BCPos pc;
  741|  47.2k|  expr_discharge(fs, e);
  742|  47.2k|  if (e->k == VKSTR || e->k == VKNUM || e->k == VKTRUE)
  ------------------
  |  Branch (742:7): [True: 2, False: 47.2k]
  |  Branch (742:24): [True: 744, False: 46.5k]
  |  Branch (742:41): [True: 402, False: 46.1k]
  ------------------
  743|  1.14k|    pc = NO_JMP;  /* Never jump. */
  ------------------
  |  |   31|  1.14k|#define NO_JMP		(~(BCPos)0)
  ------------------
  744|  46.1k|  else if (e->k == VJMP)
  ------------------
  |  Branch (744:12): [True: 38.6k, False: 7.45k]
  ------------------
  745|  38.6k|    invertcond(fs, e), pc = e->u.s.info;
  746|  7.45k|  else if (e->k == VKFALSE || e->k == VKNIL)
  ------------------
  |  Branch (746:12): [True: 525, False: 6.92k]
  |  Branch (746:31): [True: 0, False: 6.92k]
  ------------------
  747|    525|    expr_toreg_nobranch(fs, e, NO_REG), pc = bcemit_jmp(fs);
  ------------------
  |  |   30|    525|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|    525|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  748|  6.92k|  else
  749|  6.92k|    pc = bcemit_branch(fs, e, 0);
  750|  47.2k|  jmp_append(fs, &e->f, pc);
  751|  47.2k|  jmp_tohere(fs, e->t);
  752|  47.2k|  e->t = NO_JMP;
  ------------------
  |  |   31|  47.2k|#define NO_JMP		(~(BCPos)0)
  ------------------
  753|  47.2k|}
lj_parse.c:lex_check:
 1017|   181M|{
 1018|   181M|  if (ls->tok != tok)
  ------------------
  |  Branch (1018:7): [True: 682k, False: 180M]
  ------------------
 1019|   682k|    err_token(ls, tok);
 1020|   180M|  lj_lex_next(ls);
 1021|   180M|}
lj_parse.c:jmp_append:
  330|   514k|{
  331|   514k|  if (l2 == NO_JMP) {
  ------------------
  |  |   31|   514k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (331:7): [True: 294k, False: 219k]
  ------------------
  332|   294k|    return;
  333|   294k|  } else if (*l1 == NO_JMP) {
  ------------------
  |  |   31|   219k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (333:14): [True: 196k, False: 23.5k]
  ------------------
  334|   196k|    *l1 = l2;
  335|   196k|  } else {
  336|  23.5k|    BCPos list = *l1;
  337|  23.5k|    BCPos next;
  338|  46.9k|    while ((next = jmp_next(fs, list)) != NO_JMP)  /* Find last element. */
  ------------------
  |  |   31|  46.9k|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (338:12): [True: 23.3k, False: 23.5k]
  ------------------
  339|  23.3k|      list = next;
  340|  23.5k|    jmp_patchins(fs, list, l2);
  341|  23.5k|  }
  342|   514k|}
lj_parse.c:bcemit_jmp:
  694|   150k|{
  695|   150k|  BCPos jpc = fs->jpc;
  696|   150k|  BCPos j = fs->pc - 1;
  697|   150k|  BCIns *ip = &fs->bcbase[j].ins;
  698|   150k|  fs->jpc = NO_JMP;
  ------------------
  |  |   31|   150k|#define NO_JMP		(~(BCPos)0)
  ------------------
  699|   150k|  if ((int32_t)j >= (int32_t)fs->lasttarget && bc_op(*ip) == BC_UCLO) {
  ------------------
  |  |   34|   149k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (699:7): [True: 149k, False: 907]
  |  Branch (699:48): [True: 104, False: 149k]
  ------------------
  700|    104|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|    104|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|    104|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    104|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  701|    104|    fs->lasttarget = j+1;
  702|   150k|  } else {
  703|   150k|    j = bcemit_AJ(fs, BC_JMP, fs->freereg, NO_JMP);
  ------------------
  |  |  436|   150k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|   150k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|   150k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  704|   150k|  }
  705|   150k|  jmp_append(fs, &j, jpc);
  706|   150k|  return j;
  707|   150k|}
lj_parse.c:jmp_tohere:
  360|   162k|{
  361|   162k|  fs->lasttarget = fs->pc;
  362|   162k|  jmp_append(fs, &fs->jpc, list);
  363|   162k|}
lj_parse.c:parse_while:
 2440|  2.15k|{
 2441|  2.15k|  FuncState *fs = ls->fs;
 2442|  2.15k|  BCPos start, loop, condexit;
 2443|  2.15k|  FuncScope bl;
 2444|  2.15k|  lj_lex_next(ls);  /* Skip 'while'. */
 2445|  2.15k|  start = fs->lasttarget = fs->pc;
 2446|  2.15k|  condexit = expr_cond(ls);
 2447|  2.15k|  fscope_begin(fs, &bl, FSCOPE_LOOP);
  ------------------
  |  |  105|  2.15k|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2448|  2.15k|  lex_check(ls, TK_do);
 2449|  2.15k|  loop = bcemit_AD(fs, BC_LOOP, fs->nactvar, 0);
  ------------------
  |  |  435|  2.15k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  2.15k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2450|  2.15k|  parse_block(ls);
 2451|  2.15k|  jmp_patch(fs, bcemit_jmp(fs), start);
 2452|  2.15k|  lex_match(ls, TK_end, TK_while, line);
 2453|  2.15k|  fscope_end(fs);
 2454|  2.15k|  jmp_tohere(fs, condexit);
 2455|  2.15k|  jmp_patchins(fs, loop, fs->pc);
 2456|  2.15k|}
lj_parse.c:jmp_patch:
  367|  4.06k|{
  368|  4.06k|  if (target == fs->pc) {
  ------------------
  |  Branch (368:7): [True: 1.08k, False: 2.97k]
  ------------------
  369|  1.08k|    jmp_tohere(fs, list);
  370|  2.97k|  } else {
  371|  2.97k|    lj_assertFS(target < fs->pc, "bad jump target");
  ------------------
  |  |  167|  2.97k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  2.97k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.97k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.97k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.97k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  372|  2.97k|    jmp_patchval(fs, list, target, NO_REG, target);
  ------------------
  |  |   30|  2.97k|#define NO_REG		BCMAX_A
  |  |  ------------------
  |  |  |  |   25|  2.97k|#define BCMAX_A		0xff
  |  |  ------------------
  ------------------
  373|  2.97k|  }
  374|  4.06k|}
lj_parse.c:fscope_end:
 1294|  1.99M|{
 1295|  1.99M|  FuncScope *bl = fs->bl;
 1296|  1.99M|  LexState *ls = fs->ls;
 1297|  1.99M|  fs->bl = bl->prev;
 1298|  1.99M|  var_remove(ls, bl->nactvar);
 1299|  1.99M|  fs->freereg = fs->nactvar;
 1300|  1.99M|  lj_assertFS(bl->nactvar == fs->nactvar, "bad regalloc");
  ------------------
  |  |  167|  1.99M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.99M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.99M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.99M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.99M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1301|  1.99M|  if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|  1.99M|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  109|  1.99M|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
                if ((bl->flags & (FSCOPE_UPVAL|FSCOPE_NOCLOSE)) == FSCOPE_UPVAL)
  ------------------
  |  |  108|  1.99M|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1301:7): [True: 936, False: 1.99M]
  ------------------
 1302|    936|    bcemit_AJ(fs, BC_UCLO, bl->nactvar, 0);
  ------------------
  |  |  436|    936|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    936|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    936|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1303|  1.99M|  if ((bl->flags & FSCOPE_BREAK)) {
  ------------------
  |  |  106|  1.99M|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
  |  Branch (1303:7): [True: 1.64k, False: 1.99M]
  ------------------
 1304|  1.64k|    if ((bl->flags & FSCOPE_LOOP)) {
  ------------------
  |  |  105|  1.64k|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
  |  Branch (1304:9): [True: 496, False: 1.14k]
  ------------------
 1305|    496|      MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  111|    496|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                    MSize idx = gola_new(ls, NAME_BREAK, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|    496|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 1306|    496|      ls->vtop = idx;  /* Drop break label immediately. */
 1307|    496|      gola_resolve(ls, bl, idx);
 1308|  1.14k|    } else {  /* Need the fixup step to propagate the breaks. */
 1309|  1.14k|      gola_fixup(ls, bl);
 1310|  1.14k|      return;
 1311|  1.14k|    }
 1312|  1.64k|  }
 1313|  1.99M|  if ((bl->flags & FSCOPE_GOLA)) {
  ------------------
  |  |  107|  1.99M|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1313:7): [True: 870, False: 1.99M]
  ------------------
 1314|    870|    gola_fixup(ls, bl);
 1315|    870|  }
 1316|  1.99M|}
lj_parse.c:var_remove:
 1094|  1.99M|{
 1095|  1.99M|  FuncState *fs = ls->fs;
 1096|  3.03M|  while (fs->nactvar > tolevel)
  ------------------
  |  Branch (1096:10): [True: 1.04M, False: 1.99M]
  ------------------
 1097|  1.04M|    var_get(ls, fs, --fs->nactvar).endpc = fs->pc;
  ------------------
  |  | 1050|  1.04M|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 1098|  1.99M|}
lj_parse.c:gola_new:
 1163|  3.19k|{
 1164|  3.19k|  FuncState *fs = ls->fs;
 1165|  3.19k|  MSize vtop = ls->vtop;
 1166|  3.19k|  if (LJ_UNLIKELY(vtop >= ls->sizevstack)) {
  ------------------
  |  |  146|  3.19k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 319, False: 2.87k]
  |  |  ------------------
  ------------------
 1167|    319|    if (ls->sizevstack >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|    319|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|    319|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1167:9): [True: 0, False: 319]
  ------------------
 1168|      0|      lj_lex_error(ls, 0, LJ_ERR_XLIMC, LJ_MAX_VSTACK);
  ------------------
  |  |  115|      0|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|      0|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1169|    319|    lj_mem_growvec(ls->L, ls->vstack, ls->sizevstack, LJ_MAX_VSTACK, VarInfo);
  ------------------
  |  |  129|    319|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
 1170|    319|  }
 1171|  3.19k|  lj_assertFS(name == NAME_BREAK || lj_tab_getstr(fs->kt, name) != NULL,
  ------------------
  |  |  167|  3.19k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.19k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  5.26k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.12k, False: 2.07k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.07k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.19k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1172|  3.19k|	      "unanchored label name");
 1173|       |  /* NOBARRIER: name is anchored in fs->kt and ls->vstack is not a GCobj. */
 1174|  3.19k|  setgcref(ls->vstack[vtop].name, obj2gco(name));
  ------------------
  |  |   72|  3.19k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1175|  3.19k|  ls->vstack[vtop].startpc = pc;
 1176|  3.19k|  ls->vstack[vtop].slot = (uint8_t)fs->nactvar;
 1177|  3.19k|  ls->vstack[vtop].info = info;
 1178|  3.19k|  ls->vtop = vtop+1;
 1179|  3.19k|  return vtop;
 1180|  3.19k|}
lj_parse.c:gola_resolve:
 1216|  1.62k|{
 1217|  1.62k|  VarInfo *vg = ls->vstack + bl->vstart;
 1218|  1.62k|  VarInfo *vl = ls->vstack + idx;
 1219|  6.54k|  for (; vg < vl; vg++)
  ------------------
  |  Branch (1219:10): [True: 4.96k, False: 1.57k]
  ------------------
 1220|  4.96k|    if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  |   70|  9.92k|#define gcrefeq(r1, r2)	((r1).gcptr64 == (r2).gcptr64)
  |  |  ------------------
  |  |  |  Branch (70:25): [True: 1.28k, False: 3.67k]
  |  |  ------------------
  ------------------
                  if (gcrefeq(vg->name, vl->name) && gola_isgoto(vg)) {
  ------------------
  |  | 1182|  1.28k|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|  1.28k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 1.12k, False: 159]
  |  |  ------------------
  ------------------
 1221|  1.12k|      if (vg->slot < vl->slot) {
  ------------------
  |  Branch (1221:11): [True: 41, False: 1.08k]
  ------------------
 1222|     41|	GCstr *name = strref(var_get(ls, ls->fs, vg->slot).name);
  ------------------
  |  |  315|     41|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|     41|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1223|     41|	lj_assertLS((uintptr_t)name >= VARNAME__MAX, "expected goto name");
  ------------------
  |  |   89|     41|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     41|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     41|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 41, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     41|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1224|     41|	ls->linenumber = ls->fs->bcbase[vg->startpc].line;
 1225|     41|	lj_assertLS(strref(vg->name) != NAME_BREAK, "unexpected break");
  ------------------
  |  |   89|     41|#define lj_assertLS(c, ...)	(lj_assertG_(G(ls->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     41|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     41|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 41, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     41|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1226|     41|	lj_lex_error(ls, 0, LJ_ERR_XGSCOPE,
 1227|     41|		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|     41|#define strdata(s)	((const char *)((s)+1))
  ------------------
              		     strdata(strref(vg->name)), strdata(name));
  ------------------
  |  |  316|     41|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1228|     41|      }
 1229|  1.08k|      gola_patch(ls, vg, vl);
 1230|  1.08k|    }
 1231|  1.62k|}
lj_parse.c:gola_patch:
 1188|  1.21k|{
 1189|  1.21k|  FuncState *fs = ls->fs;
 1190|  1.21k|  BCPos pc = vg->startpc;
 1191|  1.21k|  setgcrefnull(vg->name);  /* Invalidate pending goto. */
  ------------------
  |  |   76|  1.21k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1192|  1.21k|  setbc_a(&fs->bcbase[pc].ins, vl->slot);
  ------------------
  |  |   45|  1.21k|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|  1.21k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  1.21k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1193|  1.21k|  jmp_patch(fs, pc, vl->startpc);
 1194|  1.21k|}
lj_parse.c:gola_fixup:
 1235|  2.01k|{
 1236|  2.01k|  VarInfo *v = ls->vstack + bl->vstart;
 1237|  2.01k|  VarInfo *ve = ls->vstack + ls->vtop;
 1238|  7.63k|  for (; v < ve; v++) {
  ------------------
  |  Branch (1238:10): [True: 5.66k, False: 1.97k]
  ------------------
 1239|  5.66k|    GCstr *name = strref(v->name);
  ------------------
  |  |  315|  5.66k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  5.66k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1240|  5.66k|    if (name != NULL) {  /* Only consider remaining valid gotos/labels. */
  ------------------
  |  Branch (1240:9): [True: 4.18k, False: 1.48k]
  ------------------
 1241|  4.18k|      if (gola_islabel(v)) {
  ------------------
  |  | 1183|  4.18k|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|  4.18k|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 904, False: 3.27k]
  |  |  ------------------
  ------------------
 1242|    904|	VarInfo *vg;
 1243|    904|	setgcrefnull(v->name);  /* Invalidate label that goes out of scope. */
  ------------------
  |  |   76|    904|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
 1244|  1.99k|	for (vg = v+1; vg < ve; vg++)  /* Resolve pending backward gotos. */
  ------------------
  |  Branch (1244:17): [True: 1.09k, False: 904]
  ------------------
 1245|  1.09k|	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  |  315|  1.09k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  1.09k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
              	  if (strref(vg->name) == name && gola_isgoto(vg)) {
  ------------------
  |  | 1182|    129|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|    129|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 129, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1245:8): [True: 129, False: 966]
  ------------------
 1246|    129|	    if ((bl->flags&FSCOPE_UPVAL) && vg->slot > v->slot)
  ------------------
  |  |  108|    129|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1246:10): [True: 56, False: 73]
  |  Branch (1246:38): [True: 30, False: 26]
  ------------------
 1247|     30|	      gola_close(ls, vg);
 1248|    129|	    gola_patch(ls, vg, v);
 1249|    129|	  }
 1250|  3.27k|      } else if (gola_isgoto(v)) {
  ------------------
  |  | 1182|  3.27k|#define gola_isgoto(v)		((v)->info & VSTACK_GOTO)
  |  |  ------------------
  |  |  |  |  119|  3.27k|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |  |  Branch (1182:25): [True: 1.57k, False: 1.70k]
  |  |  ------------------
  ------------------
 1251|  1.57k|	if (bl->prev) {  /* Propagate goto or break to outer scope. */
  ------------------
  |  Branch (1251:6): [True: 1.52k, False: 44]
  ------------------
 1252|  1.52k|	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  111|  1.52k|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  106|  1.19k|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
              	  bl->prev->flags |= name == NAME_BREAK ? FSCOPE_BREAK : FSCOPE_GOLA;
  ------------------
  |  |  107|  1.85k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
  |  Branch (1252:23): [True: 1.19k, False: 328]
  ------------------
 1253|  1.52k|	  v->slot = bl->nactvar;
 1254|  1.52k|	  if ((bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|  1.52k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1254:8): [True: 67, False: 1.46k]
  ------------------
 1255|     67|	    gola_close(ls, v);
 1256|  1.52k|	} else {  /* No outer scope: undefined goto label or no loop. */
 1257|     44|	  ls->linenumber = ls->fs->bcbase[v->startpc].line;
 1258|     44|	  if (name == NAME_BREAK)
  ------------------
  |  |  111|     44|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
  |  Branch (1258:8): [True: 13, False: 31]
  ------------------
 1259|     13|	    lj_lex_error(ls, 0, LJ_ERR_XBREAK);
 1260|     31|	  else
 1261|     31|	    lj_lex_error(ls, 0, LJ_ERR_XLUNDEF, strdata(name));
  ------------------
  |  |  316|     31|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1262|     44|	}
 1263|  1.57k|      }
 1264|  4.18k|    }
 1265|  5.66k|  }
 1266|  2.01k|}
lj_parse.c:gola_close:
 1198|     97|{
 1199|     97|  FuncState *fs = ls->fs;
 1200|     97|  BCPos pc = vg->startpc;
 1201|     97|  BCIns *ip = &fs->bcbase[pc].ins;
 1202|     97|  lj_assertFS(gola_isgoto(vg), "expected goto");
  ------------------
  |  |  167|     97|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     97|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     97|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 97, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     97|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1203|     97|  lj_assertFS(bc_op(*ip) == BC_JMP || bc_op(*ip) == BC_UCLO,
  ------------------
  |  |  167|     97|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|     97|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     97|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 97, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     97|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1204|     97|	      "bad bytecode op %d", bc_op(*ip));
 1205|     97|  setbc_a(ip, vg->slot);
  ------------------
  |  |   45|     97|#define setbc_a(p, x)	setbc_byte(p, (x), 1)
  |  |  ------------------
  |  |  |  |   43|     97|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     97|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1206|     97|  if (bc_op(*ip) == BC_JMP) {
  ------------------
  |  |   34|     97|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1206:7): [True: 97, False: 0]
  ------------------
 1207|     97|    BCPos next = jmp_next(fs, pc);
 1208|     97|    if (next != NO_JMP) jmp_patch(fs, next, pc);  /* Jump to UCLO. */
  ------------------
  |  |   31|     97|#define NO_JMP		(~(BCPos)0)
  ------------------
  |  Branch (1208:9): [True: 0, False: 97]
  ------------------
 1209|     97|    setbc_op(ip, BC_UCLO);  /* Turn into UCLO. */
  ------------------
  |  |   44|     97|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|     97|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     97|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1210|     97|    setbc_j(ip, NO_JMP);
  ------------------
  |  |   50|     97|#define setbc_j(p, x)	setbc_d(p, (BCPos)((int32_t)(x)+BCBIAS_J))
  |  |  ------------------
  |  |  |  |   49|     97|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     97|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1211|     97|  }
 1212|     97|}
lj_parse.c:parse_block:
 2430|  72.7k|{
 2431|  72.7k|  FuncState *fs = ls->fs;
 2432|  72.7k|  FuncScope bl;
 2433|  72.7k|  fscope_begin(fs, &bl, 0);
 2434|  72.7k|  parse_chunk(ls);
 2435|  72.7k|  fscope_end(fs);
 2436|  72.7k|}
lj_parse.c:lex_match:
 1025|  1.04M|{
 1026|  1.04M|  if (!lex_opt(ls, what)) {
  ------------------
  |  Branch (1026:7): [True: 166k, False: 880k]
  ------------------
 1027|   166k|    if (line == ls->linenumber) {
  ------------------
  |  Branch (1027:9): [True: 132k, False: 33.2k]
  ------------------
 1028|   132k|      err_token(ls, what);
 1029|   132k|    } else {
 1030|  33.2k|      const char *swhat = lj_lex_token2str(ls, what);
 1031|  33.2k|      const char *swho = lj_lex_token2str(ls, who);
 1032|  33.2k|      lj_lex_error(ls, ls->tok, LJ_ERR_XMATCH, swhat, swho, line);
 1033|  33.2k|    }
 1034|   166k|  }
 1035|  1.04M|}
lj_parse.c:parse_for:
 2600|  19.2k|{
 2601|  19.2k|  FuncState *fs = ls->fs;
 2602|  19.2k|  GCstr *varname;
 2603|  19.2k|  FuncScope bl;
 2604|  19.2k|  fscope_begin(fs, &bl, FSCOPE_LOOP);
  ------------------
  |  |  105|  19.2k|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2605|  19.2k|  lj_lex_next(ls);  /* Skip 'for'. */
 2606|  19.2k|  varname = lex_str(ls);  /* Get first variable name. */
 2607|  19.2k|  if (ls->tok == '=')
  ------------------
  |  Branch (2607:7): [True: 14.5k, False: 4.63k]
  ------------------
 2608|  14.5k|    parse_for_num(ls, varname, line);
 2609|  4.63k|  else if (ls->tok == ',' || ls->tok == TK_in)
  ------------------
  |  Branch (2609:12): [True: 1.87k, False: 2.75k]
  |  Branch (2609:30): [True: 2.71k, False: 43]
  ------------------
 2610|  4.58k|    parse_for_iter(ls, varname);
 2611|     51|  else
 2612|     51|    err_syntax(ls, LJ_ERR_XFOR);
 2613|  19.1k|  lex_match(ls, TK_end, TK_for, line);
 2614|  19.1k|  fscope_end(fs);  /* Resolve break list. */
 2615|  19.1k|}
lj_parse.c:parse_for_num:
 2487|  14.5k|{
 2488|  14.5k|  FuncState *fs = ls->fs;
 2489|  14.5k|  BCReg base = fs->freereg;
 2490|  14.5k|  FuncScope bl;
 2491|  14.5k|  BCPos loop, loopend;
 2492|       |  /* Hidden control variables. */
 2493|  14.5k|  var_new_fixed(ls, FORL_IDX, VARNAME_FOR_IDX);
  ------------------
  |  | 1076|  14.5k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2494|  14.5k|  var_new_fixed(ls, FORL_STOP, VARNAME_FOR_STOP);
  ------------------
  |  | 1076|  14.5k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2495|  14.5k|  var_new_fixed(ls, FORL_STEP, VARNAME_FOR_STEP);
  ------------------
  |  | 1076|  14.5k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2496|       |  /* Visible copy of index variable. */
 2497|  14.5k|  var_new(ls, FORL_EXT, varname);
 2498|  14.5k|  lex_check(ls, '=');
 2499|  14.5k|  expr_next(ls);
 2500|  14.5k|  lex_check(ls, ',');
 2501|  14.5k|  expr_next(ls);
 2502|  14.5k|  if (lex_opt(ls, ',')) {
  ------------------
  |  Branch (2502:7): [True: 799, False: 13.7k]
  ------------------
 2503|    799|    expr_next(ls);
 2504|  13.7k|  } else {
 2505|  13.7k|    bcemit_AD(fs, BC_KSHORT, fs->freereg, 1);  /* Default step is 1. */
  ------------------
  |  |  435|  13.7k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|  13.7k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2506|  13.7k|    bcreg_reserve(fs, 1);
 2507|  13.7k|  }
 2508|  14.5k|  var_add(ls, 3);  /* Hidden control variables. */
 2509|  14.5k|  lex_check(ls, TK_do);
 2510|  14.5k|  loop = bcemit_AJ(fs, BC_FORI, base, NO_JMP);
  ------------------
  |  |  436|  14.5k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  14.5k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  14.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2511|  14.5k|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2512|  14.5k|  var_add(ls, 1);
 2513|  14.5k|  bcreg_reserve(fs, 1);
 2514|  14.5k|  parse_block(ls);
 2515|  14.5k|  fscope_end(fs);
 2516|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2517|  14.5k|  loopend = bcemit_AJ(fs, BC_FORL, base, NO_JMP);
  ------------------
  |  |  436|  14.5k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  14.5k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  14.5k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2518|  14.5k|  fs->bcbase[loopend].line = line;  /* Fix line for control ins. */
 2519|  14.5k|  jmp_patchins(fs, loopend, loop+1);
 2520|  14.5k|  jmp_patchins(fs, loop, fs->pc);
 2521|  14.5k|}
lj_parse.c:expr_next:
 2142|  29.9k|{
 2143|  29.9k|  ExpDesc e;
 2144|  29.9k|  expr(ls, &e);
 2145|  29.9k|  expr_tonextreg(ls->fs, &e);
 2146|  29.9k|}
lj_parse.c:parse_for_iter:
 2558|  4.58k|{
 2559|  4.58k|  FuncState *fs = ls->fs;
 2560|  4.58k|  ExpDesc e;
 2561|  4.58k|  BCReg nvars = 0;
 2562|  4.58k|  BCLine line;
 2563|  4.58k|  BCReg base = fs->freereg + 3;
 2564|  4.58k|  BCPos loop, loopend, exprpc = fs->pc;
 2565|  4.58k|  FuncScope bl;
 2566|  4.58k|  int isnext;
 2567|       |  /* Hidden control variables. */
 2568|  4.58k|  var_new_fixed(ls, nvars++, VARNAME_FOR_GEN);
  ------------------
  |  | 1076|  4.58k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2569|  4.58k|  var_new_fixed(ls, nvars++, VARNAME_FOR_STATE);
  ------------------
  |  | 1076|  4.58k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2570|  4.58k|  var_new_fixed(ls, nvars++, VARNAME_FOR_CTL);
  ------------------
  |  | 1076|  4.58k|  var_new(ls, (n), (GCstr *)(uintptr_t)(vn))
  ------------------
 2571|       |  /* Visible variables returned from iterator. */
 2572|  4.58k|  var_new(ls, nvars++, indexname);
 2573|  6.68k|  while (lex_opt(ls, ','))
  ------------------
  |  Branch (2573:10): [True: 2.09k, False: 4.58k]
  ------------------
 2574|  2.09k|    var_new(ls, nvars++, lex_str(ls));
 2575|  4.58k|  lex_check(ls, TK_in);
 2576|  4.58k|  line = ls->linenumber;
 2577|  4.58k|  assign_adjust(ls, 3, expr_list(ls, &e), &e);
 2578|       |  /* The iterator needs another 3 [4] slots (func [pc] | state ctl). */
 2579|  4.58k|  bcreg_bump(fs, 3+ls->fr2);
 2580|  4.58k|  isnext = (nvars <= 5 && fs->pc > exprpc && predict_next(ls, fs, exprpc));
  ------------------
  |  Branch (2580:13): [True: 4.48k, False: 95]
  |  Branch (2580:27): [True: 4.48k, False: 0]
  |  Branch (2580:46): [True: 2.45k, False: 2.02k]
  ------------------
 2581|  4.58k|  var_add(ls, 3);  /* Hidden control variables. */
 2582|  4.58k|  lex_check(ls, TK_do);
 2583|  4.58k|  loop = bcemit_AJ(fs, isnext ? BC_ISNEXT : BC_JMP, base, NO_JMP);
  ------------------
  |  |  436|  4.58k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  4.58k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  9.16k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (56:13): [True: 2.45k, False: 2.12k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2584|  4.58k|  fscope_begin(fs, &bl, 0);  /* Scope for visible variables. */
 2585|  4.58k|  var_add(ls, nvars-3);
 2586|  4.58k|  bcreg_reserve(fs, nvars-3);
 2587|  4.58k|  parse_block(ls);
 2588|  4.58k|  fscope_end(fs);
 2589|       |  /* Perform loop inversion. Loop control instructions are at the end. */
 2590|  4.58k|  jmp_patchins(fs, loop, fs->pc);
 2591|  4.58k|  bcemit_ABC(fs, isnext ? BC_ITERN : BC_ITERC, base, nvars-3+1, 2+1);
  ------------------
  |  |  434|  4.58k|#define bcemit_ABC(fs, o, a, b, c)	bcemit_INS(fs, BCINS_ABC(o, a, b, c))
  |  |  ------------------
  |  |  |  |   54|  9.16k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(b)<<24)|((BCIns)(c)<<16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (54:13): [True: 2.42k, False: 2.16k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2592|  4.58k|  loopend = bcemit_AJ(fs, BC_ITERL, base, NO_JMP);
  ------------------
  |  |  436|  4.58k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  4.58k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  4.58k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2593|  4.58k|  fs->bcbase[loopend-1].line = line;  /* Fix line for control ins. */
 2594|  4.58k|  fs->bcbase[loopend].line = line;
 2595|  4.58k|  jmp_patchins(fs, loopend, loop+1);
 2596|  4.58k|}
lj_parse.c:assign_adjust:
 2193|  46.3k|{
 2194|  46.3k|  FuncState *fs = ls->fs;
 2195|  46.3k|  int32_t extra = (int32_t)nvars - (int32_t)nexps;
 2196|  46.3k|  if (e->k == VCALL) {
  ------------------
  |  Branch (2196:7): [True: 16.3k, False: 30.0k]
  ------------------
 2197|  16.3k|    extra++;  /* Compensate for the VCALL itself. */
 2198|  16.3k|    if (extra < 0) extra = 0;
  ------------------
  |  Branch (2198:9): [True: 42, False: 16.2k]
  ------------------
 2199|  16.3k|    setbc_b(bcptr(fs, e), extra+1);  /* Fixup call results. */
  ------------------
  |  |   46|  16.3k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|  16.3k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  16.3k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2200|  16.3k|    if (extra > 1) bcreg_reserve(fs, (BCReg)extra-1);
  ------------------
  |  Branch (2200:9): [True: 6.97k, False: 9.33k]
  ------------------
 2201|  30.0k|  } else {
 2202|  30.0k|    if (e->k != VVOID)
  ------------------
  |  Branch (2202:9): [True: 24.3k, False: 5.68k]
  ------------------
 2203|  24.3k|      expr_tonextreg(fs, e);  /* Close last expression. */
 2204|  30.0k|    if (extra > 0) {  /* Leftover LHS are set to nil. */
  ------------------
  |  Branch (2204:9): [True: 6.36k, False: 23.6k]
  ------------------
 2205|  6.36k|      BCReg reg = fs->freereg;
 2206|  6.36k|      bcreg_reserve(fs, (BCReg)extra);
 2207|  6.36k|      bcemit_nil(fs, reg, (BCReg)extra);
 2208|  6.36k|    }
 2209|  30.0k|  }
 2210|  46.3k|  if (nexps > nvars)
  ------------------
  |  Branch (2210:7): [True: 2.33k, False: 43.9k]
  ------------------
 2211|  2.33k|    ls->fs->freereg -= nexps - nvars;  /* Drop leftover regs. */
 2212|  46.3k|}
lj_parse.c:predict_next:
 2528|  4.48k|{
 2529|  4.48k|  BCIns ins = fs->bcbase[pc].ins;
 2530|  4.48k|  GCstr *name;
 2531|  4.48k|  cTValue *o;
 2532|  4.48k|  switch (bc_op(ins)) {
  ------------------
  |  |   34|  4.48k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 2533|     16|  case BC_MOV:
  ------------------
  |  Branch (2533:3): [True: 16, False: 4.47k]
  ------------------
 2534|     16|    if (bc_d(ins) >= fs->nactvar) return 0;
  ------------------
  |  |   38|     16|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2534:9): [True: 0, False: 16]
  ------------------
 2535|     16|    name = gco2str(gcref(var_get(ls, fs, bc_d(ins)).name));
  ------------------
  |  |  765|     16|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|     16|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     16|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     16|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 16, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     16|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2536|      0|    break;
 2537|     51|  case BC_UGET:
  ------------------
  |  Branch (2537:3): [True: 51, False: 4.43k]
  ------------------
 2538|     51|    name = gco2str(gcref(ls->vstack[fs->uvmap[bc_d(ins)]].name));
  ------------------
  |  |  765|     51|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|     51|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     51|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     51|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 51, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     51|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2539|      0|    break;
 2540|  4.41k|  case BC_GGET:
  ------------------
  |  Branch (2540:3): [True: 4.41k, False: 68]
  ------------------
 2541|       |    /* There's no inverse index (yet), so lookup the strings. */
 2542|  4.41k|    o = lj_tab_getstr(fs->kt, lj_str_newlit(ls->L, "pairs"));
  ------------------
  |  |   28|  4.41k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
 2543|  4.41k|    if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  201|  6.90k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 2.48k, False: 5]
  |  |  ------------------
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  202|  2.48k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |   38|  2.48k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2543:9): [True: 2.48k, False: 1.93k]
  |  Branch (2543:31): [True: 2.44k, False: 35]
  ------------------
 2544|  2.44k|      return 1;
 2545|  1.97k|    o = lj_tab_getstr(fs->kt, lj_str_newlit(ls->L, "next"));
  ------------------
  |  |   28|  1.97k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
 2546|  1.97k|    if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  201|  2.00k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 33, False: 3]
  |  |  ------------------
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |  202|     33|#define tvkslot(o)	((o)->u32.lo)
  ------------------
                  if (o && tvhaskslot(o) && tvkslot(o) == bc_d(ins))
  ------------------
  |  |   38|     33|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2546:9): [True: 36, False: 1.93k]
  |  Branch (2546:31): [True: 5, False: 28]
  ------------------
 2547|      5|      return 1;
 2548|  1.96k|    return 0;
 2549|      1|  default:
  ------------------
  |  Branch (2549:3): [True: 1, False: 4.48k]
  ------------------
 2550|      1|    return 0;
 2551|  4.48k|  }
 2552|     67|  return (name->len == 5 && !strcmp(strdata(name), "pairs")) ||
  ------------------
  |  |  316|      1|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (2552:11): [True: 1, False: 66]
  |  Branch (2552:29): [True: 1, False: 0]
  ------------------
 2553|     67|	 (name->len == 4 && !strcmp(strdata(name), "next"));
  ------------------
  |  |  316|      4|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (2553:4): [True: 4, False: 62]
  |  Branch (2553:22): [True: 4, False: 0]
  ------------------
 2554|  4.48k|}
lj_parse.c:parse_repeat:
 2460|    780|{
 2461|    780|  FuncState *fs = ls->fs;
 2462|    780|  BCPos loop = fs->lasttarget = fs->pc;
 2463|    780|  BCPos condexit;
 2464|    780|  FuncScope bl1, bl2;
 2465|    780|  fscope_begin(fs, &bl1, FSCOPE_LOOP);  /* Breakable loop scope. */
  ------------------
  |  |  105|    780|#define FSCOPE_LOOP		0x01	/* Scope is a (breakable) loop. */
  ------------------
 2466|    780|  fscope_begin(fs, &bl2, 0);  /* Inner scope. */
 2467|    780|  lj_lex_next(ls);  /* Skip 'repeat'. */
 2468|    780|  bcemit_AD(fs, BC_LOOP, fs->nactvar, 0);
  ------------------
  |  |  435|    780|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|    780|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2469|    780|  parse_chunk(ls);
 2470|    780|  lex_match(ls, TK_until, TK_repeat, line);
 2471|    780|  condexit = expr_cond(ls);  /* Parse condition (still inside inner scope). */
 2472|    780|  if (!(bl2.flags & FSCOPE_UPVAL)) {  /* No upvalues? Just end inner scope. */
  ------------------
  |  |  108|    780|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (2472:7): [True: 706, False: 74]
  ------------------
 2473|    706|    fscope_end(fs);
 2474|    706|  } else {  /* Otherwise generate: cond: UCLO+JMP out, !cond: UCLO+JMP loop. */
 2475|     74|    parse_break(ls);  /* Break from loop and close upvalues. */
 2476|     74|    jmp_tohere(fs, condexit);
 2477|     74|    fscope_end(fs);  /* End inner scope and close upvalues. */
 2478|     74|    condexit = bcemit_jmp(fs);
 2479|     74|  }
 2480|    780|  jmp_patch(fs, condexit, loop);  /* Jump backwards if !cond. */
 2481|    780|  jmp_patchins(fs, loop, fs->pc);
 2482|    780|  fscope_end(fs);  /* End loop scope. */
 2483|    780|}
lj_parse.c:parse_func:
 2301|  1.11M|{
 2302|  1.11M|  FuncState *fs;
 2303|  1.11M|  ExpDesc v, b;
 2304|  1.11M|  int needself = 0;
 2305|  1.11M|  lj_lex_next(ls);  /* Skip 'function'. */
 2306|       |  /* Parse function name. */
 2307|  1.11M|  var_lookup(ls, &v);
  ------------------
  |  | 1157|  1.11M|  var_lookup_((ls)->fs, lex_str(ls), (e), 1)
  ------------------
 2308|  1.11M|  while (ls->tok == '.')  /* Multiple dot-separated fields. */
  ------------------
  |  Branch (2308:10): [True: 389, False: 1.11M]
  ------------------
 2309|    389|    expr_field(ls, &v);
 2310|  1.11M|  if (ls->tok == ':') {  /* Optional colon to signify method call. */
  ------------------
  |  Branch (2310:7): [True: 750, False: 1.11M]
  ------------------
 2311|    750|    needself = 1;
 2312|    750|    expr_field(ls, &v);
 2313|    750|  }
 2314|  1.11M|  parse_body(ls, &b, needself, line);
 2315|  1.11M|  fs = ls->fs;
 2316|  1.11M|  bcemit_store(fs, &v, &b);
 2317|  1.11M|  fs->bcbase[fs->pc - 1].line = line;  /* Set line for the store. */
 2318|  1.11M|}
lj_parse.c:parse_local:
 2267|  54.3k|{
 2268|  54.3k|  if (lex_opt(ls, TK_function)) {  /* Local function declaration. */
  ------------------
  |  Branch (2268:7): [True: 4.68k, False: 49.6k]
  ------------------
 2269|  4.68k|    ExpDesc v, b;
 2270|  4.68k|    FuncState *fs = ls->fs;
 2271|  4.68k|    var_new(ls, 0, lex_str(ls));
 2272|  4.68k|    expr_init(&v, VLOCAL, fs->freereg);
 2273|  4.68k|    v.u.s.aux = fs->varmap[fs->freereg];
 2274|  4.68k|    bcreg_reserve(fs, 1);
 2275|  4.68k|    var_add(ls, 1);
 2276|  4.68k|    parse_body(ls, &b, 0, ls->linenumber);
 2277|       |    /* bcemit_store(fs, &v, &b) without setting VSTACK_VAR_RW. */
 2278|  4.68k|    expr_free(fs, &b);
 2279|  4.68k|    expr_toreg(fs, &b, v.u.s.info);
 2280|       |    /* The upvalue is in scope, but the local is only valid after the store. */
 2281|  4.68k|    var_get(ls, fs, fs->nactvar - 1).startpc = fs->pc;
  ------------------
  |  | 1050|  4.68k|#define var_get(ls, fs, i)	((ls)->vstack[(fs)->varmap[(i)]])
  ------------------
 2282|  49.6k|  } else {  /* Local variable declaration. */
 2283|  49.6k|    ExpDesc e;
 2284|  49.6k|    BCReg nexps, nvars = 0;
 2285|  67.6k|    do {  /* Collect LHS. */
 2286|  67.6k|      var_new(ls, nvars++, lex_str(ls));
 2287|  67.6k|    } while (lex_opt(ls, ','));
  ------------------
  |  Branch (2287:14): [True: 17.9k, False: 49.6k]
  ------------------
 2288|  49.6k|    if (lex_opt(ls, '=')) {  /* Optional RHS. */
  ------------------
  |  Branch (2288:9): [True: 42.5k, False: 7.08k]
  ------------------
 2289|  42.5k|      nexps = expr_list(ls, &e);
 2290|  42.5k|    } else {  /* Or implicitly set to nil. */
 2291|  7.08k|      e.k = VVOID;
 2292|  7.08k|      nexps = 0;
 2293|  7.08k|    }
 2294|  49.6k|    assign_adjust(ls, nvars, nexps, &e);
 2295|  49.6k|    var_add(ls, nvars);
 2296|  49.6k|  }
 2297|  54.3k|}
lj_parse.c:parse_return:
 2335|  1.51M|{
 2336|  1.51M|  BCIns ins;
 2337|  1.51M|  FuncState *fs = ls->fs;
 2338|  1.51M|  lj_lex_next(ls);  /* Skip 'return'. */
 2339|  1.51M|  fs->flags |= PROTO_HAS_RETURN;
  ------------------
  |  |  405|  1.51M|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
 2340|  1.51M|  if (parse_isend(ls->tok) || ls->tok == ';') {  /* Bare return. */
  ------------------
  |  Branch (2340:7): [True: 17.8k, False: 1.49M]
  |  Branch (2340:31): [True: 66, False: 1.49M]
  ------------------
 2341|  17.8k|    ins = BCINS_AD(BC_RET0, 0, 1);
  ------------------
  |  |   56|  17.8k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2342|  1.49M|  } else {  /* Return with one or more values. */
 2343|  1.49M|    ExpDesc e;  /* Receives the _last_ expression in the list. */
 2344|  1.49M|    BCReg nret = expr_list(ls, &e);
 2345|  1.49M|    if (nret == 1) {  /* Return one result. */
  ------------------
  |  Branch (2345:9): [True: 959k, False: 538k]
  ------------------
 2346|   959k|      if (e.k == VCALL) {  /* Check for tail call. */
  ------------------
  |  Branch (2346:11): [True: 1.93k, False: 957k]
  ------------------
 2347|       |#ifdef LUAJIT_DISABLE_TAILCALL
 2348|       |	goto notailcall;
 2349|       |#else
 2350|  1.93k|	BCIns *ip = bcptr(fs, &e);
  ------------------
  |  |  438|  1.93k|#define bcptr(fs, e)			(&(fs)->bcbase[(e)->u.s.info].ins)
  ------------------
 2351|       |	/* It doesn't pay off to add BC_VARGT just for 'return ...'. */
 2352|  1.93k|	if (bc_op(*ip) == BC_VARG) goto notailcall;
  ------------------
  |  |   34|  1.93k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2352:6): [True: 239, False: 1.69k]
  ------------------
 2353|  1.69k|	fs->pc--;
 2354|  1.69k|	ins = BCINS_AD(bc_op(*ip)-BC_CALL+BC_CALLT, bc_a(*ip), bc_c(*ip));
  ------------------
  |  |   56|  1.69k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2355|  1.69k|#endif
 2356|   957k|      } else {  /* Can return the result from any register. */
 2357|   957k|	ins = BCINS_AD(BC_RET1, expr_toanyreg(fs, &e), 2);
  ------------------
  |  |   56|   957k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2358|   957k|      }
 2359|   959k|    } else {
 2360|   538k|      if (e.k == VCALL) {  /* Append all results from a call. */
  ------------------
  |  Branch (2360:11): [True: 202, False: 538k]
  ------------------
 2361|    441|      notailcall:
 2362|    441|	setbc_b(bcptr(fs, &e), 0);
  ------------------
  |  |   46|    441|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|    441|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    441|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2363|    441|	ins = BCINS_AD(BC_RETM, fs->nactvar, e.u.s.aux - fs->nactvar);
  ------------------
  |  |   56|    441|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2364|   538k|      } else {
 2365|   538k|	expr_tonextreg(fs, &e);  /* Force contiguous registers. */
 2366|   538k|	ins = BCINS_AD(BC_RET, fs->nactvar, nret+1);
  ------------------
  |  |   56|   538k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2367|   538k|      }
 2368|   538k|    }
 2369|  1.49M|  }
 2370|  1.51M|  if (fs->flags & PROTO_CHILD)
  ------------------
  |  |  399|  1.51M|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
  |  Branch (2370:7): [True: 668, False: 1.51M]
  ------------------
 2371|    668|    bcemit_AJ(fs, BC_UCLO, 0, 0);  /* May need to close upvalues first. */
  ------------------
  |  |  436|    668|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|    668|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|    668|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2372|  1.51M|  bcemit_INS(fs, ins);
 2373|  1.51M|}
lj_parse.c:parse_break:
 2377|    632|{
 2378|    632|  ls->fs->bl->flags |= FSCOPE_BREAK;
  ------------------
  |  |  106|    632|#define FSCOPE_BREAK		0x02	/* Break used in scope. */
  ------------------
 2379|    632|  gola_new(ls, NAME_BREAK, VSTACK_GOTO, bcemit_jmp(ls->fs));
  ------------------
  |  |  111|    632|#define NAME_BREAK		((GCstr *)(uintptr_t)1)
  ------------------
                gola_new(ls, NAME_BREAK, VSTACK_GOTO, bcemit_jmp(ls->fs));
  ------------------
  |  |  119|    632|#define VSTACK_GOTO		0x02	/* Pending goto. */
  ------------------
 2380|    632|}
lj_parse.c:parse_label:
 2396|  1.27k|{
 2397|  1.27k|  FuncState *fs = ls->fs;
 2398|  1.27k|  GCstr *name;
 2399|  1.27k|  MSize idx;
 2400|  1.27k|  fs->lasttarget = fs->pc;
 2401|  1.27k|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|  1.27k|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2402|  1.27k|  lj_lex_next(ls);  /* Skip '::'. */
 2403|  1.27k|  name = lex_str(ls);
 2404|  1.27k|  if (gola_findlabel(ls, name))
  ------------------
  |  Branch (2404:7): [True: 22, False: 1.25k]
  ------------------
 2405|     22|    lj_lex_error(ls, 0, LJ_ERR_XLDUP, strdata(name));
  ------------------
  |  |  316|     22|#define strdata(s)	((const char *)((s)+1))
  ------------------
 2406|  1.25k|  idx = gola_new(ls, name, VSTACK_LABEL, fs->pc);
  ------------------
  |  |  120|  1.25k|#define VSTACK_LABEL		0x04	/* Label. */
  ------------------
 2407|  1.25k|  lex_check(ls, TK_label);
 2408|       |  /* Recursively parse trailing statements: labels and ';' (Lua 5.2 only). */
 2409|  1.44k|  for (;;) {
 2410|  1.44k|    if (ls->tok == TK_label) {
  ------------------
  |  Branch (2410:9): [True: 318, False: 1.12k]
  ------------------
 2411|    318|      synlevel_begin(ls);
 2412|    318|      parse_label(ls);
 2413|    318|      synlevel_end(ls);
  ------------------
  |  | 2052|    318|#define synlevel_end(ls)	((ls)->level--)
  ------------------
 2414|  1.12k|    } else if (LJ_52 && ls->tok == ';') {
  ------------------
  |  |  697|  2.24k|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2414:25): [True: 0, False: 0]
  ------------------
 2415|      0|      lj_lex_next(ls);
 2416|  1.12k|    } else {
 2417|  1.12k|      break;
 2418|  1.12k|    }
 2419|  1.44k|  }
 2420|       |  /* Trailing label is considered to be outside of scope. */
 2421|  1.25k|  if (parse_isend(ls->tok) && ls->tok != TK_until)
  ------------------
  |  Branch (2421:7): [True: 540, False: 715]
  |  Branch (2421:31): [True: 531, False: 9]
  ------------------
 2422|    531|    ls->vstack[idx].slot = fs->bl->nactvar;
 2423|  1.25k|  gola_resolve(ls, fs->bl, idx);
 2424|  1.25k|}
lj_parse.c:gola_findlabel:
 1270|  2.09k|{
 1271|  2.09k|  VarInfo *v = ls->vstack + ls->fs->bl->vstart;
 1272|  2.09k|  VarInfo *ve = ls->vstack + ls->vtop;
 1273|  5.73k|  for (; v < ve; v++)
  ------------------
  |  Branch (1273:10): [True: 3.72k, False: 2.00k]
  ------------------
 1274|  3.72k|    if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  |  315|  3.72k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  3.72k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
                  if (strref(v->name) == name && gola_islabel(v))
  ------------------
  |  | 1183|    874|#define gola_islabel(v)		((v)->info & VSTACK_LABEL)
  |  |  ------------------
  |  |  |  |  120|    874|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  |  |  |  Branch (1183:26): [True: 85, False: 789]
  |  |  ------------------
  ------------------
  |  Branch (1274:9): [True: 874, False: 2.84k]
  ------------------
 1275|     85|      return v;
 1276|  2.00k|  return NULL;
 1277|  2.09k|}
lj_parse.c:parse_goto:
 2384|    837|{
 2385|    837|  FuncState *fs = ls->fs;
 2386|    837|  GCstr *name = lex_str(ls);
 2387|    837|  VarInfo *vl = gola_findlabel(ls, name);
 2388|    837|  if (vl)  /* Treat backwards goto within same scope like a loop. */
  ------------------
  |  Branch (2388:7): [True: 63, False: 774]
  ------------------
 2389|     63|    bcemit_AJ(fs, BC_LOOP, vl->slot, -1);  /* No BC range check. */
  ------------------
  |  |  436|     63|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|     63|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|     63|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|    837|  fs->bl->flags |= FSCOPE_GOLA;
  ------------------
  |  |  107|    837|#define FSCOPE_GOLA		0x04	/* Goto or label used in scope. */
  ------------------
 2391|    837|  gola_new(ls, name, VSTACK_GOTO, bcemit_jmp(fs));
  ------------------
  |  |  119|    837|#define VSTACK_GOTO		0x02	/* Pending goto. */
  ------------------
 2392|    837|}
lj_parse.c:parse_call_assign:
 2253|  2.36M|{
 2254|  2.36M|  FuncState *fs = ls->fs;
 2255|  2.36M|  LHSVarList vl;
 2256|  2.36M|  expr_primary(ls, &vl.v);
 2257|  2.36M|  if (vl.v.k == VCALL) {  /* Function call statement. */
  ------------------
  |  Branch (2257:7): [True: 342k, False: 2.01M]
  ------------------
 2258|   342k|    setbc_b(bcptr(fs, &vl.v), 1);  /* No results. */
  ------------------
  |  |   46|   342k|#define setbc_b(p, x)	setbc_byte(p, (x), 3)
  |  |  ------------------
  |  |  |  |   43|   342k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|   342k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2259|  2.01M|  } else {  /* Start of an assignment. */
 2260|  2.01M|    vl.prev = NULL;
 2261|  2.01M|    parse_assignment(ls, &vl, 1);
 2262|  2.01M|  }
 2263|  2.36M|}
lj_parse.c:parse_assignment:
 2216|  1.33M|{
 2217|  1.33M|  ExpDesc e;
 2218|  1.33M|  checkcond(ls, VLOCAL <= lh->v.k && lh->v.k <= VINDEXED, LJ_ERR_XSYNTAX);
  ------------------
  |  |  194|  2.67M|#define checkcond(ls, c, em)		{ if (!(c)) err_syntax(ls, em); }
  |  |  ------------------
  |  |  |  Branch (194:39): [True: 1.33M, False: 1.98k]
  |  |  |  Branch (194:39): [True: 1.29M, False: 42.8k]
  |  |  ------------------
  ------------------
 2219|  1.29M|  if (lex_opt(ls, ',')) {  /* Collect LHS list and recurse upwards. */
  ------------------
  |  Branch (2219:7): [True: 25.9k, False: 1.26M]
  ------------------
 2220|  25.9k|    LHSVarList vl;
 2221|  25.9k|    vl.prev = lh;
 2222|  25.9k|    expr_primary(ls, &vl.v);
 2223|  25.9k|    if (vl.v.k == VLOCAL)
  ------------------
  |  Branch (2223:9): [True: 2.38k, False: 23.5k]
  ------------------
 2224|  2.38k|      assign_hazard(ls, lh, &vl.v);
 2225|  25.9k|    checklimit(ls->fs, ls->level + nvars, LJ_MAX_XLEVEL, "variable names");
  ------------------
  |  |  192|  25.9k|#define checklimit(fs, v, l, m)		if ((v) >= (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (192:38): [True: 0, False: 25.9k]
  |  |  ------------------
  ------------------
 2226|  25.9k|    parse_assignment(ls, &vl, nvars+1);
 2227|  1.26M|  } else {  /* Parse RHS. */
 2228|  1.26M|    BCReg nexps;
 2229|  1.26M|    lex_check(ls, '=');
 2230|  1.26M|    nexps = expr_list(ls, &e);
 2231|  1.26M|    if (nexps == nvars) {
  ------------------
  |  Branch (2231:9): [True: 516k, False: 752k]
  ------------------
 2232|   516k|      if (e.k == VCALL) {
  ------------------
  |  Branch (2232:11): [True: 279k, False: 236k]
  ------------------
 2233|   279k|	if (bc_op(*bcptr(ls->fs, &e)) == BC_VARG) {  /* Vararg assignment. */
  ------------------
  |  |   34|   279k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2233:6): [True: 29, False: 279k]
  ------------------
 2234|     29|	  ls->fs->freereg--;
 2235|     29|	  e.k = VRELOCABLE;
 2236|   279k|	} else {  /* Multiple call results. */
 2237|   279k|	  e.u.s.info = e.u.s.aux;  /* Base of call is not relocatable. */
 2238|   279k|	  e.k = VNONRELOC;
 2239|   279k|	}
 2240|   279k|      }
 2241|   516k|      bcemit_store(ls->fs, &lh->v, &e);
 2242|   516k|      return;
 2243|   516k|    }
 2244|   752k|    assign_adjust(ls, nvars, nexps, &e);
 2245|   752k|  }
 2246|       |  /* Assign RHS to LHS and recurse downwards. */
 2247|   778k|  expr_init(&e, VNONRELOC, ls->fs->freereg-1);
 2248|   778k|  bcemit_store(ls->fs, &lh->v, &e);
 2249|   778k|}
lj_parse.c:assign_hazard:
 2168|  2.38k|{
 2169|  2.38k|  FuncState *fs = ls->fs;
 2170|  2.38k|  BCReg reg = v->u.s.info;  /* Check against this variable. */
 2171|  2.38k|  BCReg tmp = fs->freereg;  /* Rename to this temp. register (if needed). */
 2172|  2.38k|  int hazard = 0;
 2173|  10.9k|  for (; lh; lh = lh->prev) {
  ------------------
  |  Branch (2173:10): [True: 8.57k, False: 2.38k]
  ------------------
 2174|  8.57k|    if (lh->v.k == VINDEXED) {
  ------------------
  |  Branch (2174:9): [True: 82, False: 8.49k]
  ------------------
 2175|     82|      if (lh->v.u.s.info == reg) {  /* t[i], t = 1, 2 */
  ------------------
  |  Branch (2175:11): [True: 30, False: 52]
  ------------------
 2176|     30|	hazard = 1;
 2177|     30|	lh->v.u.s.info = tmp;
 2178|     30|      }
 2179|     82|      if (lh->v.u.s.aux == reg) {  /* t[i], i = 1, 2 */
  ------------------
  |  Branch (2179:11): [True: 9, False: 73]
  ------------------
 2180|      9|	hazard = 1;
 2181|      9|	lh->v.u.s.aux = tmp;
 2182|      9|      }
 2183|     82|    }
 2184|  8.57k|  }
 2185|  2.38k|  if (hazard) {
  ------------------
  |  Branch (2185:7): [True: 27, False: 2.35k]
  ------------------
 2186|     27|    bcemit_AD(fs, BC_MOV, tmp, reg);  /* Rename conflicting variable. */
  ------------------
  |  |  435|     27|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|     27|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 2187|     27|    bcreg_reserve(fs, 1);
 2188|     27|  }
 2189|  2.38k|}
lj_parse.c:lex_opt:
 1007|   203M|{
 1008|   203M|  if (ls->tok == tok) {
  ------------------
  |  Branch (1008:7): [True: 195M, False: 7.61M]
  ------------------
 1009|   195M|    lj_lex_next(ls);
 1010|   195M|    return 1;
 1011|   195M|  }
 1012|  7.61M|  return 0;
 1013|   203M|}
lj_parse.c:err_token:
  180|   921k|{
  181|   921k|  lj_lex_error(ls, ls->tok, LJ_ERR_XTOKEN, lj_lex_token2str(ls, tok));
  182|   921k|}
lj_parse.c:fs_finish:
 1577|  1.90M|{
 1578|  1.90M|  lua_State *L = ls->L;
 1579|  1.90M|  FuncState *fs = ls->fs;
 1580|  1.90M|  BCLine numline = line - fs->linedefined;
 1581|  1.90M|  size_t sizept, ofsk, ofsuv, ofsli, ofsdbg, ofsvar;
 1582|  1.90M|  GCproto *pt;
 1583|       |
 1584|       |  /* Apply final fixups. */
 1585|  1.90M|  fs_fixup_ret(fs);
 1586|       |
 1587|       |  /* Calculate total size of prototype including all colocated arrays. */
 1588|  1.90M|  sizept = sizeof(GCproto) + fs->pc*sizeof(BCIns) + fs->nkgc*sizeof(GCRef);
 1589|  1.90M|  sizept = (sizept + sizeof(TValue)-1) & ~(sizeof(TValue)-1);
 1590|  1.90M|  ofsk = sizept; sizept += fs->nkn*sizeof(TValue);
 1591|  1.90M|  ofsuv = sizept; sizept += ((fs->nuv+1)&~1)*2;
 1592|  1.90M|  ofsli = sizept; sizept += fs_prep_line(fs, numline);
 1593|  1.90M|  ofsdbg = sizept; sizept += fs_prep_var(ls, fs, &ofsvar);
 1594|       |
 1595|       |  /* Allocate prototype and initialize its fields. */
 1596|  1.90M|  pt = (GCproto *)lj_mem_newgco(L, (MSize)sizept);
 1597|  1.90M|  pt->gct = ~LJ_TPROTO;
  ------------------
  |  |  267|  1.90M|#define LJ_TPROTO		(~7u)
  ------------------
 1598|  1.90M|  pt->sizept = (MSize)sizept;
 1599|  1.90M|  pt->trace = 0;
 1600|  1.90M|  pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  405|  1.90M|#define PROTO_HAS_RETURN	0x20	/* Already emitted a return. */
  ------------------
                pt->flags = (uint8_t)(fs->flags & ~(PROTO_HAS_RETURN|PROTO_FIXUP_RETURN));
  ------------------
  |  |  406|  1.90M|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
 1601|  1.90M|  pt->numparams = fs->numparams;
 1602|  1.90M|  pt->framesize = fs->framesize;
 1603|  1.90M|  setgcref(pt->chunkname, obj2gco(ls->chunkname));
  ------------------
  |  |   72|  1.90M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1604|       |
 1605|       |  /* Close potentially uninitialized gap between bc and kgc. */
 1606|  1.90M|  *(uint32_t *)((char *)pt + ofsk - sizeof(GCRef)*(fs->nkgc+1)) = 0;
 1607|  1.90M|  fs_fixup_bc(fs, pt, (BCIns *)((char *)pt + sizeof(GCproto)), fs->pc);
 1608|  1.90M|  fs_fixup_k(fs, pt, (void *)((char *)pt + ofsk));
 1609|  1.90M|  fs_fixup_uv1(fs, pt, (uint16_t *)((char *)pt + ofsuv));
 1610|  1.90M|  fs_fixup_line(fs, pt, (void *)((char *)pt + ofsli), numline);
 1611|  1.90M|  fs_fixup_var(ls, pt, (uint8_t *)((char *)pt + ofsdbg), ofsvar);
 1612|       |
 1613|  1.90M|  lj_vmevent_send(L, BC,
  ------------------
  |  |   39|  1.90M|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  1.90M|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.90M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  1.90M|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 1.90M]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
 1614|  1.90M|    setprotoV(L, L->top++, pt);
 1615|  1.90M|  );
 1616|       |
 1617|  1.90M|  L->top--;  /* Pop table of constants. */
 1618|  1.90M|  ls->vtop = fs->vbase;  /* Reset variable stack. */
 1619|  1.90M|  ls->fs = fs->prev;
 1620|  1.90M|  lj_assertL(ls->fs != NULL || ls->tok == TK_eof, "bad parser state");
  ------------------
  |  |  365|  1.90M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.89M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 917k, False: 989k]
  |  |  |  |  |  Branch (355:5): [True: 989k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.90M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
 1621|  1.90M|  return pt;
 1622|  1.90M|}
lj_parse.c:fs_fixup_ret:
 1539|  1.90M|{
 1540|  1.90M|  BCPos lastpc = fs->pc;
 1541|  1.90M|  if (lastpc <= fs->lasttarget || !bcopisret(bc_op(fs->bcbase[lastpc-1].ins))) {
  ------------------
  |  |   34|  1.90M|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1541:7): [True: 1.93k, False: 1.90M]
  |  Branch (1541:35): [True: 975k, False: 929k]
  ------------------
 1542|   977k|    if ((fs->bl->flags & FSCOPE_UPVAL))
  ------------------
  |  |  108|   977k|#define FSCOPE_UPVAL		0x08	/* Upvalue in scope. */
  ------------------
  |  Branch (1542:9): [True: 1.14k, False: 976k]
  ------------------
 1543|  1.14k|      bcemit_AJ(fs, BC_UCLO, 0, 0);
  ------------------
  |  |  436|  1.14k|#define bcemit_AJ(fs, o, a, j)		bcemit_INS(fs, BCINS_AJ(o, a, j))
  |  |  ------------------
  |  |  |  |   57|  1.14k|#define BCINS_AJ(o, a, j)	BCINS_AD(o, a, (BCPos)((int32_t)(j)+BCBIAS_J))
  |  |  |  |  ------------------
  |  |  |  |  |  |   56|  1.14k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1544|   977k|    bcemit_AD(fs, BC_RET0, 0, 1);  /* Need final return. */
  ------------------
  |  |  435|   977k|#define bcemit_AD(fs, o, a, d)		bcemit_INS(fs, BCINS_AD(o, a, d))
  |  |  ------------------
  |  |  |  |   56|   977k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  |  |  ------------------
  ------------------
 1545|   977k|  }
 1546|  1.90M|  fs->bl->flags |= FSCOPE_NOCLOSE;  /* Handled above. */
  ------------------
  |  |  109|  1.90M|#define FSCOPE_NOCLOSE		0x10	/* Do not close upvalues. */
  ------------------
 1547|  1.90M|  fscope_end(fs);
 1548|  1.90M|  lj_assertFS(fs->bl == NULL, "bad scope nesting");
  ------------------
  |  |  167|  1.90M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  1.90M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.90M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.90M, False: 44]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.90M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1549|       |  /* May need to fixup returns encoded before first function was created. */
 1550|  1.90M|  if (fs->flags & PROTO_FIXUP_RETURN) {
  ------------------
  |  |  406|  1.90M|#define PROTO_FIXUP_RETURN	0x40	/* Need to fixup emitted returns. */
  ------------------
  |  Branch (1550:7): [True: 1.90k, False: 1.90M]
  ------------------
 1551|  1.90k|    BCPos pc;
 1552|  29.4k|    for (pc = 1; pc < lastpc; pc++) {
  ------------------
  |  Branch (1552:18): [True: 29.4k, False: 0]
  ------------------
 1553|  29.4k|      BCIns ins = fs->bcbase[pc].ins;
 1554|  29.4k|      BCPos offset;
 1555|  29.4k|      switch (bc_op(ins)) {
  ------------------
  |  |   34|  29.4k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 1556|      1|      case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1556:7): [True: 0, False: 29.4k]
  |  Branch (1556:23): [True: 1, False: 29.4k]
  ------------------
 1557|  1.56k|      case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1557:7): [True: 36, False: 29.4k]
  |  Branch (1557:21): [True: 0, False: 29.4k]
  |  Branch (1557:34): [True: 340, False: 29.1k]
  |  Branch (1557:48): [True: 1.18k, False: 28.2k]
  ------------------
 1558|  1.56k|	offset = bcemit_INS(fs, ins);  /* Copy original instruction. */
 1559|  1.56k|	fs->bcbase[offset].line = fs->bcbase[pc].line;
 1560|  1.56k|	offset = offset-(pc+1)+BCBIAS_J;
  ------------------
  |  |   29|  1.56k|#define BCBIAS_J	0x8000
  ------------------
 1561|  1.56k|	if (offset > BCMAX_D)
  ------------------
  |  |   28|  1.56k|#define BCMAX_D		0xffff
  ------------------
  |  Branch (1561:6): [True: 0, False: 1.56k]
  ------------------
 1562|      0|	  err_syntax(fs->ls, LJ_ERR_XFIXUP);
 1563|       |	/* Replace with UCLO plus branch. */
 1564|  1.56k|	fs->bcbase[pc].ins = BCINS_AD(BC_UCLO, 0, offset);
  ------------------
  |  |   56|  1.56k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1565|  1.56k|	break;
 1566|  1.90k|      case BC_FNEW:
  ------------------
  |  Branch (1566:7): [True: 1.90k, False: 27.5k]
  ------------------
 1567|  1.90k|	return;  /* We're done. */
 1568|  25.9k|      default:
  ------------------
  |  Branch (1568:7): [True: 25.9k, False: 3.47k]
  ------------------
 1569|  25.9k|	break;
 1570|  29.4k|      }
 1571|  29.4k|    }
 1572|  1.90k|  }
 1573|  1.90M|}
lj_parse.c:bcopisret:
 1527|  1.90M|{
 1528|  1.90M|  switch (op) {
 1529|    987|  case BC_CALLMT: case BC_CALLT:
  ------------------
  |  Branch (1529:3): [True: 120, False: 1.90M]
  |  Branch (1529:19): [True: 867, False: 1.90M]
  ------------------
 1530|   929k|  case BC_RETM: case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (1530:3): [True: 271, False: 1.90M]
  |  Branch (1530:17): [True: 1.86k, False: 1.90M]
  |  Branch (1530:30): [True: 7.73k, False: 1.89M]
  |  Branch (1530:44): [True: 918k, False: 986k]
  ------------------
 1531|   929k|    return 1;
 1532|   975k|  default:
  ------------------
  |  Branch (1532:3): [True: 975k, False: 929k]
  ------------------
 1533|   975k|    return 0;
 1534|  1.90M|  }
 1535|  1.90M|}
lj_parse.c:fs_prep_line:
 1426|  1.90M|{
 1427|  1.90M|  return (fs->pc-1) << (numline < 256 ? 0 : numline < 65536 ? 1 : 2);
  ------------------
  |  Branch (1427:25): [True: 1.90M, False: 296]
  |  Branch (1427:45): [True: 296, False: 0]
  ------------------
 1428|  1.90M|}
lj_parse.c:fs_prep_var:
 1466|  1.90M|{
 1467|  1.90M|  VarInfo *vs =ls->vstack, *ve;
 1468|  1.90M|  MSize i, n;
 1469|  1.90M|  BCPos lastpc;
 1470|  1.90M|  lj_buf_reset(&ls->sb);  /* Copy to temp. string buffer. */
 1471|       |  /* Store upvalue names. */
 1472|  1.91M|  for (i = 0, n = fs->nuv; i < n; i++) {
  ------------------
  |  Branch (1472:28): [True: 8.14k, False: 1.90M]
  ------------------
 1473|  8.14k|    GCstr *s = strref(vs[fs->uvmap[i]].name);
  ------------------
  |  |  315|  8.14k|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  8.14k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1474|  8.14k|    MSize len = s->len+1;
 1475|  8.14k|    char *p = lj_buf_more(&ls->sb, len);
 1476|  8.14k|    p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|  8.14k|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1477|  8.14k|    ls->sb.w = p;
 1478|  8.14k|  }
 1479|  1.90M|  *ofsvar = sbuflen(&ls->sb);
  ------------------
  |  |   36|  1.90M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1480|  1.90M|  lastpc = 0;
 1481|       |  /* Store local variable names and compressed ranges. */
 1482|  2.92M|  for (ve = vs + ls->vtop, vs += fs->vbase; vs < ve; vs++) {
  ------------------
  |  Branch (1482:45): [True: 1.02M, False: 1.90M]
  ------------------
 1483|  1.02M|    if (!gola_isgotolabel(vs)) {
  ------------------
  |  | 1184|  1.02M|#define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  119|  1.02M|#define VSTACK_GOTO		0x02	/* Pending goto. */
  |  |  ------------------
  |  |               #define gola_isgotolabel(v)	((v)->info & (VSTACK_GOTO|VSTACK_LABEL))
  |  |  ------------------
  |  |  |  |  120|  1.02M|#define VSTACK_LABEL		0x04	/* Label. */
  |  |  ------------------
  ------------------
  |  Branch (1483:9): [True: 1.02M, False: 651]
  ------------------
 1484|  1.02M|      GCstr *s = strref(vs->name);
  ------------------
  |  |  315|  1.02M|#define strref(r)	(&gcref((r))->str)
  |  |  ------------------
  |  |  |  |   67|  1.02M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 1485|  1.02M|      BCPos startpc;
 1486|  1.02M|      char *p;
 1487|  1.02M|      if ((uintptr_t)s < VARNAME__MAX) {
  ------------------
  |  Branch (1487:11): [True: 45.0k, False: 977k]
  ------------------
 1488|  45.0k|	p = lj_buf_more(&ls->sb, 1 + 2*5);
 1489|  45.0k|	*p++ = (char)(uintptr_t)s;
 1490|   977k|      } else {
 1491|   977k|	MSize len = s->len+1;
 1492|   977k|	p = lj_buf_more(&ls->sb, len + 2*5);
 1493|   977k|	p = lj_buf_wmem(p, strdata(s), len);
  ------------------
  |  |  316|   977k|#define strdata(s)	((const char *)((s)+1))
  ------------------
 1494|   977k|      }
 1495|  1.02M|      startpc = vs->startpc;
 1496|  1.02M|      p = lj_strfmt_wuleb128(p, startpc-lastpc);
 1497|  1.02M|      p = lj_strfmt_wuleb128(p, vs->endpc-startpc);
 1498|  1.02M|      ls->sb.w = p;
 1499|  1.02M|      lastpc = startpc;
 1500|  1.02M|    }
 1501|  1.02M|  }
 1502|  1.90M|  lj_buf_putb(&ls->sb, '\0');  /* Terminator for varinfo. */
 1503|  1.90M|  return sbuflen(&ls->sb);
  ------------------
  |  |   36|  1.90M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1504|  1.90M|}
lj_parse.c:fs_fixup_bc:
 1332|  1.90M|{
 1333|  1.90M|  BCInsLine *base = fs->bcbase;
 1334|  1.90M|  MSize i;
 1335|  1.90M|  BCIns op;
 1336|  1.90M|  pt->sizebc = n;
 1337|  1.90M|  if (fs->ls->fr2 != LJ_FR2) op = BC_NOT;  /* Mark non-native prototype. */
  ------------------
  |  |  569|  1.90M|#define LJ_FR2			1
  ------------------
  |  Branch (1337:7): [True: 0, False: 1.90M]
  ------------------
 1338|  1.90M|  else if ((fs->flags & PROTO_VARARG)) op = BC_FUNCV;
  ------------------
  |  |  400|  1.90M|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (1338:12): [True: 991k, False: 915k]
  ------------------
 1339|   915k|  else op = BC_FUNCF;
 1340|  1.90M|  bc[0] = BCINS_AD(op, fs->framesize, 0);
  ------------------
  |  |   56|  1.90M|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 1341|  9.04M|  for (i = 1; i < n; i++)
  ------------------
  |  Branch (1341:15): [True: 7.13M, False: 1.90M]
  ------------------
 1342|  7.13M|    bc[i] = base[i].ins;
 1343|  1.90M|}
lj_parse.c:fs_fixup_k:
 1364|  1.90M|{
 1365|  1.90M|  GCtab *kt;
 1366|  1.90M|  TValue *array;
 1367|  1.90M|  Node *node;
 1368|  1.90M|  MSize i, hmask;
 1369|  1.90M|  checklimitgt(fs, fs->nkn, BCMAX_D+1, "constants");
  ------------------
  |  |  193|  1.90M|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 1370|  1.90M|  checklimitgt(fs, fs->nkgc, BCMAX_D+1, "constants");
  ------------------
  |  |  193|  1.90M|#define checklimitgt(fs, v, l, m)	if ((v) > (l)) err_limit(fs, l, m)
  |  |  ------------------
  |  |  |  Branch (193:39): [True: 0, False: 1.90M]
  |  |  ------------------
  ------------------
 1371|  1.90M|  setmref(pt->k, kptr);
  ------------------
  |  |   39|  1.90M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1372|  1.90M|  pt->sizekn = fs->nkn;
 1373|  1.90M|  pt->sizekgc = fs->nkgc;
 1374|  1.90M|  kt = fs->kt;
 1375|  1.90M|  array = tvref(kt->array);
  ------------------
  |  |  217|  1.90M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.90M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1376|  1.92M|  for (i = 0; i < kt->asize; i++)
  ------------------
  |  Branch (1376:15): [True: 17.4k, False: 1.90M]
  ------------------
 1377|  17.4k|    if (tvhaskslot(&array[i])) {
  ------------------
  |  |  201|  17.4k|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 6.65k, False: 10.7k]
  |  |  ------------------
  ------------------
 1378|  6.65k|      TValue *tv = &((TValue *)kptr)[tvkslot(&array[i])];
  ------------------
  |  |  202|  6.65k|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1379|  6.65k|      if (LJ_DUALNUM)
  ------------------
  |  |  549|  6.65k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1380|      0|	setintV(tv, (int32_t)i);
 1381|  6.65k|      else
 1382|  6.65k|	setnumV(tv, (lua_Number)i);
  ------------------
  |  |  945|  6.65k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
 1383|  6.65k|    }
 1384|  1.90M|  node = noderef(kt->node);
  ------------------
  |  |  515|  1.90M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  1.90M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1385|  1.90M|  hmask = kt->hmask;
 1386|  29.4M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (1386:15): [True: 27.5M, False: 1.90M]
  ------------------
 1387|  27.5M|    Node *n = &node[i];
 1388|  27.5M|    if (tvhaskslot(&n->val)) {
  ------------------
  |  |  201|  27.5M|#define tvhaskslot(o)	((o)->u32.hi == 0)
  |  |  ------------------
  |  |  |  Branch (201:23): [True: 3.48M, False: 24.0M]
  |  |  ------------------
  ------------------
 1389|  3.48M|      ptrdiff_t kidx = (ptrdiff_t)tvkslot(&n->val);
  ------------------
  |  |  202|  3.48M|#define tvkslot(o)	((o)->u32.lo)
  ------------------
 1390|  3.48M|      lj_assertFS(!tvisint(&n->key), "unexpected integer key");
  ------------------
  |  |  167|  3.48M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  3.48M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.48M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.48M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1391|  3.48M|      if (tvisnum(&n->key)) {
  ------------------
  |  |  804|  3.48M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  3.48M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  3.48M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  3.48M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 214k, False: 3.27M]
  |  |  ------------------
  ------------------
 1392|   214k|	TValue *tv = &((TValue *)kptr)[kidx];
 1393|   214k|	if (LJ_DUALNUM) {
  ------------------
  |  |  549|   214k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1394|      0|	  lua_Number nn = numV(&n->key);
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1395|      0|	  int32_t k = lj_num2int(nn);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
 1396|      0|	  lj_assertFS(!tvismzero(&n->key), "unexpected -0 key");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1397|      0|	  if ((lua_Number)k == nn)
  ------------------
  |  Branch (1397:8): [True: 0, False: 0]
  ------------------
 1398|      0|	    setintV(tv, k);
 1399|      0|	  else
 1400|      0|	    *tv = n->key;
 1401|   214k|	} else {
 1402|   214k|	  *tv = n->key;
 1403|   214k|	}
 1404|  3.27M|      } else {
 1405|  3.27M|	GCobj *o = gcV(&n->key);
  ------------------
  |  |  858|  3.27M|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|  3.27M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.27M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.27M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.27M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.27M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1406|  3.27M|	setgcref(((GCRef *)kptr)[~kidx], o);
  ------------------
  |  |   72|  3.27M|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
 1407|  3.27M|	lj_gc_objbarrier(fs->L, pt, o);
  ------------------
  |  |  108|  3.27M|  { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   32|  6.54M|#define iswhite(x)	((x)->gch.marked & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  3.27M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  3.27M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  3.27M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (32:20): [True: 3.15M, False: 110k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (iswhite(obj2gco(o)) && isblack(obj2gco(p))) \
  |  |  ------------------
  |  |  |  |   33|  3.15M|#define isblack(x)	((x)->gch.marked & LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|  3.15M|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (33:20): [True: 0, False: 3.15M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  109|  3.27M|      lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |                     lj_gc_barrierf(G(L), obj2gco(p), obj2gco(o)); }
  |  |  ------------------
  |  |  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1408|  3.27M|	if (tvisproto(&n->key))
  ------------------
  |  |  798|  3.27M|#define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  781|  3.27M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisproto(o)	(itype(o) == LJ_TPROTO)
  |  |  ------------------
  |  |  |  |  267|  3.27M|#define LJ_TPROTO		(~7u)
  |  |  ------------------
  |  |  |  Branch (798:22): [True: 907k, False: 2.36M]
  |  |  ------------------
  ------------------
 1409|   907k|	  fs_fixup_uv2(fs, gco2pt(o));
  ------------------
  |  |  768|   907k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|   907k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   907k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   907k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 907k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   907k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1410|  3.27M|      }
 1411|  3.48M|    }
 1412|  27.5M|  }
 1413|  1.90M|}
lj_parse.c:fs_fixup_uv2:
 1347|   907k|{
 1348|   907k|  VarInfo *vstack = fs->ls->vstack;
 1349|   907k|  uint16_t *uv = proto_uv(pt);
  ------------------
  |  |  422|   907k|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|   907k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1350|   907k|  MSize i, n = pt->sizeuv;
 1351|   912k|  for (i = 0; i < n; i++) {
  ------------------
  |  Branch (1351:15): [True: 5.74k, False: 907k]
  ------------------
 1352|  5.74k|    VarIndex vidx = uv[i];
 1353|  5.74k|    if (vidx >= LJ_MAX_VSTACK)
  ------------------
  |  |  115|  5.74k|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|  5.74k|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
  |  Branch (1353:9): [True: 300, False: 5.44k]
  ------------------
 1354|    300|      uv[i] = vidx - LJ_MAX_VSTACK;
  ------------------
  |  |  115|    300|#define LJ_MAX_VSTACK		(65536 - LJ_MAX_UPVAL)
  |  |  ------------------
  |  |  |  |   69|    300|#define LJ_MAX_UPVAL	60		/* Max. # of upvalues. */
  |  |  ------------------
  ------------------
 1355|  5.44k|    else if ((vstack[vidx].info & VSTACK_VAR_RW))
  ------------------
  |  |  118|  5.44k|#define VSTACK_VAR_RW		0x01	/* R/W variable. */
  ------------------
  |  Branch (1355:14): [True: 2.49k, False: 2.95k]
  ------------------
 1356|  2.49k|      uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL;
  ------------------
  |  |  412|  2.49k|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
 1357|  2.95k|    else
 1358|  2.95k|      uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL | PROTO_UV_IMMUTABLE;
  ------------------
  |  |  412|  2.95k|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
                    uv[i] = vstack[vidx].slot | PROTO_UV_LOCAL | PROTO_UV_IMMUTABLE;
  ------------------
  |  |  413|  2.95k|#define PROTO_UV_IMMUTABLE	0x4000	/* Immutable upvalue. */
  ------------------
 1359|  5.74k|  }
 1360|   907k|}
lj_parse.c:fs_fixup_uv1:
 1417|  1.90M|{
 1418|  1.90M|  setmref(pt->uv, uv);
  ------------------
  |  |   39|  1.90M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1419|  1.90M|  pt->sizeuv = fs->nuv;
 1420|  1.90M|  memcpy(uv, fs->uvtmp, fs->nuv*sizeof(VarIndex));
 1421|  1.90M|}
lj_parse.c:fs_fixup_line:
 1433|  1.90M|{
 1434|  1.90M|  BCInsLine *base = fs->bcbase + 1;
 1435|  1.90M|  BCLine first = fs->linedefined;
 1436|  1.90M|  MSize i = 0, n = fs->pc-1;
 1437|  1.90M|  pt->firstline = fs->linedefined;
 1438|  1.90M|  pt->numline = numline;
 1439|  1.90M|  setmref(pt->lineinfo, lineinfo);
  ------------------
  |  |   39|  1.90M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1440|  1.90M|  if (LJ_LIKELY(numline < 256)) {
  ------------------
  |  |  145|  1.90M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.90M, False: 296]
  |  |  ------------------
  ------------------
 1441|  1.90M|    uint8_t *li = (uint8_t *)lineinfo;
 1442|  6.73M|    do {
 1443|  6.73M|      BCLine delta = base[i].line - first;
 1444|  6.73M|      lj_assertFS(delta >= 0 && delta < 256, "bad line delta");
  ------------------
  |  |  167|  6.73M|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|  6.73M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  13.4M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.73M, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.73M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  6.73M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1445|  6.73M|      li[i] = (uint8_t)delta;
 1446|  6.73M|    } while (++i < n);
  ------------------
  |  Branch (1446:14): [True: 4.82M, False: 1.90M]
  ------------------
 1447|  1.90M|  } else if (LJ_LIKELY(numline < 65536)) {
  ------------------
  |  |  145|    296|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 296, False: 0]
  |  |  ------------------
  ------------------
 1448|    296|    uint16_t *li = (uint16_t *)lineinfo;
 1449|   404k|    do {
 1450|   404k|      BCLine delta = base[i].line - first;
 1451|   404k|      lj_assertFS(delta >= 0 && delta < 65536, "bad line delta");
  ------------------
  |  |  167|   404k|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|   404k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   808k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 404k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 404k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   404k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1452|   404k|      li[i] = (uint16_t)delta;
 1453|   404k|    } while (++i < n);
  ------------------
  |  Branch (1453:14): [True: 403k, False: 296]
  ------------------
 1454|    296|  } else {
 1455|      0|    uint32_t *li = (uint32_t *)lineinfo;
 1456|      0|    do {
 1457|      0|      BCLine delta = base[i].line - first;
 1458|      0|      lj_assertFS(delta >= 0, "bad line delta");
  ------------------
  |  |  167|      0|#define lj_assertFS(c, ...)	(lj_assertG_(G(fs->L), (c), __VA_ARGS__))
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1459|      0|      li[i] = (uint32_t)delta;
 1460|      0|    } while (++i < n);
  ------------------
  |  Branch (1460:14): [True: 0, False: 0]
  ------------------
 1461|      0|  }
 1462|  1.90M|}
lj_parse.c:fs_fixup_var:
 1508|  1.90M|{
 1509|  1.90M|  setmref(pt->uvinfo, p);
  ------------------
  |  |   39|  1.90M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1510|  1.90M|  setmref(pt->varinfo, (char *)p + ofsvar);
  ------------------
  |  |   39|  1.90M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 1511|  1.90M|  memcpy(p, ls->sb.b, sbuflen(&ls->sb));  /* Copy from temp. buffer. */
  ------------------
  |  |   36|  1.90M|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
 1512|  1.90M|}

lj_prng_u64:
   48|  6.05M|{
   49|  6.05M|  uint64_t z, r = 0;
   50|  6.05M|  TW223_STEP(rs, z, r)
  ------------------
  |  |   41|  6.05M|  TW223_GEN(rs, z, r, 0, 63, 31, 18) \
  |  |  ------------------
  |  |  |  |   36|  6.05M|  z = rs->u[i]; \
  |  |  |  |   37|  6.05M|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  6.05M|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   42|  6.05M|  TW223_GEN(rs, z, r, 1, 58, 19, 28) \
  |  |  ------------------
  |  |  |  |   36|  6.05M|  z = rs->u[i]; \
  |  |  |  |   37|  6.05M|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  6.05M|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   43|  6.05M|  TW223_GEN(rs, z, r, 2, 55, 24,  7) \
  |  |  ------------------
  |  |  |  |   36|  6.05M|  z = rs->u[i]; \
  |  |  |  |   37|  6.05M|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  6.05M|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  |  |   44|  6.05M|  TW223_GEN(rs, z, r, 3, 47, 21,  8)
  |  |  ------------------
  |  |  |  |   36|  6.05M|  z = rs->u[i]; \
  |  |  |  |   37|  6.05M|  z = (((z<<q)^z) >> (k-s)) ^ ((z&((uint64_t)(int64_t)-1 << (64-k)))<<s); \
  |  |  |  |   38|  6.05M|  r ^= z; rs->u[i] = z;
  |  |  ------------------
  ------------------
   51|  6.05M|  return r;
   52|  6.05M|}
lj_prng_seed_secure:
  167|  13.6k|{
  168|       |#if LJ_TARGET_XBOX360
  169|       |
  170|       |  if (XNetRandom(rs->u, (unsigned int)sizeof(rs->u)) == 0)
  171|       |    goto ok;
  172|       |
  173|       |#elif LJ_TARGET_PS3
  174|       |
  175|       |  if (sys_get_random_number(rs->u, sizeof(rs->u)) == 0)
  176|       |    goto ok;
  177|       |
  178|       |#elif LJ_TARGET_PS4 || LJ_TARGET_PS5 || LJ_TARGET_PSVITA
  179|       |
  180|       |  if (sceRandomGetRandomNumber(rs->u, sizeof(rs->u)) == 0)
  181|       |    goto ok;
  182|       |
  183|       |#elif LJ_TARGET_NX
  184|       |
  185|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  186|       |    goto ok;
  187|       |
  188|       |#elif LJ_TARGET_UWP || LJ_TARGET_XBOXONE
  189|       |
  190|       |  if (BCryptGenRandom(NULL, (PUCHAR)(rs->u), (ULONG)sizeof(rs->u),
  191|       |		      BCRYPT_USE_SYSTEM_PREFERRED_RNG) >= 0)
  192|       |    goto ok;
  193|       |
  194|       |#elif LJ_TARGET_WINDOWS
  195|       |
  196|       |  /* Keep the library loaded in case multiple VMs are started. */
  197|       |  if (!libfunc_rgr) {
  198|       |    HMODULE lib = LJ_WIN_LOADLIBA("advapi32.dll");
  199|       |    if (!lib) return 0;
  200|       |    libfunc_rgr = (PRGR)GetProcAddress(lib, "SystemFunction036");
  201|       |    if (!libfunc_rgr) return 0;
  202|       |  }
  203|       |  if (libfunc_rgr(rs->u, (ULONG)sizeof(rs->u)))
  204|       |    goto ok;
  205|       |
  206|       |#elif LJ_TARGET_POSIX
  207|       |
  208|  13.6k|#if LJ_TARGET_LINUX && defined(SYS_getrandom)
  209|       |
  210|  13.6k|  if (syscall(SYS_getrandom, rs->u, sizeof(rs->u), 0) == (long)sizeof(rs->u))
  ------------------
  |  Branch (210:7): [True: 13.6k, False: 0]
  ------------------
  211|  13.6k|    goto ok;
  212|       |
  213|       |#elif LJ_TARGET_HAS_GETENTROPY
  214|       |
  215|       |#ifdef __ELF__
  216|       |  if (&getentropy && getentropy(rs->u, sizeof(rs->u)) == 0)
  217|       |    goto ok;
  218|       |#else
  219|       |  if (getentropy(rs->u, sizeof(rs->u)) == 0)
  220|       |    goto ok;
  221|       |#endif
  222|       |
  223|       |#endif
  224|       |
  225|       |  /* Fallback to /dev/urandom. This may fail if the device is not
  226|       |  ** existent or accessible in a chroot or container, or if the process
  227|       |  ** or the OS ran out of file descriptors.
  228|       |  */
  229|      0|  {
  230|      0|    int fd = open("/dev/urandom", O_RDONLY|O_CLOEXEC);
  231|      0|    if (fd != -1) {
  ------------------
  |  Branch (231:9): [True: 0, False: 0]
  ------------------
  232|      0|      ssize_t n = read(fd, rs->u, sizeof(rs->u));
  233|      0|      (void)close(fd);
  234|      0|      if (n == (ssize_t)sizeof(rs->u))
  ------------------
  |  Branch (234:11): [True: 0, False: 0]
  ------------------
  235|      0|	goto ok;
  236|      0|    }
  237|      0|  }
  238|       |
  239|       |#else
  240|       |
  241|       |  /* Add an elif above for your OS with a secure PRNG seed.
  242|       |  ** Note that fiddling around with rand(), getpid(), time() or coercing
  243|       |  ** ASLR to yield a few bits of randomness is not helpful.
  244|       |  ** If you don't want any security, then don't pretend you have any
  245|       |  ** and simply define LUAJIT_SECURITY_PRNG=0 for the build.
  246|       |  */
  247|       |#error "Missing secure PRNG seed for this OS"
  248|       |
  249|       |#endif
  250|      0|  return 0;  /* Fail. */
  251|       |
  252|  13.6k|ok:
  253|  13.6k|  lj_prng_condition(rs);
  254|  13.6k|  (void)lj_prng_u64(rs);
  255|  13.6k|  return 1;  /* Success. */
  256|      0|}
lj_prng.c:lj_prng_condition:
   65|  13.6k|{
   66|  13.6k|  if (rs->u[0] < (1u << 1)) rs->u[0] += (1u << 1);
  ------------------
  |  Branch (66:7): [True: 0, False: 13.6k]
  ------------------
   67|  13.6k|  if (rs->u[1] < (1u << 6)) rs->u[1] += (1u << 6);
  ------------------
  |  Branch (67:7): [True: 0, False: 13.6k]
  ------------------
   68|  13.6k|  if (rs->u[2] < (1u << 9)) rs->u[2] += (1u << 9);
  ------------------
  |  Branch (68:7): [True: 0, False: 13.6k]
  ------------------
   69|  13.6k|  if (rs->u[3] < (1u << 17)) rs->u[3] += (1u << 17);
  ------------------
  |  Branch (69:7): [True: 0, False: 13.6k]
  ------------------
   70|  13.6k|}

lib_math.c:lj_prng_seed_fixed:
   17|  13.6k|{
   18|  13.6k|  rs->u[0] = U64x(a0d27757,0a345b8c);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   19|  13.6k|  rs->u[1] = U64x(764a296c,5d4aa64f);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   20|  13.6k|  rs->u[2] = U64x(51220704,070adeaa);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   21|  13.6k|  rs->u[3] = U64x(2a2717b5,a7b7b927);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
   22|  13.6k|}

luaJIT_profile_stop:
  341|  13.6k|{
  342|  13.6k|  ProfileState *ps = &profile_state;
  343|  13.6k|  global_State *g = ps->g;
  344|  13.6k|  if (G(L) == g) {  /* Only stop profiler if started by this VM. */
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (344:7): [True: 0, False: 13.6k]
  ------------------
  345|      0|    profile_timer_stop(ps);
  346|      0|    g->hookmask &= ~HOOK_PROFILE;
  ------------------
  |  |  677|      0|#define HOOK_PROFILE		0x80
  ------------------
  347|      0|    lj_dispatch_update(g);
  348|      0|#if LJ_HASJIT
  349|      0|    G2J(g)->prof_mode = 0;
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  350|      0|    lj_trace_flushall(L);
  351|      0|#endif
  352|      0|    lj_buf_free(g, &ps->sb);
  353|      0|    ps->sb.w = ps->sb.e = NULL;
  354|      0|    ps->g = NULL;
  355|      0|  }
  356|  13.6k|}

lj_record_objcmp:
  230|  11.2k|{
  231|  11.2k|  int diff = !lj_obj_equal(av, bv);
  232|  11.2k|  if (!tref_isk2(a, b)) {  /* Shortcut, also handles primitives. */
  ------------------
  |  |  532|  11.2k|#define tref_isk2(tr1, tr2)	(irref_isk(tref_ref((tr1) | (tr2))))
  |  |  ------------------
  |  |  |  |  485|  11.2k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  ------------------
  |  Branch (232:7): [True: 11.2k, False: 0]
  ------------------
  233|  11.2k|    IRType ta = tref_isinteger(a) ? IRT_INT : tref_type(a);
  ------------------
  |  |  526|  11.2k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  11.2k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
                  IRType ta = tref_isinteger(a) ? IRT_INT : tref_type(a);
  ------------------
  |  |  506|  22.5k|#define tref_type(tr)		((IRType)(((tr)>>24) & IRT_TYPE))
  ------------------
  234|  11.2k|    IRType tb = tref_isinteger(b) ? IRT_INT : tref_type(b);
  ------------------
  |  |  526|  11.2k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  11.2k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 256, False: 11.0k]
  |  |  ------------------
  ------------------
                  IRType tb = tref_isinteger(b) ? IRT_INT : tref_type(b);
  ------------------
  |  |  506|  22.3k|#define tref_type(tr)		((IRType)(((tr)>>24) & IRT_TYPE))
  ------------------
  235|  11.2k|    if (ta != tb) {
  ------------------
  |  Branch (235:9): [True: 276, False: 11.0k]
  ------------------
  236|       |      /* Widen mixed number/int comparisons to number/number comparison. */
  237|    276|      if (ta == IRT_INT && tb == IRT_NUM) {
  ------------------
  |  Branch (237:11): [True: 0, False: 276]
  |  Branch (237:28): [True: 0, False: 0]
  ------------------
  238|      0|	a = emitir(IRTN(IR_CONV), a, IRCONV_NUM_INT);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  239|      0|	ta = IRT_NUM;
  240|    276|      } else if (ta == IRT_NUM && tb == IRT_INT) {
  ------------------
  |  Branch (240:18): [True: 276, False: 0]
  |  Branch (240:35): [True: 256, False: 20]
  ------------------
  241|    256|	b = emitir(IRTN(IR_CONV), b, IRCONV_NUM_INT);
  ------------------
  |  |   42|    256|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    256|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  242|    256|      } else {
  243|     20|	return 2;  /* Two different types are never equal. */
  244|     20|      }
  245|    276|    }
  246|  11.2k|    emitir(IRTG(diff ? IR_NE : IR_EQ, ta), a, b);
  ------------------
  |  |   42|  11.2k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  22.5k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 259, False: 11.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  247|  11.2k|  }
  248|  11.2k|  return diff;
  249|  11.2k|}
lj_record_constify:
  253|  35.6k|{
  254|  35.6k|  if (tvisgcv(o))
  ------------------
  |  |  809|  35.6k|#define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  781|  35.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  35.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  35.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  274|  35.6k|#define LJ_TNUMX		(~13u)
  |  |  ------------------
  |  |               #define tvisgcv(o)	((itype(o) - LJ_TISGCV) > (LJ_TNUMX - LJ_TISGCV))
  |  |  ------------------
  |  |  |  |  284|  35.6k|#define LJ_TISGCV		(LJ_TSTR+1)
  |  |  |  |  ------------------
  |  |  |  |  |  |  264|  35.6k|#define LJ_TSTR			(~4u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (809:20): [True: 35.6k, False: 0]
  |  |  ------------------
  ------------------
  255|  35.6k|    return lj_ir_kgc(J, gcV(o), itype2irt(o));
  ------------------
  |  |  858|  35.6k|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|  35.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  35.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  35.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 35.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  35.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  256|      0|  else if (tvisint(o))
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  257|      0|    return lj_ir_kint(J, intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  258|      0|  else if (tvisnum(o))
  ------------------
  |  |  804|      0|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  259|      0|    return lj_ir_knumint(J, numV(o));
  ------------------
  |  |  866|      0|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  260|      0|  else if (tvisbool(o))
  ------------------
  |  |  789|      0|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|      0|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|      0|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  261|      0|    return TREF_PRI(itype2irt(o));
  ------------------
  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
  262|      0|  else
  263|      0|    return 0;  /* Can't represent lightuserdata (pointless). */
  264|  35.6k|}
lj_record_vload:
  268|    533|{
  269|    533|  TRef tr = emitir(IRTG(IR_VLOAD, t), ref, idx);
  ------------------
  |  |   42|    533|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    533|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  270|    533|  if (irtype_ispri(t)) tr = TREF_PRI(t);  /* Canonicalize primitives. */
  ------------------
  |  |  353|    533|#define irtype_ispri(irt)	((uint32_t)(irt) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  Branch (353:27): [True: 73, False: 460]
  |  |  ------------------
  ------------------
                if (irtype_ispri(t)) tr = TREF_PRI(t);  /* Canonicalize primitives. */
  ------------------
  |  |  534|     73|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|     73|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
  271|    533|  return tr;
  272|    533|}
lj_record_stop:
  300|  24.2k|{
  301|       |#ifdef LUAJIT_ENABLE_TABLE_BUMP
  302|       |  if (J->retryrec)
  303|       |    lj_trace_err(J, LJ_TRERR_RETRY);
  304|       |#endif
  305|  24.2k|  lj_trace_end(J);
  ------------------
  |  |   46|  24.2k|#define lj_trace_end(J)		(J->state = LJ_TRACE_END)
  ------------------
  306|  24.2k|  J->cur.linktype = (uint8_t)linktype;
  307|  24.2k|  J->cur.link = (uint16_t)lnk;
  308|       |  /* Looping back at the same stack level? */
  309|  24.2k|  if (lnk == J->cur.traceno && J->framedepth + J->retdepth == 0) {
  ------------------
  |  Branch (309:7): [True: 10.2k, False: 13.9k]
  |  Branch (309:32): [True: 9.93k, False: 365]
  ------------------
  310|  9.93k|    if ((J->flags & JIT_F_OPT_LOOP))  /* Shall we try to create a loop? */
  ------------------
  |  |   86|  9.93k|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  ------------------
  |  |  |  |   77|  9.93k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (310:9): [True: 9.93k, False: 0]
  ------------------
  311|  9.93k|      goto nocanon;  /* Do not canonicalize or we lose the narrowing. */
  312|      0|    if (J->cur.root)  /* Otherwise ensure we always link to the root trace. */
  ------------------
  |  Branch (312:9): [True: 0, False: 0]
  ------------------
  313|      0|      J->cur.link = J->cur.root;
  314|      0|  }
  315|  14.3k|  canonicalize_slots(J);
  316|  24.2k|nocanon:
  317|       |  /* Note: all loop ops must set J->pc to the following instruction! */
  318|  24.2k|  lj_snap_add(J);  /* Add loop snapshot. */
  319|  24.2k|  J->needsnap = 0;
  320|  24.2k|  J->mergesnap = 1;  /* In case recording continues. */
  321|  24.2k|}
lj_record_call:
  844|  61.7k|{
  845|  61.7k|  rec_call_setup(J, func, nargs);
  846|       |  /* Bump frame. */
  847|  61.7k|  J->framedepth++;
  848|  61.7k|  J->base += func+1+LJ_FR2;
  ------------------
  |  |  569|  61.7k|#define LJ_FR2			1
  ------------------
  849|  61.7k|  J->baseslot += func+1+LJ_FR2;
  ------------------
  |  |  569|  61.7k|#define LJ_FR2			1
  ------------------
  850|  61.7k|  if (J->baseslot + J->maxslot >= LJ_MAX_JSLOTS)
  ------------------
  |  |   85|  61.7k|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (850:7): [True: 0, False: 61.7k]
  ------------------
  851|      0|    lj_trace_err(J, LJ_TRERR_STACKOV);
  852|  61.7k|}
lj_record_tailcall:
  856|    195|{
  857|    195|  rec_call_setup(J, func, nargs);
  858|    195|  if (frame_isvarg(J->L->base - 1)) {
  ------------------
  |  |   80|    195|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|    195|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|    195|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|    195|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|    195|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|    195|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 0, False: 195]
  |  |  ------------------
  ------------------
  859|      0|    BCReg cbase = (BCReg)frame_delta(J->L->base - 1);
  ------------------
  |  |   84|      0|#define frame_delta(f)		(frame_ftsz(f) >> 3)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
  860|      0|    if (--J->framedepth < 0)
  ------------------
  |  Branch (860:9): [True: 0, False: 0]
  ------------------
  861|      0|      lj_trace_err(J, LJ_TRERR_NYIRETL);
  862|      0|    J->baseslot -= (BCReg)cbase;
  863|      0|    J->base -= cbase;
  864|      0|    func += cbase;
  865|      0|  }
  866|       |  /* Move func + args down. */
  867|    195|  if (LJ_FR2 && J->baseslot == 2)
  ------------------
  |  |  569|    390|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (867:17): [True: 194, False: 1]
  ------------------
  868|    194|    J->base[func+1] = TREF_FRAME;
  ------------------
  |  |  498|    194|#define TREF_FRAME		0x00010000
  ------------------
  869|    195|  memmove(&J->base[-1-LJ_FR2], &J->base[func], sizeof(TRef)*(J->maxslot+1+LJ_FR2));
  ------------------
  |  |  569|    195|#define LJ_FR2			1
  ------------------
                memmove(&J->base[-1-LJ_FR2], &J->base[func], sizeof(TRef)*(J->maxslot+1+LJ_FR2));
  ------------------
  |  |  569|    195|#define LJ_FR2			1
  ------------------
  870|       |  /* Note: the new TREF_FRAME is now at J->base[-1] (even for slot #0). */
  871|       |  /* Tailcalls can form a loop, so count towards the loop unroll limit. */
  872|    195|  if (++J->tailcalled > J->loopunroll)
  ------------------
  |  Branch (872:7): [True: 0, False: 195]
  ------------------
  873|      0|    lj_trace_err(J, LJ_TRERR_LUNROLL);
  874|    195|}
lj_record_ret:
  903|  76.8k|{
  904|  76.8k|  TValue *frame = J->L->base - 1;
  905|  76.8k|  ptrdiff_t i;
  906|  76.8k|  BCReg baseadj = 0;
  907|   140k|  for (i = 0; i < gotresults; i++)
  ------------------
  |  Branch (907:15): [True: 63.8k, False: 76.8k]
  ------------------
  908|  63.8k|    (void)getslot(J, rbase+i);  /* Ensure all results have a reference. */
  ------------------
  |  |  211|  63.8k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 63.8k, False: 0]
  |  |  ------------------
  ------------------
  909|  76.8k|  while (frame_ispcall(frame)) {  /* Immediately resolve pcall() returns. */
  ------------------
  |  |   81|  76.8k|#define frame_ispcall(f)	((frame_ftsz(f) & 6) == FRAME_PCALL)
  |  |  ------------------
  |  |  |  |   47|  76.8k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  |  |  |  Branch (81:26): [True: 3, False: 76.8k]
  |  |  ------------------
  ------------------
  910|      3|    BCReg cbase = (BCReg)frame_delta(frame);
  ------------------
  |  |   84|      3|#define frame_delta(f)		(frame_ftsz(f) >> 3)
  |  |  ------------------
  |  |  |  |   47|      3|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
  911|      3|    if (--J->framedepth <= 0)
  ------------------
  |  Branch (911:9): [True: 0, False: 3]
  ------------------
  912|      0|      lj_trace_err(J, LJ_TRERR_NYIRETL);
  913|      3|    lj_assertJ(J->baseslot > 1+LJ_FR2, "bad baseslot for return");
  ------------------
  |  |  527|      3|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      3|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      3|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      3|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  914|      3|    gotresults++;
  915|      3|    baseadj += cbase;
  916|      3|    rbase += cbase;
  917|      3|    J->baseslot -= (BCReg)cbase;
  918|      3|    J->base -= cbase;
  919|      3|    J->base[--rbase] = TREF_TRUE;  /* Prepend true to results. */
  ------------------
  |  |  537|      3|#define TREF_TRUE		(TREF_PRI(IRT_TRUE))
  |  |  ------------------
  |  |  |  |  534|      3|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      3|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  920|      3|    frame = frame_prevd(frame);
  ------------------
  |  |  109|      3|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      3|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      3|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      3|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      3|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      3|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  921|      3|    J->needsnap = 1;  /* Stop catching on-trace errors. */
  922|      3|  }
  923|       |  /* Return to lower frame via interpreter for unhandled cases. */
  924|  76.8k|  if (J->framedepth == 0 && J->pt && bc_isret(bc_op(*J->pc)) &&
  ------------------
  |  |   34|  22.1k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (924:7): [True: 22.1k, False: 54.6k]
  |  Branch (924:29): [True: 22.1k, False: 11]
  |  Branch (924:38): [True: 22.1k, False: 0]
  ------------------
  925|  76.8k|       (!frame_islua(frame) ||
  ------------------
  |  |   77|  44.3k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  22.1k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  22.1k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  22.1k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (925:9): [True: 34, False: 22.1k]
  ------------------
  926|  22.1k|	(J->parent == 0 && J->exitno == 0 &&
  ------------------
  |  Branch (926:3): [True: 6.44k, False: 15.6k]
  |  Branch (926:21): [True: 6.44k, False: 0]
  ------------------
  927|  22.1k|	 !bc_isret(bc_op(J->cur.startins))))) {
  ------------------
  |  |   34|  6.44k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (927:3): [True: 6.44k, False: 0]
  ------------------
  928|       |    /* NYI: specialize to frame type and return directly, not via RET*. */
  929|  12.7k|    for (i = 0; i < (ptrdiff_t)rbase; i++)
  ------------------
  |  Branch (929:17): [True: 6.32k, False: 6.47k]
  ------------------
  930|  6.32k|      J->base[i] = 0;  /* Purge dead slots. */
  931|  6.47k|    J->maxslot = rbase + (BCReg)gotresults;
  932|  6.47k|    lj_record_stop(J, LJ_TRLINK_RETURN, 0);  /* Return to interpreter. */
  933|  6.47k|    return;
  934|  6.47k|  }
  935|  70.3k|  if (frame_isvarg(frame)) {
  ------------------
  |  |   80|  70.3k|#define frame_isvarg(f)		(frame_typep(f) == FRAME_VARG)
  |  |  ------------------
  |  |  |  |   76|  70.3k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  70.3k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  70.3k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  70.3k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  70.3k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (80:26): [True: 0, False: 70.3k]
  |  |  ------------------
  ------------------
  936|      0|    BCReg cbase = (BCReg)frame_delta(frame);
  ------------------
  |  |   84|      0|#define frame_delta(f)		(frame_ftsz(f) >> 3)
  |  |  ------------------
  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
  937|      0|    if (--J->framedepth < 0)  /* NYI: return of vararg func to lower frame. */
  ------------------
  |  Branch (937:9): [True: 0, False: 0]
  ------------------
  938|      0|      lj_trace_err(J, LJ_TRERR_NYIRETL);
  939|      0|    lj_assertJ(J->baseslot > 1+LJ_FR2, "bad baseslot for return");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  940|      0|    baseadj += cbase;
  941|      0|    rbase += cbase;
  942|      0|    J->baseslot -= (BCReg)cbase;
  943|      0|    J->base -= cbase;
  944|      0|    frame = frame_prevd(frame);
  ------------------
  |  |  109|      0|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      0|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      0|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      0|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      0|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      0|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  945|      0|  }
  946|  70.3k|  if (frame_islua(frame)) {  /* Return to Lua frame. */
  ------------------
  |  |   77|  70.3k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  70.3k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  70.3k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  70.3k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 70.3k, False: 5]
  |  |  ------------------
  ------------------
  947|  70.3k|    BCIns callins = *(frame_pc(frame)-1);
  ------------------
  |  |   48|  70.3k|#define frame_pc(f)		((const BCIns *)frame_ftsz(f))
  |  |  ------------------
  |  |  |  |   47|  70.3k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
  948|  70.3k|    ptrdiff_t nresults = bc_b(callins) ? (ptrdiff_t)bc_b(callins)-1 :gotresults;
  ------------------
  |  |   36|  70.3k|#define bc_b(i)		((BCReg)((i)>>24))
  |  |  ------------------
  |  |  |  Branch (36:18): [True: 70.0k, False: 365]
  |  |  ------------------
  ------------------
                  ptrdiff_t nresults = bc_b(callins) ? (ptrdiff_t)bc_b(callins)-1 :gotresults;
  ------------------
  |  |   36|  70.0k|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
  949|  70.3k|    BCReg cbase = bc_a(callins);
  ------------------
  |  |   35|  70.3k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  950|  70.3k|    GCproto *pt = funcproto(frame_func(frame - (cbase+1+LJ_FR2)));
  ------------------
  |  |  480|  70.3k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  70.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  70.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  70.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 70.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  70.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  951|  70.3k|    if ((pt->flags & PROTO_NOJIT))
  ------------------
  |  |  402|  70.3k|#define PROTO_NOJIT		0x08	/* JIT disabled for this function. */
  ------------------
  |  Branch (951:9): [True: 0, False: 70.3k]
  ------------------
  952|      0|      lj_trace_err(J, LJ_TRERR_CJITOFF);
  953|  70.3k|    if (J->framedepth == 0 && J->pt && frame == J->L->base - 1) {
  ------------------
  |  Branch (953:9): [True: 15.6k, False: 54.6k]
  |  Branch (953:31): [True: 15.6k, False: 11]
  |  Branch (953:40): [True: 15.6k, False: 0]
  ------------------
  954|  15.6k|      if (!J->cur.root && check_downrec_unroll(J, pt)) {
  ------------------
  |  Branch (954:11): [True: 0, False: 15.6k]
  |  Branch (954:27): [True: 0, False: 0]
  ------------------
  955|      0|	J->maxslot = (BCReg)(rbase + gotresults);
  956|      0|	lj_snap_purge(J);
  957|      0|	lj_record_stop(J, LJ_TRLINK_DOWNREC, J->cur.traceno);  /* Down-rec. */
  958|      0|	return;
  959|      0|      }
  960|  15.6k|      lj_snap_add(J);
  961|  15.6k|    }
  962|   118k|    for (i = 0; i < nresults; i++)  /* Adjust results. */
  ------------------
  |  Branch (962:17): [True: 48.4k, False: 70.3k]
  ------------------
  963|  48.4k|      J->base[i-1-LJ_FR2] = i < gotresults ? J->base[rbase+i] : TREF_NIL;
  ------------------
  |  |  569|  48.4k|#define LJ_FR2			1
  ------------------
                    J->base[i-1-LJ_FR2] = i < gotresults ? J->base[rbase+i] : TREF_NIL;
  ------------------
  |  |  535|  70.3k|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (963:29): [True: 48.4k, False: 0]
  ------------------
  964|  70.3k|    J->maxslot = cbase+(BCReg)nresults;
  965|  70.3k|    if (J->framedepth > 0) {  /* Return to a frame that is part of the trace. */
  ------------------
  |  Branch (965:9): [True: 54.6k, False: 15.6k]
  ------------------
  966|  54.6k|      J->framedepth--;
  967|  54.6k|      lj_assertJ(J->baseslot > cbase+1+LJ_FR2, "bad baseslot for return");
  ------------------
  |  |  527|  54.6k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  54.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  54.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 54.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  54.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  968|  54.6k|      J->baseslot -= cbase+1+LJ_FR2;
  ------------------
  |  |  569|  54.6k|#define LJ_FR2			1
  ------------------
  969|  54.6k|      J->base -= cbase+1+LJ_FR2;
  ------------------
  |  |  569|  54.6k|#define LJ_FR2			1
  ------------------
  970|  54.6k|    } else if (J->parent == 0 && J->exitno == 0 &&
  ------------------
  |  Branch (970:16): [True: 3, False: 15.6k]
  |  Branch (970:34): [True: 3, False: 0]
  ------------------
  971|  15.6k|	       !bc_isret(bc_op(J->cur.startins))) {
  ------------------
  |  |   34|      3|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (971:9): [True: 3, False: 0]
  ------------------
  972|       |      /* Return to lower frame would leave the loop in a root trace. */
  973|      3|      lj_trace_err(J, LJ_TRERR_LLEAVE);
  974|  15.6k|    } else if (J->needsnap) {  /* Tailcalled to ff with side-effects. */
  ------------------
  |  Branch (974:16): [True: 8, False: 15.6k]
  ------------------
  975|      8|      lj_trace_err(J, LJ_TRERR_NYIRETL);  /* No way to insert snapshot here. */
  976|  15.6k|    } else if (1 + pt->framesize >= LJ_MAX_JSLOTS) {
  ------------------
  |  |   85|  15.6k|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (976:16): [True: 0, False: 15.6k]
  ------------------
  977|      0|      lj_trace_err(J, LJ_TRERR_STACKOV);
  978|  15.6k|    } else {  /* Return to lower frame. Guard for the target we return to. */
  979|  15.6k|      TRef trpt = lj_ir_kgc(J, obj2gco(pt), IRT_PROTO);
  ------------------
  |  |  775|  15.6k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  980|  15.6k|      TRef trpc = lj_ir_kptr(J, (void *)frame_pc(frame));
  ------------------
  |  |   75|  15.6k|#define lj_ir_kptr(J, ptr)	lj_ir_kptr_(J, IR_KPTR, (ptr))
  ------------------
  981|  15.6k|      emitir(IRTG(IR_RETF, IRT_PGC), trpt, trpc);
  ------------------
  |  |   42|  15.6k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  15.6k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  982|  15.6k|      J->retdepth++;
  983|  15.6k|      J->needsnap = 1;
  984|  15.6k|      J->scev.idx = REF_NIL;
  985|  15.6k|      lj_assertJ(J->baseslot == 1+LJ_FR2, "bad baseslot for return");
  ------------------
  |  |  527|  15.6k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  15.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  15.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 15.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  15.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  986|       |      /* Shift result slots up and clear the slots of the new frame below. */
  987|  15.6k|      memmove(J->base + cbase, J->base-1-LJ_FR2, sizeof(TRef)*nresults);
  ------------------
  |  |  569|  15.6k|#define LJ_FR2			1
  ------------------
  988|  15.6k|      memset(J->base-1-LJ_FR2, 0, sizeof(TRef)*(cbase+1+LJ_FR2));
  ------------------
  |  |  569|  15.6k|#define LJ_FR2			1
  ------------------
                    memset(J->base-1-LJ_FR2, 0, sizeof(TRef)*(cbase+1+LJ_FR2));
  ------------------
  |  |  569|  15.6k|#define LJ_FR2			1
  ------------------
  989|  15.6k|    }
  990|  70.3k|  } else if (frame_iscont(frame)) {  /* Return to continuation frame. */
  ------------------
  |  |   79|      5|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|      5|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      5|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      5|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      5|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      5|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 5, False: 0]
  |  |  ------------------
  ------------------
  991|      5|    ASMFunction cont = frame_contf(frame);
  ------------------
  |  |   97|      5|#define frame_contf(f)		((ASMFunction)(uintptr_t)((f)-3)->u64)
  ------------------
  992|      5|    BCReg cbase = (BCReg)frame_delta(frame);
  ------------------
  |  |   84|      5|#define frame_delta(f)		(frame_ftsz(f) >> 3)
  |  |  ------------------
  |  |  |  |   47|      5|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  ------------------
  ------------------
  993|      5|    if ((J->framedepth -= 2) < 0)
  ------------------
  |  Branch (993:9): [True: 0, False: 5]
  ------------------
  994|      0|      lj_trace_err(J, LJ_TRERR_NYIRETL);
  995|      5|    J->baseslot -= (BCReg)cbase;
  996|      5|    J->base -= cbase;
  997|      5|    J->maxslot = cbase-(2<<LJ_FR2);
  ------------------
  |  |  569|      5|#define LJ_FR2			1
  ------------------
  998|      5|    if (cont == lj_cont_ra) {
  ------------------
  |  Branch (998:9): [True: 5, False: 0]
  ------------------
  999|       |      /* Copy result to destination slot. */
 1000|      5|      BCReg dst = bc_a(*(frame_contpc(frame)-1));
  ------------------
  |  |   35|      5|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
 1001|      5|      J->base[dst] = gotresults ? J->base[cbase+rbase] : TREF_NIL;
  ------------------
  |  |  535|      5|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1001:22): [True: 5, False: 0]
  ------------------
 1002|      5|      if (dst >= J->maxslot) {
  ------------------
  |  Branch (1002:11): [True: 0, False: 5]
  ------------------
 1003|      0|	J->maxslot = dst+1;
 1004|      0|      }
 1005|      5|    } else if (cont == lj_cont_nop) {
  ------------------
  |  Branch (1005:16): [True: 0, False: 0]
  ------------------
 1006|       |      /* Nothing to do here. */
 1007|      0|    } else if (cont == lj_cont_cat) {
  ------------------
  |  Branch (1007:16): [True: 0, False: 0]
  ------------------
 1008|      0|      BCReg bslot = bc_b(*(frame_contpc(frame)-1));
  ------------------
  |  |   36|      0|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
 1009|      0|      TRef tr = gotresults ? J->base[cbase+rbase] : TREF_NIL;
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1009:17): [True: 0, False: 0]
  ------------------
 1010|      0|      if (bslot != J->maxslot) {  /* Concatenate the remainder. */
  ------------------
  |  Branch (1010:11): [True: 0, False: 0]
  ------------------
 1011|       |	/* Simulate lower frame and result. */
 1012|      0|	TValue *b = J->L->base - baseadj, save;
 1013|       |	/* Can't handle MM_concat + CALLT + fast func side-effects. */
 1014|      0|	if (J->postproc != LJ_POST_NONE)
  ------------------
  |  Branch (1014:6): [True: 0, False: 0]
  ------------------
 1015|      0|	  lj_trace_err(J, LJ_TRERR_NYIRETL);
 1016|      0|	J->base[J->maxslot] = tr;
 1017|      0|	copyTV(J->L, &save, b-(2<<LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1018|      0|	if (gotresults)
  ------------------
  |  Branch (1018:6): [True: 0, False: 0]
  ------------------
 1019|      0|	  copyTV(J->L, b-(2<<LJ_FR2), b+rbase);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1020|      0|	else
 1021|      0|	  setnilV(b-(2<<LJ_FR2));
  ------------------
  |  |  872|      0|#define setnilV(o)		((o)->it64 = -1)
  ------------------
 1022|      0|	J->L->base = b - cbase;
 1023|      0|	tr = rec_cat(J, bslot, cbase-(2<<LJ_FR2));
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1024|      0|	b = J->L->base + cbase;  /* Undo. */
 1025|      0|	J->L->base = b + baseadj;
 1026|      0|	copyTV(J->L, b-(2<<LJ_FR2), &save);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 1027|      0|      }
 1028|      0|      if (tr >= 0xffffff00) {
  ------------------
  |  Branch (1028:11): [True: 0, False: 0]
  ------------------
 1029|      0|	lj_err_throw(J->L, -(int32_t)tr);  /* Propagate errors. */
 1030|      0|      } else if (tr) {  /* Store final result. */
  ------------------
  |  Branch (1030:18): [True: 0, False: 0]
  ------------------
 1031|      0|	BCReg dst = bc_a(*(frame_contpc(frame)-1));
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
 1032|      0|	J->base[dst] = tr;
 1033|      0|	if (dst >= J->maxslot) {
  ------------------
  |  Branch (1033:6): [True: 0, False: 0]
  ------------------
 1034|      0|	  J->maxslot = dst+1;
 1035|      0|	}
 1036|      0|      }  /* Otherwise continue with another __concat call. */
 1037|      0|    } else {
 1038|       |      /* Result type already specialized. */
 1039|      0|      lj_assertJ(cont == lj_cont_condf || cont == lj_cont_condt,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1040|      0|		 "bad continuation type");
 1041|      0|    }
 1042|      5|  } else {
 1043|      0|    lj_trace_err(J, LJ_TRERR_NYIRETL);  /* NYI: handle return to C frame. */
 1044|      0|  }
 1045|  70.3k|  lj_assertJ(J->baseslot >= 1+LJ_FR2, "bad baseslot for return");
  ------------------
  |  |  527|  70.3k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  70.3k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  70.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 70.3k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  70.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1046|  70.3k|}
lj_record_mm_lookup:
 1068|  2.19k|{
 1069|  2.19k|  RecordIndex mix;
 1070|  2.19k|  GCtab *mt;
 1071|  2.19k|  if (tref_istab(ix->tab)) {
  ------------------
  |  |  518|  2.19k|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|  2.19k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 1.83k, False: 363]
  |  |  ------------------
  ------------------
 1072|  1.83k|    mt = tabref(tabV(&ix->tabv)->metatable);
  ------------------
  |  |  514|  1.83k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.66k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1.83k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1073|  1.83k|    mix.tab = emitir(IRT(IR_FLOAD, IRT_TAB), ix->tab, IRFL_TAB_META);
  ------------------
  |  |   42|  1.83k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  1.83k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1074|  1.83k|  } else if (tref_isudata(ix->tab)) {
  ------------------
  |  |  519|    363|#define tref_isudata(tr)	(tref_istype((tr), IRT_UDATA))
  |  |  ------------------
  |  |  |  |  510|    363|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (519:26): [True: 5, False: 358]
  |  |  ------------------
  ------------------
 1075|      5|    int udtype = udataV(&ix->tabv)->udtype;
  ------------------
  |  |  865|      5|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      5|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      5|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      5|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 5, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      5|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1076|      5|    mt = tabref(udataV(&ix->tabv)->metatable);
  ------------------
  |  |  514|      5|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|     10|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 5, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1077|      5|    mix.tab = emitir(IRT(IR_FLOAD, IRT_TAB), ix->tab, IRFL_UDATA_META);
  ------------------
  |  |   42|      5|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      5|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1078|       |    /* The metatables of special userdata objects are treated as immutable. */
 1079|      5|    if (udtype != UDTYPE_USERDATA) {
  ------------------
  |  Branch (1079:9): [True: 0, False: 5]
  ------------------
 1080|      0|      cTValue *mo;
 1081|      0|      if (LJ_HASFFI && udtype == UDTYPE_FFI_CLIB) {
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (1081:24): [True: 0, False: 0]
  ------------------
 1082|       |	/* Specialize to the C library namespace object. */
 1083|      0|	emitir(IRTG(IR_EQ, IRT_PGC), ix->tab, lj_ir_kptr(J, udataV(&ix->tabv)));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:55): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1084|      0|      } else {
 1085|       |	/* Specialize to the type of userdata. */
 1086|      0|	TRef tr = emitir(IRT(IR_FLOAD, IRT_U8), ix->tab, IRFL_UDATA_UDTYPE);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1087|      0|	emitir(IRTGI(IR_EQ), tr, lj_ir_kint(J, udtype));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1088|      0|      }
 1089|      0|  immutable_mt:
 1090|      0|      mo = lj_tab_getstr(mt, mmname_str(J2G(J), mm));
  ------------------
  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1091|      0|      ix->mt = mix.tab;
 1092|      0|      ix->mtv = mt;
 1093|      0|      if (!mo || tvisnil(mo))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1093:11): [True: 0, False: 0]
  ------------------
 1094|      0|	return 0;  /* No metamethod. */
 1095|       |      /* Treat metamethod or index table as immutable, too. */
 1096|      0|      if (!(tvisfunc(mo) || tvistab(mo)))
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                    if (!(tvisfunc(mo) || tvistab(mo)))
  ------------------
  |  |  800|      0|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|      0|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1097|      0|	lj_trace_err(J, LJ_TRERR_BADTYPE);
 1098|      0|      copyTV(J->L, &ix->mobjv, mo);
 1099|      0|      ix->mobj = lj_ir_kgc(J, gcV(mo), tvisfunc(mo) ? IRT_FUNC : IRT_TAB);
  ------------------
  |  |  858|      0|#define gcV(o)		check_exp(tvisgcv(o), gcval(o))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    ix->mobj = lj_ir_kgc(J, gcV(mo), tvisfunc(mo) ? IRT_FUNC : IRT_TAB);
  ------------------
  |  |  796|      0|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      0|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1100|      0|      return 1;  /* Got metamethod or index table. */
 1101|      0|    }
 1102|    358|  } else {
 1103|       |    /* Specialize to base metatable. Must flush mcode in lua_setmetatable(). */
 1104|    358|    mt = tabref(basemt_obj(J2G(J), &ix->tabv));
  ------------------
  |  |  514|    358|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|    716|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 0, False: 358]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1105|    358|    if (mt == NULL) {
  ------------------
  |  Branch (1105:9): [True: 313, False: 45]
  ------------------
 1106|    313|      ix->mt = TREF_NIL;
  ------------------
  |  |  535|    313|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|    313|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|    313|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1107|    313|      return 0;  /* No metamethod. */
 1108|    313|    }
 1109|       |    /* The cdata metatable is treated as immutable. */
 1110|     45|    if (LJ_HASFFI && tref_iscdata(ix->tab)) goto immutable_mt;
  ------------------
  |  |  585|     90|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_HASFFI && tref_iscdata(ix->tab)) goto immutable_mt;
  ------------------
  |  |  517|     45|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|     45|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 45]
  |  |  ------------------
  ------------------
 1111|     45|    ix->mt = mix.tab = lj_ir_ggfload(J, IRT_TAB,
 1112|     45|      GG_OFS(g.gcroot[GCROOT_BASEMT+itypemap(&ix->tabv)]));
  ------------------
  |  |  111|     45|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  ------------------
 1113|     45|    goto nocheck;
 1114|     45|  }
 1115|  1.83k|  ix->mt = mt ? mix.tab : TREF_NIL;
  ------------------
  |  |  535|  3.22k|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|  1.38k|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|  1.38k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1115:12): [True: 448, False: 1.38k]
  ------------------
 1116|  1.83k|  emitir(IRTG(mt ? IR_NE : IR_EQ, IRT_TAB), mix.tab, lj_ir_knull(J, IRT_TAB));
  ------------------
  |  |   42|  1.83k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  3.67k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 448, False: 1.38k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1117|  1.88k|nocheck:
 1118|  1.88k|  if (mt) {
  ------------------
  |  Branch (1118:7): [True: 493, False: 1.38k]
  ------------------
 1119|    493|    GCstr *mmstr = mmname_str(J2G(J), mm);
  ------------------
  |  |  590|    493|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|    493|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|    493|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1120|    493|    cTValue *mo = lj_tab_getstr(mt, mmstr);
 1121|    493|    if (mo && !tvisnil(mo))
  ------------------
  |  |  782|    467|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (1121:9): [True: 467, False: 26]
  |  Branch (1121:15): [True: 467, False: 0]
  ------------------
 1122|    467|      copyTV(J->L, &ix->mobjv, mo);
 1123|    493|    ix->mtv = mt;
 1124|    493|    settabV(J->L, &mix.tabv, mt);
 1125|    493|    setstrV(J->L, &mix.keyv, mmstr);
 1126|    493|    mix.key = lj_ir_kstr(J, mmstr);
  ------------------
  |  |   72|    493|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|    493|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1127|    493|    mix.val = 0;
 1128|    493|    mix.idxchain = 0;
 1129|    493|    ix->mobj = lj_record_idx(J, &mix);
 1130|    493|    return !tref_isnil(ix->mobj);  /* 1 if metamethod found, 0 if not. */
  ------------------
  |  |  511|    493|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|    493|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
 1131|    493|  }
 1132|  1.38k|  return 0;  /* No metamethod. */
 1133|  1.88k|}
lj_record_idx:
 1503|  16.1k|{
 1504|  16.1k|  TRef xref;
 1505|  16.1k|  IROp xrefop, loadop;
 1506|  16.1k|  IRRef rbref;
 1507|  16.1k|  IRType1 rbguard;
 1508|  16.1k|  cTValue *oldv;
 1509|       |
 1510|  16.2k|  while (!tref_istab(ix->tab)) { /* Handle non-table lookup. */
  ------------------
  |  |  518|  16.2k|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|  16.2k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (1510:10): [True: 42, False: 16.2k]
  ------------------
 1511|       |    /* Never call raw lj_record_idx() on non-table. */
 1512|     42|    lj_assertJ(ix->idxchain != 0, "bad usage");
  ------------------
  |  |  527|     42|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     42|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     42|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 42, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     42|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1513|     42|    if (!lj_record_mm_lookup(J, ix, ix->val ? MM_newindex : MM_index))
  ------------------
  |  Branch (1513:9): [True: 0, False: 42]
  |  Branch (1513:37): [True: 0, False: 42]
  ------------------
 1514|      0|      lj_trace_err(J, LJ_TRERR_NOMM);
 1515|    121|  handlemm:
 1516|    121|    if (tref_isfunc(ix->mobj)) {  /* Handle metamethod call. */
  ------------------
  |  |  516|    121|#define tref_isfunc(tr)		(tref_istype((tr), IRT_FUNC))
  |  |  ------------------
  |  |  |  |  510|    121|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (516:26): [True: 17, False: 104]
  |  |  ------------------
  ------------------
 1517|     17|      BCReg func = rec_mm_prep(J, ix->val ? lj_cont_nop : lj_cont_ra);
  ------------------
  |  Branch (1517:35): [True: 0, False: 17]
  ------------------
 1518|     17|      TRef *base = J->base + func + LJ_FR2;
  ------------------
  |  |  569|     17|#define LJ_FR2			1
  ------------------
 1519|     17|      TValue *tv = J->L->base + func + LJ_FR2;
  ------------------
  |  |  569|     17|#define LJ_FR2			1
  ------------------
 1520|     17|      base[-LJ_FR2] = ix->mobj; base[1] = ix->tab; base[2] = ix->key;
  ------------------
  |  |  569|     17|#define LJ_FR2			1
  ------------------
 1521|     17|      setfuncV(J->L, tv-LJ_FR2, funcV(&ix->mobjv));
  ------------------
  |  |  569|     17|#define LJ_FR2			1
  ------------------
                    setfuncV(J->L, tv-LJ_FR2, funcV(&ix->mobjv));
  ------------------
  |  |  860|     17|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|     17|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     17|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     17|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 17, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     17|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1522|      0|      copyTV(J->L, tv+1, &ix->tabv);
 1523|     17|      copyTV(J->L, tv+2, &ix->keyv);
 1524|     17|      if (ix->val) {
  ------------------
  |  Branch (1524:11): [True: 0, False: 17]
  ------------------
 1525|      0|	base[3] = ix->val;
 1526|      0|	copyTV(J->L, tv+3, &ix->valv);
 1527|      0|	lj_record_call(J, func, 3);  /* mobj(tab, key, val) */
 1528|      0|	return 0;
 1529|     17|      } else {
 1530|     17|	lj_record_call(J, func, 2);  /* res = mobj(tab, key) */
 1531|     17|	return 0;  /* No result yet. */
 1532|     17|      }
 1533|     17|    }
 1534|    104|#if LJ_HASBUFFER
 1535|       |    /* The index table of buffer objects is treated as immutable. */
 1536|    104|    if (ix->mt == TREF_NIL && !ix->val &&
  ------------------
  |  |  535|    208|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|    104|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|    104|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1536:9): [True: 0, False: 104]
  |  Branch (1536:31): [True: 0, False: 0]
  ------------------
 1537|    104|	tref_isudata(ix->tab) && udataV(&ix->tabv)->udtype == UDTYPE_BUFFER &&
  ------------------
  |  |  519|    104|#define tref_isudata(tr)	(tref_istype((tr), IRT_UDATA))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (519:26): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	tref_isudata(ix->tab) && udataV(&ix->tabv)->udtype == UDTYPE_BUFFER &&
  ------------------
  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1537:27): [True: 0, False: 0]
  ------------------
 1538|    104|	tref_istab(ix->mobj) && tref_isstr(ix->key) && tref_isk(ix->key)) {
  ------------------
  |  |  518|    104|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	tref_istab(ix->mobj) && tref_isstr(ix->key) && tref_isk(ix->key)) {
  ------------------
  |  |  515|    104|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	tref_istab(ix->mobj) && tref_isstr(ix->key) && tref_isk(ix->key)) {
  ------------------
  |  |  531|      0|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1539|      0|      cTValue *val = lj_tab_getstr(tabV(&ix->mobjv), strV(&ix->keyv));
  ------------------
  |  |  864|      0|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    cTValue *val = lj_tab_getstr(tabV(&ix->mobjv), strV(&ix->keyv));
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1540|      0|      TRef tr = lj_record_constify(J, val);
 1541|      0|      if (tr) return tr;  /* Specialize to the value, i.e. a method. */
  ------------------
  |  Branch (1541:11): [True: 0, False: 0]
  ------------------
 1542|      0|    }
 1543|    104|#endif
 1544|       |    /* Otherwise retry lookup with metaobject. */
 1545|    104|    ix->tab = ix->mobj;
 1546|    104|    copyTV(J->L, &ix->tabv, &ix->mobjv);
 1547|    104|    if (--ix->idxchain == 0)
  ------------------
  |  Branch (1547:9): [True: 0, False: 104]
  ------------------
 1548|      0|      lj_trace_err(J, LJ_TRERR_IDXLOOP);
 1549|    104|  }
 1550|       |
 1551|       |  /* First catch nil and NaN keys for tables. */
 1552|  16.2k|  if (tvisnil(&ix->keyv) || (tvisnum(&ix->keyv) && tvisnan(&ix->keyv))) {
  ------------------
  |  |  782|  32.4k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 16.2k]
  |  |  ------------------
  ------------------
                if (tvisnil(&ix->keyv) || (tvisnum(&ix->keyv) && tvisnan(&ix->keyv))) {
  ------------------
  |  |  804|  32.4k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  16.2k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  16.2k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  16.2k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 1.24k, False: 14.9k]
  |  |  ------------------
  ------------------
                if (tvisnil(&ix->keyv) || (tvisnum(&ix->keyv) && tvisnan(&ix->keyv))) {
  ------------------
  |  |  812|  1.24k|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 1.24k]
  |  |  ------------------
  ------------------
 1553|      0|    if (ix->val)  /* Better fail early. */
  ------------------
  |  Branch (1553:9): [True: 0, False: 0]
  ------------------
 1554|      0|      lj_trace_err(J, LJ_TRERR_STORENN);
 1555|      0|    if (tref_isk(ix->key)) {
  ------------------
  |  |  531|      0|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1556|      0|      if (ix->idxchain && lj_record_mm_lookup(J, ix, MM_index))
  ------------------
  |  Branch (1556:11): [True: 0, False: 0]
  |  Branch (1556:27): [True: 0, False: 0]
  ------------------
 1557|      0|	goto handlemm;
 1558|      0|      return TREF_NIL;
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1559|      0|    }
 1560|      0|  }
 1561|       |
 1562|       |  /* Record the key lookup. */
 1563|  16.2k|  xref = rec_idx_key(J, ix, &rbref, &rbguard);
 1564|  16.2k|  xrefop = IR(tref_ref(xref))->o;
  ------------------
  |  |   39|  16.2k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
 1565|  16.2k|  loadop = xrefop == IR_AREF ? IR_ALOAD : IR_HLOAD;
  ------------------
  |  Branch (1565:12): [True: 934, False: 15.2k]
  ------------------
 1566|       |  /* The lj_meta_tset() inconsistency is gone, but better play safe. */
 1567|  16.2k|  oldv = xrefop == IR_KKPTR ? (cTValue *)ir_kptr(IR(tref_ref(xref))) : ix->oldv;
  ------------------
  |  |  596|     76|  check_exp((ir)->o == IR_KPTR || (ir)->o == IR_KKPTR, \
  |  |  ------------------
  |  |  |  |  367|     76|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|     76|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    152|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 76]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 76, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|     76|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1567:10): [True: 76, False: 16.1k]
  ------------------
 1568|       |
 1569|  16.2k|  if (ix->val == 0) {  /* Indexed load */
  ------------------
  |  Branch (1569:7): [True: 14.2k, False: 1.97k]
  ------------------
 1570|  14.2k|    IRType t = itype2irt(oldv);
 1571|  14.2k|    TRef res;
 1572|  14.2k|    if (oldv == niltvg(J2G(J))) {
  ------------------
  |  |  669|  14.2k|  check_exp(tvisnil(&(g)->nilnode.val), &(g)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  14.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  14.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  14.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 14.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  14.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1572:9): [True: 864, False: 13.3k]
  ------------------
 1573|    864|      emitir(IRTG(IR_EQ, IRT_PGC), xref, lj_ir_kkptr(J, niltvg(J2G(J))));
  ------------------
  |  |   42|    864|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  1.72k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:55): [True: 864, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1574|    864|      res = TREF_NIL;
  ------------------
  |  |  535|    864|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|    864|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|    864|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1575|  13.3k|    } else {
 1576|  13.3k|      res = emitir(IRTG(loadop, t), xref, 0);
  ------------------
  |  |   42|  13.3k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  13.3k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1577|  13.3k|    }
 1578|  14.2k|    if (tref_ref(res) < rbref) {  /* HREFK + load forwarded? */
  ------------------
  |  |  504|  14.2k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  |  Branch (1578:9): [True: 1.35k, False: 12.8k]
  ------------------
 1579|  1.35k|      lj_ir_rollback(J, rbref);  /* Rollback to eliminate hmask guard. */
 1580|  1.35k|      J->guardemit = rbguard;
 1581|  1.35k|    }
 1582|  14.2k|    if (t == IRT_NIL && ix->idxchain && lj_record_mm_lookup(J, ix, MM_index))
  ------------------
  |  Branch (1582:9): [True: 912, False: 13.3k]
  |  Branch (1582:25): [True: 886, False: 26]
  |  Branch (1582:41): [True: 79, False: 807]
  ------------------
 1583|     79|      goto handlemm;
 1584|  14.1k|    if (irtype_ispri(t)) res = TREF_PRI(t);  /* Canonicalize primitives. */
  ------------------
  |  |  353|  14.1k|#define irtype_ispri(irt)	((uint32_t)(irt) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  Branch (353:27): [True: 844, False: 13.3k]
  |  |  ------------------
  ------------------
                  if (irtype_ispri(t)) res = TREF_PRI(t);  /* Canonicalize primitives. */
  ------------------
  |  |  534|    844|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|    844|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
 1585|  14.1k|    return res;
 1586|  14.2k|  } else {  /* Indexed store. */
 1587|  1.97k|    GCtab *mt = tabref(tabV(&ix->tabv)->metatable);
  ------------------
  |  |  514|  1.97k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  3.95k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (67:29): [True: 1.83k, False: 140]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1588|  1.83k|    int keybarrier = tref_isgcv(ix->key) && !tref_isnil(ix->val);
  ------------------
  |  |  529|  3.67k|#define tref_isgcv(tr)		(tref_typerange((tr), IRT_STR, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  508|  1.83k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (529:25): [True: 1.31k, False: 522]
  |  |  ------------------
  ------------------
                  int keybarrier = tref_isgcv(ix->key) && !tref_isnil(ix->val);
  ------------------
  |  |  511|  1.31k|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|  1.31k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (1588:45): [True: 1.26k, False: 52]
  ------------------
 1589|  1.83k|    if (tref_ref(xref) < rbref) {  /* HREFK forwarded? */
  ------------------
  |  |  504|  1.83k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  |  Branch (1589:9): [True: 827, False: 1.01k]
  ------------------
 1590|    827|      lj_ir_rollback(J, rbref);  /* Rollback to eliminate hmask guard. */
 1591|    827|      J->guardemit = rbguard;
 1592|    827|    }
 1593|  1.83k|    if (tvisnil(oldv)) {  /* Previous value was nil? */
  ------------------
  |  |  782|  1.83k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 560, False: 1.27k]
  |  |  ------------------
  ------------------
 1594|       |      /* Need to duplicate the hasmm check for the early guards. */
 1595|    560|      int hasmm = 0;
 1596|    560|      if (ix->idxchain && mt) {
  ------------------
  |  Branch (1596:11): [True: 560, False: 0]
  |  Branch (1596:27): [True: 0, False: 560]
  ------------------
 1597|      0|	cTValue *mo = lj_tab_getstr(mt, mmname_str(J2G(J), MM_newindex));
  ------------------
  |  |  590|      0|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|      0|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|      0|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1598|      0|	hasmm = mo && !tvisnil(mo);
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (1598:10): [True: 0, False: 0]
  |  Branch (1598:16): [True: 0, False: 0]
  ------------------
 1599|      0|      }
 1600|    560|      if (hasmm)
  ------------------
  |  Branch (1600:11): [True: 0, False: 560]
  ------------------
 1601|      0|	emitir(IRTG(loadop, IRT_NIL), xref, 0);  /* Guard for nil value. */
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1602|    560|      else if (xrefop == IR_HREF)
  ------------------
  |  Branch (1602:16): [True: 124, False: 436]
  ------------------
 1603|    124|	emitir(IRTG(oldv == niltvg(J2G(J)) ? IR_EQ : IR_NE, IRT_PGC),
  ------------------
  |  |   42|    124|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    620|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 124, False: 0]
  |  |  |  |  |  Branch (26:28): [True: 124, False: 0]
  |  |  |  |  |  Branch (26:55): [True: 124, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1604|    560|	       xref, lj_ir_kkptr(J, niltvg(J2G(J))));
 1605|    560|      if (ix->idxchain && lj_record_mm_lookup(J, ix, MM_newindex)) {
  ------------------
  |  Branch (1605:11): [True: 560, False: 0]
  |  Branch (1605:27): [True: 0, False: 560]
  ------------------
 1606|      0|	lj_assertJ(hasmm, "inconsistent metamethod handling");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1607|      0|	goto handlemm;
 1608|      0|      }
 1609|    560|      lj_assertJ(!hasmm, "inconsistent metamethod handling");
  ------------------
  |  |  527|    560|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    560|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    560|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 560, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    560|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1610|    560|      if (oldv == niltvg(J2G(J))) {  /* Need to insert a new key. */
  ------------------
  |  |  669|    560|  check_exp(tvisnil(&(g)->nilnode.val), &(g)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|    560|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    560|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    560|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 560, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    560|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1610:11): [True: 147, False: 413]
  ------------------
 1611|    147|	TRef key = ix->key;
 1612|    147|	if (tref_isinteger(key)) {  /* NEWREF needs a TValue as a key. */
  ------------------
  |  |  526|    147|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|    147|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 16, False: 131]
  |  |  ------------------
  ------------------
 1613|     16|	  key = emitir(IRTN(IR_CONV), key, IRCONV_NUM_INT);
  ------------------
  |  |   42|     16|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     16|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1614|    131|	} else if (tref_isnum(key)) {
  ------------------
  |  |  520|    131|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|    131|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (520:25): [True: 122, False: 9]
  |  |  ------------------
  ------------------
 1615|    122|	  if (tref_isk(key)) {
  ------------------
  |  |  531|    122|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|    122|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 0, False: 122]
  |  |  ------------------
  ------------------
 1616|      0|	    if (tvismzero(&ix->keyv))
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  |  |  |  Branch (819:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1617|      0|	      key = lj_ir_knum_zero(J);  /* Canonicalize -0.0 to +0.0. */
  ------------------
  |  |   79|      0|#define lj_ir_knum_zero(J)	lj_ir_knum_u64(J, U64x(00000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
 1618|    122|	  } else {
 1619|    122|	    emitir(IRTG(IR_EQ, IRT_NUM), key, key);  /* Check for !NaN. */
  ------------------
  |  |   42|    122|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    122|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1620|    122|	  }
 1621|    122|	}
 1622|    147|	xref = emitir(IRT(IR_NEWREF, IRT_PGC), ix->tab, key);
  ------------------
  |  |   42|    147|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    147|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1623|    147|	keybarrier = 0;  /* NEWREF already takes care of the key barrier. */
 1624|       |#ifdef LUAJIT_ENABLE_TABLE_BUMP
 1625|       |	if ((J->flags & JIT_F_OPT_SINK))  /* Avoid a separate flag. */
 1626|       |	  rec_idx_bump(J, ix);
 1627|       |#endif
 1628|    147|      }
 1629|  1.27k|    } else if (!lj_opt_fwd_wasnonnil(J, loadop, tref_ref(xref))) {
  ------------------
  |  |  504|  1.27k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  |  Branch (1629:16): [True: 494, False: 784]
  ------------------
 1630|       |      /* Cannot derive that the previous value was non-nil, must do checks. */
 1631|    494|      if (xrefop == IR_HREF)  /* Guard against store to niltv. */
  ------------------
  |  Branch (1631:11): [True: 0, False: 494]
  ------------------
 1632|      0|	emitir(IRTG(IR_NE, IRT_PGC), xref, lj_ir_kkptr(J, niltvg(J2G(J))));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:55): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1633|    494|      if (ix->idxchain) {  /* Metamethod lookup required? */
  ------------------
  |  Branch (1633:11): [True: 494, False: 0]
  ------------------
 1634|       |	/* A check for NULL metatable is cheaper (hoistable) than a load. */
 1635|    494|	if (!mt) {
  ------------------
  |  Branch (1635:6): [True: 492, False: 2]
  ------------------
 1636|    492|	  TRef mtref = emitir(IRT(IR_FLOAD, IRT_TAB), ix->tab, IRFL_TAB_META);
  ------------------
  |  |   42|    492|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    492|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1637|    492|	  emitir(IRTG(IR_EQ, IRT_TAB), mtref, lj_ir_knull(J, IRT_TAB));
  ------------------
  |  |   42|    492|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    492|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1638|    492|	} else {
 1639|      2|	  IRType t = itype2irt(oldv);
 1640|      2|	  emitir(IRTG(loadop, t), xref, 0);  /* Guard for non-nil value. */
  ------------------
  |  |   42|      2|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      2|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1641|      2|	}
 1642|    494|      }
 1643|    784|    } else {
 1644|    784|      keybarrier = 0;  /* Previous non-nil value kept the key alive. */
 1645|    784|    }
 1646|       |    /* Convert int to number before storing. */
 1647|  1.83k|    if (!LJ_DUALNUM && tref_isinteger(ix->val))
  ------------------
  |  |  549|  3.67k|#define LJ_DUALNUM		0
  ------------------
                  if (!LJ_DUALNUM && tref_isinteger(ix->val))
  ------------------
  |  |  526|  1.83k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  1.83k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 381, False: 1.45k]
  |  |  ------------------
  ------------------
  |  Branch (1647:9): [Folded - Ignored]
  ------------------
 1648|    381|      ix->val = emitir(IRTN(IR_CONV), ix->val, IRCONV_NUM_INT);
  ------------------
  |  |   42|    381|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    381|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1649|  1.83k|    emitir(IRT(loadop+IRDELTA_L2S, tref_type(ix->val)), xref, ix->val);
  ------------------
  |  |   42|  1.83k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  1.83k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1650|  1.83k|    if (keybarrier || tref_isgcv(ix->val))
  ------------------
  |  |  529|  1.36k|#define tref_isgcv(tr)		(tref_typerange((tr), IRT_STR, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  508|  1.36k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (529:25): [True: 277, False: 1.09k]
  |  |  ------------------
  ------------------
  |  Branch (1650:9): [True: 471, False: 1.36k]
  ------------------
 1651|    748|      emitir(IRT(IR_TBAR, IRT_NIL), ix->tab, 0);
  ------------------
  |  |   42|    748|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    748|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1652|       |    /* Invalidate neg. metamethod cache for stores with certain string keys. */
 1653|  1.83k|    if (!nommstr(J, ix->key)) {
  ------------------
  |  Branch (1653:9): [True: 0, False: 1.83k]
  ------------------
 1654|      0|      TRef fref = emitir(IRT(IR_FREF, IRT_PGC), ix->tab, IRFL_TAB_NOMM);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1655|      0|      emitir(IRT(IR_FSTORE, IRT_U8), fref, lj_ir_kint(J, 0));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1656|      0|    }
 1657|  1.83k|    J->needsnap = 1;
 1658|  1.83k|    return 0;
 1659|  1.83k|  }
 1660|  16.2k|}
lj_record_next:
 1681|    303|{
 1682|    303|  IRType t, tkey, tval;
 1683|    303|  TRef trvk;
 1684|    303|  t = rec_next_types(tabV(&ix->tabv), ix->keyv.u32.lo);
  ------------------
  |  |  864|    303|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|    303|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    303|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    303|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 303, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    303|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1685|      0|  tkey = (t & 0xff); tval = (t >> 8);
 1686|    303|  trvk = lj_ir_call(J, IRCALL_lj_vm_next, ix->tab, ix->key);
 1687|    303|  if (ix->mobj || tkey == IRT_NIL) {
  ------------------
  |  Branch (1687:7): [True: 300, False: 3]
  |  Branch (1687:19): [True: 0, False: 3]
  ------------------
 1688|    300|    TRef idx = emitir(IRTI(IR_HIOP), trvk, trvk);
  ------------------
  |  |   42|    300|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    300|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1689|       |    /* Always check for invalid key from next() for nil result. */
 1690|    300|    if (!ix->mobj) emitir(IRTGI(IR_NE), idx, lj_ir_kint(J, -1));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  |  Branch (1690:9): [True: 0, False: 300]
  ------------------
 1691|    300|    ix->mobj = idx;
 1692|    300|  }
 1693|    303|  ix->key = lj_record_vload(J, trvk, 1, tkey);
 1694|    303|  if (tkey == IRT_NIL || ix->idxchain) {  /* Omit value type check. */
  ------------------
  |  Branch (1694:7): [True: 73, False: 230]
  |  Branch (1694:26): [True: 0, False: 230]
  ------------------
 1695|     73|    ix->val = TREF_NIL;
  ------------------
  |  |  535|     73|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|     73|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|     73|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1696|     73|    return 1;
 1697|    230|  } else {  /* Need value. */
 1698|    230|    ix->val = lj_record_vload(J, trvk, 0, tval);
 1699|    230|    return 2;
 1700|    230|  }
 1701|    303|}
lj_record_ins:
 2194|   486k|{
 2195|   486k|  cTValue *lbase;
 2196|   486k|  RecordIndex ix;
 2197|   486k|  const BCIns *pc;
 2198|   486k|  BCIns ins;
 2199|   486k|  BCOp op;
 2200|   486k|  TRef ra, rb, rc;
 2201|       |
 2202|       |  /* Perform post-processing action before recording the next instruction. */
 2203|   486k|  if (LJ_UNLIKELY(J->postproc != LJ_POST_NONE)) {
  ------------------
  |  |  146|   486k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 36.9k, False: 449k]
  |  |  ------------------
  ------------------
 2204|  36.9k|    switch (J->postproc) {
 2205|      0|    case LJ_POST_FIXCOMP:  /* Fixup comparison. */
  ------------------
  |  Branch (2205:5): [True: 0, False: 36.9k]
  ------------------
 2206|      0|      pc = (const BCIns *)(uintptr_t)J2G(J)->tmptv.u64;
  ------------------
  |  |  115|      0|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2207|      0|      rec_comp_fixup(J, pc, (!tvistruecond(&J2G(J)->tmptv2) ^ (bc_op(*pc)&1)));
  ------------------
  |  |  806|      0|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      0|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    rec_comp_fixup(J, pc, (!tvistruecond(&J2G(J)->tmptv2) ^ (bc_op(*pc)&1)));
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 2208|       |      /* fallthrough */
 2209|      0|    case LJ_POST_FIXGUARD:  /* Fixup and emit pending guard. */
  ------------------
  |  Branch (2209:5): [True: 0, False: 36.9k]
  ------------------
 2210|      0|    case LJ_POST_FIXGUARDSNAP:  /* Fixup and emit pending guard and snapshot. */
  ------------------
  |  Branch (2210:5): [True: 0, False: 36.9k]
  ------------------
 2211|      0|      if (!tvistruecond(&J2G(J)->tmptv2)) {
  ------------------
  |  |  806|      0|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      0|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2211:11): [True: 0, False: 0]
  ------------------
 2212|      0|	J->fold.ins.o ^= 1;  /* Flip guard to opposite. */
 2213|      0|	if (J->postproc == LJ_POST_FIXGUARDSNAP) {
  ------------------
  |  Branch (2213:6): [True: 0, False: 0]
  ------------------
 2214|      0|	  SnapShot *snap = &J->cur.snap[J->cur.nsnap-1];
 2215|      0|	  J->cur.snapmap[snap->mapofs+snap->nent-1]--;  /* False -> true. */
 2216|      0|	}
 2217|      0|      }
 2218|      0|      lj_opt_fold(J);  /* Emit pending guard. */
 2219|       |      /* fallthrough */
 2220|      0|    case LJ_POST_FIXBOOL:
  ------------------
  |  Branch (2220:5): [True: 0, False: 36.9k]
  ------------------
 2221|      0|      if (!tvistruecond(&J2G(J)->tmptv2)) {
  ------------------
  |  |  806|      0|#define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistruecond(o)	(itype(o) < LJ_TISTRUECOND)
  |  |  ------------------
  |  |  |  |  282|      0|#define LJ_TISTRUECOND		LJ_TFALSE
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2221:11): [True: 0, False: 0]
  ------------------
 2222|      0|	BCReg s;
 2223|      0|	TValue *tv = J->L->base;
 2224|      0|	for (s = 0; s < J->maxslot; s++)  /* Fixup stack slot (if any). */
  ------------------
  |  Branch (2224:14): [True: 0, False: 0]
  ------------------
 2225|      0|	  if (J->base[s] == TREF_TRUE && tvisfalse(&tv[s])) {
  ------------------
  |  |  537|      0|#define TREF_TRUE		(TREF_PRI(IRT_TRUE))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	  if (J->base[s] == TREF_TRUE && tvisfalse(&tv[s])) {
  ------------------
  |  |  787|      0|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  ------------------
  |  |  |  |  261|      0|#define LJ_TFALSE		(~1u)
  |  |  ------------------
  |  |  |  Branch (787:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2225:8): [True: 0, False: 0]
  ------------------
 2226|      0|	    J->base[s] = TREF_FALSE;
  ------------------
  |  |  536|      0|#define TREF_FALSE		(TREF_PRI(IRT_FALSE))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2227|      0|	    break;
 2228|      0|	  }
 2229|      0|      }
 2230|      0|      break;
 2231|      0|    case LJ_POST_FIXCONST:
  ------------------
  |  Branch (2231:5): [True: 0, False: 36.9k]
  ------------------
 2232|      0|      {
 2233|      0|	BCReg s;
 2234|      0|	TValue *tv = J->L->base;
 2235|      0|	for (s = 0; s < J->maxslot; s++)  /* Constify stack slots (if any). */
  ------------------
  |  Branch (2235:14): [True: 0, False: 0]
  ------------------
 2236|      0|	  if (J->base[s] == TREF_NIL && !tvisnil(&tv[s]))
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	  if (J->base[s] == TREF_NIL && !tvisnil(&tv[s]))
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (2236:8): [True: 0, False: 0]
  |  Branch (2236:34): [True: 0, False: 0]
  ------------------
 2237|      0|	    J->base[s] = lj_record_constify(J, &tv[s]);
 2238|      0|      }
 2239|      0|      break;
 2240|  36.9k|    case LJ_POST_FFRETRY:  /* Suppress recording of retried fast function. */
  ------------------
  |  Branch (2240:5): [True: 36.9k, False: 0]
  ------------------
 2241|  36.9k|      if (bc_op(*J->pc) >= BC__MAX)
  ------------------
  |  |   34|  36.9k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2241:11): [True: 0, False: 36.9k]
  ------------------
 2242|      0|	return;
 2243|  36.9k|      break;
 2244|  36.9k|    default: lj_assertJ(0, "bad post-processing mode"); break;
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2244:5): [True: 0, False: 36.9k]
  ------------------
 2245|  36.9k|    }
 2246|  36.9k|    J->postproc = LJ_POST_NONE;
 2247|  36.9k|  }
 2248|       |
 2249|       |  /* Need snapshot before recording next bytecode (e.g. after a store). */
 2250|   486k|  if (J->needsnap) {
  ------------------
  |  Branch (2250:7): [True: 45.7k, False: 440k]
  ------------------
 2251|  45.7k|    J->needsnap = 0;
 2252|  45.7k|    if (J->pt) lj_snap_purge(J);
  ------------------
  |  Branch (2252:9): [True: 45.7k, False: 2]
  ------------------
 2253|  45.7k|    lj_snap_add(J);
 2254|  45.7k|    J->mergesnap = 1;
 2255|  45.7k|  }
 2256|       |
 2257|       |  /* Skip some bytecodes. */
 2258|   486k|  if (LJ_UNLIKELY(J->bcskip > 0)) {
  ------------------
  |  |  146|   486k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 486k]
  |  |  ------------------
  ------------------
 2259|      0|    J->bcskip--;
 2260|      0|    return;
 2261|      0|  }
 2262|       |
 2263|       |  /* Record only closed loops for root traces. */
 2264|   486k|  pc = J->pc;
 2265|   486k|  if (J->framedepth == 0 &&
  ------------------
  |  Branch (2265:7): [True: 274k, False: 211k]
  ------------------
 2266|   486k|     (MSize)((char *)pc - (char *)J->bc_min) >= J->bc_extent)
  ------------------
  |  Branch (2266:6): [True: 66, False: 274k]
  ------------------
 2267|     66|    lj_trace_err(J, LJ_TRERR_LLEAVE);
 2268|       |
 2269|   486k|#ifdef LUA_USE_ASSERT
 2270|   486k|  rec_check_slots(J);
 2271|   486k|  rec_check_ir(J);
 2272|   486k|#endif
 2273|       |
 2274|   486k|#if LJ_HASPROFILE
 2275|   486k|  rec_profile_ins(J, pc);
 2276|   486k|#endif
 2277|       |
 2278|       |  /* Keep a copy of the runtime values of var/num/str operands. */
 2279|   486k|#define rav	(&ix.valv)
 2280|   486k|#define rbv	(&ix.tabv)
 2281|   486k|#define rcv	(&ix.keyv)
 2282|       |
 2283|   486k|  lbase = J->L->base;
 2284|   486k|  ins = *pc;
 2285|   486k|  op = bc_op(ins);
  ------------------
  |  |   34|   486k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 2286|   486k|  ra = bc_a(ins);
  ------------------
  |  |   35|   486k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
 2287|   486k|  ix.val = 0;
 2288|   486k|  switch (bcmode_a(op)) {
  ------------------
  |  |  246|   486k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
 2289|  26.6k|  case BCMvar:
  ------------------
  |  Branch (2289:3): [True: 26.6k, False: 459k]
  ------------------
 2290|  26.6k|    copyTV(J->L, rav, &lbase[ra]); ix.val = ra = getslot(J, ra); break;
  ------------------
  |  | 2279|  26.6k|#define rav	(&ix.valv)
  ------------------
                  copyTV(J->L, rav, &lbase[ra]); ix.val = ra = getslot(J, ra); break;
  ------------------
  |  |  211|  26.6k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 25.2k, False: 1.41k]
  |  |  ------------------
  ------------------
 2291|   459k|  default: break;  /* Handled later. */
  ------------------
  |  Branch (2291:3): [True: 459k, False: 26.6k]
  ------------------
 2292|   486k|  }
 2293|   486k|  rb = bc_b(ins);
  ------------------
  |  |   36|   486k|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
 2294|   486k|  rc = bc_c(ins);
  ------------------
  |  |   37|   486k|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
 2295|   486k|  switch (bcmode_b(op)) {
  ------------------
  |  |  247|   486k|#define bcmode_b(op)	((BCMode)((lj_bc_mode[op]>>3) & 15))
  ------------------
 2296|   345k|  case BCMnone: rb = 0; rc = bc_d(ins); break;  /* Upgrade rc to 'rd'. */
  ------------------
  |  |   38|   345k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2296:3): [True: 345k, False: 140k]
  ------------------
 2297|  61.0k|  case BCMvar:
  ------------------
  |  Branch (2297:3): [True: 61.0k, False: 425k]
  ------------------
 2298|  61.0k|    copyTV(J->L, rbv, &lbase[rb]); ix.tab = rb = getslot(J, rb); break;
  ------------------
  |  | 2280|  61.0k|#define rbv	(&ix.tabv)
  ------------------
                  copyTV(J->L, rbv, &lbase[rb]); ix.tab = rb = getslot(J, rb); break;
  ------------------
  |  |  211|  61.0k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 49.7k, False: 11.3k]
  |  |  ------------------
  ------------------
 2299|  79.5k|  default: break;  /* Handled later. */
  ------------------
  |  Branch (2299:3): [True: 79.5k, False: 406k]
  ------------------
 2300|   486k|  }
 2301|   486k|  switch (bcmode_c(op)) {
  ------------------
  |  |  248|   486k|#define bcmode_c(op)	((BCMode)((lj_bc_mode[op]>>7) & 15))
  ------------------
 2302|   136k|  case BCMvar:
  ------------------
  |  Branch (2302:3): [True: 136k, False: 349k]
  ------------------
 2303|   136k|    copyTV(J->L, rcv, &lbase[rc]); ix.key = rc = getslot(J, rc); break;
  ------------------
  |  | 2281|   136k|#define rcv	(&ix.keyv)
  ------------------
                  copyTV(J->L, rcv, &lbase[rc]); ix.key = rc = getslot(J, rc); break;
  ------------------
  |  |  211|   136k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 104k, False: 31.7k]
  |  |  ------------------
  ------------------
 2304|    277|  case BCMpri: setpriV(rcv, ~rc); ix.key = rc = TREF_PRI(IRT_NIL+rc); break;
  ------------------
  |  |  873|    277|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
                case BCMpri: setpriV(rcv, ~rc); ix.key = rc = TREF_PRI(IRT_NIL+rc); break;
  ------------------
  |  |  534|    277|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|    277|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
  |  Branch (2304:3): [True: 277, False: 485k]
  ------------------
 2305|  37.6k|  case BCMnum: { cTValue *tv = proto_knumtv(J->pt, rc);
  ------------------
  |  |  419|  37.6k|  check_exp((uintptr_t)(idx) < (pt)->sizekn, &mref((pt)->k, TValue)[(idx)])
  |  |  ------------------
  |  |  |  |  367|  37.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  37.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  37.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 37.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  37.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2305:3): [True: 37.6k, False: 448k]
  ------------------
 2306|  37.6k|    copyTV(J->L, rcv, tv); ix.key = rc = tvisint(tv) ? lj_ir_kint(J, intV(tv)) :
  ------------------
  |  | 2281|  37.6k|#define rcv	(&ix.keyv)
  ------------------
                  copyTV(J->L, rcv, tv); ix.key = rc = tvisint(tv) ? lj_ir_kint(J, intV(tv)) :
  ------------------
  |  |  803|  37.6k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  75.2k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  copyTV(J->L, rcv, tv); ix.key = rc = tvisint(tv) ? lj_ir_kint(J, intV(tv)) :
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2307|  37.6k|    tv->u32.hi == LJ_KEYINDEX ? (lj_ir_kint(J, 0) | TREF_KEYINDEX) :
  ------------------
  |  |  288|  37.6k|#define LJ_KEYINDEX		0xfffe7fffu
  ------------------
                  tv->u32.hi == LJ_KEYINDEX ? (lj_ir_kint(J, 0) | TREF_KEYINDEX) :
  ------------------
  |  |  500|      0|#define TREF_KEYINDEX		0x00100000
  ------------------
  |  Branch (2307:5): [True: 0, False: 37.6k]
  ------------------
 2308|  37.6k|    lj_ir_knumint(J, numV(tv)); } break;
  ------------------
  |  |  866|  37.6k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  37.6k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  37.6k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  37.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 37.6k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  37.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2309|  47.3k|  case BCMstr: { GCstr *s = gco2str(proto_kgc(J->pt, ~(ptrdiff_t)rc));
  ------------------
  |  |  765|  47.3k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  94.7k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  47.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  94.7k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 47.3k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 47.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  47.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 47.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2309:3): [True: 47.3k, False: 438k]
  ------------------
 2310|  47.3k|    setstrV(J->L, rcv, s); ix.key = rc = lj_ir_kstr(J, s); } break;
  ------------------
  |  | 2281|  47.3k|#define rcv	(&ix.keyv)
  ------------------
                  setstrV(J->L, rcv, s); ix.key = rc = lj_ir_kstr(J, s); } break;
  ------------------
  |  |   72|  47.3k|#define lj_ir_kstr(J, str)	lj_ir_kgc(J, obj2gco((str)), IRT_STR)
  |  |  ------------------
  |  |  |  |  775|  47.3k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 2311|   264k|  default: break;  /* Handled later. */
  ------------------
  |  Branch (2311:3): [True: 264k, False: 222k]
  ------------------
 2312|   486k|  }
 2313|       |
 2314|   486k|  switch (op) {
 2315|       |
 2316|       |  /* -- Comparison ops ---------------------------------------------------- */
 2317|       |
 2318|  13.1k|  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
  ------------------
  |  Branch (2318:3): [True: 1, False: 486k]
  |  Branch (2318:17): [True: 12.6k, False: 473k]
  |  Branch (2318:31): [True: 0, False: 486k]
  |  Branch (2318:45): [True: 483, False: 485k]
  ------------------
 2319|  13.1k|#if LJ_HASFFI
 2320|  13.1k|    if (tref_iscdata(ra) || tref_iscdata(rc)) {
  ------------------
  |  |  517|  26.3k|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|  13.1k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
                  if (tref_iscdata(ra) || tref_iscdata(rc)) {
  ------------------
  |  |  517|  13.1k|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|  13.1k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 13.1k]
  |  |  ------------------
  ------------------
 2321|      0|      rec_mm_comp_cdata(J, &ix, op, ((int)op & 2) ? MM_le : MM_lt);
  ------------------
  |  Branch (2321:37): [True: 0, False: 0]
  ------------------
 2322|      0|      break;
 2323|      0|    }
 2324|  13.1k|#endif
 2325|       |    /* Emit nothing for two numeric or string consts. */
 2326|  13.1k|    if (!(tref_isk2(ra,rc) && tref_isnumber_str(ra) && tref_isnumber_str(rc))) {
  ------------------
  |  |  532|  26.3k|#define tref_isk2(tr1, tr2)	(irref_isk(tref_ref((tr1) | (tr2))))
  |  |  ------------------
  |  |  |  |  485|  13.1k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (532:29): [True: 1, False: 13.1k]
  |  |  ------------------
  ------------------
                  if (!(tref_isk2(ra,rc) && tref_isnumber_str(ra) && tref_isnumber_str(rc))) {
  ------------------
  |  |  528|  13.1k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|      2|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|      1|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (!(tref_isk2(ra,rc) && tref_isnumber_str(ra) && tref_isnumber_str(rc))) {
  ------------------
  |  |  528|      1|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|      2|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|      1|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 1, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2327|  13.1k|      IRType ta = tref_isinteger(ra) ? IRT_INT : tref_type(ra);
  ------------------
  |  |  526|  13.1k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  13.1k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 93, False: 13.0k]
  |  |  ------------------
  ------------------
                    IRType ta = tref_isinteger(ra) ? IRT_INT : tref_type(ra);
  ------------------
  |  |  506|  26.2k|#define tref_type(tr)		((IRType)(((tr)>>24) & IRT_TYPE))
  ------------------
 2328|  13.1k|      IRType tc = tref_isinteger(rc) ? IRT_INT : tref_type(rc);
  ------------------
  |  |  526|  13.1k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  13.1k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 12.6k, False: 480]
  |  |  ------------------
  ------------------
                    IRType tc = tref_isinteger(rc) ? IRT_INT : tref_type(rc);
  ------------------
  |  |  506|  13.6k|#define tref_type(tr)		((IRType)(((tr)>>24) & IRT_TYPE))
  ------------------
 2329|  13.1k|      int irop;
 2330|  13.1k|      if (ta != tc) {
  ------------------
  |  Branch (2330:11): [True: 12.7k, False: 393]
  ------------------
 2331|       |	/* Widen mixed number/int comparisons to number/number comparison. */
 2332|  12.7k|	if (ta == IRT_INT && tc == IRT_NUM) {
  ------------------
  |  Branch (2332:6): [True: 90, False: 12.6k]
  |  Branch (2332:23): [True: 90, False: 0]
  ------------------
 2333|     90|	  ra = emitir(IRTN(IR_CONV), ra, IRCONV_NUM_INT);
  ------------------
  |  |   42|     90|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     90|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2334|     90|	  ta = IRT_NUM;
 2335|  12.6k|	} else if (ta == IRT_NUM && tc == IRT_INT) {
  ------------------
  |  Branch (2335:13): [True: 12.6k, False: 0]
  |  Branch (2335:30): [True: 12.6k, False: 0]
  ------------------
 2336|  12.6k|	  rc = emitir(IRTN(IR_CONV), rc, IRCONV_NUM_INT);
  ------------------
  |  |   42|  12.6k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  12.6k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2337|  12.6k|	} else if (LJ_52) {
  ------------------
  |  |  697|      0|#define LJ_52			0
  |  |  ------------------
  |  |  |  Branch (697:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
 2338|      0|	  ta = IRT_NIL;  /* Force metamethod for different types. */
 2339|      0|	} else if (!((ta == IRT_FALSE || ta == IRT_TRUE) &&
  ------------------
  |  Branch (2339:16): [True: 0, False: 0]
  |  Branch (2339:35): [True: 0, False: 0]
  ------------------
 2340|      0|		     (tc == IRT_FALSE || tc == IRT_TRUE))) {
  ------------------
  |  Branch (2340:9): [True: 0, False: 0]
  |  Branch (2340:28): [True: 0, False: 0]
  ------------------
 2341|      0|	  break;  /* Interpreter will throw for two different types. */
 2342|      0|	}
 2343|  12.7k|      }
 2344|  13.1k|      rec_comp_prep(J);
 2345|  13.1k|      irop = (int)op - (int)BC_ISLT + (int)IR_LT;
 2346|  13.1k|      if (ta == IRT_NUM) {
  ------------------
  |  Branch (2346:11): [True: 13.1k, False: 3]
  ------------------
 2347|  13.1k|	if ((irop & 1)) irop ^= 4;  /* ISGE/ISGT are unordered. */
  ------------------
  |  Branch (2347:6): [True: 13.1k, False: 0]
  ------------------
 2348|  13.1k|	if (!lj_ir_numcmp(numberVnum(rav), numberVnum(rcv), (IROp)irop))
  ------------------
  |  | 2279|  13.1k|#define rav	(&ix.valv)
  ------------------
              	if (!lj_ir_numcmp(numberVnum(rav), numberVnum(rcv), (IROp)irop))
  ------------------
  |  | 2281|  13.1k|#define rcv	(&ix.keyv)
  ------------------
  |  Branch (2348:6): [True: 6.65k, False: 6.48k]
  ------------------
 2349|  6.65k|	  irop ^= 5;
 2350|  13.1k|      } else if (ta == IRT_INT) {
  ------------------
  |  Branch (2350:18): [True: 3, False: 0]
  ------------------
 2351|      3|	if (!lj_ir_numcmp(numberVnum(rav), numberVnum(rcv), (IROp)irop))
  ------------------
  |  | 2279|      3|#define rav	(&ix.valv)
  ------------------
              	if (!lj_ir_numcmp(numberVnum(rav), numberVnum(rcv), (IROp)irop))
  ------------------
  |  | 2281|      3|#define rcv	(&ix.keyv)
  ------------------
  |  Branch (2351:6): [True: 0, False: 3]
  ------------------
 2352|      0|	  irop ^= 1;
 2353|      3|      } else if (ta == IRT_STR) {
  ------------------
  |  Branch (2353:18): [True: 0, False: 0]
  ------------------
 2354|      0|	if (!lj_ir_strcmp(strV(rav), strV(rcv), (IROp)irop)) irop ^= 1;
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	if (!lj_ir_strcmp(strV(rav), strV(rcv), (IROp)irop)) irop ^= 1;
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2354:6): [True: 0, False: 0]
  ------------------
 2355|      0|	ra = lj_ir_call(J, IRCALL_lj_str_cmp, ra, rc);
 2356|      0|	rc = lj_ir_kint(J, 0);
 2357|      0|	ta = IRT_INT;
 2358|      0|      } else {
 2359|      0|	rec_mm_comp(J, &ix, (int)op);
 2360|      0|	break;
 2361|      0|      }
 2362|  13.1k|      emitir(IRTG(irop, ta), ra, rc);
  ------------------
  |  |   42|  13.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  13.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2363|  13.1k|      rec_comp_fixup(J, J->pc, ((int)op ^ irop) & 1);
 2364|  13.1k|    }
 2365|  13.1k|    break;
 2366|       |
 2367|  13.1k|  case BC_ISEQV: case BC_ISNEV:
  ------------------
  |  Branch (2367:3): [True: 26, False: 486k]
  |  Branch (2367:18): [True: 11.0k, False: 475k]
  ------------------
 2368|  11.1k|  case BC_ISEQS: case BC_ISNES:
  ------------------
  |  Branch (2368:3): [True: 0, False: 486k]
  |  Branch (2368:18): [True: 60, False: 486k]
  ------------------
 2369|  11.4k|  case BC_ISEQN: case BC_ISNEN:
  ------------------
  |  Branch (2369:3): [True: 1, False: 486k]
  |  Branch (2369:18): [True: 275, False: 485k]
  ------------------
 2370|  11.4k|  case BC_ISEQP: case BC_ISNEP:
  ------------------
  |  Branch (2370:3): [True: 9, False: 486k]
  |  Branch (2370:18): [True: 0, False: 486k]
  ------------------
 2371|  11.4k|#if LJ_HASFFI
 2372|  11.4k|    if (tref_iscdata(ra) || tref_iscdata(rc)) {
  ------------------
  |  |  517|  22.8k|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|  11.4k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
                  if (tref_iscdata(ra) || tref_iscdata(rc)) {
  ------------------
  |  |  517|  11.4k|#define tref_iscdata(tr)	(tref_istype((tr), IRT_CDATA))
  |  |  ------------------
  |  |  |  |  510|  11.4k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (517:26): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
 2373|      0|      rec_mm_comp_cdata(J, &ix, op, MM_eq);
 2374|      0|      break;
 2375|      0|    }
 2376|  11.4k|#endif
 2377|       |    /* Emit nothing for two non-table, non-udata consts. */
 2378|  11.4k|    if (!(tref_isk2(ra, rc) && !(tref_istab(ra) || tref_isudata(ra)))) {
  ------------------
  |  |  532|  22.8k|#define tref_isk2(tr1, tr2)	(irref_isk(tref_ref((tr1) | (tr2))))
  |  |  ------------------
  |  |  |  |  485|  11.4k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (532:29): [True: 155, False: 11.2k]
  |  |  ------------------
  ------------------
                  if (!(tref_isk2(ra, rc) && !(tref_istab(ra) || tref_isudata(ra)))) {
  ------------------
  |  |  518|    310|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|    155|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 0, False: 155]
  |  |  ------------------
  ------------------
                  if (!(tref_isk2(ra, rc) && !(tref_istab(ra) || tref_isudata(ra)))) {
  ------------------
  |  |  519|    155|#define tref_isudata(tr)	(tref_istype((tr), IRT_UDATA))
  |  |  ------------------
  |  |  |  |  510|    155|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (519:26): [True: 0, False: 155]
  |  |  ------------------
  ------------------
 2379|  11.2k|      int diff;
 2380|  11.2k|      rec_comp_prep(J);
 2381|  11.2k|      diff = lj_record_objcmp(J, ra, rc, rav, rcv);
  ------------------
  |  | 2279|  11.2k|#define rav	(&ix.valv)
  ------------------
                    diff = lj_record_objcmp(J, ra, rc, rav, rcv);
  ------------------
  |  | 2281|  11.2k|#define rcv	(&ix.keyv)
  ------------------
 2382|  11.2k|      if (diff == 2 || !(tref_istab(ra) || tref_isudata(ra)))
  ------------------
  |  |  518|  22.5k|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|  11.2k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 21, False: 11.2k]
  |  |  ------------------
  ------------------
                    if (diff == 2 || !(tref_istab(ra) || tref_isudata(ra)))
  ------------------
  |  |  519|  11.2k|#define tref_isudata(tr)	(tref_istype((tr), IRT_UDATA))
  |  |  ------------------
  |  |  |  |  510|  11.2k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (519:26): [True: 0, False: 11.2k]
  |  |  ------------------
  ------------------
  |  Branch (2382:11): [True: 20, False: 11.2k]
  ------------------
 2383|  11.2k|	rec_comp_fixup(J, J->pc, ((int)op & 1) == !diff);
 2384|     21|      else if (diff == 1)  /* Only check __eq if different, but same type. */
  ------------------
  |  Branch (2384:16): [True: 0, False: 21]
  ------------------
 2385|      0|	rec_mm_equal(J, &ix, (int)op);
 2386|  11.2k|    }
 2387|  11.4k|    break;
 2388|       |
 2389|       |  /* -- Unary test and copy ops ------------------------------------------- */
 2390|       |
 2391|  10.7k|  case BC_ISTC: case BC_ISFC:
  ------------------
  |  Branch (2391:3): [True: 10.7k, False: 475k]
  |  Branch (2391:17): [True: 0, False: 486k]
  ------------------
 2392|  10.7k|    if ((op & 1) == tref_istruecond(rc))
  ------------------
  |  |  525|  10.7k|#define tref_istruecond(tr)	(!tref_typerange((tr), IRT_NIL, IRT_FALSE))
  |  |  ------------------
  |  |  |  |  508|  10.7k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (2392:9): [True: 10.7k, False: 0]
  ------------------
 2393|  10.7k|      rc = 0;  /* Don't store if condition is not true. */
 2394|       |    /* fallthrough */
 2395|  11.0k|  case BC_IST: case BC_ISF:  /* Type specialization suffices. */
  ------------------
  |  Branch (2395:3): [True: 301, False: 485k]
  |  Branch (2395:16): [True: 11, False: 486k]
  ------------------
 2396|  11.0k|    if (bc_a(pc[1]) < J->maxslot)
  ------------------
  |  |   35|  11.0k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (2396:9): [True: 0, False: 11.0k]
  ------------------
 2397|      0|      J->maxslot = bc_a(pc[1]);  /* Shrink used slots. */
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
 2398|  11.0k|    break;
 2399|       |
 2400|    196|  case BC_ISTYPE: case BC_ISNUM:
  ------------------
  |  Branch (2400:3): [True: 196, False: 486k]
  |  Branch (2400:19): [True: 0, False: 486k]
  ------------------
 2401|       |    /* These coercions need to correspond with lj_meta_istype(). */
 2402|    196|    if (LJ_DUALNUM && rc == ~LJ_TNUMX+1)
  ------------------
  |  |  549|    392|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  if (LJ_DUALNUM && rc == ~LJ_TNUMX+1)
  ------------------
  |  |  274|      0|#define LJ_TNUMX		(~13u)
  ------------------
  |  Branch (2402:23): [True: 0, False: 0]
  ------------------
 2403|      0|      ra = lj_opt_narrow_toint(J, ra);
 2404|    196|    else if (rc == ~LJ_TNUMX+2)
  ------------------
  |  |  274|    196|#define LJ_TNUMX		(~13u)
  ------------------
  |  Branch (2404:14): [True: 0, False: 196]
  ------------------
 2405|      0|      ra = lj_ir_tonum(J, ra);
 2406|    196|    else if (rc == ~LJ_TSTR+1)
  ------------------
  |  |  264|    196|#define LJ_TSTR			(~4u)
  ------------------
  |  Branch (2406:14): [True: 196, False: 0]
  ------------------
 2407|    196|      ra = lj_ir_tostr(J, ra);
 2408|       |    /* else: type specialization suffices. */
 2409|    196|    J->base[bc_a(ins)] = ra;
  ------------------
  |  |   35|    196|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
 2410|    196|    break;
 2411|       |
 2412|       |  /* -- Unary ops --------------------------------------------------------- */
 2413|       |
 2414|     75|  case BC_NOT:
  ------------------
  |  Branch (2414:3): [True: 75, False: 486k]
  ------------------
 2415|       |    /* Type specialization already forces const result. */
 2416|     75|    rc = tref_istruecond(rc) ? TREF_FALSE : TREF_TRUE;
  ------------------
  |  |  525|     75|#define tref_istruecond(tr)	(!tref_typerange((tr), IRT_NIL, IRT_FALSE))
  |  |  ------------------
  |  |  |  |  508|     75|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (525:29): [True: 35, False: 40]
  |  |  ------------------
  ------------------
                  rc = tref_istruecond(rc) ? TREF_FALSE : TREF_TRUE;
  ------------------
  |  |  536|     35|#define TREF_FALSE		(TREF_PRI(IRT_FALSE))
  |  |  ------------------
  |  |  |  |  534|     35|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|     35|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  rc = tref_istruecond(rc) ? TREF_FALSE : TREF_TRUE;
  ------------------
  |  |  537|    115|#define TREF_TRUE		(TREF_PRI(IRT_TRUE))
  |  |  ------------------
  |  |  |  |  534|     40|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|     40|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2417|     75|    break;
 2418|       |
 2419|    214|  case BC_LEN:
  ------------------
  |  Branch (2419:3): [True: 214, False: 486k]
  ------------------
 2420|    214|    if (tref_isstr(rc))
  ------------------
  |  |  515|    214|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|    214|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 214, False: 0]
  |  |  ------------------
  ------------------
 2421|    214|      rc = emitir(IRTI(IR_FLOAD), rc, IRFL_STR_LEN);
  ------------------
  |  |   42|    214|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    214|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2422|      0|    else if (!LJ_52 && tref_istab(rc))
  ------------------
  |  |  697|      0|#define LJ_52			0
  ------------------
                  else if (!LJ_52 && tref_istab(rc))
  ------------------
  |  |  518|      0|#define tref_istab(tr)		(tref_istype((tr), IRT_TAB))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (518:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2422:14): [Folded - Ignored]
  ------------------
 2423|      0|      rc = emitir(IRTI(IR_ALEN), rc, TREF_NIL);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2424|      0|    else
 2425|      0|      rc = rec_mm_len(J, rc, rcv);
  ------------------
  |  | 2281|      0|#define rcv	(&ix.keyv)
  ------------------
 2426|    214|    break;
 2427|       |
 2428|       |  /* -- Arithmetic ops ---------------------------------------------------- */
 2429|       |
 2430|      9|  case BC_UNM:
  ------------------
  |  Branch (2430:3): [True: 9, False: 486k]
  ------------------
 2431|      9|    if (tref_isnumber_str(rc)) {
  ------------------
  |  |  528|      9|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|     18|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|      9|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 9, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2432|      9|      rc = lj_opt_narrow_unm(J, rc, rcv);
  ------------------
  |  | 2281|      9|#define rcv	(&ix.keyv)
  ------------------
 2433|      9|    } else {
 2434|      0|      ix.tab = rc;
 2435|      0|      copyTV(J->L, &ix.tabv, rcv);
  ------------------
  |  | 2281|      0|#define rcv	(&ix.keyv)
  ------------------
 2436|      0|      rc = rec_mm_arith(J, &ix, MM_unm);
 2437|      0|    }
 2438|      9|    break;
 2439|       |
 2440|  3.03k|  case BC_ADDNV: case BC_SUBNV: case BC_MULNV: case BC_DIVNV: case BC_MODNV:
  ------------------
  |  Branch (2440:3): [True: 3.02k, False: 483k]
  |  Branch (2440:18): [True: 2, False: 486k]
  |  Branch (2440:33): [True: 0, False: 486k]
  |  Branch (2440:48): [True: 0, False: 486k]
  |  Branch (2440:63): [True: 0, False: 486k]
  ------------------
 2441|       |    /* Swap rb/rc and rbv/rcv. rav is temp. */
 2442|  3.03k|    ix.tab = rc; ix.key = rc = rb; rb = ix.tab;
 2443|  3.03k|    copyTV(J->L, rav, rbv);
  ------------------
  |  | 2279|  3.03k|#define rav	(&ix.valv)
  ------------------
                  copyTV(J->L, rav, rbv);
  ------------------
  |  | 2280|  3.03k|#define rbv	(&ix.tabv)
  ------------------
 2444|  3.03k|    copyTV(J->L, rbv, rcv);
  ------------------
  |  | 2280|  3.03k|#define rbv	(&ix.tabv)
  ------------------
                  copyTV(J->L, rbv, rcv);
  ------------------
  |  | 2281|  3.03k|#define rcv	(&ix.keyv)
  ------------------
 2445|  3.03k|    copyTV(J->L, rcv, rav);
  ------------------
  |  | 2281|  3.03k|#define rcv	(&ix.keyv)
  ------------------
                  copyTV(J->L, rcv, rav);
  ------------------
  |  | 2279|  3.03k|#define rav	(&ix.valv)
  ------------------
 2446|  3.03k|    if (op == BC_MODNV)
  ------------------
  |  Branch (2446:9): [True: 0, False: 3.03k]
  ------------------
 2447|      0|      goto recmod;
 2448|       |    /* fallthrough */
 2449|  30.5k|  case BC_ADDVN: case BC_SUBVN: case BC_MULVN: case BC_DIVVN:
  ------------------
  |  Branch (2449:3): [True: 555, False: 485k]
  |  Branch (2449:18): [True: 17.4k, False: 468k]
  |  Branch (2449:33): [True: 28, False: 486k]
  |  Branch (2449:48): [True: 9.52k, False: 476k]
  ------------------
 2450|  49.2k|  case BC_ADDVV: case BC_SUBVV: case BC_MULVV: case BC_DIVVV: {
  ------------------
  |  Branch (2450:3): [True: 18.5k, False: 467k]
  |  Branch (2450:18): [True: 29, False: 486k]
  |  Branch (2450:33): [True: 29, False: 486k]
  |  Branch (2450:48): [True: 26, False: 486k]
  ------------------
 2451|  49.2k|    MMS mm = bcmode_mm(op);
  ------------------
  |  |  251|  49.2k|#define bcmode_mm(op)	((MMS)(lj_bc_mode[op]>>11))
  ------------------
 2452|  49.2k|    if (tref_isnumber_str(rb) && tref_isnumber_str(rc))
  ------------------
  |  |  528|  98.5k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  98.5k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  49.2k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 48.9k, False: 337]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|    337|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|    337|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 337]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (tref_isnumber_str(rb) && tref_isnumber_str(rc))
  ------------------
  |  |  528|  48.9k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  97.8k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  48.9k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 48.9k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2453|  48.9k|      rc = lj_opt_narrow_arith(J, rb, rc, rbv, rcv,
  ------------------
  |  | 2280|  48.9k|#define rbv	(&ix.tabv)
  ------------------
                    rc = lj_opt_narrow_arith(J, rb, rc, rbv, rcv,
  ------------------
  |  | 2281|  48.9k|#define rcv	(&ix.keyv)
  ------------------
 2454|  48.9k|			       (int)mm - (int)MM_add + (int)IR_ADD);
 2455|    337|    else
 2456|    337|      rc = rec_mm_arith(J, &ix, mm);
 2457|  49.2k|    break;
 2458|  49.2k|    }
 2459|       |
 2460|  6.53k|  case BC_MODVN: case BC_MODVV:
  ------------------
  |  Branch (2460:3): [True: 6.51k, False: 479k]
  |  Branch (2460:18): [True: 26, False: 486k]
  ------------------
 2461|  6.53k|  recmod:
 2462|  6.53k|    if (tref_isnumber_str(rb) && tref_isnumber_str(rc))
  ------------------
  |  |  528|  13.0k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  13.0k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  6.53k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 6.53k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (tref_isnumber_str(rb) && tref_isnumber_str(rc))
  ------------------
  |  |  528|  6.53k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  13.0k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  6.53k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 6.53k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2463|  6.53k|      rc = lj_opt_narrow_mod(J, rb, rc, rbv, rcv);
  ------------------
  |  | 2280|  6.53k|#define rbv	(&ix.tabv)
  ------------------
                    rc = lj_opt_narrow_mod(J, rb, rc, rbv, rcv);
  ------------------
  |  | 2281|  6.53k|#define rcv	(&ix.keyv)
  ------------------
 2464|      0|    else
 2465|      0|      rc = rec_mm_arith(J, &ix, MM_mod);
 2466|  6.53k|    break;
 2467|       |
 2468|     14|  case BC_POW:
  ------------------
  |  Branch (2468:3): [True: 14, False: 486k]
  ------------------
 2469|     14|    if (tref_isnumber_str(rb) && tref_isnumber_str(rc))
  ------------------
  |  |  528|     28|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|     28|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|     14|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 14, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  if (tref_isnumber_str(rb) && tref_isnumber_str(rc))
  ------------------
  |  |  528|     14|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|     28|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|     14|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 14, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|      0|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2470|     14|      rc = lj_opt_narrow_arith(J, rb, rc, rbv, rcv, IR_POW);
  ------------------
  |  | 2280|     14|#define rbv	(&ix.tabv)
  ------------------
                    rc = lj_opt_narrow_arith(J, rb, rc, rbv, rcv, IR_POW);
  ------------------
  |  | 2281|     14|#define rcv	(&ix.keyv)
  ------------------
 2471|      0|    else
 2472|      0|      rc = rec_mm_arith(J, &ix, MM_pow);
 2473|     14|    break;
 2474|       |
 2475|       |  /* -- Miscellaneous ops ------------------------------------------------- */
 2476|       |
 2477|  17.6k|  case BC_CAT:
  ------------------
  |  Branch (2477:3): [True: 17.6k, False: 468k]
  ------------------
 2478|  17.6k|    rc = rec_cat(J, rb, rc);
 2479|  17.6k|    if (rc >= 0xffffff00)
  ------------------
  |  Branch (2479:9): [True: 0, False: 17.6k]
  ------------------
 2480|      0|      lj_err_throw(J->L, -(int32_t)rc);  /* Propagate errors. */
 2481|  17.6k|    break;
 2482|       |
 2483|       |  /* -- Constant and move ops --------------------------------------------- */
 2484|       |
 2485|  81.7k|  case BC_MOV:
  ------------------
  |  Branch (2485:3): [True: 81.7k, False: 404k]
  ------------------
 2486|       |    /* Clear gap of method call to avoid resurrecting previous refs. */
 2487|  81.7k|    if (ra > J->maxslot) {
  ------------------
  |  Branch (2487:9): [True: 26.9k, False: 54.7k]
  ------------------
 2488|  26.9k|#if LJ_FR2
 2489|  26.9k|      memset(J->base + J->maxslot, 0, (ra - J->maxslot) * sizeof(TRef));
 2490|       |#else
 2491|       |      J->base[ra-1] = 0;
 2492|       |#endif
 2493|  26.9k|    }
 2494|  81.7k|    break;
 2495|  33.4k|  case BC_KSTR: case BC_KNUM: case BC_KPRI:
  ------------------
  |  Branch (2495:3): [True: 32.9k, False: 453k]
  |  Branch (2495:17): [True: 260, False: 486k]
  |  Branch (2495:31): [True: 268, False: 485k]
  ------------------
 2496|  33.4k|    break;
 2497|  29.5k|  case BC_KSHORT:
  ------------------
  |  Branch (2497:3): [True: 29.5k, False: 456k]
  ------------------
 2498|  29.5k|    rc = lj_ir_kint(J, (int32_t)(int16_t)rc);
 2499|  29.5k|    break;
 2500|     11|  case BC_KNIL:
  ------------------
  |  Branch (2500:3): [True: 11, False: 486k]
  ------------------
 2501|     11|    if (LJ_FR2 && ra > J->maxslot)
  ------------------
  |  |  569|     22|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (2501:19): [True: 0, False: 11]
  ------------------
 2502|      0|      J->base[ra-1] = 0;
 2503|     95|    while (ra <= rc)
  ------------------
  |  Branch (2503:12): [True: 84, False: 11]
  ------------------
 2504|     84|      J->base[ra++] = TREF_NIL;
  ------------------
  |  |  535|     95|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|     84|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|     84|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2505|     11|    if (rc >= J->maxslot) J->maxslot = rc+1;
  ------------------
  |  Branch (2505:9): [True: 11, False: 0]
  ------------------
 2506|     11|    break;
 2507|      0|#if LJ_HASFFI
 2508|      0|  case BC_KCDATA:
  ------------------
  |  Branch (2508:3): [True: 0, False: 486k]
  ------------------
 2509|      0|    rc = lj_ir_kgc(J, proto_kgc(J->pt, ~(ptrdiff_t)rc), IRT_CDATA);
  ------------------
  |  |  416|      0|  check_exp((uintptr_t)(intptr_t)(idx) >= ~(uintptr_t)(pt)->sizekgc+1u, \
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  417|      0|	    gcref(mref((pt)->k, GCRef)[(idx)]))
  ------------------
 2510|      0|    break;
 2511|      0|#endif
 2512|       |
 2513|       |  /* -- Upvalue and function ops ------------------------------------------ */
 2514|       |
 2515|  36.0k|  case BC_UGET:
  ------------------
  |  Branch (2515:3): [True: 36.0k, False: 450k]
  ------------------
 2516|  36.0k|    rc = rec_upvalue(J, rc, 0);
 2517|  36.0k|    break;
 2518|      3|  case BC_USETV: case BC_USETS: case BC_USETN: case BC_USETP:
  ------------------
  |  Branch (2518:3): [True: 3, False: 486k]
  |  Branch (2518:18): [True: 0, False: 486k]
  |  Branch (2518:33): [True: 0, False: 486k]
  |  Branch (2518:48): [True: 0, False: 486k]
  ------------------
 2519|      3|    rec_upvalue(J, ra, rc);
 2520|      3|    break;
 2521|       |
 2522|       |  /* -- Table ops --------------------------------------------------------- */
 2523|       |
 2524|  10.1k|  case BC_GGET: case BC_GSET:
  ------------------
  |  Branch (2524:3): [True: 8.86k, False: 477k]
  |  Branch (2524:17): [True: 1.28k, False: 484k]
  ------------------
 2525|  10.1k|    settabV(J->L, &ix.tabv, tabref(J->fn->l.env));
  ------------------
  |  |  514|  10.1k|#define tabref(r)	((GCtab *)gcref((r)))
  |  |  ------------------
  |  |  |  |   67|  10.1k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
 2526|  10.1k|    ix.tab = emitir(IRT(IR_FLOAD, IRT_TAB), getcurrf(J), IRFL_FUNC_ENV);
  ------------------
  |  |   42|  10.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  10.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2527|  10.1k|    ix.idxchain = LJ_MAX_IDXCHAIN;
  ------------------
  |  |   71|  10.1k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
 2528|  10.1k|    rc = lj_record_idx(J, &ix);
 2529|  10.1k|    break;
 2530|       |
 2531|    249|  case BC_TGETB: case BC_TSETB:
  ------------------
  |  Branch (2531:3): [True: 118, False: 486k]
  |  Branch (2531:18): [True: 131, False: 486k]
  ------------------
 2532|    249|    setintV(&ix.keyv, (int32_t)rc);
 2533|    249|    ix.key = lj_ir_kint(J, (int32_t)rc);
 2534|       |    /* fallthrough */
 2535|  5.23k|  case BC_TGETV: case BC_TGETS: case BC_TSETV: case BC_TSETS:
  ------------------
  |  Branch (2535:3): [True: 323, False: 485k]
  |  Branch (2535:18): [True: 4.23k, False: 482k]
  |  Branch (2535:33): [True: 392, False: 485k]
  |  Branch (2535:48): [True: 33, False: 486k]
  ------------------
 2536|  5.23k|    ix.idxchain = LJ_MAX_IDXCHAIN;
  ------------------
  |  |   71|  5.23k|#define LJ_MAX_IDXCHAIN	100		/* __index/__newindex chain limit. */
  ------------------
 2537|  5.23k|    rc = lj_record_idx(J, &ix);
 2538|  5.23k|    break;
 2539|      0|  case BC_TGETR: case BC_TSETR:
  ------------------
  |  Branch (2539:3): [True: 0, False: 486k]
  |  Branch (2539:18): [True: 0, False: 486k]
  ------------------
 2540|      0|    ix.idxchain = 0;
 2541|      0|    rc = lj_record_idx(J, &ix);
 2542|      0|    break;
 2543|       |
 2544|      0|  case BC_TSETM:
  ------------------
  |  Branch (2544:3): [True: 0, False: 486k]
  ------------------
 2545|      0|    rec_tsetm(J, ra, (BCReg)(J->L->top - J->L->base), (int32_t)rcv->u32.lo);
  ------------------
  |  | 2281|      0|#define rcv	(&ix.keyv)
  ------------------
 2546|      0|    J->maxslot = ra;  /* The table slot at ra-1 is the highest used slot. */
 2547|      0|    break;
 2548|       |
 2549|    359|  case BC_TNEW:
  ------------------
  |  Branch (2549:3): [True: 359, False: 485k]
  ------------------
 2550|    359|    rc = rec_tnew(J, rc);
 2551|    359|    break;
 2552|    302|  case BC_TDUP:
  ------------------
  |  Branch (2552:3): [True: 302, False: 485k]
  ------------------
 2553|    302|    rc = emitir(IRTG(IR_TDUP, IRT_TAB),
  ------------------
  |  |   42|    302|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  2.11k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:42): [True: 302, False: 0]
  |  |  |  |  |  Branch (26:42): [True: 302, False: 0]
  |  |  |  |  |  Branch (26:42): [True: 302, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2554|    302|		lj_ir_ktab(J, gco2tab(proto_kgc(J->pt, ~(ptrdiff_t)rc))), 0);
 2555|       |#ifdef LUAJIT_ENABLE_TABLE_BUMP
 2556|       |    J->rbchash[(rc & (RBCHASH_SLOTS-1))].ref = tref_ref(rc);
 2557|       |    setmref(J->rbchash[(rc & (RBCHASH_SLOTS-1))].pc, pc);
 2558|       |    setgcref(J->rbchash[(rc & (RBCHASH_SLOTS-1))].pt, obj2gco(J->pt));
 2559|       |#endif
 2560|      0|    break;
 2561|       |
 2562|       |  /* -- Calls and vararg handling ----------------------------------------- */
 2563|       |
 2564|    285|  case BC_ITERC:
  ------------------
  |  Branch (2564:3): [True: 285, False: 485k]
  ------------------
 2565|    285|    J->base[ra] = getslot(J, ra-3);
  ------------------
  |  |  211|    285|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 0, False: 285]
  |  |  ------------------
  ------------------
 2566|    285|    J->base[ra+1+LJ_FR2] = getslot(J, ra-2);
  ------------------
  |  |  569|    285|#define LJ_FR2			1
  ------------------
                  J->base[ra+1+LJ_FR2] = getslot(J, ra-2);
  ------------------
  |  |  211|    285|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 0, False: 285]
  |  |  ------------------
  ------------------
 2567|    285|    J->base[ra+2+LJ_FR2] = getslot(J, ra-1);
  ------------------
  |  |  569|    285|#define LJ_FR2			1
  ------------------
                  J->base[ra+2+LJ_FR2] = getslot(J, ra-1);
  ------------------
  |  |  211|    285|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 0, False: 285]
  |  |  ------------------
  ------------------
 2568|    285|    { /* Do the actual copy now because lj_record_call needs the values. */
 2569|    285|      TValue *b = &J->L->base[ra];
 2570|    285|      copyTV(J->L, b, b-3);
 2571|    285|      copyTV(J->L, b+1+LJ_FR2, b-2);
  ------------------
  |  |  569|    285|#define LJ_FR2			1
  ------------------
 2572|    285|      copyTV(J->L, b+2+LJ_FR2, b-1);
  ------------------
  |  |  569|    285|#define LJ_FR2			1
  ------------------
 2573|    285|    }
 2574|    285|    lj_record_call(J, ra, (ptrdiff_t)rc-1);
 2575|    285|    break;
 2576|       |
 2577|       |  /* L->top is set to L->base+ra+rc+NARGS-1+1. See lj_dispatch_ins(). */
 2578|    365|  case BC_CALLM:
  ------------------
  |  Branch (2578:3): [True: 365, False: 485k]
  ------------------
 2579|    365|    rc = (BCReg)(J->L->top - J->L->base) - ra - LJ_FR2;
  ------------------
  |  |  569|    365|#define LJ_FR2			1
  ------------------
 2580|       |    /* fallthrough */
 2581|  61.0k|  case BC_CALL:
  ------------------
  |  Branch (2581:3): [True: 60.7k, False: 425k]
  ------------------
 2582|  61.0k|    lj_record_call(J, ra, (ptrdiff_t)rc-1);
 2583|  61.0k|    break;
 2584|       |
 2585|      0|  case BC_CALLMT:
  ------------------
  |  Branch (2585:3): [True: 0, False: 486k]
  ------------------
 2586|      0|    rc = (BCReg)(J->L->top - J->L->base) - ra - LJ_FR2;
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
 2587|       |    /* fallthrough */
 2588|    195|  case BC_CALLT:
  ------------------
  |  Branch (2588:3): [True: 195, False: 486k]
  ------------------
 2589|    195|    lj_record_tailcall(J, ra, (ptrdiff_t)rc-1);
 2590|    195|    break;
 2591|       |
 2592|      0|  case BC_VARG:
  ------------------
  |  Branch (2592:3): [True: 0, False: 486k]
  ------------------
 2593|      0|    rec_varg(J, ra, (ptrdiff_t)rb-1);
 2594|      0|    break;
 2595|       |
 2596|       |  /* -- Returns ----------------------------------------------------------- */
 2597|       |
 2598|      0|  case BC_RETM:
  ------------------
  |  Branch (2598:3): [True: 0, False: 486k]
  ------------------
 2599|       |    /* L->top is set to L->base+ra+rc+NRESULTS-1, see lj_dispatch_ins(). */
 2600|      0|    rc = (BCReg)(J->L->top - J->L->base) - ra + 1;
 2601|       |    /* fallthrough */
 2602|  39.9k|  case BC_RET: case BC_RET0: case BC_RET1:
  ------------------
  |  Branch (2602:3): [True: 0, False: 486k]
  |  Branch (2602:16): [True: 13.2k, False: 473k]
  |  Branch (2602:30): [True: 26.6k, False: 459k]
  ------------------
 2603|  39.9k|#if LJ_HASPROFILE
 2604|  39.9k|    rec_profile_ret(J);
 2605|  39.9k|#endif
 2606|  39.9k|    lj_record_ret(J, ra, (ptrdiff_t)rc-1);
 2607|  39.9k|    break;
 2608|       |
 2609|       |  /* -- Loops and branches ------------------------------------------------ */
 2610|       |
 2611|     13|  case BC_FORI:
  ------------------
  |  Branch (2611:3): [True: 13, False: 486k]
  ------------------
 2612|     13|    if (rec_for(J, pc, 0) != LOOPEV_LEAVE)
  ------------------
  |  Branch (2612:9): [True: 4, False: 9]
  ------------------
 2613|      4|      J->loopref = J->cur.nins;
 2614|     13|    break;
 2615|    889|  case BC_JFORI:
  ------------------
  |  Branch (2615:3): [True: 889, False: 485k]
  ------------------
 2616|    889|    lj_assertJ(bc_op(pc[(ptrdiff_t)rc-BCBIAS_J]) == BC_JFORL,
  ------------------
  |  |  527|    889|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    889|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    889|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 889, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    889|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2617|    889|	       "JFORI does not point to JFORL");
 2618|    889|    if (rec_for(J, pc, 0) != LOOPEV_LEAVE)  /* Link to existing loop. */
  ------------------
  |  Branch (2618:9): [True: 889, False: 0]
  ------------------
 2619|    889|      lj_record_stop(J, LJ_TRLINK_ROOT, bc_d(pc[(ptrdiff_t)rc-BCBIAS_J]));
  ------------------
  |  |   38|    889|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
 2620|       |    /* Continue tracing if the loop is not entered. */
 2621|    889|    break;
 2622|       |
 2623|  5.61k|  case BC_FORL:
  ------------------
  |  Branch (2623:3): [True: 5.61k, False: 480k]
  ------------------
 2624|  5.61k|    rec_loop_interp(J, pc, rec_for(J, pc+((ptrdiff_t)rc-BCBIAS_J), 1));
  ------------------
  |  |   29|  5.61k|#define BCBIAS_J	0x8000
  ------------------
 2625|  5.61k|    break;
 2626|    285|  case BC_ITERL:
  ------------------
  |  Branch (2626:3): [True: 285, False: 485k]
  ------------------
 2627|    285|    rec_loop_interp(J, pc, rec_iterl(J, *pc));
 2628|    285|    break;
 2629|    527|  case BC_ITERN:
  ------------------
  |  Branch (2629:3): [True: 527, False: 485k]
  ------------------
 2630|    527|    rec_loop_interp(J, pc, rec_itern(J, ra, rb));
 2631|    527|    break;
 2632|    204|  case BC_LOOP:
  ------------------
  |  Branch (2632:3): [True: 204, False: 486k]
  ------------------
 2633|    204|    rec_loop_interp(J, pc, rec_loop(J, ra, 1));
 2634|    204|    break;
 2635|       |
 2636|  8.11k|  case BC_JFORL:
  ------------------
  |  Branch (2636:3): [True: 8.11k, False: 478k]
  ------------------
 2637|  8.11k|    rec_loop_jit(J, rc, rec_for(J, pc+bc_j(traceref(J, rc)->startins), 1));
  ------------------
  |  |   39|  8.11k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  32.4k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (38:28): [True: 8.11k, False: 0]
  |  |  |  |  |  Branch (38:28): [True: 8.11k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  8.11k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2638|      0|    break;
 2639|      0|  case BC_JITERL:
  ------------------
  |  Branch (2639:3): [True: 0, False: 486k]
  ------------------
 2640|      0|    rec_loop_jit(J, rc, rec_iterl(J, traceref(J, rc)->startins));
  ------------------
  |  |  298|      0|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2641|      0|    break;
 2642|    186|  case BC_JLOOP:
  ------------------
  |  Branch (2642:3): [True: 186, False: 486k]
  ------------------
 2643|    186|    rec_loop_jit(J, rc, rec_loop(J, ra,
 2644|    186|				 !bc_isret(bc_op(traceref(J, rc)->startins)) &&
  ------------------
  |  |   34|    744|#define bc_op(i)	((BCOp)((i)&0xff))
  |  |  ------------------
  |  |  |  Branch (34:27): [True: 186, False: 0]
  |  |  |  Branch (34:27): [True: 186, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2644:6): [True: 186, False: 0]
  ------------------
 2645|    372|				 bc_op(traceref(J, rc)->startins) != BC_ITERN));
  ------------------
  |  |   34|    744|#define bc_op(i)	((BCOp)((i)&0xff))
  |  |  ------------------
  |  |  |  Branch (34:27): [True: 186, False: 0]
  |  |  |  Branch (34:27): [True: 186, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (2645:6): [True: 186, False: 0]
  ------------------
 2646|      0|    break;
 2647|       |
 2648|      0|  case BC_IFORL:
  ------------------
  |  Branch (2648:3): [True: 0, False: 486k]
  ------------------
 2649|      0|  case BC_IITERL:
  ------------------
  |  Branch (2649:3): [True: 0, False: 486k]
  ------------------
 2650|      0|  case BC_ILOOP:
  ------------------
  |  Branch (2650:3): [True: 0, False: 486k]
  ------------------
 2651|      0|  case BC_IFUNCF:
  ------------------
  |  Branch (2651:3): [True: 0, False: 486k]
  ------------------
 2652|      0|  case BC_IFUNCV:
  ------------------
  |  Branch (2652:3): [True: 0, False: 486k]
  ------------------
 2653|      0|    lj_trace_err(J, LJ_TRERR_BLACKL);
 2654|      0|    break;
 2655|       |
 2656|    397|  case BC_JMP:
  ------------------
  |  Branch (2656:3): [True: 397, False: 485k]
  ------------------
 2657|    397|    if (ra < J->maxslot)
  ------------------
  |  Branch (2657:9): [True: 394, False: 3]
  ------------------
 2658|    394|      J->maxslot = ra;  /* Shrink used slots. */
 2659|    397|    break;
 2660|       |
 2661|      0|  case BC_ISNEXT:
  ------------------
  |  Branch (2661:3): [True: 0, False: 486k]
  ------------------
 2662|      0|    rec_isnext(J, ra);
 2663|      0|    break;
 2664|       |
 2665|       |  /* -- Function headers -------------------------------------------------- */
 2666|       |
 2667|  2.87k|  case BC_FUNCF:
  ------------------
  |  Branch (2667:3): [True: 2.87k, False: 483k]
  ------------------
 2668|  2.87k|    rec_func_lua(J);
 2669|  2.87k|    break;
 2670|  21.0k|  case BC_JFUNCF:
  ------------------
  |  Branch (2670:3): [True: 21.0k, False: 465k]
  ------------------
 2671|  21.0k|    rec_func_jit(J, rc);
 2672|  21.0k|    break;
 2673|       |
 2674|    190|  case BC_FUNCV:
  ------------------
  |  Branch (2674:3): [True: 190, False: 486k]
  ------------------
 2675|    190|    rec_func_vararg(J);
 2676|    190|    rec_func_lua(J);
 2677|    190|    break;
 2678|      0|  case BC_JFUNCV:
  ------------------
  |  Branch (2678:3): [True: 0, False: 486k]
  ------------------
 2679|       |    /* Cannot happen. No hotcall counting for varag funcs. */
 2680|      0|    lj_assertJ(0, "unsupported vararg hotcall");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2681|      0|    break;
 2682|       |
 2683|  15.0k|  case BC_FUNCC:
  ------------------
  |  Branch (2683:3): [True: 15.0k, False: 471k]
  ------------------
 2684|  15.0k|  case BC_FUNCCW:
  ------------------
  |  Branch (2684:3): [True: 0, False: 486k]
  ------------------
 2685|  15.0k|    lj_ffrecord_func(J);
 2686|  15.0k|    break;
 2687|       |
 2688|  22.6k|  default:
  ------------------
  |  Branch (2688:3): [True: 22.6k, False: 463k]
  ------------------
 2689|  22.6k|    if (op >= BC__MAX) {
  ------------------
  |  Branch (2689:9): [True: 22.6k, False: 0]
  ------------------
 2690|  22.6k|      lj_ffrecord_func(J);
 2691|  22.6k|      break;
 2692|  22.6k|    }
 2693|       |    /* fallthrough */
 2694|      0|  case BC_UCLO:
  ------------------
  |  Branch (2694:3): [True: 0, False: 486k]
  ------------------
 2695|    190|  case BC_FNEW:
  ------------------
  |  Branch (2695:3): [True: 190, False: 486k]
  ------------------
 2696|    190|    setintV(&J->errinfo, (int32_t)op);
 2697|    190|    lj_trace_err_info(J, LJ_TRERR_NYIBC);
 2698|      0|    break;
 2699|   486k|  }
 2700|       |
 2701|       |  /* rc == 0 if we have no result yet, e.g. pending __index metamethod call. */
 2702|   484k|  if (bcmode_a(op) == BCMdst && rc) {
  ------------------
  |  |  246|   484k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
  |  Branch (2702:7): [True: 279k, False: 205k]
  |  Branch (2702:33): [True: 268k, False: 11.1k]
  ------------------
 2703|   268k|    J->base[ra] = rc;
 2704|   268k|    if (ra >= J->maxslot) {
  ------------------
  |  Branch (2704:9): [True: 235k, False: 33.1k]
  ------------------
 2705|   235k|#if LJ_FR2
 2706|   235k|      if (ra > J->maxslot) J->base[ra-1] = 0;
  ------------------
  |  Branch (2706:11): [True: 60.9k, False: 174k]
  ------------------
 2707|   235k|#endif
 2708|   235k|      J->maxslot = ra+1;
 2709|   235k|    }
 2710|   268k|  }
 2711|       |
 2712|   484k|#undef rav
 2713|   484k|#undef rbv
 2714|   484k|#undef rcv
 2715|       |
 2716|       |  /* Limit the number of recorded IR instructions and constants. */
 2717|   484k|  if (J->cur.nins > REF_FIRST+(IRRef)J->param[JIT_P_maxrecord] ||
  ------------------
  |  Branch (2717:7): [True: 0, False: 484k]
  ------------------
 2718|   484k|      J->cur.nk < REF_BIAS-(IRRef)J->param[JIT_P_maxirconst])
  ------------------
  |  Branch (2718:7): [True: 0, False: 484k]
  ------------------
 2719|      0|    lj_trace_err(J, LJ_TRERR_TRACEOV);
 2720|   484k|}
lj_record_setup:
 2791|  25.9k|{
 2792|  25.9k|  uint32_t i;
 2793|       |
 2794|       |  /* Initialize state related to current trace. */
 2795|  25.9k|  memset(J->slot, 0, sizeof(J->slot));
 2796|  25.9k|  memset(J->chain, 0, sizeof(J->chain));
 2797|       |#ifdef LUAJIT_ENABLE_TABLE_BUMP
 2798|       |  memset(J->rbchash, 0, sizeof(J->rbchash));
 2799|       |#endif
 2800|  25.9k|  memset(J->bpropcache, 0, sizeof(J->bpropcache));
 2801|  25.9k|  J->scev.idx = REF_NIL;
 2802|  25.9k|  setmref(J->scev.pc, NULL);
  ------------------
  |  |   39|  25.9k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 2803|       |
 2804|  25.9k|  J->baseslot = 1+LJ_FR2;  /* Invoking function is at base[-1-LJ_FR2]. */
  ------------------
  |  |  569|  25.9k|#define LJ_FR2			1
  ------------------
 2805|  25.9k|  J->base = J->slot + J->baseslot;
 2806|  25.9k|  J->maxslot = 0;
 2807|  25.9k|  J->framedepth = 0;
 2808|  25.9k|  J->retdepth = 0;
 2809|       |
 2810|  25.9k|  J->instunroll = J->param[JIT_P_instunroll];
 2811|  25.9k|  J->loopunroll = J->param[JIT_P_loopunroll];
 2812|  25.9k|  J->tailcalled = 0;
 2813|  25.9k|  J->loopref = 0;
 2814|       |
 2815|  25.9k|  J->bc_min = NULL;  /* Means no limit. */
 2816|  25.9k|  J->bc_extent = ~(MSize)0;
 2817|       |
 2818|       |  /* Emit instructions for fixed references. Also triggers initial IR alloc. */
 2819|  25.9k|  emitir_raw(IRT(IR_BASE, IRT_PGC), J->parent, J->exitno);
  ------------------
  |  |   45|  25.9k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  25.9k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2820|   103k|  for (i = 0; i <= 2; i++) {
  ------------------
  |  Branch (2820:15): [True: 77.7k, False: 25.9k]
  ------------------
 2821|  77.7k|    IRIns *ir = IR(REF_NIL-i);
  ------------------
  |  |   39|  77.7k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
 2822|  77.7k|    ir->i = 0;
 2823|  77.7k|    ir->t.irt = (uint8_t)(IRT_NIL+i);
 2824|  77.7k|    ir->o = IR_KPRI;
 2825|  77.7k|    ir->prev = 0;
 2826|  77.7k|  }
 2827|  25.9k|  J->cur.nk = REF_TRUE;
 2828|       |
 2829|  25.9k|  J->startpc = J->pc;
 2830|  25.9k|  setmref(J->cur.startpc, J->pc);
  ------------------
  |  |   39|  25.9k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
 2831|  25.9k|  if (J->parent) {  /* Side trace. */
  ------------------
  |  Branch (2831:7): [True: 11.4k, False: 14.5k]
  ------------------
 2832|  11.4k|    GCtrace *T = traceref(J, J->parent);
  ------------------
  |  |  298|  11.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  11.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  22.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 11.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 11.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2833|  11.4k|    TraceNo root = T->root ? T->root : J->parent;
  ------------------
  |  Branch (2833:20): [True: 8.65k, False: 2.74k]
  ------------------
 2834|  11.4k|    J->cur.root = (uint16_t)root;
 2835|  11.4k|    J->cur.startins = BCINS_AD(BC_JMP, 0, 0);
  ------------------
  |  |   56|  11.4k|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
 2836|       |    /* Check whether we could at least potentially form an extra loop. */
 2837|  11.4k|    if (J->exitno == 0 && T->snap[0].nent == 0) {
  ------------------
  |  Branch (2837:9): [True: 6.13k, False: 5.27k]
  |  Branch (2837:27): [True: 6.13k, False: 0]
  ------------------
 2838|       |      /* We can narrow a FORL for some side traces, too. */
 2839|  6.13k|      if (J->pc > proto_bc(J->pt) && bc_op(J->pc[-1]) == BC_JFORI &&
  ------------------
  |  |  420|  12.2k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
                    if (J->pc > proto_bc(J->pt) && bc_op(J->pc[-1]) == BC_JFORI &&
  ------------------
  |  |   34|  6.13k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2839:11): [True: 6.13k, False: 0]
  |  Branch (2839:38): [True: 4.04k, False: 2.08k]
  ------------------
 2840|  6.13k|	  bc_d(J->pc[bc_j(J->pc[-1])-1]) == root) {
  ------------------
  |  |   38|  4.04k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (2840:4): [True: 4.04k, False: 0]
  ------------------
 2841|  4.04k|	lj_snap_add(J);
 2842|  4.04k|	rec_for_loop(J, J->pc-1, &J->scev, 1);
 2843|  4.04k|	goto sidecheck;
 2844|  4.04k|      }
 2845|  6.13k|    } else {
 2846|  5.27k|      J->startpc = NULL;  /* Prevent forming an extra loop. */
 2847|  5.27k|    }
 2848|  7.35k|    lj_snap_replay(J, T);
 2849|  11.4k|  sidecheck:
 2850|  22.8k|    if ((traceref(J, J->cur.root)->nchild >= J->param[JIT_P_maxside] ||
  ------------------
  |  |  298|  11.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  11.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  11.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  22.8k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 11.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 11.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  11.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (2850:10): [True: 0, False: 11.4k]
  ------------------
 2851|  11.4k|	 T->snap[J->exitno].count >= J->param[JIT_P_hotexit] +
  ------------------
  |  Branch (2851:3): [True: 3, False: 11.3k]
  ------------------
 2852|  11.4k|				     J->param[JIT_P_tryside])) {
 2853|      3|      if (bc_op(*J->pc) == BC_JLOOP) {
  ------------------
  |  |   34|      3|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2853:11): [True: 0, False: 3]
  ------------------
 2854|      0|	BCIns startins = traceref(J, bc_d(*J->pc))->startins;
  ------------------
  |  |  298|      0|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2855|      0|	if (bc_op(startins) == BC_ITERN)
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2855:6): [True: 0, False: 0]
  ------------------
 2856|      0|	  rec_itern(J, bc_a(startins), bc_b(startins));
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	  rec_itern(J, bc_a(startins), bc_b(startins));
  ------------------
  |  |   36|      0|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
 2857|      0|      }
 2858|      3|      lj_record_stop(J, LJ_TRLINK_INTERP, 0);
 2859|      3|    }
 2860|  14.5k|  } else {  /* Root trace. */
 2861|  14.5k|    J->cur.root = 0;
 2862|  14.5k|    J->cur.startins = *J->pc;
 2863|  14.5k|    J->pc = rec_setup_root(J);
 2864|       |    /* Note: the loop instruction itself is recorded at the end and not
 2865|       |    ** at the start! So snapshot #0 needs to point to the *next* instruction.
 2866|       |    ** The one exception is BC_ITERN, which sets LJ_TRACE_RECORD_1ST.
 2867|       |    */
 2868|  14.5k|    lj_snap_add(J);
 2869|  14.5k|    if (bc_op(J->cur.startins) == BC_FORL)
  ------------------
  |  |   34|  14.5k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2869:9): [True: 5.73k, False: 8.79k]
  ------------------
 2870|  5.73k|      rec_for_loop(J, J->pc-1, &J->scev, 1);
 2871|  8.79k|    else if (bc_op(J->cur.startins) == BC_ITERC)
  ------------------
  |  |   34|  8.79k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2871:14): [True: 0, False: 8.79k]
  ------------------
 2872|      0|      J->startpc = NULL;
 2873|  14.5k|    if (1 + J->pt->framesize >= LJ_MAX_JSLOTS)
  ------------------
  |  |   85|  14.5k|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (2873:9): [True: 0, False: 14.5k]
  ------------------
 2874|      0|      lj_trace_err(J, LJ_TRERR_STACKOV);
 2875|  14.5k|  }
 2876|  25.9k|#if LJ_HASPROFILE
 2877|  25.9k|  J->prev_pt = NULL;
 2878|  25.9k|  J->prev_line = -1;
 2879|  25.9k|#endif
 2880|       |#ifdef LUAJIT_ENABLE_CHECKHOOK
 2881|       |  /* Regularly check for instruction/line hooks from compiled code and
 2882|       |  ** exit to the interpreter if the hooks are set.
 2883|       |  **
 2884|       |  ** This is a compile-time option and disabled by default, since the
 2885|       |  ** hook checks may be quite expensive in tight loops.
 2886|       |  **
 2887|       |  ** Note this is only useful if hooks are *not* set most of the time.
 2888|       |  ** Use this only if you want to *asynchronously* interrupt the execution.
 2889|       |  **
 2890|       |  ** You can set the instruction hook via lua_sethook() with a count of 1
 2891|       |  ** from a signal handler or another native thread. Please have a look
 2892|       |  ** at the first few functions in luajit.c for an example (Ctrl-C handler).
 2893|       |  */
 2894|       |  {
 2895|       |    TRef tr = emitir(IRT(IR_XLOAD, IRT_U8),
 2896|       |		     lj_ir_kptr(J, &J2G(J)->hookmask), IRXLOAD_VOLATILE);
 2897|       |    tr = emitir(IRTI(IR_BAND), tr, lj_ir_kint(J, (LUA_MASKLINE|LUA_MASKCOUNT)));
 2898|       |    emitir(IRTGI(IR_EQ), tr, lj_ir_kint(J, 0));
 2899|       |  }
 2900|       |#endif
 2901|  25.9k|}
lj_record.c:canonicalize_slots:
  285|  14.3k|{
  286|  14.3k|  BCReg s;
  287|  14.3k|  if (LJ_DUALNUM) return;
  ------------------
  |  |  549|  14.3k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  288|   140k|  for (s = J->baseslot+J->maxslot-1; s >= 1; s--) {
  ------------------
  |  Branch (288:38): [True: 126k, False: 14.3k]
  ------------------
  289|   126k|    TRef tr = J->slot[s];
  290|   126k|    if (tref_isinteger(tr) && !(tr & TREF_KEYINDEX)) {
  ------------------
  |  |  526|   253k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|   126k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 6.49k, False: 120k]
  |  |  ------------------
  ------------------
                  if (tref_isinteger(tr) && !(tr & TREF_KEYINDEX)) {
  ------------------
  |  |  500|  6.49k|#define TREF_KEYINDEX		0x00100000
  ------------------
  |  Branch (290:31): [True: 6.49k, False: 0]
  ------------------
  291|  6.49k|      IRIns *ir = IR(tref_ref(tr));
  ------------------
  |  |   39|  6.49k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  292|  6.49k|      if (!(ir->o == IR_SLOAD && (ir->op2 & (IRSLOAD_READONLY))))
  ------------------
  |  |  237|  1.66k|#define IRSLOAD_READONLY	0x10	/* Read-only, omit slot store. */
  ------------------
  |  Branch (292:13): [True: 1.66k, False: 4.83k]
  |  Branch (292:34): [True: 662, False: 1.00k]
  ------------------
  293|  5.83k|	J->slot[s] = emitir(IRTN(IR_CONV), tr, IRCONV_NUM_INT);
  ------------------
  |  |   42|  5.83k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  5.83k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  294|  6.49k|    }
  295|   126k|  }
  296|  14.3k|}
lj_record.c:rec_call_setup:
  811|  61.9k|{
  812|  61.9k|  RecordIndex ix;
  813|  61.9k|  TValue *functv = &J->L->base[func];
  814|  61.9k|  TRef kfunc, *fbase = &J->base[func];
  815|  61.9k|  ptrdiff_t i;
  816|  61.9k|  (void)getslot(J, func); /* Ensure func has a reference. */
  ------------------
  |  |  211|  61.9k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 61.7k, False: 191]
  |  |  ------------------
  ------------------
  817|   172k|  for (i = 1; i <= nargs; i++)
  ------------------
  |  Branch (817:15): [True: 110k, False: 61.9k]
  ------------------
  818|   110k|    (void)getslot(J, func+LJ_FR2+i);  /* Ensure all args have a reference. */
  ------------------
  |  |  211|   110k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 110k, False: 0]
  |  |  ------------------
  ------------------
  819|  61.9k|  if (!tref_isfunc(fbase[0])) {  /* Resolve __call metamethod. */
  ------------------
  |  |  516|  61.9k|#define tref_isfunc(tr)		(tref_istype((tr), IRT_FUNC))
  |  |  ------------------
  |  |  |  |  510|  61.9k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (819:7): [True: 3, False: 61.9k]
  ------------------
  820|      3|    ix.tab = fbase[0];
  821|      3|    copyTV(J->L, &ix.tabv, functv);
  822|      3|    if (!lj_record_mm_lookup(J, &ix, MM_call) || !tref_isfunc(ix.mobj))
  ------------------
  |  |  516|      0|#define tref_isfunc(tr)		(tref_istype((tr), IRT_FUNC))
  |  |  ------------------
  |  |  |  |  510|      0|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (822:9): [True: 3, False: 0]
  |  Branch (822:50): [True: 0, False: 0]
  ------------------
  823|      3|      lj_trace_err(J, LJ_TRERR_NOMM);
  824|      0|    for (i = ++nargs; i > LJ_FR2; i--)  /* Shift arguments up. */
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  |  Branch (824:23): [True: 0, False: 0]
  ------------------
  825|      0|      fbase[i+LJ_FR2] = fbase[i+LJ_FR2-1];
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
                    fbase[i+LJ_FR2] = fbase[i+LJ_FR2-1];
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  826|      0|#if LJ_FR2
  827|      0|    fbase[2] = fbase[0];
  828|      0|#endif
  829|      0|    fbase[0] = ix.mobj;  /* Replace function. */
  830|      0|    functv = &ix.mobjv;
  831|      0|  }
  832|  61.9k|  kfunc = rec_call_specialize(J, funcV(functv), fbase[0]);
  ------------------
  |  |  860|  61.9k|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|  61.9k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  61.9k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  61.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 61.9k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  61.9k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  833|      0|#if LJ_FR2
  834|      0|  fbase[0] = kfunc;
  835|  61.9k|  fbase[1] = TREF_FRAME;
  ------------------
  |  |  498|  61.9k|#define TREF_FRAME		0x00010000
  ------------------
  836|       |#else
  837|       |  fbase[0] = kfunc | TREF_FRAME;
  838|       |#endif
  839|  61.9k|  J->maxslot = (BCReg)nargs;
  840|  61.9k|}
lj_record.c:rec_call_specialize:
  776|  61.9k|{
  777|  61.9k|  TRef kfunc;
  778|  61.9k|  if (isluafunc(fn)) {
  ------------------
  |  |  476|  61.9k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|  61.9k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 24.1k, False: 37.7k]
  |  |  ------------------
  ------------------
  779|  24.1k|    GCproto *pt = funcproto(fn);
  ------------------
  |  |  480|  24.1k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  24.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  24.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  24.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 24.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  24.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  780|       |    /* Too many closures created? Probably not a monomorphic function. */
  781|  24.1k|    if (pt->flags >= PROTO_CLC_POLY) {  /* Specialize to prototype instead. */
  ------------------
  |  |  410|  24.1k|#define PROTO_CLC_POLY		(3*PROTO_CLCOUNT)  /* Polymorphic threshold. */
  |  |  ------------------
  |  |  |  |  408|  24.1k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  |  |  ------------------
  ------------------
  |  Branch (781:9): [True: 0, False: 24.1k]
  ------------------
  782|      0|      TRef trpt = emitir(IRT(IR_FLOAD, IRT_PGC), tr, IRFL_FUNC_PC);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  783|      0|      emitir(IRTG(IR_EQ, IRT_PGC), trpt, lj_ir_kptr(J, proto_bc(pt)));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  784|      0|      (void)lj_ir_kgc(J, obj2gco(pt), IRT_PROTO);  /* Prevent GC of proto. */
  ------------------
  |  |  775|      0|#define obj2gco(v)	((GCobj *)(v))
  ------------------
  785|      0|      return tr;
  786|      0|    }
  787|  37.7k|  } else {
  788|       |    /* Don't specialize to non-monomorphic builtins. */
  789|  37.7k|    switch (fn->c.ffid) {
  790|      0|    case FF_coroutine_wrap_aux:
  ------------------
  |  Branch (790:5): [True: 0, False: 37.7k]
  ------------------
  791|      0|    case FF_string_gmatch_aux:
  ------------------
  |  Branch (791:5): [True: 0, False: 37.7k]
  ------------------
  792|       |      /* NYI: io_file_iter doesn't have an ffid, yet. */
  793|      0|      {  /* Specialize to the ffid. */
  794|      0|	TRef trid = emitir(IRT(IR_FLOAD, IRT_U8), tr, IRFL_FUNC_FFID);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  795|      0|	emitir(IRTGI(IR_EQ), trid, lj_ir_kint(J, fn->c.ffid));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  796|      0|      }
  797|      0|      return tr;
  798|  37.7k|    default:
  ------------------
  |  Branch (798:5): [True: 37.7k, False: 0]
  ------------------
  799|       |      /* NYI: don't specialize to non-monomorphic C functions. */
  800|  37.7k|      break;
  801|  37.7k|    }
  802|  37.7k|  }
  803|       |  /* Otherwise specialize to the function (closure) value itself. */
  804|  61.9k|  kfunc = lj_ir_kfunc(J, fn);
  ------------------
  |  |   74|  61.9k|#define lj_ir_kfunc(J, func)	lj_ir_kgc(J, obj2gco((func)), IRT_FUNC)
  |  |  ------------------
  |  |  |  |  775|  61.9k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
  805|  61.9k|  emitir(IRTG(IR_EQ, IRT_FUNC), tr, kfunc);
  ------------------
  |  |   42|  61.9k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  61.9k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  806|  61.9k|  return kfunc;
  807|  61.9k|}
lj_record.c:sload:
  201|  45.8k|{
  202|  45.8k|  IRType t = itype2irt(&J->L->base[slot]);
  203|  45.8k|  TRef ref = emitir_raw(IRTG(IR_SLOAD, t), (int32_t)J->baseslot+slot,
  ------------------
  |  |   45|  45.8k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  45.8k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  204|  45.8k|			IRSLOAD_TYPECHECK);
  205|  45.8k|  if (irtype_ispri(t)) ref = TREF_PRI(t);  /* Canonicalize primitive refs. */
  ------------------
  |  |  353|  45.8k|#define irtype_ispri(irt)	((uint32_t)(irt) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  Branch (353:27): [True: 2.23k, False: 43.6k]
  |  |  ------------------
  ------------------
                if (irtype_ispri(t)) ref = TREF_PRI(t);  /* Canonicalize primitive refs. */
  ------------------
  |  |  534|  2.23k|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|  2.23k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
  206|  45.8k|  J->base[slot] = ref;
  207|  45.8k|  return ref;
  208|  45.8k|}
lj_record.c:rec_mm_prep:
 1052|    363|{
 1053|    708|  BCReg s, top = cont == lj_cont_cat ? J->maxslot : curr_proto(J->L)->framesize;
  ------------------
  |  |  717|    354|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  ------------------
  |  |  |  |  480|    354|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|    354|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|    354|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|    354|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 354, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|    354|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1053:18): [True: 9, False: 354]
  ------------------
 1054|    363|#if LJ_FR2
 1055|    363|  J->base[top] = lj_ir_k64(J, IR_KNUM, u64ptr(contptr(cont)));
  ------------------
  |  |   98|    363|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
 1056|    363|  J->base[top+1] = TREF_CONT;
  ------------------
  |  |  499|    363|#define TREF_CONT		0x00020000
  ------------------
 1057|       |#else
 1058|       |  J->base[top] = lj_ir_kptr(J, contptr(cont)) | TREF_CONT;
 1059|       |#endif
 1060|    363|  J->framedepth++;
 1061|    799|  for (s = J->maxslot; s < top; s++)
  ------------------
  |  Branch (1061:24): [True: 436, False: 363]
  ------------------
 1062|    436|    J->base[s] = 0;  /* Clear frame gap to avoid resurrecting previous refs. */
 1063|    363|  return top+1+LJ_FR2;
  ------------------
  |  |  569|    363|#define LJ_FR2			1
  ------------------
 1064|    363|}
lj_record.c:rec_idx_key:
 1415|  16.2k|{
 1416|  16.2k|  TRef key;
 1417|  16.2k|  GCtab *t = tabV(&ix->tabv);
  ------------------
  |  |  864|  16.2k|#define tabV(o)		check_exp(tvistab(o), &gcval(o)->tab)
  |  |  ------------------
  |  |  |  |  367|  16.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  16.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  16.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 16.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  16.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1418|      0|  ix->oldv = lj_tab_get(J->L, t, &ix->keyv);  /* Lookup previous value. */
 1419|  16.2k|  *rbref = 0;
 1420|  16.2k|  rbguard->irt = 0;
 1421|       |
 1422|       |  /* Integer keys are looked up in the array part first. */
 1423|  16.2k|  key = ix->key;
 1424|  16.2k|  if (tref_isnumber(key)) {
  ------------------
  |  |  527|  16.2k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  16.2k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (527:27): [True: 1.24k, False: 14.9k]
  |  |  ------------------
  ------------------
 1425|  1.24k|    int32_t k = numberVint(&ix->keyv);
 1426|  2.49k|    if (!tvisint(&ix->keyv) && numV(&ix->keyv) != (lua_Number)k)
  ------------------
  |  |  803|  2.49k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  2.49k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  if (!tvisint(&ix->keyv) && numV(&ix->keyv) != (lua_Number)k)
  ------------------
  |  |  866|  1.24k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  1.24k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.24k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.24k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.24k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.24k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1426:32): [True: 28, False: 1.22k]
  ------------------
 1427|     28|      k = LJ_MAX_ASIZE;
  ------------------
  |  |   61|     28|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|     28|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
 1428|  1.24k|    if ((MSize)k < LJ_MAX_ASIZE) {  /* Potential array key? */
  ------------------
  |  |   61|  1.24k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|  1.24k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (1428:9): [True: 1.09k, False: 158]
  ------------------
 1429|  1.09k|      TRef ikey = lj_opt_narrow_index(J, key);
 1430|  1.09k|      TRef asizeref = emitir(IRTI(IR_FLOAD), ix->tab, IRFL_TAB_ASIZE);
  ------------------
  |  |   42|  1.09k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  1.09k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1431|  1.09k|      if ((MSize)k < t->asize) {  /* Currently an array key? */
  ------------------
  |  Branch (1431:11): [True: 934, False: 156]
  ------------------
 1432|    934|	TRef arrayref;
 1433|    934|	rec_idx_abc(J, asizeref, ikey, t->asize);
 1434|    934|	arrayref = emitir(IRT(IR_FLOAD, IRT_PGC), ix->tab, IRFL_TAB_ARRAY);
  ------------------
  |  |   42|    934|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    934|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1435|    934|	return emitir(IRT(IR_AREF, IRT_PGC), arrayref, ikey);
  ------------------
  |  |   42|    934|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    934|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1436|    934|      } else {  /* Currently not in array (may be an array extension)? */
 1437|    156|	emitir(IRTGI(IR_ULE), asizeref, ikey);  /* Inv. bounds check. */
  ------------------
  |  |   42|    156|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    156|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1438|    156|	if (k == 0 && tref_isk(key))
  ------------------
  |  |  531|      0|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1438:6): [True: 0, False: 156]
  ------------------
 1439|      0|	  key = lj_ir_knum_zero(J);  /* Canonicalize 0 or +-0.0 to +0.0. */
  ------------------
  |  |   79|      0|#define lj_ir_knum_zero(J)	lj_ir_knum_u64(J, U64x(00000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
 1440|       |	/* And continue with the hash lookup. */
 1441|    156|      }
 1442|  1.09k|    } else if (!tref_isk(key)) {
  ------------------
  |  |  531|    158|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|    158|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  ------------------
  |  Branch (1442:16): [True: 158, False: 0]
  ------------------
 1443|       |      /* We can rule out const numbers which failed the integerness test
 1444|       |      ** above. But all other numbers are potential array keys.
 1445|       |      */
 1446|    158|      if (t->asize == 0) {  /* True sparse tables have an empty array part. */
  ------------------
  |  Branch (1446:11): [True: 18, False: 140]
  ------------------
 1447|       |	/* Guard that the array part stays empty. */
 1448|     18|	TRef tmp = emitir(IRTI(IR_FLOAD), ix->tab, IRFL_TAB_ASIZE);
  ------------------
  |  |   42|     18|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     18|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1449|     18|	emitir(IRTGI(IR_EQ), tmp, lj_ir_kint(J, 0));
  ------------------
  |  |   42|     18|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     18|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1450|    140|      } else {
 1451|    140|	lj_trace_err(J, LJ_TRERR_NYITMIX);
 1452|    140|      }
 1453|    158|    }
 1454|  1.24k|  }
 1455|       |
 1456|       |  /* Otherwise the key is located in the hash part. */
 1457|  15.1k|  if (t->hmask == 0) {  /* Shortcut for empty hash part. */
  ------------------
  |  Branch (1457:7): [True: 76, False: 15.0k]
  ------------------
 1458|       |    /* Guard that the hash part stays empty. */
 1459|     76|    TRef tmp = emitir(IRTI(IR_FLOAD), ix->tab, IRFL_TAB_HMASK);
  ------------------
  |  |   42|     76|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     76|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1460|     76|    emitir(IRTGI(IR_EQ), tmp, lj_ir_kint(J, 0));
  ------------------
  |  |   42|     76|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     76|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1461|     76|    return lj_ir_kkptr(J, niltvg(J2G(J)));
  ------------------
  |  |   76|    152|#define lj_ir_kkptr(J, ptr)	lj_ir_kptr_(J, IR_KKPTR, (ptr))
  |  |  ------------------
  |  |  |  Branch (76:55): [True: 76, False: 0]
  |  |  ------------------
  ------------------
 1462|     76|  }
 1463|  15.0k|  if (tref_isinteger(key))  /* Hash keys are based on numbers, not ints. */
  ------------------
  |  |  526|  15.0k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  15.0k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 0, False: 15.0k]
  |  |  ------------------
  ------------------
 1464|      0|    key = emitir(IRTN(IR_CONV), key, IRCONV_NUM_INT);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1465|  15.0k|  if (tref_isk(key)) {
  ------------------
  |  |  531|  15.0k|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  15.0k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 14.9k, False: 138]
  |  |  ------------------
  ------------------
 1466|       |    /* Optimize lookup of constant hash keys. */
 1467|  14.9k|    GCSize hslot = (GCSize)((char *)ix->oldv-(char *)&noderef(t->node)[0].val);
  ------------------
  |  |  515|  14.9k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  14.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1468|  14.9k|    if (hslot <= t->hmask*(GCSize)sizeof(Node) &&
  ------------------
  |  Branch (1468:9): [True: 14.1k, False: 813]
  ------------------
 1469|  14.9k|	hslot <= 65535*(GCSize)sizeof(Node)) {
  ------------------
  |  Branch (1469:2): [True: 14.1k, False: 0]
  ------------------
 1470|  14.1k|      TRef node, kslot, hm;
 1471|  14.1k|      *rbref = J->cur.nins;  /* Mark possible rollback point. */
 1472|  14.1k|      *rbguard = J->guardemit;
 1473|  14.1k|      hm = emitir(IRTI(IR_FLOAD), ix->tab, IRFL_TAB_HMASK);
  ------------------
  |  |   42|  14.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  14.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1474|  14.1k|      emitir(IRTGI(IR_EQ), hm, lj_ir_kint(J, (int32_t)t->hmask));
  ------------------
  |  |   42|  14.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  14.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1475|  14.1k|      node = emitir(IRT(IR_FLOAD, IRT_PGC), ix->tab, IRFL_TAB_NODE);
  ------------------
  |  |   42|  14.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  14.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1476|  14.1k|      kslot = lj_ir_kslot(J, key, (IRRef)(hslot / sizeof(Node)));
 1477|  14.1k|      return emitir(IRTG(IR_HREFK, IRT_PGC), node, kslot);
  ------------------
  |  |   42|  14.1k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  14.1k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1478|  14.1k|    }
 1479|  14.9k|  }
 1480|       |  /* Fall back to a regular hash lookup. */
 1481|    951|  return emitir(IRT(IR_HREF, IRT_PGC), ix->tab, key);
  ------------------
  |  |   42|    951|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    951|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1482|  15.0k|}
lj_record.c:rec_idx_abc:
 1374|    934|{
 1375|       |  /* Try to emit invariant bounds checks. */
 1376|    934|  if ((J->flags & (JIT_F_OPT_LOOP|JIT_F_OPT_ABC)) ==
  ------------------
  |  |   86|    934|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  ------------------
  |  |  |  |   77|    934|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                if ((J->flags & (JIT_F_OPT_LOOP|JIT_F_OPT_ABC)) ==
  ------------------
  |  |   87|    934|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  ------------------
  |  |  |  |   77|    934|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (1376:7): [True: 934, False: 0]
  ------------------
 1377|    934|      (JIT_F_OPT_LOOP|JIT_F_OPT_ABC)) {
  ------------------
  |  |   86|    934|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  ------------------
  |  |  |  |   77|    934|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
                    (JIT_F_OPT_LOOP|JIT_F_OPT_ABC)) {
  ------------------
  |  |   87|    934|#define JIT_F_OPT_ABC		(JIT_F_OPT << 7)
  |  |  ------------------
  |  |  |  |   77|    934|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
 1378|    934|    IRRef ref = tref_ref(ikey);
  ------------------
  |  |  504|    934|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
 1379|    934|    IRIns *ir = IR(ref);
  ------------------
  |  |   39|    934|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
 1380|    934|    int32_t ofs = 0;
 1381|    934|    IRRef ofsref = 0;
 1382|       |    /* Handle constant offsets. */
 1383|    934|    if (ir->o == IR_ADD && irref_isk(ir->op2)) {
  ------------------
  |  |  485|    310|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 310, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1383:9): [True: 310, False: 624]
  ------------------
 1384|    310|      ofsref = ir->op2;
 1385|    310|      ofs = IR(ofsref)->i;
  ------------------
  |  |   39|    310|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
 1386|    310|      ref = ir->op1;
 1387|    310|      ir = IR(ref);
  ------------------
  |  |   39|    310|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
 1388|    310|    }
 1389|       |    /* Got scalar evolution analysis results for this reference? */
 1390|    934|    if (ref == J->scev.idx) {
  ------------------
  |  Branch (1390:9): [True: 361, False: 573]
  ------------------
 1391|    361|      int32_t stop;
 1392|    361|      lj_assertJ(irt_isint(J->scev.t) && ir->o == IR_SLOAD,
  ------------------
  |  |  527|    361|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    361|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    722|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 361, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 361, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    361|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1393|    361|		 "only int SCEV supported");
 1394|    361|      stop = numberVint(&(J->L->base - J->baseslot)[ir->op1 + FORL_STOP]);
 1395|       |      /* Runtime value for stop of loop is within bounds? */
 1396|    361|      if ((uint64_t)stop + ofs < (uint64_t)asize) {
  ------------------
  |  Branch (1396:11): [True: 103, False: 258]
  ------------------
 1397|       |	/* Emit invariant bounds check for stop. */
 1398|    103|	uint32_t abc = IRTG(IR_ABC, tref_isk(asizeref) ? IRT_U32 : IRT_P32);
  ------------------
  |  |  361|    103|#define IRTG(o, t)		(IRT((o), IRT_GUARD|(t)))
  |  |  ------------------
  |  |  |  |  358|    206|#define IRT(o, t)		((uint32_t)(((o)<<8) | (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (358:44): [True: 0, False: 103]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1399|    103|	emitir(abc, asizeref, ofs == 0 ? J->scev.stop :
  ------------------
  |  |   42|    103|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    206|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:55): [True: 91, False: 12]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1400|    103|	       emitir(IRTI(IR_ADD), J->scev.stop, ofsref));
 1401|       |	/* Emit invariant bounds check for start, if not const or negative. */
 1402|    103|	if (!(J->scev.dir && J->scev.start &&
  ------------------
  |  Branch (1402:8): [True: 99, False: 4]
  |  Branch (1402:23): [True: 99, False: 0]
  ------------------
 1403|    103|	      (int64_t)IR(J->scev.start)->i + ofs >= 0))
  ------------------
  |  |   39|     99|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  |  Branch (1403:8): [True: 99, False: 0]
  ------------------
 1404|      4|	  emitir(abc, asizeref, ikey);
  ------------------
  |  |   42|      4|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      4|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1405|    103|	return;
 1406|    103|      }
 1407|    361|    }
 1408|    934|  }
 1409|    831|  emitir(IRTGI(IR_ABC), asizeref, ikey);  /* Emit regular bounds check. */
  ------------------
  |  |   42|    831|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    831|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1410|    831|}
lj_record.c:nommstr:
 1486|  1.83k|{
 1487|  1.83k|  if (tref_isstr(key)) {
  ------------------
  |  |  515|  1.83k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|  1.83k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 1.31k, False: 523]
  |  |  ------------------
  ------------------
 1488|  1.31k|    if (tref_isk(key)) {
  ------------------
  |  |  531|  1.31k|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  1.31k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 1.31k, False: 0]
  |  |  ------------------
  ------------------
 1489|  2.63k|      GCstr *str = ir_kstr(IR(tref_ref(key)));
  ------------------
  |  |  588|  1.31k|#define ir_kstr(ir)	(gco2str(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  765|  1.31k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  2.63k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  1.31k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  2.63k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.31k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 1.31k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  1.31k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 1.31k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1490|      0|      uint32_t mm;
 1491|  9.20k|      for (mm = 0; mm <= MM_FAST; mm++)
  ------------------
  |  Branch (1491:20): [True: 7.89k, False: 1.31k]
  ------------------
 1492|  7.89k|	if (mmname_str(J2G(J), mm) == str)
  ------------------
  |  |  590|  7.89k|#define mmname_str(g, mm)	(strref((g)->gcroot[GCROOT_MMNAME+(mm)]))
  |  |  ------------------
  |  |  |  |  315|  7.89k|#define strref(r)	(&gcref((r))->str)
  |  |  |  |  ------------------
  |  |  |  |  |  |   67|  7.89k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1492:6): [True: 0, False: 7.89k]
  ------------------
 1493|      0|	  return 0;  /* MUST be one the fast metamethod names. */
 1494|  2.63k|    } else {
 1495|      0|      return 0;  /* Variable string key MAY be a metamethod name. */
 1496|      0|    }
 1497|  1.31k|  }
 1498|  1.83k|  return 1;  /* CANNOT be a metamethod name. */
 1499|  1.83k|}
lj_record.c:rec_next_types:
 1664|    303|{
 1665|    369|  for (; idx < t->asize; idx++) {
  ------------------
  |  Branch (1665:10): [True: 195, False: 174]
  ------------------
 1666|    195|    cTValue *a = arrayslot(t, idx);
  ------------------
  |  |   80|    195|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|    195|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|    195|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1667|    195|    if (LJ_LIKELY(!tvisnil(a)))
  ------------------
  |  |  145|    195|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 129, False: 66]
  |  |  ------------------
  ------------------
 1668|    129|      return (LJ_DUALNUM ? IRT_INT : IRT_NUM) + (itype2irt(a) << 8);
  ------------------
  |  |  549|    129|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
 1669|    195|  }
 1670|    174|  idx -= t->asize;
 1671|    247|  for (; idx <= t->hmask; idx++) {
  ------------------
  |  Branch (1671:10): [True: 174, False: 73]
  ------------------
 1672|    174|    Node *n = &noderef(t->node)[idx];
  ------------------
  |  |  515|    174|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    174|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1673|    174|    if (!tvisnil(&n->val))
  ------------------
  |  |  782|    174|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (1673:9): [True: 101, False: 73]
  ------------------
 1674|    101|      return itype2irt(&n->key) + (itype2irt(&n->val) << 8);
 1675|    174|  }
 1676|     73|  return IRT_NIL + (IRT_NIL << 8);
 1677|    174|}
lj_record.c:rec_cat:
 2139|  17.6k|{
 2140|  17.6k|  lua_State *L = J->L;
 2141|  17.6k|  ptrdiff_t delta = L->top - L->base;
 2142|  17.6k|  TValue savetv[5+LJ_FR2], errobj;
 2143|  17.6k|  RecCatDataCP rcd;
 2144|  17.6k|  int errcode;
 2145|  17.6k|  rcd.J = J;
 2146|  17.6k|  rcd.baseslot = baseslot;
 2147|  17.6k|  rcd.topslot = topslot;
 2148|  17.6k|  memcpy(savetv, &L->base[topslot-1], sizeof(savetv));  /* Save slots. */
 2149|  17.6k|  errcode = lj_vm_cpcall(L, NULL, &rcd, rec_mm_concat_cp);
 2150|  17.6k|  if (errcode) copyTV(L, &errobj, L->top-1);
  ------------------
  |  Branch (2150:7): [True: 0, False: 17.6k]
  ------------------
 2151|  17.6k|  memcpy(&L->base[topslot-1], savetv, sizeof(savetv));  /* Restore slots. */
 2152|  17.6k|  if (errcode) {
  ------------------
  |  Branch (2152:7): [True: 0, False: 17.6k]
  ------------------
 2153|      0|    L->top = L->base + delta;
 2154|      0|    copyTV(L, L->top++, &errobj);
 2155|      0|    return (TRef)(-errcode);
 2156|      0|  }
 2157|  17.6k|  return rcd.tr;
 2158|  17.6k|}
lj_record.c:rec_mm_concat_cp:
 2088|  17.6k|{
 2089|  17.6k|  RecCatDataCP *rcd = (RecCatDataCP *)ud;
 2090|  17.6k|  jit_State *J = rcd->J;
 2091|  17.6k|  BCReg baseslot = rcd->baseslot, topslot = rcd->topslot;
 2092|  17.6k|  TRef *top = &J->base[topslot];
 2093|  17.6k|  BCReg s;
 2094|  17.6k|  RecordIndex ix;
 2095|  17.6k|  UNUSED(L); UNUSED(dummy);
  ------------------
  |  |   91|  17.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
                UNUSED(L); UNUSED(dummy);
  ------------------
  |  |   91|  17.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
 2096|  17.6k|  lj_assertJ(baseslot < topslot, "bad CAT arg");
  ------------------
  |  |  527|  17.6k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  17.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  17.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 17.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  17.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2097|  61.7k|  for (s = baseslot; s <= topslot; s++)
  ------------------
  |  Branch (2097:22): [True: 44.1k, False: 17.6k]
  ------------------
 2098|  44.1k|    (void)getslot(J, s);  /* Ensure all arguments have a reference. */
  ------------------
  |  |  211|  61.7k|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 44.1k, False: 0]
  |  |  ------------------
  ------------------
 2099|  17.6k|  if (tref_isnumber_str(top[0]) && tref_isnumber_str(top[-1])) {
  ------------------
  |  |  528|  35.3k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  35.3k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  17.6k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 0, False: 17.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|  17.6k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|  17.6k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 17.6k, False: 3]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (tref_isnumber_str(top[0]) && tref_isnumber_str(top[-1])) {
  ------------------
  |  |  528|  17.6k|#define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  527|  35.3k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  |  |  ------------------
  |  |  |  |  |  |  508|  17.6k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (527:27): [True: 186, False: 17.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tref_isnumber_str(tr)	(tref_isnumber((tr)) || tref_isstr((tr)))
  |  |  ------------------
  |  |  |  |  515|  17.4k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  |  |  ------------------
  |  |  |  |  |  |  510|  17.4k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (515:25): [True: 17.4k, False: 6]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2100|  17.6k|    TRef tr, hdr, *trp, *xbase, *base = &J->base[baseslot];
 2101|       |    /* First convert numbers to strings. */
 2102|  61.7k|    for (trp = top; trp >= base; trp--) {
  ------------------
  |  Branch (2102:21): [True: 44.0k, False: 17.6k]
  ------------------
 2103|  44.0k|      if (tref_isnumber(*trp))
  ------------------
  |  |  527|  44.0k|#define tref_isnumber(tr)	(tref_typerange((tr), IRT_NUM, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  44.0k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (527:27): [True: 186, False: 43.9k]
  |  |  ------------------
  ------------------
 2104|    186|	*trp = emitir(IRT(IR_TOSTR, IRT_STR), *trp,
  ------------------
  |  |   42|    186|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    372|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:55): [True: 186, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2105|  44.0k|		      tref_isnum(*trp) ? IRTOSTR_NUM : IRTOSTR_INT);
 2106|  43.9k|      else if (!tref_isstr(*trp))
  ------------------
  |  |  515|  43.9k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|  43.9k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (2106:16): [True: 0, False: 43.9k]
  ------------------
 2107|      0|	break;
 2108|  44.0k|    }
 2109|  17.6k|    xbase = ++trp;
 2110|  17.6k|    tr = hdr = emitir(IRT(IR_BUFHDR, IRT_PGC),
  ------------------
  |  |   42|  17.6k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  17.6k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2111|  17.6k|		      lj_ir_kptr(J, &J2G(J)->tmpbuf), IRBUFHDR_RESET);
 2112|  44.0k|    do {
 2113|  44.0k|      tr = emitir(IRTG(IR_BUFPUT, IRT_PGC), tr, *trp++);
  ------------------
  |  |   42|  44.0k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  44.0k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2114|  44.0k|    } while (trp <= top);
  ------------------
  |  Branch (2114:14): [True: 26.4k, False: 17.6k]
  ------------------
 2115|  17.6k|    tr = emitir(IRTG(IR_BUFSTR, IRT_STR), tr, hdr);
  ------------------
  |  |   42|  17.6k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  17.6k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2116|  17.6k|    J->maxslot = (BCReg)(xbase - J->base);
 2117|  17.6k|    if (xbase == base) {
  ------------------
  |  Branch (2117:9): [True: 17.6k, False: 0]
  ------------------
 2118|  17.6k|      rcd->tr = tr;  /* Return simple concatenation result. */
 2119|  17.6k|      return NULL;
 2120|  17.6k|    }
 2121|       |    /* Pass partial result. */
 2122|      0|    topslot = J->maxslot--;
 2123|      0|    *xbase = tr;
 2124|      0|    top = xbase;
 2125|      0|    setstrV(J->L, &ix.keyv, &J2G(J)->strempty);  /* Simulate string result. */
  ------------------
  |  |  115|      0|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2126|      9|  } else {
 2127|      9|    J->maxslot = topslot-1;
 2128|      9|    copyTV(J->L, &ix.keyv, &J->L->base[topslot]);
 2129|      9|  }
 2130|      9|  copyTV(J->L, &ix.tabv, &J->L->base[topslot-1]);
 2131|      9|  ix.tab = top[-1];
 2132|      9|  ix.key = top[0];
 2133|      9|  rec_mm_arith(J, &ix, MM_concat);  /* Call __concat metamethod. */
 2134|      9|  rcd->tr = 0;  /* No result yet. */
 2135|      9|  return NULL;
 2136|  17.6k|}
lj_record.c:rec_comp_fixup:
 2173|  24.4k|{
 2174|  24.4k|  BCIns jmpins = pc[1];
 2175|  24.4k|  const BCIns *npc = pc + 2 + (cond ? bc_j(jmpins) : 0);
  ------------------
  |  |   39|  17.6k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  17.6k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  17.6k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  |  Branch (2175:32): [True: 17.6k, False: 6.77k]
  ------------------
 2176|  24.4k|  SnapShot *snap = &J->cur.snap[J->cur.nsnap-1];
 2177|       |  /* Set PC to opposite target to avoid re-recording the comp. in side trace. */
 2178|  24.4k|#if LJ_FR2
 2179|  24.4k|  SnapEntry *flink = &J->cur.snapmap[snap->mapofs + snap->nent];
 2180|  24.4k|  uint64_t pcbase;
 2181|  24.4k|  memcpy(&pcbase, flink, sizeof(uint64_t));
 2182|  24.4k|  pcbase = (pcbase & 0xff) | (u64ptr(npc) << 8);
  ------------------
  |  |   98|  24.4k|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
 2183|  24.4k|  memcpy(flink, &pcbase, sizeof(uint64_t));
 2184|       |#else
 2185|       |  J->cur.snapmap[snap->mapofs + snap->nent] = SNAP_MKPC(npc);
 2186|       |#endif
 2187|  24.4k|  J->needsnap = 1;
 2188|  24.4k|  if (bc_a(jmpins) < J->maxslot) J->maxslot = bc_a(jmpins);
  ------------------
  |  |   35|  24.4k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                if (bc_a(jmpins) < J->maxslot) J->maxslot = bc_a(jmpins);
  ------------------
  |  |   35|  13.1k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (2188:7): [True: 13.1k, False: 11.2k]
  ------------------
 2189|  24.4k|  lj_snap_shrink(J);  /* Shrink last snapshot if possible. */
 2190|  24.4k|}
lj_record.c:rec_check_slots:
  105|   486k|{
  106|   486k|  BCReg s, nslots = J->baseslot + J->maxslot;
  107|   486k|  int32_t depth = 0;
  108|   486k|  cTValue *base = J->L->base - J->baseslot;
  109|   486k|  lj_assertJ(J->baseslot >= 1+LJ_FR2, "bad baseslot");
  ------------------
  |  |  527|   486k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   486k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   486k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 486k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   486k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  110|   486k|  lj_assertJ(J->baseslot == 1+LJ_FR2 || (J->slot[J->baseslot-1] & TREF_FRAME),
  ------------------
  |  |  527|   486k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   486k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   698k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 274k, False: 211k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 211k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   486k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  111|   486k|	     "baseslot does not point to frame");
  112|   486k|  lj_assertJ(nslots <= LJ_MAX_JSLOTS, "slot overflow");
  ------------------
  |  |  527|   486k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   486k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   486k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 486k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   486k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  113|  8.96M|  for (s = 0; s < nslots; s++) {
  ------------------
  |  Branch (113:15): [True: 8.47M, False: 486k]
  ------------------
  114|  8.47M|    TRef tr = J->slot[s];
  115|  8.47M|    if (tr) {
  ------------------
  |  Branch (115:9): [True: 4.49M, False: 3.98M]
  ------------------
  116|  4.49M|      cTValue *tv = &base[s];
  117|  4.49M|      IRRef ref = tref_ref(tr);
  ------------------
  |  |  504|  4.49M|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  118|  4.49M|      IRIns *ir = NULL;  /* Silence compiler. */
  119|  4.49M|      lj_assertJ(tv < J->L->top, "slot %d above top of Lua stack", s);
  ------------------
  |  |  527|  4.49M|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  4.49M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.49M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.49M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.49M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|  4.49M|      if (!LJ_FR2 || ref || !(tr & (TREF_FRAME | TREF_CONT))) {
  ------------------
  |  |  569|  8.99M|#define LJ_FR2			1
  ------------------
                    if (!LJ_FR2 || ref || !(tr & (TREF_FRAME | TREF_CONT))) {
  ------------------
  |  |  498|   179k|#define TREF_FRAME		0x00010000
  ------------------
                    if (!LJ_FR2 || ref || !(tr & (TREF_FRAME | TREF_CONT))) {
  ------------------
  |  |  499|   179k|#define TREF_CONT		0x00020000
  ------------------
  |  Branch (120:11): [Folded - Ignored]
  |  Branch (120:22): [True: 4.31M, False: 179k]
  |  Branch (120:29): [True: 0, False: 179k]
  ------------------
  121|  4.31M|	lj_assertJ(ref >= J->cur.nk && ref < J->cur.nins,
  ------------------
  |  |  527|  4.31M|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  4.31M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  8.63M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.31M, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 4.31M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  122|  4.31M|		   "slot %d ref %04d out of range", s, ref - REF_BIAS);
  123|  4.31M|	ir = IR(ref);
  ------------------
  |  |   39|  4.31M|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  124|  4.31M|	lj_assertJ(irt_t(ir->t) == tref_t(tr), "slot %d IR type mismatch", s);
  ------------------
  |  |  527|  4.31M|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  4.31M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  4.31M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.31M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  125|  4.31M|      }
  126|  4.49M|      if (s == 0) {
  ------------------
  |  Branch (126:11): [True: 170k, False: 4.32M]
  ------------------
  127|   170k|	lj_assertJ(tref_isfunc(tr), "frame slot 0 is not a function");
  ------------------
  |  |  527|   170k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   170k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   170k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 170k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   170k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  128|   170k|#if LJ_FR2
  129|  4.32M|      } else if (s == 1) {
  ------------------
  |  Branch (129:18): [True: 863, False: 4.32M]
  ------------------
  130|    863|	lj_assertJ((tr & ~TREF_FRAME) == 0, "bad frame slot 1");
  ------------------
  |  |  527|    863|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    863|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    863|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 863, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    863|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  131|    863|#endif
  132|  4.32M|      } else if ((tr & TREF_FRAME)) {
  ------------------
  |  |  498|  4.32M|#define TREF_FRAME		0x00010000
  ------------------
  |  Branch (132:18): [True: 299k, False: 4.02M]
  ------------------
  133|   299k|	GCfunc *fn = gco2func(frame_gc(tv));
  ------------------
  |  |  769|   299k|#define gco2func(o)	check_exp((o)->gch.gct == ~LJ_TFUNC, &(o)->fn)
  |  |  ------------------
  |  |  |  |  367|   299k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   299k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   299k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 299k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   299k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  134|   299k|	BCReg delta = (BCReg)(tv - frame_prev(tv));
  ------------------
  |  |  110|   299k|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|   299k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|   299k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|   299k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|   299k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 296k, False: 2.20k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|   296k|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|   296k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|   296k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|  2.20k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|  2.20k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|  2.20k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|  2.20k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|  2.20k|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|  2.20k|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  135|   299k|#if LJ_FR2
  136|   299k|	lj_assertJ(!ref || ir_knum(ir)->u64 == tv->u64,
  ------------------
  |  |  527|   299k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   299k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   787k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 122k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 176k, False: 122k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 122k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   299k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  137|   299k|		   "frame slot %d PC mismatch", s);
  138|   299k|	tr = J->slot[s-1];
  139|   299k|	ir = IR(tref_ref(tr));
  ------------------
  |  |   39|   299k|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  140|   299k|#endif
  141|   299k|	lj_assertJ(tref_isfunc(tr),
  ------------------
  |  |  527|   299k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   299k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   299k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 299k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   299k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  142|   299k|		   "frame slot %d is not a function", s-LJ_FR2);
  143|   299k|	lj_assertJ(!tref_isk(tr) || fn == ir_kfunc(ir),
  ------------------
  |  |  527|   299k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   299k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.29M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 299k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 299k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 299k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 299k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 299k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   299k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  144|   299k|		   "frame slot %d function mismatch", s-LJ_FR2);
  145|   299k|	lj_assertJ(s > delta + LJ_FR2 ? (J->slot[s-delta] & TREF_FRAME)
  ------------------
  |  |  527|   299k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   299k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   598k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 299k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 87.3k, False: 211k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   299k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  146|   299k|				      : (s == delta + LJ_FR2),
  147|   299k|		   "frame slot %d broken chain", s-LJ_FR2);
  148|   299k|	depth++;
  149|  4.02M|      } else if ((tr & TREF_CONT)) {
  ------------------
  |  |  499|  4.02M|#define TREF_CONT		0x00020000
  ------------------
  |  Branch (149:18): [True: 1.99k, False: 4.02M]
  ------------------
  150|  1.99k|#if LJ_FR2
  151|  1.99k|	lj_assertJ(!ref || ir_knum(ir)->u64 == tv->u64,
  ------------------
  |  |  527|  1.99k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.99k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.23k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 60, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.93k, False: 60]
  |  |  |  |  |  |  |  Branch (355:5): [True: 60, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.99k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  152|  1.99k|		   "cont slot %d continuation mismatch", s);
  153|       |#else
  154|       |	lj_assertJ(ir_kptr(ir) == gcrefp(tv->gcr, void),
  155|       |		   "cont slot %d continuation mismatch", s);
  156|       |#endif
  157|  1.99k|	lj_assertJ((J->slot[s+1+LJ_FR2] & TREF_FRAME),
  ------------------
  |  |  527|  1.99k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.99k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.99k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.99k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.99k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  158|  1.99k|		   "cont slot %d not followed by frame", s);
  159|  1.99k|	depth++;
  160|  4.02M|      } else if ((tr & TREF_KEYINDEX)) {
  ------------------
  |  |  500|  4.02M|#define TREF_KEYINDEX		0x00100000
  ------------------
  |  Branch (160:18): [True: 1.08k, False: 4.02M]
  ------------------
  161|  1.08k|	lj_assertJ(tref_isint(tr), "keyindex slot %d bad type %d",
  ------------------
  |  |  527|  1.08k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.08k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.08k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.08k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.08k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  162|  1.08k|				   s, tref_type(tr));
  163|  4.02M|      } else {
  164|       |	/* Number repr. may differ, but other types must be the same. */
  165|  4.02M|	lj_assertJ(tvisnumber(tv) ? tref_isnumber(tr) :
  ------------------
  |  |  527|  4.02M|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  4.02M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  8.04M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 4.02M, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 1.39M, False: 2.63M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  4.02M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (356:55): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.02M|				    itype2irt(tv) == tref_type(tr),
  167|  4.02M|		   "slot %d type mismatch: stack type %d vs IR type %d",
  168|  4.02M|		   s, itypemap(tv), tref_type(tr));
  169|  4.02M|	if (tref_isk(tr)) {  /* Compare constants. */
  ------------------
  |  |  531|  4.02M|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  4.02M|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 764k, False: 3.25M]
  |  |  ------------------
  ------------------
  170|   764k|	  TValue tvk;
  171|   764k|	  lj_ir_kvalue(J->L, &tvk, ir);
  172|   764k|	  lj_assertJ((tvisnum(&tvk) && tvisnan(&tvk)) ?
  ------------------
  |  |  527|   764k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   764k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.42M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 764k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 132k, False: 632k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 132k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   764k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  173|   764k|		     (tvisnum(tv) && tvisnan(tv)) :
  174|   764k|		     lj_obj_equal(tv, &tvk),
  175|   764k|		     "slot %d const mismatch: stack %016llx vs IR %016llx",
  176|   764k|		     s, tv->u64, tvk.u64);
  177|   764k|	}
  178|  4.02M|      }
  179|  4.49M|    }
  180|  8.47M|  }
  181|   486k|  lj_assertJ(J->framedepth == depth,
  ------------------
  |  |  527|   486k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   486k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   486k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 486k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   486k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  182|   486k|	     "frame depth mismatch %d vs %d", J->framedepth, depth);
  183|   486k|}
lj_record.c:rec_check_ir:
   52|   486k|{
   53|   486k|  IRRef i, nins = J->cur.nins, nk = J->cur.nk;
   54|   486k|  lj_assertJ(nk <= REF_BIAS && nins >= REF_BIAS && nins < 65536,
  ------------------
  |  |  527|   486k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   486k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.94M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 486k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 486k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 486k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   486k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   55|   486k|	     "inconsistent IR layout");
   56|  23.2M|  for (i = nk; i < nins; i++) {
  ------------------
  |  Branch (56:16): [True: 22.7M, False: 486k]
  ------------------
   57|  22.7M|    IRIns *ir = IR(i);
  ------------------
  |  |   39|  22.7M|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
   58|  22.7M|    uint32_t mode = lj_ir_mode[ir->o];
   59|  22.7M|    IRRef op1 = ir->op1;
   60|  22.7M|    IRRef op2 = ir->op2;
   61|  22.7M|    const char *err = NULL;
   62|  22.7M|    switch (irm_op1(mode)) {
  ------------------
  |  |  300|  22.7M|#define irm_op1(m)		((IRMode)((m)&3))
  |  |  ------------------
  |  |  |  Branch (300:21): [True: 0, False: 22.7M]
  |  |  ------------------
  ------------------
   63|  1.50M|    case IRMnone:
  ------------------
  |  Branch (63:5): [True: 1.50M, False: 21.2M]
  ------------------
   64|  1.50M|      if (op1 != 0) err = "IRMnone op1 used";
  ------------------
  |  Branch (64:11): [True: 0, False: 1.50M]
  ------------------
   65|  1.50M|      break;
   66|  13.5M|    case IRMref:
  ------------------
  |  Branch (66:5): [True: 13.5M, False: 9.22M]
  ------------------
   67|  13.5M|      if (op1 < nk || (i >= REF_BIAS ? op1 >= i : op1 <= i))
  ------------------
  |  Branch (67:11): [True: 0, False: 13.5M]
  |  Branch (67:23): [True: 0, False: 13.5M]
  |  Branch (67:24): [True: 13.4M, False: 108k]
  ------------------
   68|      0|	err = "IRMref op1 out of range";
   69|  13.5M|      break;
   70|  2.58M|    case IRMlit: break;
  ------------------
  |  Branch (70:5): [True: 2.58M, False: 20.1M]
  ------------------
   71|  5.14M|    case IRMcst:
  ------------------
  |  Branch (71:5): [True: 5.14M, False: 17.6M]
  ------------------
   72|  5.14M|      if (i >= REF_BIAS) { err = "constant in IR range"; break; }
  ------------------
  |  Branch (72:11): [True: 0, False: 5.14M]
  ------------------
   73|  5.14M|      if (irt_is64(ir->t) && ir->o != IR_KNULL)
  ------------------
  |  |  409|  10.2M|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|  5.14M|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|  5.14M|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|  5.14M|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|  5.14M|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|  5.14M|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 3.20M, False: 1.94M]
  |  |  ------------------
  ------------------
  |  Branch (73:30): [True: 3.18M, False: 13.7k]
  ------------------
   74|  3.18M|	i++;
   75|  5.14M|      continue;
   76|  22.7M|    }
   77|  17.6M|    switch (irm_op2(mode)) {
  ------------------
  |  |  301|  17.6M|#define irm_op2(m)		((IRMode)(((m)>>2)&3))
  |  |  ------------------
  |  |  |  Branch (301:21): [True: 0, False: 17.6M]
  |  |  ------------------
  ------------------
   78|  1.76M|    case IRMnone:
  ------------------
  |  Branch (78:5): [True: 1.76M, False: 15.8M]
  ------------------
   79|  1.76M|      if (op2) err = "IRMnone op2 used";
  ------------------
  |  Branch (79:11): [True: 0, False: 1.76M]
  ------------------
   80|  1.76M|      break;
   81|  10.0M|    case IRMref:
  ------------------
  |  Branch (81:5): [True: 10.0M, False: 7.59M]
  ------------------
   82|  10.0M|      if (op2 < nk || (i >= REF_BIAS ? op2 >= i : op2 <= i))
  ------------------
  |  Branch (82:11): [True: 0, False: 10.0M]
  |  Branch (82:23): [True: 0, False: 10.0M]
  |  Branch (82:24): [True: 10.0M, False: 0]
  ------------------
   83|      0|	err = "IRMref op2 out of range";
   84|  10.0M|      break;
   85|  5.82M|    case IRMlit: break;
  ------------------
  |  Branch (85:5): [True: 5.82M, False: 11.8M]
  ------------------
   86|      0|    case IRMcst: err = "IRMcst op2"; break;
  ------------------
  |  Branch (86:5): [True: 0, False: 17.6M]
  ------------------
   87|  17.6M|    }
   88|  17.6M|    if (!err && ir->prev) {
  ------------------
  |  Branch (88:9): [True: 17.6M, False: 0]
  |  Branch (88:17): [True: 11.3M, False: 6.31M]
  ------------------
   89|  11.3M|      if (ir->prev < nk || (i >= REF_BIAS ? ir->prev >= i : ir->prev <= i))
  ------------------
  |  Branch (89:11): [True: 0, False: 11.3M]
  |  Branch (89:28): [True: 0, False: 11.3M]
  |  Branch (89:29): [True: 11.2M, False: 50.4k]
  ------------------
   90|      0|	err = "chain out of range";
   91|  11.3M|      else if (ir->o != IR_NOP && IR(ir->prev)->o != ir->o)
  ------------------
  |  |   39|  11.3M|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  |  Branch (91:16): [True: 11.3M, False: 0]
  |  Branch (91:35): [True: 0, False: 11.3M]
  ------------------
   92|      0|	err = "chain to different op";
   93|  11.3M|    }
   94|  17.6M|    lj_assertJ(!err, "bad IR %04d op %d(%04d,%04d): %s",
  ------------------
  |  |  527|  17.6M|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  17.6M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  17.6M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 17.6M, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  17.6M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (356:55): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (356:55): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   95|  17.6M|	       i-REF_BIAS,
   96|  17.6M|	       ir->o,
   97|  17.6M|	       irm_op1(mode) == IRMref ? op1-REF_BIAS : op1,
   98|  17.6M|	       irm_op2(mode) == IRMref ? op2-REF_BIAS : op2,
   99|  17.6M|	       err);
  100|  17.6M|  }
  101|   486k|}
lj_record.c:rec_profile_ins:
  754|   486k|{
  755|   486k|  if (J->prof_mode && rec_profile_need(J, J->pt, pc)) {
  ------------------
  |  Branch (755:7): [True: 0, False: 486k]
  |  Branch (755:23): [True: 0, False: 0]
  ------------------
  756|      0|    emitir(IRTG(IR_PROF, IRT_NIL), 0, 0);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  757|      0|    lj_snap_add(J);
  758|      0|  }
  759|   486k|}
lj_record.c:rec_comp_prep:
 2164|  24.4k|{
 2165|       |  /* Prevent merging with snapshot #0 (GC exit) since we fixup the PC. */
 2166|  24.4k|  if (J->cur.nsnap == 1 && J->cur.snap[0].ref == J->cur.nins)
  ------------------
  |  Branch (2166:7): [True: 8.57k, False: 15.8k]
  |  Branch (2166:28): [True: 0, False: 8.57k]
  ------------------
 2167|      0|    emitir_raw(IRT(IR_NOP, IRT_NIL), 0, 0);
  ------------------
  |  |   45|      0|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2168|  24.4k|  lj_snap_add(J);
 2169|  24.4k|}
lj_record.c:rec_mm_arith:
 1137|    346|{
 1138|       |  /* Set up metamethod call first to save ix->tab and ix->tabv. */
 1139|    346|  BCReg func = rec_mm_prep(J, mm == MM_concat ? lj_cont_cat : lj_cont_ra);
  ------------------
  |  Branch (1139:31): [True: 9, False: 337]
  ------------------
 1140|    346|  TRef *base = J->base + func;
 1141|    346|  TValue *basev = J->L->base + func;
 1142|    346|  base[1+LJ_FR2] = ix->tab; base[2+LJ_FR2] = ix->key;
  ------------------
  |  |  569|    346|#define LJ_FR2			1
  ------------------
                base[1+LJ_FR2] = ix->tab; base[2+LJ_FR2] = ix->key;
  ------------------
  |  |  569|    346|#define LJ_FR2			1
  ------------------
 1143|    346|  copyTV(J->L, basev+1+LJ_FR2, &ix->tabv);
  ------------------
  |  |  569|    346|#define LJ_FR2			1
  ------------------
 1144|    346|  copyTV(J->L, basev+2+LJ_FR2, &ix->keyv);
  ------------------
  |  |  569|    346|#define LJ_FR2			1
  ------------------
 1145|    346|  if (!lj_record_mm_lookup(J, ix, mm)) {  /* Lookup mm on 1st operand. */
  ------------------
  |  Branch (1145:7): [True: 313, False: 33]
  ------------------
 1146|    313|    if (mm != MM_unm) {
  ------------------
  |  Branch (1146:9): [True: 313, False: 0]
  ------------------
 1147|    313|      ix->tab = ix->key;
 1148|    313|      copyTV(J->L, &ix->tabv, &ix->keyv);
 1149|    313|      if (lj_record_mm_lookup(J, ix, mm))  /* Lookup mm on 2nd operand. */
  ------------------
  |  Branch (1149:11): [True: 313, False: 0]
  ------------------
 1150|    313|	goto ok;
 1151|    313|    }
 1152|      0|    lj_trace_err(J, LJ_TRERR_NOMM);
 1153|    313|  }
 1154|    346|ok:
 1155|    346|  base[0] = ix->mobj;
 1156|    346|#if LJ_FR2
 1157|    346|  base[1] = 0;
 1158|    346|#endif
 1159|    346|  copyTV(J->L, basev+0, &ix->mobjv);
 1160|    346|  lj_record_call(J, func, 2);
 1161|    346|  return 0;  /* No result yet. */
 1162|    346|}
lj_record.c:rec_upvalue:
 1757|  36.0k|{
 1758|  36.0k|  GCupval *uvp = &gcref(J->fn->l.uvptr[uv])->uv;
  ------------------
  |  |   67|  36.0k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
 1759|  36.0k|  TRef fn = getcurrf(J);
 1760|  36.0k|  IRRef uref;
 1761|  36.0k|  int needbarrier = 0;
 1762|  36.0k|  if (rec_upvalue_constify(J, uvp)) {  /* Try to constify immutable upvalue. */
  ------------------
  |  Branch (1762:7): [True: 35.6k, False: 344]
  ------------------
 1763|  35.6k|    TRef tr, kfunc;
 1764|  35.6k|    lj_assertJ(val == 0, "bad usage");
  ------------------
  |  |  527|  35.6k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  35.6k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  35.6k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 35.6k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  35.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1765|  35.6k|    if (!tref_isk(fn)) {  /* Late specialization of current function. */
  ------------------
  |  |  531|  35.6k|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  35.6k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  ------------------
  |  Branch (1765:9): [True: 6.05k, False: 29.6k]
  ------------------
 1766|  6.05k|      if (J->pt->flags >= PROTO_CLC_POLY)
  ------------------
  |  |  410|  6.05k|#define PROTO_CLC_POLY		(3*PROTO_CLCOUNT)  /* Polymorphic threshold. */
  |  |  ------------------
  |  |  |  |  408|  6.05k|#define PROTO_CLCOUNT		0x20	/* Base of saturating 3 bit counter. */
  |  |  ------------------
  ------------------
  |  Branch (1766:11): [True: 0, False: 6.05k]
  ------------------
 1767|      0|	goto noconstify;
 1768|  6.05k|      kfunc = lj_ir_kfunc(J, J->fn);
  ------------------
  |  |   74|  6.05k|#define lj_ir_kfunc(J, func)	lj_ir_kgc(J, obj2gco((func)), IRT_FUNC)
  |  |  ------------------
  |  |  |  |  775|  6.05k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  ------------------
 1769|  6.05k|      emitir(IRTG(IR_EQ, IRT_FUNC), fn, kfunc);
  ------------------
  |  |   42|  6.05k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  6.05k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1770|  6.05k|#if LJ_FR2
 1771|  6.05k|      J->base[-2] = kfunc;
 1772|       |#else
 1773|       |      J->base[-1] = kfunc | TREF_FRAME;
 1774|       |#endif
 1775|  6.05k|      fn = kfunc;
 1776|  6.05k|    }
 1777|  35.6k|    tr = lj_record_constify(J, uvval(uvp));
  ------------------
  |  |  449|  35.6k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  35.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1778|  35.6k|    if (tr)
  ------------------
  |  Branch (1778:9): [True: 35.6k, False: 0]
  ------------------
 1779|  35.6k|      return tr;
 1780|  35.6k|  }
 1781|    344|noconstify:
 1782|       |  /* Note: this effectively limits LJ_MAX_UPVAL to 127. */
 1783|    344|  uv = (uv << 8) | (hashrot(uvp->dhash, uvp->dhash + HASH_BIAS) & 0xff);
  ------------------
  |  |   12|    344|#define HASH_BIAS	(-0x04c11db7)
  ------------------
 1784|    344|  if (!uvp->closed) {
  ------------------
  |  Branch (1784:7): [True: 344, False: 0]
  ------------------
 1785|       |    /* In current stack? */
 1786|    344|    if (uvval(uvp) >= tvref(J->L->stack) &&
  ------------------
  |  |  449|    344|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|    344|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (uvval(uvp) >= tvref(J->L->stack) &&
  ------------------
  |  |  217|    688|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    344|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (1786:9): [True: 344, False: 0]
  ------------------
 1787|    344|	uvval(uvp) < tvref(J->L->maxstack)) {
  ------------------
  |  |  449|    344|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|    344|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
              	uvval(uvp) < tvref(J->L->maxstack)) {
  ------------------
  |  |  217|    344|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    344|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (1787:2): [True: 344, False: 0]
  ------------------
 1788|    344|      int32_t slot = (int32_t)(uvval(uvp) - (J->L->base - J->baseslot));
  ------------------
  |  |  449|    344|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|    344|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1789|    344|      if (slot >= 0) {  /* Aliases an SSA slot? */
  ------------------
  |  Branch (1789:11): [True: 0, False: 344]
  ------------------
 1790|      0|	uref = tref_ref(emitir(IRT(IR_UREFO, IRT_PGC), fn, uv));
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
 1791|      0|	emitir(IRTG(IR_EQ, IRT_PGC),
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1792|      0|	       REF_BASE,
 1793|      0|	       emitir(IRT(IR_ADD, IRT_PGC), uref,
 1794|      0|		      lj_ir_kintpgc(J, (slot - 1 - LJ_FR2) * -8)));
 1795|      0|	slot -= (int32_t)J->baseslot;  /* Note: slot number may be negative! */
 1796|      0|	if (val == 0) {
  ------------------
  |  Branch (1796:6): [True: 0, False: 0]
  ------------------
 1797|      0|	  return getslot(J, slot);
  ------------------
  |  |  211|      0|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1798|      0|	} else {
 1799|      0|	  J->base[slot] = val;
 1800|      0|	  if (slot >= (int32_t)J->maxslot) J->maxslot = (BCReg)(slot+1);
  ------------------
  |  Branch (1800:8): [True: 0, False: 0]
  ------------------
 1801|      0|	  return 0;
 1802|      0|	}
 1803|      0|      }
 1804|    344|    }
 1805|       |    /* IR_UREFO+IRT_IGC is not checked for open-ness at runtime.
 1806|       |    ** Always marked as a guard, since it might get promoted to IRT_PGC later.
 1807|       |    */
 1808|    344|    uref = emitir(IRTG(IR_UREFO, tref_isgcv(val) ? IRT_PGC : IRT_IGC), fn, uv);
  ------------------
  |  |   42|    344|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    688|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 0, False: 344]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1809|    344|    uref = tref_ref(uref);
  ------------------
  |  |  504|    344|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
 1810|    344|    emitir(IRTG(IR_UGT, IRT_PGC),
  ------------------
  |  |   42|    344|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    344|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1811|    344|	   emitir(IRT(IR_SUB, IRT_PGC), uref, REF_BASE),
 1812|    344|	   lj_ir_kintpgc(J, (J->baseslot + J->maxslot) * 8));
 1813|    344|  } else {
 1814|       |    /* If fn is constant, then so is the GCupval*, and the upvalue cannot
 1815|       |    ** transition back to open, so no guard is required in this case.
 1816|       |    */
 1817|      0|    IRType t = (tref_isk(fn) ? 0 : IRT_GUARD) | IRT_PGC;
  ------------------
  |  |  531|      0|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 1818|      0|    uref = tref_ref(emitir(IRT(IR_UREFC, t), fn, uv));
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
 1819|      0|    needbarrier = 1;
 1820|      0|  }
 1821|    344|  if (val == 0) {  /* Upvalue load */
  ------------------
  |  Branch (1821:7): [True: 341, False: 3]
  ------------------
 1822|    341|    IRType t = itype2irt(uvval(uvp));
  ------------------
  |  |  449|    341|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|    341|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1823|    341|    TRef res = emitir(IRTG(IR_ULOAD, t), uref, 0);
  ------------------
  |  |   42|    341|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    341|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1824|    341|    if (irtype_ispri(t)) res = TREF_PRI(t);  /* Canonicalize primitive refs. */
  ------------------
  |  |  353|    341|#define irtype_ispri(irt)	((uint32_t)(irt) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  Branch (353:27): [True: 0, False: 341]
  |  |  ------------------
  ------------------
                  if (irtype_ispri(t)) res = TREF_PRI(t);  /* Canonicalize primitive refs. */
  ------------------
  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
 1825|    341|    return res;
 1826|    341|  } else {  /* Upvalue store. */
 1827|       |    /* Convert int to number before storing. */
 1828|      3|    if (!LJ_DUALNUM && tref_isinteger(val))
  ------------------
  |  |  549|      6|#define LJ_DUALNUM		0
  ------------------
                  if (!LJ_DUALNUM && tref_isinteger(val))
  ------------------
  |  |  526|      3|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|      3|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (526:28): [True: 0, False: 3]
  |  |  ------------------
  ------------------
  |  Branch (1828:9): [Folded - Ignored]
  ------------------
 1829|      0|      val = emitir(IRTN(IR_CONV), val, IRCONV_NUM_INT);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1830|      3|    emitir(IRT(IR_USTORE, tref_type(val)), uref, val);
  ------------------
  |  |   42|      3|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      3|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1831|      3|    if (needbarrier && tref_isgcv(val))
  ------------------
  |  |  529|      0|#define tref_isgcv(tr)		(tref_typerange((tr), IRT_STR, IRT_UDATA))
  |  |  ------------------
  |  |  |  |  508|      0|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  |  |  |  Branch (529:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (1831:9): [True: 0, False: 3]
  ------------------
 1832|      0|      emitir(IRT(IR_OBAR, IRT_NIL), uref, val);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 1833|      3|    J->needsnap = 1;
 1834|      3|    return 0;
 1835|      3|  }
 1836|    344|}
lj_record.c:rec_upvalue_constify:
 1732|  36.0k|{
 1733|  36.0k|  if (uvp->immutable) {
  ------------------
  |  Branch (1733:7): [True: 35.7k, False: 268]
  ------------------
 1734|  35.7k|    cTValue *o = uvval(uvp);
  ------------------
  |  |  449|  35.7k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  35.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1735|       |    /* Don't constify objects that may retain large amounts of memory. */
 1736|  35.7k|#if LJ_HASFFI
 1737|  35.7k|    if (tviscdata(o)) {
  ------------------
  |  |  799|  35.7k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|  35.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|  35.7k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 35.7k]
  |  |  ------------------
  ------------------
 1738|      0|      GCcdata *cd = cdataV(o);
  ------------------
  |  |  863|      0|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1739|      0|      if (!cdataisv(cd) && !(cd->marked & LJ_GC_CDATA_FIN)) {
  ------------------
  |  |  361|      0|#define cdataisv(cd)	((cd)->marked & 0x80)
  ------------------
                    if (!cdataisv(cd) && !(cd->marked & LJ_GC_CDATA_FIN)) {
  ------------------
  |  |   23|      0|#define LJ_GC_CDATA_FIN	0x10
  ------------------
  |  Branch (1739:11): [True: 0, False: 0]
  |  Branch (1739:28): [True: 0, False: 0]
  ------------------
 1740|      0|	CType *ct = ctype_raw(ctype_ctsG(J2G(J)), cd->ctypeid);
  ------------------
  |  |  384|      0|#define ctype_ctsG(g)		(mref((g)->ctype_state, CTState))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
 1741|      0|	if (!ctype_hassize(ct->info) || ct->size <= 16)
  ------------------
  |  |  214|      0|#define ctype_hassize(info)	(ctype_type((info)) <= CT_HASSIZE)
  |  |  ------------------
  |  |  |  |  189|      0|#define ctype_type(info)	((info) >> CTSHIFT_NUM)
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|      0|#define CTSHIFT_NUM	28
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (1741:6): [True: 0, False: 0]
  |  Branch (1741:34): [True: 0, False: 0]
  ------------------
 1742|      0|	  return 1;
 1743|      0|      }
 1744|      0|      return 0;
 1745|      0|    }
 1746|       |#else
 1747|       |    UNUSED(J);
 1748|       |#endif
 1749|  35.7k|    if (!(tvistab(o) || tvisudata(o) || tvisthread(o)))
  ------------------
  |  |  800|  71.4k|#define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  781|  35.7k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistab(o)	(itype(o) == LJ_TTAB)
  |  |  ------------------
  |  |  |  |  271|  35.7k|#define LJ_TTAB			(~11u)
  |  |  ------------------
  |  |  |  Branch (800:20): [True: 76, False: 35.6k]
  |  |  ------------------
  ------------------
                  if (!(tvistab(o) || tvisudata(o) || tvisthread(o)))
  ------------------
  |  |  801|  71.4k|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  781|  35.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  ------------------
  |  |  |  |  272|  35.6k|#define LJ_TUDATA		(~12u)
  |  |  ------------------
  |  |  |  Branch (801:22): [True: 0, False: 35.6k]
  |  |  ------------------
  ------------------
                  if (!(tvistab(o) || tvisudata(o) || tvisthread(o)))
  ------------------
  |  |  797|  35.6k|#define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  781|  35.6k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisthread(o)	(itype(o) == LJ_TTHREAD)
  |  |  ------------------
  |  |  |  |  266|  35.6k|#define LJ_TTHREAD		(~6u)
  |  |  ------------------
  |  |  |  Branch (797:23): [True: 0, False: 35.6k]
  |  |  ------------------
  ------------------
 1750|  35.6k|      return 1;
 1751|  35.7k|  }
 1752|    344|  return 0;
 1753|  36.0k|}
lj_record.c:getcurrf:
  215|  46.1k|{
  216|  46.1k|  if (J->base[-1-LJ_FR2])
  ------------------
  |  |  569|  46.1k|#define LJ_FR2			1
  ------------------
  |  Branch (216:7): [True: 34.9k, False: 11.2k]
  ------------------
  217|  34.9k|    return J->base[-1-LJ_FR2];
  ------------------
  |  |  569|  34.9k|#define LJ_FR2			1
  ------------------
  218|       |  /* Non-base frame functions ought to be loaded already. */
  219|  11.2k|  lj_assertJ(J->baseslot == 1+LJ_FR2, "bad baseslot");
  ------------------
  |  |  527|  11.2k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  11.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  220|  11.2k|  return sloadt(J, -1-LJ_FR2, IRT_FUNC, IRSLOAD_READONLY);
  ------------------
  |  |  569|  11.2k|#define LJ_FR2			1
  ------------------
                return sloadt(J, -1-LJ_FR2, IRT_FUNC, IRSLOAD_READONLY);
  ------------------
  |  |  237|  11.2k|#define IRSLOAD_READONLY	0x10	/* Read-only, omit slot store. */
  ------------------
  221|  11.2k|}
lj_record.c:sloadt:
  192|  26.5k|{
  193|       |  /* Caller may set IRT_GUARD in t. */
  194|  26.5k|  TRef ref = emitir_raw(IRT(IR_SLOAD, t), (int32_t)J->baseslot+slot, mode);
  ------------------
  |  |   45|  26.5k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  26.5k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  195|  26.5k|  J->base[slot] = ref;
  196|  26.5k|  return ref;
  197|  26.5k|}
lj_record.c:rec_tnew:
 2065|    359|{
 2066|    359|  uint32_t asize = ah & 0x7ff;
 2067|    359|  uint32_t hbits = ah >> 11;
 2068|    359|  TRef tr;
 2069|    359|  if (asize == 0x7ff) asize = 0x801;
  ------------------
  |  Branch (2069:7): [True: 0, False: 359]
  ------------------
 2070|    359|  tr = emitir(IRTG(IR_TNEW, IRT_TAB), asize, hbits);
  ------------------
  |  |   42|    359|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    359|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
 2071|       |#ifdef LUAJIT_ENABLE_TABLE_BUMP
 2072|       |  J->rbchash[(tr & (RBCHASH_SLOTS-1))].ref = tref_ref(tr);
 2073|       |  setmref(J->rbchash[(tr & (RBCHASH_SLOTS-1))].pc, J->pc);
 2074|       |  setgcref(J->rbchash[(tr & (RBCHASH_SLOTS-1))].pt, obj2gco(J->pt));
 2075|       |#endif
 2076|    359|  return tr;
 2077|    359|}
lj_record.c:rec_profile_ret:
  762|  39.9k|{
  763|  39.9k|  if (J->prof_mode == 'f') {
  ------------------
  |  Branch (763:7): [True: 0, False: 39.9k]
  ------------------
  764|      0|    emitir(IRTG(IR_PROF, IRT_NIL), 0, 0);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  765|      0|    J->prev_pt = NULL;
  766|      0|    lj_snap_add(J);
  767|      0|  }
  768|  39.9k|}
lj_record.c:rec_for:
  501|  14.6k|{
  502|  14.6k|  BCReg ra = bc_a(*fori);
  ------------------
  |  |   35|  14.6k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  503|  14.6k|  TValue *tv = &J->L->base[ra];
  504|  14.6k|  TRef *tr = &J->base[ra];
  505|  14.6k|  IROp op;
  506|  14.6k|  LoopEvent ev;
  507|  14.6k|  TRef stop;
  508|  14.6k|  IRType t;
  509|  14.6k|  if (isforl) {  /* Handle FORL/JFORL opcodes. */
  ------------------
  |  Branch (509:7): [True: 13.7k, False: 902]
  ------------------
  510|  13.7k|    TRef idx = tr[FORL_IDX];
  511|  13.7k|    if (mref(J->scev.pc, const BCIns) == fori && tref_ref(idx) == J->scev.idx) {
  ------------------
  |  |   36|  13.7k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
                  if (mref(J->scev.pc, const BCIns) == fori && tref_ref(idx) == J->scev.idx) {
  ------------------
  |  |  504|  9.15k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  |  Branch (511:9): [True: 9.15k, False: 4.57k]
  |  Branch (511:50): [True: 9.07k, False: 81]
  ------------------
  512|  9.07k|      t = J->scev.t.irt;
  513|  9.07k|      stop = J->scev.stop;
  514|  9.07k|      idx = emitir(IRT(IR_ADD, t), idx, J->scev.step);
  ------------------
  |  |   42|  9.07k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  9.07k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  515|  9.07k|      tr[FORL_EXT] = tr[FORL_IDX] = idx;
  516|  9.07k|    } else {
  517|  4.65k|      ScEvEntry scev;
  518|  4.65k|      rec_for_loop(J, fori, &scev, 0);
  519|  4.65k|      t = scev.t.irt;
  520|  4.65k|      stop = scev.stop;
  521|  4.65k|    }
  522|  13.7k|  } else {  /* Handle FORI/JFORI opcodes. */
  523|    902|    BCReg i;
  524|    902|    lj_meta_for(J->L, tv);
  525|    902|    t = (LJ_DUALNUM || tref_isint(tr[FORL_IDX])) ? lj_opt_narrow_forl(J, tv) :
  ------------------
  |  |  549|  1.80k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                  t = (LJ_DUALNUM || tref_isint(tr[FORL_IDX])) ? lj_opt_narrow_forl(J, tv) :
  ------------------
  |  |  521|    902|#define tref_isint(tr)		(tref_istype((tr), IRT_INT))
  |  |  ------------------
  |  |  |  |  510|    902|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (521:25): [True: 896, False: 6]
  |  |  ------------------
  ------------------
  526|    902|						   IRT_NUM;
  527|  3.60k|    for (i = FORL_IDX; i <= FORL_STEP; i++) {
  ------------------
  |  Branch (527:24): [True: 2.70k, False: 902]
  ------------------
  528|  2.70k|      if (!tr[i]) sload(J, ra+i);
  ------------------
  |  Branch (528:11): [True: 0, False: 2.70k]
  ------------------
  529|  2.70k|      lj_assertJ(tref_isnumber_str(tr[i]), "bad FORI argument type");
  ------------------
  |  |  527|  2.70k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  2.70k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.70k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 2.70k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.70k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  530|  2.70k|      if (tref_isstr(tr[i]))
  ------------------
  |  |  515|  2.70k|#define tref_isstr(tr)		(tref_istype((tr), IRT_STR))
  |  |  ------------------
  |  |  |  |  510|  2.70k|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  |  |  |  Branch (515:25): [True: 0, False: 2.70k]
  |  |  ------------------
  ------------------
  531|      0|	tr[i] = emitir(IRTG(IR_STRTO, IRT_NUM), tr[i], 0);
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  532|  2.70k|      if (t == IRT_INT) {
  ------------------
  |  Branch (532:11): [True: 2.68k, False: 18]
  ------------------
  533|  2.68k|	if (!tref_isinteger(tr[i]))
  ------------------
  |  |  526|  2.68k|#define tref_isinteger(tr)	(tref_typerange((tr), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  508|  2.68k|  ((((tr)>>24) & IRT_TYPE) - (TRef)(first) <= (TRef)(last-first))
  |  |  ------------------
  ------------------
  |  Branch (533:6): [True: 165, False: 2.52k]
  ------------------
  534|    165|	  tr[i] = emitir(IRTGI(IR_CONV), tr[i], IRCONV_INT_NUM|IRCONV_CHECK);
  ------------------
  |  |   42|    165|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    165|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  535|  2.68k|      } else {
  536|     18|	if (!tref_isnum(tr[i]))
  ------------------
  |  |  520|     18|#define tref_isnum(tr)		(tref_istype((tr), IRT_NUM))
  |  |  ------------------
  |  |  |  |  510|     18|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (536:6): [True: 8, False: 10]
  ------------------
  537|      8|	  tr[i] = emitir(IRTN(IR_CONV), tr[i], IRCONV_NUM_INT);
  ------------------
  |  |   42|      8|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      8|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  538|     18|      }
  539|  2.70k|    }
  540|    902|    tr[FORL_EXT] = tr[FORL_IDX];
  541|    902|    stop = tr[FORL_STOP];
  542|    902|    rec_for_check(J, t, rec_for_direction(&tv[FORL_STEP]),
  543|    902|		  stop, tr[FORL_STEP], 1);
  544|    902|  }
  545|       |
  546|  14.6k|  ev = rec_for_iter(&op, tv, isforl);
  547|  14.6k|  if (ev == LOOPEV_LEAVE) {
  ------------------
  |  Branch (547:7): [True: 14, False: 14.6k]
  ------------------
  548|     14|    J->maxslot = ra+FORL_EXT+1;
  549|     14|    J->pc = fori+1;
  550|  14.6k|  } else {
  551|  14.6k|    J->maxslot = ra;
  552|  14.6k|    J->pc = fori+bc_j(*fori)+1;
  ------------------
  |  |   39|  14.6k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  14.6k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  14.6k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  553|  14.6k|  }
  554|  14.6k|  lj_snap_add(J);
  555|       |
  556|  14.6k|  emitir(IRTG(op, t), tr[FORL_IDX], stop);
  ------------------
  |  |   42|  14.6k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  14.6k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  557|       |
  558|  14.6k|  if (ev == LOOPEV_LEAVE) {
  ------------------
  |  Branch (558:7): [True: 14, False: 14.6k]
  ------------------
  559|     14|    J->maxslot = ra;
  560|     14|    J->pc = fori+bc_j(*fori)+1;
  ------------------
  |  |   39|     14|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|     14|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|     14|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  561|  14.6k|  } else {
  562|  14.6k|    J->maxslot = ra+FORL_EXT+1;
  563|  14.6k|    J->pc = fori+1;
  564|  14.6k|  }
  565|  14.6k|  J->needsnap = 1;
  566|  14.6k|  return ev;
  567|  14.6k|}
lj_record.c:rec_for_check:
  427|  15.3k|{
  428|  15.3k|  if (!tref_isk(step)) {
  ------------------
  |  |  531|  15.3k|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  15.3k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  ------------------
  |  Branch (428:7): [True: 500, False: 14.8k]
  ------------------
  429|       |    /* Non-constant step: need a guard for the direction. */
  430|    500|    TRef zero = (t == IRT_INT) ? lj_ir_kint(J, 0) : lj_ir_knum_zero(J);
  ------------------
  |  |   79|      3|#define lj_ir_knum_zero(J)	lj_ir_knum_u64(J, U64x(00000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      3|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (430:17): [True: 497, False: 3]
  ------------------
  431|    500|    emitir(IRTG(dir ? IR_GE : IR_LT, t), step, zero);
  ------------------
  |  |   42|    500|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  1.00k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 500, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  432|       |    /* Add hoistable overflow checks for a narrowed FORL index. */
  433|    500|    if (init && t == IRT_INT) {
  ------------------
  |  Branch (433:9): [True: 500, False: 0]
  |  Branch (433:17): [True: 497, False: 3]
  ------------------
  434|    497|      if (tref_isk(stop)) {
  ------------------
  |  |  531|    497|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|    497|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (531:23): [True: 0, False: 497]
  |  |  ------------------
  ------------------
  435|       |	/* Constant stop: optimize check away or to a range check for step. */
  436|      0|	int32_t k = IR(tref_ref(stop))->i;
  ------------------
  |  |   39|      0|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  437|      0|	if (dir) {
  ------------------
  |  Branch (437:6): [True: 0, False: 0]
  ------------------
  438|      0|	  if (k > 0)
  ------------------
  |  Branch (438:8): [True: 0, False: 0]
  ------------------
  439|      0|	    emitir(IRTGI(IR_LE), step, lj_ir_kint(J, (int32_t)0x7fffffff-k));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  440|      0|	} else {
  441|      0|	  if (k < 0)
  ------------------
  |  Branch (441:8): [True: 0, False: 0]
  ------------------
  442|      0|	    emitir(IRTGI(IR_GE), step, lj_ir_kint(J, (int32_t)0x80000000-k));
  ------------------
  |  |   42|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  443|      0|	}
  444|    497|      } else {
  445|       |	/* Stop+step variable: need full overflow check. */
  446|    497|	TRef tr = emitir(IRTGI(IR_ADDOV), step, stop);
  ------------------
  |  |   42|    497|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    497|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  447|    497|	emitir(IRTI(IR_USE), tr, 0);  /* ADDOV is weak. Avoid dead result. */
  ------------------
  |  |   42|    497|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|    497|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  448|    497|      }
  449|    497|    }
  450|  14.8k|  } else if (init && t == IRT_INT && !tref_isk(stop)) {
  ------------------
  |  |  531|  10.1k|#define tref_isk(tr)		(irref_isk(tref_ref((tr))))
  |  |  ------------------
  |  |  |  |  485|  10.1k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  ------------------
  |  Branch (450:14): [True: 10.1k, False: 4.65k]
  |  Branch (450:22): [True: 10.1k, False: 14]
  |  Branch (450:38): [True: 21, False: 10.1k]
  ------------------
  451|       |    /* Constant step: optimize overflow check to a range check for stop. */
  452|     21|    int32_t k = IR(tref_ref(step))->i;
  ------------------
  |  |   39|     21|#define IR(ref)			(&J->cur.ir[(ref)])
  ------------------
  453|     21|    k = (int32_t)(dir ? 0x7fffffff : 0x80000000) - k;
  ------------------
  |  Branch (453:19): [True: 21, False: 0]
  ------------------
  454|     21|    emitir(IRTGI(dir ? IR_LE : IR_GE), stop, lj_ir_kint(J, k));
  ------------------
  |  |   42|     21|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|     42|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (26:28): [True: 21, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|     21|  }
  456|  15.3k|}
lj_record.c:rec_for_direction:
  397|  29.9k|{
  398|  29.9k|  return (tvisint(o) ? intV(o) : (int32_t)o->u32.hi) >= 0;
  ------------------
  |  |  803|  29.9k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  59.9k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return (tvisint(o) ? intV(o) : (int32_t)o->u32.hi) >= 0;
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  399|  29.9k|}
lj_record.c:rec_for_iter:
  403|  14.6k|{
  404|  14.6k|  lua_Number stopv = numberVnum(&o[FORL_STOP]);
  405|  14.6k|  lua_Number idxv = numberVnum(&o[FORL_IDX]);
  406|  14.6k|  lua_Number stepv = numberVnum(&o[FORL_STEP]);
  407|  14.6k|  if (isforl)
  ------------------
  |  Branch (407:7): [True: 13.7k, False: 902]
  ------------------
  408|  13.7k|    idxv += stepv;
  409|  14.6k|  if (rec_for_direction(&o[FORL_STEP])) {
  ------------------
  |  Branch (409:7): [True: 14.6k, False: 11]
  ------------------
  410|  14.6k|    if (idxv <= stopv) {
  ------------------
  |  Branch (410:9): [True: 14.6k, False: 14]
  ------------------
  411|  14.6k|      *op = IR_LE;
  412|  14.6k|      return idxv + 2*stepv > stopv ? LOOPEV_ENTERLO : LOOPEV_ENTER;
  ------------------
  |  Branch (412:14): [True: 8, False: 14.5k]
  ------------------
  413|  14.6k|    }
  414|     14|    *op = IR_GT; return LOOPEV_LEAVE;
  415|  14.6k|  } else {
  416|     11|    if (stopv <= idxv) {
  ------------------
  |  Branch (416:9): [True: 11, False: 0]
  ------------------
  417|     11|      *op = IR_GE;
  418|     11|      return idxv + 2*stepv < stopv ? LOOPEV_ENTERLO : LOOPEV_ENTER;
  ------------------
  |  Branch (418:14): [True: 0, False: 11]
  ------------------
  419|     11|    }
  420|      0|    *op = IR_LT; return LOOPEV_LEAVE;
  421|     11|  }
  422|  14.6k|}
lj_record.c:rec_loop_interp:
  610|  6.63k|{
  611|  6.63k|  if (J->parent == 0 && J->exitno == 0) {
  ------------------
  |  Branch (611:7): [True: 6.11k, False: 515]
  |  Branch (611:25): [True: 6.11k, False: 0]
  ------------------
  612|  6.11k|    if (pc == J->startpc && J->framedepth + J->retdepth == 0) {
  ------------------
  |  Branch (612:9): [True: 6.11k, False: 0]
  |  Branch (612:29): [True: 6.11k, False: 0]
  ------------------
  613|  6.11k|      if (bc_op(J->cur.startins) == BC_ITERN) return;  /* See rec_itern(). */
  ------------------
  |  |   34|  6.11k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (613:11): [True: 519, False: 5.59k]
  ------------------
  614|       |      /* Same loop? */
  615|  5.59k|      if (ev == LOOPEV_LEAVE)  /* Must loop back to form a root trace. */
  ------------------
  |  Branch (615:11): [True: 1, False: 5.59k]
  ------------------
  616|      1|	lj_trace_err(J, LJ_TRERR_LLEAVE);
  617|  5.59k|      lj_record_stop(J, LJ_TRLINK_LOOP, J->cur.traceno);  /* Looping trace. */
  618|  5.59k|    } else if (ev != LOOPEV_LEAVE) {  /* Entering inner loop? */
  ------------------
  |  Branch (618:16): [True: 0, False: 0]
  ------------------
  619|       |      /* It's usually better to abort here and wait until the inner loop
  620|       |      ** is traced. But if the inner loop repeatedly didn't loop back,
  621|       |      ** this indicates a low trip count. In this case try unrolling
  622|       |      ** an inner loop even in a root trace. But it's better to be a bit
  623|       |      ** more conservative here and only do it for very short loops.
  624|       |      */
  625|      0|      if (bc_j(*pc) != -1 && !innerloopleft(J, pc))
  ------------------
  |  |   39|      0|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|      0|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  |  Branch (625:11): [True: 0, False: 0]
  |  Branch (625:30): [True: 0, False: 0]
  ------------------
  626|      0|	lj_trace_err(J, LJ_TRERR_LINNER);  /* Root trace hit an inner loop. */
  627|      0|      if ((ev != LOOPEV_ENTERLO &&
  ------------------
  |  Branch (627:12): [True: 0, False: 0]
  ------------------
  628|      0|	   J->loopref && J->cur.nins - J->loopref > 24) || --J->loopunroll < 0)
  ------------------
  |  Branch (628:5): [True: 0, False: 0]
  |  Branch (628:19): [True: 0, False: 0]
  |  Branch (628:53): [True: 0, False: 0]
  ------------------
  629|      0|	lj_trace_err(J, LJ_TRERR_LUNROLL);  /* Limit loop unrolling. */
  630|      0|      J->loopref = J->cur.nins;
  631|      0|    }
  632|  6.11k|  } else if (ev != LOOPEV_LEAVE) {  /* Side trace enters an inner loop. */
  ------------------
  |  Branch (632:14): [True: 503, False: 12]
  ------------------
  633|    503|    J->loopref = J->cur.nins;
  634|    503|    if (--J->loopunroll < 0)
  ------------------
  |  Branch (634:9): [True: 0, False: 503]
  ------------------
  635|      0|      lj_trace_err(J, LJ_TRERR_LUNROLL);  /* Limit loop unrolling. */
  636|    503|  }  /* Side trace continues across a loop that's left or not entered. */
  637|  6.63k|}
lj_record.c:rec_iterl:
  571|    285|{
  572|    285|  BCReg ra = bc_a(iterins);
  ------------------
  |  |   35|    285|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  573|    285|  if (!tref_isnil(getslot(J, ra))) {  /* Looping back? */
  ------------------
  |  |  511|    285|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|    570|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (510:31): [True: 285, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (573:7): [True: 285, False: 0]
  ------------------
  574|    285|    J->base[ra-1] = J->base[ra];  /* Copy result of ITERC to control var. */
  575|    285|    J->maxslot = ra-1+bc_b(J->pc[-1]);
  ------------------
  |  |   36|    285|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
  576|    285|    J->pc += bc_j(iterins)+1;
  ------------------
  |  |   39|    285|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    285|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    285|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  577|    285|    return LOOPEV_ENTER;
  578|    285|  } else {
  579|      0|    J->maxslot = ra-3;
  580|      0|    J->pc++;
  581|      0|    return LOOPEV_LEAVE;
  582|      0|  }
  583|    285|}
lj_record.c:rec_itern:
  656|    527|{
  657|       |#if LJ_BE
  658|       |  /* YAGNI: Disabled on big-endian due to issues with lj_vm_next,
  659|       |  ** IR_HIOP, RID_RETLO/RID_RETHI and ra_destpair.
  660|       |  */
  661|       |  UNUSED(ra); UNUSED(rb);
  662|       |  setintV(&J->errinfo, (int32_t)BC_ITERN);
  663|       |  lj_trace_err_info(J, LJ_TRERR_NYIBC);
  664|       |#else
  665|    527|  RecordIndex ix;
  666|       |  /* Since ITERN is recorded at the start, we need our own loop detection. */
  667|    527|  if (J->pc == J->startpc &&
  ------------------
  |  Branch (667:7): [True: 519, False: 8]
  ------------------
  668|    527|      J->framedepth + J->retdepth == 0 && J->parent == 0 && J->exitno == 0) {
  ------------------
  |  Branch (668:7): [True: 519, False: 0]
  |  Branch (668:43): [True: 519, False: 0]
  |  Branch (668:61): [True: 519, False: 0]
  ------------------
  669|    519|    IRRef ref = REF_FIRST + LJ_HASPROFILE;
  ------------------
  |  |  598|    519|#define LJ_HASPROFILE		1
  ------------------
  670|       |#ifdef LUAJIT_ENABLE_CHECKHOOK
  671|       |    ref += 3;
  672|       |#endif
  673|    519|    if (J->cur.nins > ref ||
  ------------------
  |  Branch (673:9): [True: 227, False: 292]
  ------------------
  674|    519|       (LJ_HASPROFILE && J->cur.nins == ref && J->cur.ir[ref-1].o != IR_PROF)) {
  ------------------
  |  |  598|    584|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (674:26): [True: 0, False: 292]
  |  Branch (674:48): [True: 0, False: 0]
  ------------------
  675|    227|      J->instunroll = 0;  /* Cannot continue unrolling across an ITERN. */
  676|    227|      lj_record_stop(J, LJ_TRLINK_LOOP, J->cur.traceno);  /* Looping trace. */
  677|    227|      return LOOPEV_ENTER;
  678|    227|    }
  679|    519|  }
  680|    300|  J->maxslot = ra;
  681|    300|  lj_snap_add(J);  /* Required to make JLOOP the first ins in a side-trace. */
  682|    300|  ix.tab = getslot(J, ra-2);
  ------------------
  |  |  211|    300|#define getslot(J, s)	(J->base[(s)] ? J->base[(s)] : sload(J, (int32_t)(s)))
  |  |  ------------------
  |  |  |  Branch (211:24): [True: 0, False: 300]
  |  |  ------------------
  ------------------
  683|    300|  ix.key = J->base[ra-1] ? J->base[ra-1] :
  ------------------
  |  Branch (683:12): [True: 8, False: 292]
  ------------------
  684|    300|	   sloadt(J, (int32_t)(ra-1), IRT_GUARD|IRT_INT,
  685|    292|		  IRSLOAD_TYPECHECK|IRSLOAD_KEYINDEX);
  ------------------
  |  |  235|    292|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
              		  IRSLOAD_TYPECHECK|IRSLOAD_KEYINDEX);
  ------------------
  |  |  239|    292|#define IRSLOAD_KEYINDEX	0x40	/* Table traversal key index. */
  ------------------
  686|    300|  copyTV(J->L, &ix.tabv, &J->L->base[ra-2]);
  687|    300|  copyTV(J->L, &ix.keyv, &J->L->base[ra-1]);
  688|    300|  ix.idxchain = (rb < 3);  /* Omit value type check, if unused. */
  689|    300|  ix.mobj = 1;  /* We need the next index, too. */
  690|    300|  J->maxslot = ra + lj_record_next(J, &ix);
  691|    300|  J->needsnap = 1;
  692|    300|  if (!tref_isnil(ix.key)) {  /* Looping back? */
  ------------------
  |  |  511|    300|#define tref_isnil(tr)		(tref_istype((tr), IRT_NIL))
  |  |  ------------------
  |  |  |  |  510|    300|#define tref_istype(tr, t)	(((tr) & (IRT_TYPE<<24)) == ((t)<<24))
  |  |  ------------------
  ------------------
  |  Branch (692:7): [True: 227, False: 73]
  ------------------
  693|    227|    J->base[ra-1] = ix.mobj | TREF_KEYINDEX;  /* Control var has next index. */
  ------------------
  |  |  500|    227|#define TREF_KEYINDEX		0x00100000
  ------------------
  694|    227|    J->base[ra] = ix.key;
  695|    227|    J->base[ra+1] = ix.val;
  696|    227|    J->pc += bc_j(J->pc[1])+2;
  ------------------
  |  |   39|    227|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    227|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    227|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  697|    227|    return LOOPEV_ENTER;
  698|    227|  } else {
  699|     73|    J->maxslot = ra-3;
  700|     73|    J->pc += 2;
  701|     73|    return LOOPEV_LEAVE;
  702|     73|  }
  703|    300|#endif
  704|    300|}
lj_record.c:rec_loop:
  587|    390|{
  588|    390|  if (ra < J->maxslot) J->maxslot = ra;
  ------------------
  |  Branch (588:7): [True: 0, False: 390]
  ------------------
  589|    390|  J->pc += skip;
  590|    390|  return LOOPEV_ENTER;
  591|    390|}
lj_record.c:rec_loop_jit:
  641|  8.29k|{
  642|  8.29k|  if (J->parent == 0 && J->exitno == 0) {  /* Root trace hit an inner loop. */
  ------------------
  |  Branch (642:7): [True: 186, False: 8.11k]
  |  Branch (642:25): [True: 0, False: 186]
  ------------------
  643|       |    /* Better let the inner loop spawn a side trace back here. */
  644|      0|    lj_trace_err(J, LJ_TRERR_LINNER);
  645|  8.29k|  } else if (ev != LOOPEV_LEAVE) {  /* Side trace enters a compiled loop. */
  ------------------
  |  Branch (645:14): [True: 8.29k, False: 0]
  ------------------
  646|  8.29k|    J->instunroll = 0;  /* Cannot continue across a compiled loop op. */
  647|  8.29k|    if (J->pc == J->startpc && J->framedepth + J->retdepth == 0)
  ------------------
  |  Branch (647:9): [True: 4.04k, False: 4.25k]
  |  Branch (647:32): [True: 4.04k, False: 0]
  ------------------
  648|  4.04k|      lj_record_stop(J, LJ_TRLINK_LOOP, J->cur.traceno);  /* Form extra loop. */
  649|  4.25k|    else
  650|  4.25k|      lj_record_stop(J, LJ_TRLINK_ROOT, lnk);  /* Link to the loop. */
  651|  8.29k|  }  /* Side trace continues across a loop that's left or not entered. */
  652|  8.29k|}
lj_record.c:rec_func_lua:
 1916|  3.06k|{
 1917|  3.06k|  rec_func_setup(J);
 1918|  3.06k|  check_call_unroll(J, 0);
 1919|  3.06k|}
lj_record.c:rec_func_setup:
 1876|  24.1k|{
 1877|  24.1k|  GCproto *pt = J->pt;
 1878|  24.1k|  BCReg s, numparams = pt->numparams;
 1879|  24.1k|  if ((pt->flags & PROTO_NOJIT))
  ------------------
  |  |  402|  24.1k|#define PROTO_NOJIT		0x08	/* JIT disabled for this function. */
  ------------------
  |  Branch (1879:7): [True: 0, False: 24.1k]
  ------------------
 1880|      0|    lj_trace_err(J, LJ_TRERR_CJITOFF);
 1881|  24.1k|  if (J->baseslot + pt->framesize >= LJ_MAX_JSLOTS)
  ------------------
  |  |   85|  24.1k|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (1881:7): [True: 0, False: 24.1k]
  ------------------
 1882|      0|    lj_trace_err(J, LJ_TRERR_STACKOV);
 1883|       |  /* Fill up missing parameters with nil. */
 1884|  32.9k|  for (s = J->maxslot; s < numparams; s++)
  ------------------
  |  Branch (1884:24): [True: 8.81k, False: 24.1k]
  ------------------
 1885|  8.81k|    J->base[s] = TREF_NIL;
  ------------------
  |  |  535|  32.9k|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|  8.81k|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|  8.81k|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1886|       |  /* The remaining slots should never be read before they are written. */
 1887|  24.1k|  J->maxslot = numparams;
 1888|  24.1k|}
lj_record.c:check_call_unroll:
 1842|  22.6k|{
 1843|  22.6k|  cTValue *frame = J->L->base - 1;
 1844|  22.6k|  void *pc = mref(frame_func(frame)->l.pc, void);
  ------------------
  |  |   36|  22.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
 1845|  22.6k|  int32_t depth = J->framedepth;
 1846|  22.6k|  int32_t count = 0;
 1847|  22.6k|  if ((J->pt->flags & PROTO_VARARG)) depth--;  /* Vararg frame still missing. */
  ------------------
  |  |  400|  22.6k|#define PROTO_VARARG		0x02	/* Vararg function. */
  ------------------
  |  Branch (1847:7): [True: 190, False: 22.4k]
  ------------------
 1848|  59.6k|  for (; depth > 0; depth--) {  /* Count frames with same prototype. */
  ------------------
  |  Branch (1848:10): [True: 37.0k, False: 22.6k]
  ------------------
 1849|  37.0k|    if (frame_iscont(frame)) depth--;
  ------------------
  |  |   79|  37.0k|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|  37.0k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  37.0k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  37.0k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  37.0k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  37.0k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 719, False: 36.3k]
  |  |  ------------------
  ------------------
 1850|  37.0k|    frame = frame_prev(frame);
  ------------------
  |  |  110|  37.0k|#define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |   77|  37.0k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |   75|  37.0k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|  37.0k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  37.0k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (77:25): [True: 36.3k, False: 722]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  108|  36.3k|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  36.3k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  |  |  ------------------
  |  |  |  |  |  |   35|  36.3k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define frame_prev(f)		(frame_islua(f)?frame_prevl(f):frame_prevd(f))
  |  |  ------------------
  |  |  |  |  109|    722|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  |  |  ------------------
  |  |  |  |  |  |   85|    722|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   47|    722|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   30|    722|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   28|    722|#define FRAME_TYPE		3
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |   29|    722|#define FRAME_P			4
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1851|  37.0k|    if (mref(frame_func(frame)->l.pc, void) == pc)
  ------------------
  |  |   36|  37.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (1851:9): [True: 27.6k, False: 9.38k]
  ------------------
 1852|  27.6k|      count++;
 1853|  37.0k|  }
 1854|  22.6k|  if (J->pc == J->startpc) {
  ------------------
  |  Branch (1854:7): [True: 2.51k, False: 20.0k]
  ------------------
 1855|  2.51k|    if (count + J->tailcalled > J->param[JIT_P_recunroll]) {
  ------------------
  |  Branch (1855:9): [True: 425, False: 2.08k]
  ------------------
 1856|    425|      J->pc++;
 1857|    425|      if (J->framedepth + J->retdepth == 0)
  ------------------
  |  Branch (1857:11): [True: 60, False: 365]
  ------------------
 1858|     60|	lj_record_stop(J, LJ_TRLINK_TAILREC, J->cur.traceno);  /* Tail-rec. */
 1859|    365|      else
 1860|    365|	lj_record_stop(J, LJ_TRLINK_UPREC, J->cur.traceno);  /* Up-recursion. */
 1861|    425|    }
 1862|  20.0k|  } else {
 1863|  20.0k|    if (count > J->param[JIT_P_callunroll]) {
  ------------------
  |  Branch (1863:9): [True: 930, False: 19.1k]
  ------------------
 1864|    930|      if (lnk) {  /* Possible tail- or up-recursion. */
  ------------------
  |  Branch (1864:11): [True: 930, False: 0]
  ------------------
 1865|    930|	lj_trace_flush(J, lnk);  /* Flush trace that only returns. */
 1866|       |	/* Set a small, pseudo-random hotcount for a quick retry of JFUNC*. */
 1867|    930|	hotcount_set(J2GG(J), J->pc+1, lj_prng_u64(&J2G(J)->prng) & 15u);
  ------------------
  |  |  128|    930|  (hotcount_get((gg), (pc)) = (HotCount)(val))
  |  |  ------------------
  |  |  |  |  126|    930|  (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   96|    930|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  |  |  ------------------
  |  |  |  |                 (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|    930|#define HOTCOUNT_SIZE		64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1868|    930|      }
 1869|    930|      lj_trace_err(J, LJ_TRERR_CUNROLL);
 1870|    930|    }
 1871|  20.0k|  }
 1872|  22.6k|}
lj_record.c:rec_func_jit:
 1923|  21.0k|{
 1924|  21.0k|  GCtrace *T;
 1925|  21.0k|  rec_func_setup(J);
 1926|  21.0k|  T = traceref(J, lnk);
  ------------------
  |  |  298|  21.0k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  21.0k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  21.0k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  42.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 21.0k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 21.0k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  21.0k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1927|  21.0k|  if (T->linktype == LJ_TRLINK_RETURN) {  /* Trace returns to interpreter? */
  ------------------
  |  Branch (1927:7): [True: 19.5k, False: 1.55k]
  ------------------
 1928|  19.5k|    check_call_unroll(J, lnk);
 1929|       |    /* Temporarily unpatch JFUNC* to continue recording across function. */
 1930|  19.5k|    J->patchins = *J->pc;
 1931|  19.5k|    J->patchpc = (BCIns *)J->pc;
 1932|  19.5k|    *J->patchpc = T->startins;
 1933|  19.5k|    return;
 1934|  19.5k|  }
 1935|  1.55k|  J->instunroll = 0;  /* Cannot continue across a compiled function. */
 1936|  1.55k|  if (J->pc == J->startpc && J->framedepth + J->retdepth == 0)
  ------------------
  |  Branch (1936:7): [True: 0, False: 1.55k]
  |  Branch (1936:30): [True: 0, False: 0]
  ------------------
 1937|      0|    lj_record_stop(J, LJ_TRLINK_TAILREC, J->cur.traceno);  /* Extra tail-rec. */
 1938|  1.55k|  else
 1939|  1.55k|    lj_record_stop(J, LJ_TRLINK_ROOT, lnk);  /* Link to the function. */
 1940|  1.55k|}
lj_record.c:rec_func_vararg:
 1892|    190|{
 1893|    190|  GCproto *pt = J->pt;
 1894|    190|  BCReg s, fixargs, vframe = J->maxslot+1+LJ_FR2;
  ------------------
  |  |  569|    190|#define LJ_FR2			1
  ------------------
 1895|    190|  lj_assertJ((pt->flags & PROTO_VARARG), "FUNCV in non-vararg function");
  ------------------
  |  |  527|    190|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    190|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    190|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 190, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    190|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1896|    190|  if (J->baseslot + vframe + pt->framesize >= LJ_MAX_JSLOTS)
  ------------------
  |  |   85|    190|#define LJ_MAX_JSLOTS	250		/* Max. # of stack slots for a trace. */
  ------------------
  |  Branch (1896:7): [True: 0, False: 190]
  ------------------
 1897|      0|    lj_trace_err(J, LJ_TRERR_STACKOV);
 1898|    190|  J->base[vframe-1-LJ_FR2] = J->base[-1-LJ_FR2];  /* Copy function up. */
  ------------------
  |  |  569|    190|#define LJ_FR2			1
  ------------------
                J->base[vframe-1-LJ_FR2] = J->base[-1-LJ_FR2];  /* Copy function up. */
  ------------------
  |  |  569|    190|#define LJ_FR2			1
  ------------------
 1899|    190|#if LJ_FR2
 1900|    190|  J->base[vframe-1] = TREF_FRAME;
  ------------------
  |  |  498|    190|#define TREF_FRAME		0x00010000
  ------------------
 1901|    190|#endif
 1902|       |  /* Copy fixarg slots up and set their original slots to nil. */
 1903|    190|  fixargs = pt->numparams < J->maxslot ? pt->numparams : J->maxslot;
  ------------------
  |  Branch (1903:13): [True: 0, False: 190]
  ------------------
 1904|    190|  for (s = 0; s < fixargs; s++) {
  ------------------
  |  Branch (1904:15): [True: 0, False: 190]
  ------------------
 1905|      0|    J->base[vframe+s] = J->base[s];
 1906|      0|    J->base[s] = TREF_NIL;
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1907|      0|  }
 1908|    190|  J->maxslot = fixargs;
 1909|    190|  J->framedepth++;
 1910|    190|  J->base += vframe;
 1911|    190|  J->baseslot += vframe;
 1912|    190|}
lj_record.c:rec_for_loop:
  461|  14.4k|{
  462|  14.4k|  BCReg ra = bc_a(*fori);
  ------------------
  |  |   35|  14.4k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  463|  14.4k|  cTValue *tv = &J->L->base[ra];
  464|  14.4k|  TRef idx = J->base[ra+FORL_IDX];
  465|  14.4k|  IRType t = idx ? tref_type(idx) :
  ------------------
  |  |  506|    101|#define tref_type(tr)		((IRType)(((tr)>>24) & IRT_TYPE))
  ------------------
  |  Branch (465:14): [True: 101, False: 14.3k]
  ------------------
  466|  14.4k|	     (init || LJ_DUALNUM) ? lj_opt_narrow_forl(J, tv) : IRT_NUM;
  ------------------
  |  |  549|  4.55k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (466:8): [True: 9.78k, False: 4.55k]
  ------------------
  467|  14.4k|  int mode = IRSLOAD_INHERIT +
  ------------------
  |  |  238|  14.4k|#define IRSLOAD_INHERIT		0x20	/* Inherited by exits/side traces. */
  ------------------
  468|  14.4k|    ((!LJ_DUALNUM || tvisint(tv) == (t == IRT_INT)) ? IRSLOAD_READONLY : 0);
  ------------------
  |  |  549|  28.8k|#define LJ_DUALNUM		0
  ------------------
                  ((!LJ_DUALNUM || tvisint(tv) == (t == IRT_INT)) ? IRSLOAD_READONLY : 0);
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                  ((!LJ_DUALNUM || tvisint(tv) == (t == IRT_INT)) ? IRSLOAD_READONLY : 0);
  ------------------
  |  |  237|  14.4k|#define IRSLOAD_READONLY	0x10	/* Read-only, omit slot store. */
  ------------------
  |  Branch (468:7): [Folded - Ignored]
  |  Branch (468:22): [True: 0, False: 0]
  ------------------
  469|  14.4k|  TRef stop = fori_arg(J, fori, ra+FORL_STOP, t, mode);
  470|  14.4k|  TRef step = fori_arg(J, fori, ra+FORL_STEP, t, mode);
  471|  14.4k|  int tc, dir = rec_for_direction(&tv[FORL_STEP]);
  472|  14.4k|  lj_assertJ(bc_op(*fori) == BC_FORI || bc_op(*fori) == BC_JFORI,
  ------------------
  |  |  527|  14.4k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  14.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  22.5k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 6.32k, False: 8.11k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 8.11k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  14.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  473|  14.4k|	     "bad bytecode %d instead of FORI/JFORI", bc_op(*fori));
  474|  14.4k|  scev->t.irt = t;
  475|  14.4k|  scev->dir = dir;
  476|  14.4k|  scev->stop = tref_ref(stop);
  ------------------
  |  |  504|  14.4k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  477|  14.4k|  scev->step = tref_ref(step);
  ------------------
  |  |  504|  14.4k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  478|  14.4k|  rec_for_check(J, t, dir, stop, step, init);
  479|  14.4k|  scev->start = tref_ref(find_kinit(J, fori, ra+FORL_IDX, IRT_INT));
  ------------------
  |  |  504|  14.4k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  480|  14.4k|  tc = (LJ_DUALNUM &&
  ------------------
  |  |  549|  28.8k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
  481|  14.4k|	!(scev->start && irref_isk(scev->stop) && irref_isk(scev->step) &&
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	!(scev->start && irref_isk(scev->stop) && irref_isk(scev->step) &&
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (481:4): [True: 0, False: 0]
  ------------------
  482|      0|	  tvisint(&tv[FORL_IDX]) == (t == IRT_INT))) ?
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (482:4): [True: 0, False: 0]
  ------------------
  483|  14.4k|	IRSLOAD_TYPECHECK : 0;
  ------------------
  |  |  235|      0|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
  484|  14.4k|  if (tc) {
  ------------------
  |  Branch (484:7): [True: 0, False: 14.4k]
  ------------------
  485|      0|    J->base[ra+FORL_STOP] = stop;
  486|      0|    J->base[ra+FORL_STEP] = step;
  487|      0|  }
  488|  14.4k|  if (!idx)
  ------------------
  |  Branch (488:7): [True: 14.3k, False: 101]
  ------------------
  489|  14.3k|    idx = fori_load(J, ra+FORL_IDX, t,
  490|  14.3k|		    IRSLOAD_INHERIT + tc + (J->scev.start << 16));
  ------------------
  |  |  238|  14.3k|#define IRSLOAD_INHERIT		0x20	/* Inherited by exits/side traces. */
  ------------------
  491|  14.4k|  if (!init)
  ------------------
  |  Branch (491:7): [True: 4.65k, False: 9.78k]
  ------------------
  492|  4.65k|    J->base[ra+FORL_IDX] = idx = emitir(IRT(IR_ADD, t), idx, step);
  ------------------
  |  |   42|  4.65k|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|  4.65k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  493|  14.4k|  J->base[ra+FORL_EXT] = idx;
  494|  14.4k|  scev->idx = tref_ref(idx);
  ------------------
  |  |  504|  14.4k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  495|  14.4k|  setmref(scev->pc, fori);
  ------------------
  |  |   39|  14.4k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  496|  14.4k|  J->maxslot = ra+FORL_EXT+1;
  497|  14.4k|}
lj_record.c:fori_arg:
  383|  28.8k|{
  384|  28.8k|  TRef tr = J->base[slot];
  385|  28.8k|  if (!tr) {
  ------------------
  |  Branch (385:7): [True: 28.8k, False: 8]
  ------------------
  386|  28.8k|    tr = find_kinit(J, fori, slot, t);
  387|  28.8k|    if (!tr)
  ------------------
  |  Branch (387:9): [True: 693, False: 28.1k]
  ------------------
  388|    693|      tr = fori_load(J, slot, t, mode);
  389|  28.8k|  }
  390|  28.8k|  return tr;
  391|  28.8k|}
lj_record.c:find_kinit:
  325|  43.2k|{
  326|       |  /* This algorithm is rather simplistic and assumes quite a bit about
  327|       |  ** how the bytecode is generated. It works fine for FORI initializers,
  328|       |  ** but it won't necessarily work in other cases (e.g. iterator arguments).
  329|       |  ** It doesn't do anything fancy, either (like backpropagating MOVs).
  330|       |  */
  331|  43.2k|  const BCIns *pc, *startpc = proto_bc(J->pt);
  ------------------
  |  |  420|  43.2k|#define proto_bc(pt)		((BCIns *)((char *)(pt) + sizeof(GCproto)))
  ------------------
  332|  87.5k|  for (pc = endpc-1; pc > startpc; pc--) {
  ------------------
  |  Branch (332:22): [True: 87.5k, False: 0]
  ------------------
  333|  87.5k|    BCIns ins = *pc;
  334|  87.5k|    BCOp op = bc_op(ins);
  ------------------
  |  |   34|  87.5k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  335|       |    /* First try to find the last instruction that stores to this slot. */
  336|  87.5k|    if (bcmode_a(op) == BCMbase && bc_a(ins) <= slot) {
  ------------------
  |  |  246|  87.5k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
                  if (bcmode_a(op) == BCMbase && bc_a(ins) <= slot) {
  ------------------
  |  |   35|    662|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (336:9): [True: 662, False: 86.9k]
  |  Branch (336:36): [True: 331, False: 331]
  ------------------
  337|    331|      return 0;  /* Multiple results, e.g. from a CALL or KNIL. */
  338|  87.2k|    } else if (bcmode_a(op) == BCMdst && bc_a(ins) == slot) {
  ------------------
  |  |  246|  87.2k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
                  } else if (bcmode_a(op) == BCMdst && bc_a(ins) == slot) {
  ------------------
  |  |   35|  86.9k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (338:16): [True: 86.9k, False: 331]
  |  Branch (338:42): [True: 42.9k, False: 43.9k]
  ------------------
  339|  42.9k|      if (op == BC_KSHORT || op == BC_KNUM) {  /* Found const. initializer. */
  ------------------
  |  Branch (339:11): [True: 39.2k, False: 3.66k]
  |  Branch (339:30): [True: 3.12k, False: 535]
  ------------------
  340|       |	/* Now try to verify there's no forward jump across it. */
  341|  42.4k|	const BCIns *kpc = pc;
  342|  5.20M|	for (; pc > startpc; pc--)
  ------------------
  |  Branch (342:9): [True: 5.16M, False: 42.4k]
  ------------------
  343|  5.16M|	  if (bc_op(*pc) == BC_JMP) {
  ------------------
  |  |   34|  5.16M|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (343:8): [True: 181k, False: 4.98M]
  ------------------
  344|   181k|	    const BCIns *target = pc+bc_j(*pc)+1;
  ------------------
  |  |   39|   181k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|   181k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|   181k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  345|   181k|	    if (target > kpc && target <= endpc)
  ------------------
  |  Branch (345:10): [True: 18, False: 181k]
  |  Branch (345:26): [True: 0, False: 18]
  ------------------
  346|      0|	      return 0;  /* Conditional assignment. */
  347|   181k|	  }
  348|  42.4k|	if (op == BC_KSHORT) {
  ------------------
  |  Branch (348:6): [True: 39.2k, False: 3.12k]
  ------------------
  349|  39.2k|	  int32_t k = (int32_t)(int16_t)bc_d(ins);
  ------------------
  |  |   38|  39.2k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  350|  39.2k|	  return t == IRT_INT ? lj_ir_kint(J, k) : lj_ir_knum(J, (lua_Number)k);
  ------------------
  |  Branch (350:11): [True: 30.1k, False: 9.10k]
  ------------------
  351|  39.2k|	} else {
  352|  3.12k|	  cTValue *tv = proto_knumtv(J->pt, bc_d(ins));
  ------------------
  |  |  419|  3.12k|  check_exp((uintptr_t)(idx) < (pt)->sizekn, &mref((pt)->k, TValue)[(idx)])
  |  |  ------------------
  |  |  |  |  367|  3.12k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.12k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.12k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.12k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.12k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  353|  3.12k|	  if (t == IRT_INT) {
  ------------------
  |  Branch (353:8): [True: 3.11k, False: 10]
  ------------------
  354|  3.11k|	    int32_t k = numberVint(tv);
  355|  6.23k|	    if (tvisint(tv) || numV(tv) == (lua_Number)k)  /* -0 is ok here. */
  ------------------
  |  |  803|  6.23k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  6.23k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    if (tvisint(tv) || numV(tv) == (lua_Number)k)  /* -0 is ok here. */
  ------------------
  |  |  866|  3.11k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  3.11k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  3.11k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  3.11k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 3.11k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  3.11k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (355:25): [True: 3.11k, False: 0]
  ------------------
  356|  3.11k|	      return lj_ir_kint(J, k);
  357|      0|	    return 0;  /* Type mismatch. */
  358|  3.11k|	  } else {
  359|     10|	    return lj_ir_knum(J, numberVnum(tv));
  360|     10|	  }
  361|  3.12k|	}
  362|  42.4k|      }
  363|    535|      return 0;  /* Non-constant initializer. */
  364|  42.9k|    }
  365|  87.5k|  }
  366|      0|  return 0;  /* No assignment to this slot found? */
  367|  43.2k|}
lj_record.c:fori_load:
  371|  15.0k|{
  372|  15.0k|  int conv = (tvisint(&J->L->base[slot]) != (t==IRT_INT)) ? IRSLOAD_CONVERT : 0;
  ------------------
  |  |  803|  15.0k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  30.0k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                int conv = (tvisint(&J->L->base[slot]) != (t==IRT_INT)) ? IRSLOAD_CONVERT : 0;
  ------------------
  |  |  236|  10.4k|#define IRSLOAD_CONVERT		0x08	/* Number to integer conversion. */
  ------------------
  |  Branch (372:14): [True: 10.4k, False: 4.57k]
  ------------------
  373|  15.0k|  return sloadt(J, (int32_t)slot,
  374|  15.0k|		t + (((mode & IRSLOAD_TYPECHECK) ||
  ------------------
  |  |  235|  15.0k|#define IRSLOAD_TYPECHECK	0x04	/* Needs type check. */
  ------------------
  |  Branch (374:9): [True: 0, False: 15.0k]
  ------------------
  375|  15.0k|		      (conv && t == IRT_INT && !(mode >> 16))) ?
  ------------------
  |  Branch (375:10): [True: 10.4k, False: 4.57k]
  |  Branch (375:18): [True: 10.4k, False: 0]
  |  Branch (375:34): [True: 857, False: 9.59k]
  ------------------
  376|  14.1k|		     IRT_GUARD : 0),
  377|  15.0k|		mode + conv);
  378|  15.0k|}
lj_record.c:rec_setup_root:
 2726|  14.5k|{
 2727|       |  /* Determine the next PC and the bytecode range for the loop. */
 2728|  14.5k|  const BCIns *pcj, *pc = J->pc;
 2729|  14.5k|  BCIns ins = *pc;
 2730|  14.5k|  BCReg ra = bc_a(ins);
  ------------------
  |  |   35|  14.5k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
 2731|  14.5k|  switch (bc_op(ins)) {
  ------------------
  |  |   34|  14.5k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 2732|  5.73k|  case BC_FORL:
  ------------------
  |  Branch (2732:3): [True: 5.73k, False: 8.79k]
  ------------------
 2733|  5.73k|    J->bc_extent = (MSize)(-bc_j(ins))*sizeof(BCIns);
  ------------------
  |  |   39|  5.73k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  5.73k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  5.73k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2734|  5.73k|    pc += 1+bc_j(ins);
  ------------------
  |  |   39|  5.73k|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|  5.73k|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|  5.73k|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2735|  5.73k|    J->bc_min = pc;
 2736|  5.73k|    break;
 2737|    285|  case BC_ITERL:
  ------------------
  |  Branch (2737:3): [True: 285, False: 14.2k]
  ------------------
 2738|    285|    if (bc_op(pc[-1]) == BC_JLOOP)
  ------------------
  |  |   34|    285|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (2738:9): [True: 0, False: 285]
  ------------------
 2739|      0|      lj_trace_err(J, LJ_TRERR_LINNER);
 2740|    285|    lj_assertJ(bc_op(pc[-1]) == BC_ITERC, "no ITERC before ITERL");
  ------------------
  |  |  527|    285|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    285|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    285|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 285, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    285|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2741|    285|    J->maxslot = ra + bc_b(pc[-1]) - 1;
  ------------------
  |  |   36|    285|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
 2742|    285|    J->bc_extent = (MSize)(-bc_j(ins))*sizeof(BCIns);
  ------------------
  |  |   39|    285|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    285|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    285|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2743|    285|    pc += 1+bc_j(ins);
  ------------------
  |  |   39|    285|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    285|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    285|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2744|    285|    lj_assertJ(bc_op(pc[-1]) == BC_JMP, "ITERL does not point to JMP+1");
  ------------------
  |  |  527|    285|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    285|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    285|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 285, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    285|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2745|    285|    J->bc_min = pc;
 2746|    285|    break;
 2747|    292|  case BC_ITERN:
  ------------------
  |  Branch (2747:3): [True: 292, False: 14.2k]
  ------------------
 2748|    292|    lj_assertJ(bc_op(pc[1]) == BC_ITERL, "no ITERL after ITERN");
  ------------------
  |  |  527|    292|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    292|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    292|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 292, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    292|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2749|    292|    J->maxslot = ra;
 2750|    292|    J->bc_extent = (MSize)(-bc_j(pc[1]))*sizeof(BCIns);
  ------------------
  |  |   39|    292|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    292|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    292|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2751|    292|    J->bc_min = pc+2 + bc_j(pc[1]);
  ------------------
  |  |   39|    292|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    292|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    292|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2752|    292|    J->state = LJ_TRACE_RECORD_1ST;  /* Record the first ITERN, too. */
 2753|    292|    break;
 2754|    580|  case BC_LOOP:
  ------------------
  |  Branch (2754:3): [True: 580, False: 13.9k]
  ------------------
 2755|       |    /* Only check BC range for real loops, but not for "repeat until true". */
 2756|    580|    pcj = pc + bc_j(ins);
  ------------------
  |  |   39|    580|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    580|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    580|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2757|    580|    ins = *pcj;
 2758|    580|    if (bc_op(ins) == BC_JMP && bc_j(ins) < 0) {
  ------------------
  |  |   34|    580|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (bc_op(ins) == BC_JMP && bc_j(ins) < 0) {
  ------------------
  |  |   39|    580|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    580|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    580|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  |  Branch (2758:9): [True: 580, False: 0]
  |  Branch (2758:33): [True: 580, False: 0]
  ------------------
 2759|    580|      J->bc_min = pcj+1 + bc_j(ins);
  ------------------
  |  |   39|    580|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    580|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    580|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2760|    580|      J->bc_extent = (MSize)(-bc_j(ins))*sizeof(BCIns);
  ------------------
  |  |   39|    580|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    580|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    580|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
 2761|    580|    }
 2762|    580|    J->maxslot = ra;
 2763|    580|    pc++;
 2764|    580|    break;
 2765|      0|  case BC_RET:
  ------------------
  |  Branch (2765:3): [True: 0, False: 14.5k]
  ------------------
 2766|      0|  case BC_RET0:
  ------------------
  |  Branch (2766:3): [True: 0, False: 14.5k]
  ------------------
 2767|      0|  case BC_RET1:
  ------------------
  |  Branch (2767:3): [True: 0, False: 14.5k]
  ------------------
 2768|       |    /* No bytecode range check for down-recursive root traces. */
 2769|      0|    J->maxslot = ra + bc_d(ins) - 1;
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
 2770|      0|    break;
 2771|  7.04k|  case BC_FUNCF:
  ------------------
  |  Branch (2771:3): [True: 7.04k, False: 7.48k]
  ------------------
 2772|       |    /* No bytecode range check for root traces started by a hot call. */
 2773|  7.04k|    J->maxslot = J->pt->numparams;
 2774|  7.04k|    pc++;
 2775|  7.04k|    break;
 2776|    190|  case BC_CALLM:
  ------------------
  |  Branch (2776:3): [True: 190, False: 14.3k]
  ------------------
 2777|    591|  case BC_CALL:
  ------------------
  |  Branch (2777:3): [True: 401, False: 14.1k]
  ------------------
 2778|    591|  case BC_ITERC:
  ------------------
  |  Branch (2778:3): [True: 0, False: 14.5k]
  ------------------
 2779|       |    /* No bytecode range check for stitched traces. */
 2780|    591|    pc++;
 2781|    591|    break;
 2782|      0|  default:
  ------------------
  |  Branch (2782:3): [True: 0, False: 14.5k]
  ------------------
 2783|      0|    lj_assertJ(0, "bad root trace start bytecode %d", bc_op(ins));
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2784|      0|    break;
 2785|  14.5k|  }
 2786|  14.5k|  return pc;
 2787|  14.5k|}

lj_snap_grow_buf_:
   39|  3.03k|{
   40|  3.03k|  MSize maxsnap = (MSize)J->param[JIT_P_maxsnap];
   41|  3.03k|  if (need > maxsnap)
  ------------------
  |  Branch (41:7): [True: 12, False: 3.02k]
  ------------------
   42|     12|    lj_trace_err(J, LJ_TRERR_SNAPOV);
   43|  3.02k|  lj_mem_growvec(J->L, J->snapbuf, J->sizesnap, maxsnap, SnapShot);
  ------------------
  |  |  129|  3.02k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
   44|  3.02k|  J->cur.snap = J->snapbuf;
   45|  3.02k|}
lj_snap_grow_map_:
   49|  2.84k|{
   50|  2.84k|  if (need < 2*J->sizesnapmap)
  ------------------
  |  Branch (50:7): [True: 365, False: 2.47k]
  ------------------
   51|    365|    need = 2*J->sizesnapmap;
   52|  2.47k|  else if (need < 64)
  ------------------
  |  Branch (52:12): [True: 2.47k, False: 0]
  ------------------
   53|  2.47k|    need = 64;
   54|  2.84k|  J->snapmapbuf = (SnapEntry *)lj_mem_realloc(J->L, J->snapmapbuf,
   55|  2.84k|		    J->sizesnapmap*sizeof(SnapEntry), need*sizeof(SnapEntry));
   56|  2.84k|  J->cur.snapmap = J->snapmapbuf;
   57|  2.84k|  J->sizesnapmap = need;
   58|  2.84k|}
lj_snap_add:
  182|   151k|{
  183|   151k|  MSize nsnap = J->cur.nsnap;
  184|   151k|  MSize nsnapmap = J->cur.nsnapmap;
  185|       |  /* Merge if no ins. inbetween or if requested and no guard inbetween. */
  186|   151k|  if ((nsnap > 0 && J->cur.snap[nsnap-1].ref == J->cur.nins) ||
  ------------------
  |  Branch (186:8): [True: 125k, False: 25.9k]
  |  Branch (186:21): [True: 30.5k, False: 94.5k]
  ------------------
  187|   151k|      (J->mergesnap && !irt_isguard(J->guardemit))) {
  ------------------
  |  |  444|  29.0k|#define irt_isguard(t)		((t).irt & IRT_GUARD)
  ------------------
  |  Branch (187:8): [True: 29.0k, False: 91.4k]
  |  Branch (187:24): [True: 16.8k, False: 12.1k]
  ------------------
  188|  47.4k|    if (nsnap == 1) {  /* But preserve snap #0 PC. */
  ------------------
  |  Branch (188:9): [True: 9.48k, False: 37.9k]
  ------------------
  189|  9.48k|      emitir_raw(IRT(IR_NOP, IRT_NIL), 0, 0);
  ------------------
  |  |   33|  9.48k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  9.48k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  190|  9.48k|      goto nomerge;
  191|  9.48k|    }
  192|  37.9k|    nsnapmap = J->cur.snap[--nsnap].mapofs;
  193|   103k|  } else {
  194|   113k|  nomerge:
  195|   113k|    lj_snap_grow_buf(J, nsnap+1);
  196|   113k|    J->cur.nsnap = (uint16_t)(nsnap+1);
  197|   113k|  }
  198|   151k|  J->mergesnap = 0;
  199|   151k|  J->guardemit.irt = 0;
  200|   151k|  snapshot_stack(J, &J->cur.snap[nsnap], nsnapmap);
  201|   151k|}
lj_snap_purge:
  342|  45.7k|{
  343|  45.7k|  uint8_t udf[SNAP_USEDEF_SLOTS];
  344|  45.7k|  BCReg s, maxslot = J->maxslot;
  345|  45.7k|  if (bc_op(*J->pc) == BC_FUNCV && maxslot > J->pt->numparams)
  ------------------
  |  |   34|  45.7k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (345:7): [True: 0, False: 45.7k]
  |  Branch (345:36): [True: 0, False: 0]
  ------------------
  346|      0|    maxslot = J->pt->numparams;
  347|  45.7k|  s = snap_usedef(J, udf, J->pc, maxslot);
  348|  45.7k|  if (s < maxslot) {
  ------------------
  |  Branch (348:7): [True: 44.4k, False: 1.37k]
  ------------------
  349|  44.4k|    snap_useuv(J->pt, udf);
  350|   146k|    for (; s < maxslot; s++)
  ------------------
  |  Branch (350:12): [True: 101k, False: 44.4k]
  ------------------
  351|   101k|      if (udf[s] != 0)
  ------------------
  |  Branch (351:11): [True: 83.8k, False: 18.0k]
  ------------------
  352|  83.8k|	J->base[s] = 0;  /* Purge dead slots. */
  353|  44.4k|  }
  354|  45.7k|}
lj_snap_shrink:
  358|  24.4k|{
  359|  24.4k|  SnapShot *snap = &J->cur.snap[J->cur.nsnap-1];
  360|  24.4k|  SnapEntry *map = &J->cur.snapmap[snap->mapofs];
  361|  24.4k|  MSize n, m, nlim, nent = snap->nent;
  362|  24.4k|  uint8_t udf[SNAP_USEDEF_SLOTS];
  363|  24.4k|  BCReg maxslot = J->maxslot;
  364|  24.4k|  BCReg baseslot = J->baseslot;
  365|  24.4k|  BCReg minslot = snap_usedef(J, udf, snap_pc(&map[nent]), maxslot);
  366|  24.4k|  if (minslot < maxslot) snap_useuv(J->pt, udf);
  ------------------
  |  Branch (366:7): [True: 12.7k, False: 11.6k]
  ------------------
  367|  24.4k|  maxslot += baseslot;
  368|  24.4k|  minslot += baseslot;
  369|  24.4k|  snap->nslots = (uint8_t)maxslot;
  370|   224k|  for (n = m = 0; n < nent; n++) {  /* Remove unused slots from snapshot. */
  ------------------
  |  Branch (370:19): [True: 199k, False: 24.4k]
  ------------------
  371|   199k|    BCReg s = snap_slot(map[n]);
  ------------------
  |  |  221|   199k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  372|   199k|    if (s < minslot || (s < maxslot && udf[s-baseslot] == 0))
  ------------------
  |  Branch (372:9): [True: 174k, False: 25.1k]
  |  Branch (372:25): [True: 11.5k, False: 13.5k]
  |  Branch (372:40): [True: 5.62k, False: 5.95k]
  ------------------
  373|   180k|      map[m++] = map[n];  /* Only copy used slots. */
  374|   199k|  }
  375|  24.4k|  snap->nent = (uint8_t)m;
  376|  24.4k|  nlim = J->cur.nsnapmap - snap->mapofs - 1;
  377|  73.2k|  while (n <= nlim) map[m++] = map[n++];  /* Move PC + frame links down. */
  ------------------
  |  Branch (377:10): [True: 48.8k, False: 24.4k]
  ------------------
  378|  24.4k|  J->cur.nsnapmap = (uint32_t)(snap->mapofs + m);  /* Free up space in map. */
  379|  24.4k|}
lj_snap_regspmap:
  409|  10.4k|{
  410|  10.4k|  SnapShot *snap = &T->snap[snapno];
  411|  10.4k|  SnapEntry *map = &T->snapmap[snap->mapofs];
  412|  10.4k|  BloomFilter rfilt = snap_renamefilter(T, snapno);
  413|  10.4k|  MSize n = 0;
  414|  10.4k|  IRRef ref = 0;
  415|  10.4k|  UNUSED(J);
  ------------------
  |  |   91|  10.4k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  416|  12.1k|  for ( ; ; ir++) {
  417|  12.1k|    uint32_t rs;
  418|  12.1k|    if (ir->o == IR_SLOAD) {
  ------------------
  |  Branch (418:9): [True: 8.28k, False: 3.84k]
  ------------------
  419|  8.28k|      if (!(ir->op2 & IRSLOAD_PARENT)) break;
  ------------------
  |  |  233|  8.28k|#define IRSLOAD_PARENT		0x01	/* Coalesce with parent trace. */
  ------------------
  |  Branch (419:11): [True: 6.60k, False: 1.68k]
  ------------------
  420|  2.29k|      for ( ; ; n++) {
  421|  2.29k|	lj_assertJ(n < snap->nent, "slot %d not found in snapshot", ir->op1);
  ------------------
  |  |  527|  2.29k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  2.29k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  2.29k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 2.29k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  2.29k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  422|  2.29k|	if (snap_slot(map[n]) == ir->op1) {
  ------------------
  |  |  221|  2.29k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  |  Branch (422:6): [True: 1.68k, False: 616]
  ------------------
  423|  1.68k|	  ref = snap_ref(map[n++]);
  ------------------
  |  |  220|  1.68k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  424|  1.68k|	  break;
  425|  1.68k|	}
  426|  2.29k|      }
  427|  3.84k|    } else if (LJ_SOFTFP32 && ir->o == IR_HIOP) {
  ------------------
  |  |  617|  7.69k|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|  7.69k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  3.84k|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (427:31): [True: 0, False: 0]
  ------------------
  428|      0|      ref++;
  429|  3.84k|    } else if (ir->o == IR_PVAL) {
  ------------------
  |  Branch (429:16): [True: 0, False: 3.84k]
  ------------------
  430|      0|      ref = ir->op1 + REF_BIAS;
  431|  3.84k|    } else {
  432|  3.84k|      break;
  433|  3.84k|    }
  434|  1.68k|    rs = T->ir[ref].prev;
  435|  1.68k|    if (bloomtest(rfilt, ref))
  ------------------
  |  |  121|  1.68k|#define bloomtest(b, x)	((b) & bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|  1.68k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|  1.68k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (121:25): [True: 209, False: 1.47k]
  |  |  ------------------
  ------------------
  436|    209|      rs = snap_renameref(T, snapno, ref, rs);
  437|  1.68k|    ir->prev = (uint16_t)rs;
  438|  1.68k|    lj_assertJ(regsp_used(rs), "unused IR %04d in snapshot", ref - REF_BIAS);
  ------------------
  |  |  527|  1.68k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.68k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.68k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.68k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.68k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  439|  1.68k|  }
  440|  10.4k|  return ir;
  441|  10.4k|}
lj_snap_replay:
  509|  7.35k|{
  510|  7.35k|  SnapShot *snap = &T->snap[J->exitno];
  511|  7.35k|  SnapEntry *map = &T->snapmap[snap->mapofs];
  512|  7.35k|  MSize n, nent = snap->nent;
  513|  7.35k|  BloomFilter seen = 0;
  514|  7.35k|  int pass23 = 0;
  515|  7.35k|  J->framedepth = 0;
  516|       |  /* Emit IR for slots inherited from parent snapshot. */
  517|  13.7k|  for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (517:15): [True: 6.40k, False: 7.35k]
  ------------------
  518|  6.40k|    SnapEntry sn = map[n];
  519|  6.40k|    BCReg s = snap_slot(sn);
  ------------------
  |  |  221|  6.40k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  520|  6.40k|    IRRef ref = snap_ref(sn);
  ------------------
  |  |  220|  6.40k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  521|  6.40k|    IRIns *ir = &T->ir[ref];
  522|  6.40k|    TRef tr;
  523|       |    /* The bloom filter avoids O(nent^2) overhead for de-duping slots. */
  524|  6.40k|    if (bloomtest(seen, ref) && (tr = snap_dedup(J, map, n, ref)) != 0)
  ------------------
  |  |  121|  12.8k|#define bloomtest(b, x)	((b) & bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|  6.40k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|  6.40k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (121:25): [True: 982, False: 5.42k]
  |  |  ------------------
  ------------------
  |  Branch (524:33): [True: 982, False: 0]
  ------------------
  525|    982|      goto setslot;
  526|  5.42k|    bloomset(seen, ref);
  ------------------
  |  |  120|  5.42k|#define bloomset(b, x)	((b) |= bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|  5.42k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|  5.42k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  527|  5.42k|    if (irref_isk(ref)) {
  ------------------
  |  |  485|  5.42k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 3.53k, False: 1.88k]
  |  |  ------------------
  ------------------
  528|       |      /* See special treatment of LJ_FR2 slot 1 in snapshot_slots() above. */
  529|  3.53k|      if (LJ_FR2 && (sn == SNAP(1, SNAP_FRAME | SNAP_NORESTORE, REF_NIL)))
  ------------------
  |  |  569|  7.07k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_FR2 && (sn == SNAP(1, SNAP_FRAME | SNAP_NORESTORE, REF_NIL)))
  ------------------
  |  |  212|  3.53k|#define SNAP(slot, flags, ref)	(((SnapEntry)(slot) << 24) + (flags) + (ref))
  ------------------
  |  Branch (529:21): [True: 24, False: 3.51k]
  ------------------
  530|     24|	tr = 0;
  531|  3.51k|      else
  532|  3.51k|	tr = snap_replay_const(J, ir);
  533|  3.53k|    } else if (!regsp_used(ir->prev)) {
  ------------------
  |  |   51|  1.88k|  (((rs) & ~REGSP(RID_MASK, 0)) != REGSP(RID_NONE, 0))
  |  |  ------------------
  |  |  |  |   44|  1.88k|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  |  |                 (((rs) & ~REGSP(RID_MASK, 0)) != REGSP(RID_NONE, 0))
  |  |  ------------------
  |  |  |  |   44|  1.88k|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  |  Branch (533:16): [True: 0, False: 1.88k]
  ------------------
  534|      0|      pass23 = 1;
  535|      0|      lj_assertJ(s != 0, "unused slot 0 in snapshot");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  536|      0|      tr = s;
  537|  1.88k|    } else {
  538|  1.88k|      IRType t = irt_type(ir->t);
  ------------------
  |  |  365|  1.88k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
  539|  1.88k|      uint32_t mode = IRSLOAD_INHERIT|IRSLOAD_PARENT;
  ------------------
  |  |  238|  1.88k|#define IRSLOAD_INHERIT		0x20	/* Inherited by exits/side traces. */
  ------------------
                    uint32_t mode = IRSLOAD_INHERIT|IRSLOAD_PARENT;
  ------------------
  |  |  233|  1.88k|#define IRSLOAD_PARENT		0x01	/* Coalesce with parent trace. */
  ------------------
  540|  1.88k|      if (LJ_SOFTFP32 && (sn & SNAP_SOFTFPNUM)) t = IRT_NUM;
  ------------------
  |  |  617|  3.77k|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|  3.77k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|  1.88k|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (LJ_SOFTFP32 && (sn & SNAP_SOFTFPNUM)) t = IRT_NUM;
  ------------------
  |  |  206|      0|#define SNAP_SOFTFPNUM		0x080000	/* Soft-float number. */
  ------------------
  |  Branch (540:26): [True: 0, False: 0]
  ------------------
  541|  1.88k|      if (ir->o == IR_SLOAD) mode |= (ir->op2 & IRSLOAD_READONLY);
  ------------------
  |  |  237|    300|#define IRSLOAD_READONLY	0x10	/* Read-only, omit slot store. */
  ------------------
  |  Branch (541:11): [True: 300, False: 1.58k]
  ------------------
  542|  1.88k|      if ((sn & SNAP_KEYINDEX)) mode |= IRSLOAD_KEYINDEX;
  ------------------
  |  |  207|  1.88k|#define SNAP_KEYINDEX		0x100000	/* Traversal key index. */
  ------------------
                    if ((sn & SNAP_KEYINDEX)) mode |= IRSLOAD_KEYINDEX;
  ------------------
  |  |  239|      8|#define IRSLOAD_KEYINDEX	0x40	/* Table traversal key index. */
  ------------------
  |  Branch (542:11): [True: 8, False: 1.87k]
  ------------------
  543|  1.88k|      tr = emitir_raw(IRT(IR_SLOAD, t), s, mode);
  ------------------
  |  |   33|  1.88k|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|  1.88k|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  544|  1.88k|    }
  545|  6.40k|  setslot:
  546|       |    /* Same as TREF_* flags. */
  547|  6.40k|    J->slot[s] = tr | (sn&(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME));
  ------------------
  |  |  207|  6.40k|#define SNAP_KEYINDEX		0x100000	/* Traversal key index. */
  ------------------
                  J->slot[s] = tr | (sn&(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME));
  ------------------
  |  |  204|  6.40k|#define SNAP_CONT		0x020000	/* Continuation slot. */
  ------------------
                  J->slot[s] = tr | (sn&(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME));
  ------------------
  |  |  203|  6.40k|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
  548|  6.40k|    J->framedepth += ((sn & (SNAP_CONT|SNAP_FRAME)) && (s != LJ_FR2));
  ------------------
  |  |  204|  6.40k|#define SNAP_CONT		0x020000	/* Continuation slot. */
  ------------------
                  J->framedepth += ((sn & (SNAP_CONT|SNAP_FRAME)) && (s != LJ_FR2));
  ------------------
  |  |  203|  6.40k|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
                  J->framedepth += ((sn & (SNAP_CONT|SNAP_FRAME)) && (s != LJ_FR2));
  ------------------
  |  |  569|    795|#define LJ_FR2			1
  ------------------
  |  Branch (548:23): [True: 795, False: 5.60k]
  |  Branch (548:56): [True: 771, False: 24]
  ------------------
  549|  6.40k|    if ((sn & SNAP_FRAME))
  ------------------
  |  |  203|  6.40k|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
  |  Branch (549:9): [True: 795, False: 5.60k]
  ------------------
  550|    795|      J->baseslot = s+1;
  551|  6.40k|  }
  552|  7.35k|  if (pass23) {
  ------------------
  |  Branch (552:7): [True: 0, False: 7.35k]
  ------------------
  553|      0|    IRIns *irlast = &T->ir[snap->ref];
  554|      0|    pass23 = 0;
  555|       |    /* Emit dependent PVALs. */
  556|      0|    for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (556:17): [True: 0, False: 0]
  ------------------
  557|      0|      SnapEntry sn = map[n];
  558|      0|      IRRef refp = snap_ref(sn);
  ------------------
  |  |  220|      0|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  559|      0|      IRIns *ir = &T->ir[refp];
  560|      0|      if (regsp_reg(ir->r) == RID_SUNK) {
  ------------------
  |  |   48|      0|#define regsp_reg(rs)		((rs) & 255)
  ------------------
                    if (regsp_reg(ir->r) == RID_SUNK) {
  ------------------
  |  |   25|      0|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|      0|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (560:11): [True: 0, False: 0]
  ------------------
  561|      0|	uint8_t m;
  562|      0|	if (J->slot[snap_slot(sn)] != snap_slot(sn)) continue;
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
              	if (J->slot[snap_slot(sn)] != snap_slot(sn)) continue;
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  |  Branch (562:6): [True: 0, False: 0]
  ------------------
  563|      0|	pass23 = 1;
  564|      0|	lj_assertJ(ir->o == IR_TNEW || ir->o == IR_TDUP ||
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  565|      0|		   ir->o == IR_CNEW || ir->o == IR_CNEWI,
  566|      0|		   "sunk parent IR %04d has bad op %d", refp - REF_BIAS, ir->o);
  567|      0|	m = lj_ir_mode[ir->o];
  568|      0|	if (irm_op1(m) == IRMref) snap_pref(J, T, map, nent, seen, ir->op1);
  ------------------
  |  |  300|      0|#define irm_op1(m)		((IRMode)((m)&3))
  ------------------
  |  Branch (568:6): [True: 0, False: 0]
  ------------------
  569|      0|	if (irm_op2(m) == IRMref) snap_pref(J, T, map, nent, seen, ir->op2);
  ------------------
  |  |  301|      0|#define irm_op2(m)		((IRMode)(((m)>>2)&3))
  ------------------
  |  Branch (569:6): [True: 0, False: 0]
  ------------------
  570|      0|	if (LJ_HASFFI && ir->o == IR_CNEWI) {
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (570:19): [True: 0, False: 0]
  ------------------
  571|      0|	  if (LJ_32 && refp+1 < T->nins && (ir+1)->o == IR_HIOP)
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (571:17): [True: 0, False: 0]
  |  Branch (571:37): [True: 0, False: 0]
  ------------------
  572|      0|	    snap_pref(J, T, map, nent, seen, (ir+1)->op2);
  573|      0|	} else {
  574|      0|	  IRIns *irs;
  575|      0|	  for (irs = ir+1; irs < irlast; irs++)
  ------------------
  |  Branch (575:21): [True: 0, False: 0]
  ------------------
  576|      0|	    if (irs->r == RID_SINK && snap_sunk_store(T, ir, irs)) {
  ------------------
  |  |   24|      0|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|      0|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (576:10): [True: 0, False: 0]
  |  Branch (576:32): [True: 0, False: 0]
  ------------------
  577|      0|	      if (snap_pref(J, T, map, nent, seen, irs->op2) == 0)
  ------------------
  |  Branch (577:12): [True: 0, False: 0]
  ------------------
  578|      0|		snap_pref(J, T, map, nent, seen, T->ir[irs->op2].op1);
  579|      0|	      else if ((LJ_SOFTFP32 || (LJ_32 && LJ_HASFFI)) &&
  ------------------
  |  |  617|      0|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|      0|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|      0|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	      else if ((LJ_SOFTFP32 || (LJ_32 && LJ_HASFFI)) &&
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	      else if ((LJ_SOFTFP32 || (LJ_32 && LJ_HASFFI)) &&
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  580|      0|		       irs+1 < irlast && (irs+1)->o == IR_HIOP)
  ------------------
  |  Branch (580:10): [True: 0, False: 0]
  |  Branch (580:28): [True: 0, False: 0]
  ------------------
  581|      0|		snap_pref(J, T, map, nent, seen, (irs+1)->op2);
  582|      0|	    }
  583|      0|	}
  584|      0|      } else if (!irref_isk(refp) && !regsp_used(ir->prev)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  ------------------
                    } else if (!irref_isk(refp) && !regsp_used(ir->prev)) {
  ------------------
  |  |   51|      0|  (((rs) & ~REGSP(RID_MASK, 0)) != REGSP(RID_NONE, 0))
  |  |  ------------------
  |  |  |  |   44|      0|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  |  |                 (((rs) & ~REGSP(RID_MASK, 0)) != REGSP(RID_NONE, 0))
  |  |  ------------------
  |  |  |  |   44|      0|#define REGSP(r, s)		((r) + ((s) << 8))
  |  |  ------------------
  ------------------
  |  Branch (584:18): [True: 0, False: 0]
  |  Branch (584:38): [True: 0, False: 0]
  ------------------
  585|      0|	lj_assertJ(ir->o == IR_CONV && ir->op2 == IRCONV_NUM_INT,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  586|      0|		   "sunk parent IR %04d has bad op %d", refp - REF_BIAS, ir->o);
  587|      0|	J->slot[snap_slot(sn)] = snap_pref(J, T, map, nent, seen, ir->op1);
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  588|      0|      }
  589|      0|    }
  590|       |    /* Replay sunk instructions. */
  591|      0|    for (n = 0; pass23 && n < nent; n++) {
  ------------------
  |  Branch (591:17): [True: 0, False: 0]
  |  Branch (591:27): [True: 0, False: 0]
  ------------------
  592|      0|      SnapEntry sn = map[n];
  593|      0|      IRRef refp = snap_ref(sn);
  ------------------
  |  |  220|      0|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  594|      0|      IRIns *ir = &T->ir[refp];
  595|      0|      if (regsp_reg(ir->r) == RID_SUNK) {
  ------------------
  |  |   48|      0|#define regsp_reg(rs)		((rs) & 255)
  ------------------
                    if (regsp_reg(ir->r) == RID_SUNK) {
  ------------------
  |  |   25|      0|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|      0|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (595:11): [True: 0, False: 0]
  ------------------
  596|      0|	TRef op1, op2;
  597|      0|	uint8_t m;
  598|      0|	if (J->slot[snap_slot(sn)] != snap_slot(sn)) {  /* De-dup allocs. */
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
              	if (J->slot[snap_slot(sn)] != snap_slot(sn)) {  /* De-dup allocs. */
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  |  Branch (598:6): [True: 0, False: 0]
  ------------------
  599|      0|	  J->slot[snap_slot(sn)] = J->slot[J->slot[snap_slot(sn)]];
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
              	  J->slot[snap_slot(sn)] = J->slot[J->slot[snap_slot(sn)]];
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  600|      0|	  continue;
  601|      0|	}
  602|      0|	op1 = ir->op1;
  603|      0|	m = lj_ir_mode[ir->o];
  604|      0|	if (irm_op1(m) == IRMref) op1 = snap_pref(J, T, map, nent, seen, op1);
  ------------------
  |  |  300|      0|#define irm_op1(m)		((IRMode)((m)&3))
  ------------------
  |  Branch (604:6): [True: 0, False: 0]
  ------------------
  605|      0|	op2 = ir->op2;
  606|      0|	if (irm_op2(m) == IRMref) op2 = snap_pref(J, T, map, nent, seen, op2);
  ------------------
  |  |  301|      0|#define irm_op2(m)		((IRMode)(((m)>>2)&3))
  ------------------
  |  Branch (606:6): [True: 0, False: 0]
  ------------------
  607|      0|	if (LJ_HASFFI && ir->o == IR_CNEWI) {
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (607:19): [True: 0, False: 0]
  ------------------
  608|      0|	  if (LJ_32 && refp+1 < T->nins && (ir+1)->o == IR_HIOP) {
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (608:17): [True: 0, False: 0]
  |  Branch (608:37): [True: 0, False: 0]
  ------------------
  609|      0|	    lj_needsplit(J);  /* Emit joining HIOP. */
  ------------------
  |  |  410|      0|#define lj_needsplit(J)		UNUSED(J)
  |  |  ------------------
  |  |  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  610|      0|	    op2 = emitir_raw(IRT(IR_HIOP, IRT_I64), op2,
  ------------------
  |  |   33|      0|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  611|      0|			     snap_pref(J, T, map, nent, seen, (ir+1)->op2));
  612|      0|	  }
  613|      0|	  J->slot[snap_slot(sn)] = emitir(ir->ot & ~(IRT_MARK|IRT_ISPHI), op1, op2);
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
              	  J->slot[snap_slot(sn)] = emitir(ir->ot & ~(IRT_MARK|IRT_ISPHI), op1, op2);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  614|      0|	} else {
  615|      0|	  IRIns *irs;
  616|      0|	  TRef tr = emitir(ir->ot, op1, op2);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  617|      0|	  J->slot[snap_slot(sn)] = tr;
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  618|      0|	  for (irs = ir+1; irs < irlast; irs++)
  ------------------
  |  Branch (618:21): [True: 0, False: 0]
  ------------------
  619|      0|	    if (irs->r == RID_SINK && snap_sunk_store(T, ir, irs)) {
  ------------------
  |  |   24|      0|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|      0|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (619:10): [True: 0, False: 0]
  |  Branch (619:32): [True: 0, False: 0]
  ------------------
  620|      0|	      IRIns *irr = &T->ir[irs->op1];
  621|      0|	      TRef val, key = irr->op2, tmp = tr;
  622|      0|	      if (irr->o != IR_FREF) {
  ------------------
  |  Branch (622:12): [True: 0, False: 0]
  ------------------
  623|      0|		IRIns *irk = &T->ir[key];
  624|      0|		if (irr->o == IR_HREFK)
  ------------------
  |  Branch (624:7): [True: 0, False: 0]
  ------------------
  625|      0|		  key = lj_ir_kslot(J, snap_replay_const(J, &T->ir[irk->op1]),
  626|      0|				    irk->op2);
  627|      0|		else
  628|      0|		  key = snap_replay_const(J, irk);
  629|      0|		if (irr->o == IR_HREFK || irr->o == IR_AREF) {
  ------------------
  |  Branch (629:7): [True: 0, False: 0]
  |  Branch (629:29): [True: 0, False: 0]
  ------------------
  630|      0|		  IRIns *irf = &T->ir[irr->op1];
  631|      0|		  tmp = emitir(irf->ot, tmp, irf->op2);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  632|      0|		} else if (irr->o == IR_NEWREF) {
  ------------------
  |  Branch (632:14): [True: 0, False: 0]
  ------------------
  633|      0|		  IRRef allocref = tref_ref(tr);
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  634|      0|		  IRRef keyref = tref_ref(key);
  ------------------
  |  |  504|      0|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
  635|      0|		  IRRef newref_ref = J->chain[IR_NEWREF];
  636|      0|		  IRIns *newref = &J->cur.ir[newref_ref];
  637|      0|		  lj_assertJ(irref_isk(keyref),
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  638|      0|			     "sunk store for parent IR %04d with bad key %04d",
  639|      0|			     refp - REF_BIAS, keyref - REF_BIAS);
  640|      0|		  if (newref_ref > allocref && newref->op2 == keyref) {
  ------------------
  |  Branch (640:9): [True: 0, False: 0]
  |  Branch (640:34): [True: 0, False: 0]
  ------------------
  641|      0|		    lj_assertJ(newref->op1 == allocref,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  642|      0|			       "sunk store for parent IR %04d with bad tab %04d",
  643|      0|			       refp - REF_BIAS, allocref - REF_BIAS);
  644|      0|		    tmp = newref_ref;
  645|      0|		    goto skip_newref;
  646|      0|		  }
  647|      0|		}
  648|      0|	      }
  649|      0|	      tmp = emitir(irr->ot, tmp, key);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  650|      0|	    skip_newref:
  651|      0|	      val = snap_pref(J, T, map, nent, seen, irs->op2);
  652|      0|	      if (val == 0) {
  ------------------
  |  Branch (652:12): [True: 0, False: 0]
  ------------------
  653|      0|		IRIns *irc = &T->ir[irs->op2];
  654|      0|		lj_assertJ(irc->o == IR_CONV && irc->op2 == IRCONV_NUM_INT,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  655|      0|			   "sunk store for parent IR %04d with bad op %d",
  656|      0|			   refp - REF_BIAS, irc->o);
  657|      0|		val = snap_pref(J, T, map, nent, seen, irc->op1);
  658|      0|		val = emitir(IRTN(IR_CONV), val, IRCONV_NUM_INT);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  659|      0|	      } else if ((LJ_SOFTFP32 || (LJ_32 && LJ_HASFFI)) &&
  ------------------
  |  |  617|      0|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|      0|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|      0|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	      } else if ((LJ_SOFTFP32 || (LJ_32 && LJ_HASFFI)) &&
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	      } else if ((LJ_SOFTFP32 || (LJ_32 && LJ_HASFFI)) &&
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  660|      0|			 irs+1 < irlast && (irs+1)->o == IR_HIOP) {
  ------------------
  |  Branch (660:5): [True: 0, False: 0]
  |  Branch (660:23): [True: 0, False: 0]
  ------------------
  661|      0|		IRType t = IRT_I64;
  662|      0|		if (LJ_SOFTFP32 && irt_type((irs+1)->t) == IRT_SOFTFP)
  ------------------
  |  |  617|      0|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|      0|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|      0|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              		if (LJ_SOFTFP32 && irt_type((irs+1)->t) == IRT_SOFTFP)
  ------------------
  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
  |  Branch (662:22): [True: 0, False: 0]
  ------------------
  663|      0|		  t = IRT_NUM;
  664|      0|		lj_needsplit(J);
  ------------------
  |  |  410|      0|#define lj_needsplit(J)		UNUSED(J)
  |  |  ------------------
  |  |  |  |   91|      0|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  665|      0|		if (irref_isk(irs->op2) && irref_isk((irs+1)->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              		if (irref_isk(irs->op2) && irref_isk((irs+1)->op2)) {
  ------------------
  |  |  485|      0|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  666|      0|		  uint64_t k = (uint32_t)T->ir[irs->op2].i +
  667|      0|			       ((uint64_t)T->ir[(irs+1)->op2].i << 32);
  668|      0|		  val = lj_ir_k64(J, t == IRT_I64 ? IR_KINT64 : IR_KNUM, k);
  ------------------
  |  Branch (668:24): [True: 0, False: 0]
  ------------------
  669|      0|		} else {
  670|      0|		  val = emitir_raw(IRT(IR_HIOP, t), val,
  ------------------
  |  |   33|      0|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  671|      0|			  snap_pref(J, T, map, nent, seen, (irs+1)->op2));
  672|      0|		}
  673|      0|		tmp = emitir(IRT(irs->o, t), tmp, val);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  674|      0|		continue;
  675|      0|	      }
  676|      0|	      tmp = emitir(irs->ot, tmp, val);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  677|      0|	    } else if (LJ_HASFFI && irs->o == IR_XBAR && ir->o == IR_CNEW) {
  ------------------
  |  |  585|      0|#define LJ_HASFFI		1
  |  |  ------------------
  |  |  |  Branch (585:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (677:30): [True: 0, False: 0]
  |  Branch (677:51): [True: 0, False: 0]
  ------------------
  678|      0|	      emitir(IRT(IR_XBAR, IRT_NIL), 0, 0);
  ------------------
  |  |   30|      0|#define emitir(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_opt_fold(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  679|      0|	    }
  680|      0|	}
  681|      0|      }
  682|      0|    }
  683|      0|  }
  684|  7.35k|  J->base = J->slot + J->baseslot;
  685|  7.35k|  J->maxslot = snap->nslots - J->baseslot;
  686|  7.35k|  lj_snap_add(J);
  687|  7.35k|  if (pass23)  /* Need explicit GC step _after_ initial snapshot. */
  ------------------
  |  Branch (687:7): [True: 0, False: 7.35k]
  ------------------
  688|      0|    emitir_raw(IRTG(IR_GCSTEP, IRT_NIL), 0, 0);
  ------------------
  |  |   33|      0|#define emitir_raw(ot, a, b)	(lj_ir_set(J, (ot), (a), (b)), lj_ir_emit(J))
  |  |  ------------------
  |  |  |  |   26|      0|  lj_ir_set_(J, (uint16_t)(ot), (IRRef1)(a), (IRRef1)(b))
  |  |  ------------------
  ------------------
  689|  7.35k|}
lj_snap_restore:
  948|   371k|{
  949|   371k|  ExitState *ex = (ExitState *)exptr;
  950|   371k|  SnapNo snapno = J->exitno;  /* For now, snapno == exitno. */
  951|   371k|  GCtrace *T = traceref(J, J->parent);
  ------------------
  |  |  298|   371k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|   371k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   371k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   743k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 371k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 371k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  952|      0|  SnapShot *snap = &T->snap[snapno];
  953|   371k|  MSize n, nent = snap->nent;
  954|   371k|  SnapEntry *map = &T->snapmap[snap->mapofs];
  955|   371k|#if !LJ_FR2 || defined(LUA_USE_ASSERT)
  956|   371k|  SnapEntry *flinks = &T->snapmap[snap_nextofs(T, snap)-1-LJ_FR2];
  ------------------
  |  |  569|   371k|#define LJ_FR2			1
  ------------------
  957|   371k|#endif
  958|       |#if !LJ_FR2
  959|       |  ptrdiff_t ftsz0;
  960|       |#endif
  961|   371k|  TValue *frame;
  962|   371k|  BloomFilter rfilt = snap_renamefilter(T, snapno);
  963|   371k|  const BCIns *pc = snap_pc(&map[nent]);
  964|   371k|  lua_State *L = J->L;
  965|       |
  966|       |  /* Set interpreter PC to the next PC to get correct error messages. */
  967|   371k|  setcframe_pc(L->cframe, pc+1);
  ------------------
  |  |  291|   371k|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|   371k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  968|   371k|  setcframe_pc(cframe_raw(cframe_prev(L->cframe)), pc);
  ------------------
  |  |  291|   371k|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|   371k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  969|       |
  970|       |  /* Make sure the stack is big enough for the slots from the snapshot. */
  971|   371k|  if (LJ_UNLIKELY(L->base + snap->topslot >= tvref(L->maxstack))) {
  ------------------
  |  |  146|   371k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.30k, False: 370k]
  |  |  ------------------
  ------------------
  972|  1.30k|    L->top = curr_topL(L);
  ------------------
  |  |  718|  1.30k|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|  1.30k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|  1.30k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|  1.30k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|  1.30k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|  1.30k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.30k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|  1.30k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  973|  1.30k|    lj_state_growstack(L, snap->topslot - curr_proto(L)->framesize);
  ------------------
  |  |  717|  1.30k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  ------------------
  |  |  |  |  480|  1.30k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|  1.30k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|  1.30k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|  1.30k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.30k, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|  1.30k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  974|  1.30k|  }
  975|       |
  976|       |  /* Fill stack slots with data from the registers and spill slots. */
  977|   371k|  frame = L->base-1-LJ_FR2;
  ------------------
  |  |  569|   371k|#define LJ_FR2			1
  ------------------
  978|       |#if !LJ_FR2
  979|       |  ftsz0 = frame_ftsz(frame);  /* Preserve link to previous frame in slot #0. */
  980|       |#endif
  981|   935k|  for (n = 0; n < nent; n++) {
  ------------------
  |  Branch (981:15): [True: 564k, False: 371k]
  ------------------
  982|   564k|    SnapEntry sn = map[n];
  983|   564k|    if (!(sn & SNAP_NORESTORE)) {
  ------------------
  |  |  205|   564k|#define SNAP_NORESTORE		0x040000	/* No need to restore slot. */
  ------------------
  |  Branch (983:9): [True: 563k, False: 297]
  ------------------
  984|   563k|      TValue *o = &frame[snap_slot(sn)];
  ------------------
  |  |  221|   563k|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  985|   563k|      IRRef ref = snap_ref(sn);
  ------------------
  |  |  220|   563k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  986|   563k|      IRIns *ir = &T->ir[ref];
  987|   563k|      if (ir->r == RID_SUNK) {
  ------------------
  |  |   25|   563k|#define RID_SUNK		(RID_INIT-2)
  |  |  ------------------
  |  |  |  |   23|   563k|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|   563k|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|   563k|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (987:11): [True: 7, False: 563k]
  ------------------
  988|      7|	MSize j;
  989|      7|	for (j = 0; j < n; j++)
  ------------------
  |  Branch (989:14): [True: 0, False: 7]
  ------------------
  990|      0|	  if (snap_ref(map[j]) == ref) {  /* De-duplicate sunk allocations. */
  ------------------
  |  |  220|      0|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  |  Branch (990:8): [True: 0, False: 0]
  ------------------
  991|      0|	    copyTV(L, o, &frame[snap_slot(map[j])]);
  ------------------
  |  |  221|      0|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
  992|      0|	    goto dupslot;
  993|      0|	  }
  994|      7|	snap_unsink(J, T, ex, snapno, rfilt, ir, o);
  995|      7|      dupslot:
  996|      7|	continue;
  997|      7|      }
  998|   563k|      snap_restoreval(J, T, ex, snapno, rfilt, ref, o);
  999|   563k|      if (LJ_SOFTFP32 && (sn & SNAP_SOFTFPNUM) && tvisint(o)) {
  ------------------
  |  |  617|  1.12M|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|  1.12M|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   563k|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (LJ_SOFTFP32 && (sn & SNAP_SOFTFPNUM) && tvisint(o)) {
  ------------------
  |  |  206|      0|#define SNAP_SOFTFPNUM		0x080000	/* Soft-float number. */
  ------------------
                    if (LJ_SOFTFP32 && (sn & SNAP_SOFTFPNUM) && tvisint(o)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (999:26): [True: 0, False: 0]
  ------------------
 1000|      0|	TValue tmp;
 1001|      0|	snap_restoreval(J, T, ex, snapno, rfilt, ref+1, &tmp);
 1002|      0|	o->u32.hi = tmp.u32.lo;
 1003|       |#if !LJ_FR2
 1004|       |      } else if ((sn & (SNAP_CONT|SNAP_FRAME))) {
 1005|       |	/* Overwrite tag with frame link. */
 1006|       |	setframe_ftsz(o, snap_slot(sn) != 0 ? (int32_t)*flinks-- : ftsz0);
 1007|       |	L->base = o+1;
 1008|       |#endif
 1009|   563k|      } else if ((sn & SNAP_KEYINDEX)) {
  ------------------
  |  |  207|   563k|#define SNAP_KEYINDEX		0x100000	/* Traversal key index. */
  ------------------
  |  Branch (1009:18): [True: 1.17k, False: 562k]
  ------------------
 1010|       |	/* A IRT_INT key index slot is restored as a number. Undo this. */
 1011|  1.17k|	o->u32.lo = (uint32_t)(LJ_DUALNUM ? intV(o) : lj_num2int(numV(o)));
  ------------------
  |  |  549|  1.17k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	o->u32.lo = (uint32_t)(LJ_DUALNUM ? intV(o) : lj_num2int(numV(o)));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	o->u32.lo = (uint32_t)(LJ_DUALNUM ? intV(o) : lj_num2int(numV(o)));
  ------------------
  |  | 1000|  2.34k|#define lj_num2int(n)   ((int32_t)(n))
  |  |  ------------------
  |  |  |  Branch (1000:36): [True: 1.17k, False: 0]
  |  |  ------------------
  ------------------
 1012|  1.17k|	o->u32.hi = LJ_KEYINDEX;
  ------------------
  |  |  288|  1.17k|#define LJ_KEYINDEX		0xfffe7fffu
  ------------------
 1013|  1.17k|      }
 1014|   563k|    }
 1015|   564k|  }
 1016|   371k|#if LJ_FR2
 1017|   371k|  L->base += (map[nent+LJ_BE] & 0xff);
  ------------------
  |  |  630|   371k|#define LJ_BE			0
  ------------------
 1018|   371k|#endif
 1019|   371k|  lj_assertJ(map + nent == flinks, "inconsistent frames in snapshot");
  ------------------
  |  |  527|   371k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   371k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   371k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 371k, False: 167]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1020|       |
 1021|       |  /* Compute current stack top. */
 1022|   371k|  switch (bc_op(*pc)) {
  ------------------
  |  |   34|   371k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
 1023|   371k|  default:
  ------------------
  |  Branch (1023:3): [True: 371k, False: 0]
  ------------------
 1024|   371k|    if (bc_op(*pc) < BC_FUNCF) {
  ------------------
  |  |   34|   371k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (1024:9): [True: 371k, False: 0]
  ------------------
 1025|   371k|      L->top = curr_topL(L);
  ------------------
  |  |  718|   371k|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|   371k|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|   371k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|   371k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|   371k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|   371k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 371k, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1026|      0|      break;
 1027|   371k|    }
 1028|       |    /* fallthrough */
 1029|      0|  case BC_CALLM: case BC_CALLMT: case BC_RETM: case BC_TSETM:
  ------------------
  |  Branch (1029:3): [True: 0, False: 371k]
  |  Branch (1029:18): [True: 0, False: 371k]
  |  Branch (1029:34): [True: 0, False: 371k]
  |  Branch (1029:48): [True: 0, False: 371k]
  ------------------
 1030|      0|    L->top = frame + snap->nslots;
 1031|      0|    break;
 1032|   371k|  }
 1033|   371k|  return pc;
 1034|   371k|}
lj_snap.c:snapshot_stack:
  162|   151k|{
  163|   151k|  BCReg nslots = J->baseslot + J->maxslot;
  164|   151k|  MSize nent;
  165|   151k|  SnapEntry *p;
  166|       |  /* Conservative estimate. */
  167|   151k|  lj_snap_grow_map(J, nsnapmap + nslots + (MSize)(LJ_FR2?2:J->framedepth+1));
  ------------------
  |  |  569|   151k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
  168|   151k|  p = &J->cur.snapmap[nsnapmap];
  169|   151k|  nent = snapshot_slots(J, p, nslots);
  170|   151k|  snap->nent = (uint8_t)nent;
  171|   151k|  nent += snapshot_framelinks(J, p + nent, &snap->topslot);
  172|   151k|  snap->mapofs = (uint32_t)nsnapmap;
  173|   151k|  snap->ref = (IRRef1)J->cur.nins;
  174|   151k|  snap->mcofs = 0;
  175|   151k|  snap->nslots = (uint8_t)nslots;
  176|   151k|  snap->count = 0;
  177|   151k|  J->cur.nsnapmap = (uint32_t)(nsnapmap + nent);
  178|   151k|}
lj_snap.c:snapshot_slots:
   64|   151k|{
   65|   151k|  IRRef retf = J->chain[IR_RETF];  /* Limits SLOAD restore elimination. */
   66|   151k|  BCReg s;
   67|   151k|  MSize n = 0;
   68|  1.65M|  for (s = 0; s < nslots; s++) {
  ------------------
  |  Branch (68:15): [True: 1.49M, False: 151k]
  ------------------
   69|  1.49M|    TRef tr = J->slot[s];
   70|  1.49M|    IRRef ref = tref_ref(tr);
  ------------------
  |  |  504|  1.49M|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
   71|  1.49M|#if LJ_FR2
   72|  1.49M|    if (s == 1) {  /* Ignore slot 1 in LJ_FR2 mode, except if tailcalled. */
  ------------------
  |  Branch (72:9): [True: 151k, False: 1.34M]
  ------------------
   73|   151k|      if ((tr & TREF_FRAME))
  ------------------
  |  |  498|   151k|#define TREF_FRAME		0x00010000
  ------------------
  |  Branch (73:11): [True: 360, False: 150k]
  ------------------
   74|    360|	map[n++] = SNAP(1, SNAP_FRAME | SNAP_NORESTORE, REF_NIL);
  ------------------
  |  |  212|    360|#define SNAP(slot, flags, ref)	(((SnapEntry)(slot) << 24) + (flags) + (ref))
  ------------------
   75|   151k|      continue;
   76|   151k|    }
   77|  1.34M|    if ((tr & (TREF_FRAME | TREF_CONT)) && !ref) {
  ------------------
  |  |  498|  1.34M|#define TREF_FRAME		0x00010000
  ------------------
                  if ((tr & (TREF_FRAME | TREF_CONT)) && !ref) {
  ------------------
  |  |  499|  1.34M|#define TREF_CONT		0x00020000
  ------------------
  |  Branch (77:9): [True: 68.2k, False: 1.28M]
  |  Branch (77:44): [True: 23.8k, False: 44.3k]
  ------------------
   78|  23.8k|      cTValue *base = J->L->base - J->baseslot;
   79|  23.8k|      tr = J->slot[s] = (tr & 0xff0000) | lj_ir_k64(J, IR_KNUM, base[s].u64);
   80|  23.8k|      ref = tref_ref(tr);
  ------------------
  |  |  504|  23.8k|#define tref_ref(tr)		((IRRef1)(tr))
  ------------------
   81|  23.8k|    }
   82|  1.34M|#endif
   83|  1.34M|    if (ref) {
  ------------------
  |  Branch (83:9): [True: 643k, False: 705k]
  ------------------
   84|   643k|      SnapEntry sn = SNAP_TR(s, tr);
  ------------------
  |  |  214|   643k|  (((SnapEntry)(slot) << 24) + \
  |  |  215|   643k|   ((tr) & (TREF_KEYINDEX|TREF_CONT|TREF_FRAME|TREF_REFMASK)))
  |  |  ------------------
  |  |  |  |  500|   643k|#define TREF_KEYINDEX		0x00100000
  |  |  ------------------
  |  |                  ((tr) & (TREF_KEYINDEX|TREF_CONT|TREF_FRAME|TREF_REFMASK)))
  |  |  ------------------
  |  |  |  |  499|   643k|#define TREF_CONT		0x00020000
  |  |  ------------------
  |  |                  ((tr) & (TREF_KEYINDEX|TREF_CONT|TREF_FRAME|TREF_REFMASK)))
  |  |  ------------------
  |  |  |  |  498|   643k|#define TREF_FRAME		0x00010000
  |  |  ------------------
  |  |                  ((tr) & (TREF_KEYINDEX|TREF_CONT|TREF_FRAME|TREF_REFMASK)))
  |  |  ------------------
  |  |  |  |  497|   643k|#define TREF_REFMASK		0x0000ffff
  |  |  ------------------
  ------------------
   85|   643k|      IRIns *ir = &J->cur.ir[ref];
   86|   643k|      if ((LJ_FR2 || !(sn & (SNAP_CONT|SNAP_FRAME))) &&
  ------------------
  |  |  569|  1.28M|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if ((LJ_FR2 || !(sn & (SNAP_CONT|SNAP_FRAME))) &&
  ------------------
  |  |  204|      0|#define SNAP_CONT		0x020000	/* Continuation slot. */
  ------------------
                    if ((LJ_FR2 || !(sn & (SNAP_CONT|SNAP_FRAME))) &&
  ------------------
  |  |  203|      0|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
  |  Branch (86:22): [True: 0, False: 0]
  ------------------
   87|   643k|	  ir->o == IR_SLOAD && ir->op1 == s && ref > retf) {
  ------------------
  |  Branch (87:4): [True: 263k, False: 379k]
  |  Branch (87:25): [True: 235k, False: 28.3k]
  |  Branch (87:41): [True: 234k, False: 748]
  ------------------
   88|       |	/*
   89|       |	** No need to snapshot unmodified non-inherited slots.
   90|       |	** But always snapshot the function below a frame in LJ_FR2 mode.
   91|       |	*/
   92|   234k|	if (!(ir->op2 & IRSLOAD_INHERIT) &&
  ------------------
  |  |  238|   234k|#define IRSLOAD_INHERIT		0x20	/* Inherited by exits/side traces. */
  ------------------
  |  Branch (92:6): [True: 208k, False: 26.6k]
  ------------------
   93|   234k|	    (!LJ_FR2 || s == 0 || s+1 == nslots ||
  ------------------
  |  |  569|   416k|#define LJ_FR2			1
  ------------------
  |  Branch (93:7): [Folded - Ignored]
  |  Branch (93:18): [True: 13.8k, False: 194k]
  |  Branch (93:28): [True: 5.38k, False: 188k]
  ------------------
   94|   208k|	     !(J->slot[s+1] & (TREF_CONT|TREF_FRAME))))
  ------------------
  |  |  499|   188k|#define TREF_CONT		0x00020000
  ------------------
              	     !(J->slot[s+1] & (TREF_CONT|TREF_FRAME))))
  ------------------
  |  |  498|   188k|#define TREF_FRAME		0x00010000
  ------------------
  |  Branch (94:7): [True: 188k, False: 0]
  ------------------
   95|   208k|	  continue;
   96|       |	/* No need to restore readonly slots and unmodified non-parent slots. */
   97|  26.6k|	if (!(LJ_DUALNUM && (ir->op2 & IRSLOAD_CONVERT)) &&
  ------------------
  |  |  549|  53.3k|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (!(LJ_DUALNUM && (ir->op2 & IRSLOAD_CONVERT)) &&
  ------------------
  |  |  236|      0|#define IRSLOAD_CONVERT		0x08	/* Number to integer conversion. */
  ------------------
  |  Branch (97:22): [True: 0, False: 0]
  ------------------
   98|  26.6k|	    (ir->op2 & (IRSLOAD_READONLY|IRSLOAD_PARENT)) != IRSLOAD_PARENT)
  ------------------
  |  |  237|  26.6k|#define IRSLOAD_READONLY	0x10	/* Read-only, omit slot store. */
  ------------------
              	    (ir->op2 & (IRSLOAD_READONLY|IRSLOAD_PARENT)) != IRSLOAD_PARENT)
  ------------------
  |  |  233|  26.6k|#define IRSLOAD_PARENT		0x01	/* Coalesce with parent trace. */
  ------------------
              	    (ir->op2 & (IRSLOAD_READONLY|IRSLOAD_PARENT)) != IRSLOAD_PARENT)
  ------------------
  |  |  233|  26.6k|#define IRSLOAD_PARENT		0x01	/* Coalesce with parent trace. */
  ------------------
  |  Branch (98:6): [True: 22.2k, False: 4.39k]
  ------------------
   99|  22.2k|	  sn |= SNAP_NORESTORE;
  ------------------
  |  |  205|  22.2k|#define SNAP_NORESTORE		0x040000	/* No need to restore slot. */
  ------------------
  100|  26.6k|      }
  101|   434k|      if (LJ_SOFTFP32 && irt_isnum(ir->t))
  ------------------
  |  |  617|   869k|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|   869k|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|   434k|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    if (LJ_SOFTFP32 && irt_isnum(ir->t))
  ------------------
  |  |  377|      0|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  102|      0|	sn |= SNAP_SOFTFPNUM;
  ------------------
  |  |  206|      0|#define SNAP_SOFTFPNUM		0x080000	/* Soft-float number. */
  ------------------
  103|   434k|      map[n++] = sn;
  104|   434k|    }
  105|  1.34M|  }
  106|   151k|  return n;
  107|   151k|}
lj_snap.c:snapshot_framelinks:
  111|   151k|{
  112|   151k|  cTValue *frame = J->L->base - 1;
  113|   151k|  cTValue *lim = J->L->base - J->baseslot + LJ_FR2;
  ------------------
  |  |  569|   151k|#define LJ_FR2			1
  ------------------
  114|   151k|  GCfunc *fn = frame_func(frame);
  ------------------
  |  |   83|   151k|#define frame_func(f)		(&frame_gc(f)->fn)
  |  |  ------------------
  |  |  |  |   46|   151k|#define frame_gc(f)		(gcval((f)-1))
  |  |  |  |  ------------------
  |  |  |  |  |  |  833|   151k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   69|   151k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  291|   151k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  115|   151k|  cTValue *ftop = isluafunc(fn) ? (frame+funcproto(fn)->framesize) : J->L->top;
  ------------------
  |  |  476|   151k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   151k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 150k, False: 819]
  |  |  ------------------
  ------------------
                cTValue *ftop = isluafunc(fn) ? (frame+funcproto(fn)->framesize) : J->L->top;
  ------------------
  |  |  480|   150k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|   150k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   150k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   150k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 150k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   150k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  116|   151k|#if LJ_FR2
  117|   151k|  uint64_t pcbase = (u64ptr(J->pc) << 8) | (J->baseslot - 2);
  ------------------
  |  |   98|   151k|#define u64ptr(p)	((uint64_t)(intptr_t)(void *)(p))
  ------------------
  118|   151k|  lj_assertJ(2 <= J->baseslot && J->baseslot <= 257, "bad baseslot");
  ------------------
  |  |  527|   151k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   151k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   302k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 151k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 151k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   151k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  119|   151k|  memcpy(map, &pcbase, sizeof(uint64_t));
  120|       |#else
  121|       |  MSize f = 0;
  122|       |  map[f++] = SNAP_MKPC(J->pc);  /* The current PC is always the first entry. */
  123|       |#endif
  124|   151k|  lj_assertJ(!J->pt ||
  ------------------
  |  |  527|   151k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   151k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   601k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 150k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 150k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 819, False: 150k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   151k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  125|   151k|	     (J->pc >= proto_bc(J->pt) &&
  126|   151k|	      J->pc < proto_bc(J->pt) + J->pt->sizebc), "bad snapshot PC");
  127|   218k|  while (frame > lim) {  /* Backwards traversal of all frames above base. */
  ------------------
  |  Branch (127:10): [True: 67.2k, False: 151k]
  ------------------
  128|  67.2k|    if (frame_islua(frame)) {
  ------------------
  |  |   77|  67.2k|#define frame_islua(f)		(frame_type(f) == FRAME_LUA)
  |  |  ------------------
  |  |  |  |   75|  67.2k|#define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  67.2k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_type(f)		(frame_ftsz(f) & FRAME_TYPE)
  |  |  |  |  ------------------
  |  |  |  |  |  |   28|  67.2k|#define FRAME_TYPE		3
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (77:25): [True: 66.1k, False: 1.00k]
  |  |  ------------------
  ------------------
  129|       |#if !LJ_FR2
  130|       |      map[f++] = SNAP_MKPC(frame_pc(frame));
  131|       |#endif
  132|  66.1k|      frame = frame_prevl(frame);
  ------------------
  |  |  108|  66.1k|#define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |  569|  66.1k|#define LJ_FR2			1
  |  |  ------------------
  |  |               #define frame_prevl(f)		((f) - (1+LJ_FR2+bc_a(frame_pc(f)[-1])))
  |  |  ------------------
  |  |  |  |   35|  66.1k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  |  |  ------------------
  ------------------
  133|  66.1k|    } else if (frame_iscont(frame)) {
  ------------------
  |  |   79|  1.00k|#define frame_iscont(f)		(frame_typep(f) == FRAME_CONT)
  |  |  ------------------
  |  |  |  |   76|  1.00k|#define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.00k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_typep(f)		(frame_ftsz(f) & FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  1.00k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  1.00k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.00k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (79:26): [True: 1.00k, False: 6]
  |  |  ------------------
  ------------------
  134|       |#if !LJ_FR2
  135|       |      map[f++] = SNAP_MKFTSZ(frame_ftsz(frame));
  136|       |      map[f++] = SNAP_MKPC(frame_contpc(frame));
  137|       |#endif
  138|  1.00k|      frame = frame_prevd(frame);
  ------------------
  |  |  109|  1.00k|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|  1.00k|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|  1.00k|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|  1.00k|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|  1.00k|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|  1.00k|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  139|  1.00k|    } else {
  140|      6|      lj_assertJ(!frame_isc(frame), "broken frame chain");
  ------------------
  |  |  527|      6|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      6|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      6|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 6, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      6|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  141|       |#if !LJ_FR2
  142|       |      map[f++] = SNAP_MKFTSZ(frame_ftsz(frame));
  143|       |#endif
  144|      6|      frame = frame_prevd(frame);
  ------------------
  |  |  109|      6|#define frame_prevd(f)		((TValue *)((char *)(f) - frame_sized(f)))
  |  |  ------------------
  |  |  |  |   85|      6|#define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   47|      6|#define frame_ftsz(f)		((ptrdiff_t)(f)->ftsz)
  |  |  |  |  ------------------
  |  |  |  |               #define frame_sized(f)		(frame_ftsz(f) & ~FRAME_TYPEP)
  |  |  |  |  ------------------
  |  |  |  |  |  |   30|      6|#define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   28|      6|#define FRAME_TYPE		3
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define FRAME_TYPEP		(FRAME_TYPE|FRAME_P)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   29|      6|#define FRAME_P			4
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  145|      6|      continue;
  146|      6|    }
  147|  67.1k|    if (frame + funcproto(frame_func(frame))->framesize > ftop)
  ------------------
  |  |  480|  67.1k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|  67.1k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  67.1k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  67.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 67.1k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  67.1k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (147:9): [True: 450, False: 66.7k]
  ------------------
  148|    450|      ftop = frame + funcproto(frame_func(frame))->framesize;
  ------------------
  |  |  480|    450|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|    450|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    450|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    450|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 450, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    450|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  149|  67.1k|  }
  150|   151k|  *topslot = (uint8_t)(ftop - lim);
  151|   151k|#if LJ_FR2
  152|   151k|  lj_assertJ(sizeof(SnapEntry) * 2 == sizeof(uint64_t), "bad SnapEntry def");
  ------------------
  |  |  527|   151k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   151k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   151k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   151k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  153|   151k|  return 2;
  154|       |#else
  155|       |  lj_assertJ(f == (MSize)(1 + J->framedepth), "miscalculated snapshot size");
  156|       |  return f;
  157|       |#endif
  158|   151k|}
lj_snap.c:snap_usedef:
  210|  70.2k|{
  211|  70.2k|  BCReg s;
  212|  70.2k|  GCobj *o;
  213|       |
  214|  70.2k|  if (maxslot == 0) return 0;
  ------------------
  |  Branch (214:7): [True: 969, False: 69.2k]
  ------------------
  215|       |#ifdef LUAJIT_USE_VALGRIND
  216|       |  /* Avoid errors for harmless reads beyond maxslot. */
  217|       |  memset(udf, 1, SNAP_USEDEF_SLOTS);
  218|       |#else
  219|  69.2k|  memset(udf, 1, maxslot);
  220|  69.2k|#endif
  221|       |
  222|       |  /* Treat open upvalues as used. */
  223|  69.2k|  o = gcref(J->L->openupval);
  ------------------
  |  |   67|  69.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  224|  81.4k|  while (o) {
  ------------------
  |  Branch (224:10): [True: 71.3k, False: 10.0k]
  ------------------
  225|   142k|    if (uvval(gco2uv(o)) < J->L->base) break;
  ------------------
  |  |  449|  71.3k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|   142k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 71.3k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (225:9): [True: 59.1k, False: 12.2k]
  ------------------
  226|  12.2k|    udf[uvval(gco2uv(o)) - J->L->base] = 0;
  ------------------
  |  |  449|  12.2k|#define uvval(uv_)	(mref((uv_)->v, TValue))
  |  |  ------------------
  |  |  |  |   36|  24.4k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 12.2k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  227|  12.2k|    o = gcref(o->gch.nextgc);
  ------------------
  |  |   67|  12.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  228|  12.2k|  }
  229|       |
  230|  69.2k|#define USE_SLOT(s)		udf[(s)] &= ~1
  231|  69.2k|#define DEF_SLOT(s)		udf[(s)] *= 3
  232|       |
  233|       |  /* Scan through following bytecode and check for uses/defs. */
  234|  69.2k|  lj_assertJ(pc >= proto_bc(J->pt) && pc < proto_bc(J->pt) + J->pt->sizebc,
  ------------------
  |  |  527|  69.2k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  69.2k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   138k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 69.2k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 69.2k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  69.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|  69.2k|	     "snapshot PC out of range");
  236|   255k|  for (;;) {
  237|   255k|    BCIns ins = *pc++;
  238|   255k|    BCOp op = bc_op(ins);
  ------------------
  |  |   34|   255k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  239|   255k|    switch (bcmode_b(op)) {
  ------------------
  |  |  247|   255k|#define bcmode_b(op)	((BCMode)((lj_bc_mode[op]>>3) & 15))
  ------------------
  240|  47.7k|    case BCMvar: USE_SLOT(bc_b(ins)); break;
  ------------------
  |  |  230|  47.7k|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (240:5): [True: 47.7k, False: 207k]
  ------------------
  241|   207k|    default: break;
  ------------------
  |  Branch (241:5): [True: 207k, False: 47.7k]
  ------------------
  242|   255k|    }
  243|   255k|    switch (bcmode_c(op)) {
  ------------------
  |  |  248|   255k|#define bcmode_c(op)	((BCMode)((lj_bc_mode[op]>>7) & 15))
  ------------------
  244|  32.0k|    case BCMvar: USE_SLOT(bc_c(ins)); break;
  ------------------
  |  |  230|  32.0k|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (244:5): [True: 32.0k, False: 223k]
  ------------------
  245|    592|    case BCMrbase:
  ------------------
  |  Branch (245:5): [True: 592, False: 254k]
  ------------------
  246|    592|      lj_assertJ(op == BC_CAT, "unhandled op %d with RC rbase", op);
  ------------------
  |  |  527|    592|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    592|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    592|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 592, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    592|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  247|  2.00k|      for (s = bc_b(ins); s <= bc_c(ins); s++) USE_SLOT(s);
  ------------------
  |  |   36|    592|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
                    for (s = bc_b(ins); s <= bc_c(ins); s++) USE_SLOT(s);
  ------------------
  |  |   37|  2.00k|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
                    for (s = bc_b(ins); s <= bc_c(ins); s++) USE_SLOT(s);
  ------------------
  |  |  230|  2.00k|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (247:27): [True: 1.40k, False: 592]
  ------------------
  248|    592|      for (; s < maxslot; s++) DEF_SLOT(s);
  ------------------
  |  |  231|    592|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (248:14): [True: 0, False: 592]
  ------------------
  249|    592|      break;
  250|  17.2k|    case BCMjump:
  ------------------
  |  Branch (250:5): [True: 17.2k, False: 238k]
  ------------------
  251|  21.3k|    handle_jump: {
  252|  21.3k|      BCReg minslot = bc_a(ins);
  ------------------
  |  |   35|  21.3k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  253|  21.3k|      if (op >= BC_FORI && op <= BC_JFORL) minslot += FORL_EXT;
  ------------------
  |  Branch (253:11): [True: 21.2k, False: 36]
  |  Branch (253:28): [True: 8.65k, False: 12.6k]
  ------------------
  254|  12.6k|      else if (op >= BC_ITERL && op <= BC_JITERL) minslot += bc_b(pc[-2])-1;
  ------------------
  |  |   36|    551|#define bc_b(i)		((BCReg)((i)>>24))
  ------------------
  |  Branch (254:16): [True: 12.6k, False: 36]
  |  Branch (254:34): [True: 551, False: 12.0k]
  ------------------
  255|  12.1k|      else if (op == BC_UCLO) {
  ------------------
  |  Branch (255:16): [True: 36, False: 12.0k]
  ------------------
  256|     36|	ptrdiff_t delta = bc_j(ins);
  ------------------
  |  |   39|     36|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|     36|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|     36|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  257|     36|	if (delta < 0) return maxslot;  /* Prevent loop. */
  ------------------
  |  Branch (257:6): [True: 0, False: 36]
  ------------------
  258|     36|	pc += delta;
  259|     36|	break;
  260|     36|      }
  261|  35.8k|      for (s = minslot; s < maxslot; s++) DEF_SLOT(s);
  ------------------
  |  |  231|  35.8k|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (261:25): [True: 14.5k, False: 21.2k]
  ------------------
  262|  21.2k|      return minslot < maxslot ? minslot : maxslot;
  ------------------
  |  Branch (262:14): [True: 9.24k, False: 12.0k]
  ------------------
  263|  21.3k|      }
  264|  94.7k|    case BCMlit:
  ------------------
  |  Branch (264:5): [True: 94.7k, False: 160k]
  ------------------
  265|  94.7k|      if (op == BC_JFORL || op == BC_JITERL || op == BC_JLOOP) {
  ------------------
  |  Branch (265:11): [True: 4.06k, False: 90.6k]
  |  Branch (265:29): [True: 0, False: 90.6k]
  |  Branch (265:48): [True: 0, False: 90.6k]
  ------------------
  266|  4.06k|	goto handle_jump;
  267|  90.6k|      } else if (bc_isret(op)) {
  ------------------
  |  Branch (267:18): [True: 47.7k, False: 42.9k]
  ------------------
  268|  47.7k|	BCReg top = op == BC_RETM ? maxslot : (bc_a(ins) + bc_d(ins)-1);
  ------------------
  |  |   35|  47.7k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	BCReg top = op == BC_RETM ? maxslot : (bc_a(ins) + bc_d(ins)-1);
  ------------------
  |  |   38|  47.7k|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  |  Branch (268:14): [True: 0, False: 47.7k]
  ------------------
  269|  84.4k|	for (s = 0; s < bc_a(ins); s++) DEF_SLOT(s);
  ------------------
  |  |   35|  84.4k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	for (s = 0; s < bc_a(ins); s++) DEF_SLOT(s);
  ------------------
  |  |  231|  36.7k|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (269:14): [True: 36.7k, False: 47.7k]
  ------------------
  270|  84.3k|	for (; s < top; s++) USE_SLOT(s);
  ------------------
  |  |  230|  36.6k|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (270:9): [True: 36.6k, False: 47.7k]
  ------------------
  271|   105k|	for (; s < maxslot; s++) DEF_SLOT(s);
  ------------------
  |  |  231|  57.8k|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (271:9): [True: 57.8k, False: 47.7k]
  ------------------
  272|  47.7k|	return 0;
  273|  47.7k|      }
  274|  42.9k|      break;
  275|  42.9k|    case BCMfunc: return maxslot;  /* NYI: will abort, anyway. */
  ------------------
  |  Branch (275:5): [True: 0, False: 255k]
  ------------------
  276|   110k|    default: break;
  ------------------
  |  Branch (276:5): [True: 110k, False: 144k]
  ------------------
  277|   255k|    }
  278|   186k|    switch (bcmode_a(op)) {
  ------------------
  |  |  246|   186k|#define bcmode_a(op)	((BCMode)(lj_bc_mode[op] & 7))
  ------------------
  279|  12.5k|    case BCMvar: USE_SLOT(bc_a(ins)); break;
  ------------------
  |  |  230|  12.5k|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (279:5): [True: 12.5k, False: 173k]
  ------------------
  280|   131k|    case BCMdst:
  ------------------
  |  Branch (280:5): [True: 131k, False: 55.3k]
  ------------------
  281|   131k|       if (!(op == BC_ISTC || op == BC_ISFC)) DEF_SLOT(bc_a(ins));
  ------------------
  |  |  231|   131k|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (281:14): [True: 0, False: 131k]
  |  Branch (281:31): [True: 0, False: 131k]
  ------------------
  282|   131k|       break;
  283|  42.7k|    case BCMbase:
  ------------------
  |  Branch (283:5): [True: 42.7k, False: 143k]
  ------------------
  284|  42.7k|      if (op >= BC_CALLM && op <= BC_ITERN) {
  ------------------
  |  Branch (284:11): [True: 42.7k, False: 3]
  |  Branch (284:29): [True: 42.7k, False: 0]
  ------------------
  285|  42.7k|	BCReg top = (op == BC_CALLM || op == BC_CALLMT || bc_c(ins) == 0) ?
  ------------------
  |  |   37|  42.7k|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
  |  Branch (285:15): [True: 2, False: 42.7k]
  |  Branch (285:33): [True: 0, False: 42.7k]
  |  Branch (285:52): [True: 0, False: 42.7k]
  ------------------
  286|  42.7k|		    maxslot : (bc_a(ins) + bc_c(ins)+LJ_FR2);
  ------------------
  |  |   35|  42.7k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              		    maxslot : (bc_a(ins) + bc_c(ins)+LJ_FR2);
  ------------------
  |  |   37|  42.7k|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
              		    maxslot : (bc_a(ins) + bc_c(ins)+LJ_FR2);
  ------------------
  |  |  569|  42.7k|#define LJ_FR2			1
  ------------------
  287|  42.7k|	if (LJ_FR2) DEF_SLOT(bc_a(ins)+1);
  ------------------
  |  |  569|  42.7k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
              	if (LJ_FR2) DEF_SLOT(bc_a(ins)+1);
  ------------------
  |  |  231|  42.7k|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  288|  42.7k|	s = bc_a(ins) - ((op == BC_ITERC || op == BC_ITERN) ? 3 : 0);
  ------------------
  |  |   35|  42.7k|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  |  Branch (288:20): [True: 0, False: 42.7k]
  |  Branch (288:38): [True: 551, False: 42.2k]
  ------------------
  289|   177k|	for (; s < top; s++) USE_SLOT(s);
  ------------------
  |  |  230|   134k|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (289:9): [True: 134k, False: 42.7k]
  ------------------
  290|  42.7k|	for (; s < maxslot; s++) DEF_SLOT(s);
  ------------------
  |  |  231|      0|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (290:9): [True: 0, False: 42.7k]
  ------------------
  291|  42.7k|	if (op == BC_CALLT || op == BC_CALLMT) {
  ------------------
  |  Branch (291:6): [True: 242, False: 42.5k]
  |  Branch (291:24): [True: 0, False: 42.5k]
  ------------------
  292|    549|	  for (s = 0; s < bc_a(ins); s++) DEF_SLOT(s);
  ------------------
  |  |   35|    549|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	  for (s = 0; s < bc_a(ins); s++) DEF_SLOT(s);
  ------------------
  |  |  231|    307|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (292:16): [True: 307, False: 242]
  ------------------
  293|    242|	  return 0;
  294|    242|	}
  295|  42.7k|      } else if (op == BC_VARG) {
  ------------------
  |  Branch (295:18): [True: 0, False: 3]
  ------------------
  296|      0|	return maxslot;  /* NYI: punt. */
  297|      3|      } else if (op == BC_KNIL) {
  ------------------
  |  Branch (297:18): [True: 3, False: 0]
  ------------------
  298|     69|	for (s = bc_a(ins); s <= bc_d(ins); s++) DEF_SLOT(s);
  ------------------
  |  |   35|      3|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	for (s = bc_a(ins); s <= bc_d(ins); s++) DEF_SLOT(s);
  ------------------
  |  |   38|     69|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
              	for (s = bc_a(ins); s <= bc_d(ins); s++) DEF_SLOT(s);
  ------------------
  |  |  231|     66|#define DEF_SLOT(s)		udf[(s)] *= 3
  ------------------
  |  Branch (298:22): [True: 66, False: 3]
  ------------------
  299|      3|      } else if (op == BC_TSETM) {
  ------------------
  |  Branch (299:18): [True: 0, False: 0]
  ------------------
  300|      0|	for (s = bc_a(ins)-1; s < maxslot; s++) USE_SLOT(s);
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
              	for (s = bc_a(ins)-1; s < maxslot; s++) USE_SLOT(s);
  ------------------
  |  |  230|      0|#define USE_SLOT(s)		udf[(s)] &= ~1
  ------------------
  |  Branch (300:24): [True: 0, False: 0]
  ------------------
  301|      0|      }
  302|  42.5k|      break;
  303|  42.5k|    default: break;
  ------------------
  |  Branch (303:5): [True: 41, False: 186k]
  ------------------
  304|   186k|    }
  305|   186k|    lj_assertJ(pc >= proto_bc(J->pt) && pc < proto_bc(J->pt) + J->pt->sizebc,
  ------------------
  |  |  527|   186k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   186k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   372k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 186k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 186k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   186k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|   186k|	       "use/def analysis PC out of range");
  307|   186k|  }
  308|       |
  309|      0|#undef USE_SLOT
  310|      0|#undef DEF_SLOT
  311|       |
  312|      0|  return 0;  /* unreachable */
  313|  69.2k|}
lj_snap.c:snap_useuv:
  317|  57.1k|{
  318|       |  /* This is a coarse check, because it's difficult to correlate the lifetime
  319|       |  ** of slots and closures. But the number of false positives is quite low.
  320|       |  ** A false positive may cause a slot not to be purged, which is just
  321|       |  ** a missed optimization.
  322|       |  */
  323|  57.1k|  if ((pt->flags & PROTO_CHILD)) {
  ------------------
  |  |  399|  57.1k|#define PROTO_CHILD		0x01	/* Has child prototypes. */
  ------------------
  |  Branch (323:7): [True: 5.72k, False: 51.4k]
  ------------------
  324|  5.72k|    ptrdiff_t i, j, n = pt->sizekgc;
  325|  5.72k|    GCRef *kr = mref(pt->k, GCRef) - 1;
  ------------------
  |  |   36|  5.72k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  326|   902k|    for (i = 0; i < n; i++, kr--) {
  ------------------
  |  Branch (326:17): [True: 896k, False: 5.72k]
  ------------------
  327|   896k|      GCobj *o = gcref(*kr);
  ------------------
  |  |   67|   896k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  328|   896k|      if (o->gch.gct == ~LJ_TPROTO) {
  ------------------
  |  |  267|   896k|#define LJ_TPROTO		(~7u)
  ------------------
  |  Branch (328:11): [True: 8.85k, False: 887k]
  ------------------
  329|  22.3k|	for (j = 0; j < gco2pt(o)->sizeuv; j++) {
  ------------------
  |  |  768|  22.3k|#define gco2pt(o)	check_exp((o)->gch.gct == ~LJ_TPROTO, &(o)->pt)
  |  |  ------------------
  |  |  |  |  367|  22.3k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  22.3k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  22.3k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 22.3k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  22.3k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (329:14): [True: 13.5k, False: 8.85k]
  ------------------
  330|  13.5k|	  uint32_t v = proto_uv(gco2pt(o))[j];
  ------------------
  |  |  422|  13.5k|#define proto_uv(pt)		(mref((pt)->uv, uint16_t))
  |  |  ------------------
  |  |  |  |   36|  27.0k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (36:35): [True: 13.5k, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  331|  13.5k|	  if ((v & PROTO_UV_LOCAL)) {
  ------------------
  |  |  412|  13.5k|#define PROTO_UV_LOCAL		0x8000	/* Upvalue for local slot. */
  ------------------
  |  Branch (331:8): [True: 13.5k, False: 0]
  ------------------
  332|  13.5k|	    udf[(v & 0xff)] = 0;
  333|  13.5k|	  }
  334|  13.5k|	}
  335|  8.85k|      }
  336|   896k|    }
  337|  5.72k|  }
  338|  57.1k|}
lj_snap.c:snap_renamefilter:
  388|   382k|{
  389|   382k|  BloomFilter rfilt = 0;
  390|   382k|  IRIns *ir;
  391|   390k|  for (ir = &T->ir[T->nins-1]; ir->o == IR_RENAME; ir--)
  ------------------
  |  Branch (391:32): [True: 8.11k, False: 382k]
  ------------------
  392|  8.11k|    if (ir->op2 <= lim)
  ------------------
  |  Branch (392:9): [True: 6.73k, False: 1.38k]
  ------------------
  393|  6.73k|      bloomset(rfilt, ir->op1);
  ------------------
  |  |  120|  6.73k|#define bloomset(b, x)	((b) |= bloombit((x)))
  |  |  ------------------
  |  |  |  |  119|  6.73k|#define bloombit(x)	((uintptr_t)1 << ((x) & BLOOM_MASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  118|  6.73k|#define BLOOM_MASK	(8*sizeof(BloomFilter) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  394|   382k|  return rfilt;
  395|   382k|}
lj_snap.c:snap_renameref:
  399|  3.47k|{
  400|  3.47k|  IRIns *ir;
  401|  7.62k|  for (ir = &T->ir[T->nins-1]; ir->o == IR_RENAME; ir--)
  ------------------
  |  Branch (401:32): [True: 4.15k, False: 3.47k]
  ------------------
  402|  4.15k|    if (ir->op1 == ref && ir->op2 <= lim)
  ------------------
  |  Branch (402:9): [True: 3.47k, False: 688]
  |  Branch (402:27): [True: 3.47k, False: 0]
  ------------------
  403|  3.47k|      rs = ir->prev;
  404|  3.47k|  return rs;
  405|  3.47k|}
lj_snap.c:snap_dedup:
  463|    982|{
  464|    982|  MSize j;
  465|  1.36k|  for (j = 0; j < nmax; j++)
  ------------------
  |  Branch (465:15): [True: 1.36k, False: 0]
  ------------------
  466|  1.36k|    if (snap_ref(map[j]) == ref)
  ------------------
  |  |  220|  1.36k|#define snap_ref(sn)		((sn) & 0xffff)
  ------------------
  |  Branch (466:9): [True: 982, False: 384]
  ------------------
  467|    982|      return J->slot[snap_slot(map[j])] & ~(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME);
  ------------------
  |  |  221|    982|#define snap_slot(sn)		((BCReg)((sn) >> 24))
  ------------------
                    return J->slot[snap_slot(map[j])] & ~(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME);
  ------------------
  |  |  207|    982|#define SNAP_KEYINDEX		0x100000	/* Traversal key index. */
  ------------------
                    return J->slot[snap_slot(map[j])] & ~(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME);
  ------------------
  |  |  204|    982|#define SNAP_CONT		0x020000	/* Continuation slot. */
  ------------------
                    return J->slot[snap_slot(map[j])] & ~(SNAP_KEYINDEX|SNAP_CONT|SNAP_FRAME);
  ------------------
  |  |  203|    982|#define SNAP_FRAME		0x010000	/* Frame slot. */
  ------------------
  468|      0|  return 0;
  469|    982|}
lj_snap.c:snap_replay_const:
  447|  3.51k|{
  448|       |  /* Only have to deal with constants that can occur in stack slots. */
  449|  3.51k|  switch ((IROp)ir->o) {
  450|      0|  case IR_KPRI: return TREF_PRI(irt_type(ir->t));
  ------------------
  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  ------------------
  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  ------------------
  ------------------
  |  Branch (450:3): [True: 0, False: 3.51k]
  ------------------
  451|    318|  case IR_KINT: return lj_ir_kint(J, ir->i);
  ------------------
  |  Branch (451:3): [True: 318, False: 3.19k]
  ------------------
  452|  2.61k|  case IR_KGC: return lj_ir_kgc(J, ir_kgc(ir), irt_t(ir->t));
  ------------------
  |  |  587|  2.61k|#define ir_kgc(ir)	check_exp((ir)->o == IR_KGC, gcref((ir)[LJ_GC64].gcr))
  |  |  ------------------
  |  |  |  |  367|  2.61k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  2.61k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.61k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 2.61k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  2.61k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                case IR_KGC: return lj_ir_kgc(J, ir_kgc(ir), irt_t(ir->t));
  ------------------
  |  |  364|  2.61k|#define irt_t(t)		((IRType)(t).irt)
  ------------------
  |  Branch (452:3): [True: 2.61k, False: 897]
  ------------------
  453|    579|  case IR_KNUM: case IR_KINT64:
  ------------------
  |  Branch (453:3): [True: 579, False: 2.93k]
  |  Branch (453:17): [True: 0, False: 3.51k]
  ------------------
  454|    579|    return lj_ir_k64(J, (IROp)ir->o, ir_k64(ir)->u64);
  ------------------
  |  |  594|    579|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|    579|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    579|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.15k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 579, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    579|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|      0|  case IR_KPTR: return lj_ir_kptr(J, ir_kptr(ir));  /* Continuation. */
  ------------------
  |  |   75|      0|#define lj_ir_kptr(J, ptr)	lj_ir_kptr_(J, IR_KPTR, (ptr))
  |  |  ------------------
  |  |  |  Branch (75:53): [True: 0, False: 0]
  |  |  |  Branch (75:53): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (455:3): [True: 0, False: 3.51k]
  ------------------
  456|      0|  case IR_KNULL: return lj_ir_knull(J, irt_type(ir->t));
  ------------------
  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  ------------------
  |  Branch (456:3): [True: 0, False: 3.51k]
  ------------------
  457|      0|  default: lj_assertJ(0, "bad IR constant op %d", ir->o); return TREF_NIL;
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                default: lj_assertJ(0, "bad IR constant op %d", ir->o); return TREF_NIL;
  ------------------
  |  |  535|      0|#define TREF_NIL		(TREF_PRI(IRT_NIL))
  |  |  ------------------
  |  |  |  |  534|      0|#define TREF_PRI(t)		(TREF(REF_NIL-(t), (t)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  502|      0|#define TREF(ref, t)		((TRef)((ref) + ((t)<<24)))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (457:3): [True: 0, False: 3.51k]
  ------------------
  458|  3.51k|  }
  459|  3.51k|}
lj_snap.c:snap_sunk_store:
  501|     14|{
  502|     14|  if (irs->s != 255)
  ------------------
  |  Branch (502:7): [True: 14, False: 0]
  ------------------
  503|     14|    return (ira + irs->s == irs);  /* Fast check. */
  504|      0|  return snap_sunk_store2(T, ira, irs);
  505|     14|}
lj_snap.c:snap_unsink:
  843|      7|{
  844|      7|  lj_assertJ(ir->o == IR_TNEW || ir->o == IR_TDUP ||
  ------------------
  |  |  527|      7|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      7|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     21|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 7, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      7|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  845|      7|	     ir->o == IR_CNEW || ir->o == IR_CNEWI,
  846|      7|	     "sunk allocation with bad op %d", ir->o);
  847|      7|#if LJ_HASFFI
  848|      7|  if (ir->o == IR_CNEW || ir->o == IR_CNEWI) {
  ------------------
  |  Branch (848:7): [True: 0, False: 7]
  |  Branch (848:27): [True: 0, False: 7]
  ------------------
  849|      0|    CTState *cts = ctype_cts(J->L);
  850|      0|    CTypeID id = (CTypeID)T->ir[ir->op1].i;
  851|      0|    CTSize sz;
  852|      0|    CTInfo info = lj_ctype_info(cts, id, &sz);
  853|      0|    GCcdata *cd = lj_cdata_newx(cts, id, sz, info);
  854|      0|    setcdataV(J->L, o, cd);
  855|      0|    if (ir->o == IR_CNEWI) {
  ------------------
  |  Branch (855:9): [True: 0, False: 0]
  ------------------
  856|      0|      uint8_t *p = (uint8_t *)cdataptr(cd);
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  857|      0|      lj_assertJ(sz == 4 || sz == 8, "sunk cdata with bad size %d", sz);
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  858|      0|      if (LJ_32 && sz == 8 && ir+1 < T->ir + T->nins && (ir+1)->o == IR_HIOP) {
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (858:20): [True: 0, False: 0]
  |  Branch (858:31): [True: 0, False: 0]
  |  Branch (858:57): [True: 0, False: 0]
  ------------------
  859|      0|	snap_restoredata(J, T, ex, snapno, rfilt, (ir+1)->op2,
  860|      0|			 LJ_LE ? p+4 : p, 4);
  ------------------
  |  |  629|      0|#define LJ_LE			1
  |  |  ------------------
  |  |  |  Branch (629:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  861|      0|	if (LJ_BE) p += 4;
  ------------------
  |  |  630|      0|#define LJ_BE			0
  |  |  ------------------
  |  |  |  Branch (630:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  862|      0|	sz = 4;
  863|      0|      }
  864|      0|      snap_restoredata(J, T, ex, snapno, rfilt, ir->op2, p, sz);
  865|      0|    } else {
  866|      0|      IRIns *irs, *irlast = &T->ir[T->snap[snapno].ref];
  867|      0|      for (irs = ir+1; irs < irlast; irs++)
  ------------------
  |  Branch (867:24): [True: 0, False: 0]
  ------------------
  868|      0|	if (irs->r == RID_SINK && snap_sunk_store(T, ir, irs)) {
  ------------------
  |  |   24|      0|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|      0|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|      0|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|      0|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (868:6): [True: 0, False: 0]
  |  Branch (868:28): [True: 0, False: 0]
  ------------------
  869|      0|	  IRIns *iro = &T->ir[T->ir[irs->op1].op2];
  870|      0|	  uint8_t *p = (uint8_t *)cd;
  871|      0|	  CTSize szs;
  872|      0|	  lj_assertJ(irs->o == IR_XSTORE, "sunk store with bad op %d", irs->o);
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  873|      0|	  lj_assertJ(T->ir[irs->op1].o == IR_ADD,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  874|      0|		     "sunk store with bad add op %d", T->ir[irs->op1].o);
  875|      0|	  lj_assertJ(iro->o == IR_KINT || iro->o == IR_KINT64,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  876|      0|		     "sunk store with bad const offset op %d", iro->o);
  877|      0|	  if (irt_is64(irs->t)) szs = 8;
  ------------------
  |  |  409|      0|#define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  397|      0|  ((1u<<IRT_NUM)|(1u<<IRT_I64)|(1u<<IRT_U64)|(1u<<IRT_P64)|\
  |  |  |  |  398|      0|   (1u<<IRT_LIGHTUD)|(1u<<IRT_STR)|(1u<<IRT_THREAD)|(1u<<IRT_PROTO)|\
  |  |  |  |  399|      0|   (1u<<IRT_FUNC)|(1u<<IRT_CDATA)|(1u<<IRT_TAB)|(1u<<IRT_UDATA)|\
  |  |  |  |  400|      0|   (1u<<IRT_NIL))
  |  |  ------------------
  |  |               #define irt_is64(t)		((IRT_IS64 >> irt_type(t)) & 1)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (409:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  878|      0|	  else if (irt_isi8(irs->t) || irt_isu8(irs->t)) szs = 1;
  ------------------
  |  |  379|      0|#define irt_isi8(t)		(irt_type(t) == IRT_I8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (379:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  else if (irt_isi8(irs->t) || irt_isu8(irs->t)) szs = 1;
  ------------------
  |  |  380|      0|#define irt_isu8(t)		(irt_type(t) == IRT_U8)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (380:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  879|      0|	  else if (irt_isi16(irs->t) || irt_isu16(irs->t)) szs = 2;
  ------------------
  |  |  381|      0|#define irt_isi16(t)		(irt_type(t) == IRT_I16)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (381:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	  else if (irt_isi16(irs->t) || irt_isu16(irs->t)) szs = 2;
  ------------------
  |  |  382|      0|#define irt_isu16(t)		(irt_type(t) == IRT_U16)
  |  |  ------------------
  |  |  |  |  365|      0|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (382:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  880|      0|	  else szs = 4;
  881|      0|	  if (LJ_64 && iro->o == IR_KINT64)
  ------------------
  |  |  640|      0|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (881:17): [True: 0, False: 0]
  ------------------
  882|      0|	    p += (int64_t)ir_k64(iro)->u64;
  ------------------
  |  |  594|      0|#define ir_k64(ir)	check_exp(ir_isk64(ir), &(ir)[1].tv)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  883|      0|	  else
  884|      0|	    p += iro->i;
  885|      0|	  lj_assertJ(p >= (uint8_t *)cdataptr(cd) &&
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  886|      0|		     p + szs <= (uint8_t *)cdataptr(cd) + sz,
  887|      0|		     "sunk store with offset out of range");
  888|      0|	  if (LJ_32 && irs+1 < T->ir + T->nins && (irs+1)->o == IR_HIOP) {
  ------------------
  |  |  639|      0|#define LJ_32			0
  |  |  ------------------
  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  |  Branch (888:17): [True: 0, False: 0]
  |  Branch (888:44): [True: 0, False: 0]
  ------------------
  889|      0|	    lj_assertJ(szs == 4, "sunk store with bad size %d", szs);
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  890|      0|	    snap_restoredata(J, T, ex, snapno, rfilt, (irs+1)->op2,
  891|      0|			     LJ_LE ? p+4 : p, 4);
  ------------------
  |  |  629|      0|#define LJ_LE			1
  |  |  ------------------
  |  |  |  Branch (629:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  892|      0|	    if (LJ_BE) p += 4;
  ------------------
  |  |  630|      0|#define LJ_BE			0
  |  |  ------------------
  |  |  |  Branch (630:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  893|      0|	  }
  894|      0|	  snap_restoredata(J, T, ex, snapno, rfilt, irs->op2, p, szs);
  895|      0|	}
  896|      0|    }
  897|      0|  } else
  898|      7|#endif
  899|      7|  {
  900|      7|    IRIns *irs, *irlast;
  901|      7|    GCtab *t = ir->o == IR_TNEW ? lj_tab_new(J->L, ir->op1, ir->op2) :
  ------------------
  |  Branch (901:16): [True: 7, False: 0]
  ------------------
  902|      7|				  lj_tab_dup(J->L, ir_ktab(&T->ir[ir->op1]));
  ------------------
  |  |  589|      0|#define ir_ktab(ir)	(gco2tab(ir_kgc((ir))))
  |  |  ------------------
  |  |  |  |  771|      0|#define gco2tab(o)	check_exp((o)->gch.gct == ~LJ_TTAB, &(o)->tab)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  903|      7|    settabV(J->L, o, t);
  904|      7|    irlast = &T->ir[T->snap[snapno].ref];
  905|     63|    for (irs = ir+1; irs < irlast; irs++)
  ------------------
  |  Branch (905:22): [True: 56, False: 7]
  ------------------
  906|     56|      if (irs->r == RID_SINK && snap_sunk_store(T, ir, irs)) {
  ------------------
  |  |   24|    112|#define RID_SINK		(RID_INIT-1)
  |  |  ------------------
  |  |  |  |   23|     56|#define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   21|     56|#define RID_NONE		0x80
  |  |  |  |  ------------------
  |  |  |  |               #define RID_INIT		(RID_NONE|RID_MASK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   22|     56|#define RID_MASK		0x7f
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (906:11): [True: 14, False: 42]
  |  Branch (906:33): [True: 14, False: 0]
  ------------------
  907|     14|	IRIns *irk = &T->ir[irs->op1];
  908|     14|	TValue tmp, *val;
  909|     14|	lj_assertJ(irs->o == IR_ASTORE || irs->o == IR_HSTORE ||
  ------------------
  |  |  527|     14|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     14|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|     28|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 14, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     14|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  910|     14|		   irs->o == IR_FSTORE,
  911|     14|		   "sunk store with bad op %d", irs->o);
  912|     14|	if (irk->o == IR_FREF) {
  ------------------
  |  Branch (912:6): [True: 0, False: 14]
  ------------------
  913|      0|	  switch (irk->op2) {
  914|      0|	  case IRFL_TAB_META:
  ------------------
  |  Branch (914:4): [True: 0, False: 0]
  ------------------
  915|      0|	    if (T->ir[irs->op2].o == IR_KNULL) {
  ------------------
  |  Branch (915:10): [True: 0, False: 0]
  ------------------
  916|      0|	      setgcrefnull(t->metatable);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  917|      0|	    } else {
  918|      0|	      snap_restoreval(J, T, ex, snapno, rfilt, irs->op2, &tmp);
  919|       |	      /* NOBARRIER: The table is new (marked white). */
  920|      0|	      setgcref(t->metatable, obj2gco(tabV(&tmp)));
  ------------------
  |  |   72|      0|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  |  |  ------------------
  |  |  |  Branch (72:52): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  921|      0|	    }
  922|      0|	    break;
  923|      0|	  case IRFL_TAB_NOMM:
  ------------------
  |  Branch (923:4): [True: 0, False: 0]
  ------------------
  924|       |	    /* Negative metamethod cache invalidated by lj_tab_set() below. */
  925|      0|	    break;
  926|      0|	  default:
  ------------------
  |  Branch (926:4): [True: 0, False: 0]
  ------------------
  927|      0|	    lj_assertJ(0, "sunk store with bad field %d", irk->op2);
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  928|      0|	    break;
  929|      0|	  }
  930|     14|	} else {
  931|     14|	  irk = &T->ir[irk->op2];
  932|     14|	  if (irk->o == IR_KSLOT) irk = &T->ir[irk->op1];
  ------------------
  |  Branch (932:8): [True: 0, False: 14]
  ------------------
  933|     14|	  lj_ir_kvalue(J->L, &tmp, irk);
  934|     14|	  val = lj_tab_set(J->L, t, &tmp);
  935|       |	  /* NOBARRIER: The table is new (marked white). */
  936|     14|	  snap_restoreval(J, T, ex, snapno, rfilt, irs->op2, val);
  937|     14|	  if (LJ_SOFTFP32 && irs+1 < T->ir + T->nins && (irs+1)->o == IR_HIOP) {
  ------------------
  |  |  617|     28|#define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  616|     28|#define LJ_SOFTFP		(!LJ_ARCH_HASFPU)
  |  |  |  |  ------------------
  |  |  |  |  |  |  611|     14|#define LJ_ARCH_HASFPU		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (616:20): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_SOFTFP32		(LJ_SOFTFP && LJ_32)
  |  |  ------------------
  |  |  |  |  639|      0|#define LJ_32			0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (639:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (937:23): [True: 0, False: 0]
  |  Branch (937:50): [True: 0, False: 0]
  ------------------
  938|      0|	    snap_restoreval(J, T, ex, snapno, rfilt, (irs+1)->op2, &tmp);
  939|      0|	    val->u32.hi = tmp.u32.lo;
  940|      0|	  }
  941|     14|	}
  942|     14|      }
  943|      7|  }
  944|      7|}
lj_snap.c:snap_restoreval:
  701|   563k|{
  702|   563k|  IRIns *ir = &T->ir[ref];
  703|   563k|  IRType1 t = ir->t;
  704|   563k|  RegSP rs = ir->prev;
  705|   563k|  if (irref_isk(ref)) {  /* Restore constant slot. */
  ------------------
  |  |  485|   563k|#define irref_isk(ref)		((ref) < REF_BIAS)
  |  |  ------------------
  |  |  |  Branch (485:25): [True: 79.8k, False: 484k]
  |  |  ------------------
  ------------------
  706|  79.8k|    if (ir->o == IR_KPTR) {
  ------------------
  |  Branch (706:9): [True: 0, False: 79.8k]
  ------------------
  707|      0|      o->u64 = (uint64_t)(uintptr_t)ir_kptr(ir);
  ------------------
  |  |  596|      0|  check_exp((ir)->o == IR_KPTR || (ir)->o == IR_KKPTR, \
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  597|      0|    mref((ir)[LJ_GC64].ptr, void))
  ------------------
  708|  79.8k|    } else {
  709|  79.8k|      lj_assertJ(!(ir->o == IR_KKPTR || ir->o == IR_KNULL),
  ------------------
  |  |  527|  79.8k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  79.8k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   159k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 79.8k]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 79.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  79.8k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  710|  79.8k|		 "restore of const from IR %04d with bad op %d",
  711|  79.8k|		 ref - REF_BIAS, ir->o);
  712|  79.8k|      lj_ir_kvalue(J->L, o, ir);
  713|  79.8k|    }
  714|  79.8k|    return;
  715|  79.8k|  }
  716|   484k|  if (LJ_UNLIKELY(bloomtest(rfilt, ref)))
  ------------------
  |  |  146|   484k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 3.26k, False: 480k]
  |  |  ------------------
  ------------------
  717|  3.26k|    rs = snap_renameref(T, snapno, ref, rs);
  718|   484k|  if (ra_hasspill(regsp_spill(rs))) {  /* Restore from spill slot. */
  ------------------
  |  |   39|   484k|#define ra_hasspill(s)		((s) != SPS_NONE)
  |  |  ------------------
  |  |  |  |   37|   484k|#define SPS_NONE		0
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 3.61k, False: 480k]
  |  |  ------------------
  ------------------
  719|  3.61k|    int32_t *sps = &ex->spill[regsp_spill(rs)];
  ------------------
  |  |   49|  3.61k|#define regsp_spill(rs)		((rs) >> 8)
  ------------------
  720|  3.61k|    if (irt_isinteger(t)) {
  ------------------
  |  |  389|  3.61k|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|  3.61k|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 2.45k, False: 1.16k]
  |  |  ------------------
  ------------------
  721|  2.45k|      setintV(o, *sps);
  722|  2.45k|#if !LJ_SOFTFP32
  723|  2.45k|    } else if (irt_isnum(t)) {
  ------------------
  |  |  377|  1.16k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  1.16k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 507, False: 660]
  |  |  ------------------
  ------------------
  724|    507|      o->u64 = *(uint64_t *)sps;
  725|    507|#endif
  726|       |#if LJ_64 && !LJ_GC64
  727|       |    } else if (irt_islightud(t)) {
  728|       |      /* 64 bit lightuserdata which may escape already has the tag bits. */
  729|       |      o->u64 = *(uint64_t *)sps;
  730|       |#endif
  731|    660|    } else {
  732|    660|      lj_assertJ(!irt_ispri(t), "PRI ref with spill slot");
  ------------------
  |  |  527|    660|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    660|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    660|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 660, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    660|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  733|    660|      setgcV(J->L, o, (GCobj *)(uintptr_t)*(GCSize *)sps, irt_toitype(t));
  ------------------
  |  |  442|    660|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|    660|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  734|    660|    }
  735|   480k|  } else {  /* Restore from register. */
  736|   480k|    Reg r = regsp_reg(rs);
  ------------------
  |  |   48|   480k|#define regsp_reg(rs)		((rs) & 255)
  ------------------
  737|   480k|    if (ra_noreg(r)) {
  ------------------
  |  |   27|   480k|#define ra_noreg(r)		((r) & RID_NONE)
  |  |  ------------------
  |  |  |  |   21|   480k|#define RID_NONE		0x80
  |  |  ------------------
  |  |  |  Branch (27:22): [True: 0, False: 480k]
  |  |  ------------------
  ------------------
  738|      0|      lj_assertJ(ir->o == IR_CONV && ir->op2 == IRCONV_NUM_INT,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  739|      0|		 "restore from IR %04d has no reg", ref - REF_BIAS);
  740|      0|      snap_restoreval(J, T, ex, snapno, rfilt, ir->op1, o);
  741|      0|      if (LJ_DUALNUM) setnumV(o, (lua_Number)intV(o));
  ------------------
  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  ------------------
  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  ------------------
  ------------------
                    if (LJ_DUALNUM) setnumV(o, (lua_Number)intV(o));
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  |  |  ------------------
  |  |  |  Branch (945:35): [Folded - Ignored]
  |  |  |  Branch (945:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  742|      0|      return;
  743|   480k|    } else if (irt_isinteger(t)) {
  ------------------
  |  |  389|   480k|#define irt_isinteger(t)	(irt_typerange((t), IRT_I8, IRT_INT))
  |  |  ------------------
  |  |  |  |  368|   480k|  ((uint32_t)((t).irt & IRT_TYPE) - (uint32_t)(first) <= (uint32_t)(last-first))
  |  |  ------------------
  |  |  |  Branch (389:26): [True: 450k, False: 29.4k]
  |  |  ------------------
  ------------------
  744|   450k|      setintV(o, (int32_t)ex->gpr[r-RID_MIN_GPR]);
  745|   450k|#if !LJ_SOFTFP
  746|   450k|    } else if (irt_isnum(t)) {
  ------------------
  |  |  377|  29.4k|#define irt_isnum(t)		(irt_type(t) == IRT_NUM)
  |  |  ------------------
  |  |  |  |  365|  29.4k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (377:23): [True: 25.1k, False: 4.26k]
  |  |  ------------------
  ------------------
  747|  25.1k|      setnumV(o, ex->fpr[r-RID_MIN_FPR]);
  ------------------
  |  |  945|  25.1k|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  748|       |#elif LJ_64  /* && LJ_SOFTFP */
  749|       |    } else if (irt_isnum(t)) {
  750|       |      o->u64 = ex->gpr[r-RID_MIN_GPR];
  751|       |#endif
  752|       |#if LJ_64 && !LJ_GC64
  753|       |    } else if (irt_is64(t)) {
  754|       |      /* 64 bit values that already have the tag bits. */
  755|       |      o->u64 = ex->gpr[r-RID_MIN_GPR];
  756|       |#endif
  757|  25.1k|    } else if (irt_ispri(t)) {
  ------------------
  |  |  371|  4.26k|#define irt_ispri(t)		((uint32_t)irt_type(t) <= IRT_TRUE)
  |  |  ------------------
  |  |  |  |  365|  4.26k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  |  |  |  Branch (371:23): [True: 0, False: 4.26k]
  |  |  ------------------
  ------------------
  758|      0|      setpriV(o, irt_toitype(t));
  ------------------
  |  |  873|      0|#define setpriV(o, x)		((o)->it64 = (int64_t)~((uint64_t)~(x)<<47))
  ------------------
  759|  4.26k|    } else {
  760|  4.26k|      setgcV(J->L, o, (GCobj *)ex->gpr[r-RID_MIN_GPR], irt_toitype(t));
  ------------------
  |  |  442|  4.26k|#define irt_toitype(t)		irt_toitype_(irt_type((t)))
  |  |  ------------------
  |  |  |  |  365|  4.26k|#define irt_type(t)		((IRType)((t).irt & IRT_TYPE))
  |  |  ------------------
  ------------------
  761|  4.26k|    }
  762|   480k|  }
  763|   484k|}

lj_opt_loop.c:lj_snap_grow_buf:
   24|  9.93k|{
   25|  9.93k|  if (LJ_UNLIKELY(need > J->sizesnap)) lj_snap_grow_buf_(J, need);
  ------------------
  |  |  146|  9.93k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 218, False: 9.71k]
  |  |  ------------------
  ------------------
   26|  9.93k|}
lj_opt_loop.c:lj_snap_grow_map:
   29|  9.93k|{
   30|  9.93k|  if (LJ_UNLIKELY(need > J->sizesnapmap)) lj_snap_grow_map_(J, need);
  ------------------
  |  |  146|  9.93k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 159, False: 9.77k]
  |  |  ------------------
  ------------------
   31|  9.93k|}
lj_snap.c:lj_snap_grow_buf:
   24|   113k|{
   25|   113k|  if (LJ_UNLIKELY(need > J->sizesnap)) lj_snap_grow_buf_(J, need);
  ------------------
  |  |  146|   113k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.82k, False: 110k]
  |  |  ------------------
  ------------------
   26|   113k|}
lj_snap.c:lj_snap_grow_map:
   29|   151k|{
   30|   151k|  if (LJ_UNLIKELY(need > J->sizesnapmap)) lj_snap_grow_map_(J, need);
  ------------------
  |  |  146|   151k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.68k, False: 148k]
  |  |  ------------------
  ------------------
   31|   151k|}

lj_state_relimitstack:
   85|  4.02M|{
   86|  4.02M|  if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   39|  8.04M|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|  4.02M|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|  4.02M|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|  4.02M|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|  4.02M|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |  217|    228|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    228|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (L->stacksize > LJ_STACK_MAXEX && L->top-tvref(L->stack) < LJ_STACK_MAX-1)
  ------------------
  |  |   37|    228|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|    228|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (86:7): [True: 228, False: 4.02M]
  |  Branch (86:40): [True: 225, False: 3]
  ------------------
   87|    225|    resizestack(L, LJ_STACK_MAX);
  ------------------
  |  |   37|    225|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|    225|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
   88|  4.02M|}
lj_state_shrinkstack:
   92|   519k|{
   93|   519k|  if (L->stacksize > LJ_STACK_MAXEX)
  ------------------
  |  |   39|   519k|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|   519k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|   519k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|   519k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|   519k|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (93:7): [True: 74, False: 519k]
  ------------------
   94|     74|    return;  /* Avoid stack shrinking while handling stack overflow. */
   95|   519k|  if (4*used < L->stacksize &&
  ------------------
  |  Branch (95:7): [True: 15.7k, False: 503k]
  ------------------
   96|   519k|      2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   38|  15.7k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  15.7k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  15.7k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    2*(LJ_STACK_START+LJ_STACK_EXTRA) < L->stacksize &&
  ------------------
  |  |   72|  15.7k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  15.7k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  |  Branch (96:7): [True: 2.76k, False: 13.0k]
  ------------------
   97|       |      /* Don't shrink stack of live trace. */
   98|   519k|      (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  217|  2.76k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  2.76k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |  775|  1.17k|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                    (tvref(G(L)->jit_base) == NULL || obj2gco(L) != gcref(G(L)->cur_L)))
  ------------------
  |  |   67|  1.17k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (98:8): [True: 1.58k, False: 1.17k]
  |  Branch (98:41): [True: 0, False: 1.17k]
  ------------------
   99|  1.58k|    resizestack(L, L->stacksize >> 1);
  100|   519k|}
lj_state_growstack:
  104|  5.08k|{
  105|  5.08k|  MSize n = L->stacksize + need;
  106|  5.08k|  if (LJ_LIKELY(n < LJ_STACK_MAX)) {  /* The stack can grow as requested. */
  ------------------
  |  |  145|  5.08k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 4.85k, False: 225]
  |  |  ------------------
  ------------------
  107|  4.85k|    if (n < 2 * L->stacksize) {  /* Try to double the size. */
  ------------------
  |  Branch (107:9): [True: 4.82k, False: 38]
  ------------------
  108|  4.82k|      n = 2 * L->stacksize;
  109|  4.82k|      if (n > LJ_STACK_MAX)
  ------------------
  |  |   37|  4.82k|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|  4.82k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  |  Branch (109:11): [True: 188, False: 4.63k]
  ------------------
  110|    188|	n = LJ_STACK_MAX;
  ------------------
  |  |   37|    188|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|    188|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
  111|  4.82k|    }
  112|  4.85k|    resizestack(L, n);
  113|  4.85k|  } else {  /* Request would overflow. Raise a stack overflow error. */
  114|    225|    if (LJ_HASJIT) {
  ------------------
  |  |  578|    225|#define LJ_HASJIT		1
  |  |  ------------------
  |  |  |  Branch (578:20): [Folded - Ignored]
  |  |  ------------------
  ------------------
  115|    225|      TValue *base = tvref(G(L)->jit_base);
  ------------------
  |  |  217|    225|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    225|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  116|    225|      if (base) L->base = base;
  ------------------
  |  Branch (116:11): [True: 0, False: 225]
  ------------------
  117|    225|    }
  118|    225|    if (curr_funcisL(L)) {
  ------------------
  |  |  716|    225|#define curr_funcisL(L)		(isluafunc(curr_func(L)))
  |  |  ------------------
  |  |  |  |  476|    225|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  474|    225|#define FF_LUA		0
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (716:26): [True: 224, False: 1]
  |  |  ------------------
  ------------------
  119|    224|      L->top = curr_topL(L);
  ------------------
  |  |  718|    224|#define curr_topL(L)		(L->base + curr_proto(L)->framesize)
  |  |  ------------------
  |  |  |  |  717|    224|#define curr_proto(L)		(funcproto(curr_func(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  480|    224|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  367|    224|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  366|    224|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  355|    224|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 224, False: 0]
  |  |  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  |  356|    224|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  120|    224|      if (L->top > tvref(L->maxstack)) {
  ------------------
  |  |  217|    224|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|    224|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (120:11): [True: 20, False: 204]
  ------------------
  121|       |	/* The current Lua frame violates the stack, so replace it with a
  122|       |	** dummy. This can happen when BC_IFUNCF is trying to grow the stack.
  123|       |	*/
  124|     20|	L->top = L->base;
  125|     20|	setframe_gc(L->base - 1 - LJ_FR2, obj2gco(L), LJ_TTHREAD);
  ------------------
  |  |   49|     20|#define setframe_gc(f, p, tp)	(setgcVraw((f), (p), (tp)))
  ------------------
  126|     20|      }
  127|    224|    }
  128|    225|    if (L->stacksize <= LJ_STACK_MAXEX) {
  ------------------
  |  |   39|    225|#define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   37|    225|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   91|    225|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define LJ_STACK_MAXEX	(LJ_STACK_MAX + 1 + LJ_STACK_EXTRA)
  |  |  ------------------
  |  |  |  |   72|    225|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  |  |  ------------------
  |  |  |  |  |  |  569|    225|#define LJ_FR2			1
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (128:9): [True: 225, False: 0]
  ------------------
  129|       |      /* An error handler might want to inspect the stack overflow error, but
  130|       |      ** will need some stack space to run in. We give it a stack size beyond
  131|       |      ** the normal limit in order to do so, then rely on lj_state_relimitstack
  132|       |      ** calls during unwinding to bring us back to a convential stack size.
  133|       |      ** The + 1 is space for the error message, and 2 * LUA_MINSTACK is for
  134|       |      ** the lj_state_checkstack() call in lj_err_run().
  135|       |      */
  136|    225|      resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   37|    225|#define LJ_STACK_MAX	LUAI_MAXSTACK	/* Max. stack size. */
  |  |  ------------------
  |  |  |  |   91|    225|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  |  |  ------------------
  ------------------
                    resizestack(L, LJ_STACK_MAX + 1 + 2 * LUA_MINSTACK);
  ------------------
  |  |   88|    225|#define LUA_MINSTACK	20
  ------------------
  137|    225|      lj_err_stkov(L);  /* May invoke an error handler. */
  138|    225|    } else {
  139|       |      /* If we're here, then the stack overflow error handler is requesting
  140|       |      ** to grow the stack even further. We have no choice but to abort the
  141|       |      ** error handler.
  142|       |      */
  143|      0|      GCstr *em = lj_err_str(L, LJ_ERR_STKOV);  /* Might OOM. */
  144|      0|      setstrV(L, L->top++, em);  /* There is always space to push an error. */
  145|      0|      lj_err_throw(L, LUA_ERRERR);  /* Does not invoke an error handler. */
  ------------------
  |  |   48|      0|#define LUA_ERRERR	5
  ------------------
  146|      0|    }
  147|    225|  }
  148|  5.08k|}
lj_state_growstack1:
  151|      4|{
  152|      4|  lj_state_growstack(L, 1);
  153|      4|}
lua_newstate:
  244|  13.6k|{
  245|  13.6k|  PRNGState prng;
  246|  13.6k|  GG_State *GG;
  247|  13.6k|  lua_State *L;
  248|  13.6k|  global_State *g;
  249|       |  /* We need the PRNG for the memory allocator, so initialize this first. */
  250|  13.6k|  if (!lj_prng_seed_secure(&prng)) {
  ------------------
  |  Branch (250:7): [True: 0, False: 13.6k]
  ------------------
  251|      0|    lj_assertX(0, "secure PRNG seeding failed");
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  252|       |    /* Can only return NULL here, so this errors with "not enough memory". */
  253|      0|    return NULL;
  254|      0|  }
  255|  13.6k|#ifndef LUAJIT_USE_SYSMALLOC
  256|  13.6k|  if (allocf == LJ_ALLOCF_INTERNAL) {
  ------------------
  |  |   36|  13.6k|#define LJ_ALLOCF_INTERNAL	((lua_Alloc)(void *)(uintptr_t)(1237<<4))
  ------------------
  |  Branch (256:7): [True: 13.6k, False: 0]
  ------------------
  257|  13.6k|    allocd = lj_alloc_create(&prng);
  258|  13.6k|    if (!allocd) return NULL;
  ------------------
  |  Branch (258:9): [True: 0, False: 13.6k]
  ------------------
  259|  13.6k|    allocf = lj_alloc_f;
  260|  13.6k|  }
  261|  13.6k|#endif
  262|  13.6k|  GG = (GG_State *)allocf(allocd, NULL, 0, sizeof(GG_State));
  263|  13.6k|  if (GG == NULL || !checkptrGC(GG)) return NULL;
  ------------------
  |  |  110|  13.6k|#define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  562|  13.6k|#define LJ_GC64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (562:19): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  109|  13.6k|#define checkptr47(x)	(((uint64_t)(uintptr_t)(x) >> 47) == 0)
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  640|      0|#define LJ_64			1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define checkptrGC(x)	(LJ_GC64 ? checkptr47((x)) : LJ_64 ? checkptr31((x)) :1)
  |  |  ------------------
  |  |  |  |  107|      0|#define checkptr31(x)	(((uint64_t)(uintptr_t)(x) >> 31) == 0)
  |  |  ------------------
  ------------------
  |  Branch (263:7): [True: 0, False: 13.6k]
  |  Branch (263:21): [True: 0, False: 13.6k]
  ------------------
  264|  13.6k|  memset(GG, 0, sizeof(GG_State));
  265|  13.6k|  L = &GG->L;
  266|  13.6k|  g = &GG->g;
  267|  13.6k|  L->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|  13.6k|#define LJ_TTHREAD		(~6u)
  ------------------
  268|  13.6k|  L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   17|  13.6k|#define LJ_GC_WHITE0	0x01
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   24|  13.6k|#define LJ_GC_FIXED	0x20
  ------------------
                L->marked = LJ_GC_WHITE0 | LJ_GC_FIXED | LJ_GC_SFIXED;  /* Prevent free. */
  ------------------
  |  |   25|  13.6k|#define LJ_GC_SFIXED	0x40
  ------------------
  269|  13.6k|  L->dummy_ffid = FF_C;
  ------------------
  |  |  475|  13.6k|#define FF_C		1
  ------------------
  270|  13.6k|  setmref(L->glref, g);
  ------------------
  |  |   39|  13.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  271|  13.6k|  g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   17|  13.6k|#define LJ_GC_WHITE0	0x01
  ------------------
                g->gc.currentwhite = LJ_GC_WHITE0 | LJ_GC_FIXED;
  ------------------
  |  |   24|  13.6k|#define LJ_GC_FIXED	0x20
  ------------------
  272|  13.6k|  g->strempty.marked = LJ_GC_WHITE0;
  ------------------
  |  |   17|  13.6k|#define LJ_GC_WHITE0	0x01
  ------------------
  273|  13.6k|  g->strempty.gct = ~LJ_TSTR;
  ------------------
  |  |  264|  13.6k|#define LJ_TSTR			(~4u)
  ------------------
  274|  13.6k|  g->allocf = allocf;
  275|  13.6k|  g->allocd = allocd;
  276|  13.6k|  g->prng = prng;
  277|  13.6k|#ifndef LUAJIT_USE_SYSMALLOC
  278|  13.6k|  if (allocf == lj_alloc_f) {
  ------------------
  |  Branch (278:7): [True: 13.6k, False: 0]
  ------------------
  279|  13.6k|    lj_alloc_setprng(allocd, &g->prng);
  280|  13.6k|  }
  281|  13.6k|#endif
  282|  13.6k|  setgcref(g->mainthref, obj2gco(L));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  283|  13.6k|  setgcref(g->uvhead.prev, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  284|  13.6k|  setgcref(g->uvhead.next, obj2gco(&g->uvhead));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  285|  13.6k|  g->str.mask = ~(MSize)0;
  286|  13.6k|  setnilV(registry(L));
  ------------------
  |  |  872|  13.6k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  287|  13.6k|  setnilV(&g->nilnode.val);
  ------------------
  |  |  872|  13.6k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  288|  13.6k|  setnilV(&g->nilnode.key);
  ------------------
  |  |  872|  13.6k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  289|       |#if !LJ_GC64
  290|       |  setmref(g->nilnode.freetop, &g->nilnode);
  291|       |#endif
  292|  13.6k|  lj_buf_init(NULL, &g->tmpbuf);
  293|  13.6k|  g->gc.state = GCSpause;
  294|  13.6k|  setgcref(g->gc.root, obj2gco(L));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  295|  13.6k|  setmref(g->gc.sweep, &g->gc.root);
  ------------------
  |  |   39|  13.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  296|  13.6k|  g->gc.total = sizeof(GG_State);
  297|  13.6k|  g->gc.pause = LUAI_GCPAUSE;
  ------------------
  |  |   93|  13.6k|#define LUAI_GCPAUSE	200	/* Pause GC until memory is at 200%. */
  ------------------
  298|  13.6k|  g->gc.stepmul = LUAI_GCMUL;
  ------------------
  |  |   94|  13.6k|#define LUAI_GCMUL	200	/* Run GC at 200% of allocation speed. */
  ------------------
  299|  13.6k|  lj_dispatch_init((GG_State *)L);
  300|  13.6k|  L->status = LUA_ERRERR+1;  /* Avoid touching the stack upon memory error. */
  ------------------
  |  |   48|  13.6k|#define LUA_ERRERR	5
  ------------------
  301|  13.6k|  if (lj_vm_cpcall(L, NULL, NULL, cpluaopen) != 0) {
  ------------------
  |  Branch (301:7): [True: 0, False: 13.6k]
  ------------------
  302|       |    /* Memory allocation error: free partial state. */
  303|      0|    close_state(L);
  304|      0|    return NULL;
  305|      0|  }
  306|  13.6k|  L->status = LUA_OK;
  ------------------
  |  |   43|  13.6k|#define LUA_OK		0
  ------------------
  307|  13.6k|  return L;
  308|  13.6k|}
lua_close:
  321|  13.6k|{
  322|  13.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  323|  13.6k|  int i;
  324|  13.6k|  L = mainthread(g);  /* Only the main thread can be closed. */
  ------------------
  |  |  665|  13.6k|#define mainthread(g)	(&gcref(g->mainthref)->th)
  |  |  ------------------
  |  |  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  325|  13.6k|#if LJ_HASPROFILE
  326|  13.6k|  luaJIT_profile_stop(L);
  327|  13.6k|#endif
  328|  13.6k|  setgcrefnull(g->cur_L);
  ------------------
  |  |   76|  13.6k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  329|  13.6k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  13.6k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  330|  13.6k|  lj_gc_separateudata(g, 1);  /* Separate udata which have GC metamethods. */
  331|  13.6k|#if LJ_HASJIT
  332|  13.6k|  G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |  116|  13.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                G2J(g)->flags &= ~JIT_F_ON;
  ------------------
  |  |   16|  13.6k|#define JIT_F_ON		0x00000001
  ------------------
  333|  13.6k|  G2J(g)->state = LJ_TRACE_IDLE;
  ------------------
  |  |  116|  13.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  334|  13.6k|  lj_dispatch_update(g);
  335|  13.6k|#endif
  336|  13.6k|  for (i = 0;;) {
  337|  13.6k|    hook_enter(g);
  ------------------
  |  |  679|  13.6k|#define hook_enter(g)		((g)->hookmask |= HOOK_ACTIVE)
  |  |  ------------------
  |  |  |  |  673|  13.6k|#define HOOK_ACTIVE		0x10
  |  |  ------------------
  ------------------
  338|  13.6k|    L->status = LUA_OK;
  ------------------
  |  |   43|  13.6k|#define LUA_OK		0
  ------------------
  339|  13.6k|    L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  217|  13.6k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  L->base = L->top = tvref(L->stack) + 1 + LJ_FR2;
  ------------------
  |  |  569|  13.6k|#define LJ_FR2			1
  ------------------
  340|  13.6k|    L->cframe = NULL;
  341|  13.6k|    if (lj_vm_cpcall(L, NULL, NULL, cpfinalize) == LUA_OK) {
  ------------------
  |  |   43|  13.6k|#define LUA_OK		0
  ------------------
  |  Branch (341:9): [True: 13.6k, False: 0]
  ------------------
  342|  13.6k|      if (++i >= 10) break;
  ------------------
  |  Branch (342:11): [True: 0, False: 13.6k]
  ------------------
  343|  13.6k|      lj_gc_separateudata(g, 1);  /* Separate udata again. */
  344|  13.6k|      if (gcref(g->gc.mmudata) == NULL)  /* Until nothing is left to do. */
  ------------------
  |  |   67|  13.6k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (344:11): [True: 13.6k, False: 0]
  ------------------
  345|  13.6k|	break;
  346|  13.6k|    }
  347|  13.6k|  }
  348|  13.6k|  close_state(L);
  349|  13.6k|}
lj_state_new:
  352|     46|{
  353|     46|  lua_State *L1 = lj_mem_newobj(L, lua_State);
  ------------------
  |  |  132|     46|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  354|     46|  L1->gct = ~LJ_TTHREAD;
  ------------------
  |  |  266|     46|#define LJ_TTHREAD		(~6u)
  ------------------
  355|     46|  L1->dummy_ffid = FF_C;
  ------------------
  |  |  475|     46|#define FF_C		1
  ------------------
  356|     46|  L1->status = LUA_OK;
  ------------------
  |  |   43|     46|#define LUA_OK		0
  ------------------
  357|     46|  L1->stacksize = 0;
  358|     46|  setmref(L1->stack, NULL);
  ------------------
  |  |   39|     46|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  359|     46|  L1->cframe = NULL;
  360|       |  /* NOBARRIER: The lua_State is new (marked white). */
  361|     46|  setgcrefnull(L1->openupval);
  ------------------
  |  |   76|     46|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  362|     46|  setmrefr(L1->glref, L->glref);
  ------------------
  |  |   41|     46|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  363|     46|  setgcrefr(L1->env, L->env);
  ------------------
  |  |   77|     46|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  364|     46|  stack_init(L1, L);  /* init stack */
  365|     46|  lj_assertL(iswhite(obj2gco(L1)), "new thread object is not white");
  ------------------
  |  |  365|     46|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     46|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     46|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  366|     46|  return L1;
  367|     46|}
lj_state_free:
  370|     46|{
  371|     46|  lj_assertG(L != mainthread(g), "free of main thread");
  ------------------
  |  |  364|     46|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|     46|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 46, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|     46|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  372|     46|  if (obj2gco(L) == gcref(g->cur_L))
  ------------------
  |  |  775|     46|#define obj2gco(v)	((GCobj *)(v))
  ------------------
                if (obj2gco(L) == gcref(g->cur_L))
  ------------------
  |  |   67|     46|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (372:7): [True: 0, False: 46]
  ------------------
  373|      0|    setgcrefnull(g->cur_L);
  ------------------
  |  |   76|      0|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  374|     46|  if (gcref(L->openupval) != NULL) {
  ------------------
  |  |   67|     46|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  |  Branch (374:7): [True: 0, False: 46]
  ------------------
  375|      0|    lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|      0|    lj_trace_abort(g);  /* For aa_uref soundness. */
  ------------------
  |  |   45|      0|#define lj_trace_abort(g)	(G2J(g)->state &= ~LJ_TRACE_ACTIVE)
  |  |  ------------------
  |  |  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  377|      0|    lj_assertG(gcref(L->openupval) == NULL, "stale open upvalues");
  ------------------
  |  |  364|      0|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  378|      0|  }
  379|     46|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|     46|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  380|     46|  lj_mem_freet(g, L);
  ------------------
  |  |  134|     46|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  381|     46|}
lj_state.c:resizestack:
   58|  6.89k|{
   59|  6.89k|  TValue *st, *oldst = tvref(L->stack);
  ------------------
  |  |  217|  6.89k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  6.89k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   60|  6.89k|  ptrdiff_t delta;
   61|  6.89k|  MSize oldsize = L->stacksize;
   62|  6.89k|  MSize realsize = n + 1 + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  6.89k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  6.89k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
   63|  6.89k|  GCobj *up;
   64|  6.89k|  lj_assertL((MSize)(tvref(L->maxstack)-oldst) == L->stacksize-LJ_STACK_EXTRA-1,
  ------------------
  |  |  365|  6.89k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  6.89k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 6.89k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  6.89k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   65|  6.89k|	     "inconsistent stack size");
   66|  6.89k|  st = (TValue *)lj_mem_realloc(L, tvref(L->stack),
  ------------------
  |  |  217|  6.89k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  6.89k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   67|  6.89k|				(MSize)(oldsize*sizeof(TValue)),
   68|  6.89k|				(MSize)(realsize*sizeof(TValue)));
   69|  6.89k|  setmref(L->stack, st);
  ------------------
  |  |   39|  6.89k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   70|  6.89k|  delta = (char *)st - (char *)oldst;
   71|  6.89k|  setmref(L->maxstack, st + n);
  ------------------
  |  |   39|  6.89k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   72|  12.5M|  while (oldsize < realsize)  /* Clear new slots. */
  ------------------
  |  Branch (72:10): [True: 12.5M, False: 6.89k]
  ------------------
   73|  12.5M|    setnilV(st + oldsize++);
  ------------------
  |  |  872|  12.5M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   74|  6.89k|  L->stacksize = realsize;
   75|  6.89k|  if ((size_t)(mref(G(L)->jit_base, char) - (char *)oldst) < oldsize)
  ------------------
  |  |   36|  6.89k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (75:7): [True: 0, False: 6.89k]
  ------------------
   76|      0|    setmref(G(L)->jit_base, mref(G(L)->jit_base, char) + delta);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   77|  6.89k|  L->base = (TValue *)((char *)L->base + delta);
   78|  6.89k|  L->top = (TValue *)((char *)L->top + delta);
   79|  10.2k|  for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   67|  6.89k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
                for (up = gcref(L->openupval); up != NULL; up = gcnext(up))
  ------------------
  |  |   90|  3.34k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  3.34k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  |  Branch (79:34): [True: 3.34k, False: 6.89k]
  ------------------
   80|  3.34k|    setmref(gco2uv(up)->v, (TValue *)((char *)uvval(gco2uv(up)) + delta));
  ------------------
  |  |   39|  10.2k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:25): [True: 3.34k, False: 0]
  |  |  |  Branch (39:55): [True: 3.34k, False: 0]
  |  |  ------------------
  ------------------
   81|  6.89k|}
lj_state.c:cpluaopen:
  186|  13.6k|{
  187|  13.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|  13.6k|  UNUSED(dummy);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  189|  13.6k|  UNUSED(ud);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  190|  13.6k|  stack_init(L, L);
  191|       |  /* NOBARRIER: State initialization, all objects are white. */
  192|  13.6k|  setgcref(L->env, obj2gco(lj_tab_new(L, 0, LJ_MIN_GLOBAL)));
  ------------------
  |  |   72|  13.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  193|  13.6k|  settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |  706|  13.6k|#define registry(L)		(&G(L)->registrytv)
  |  |  ------------------
  |  |  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                settabV(L, registry(L), lj_tab_new(L, 0, LJ_MIN_REGISTRY));
  ------------------
  |  |   78|  13.6k|#define LJ_MIN_REGISTRY	2		/* Min. registry size (hbits). */
  ------------------
  194|  13.6k|  lj_str_init(L);
  195|  13.6k|  lj_meta_init(L);
  196|  13.6k|  lj_lex_init(L);
  197|  13.6k|  fixstring(lj_err_str(L, LJ_ERR_ERRMEM));  /* Preallocate memory error msg. */
  ------------------
  |  |   45|  13.6k|#define fixstring(s)	((s)->marked |= LJ_GC_FIXED)
  |  |  ------------------
  |  |  |  |   24|  13.6k|#define LJ_GC_FIXED	0x20
  |  |  ------------------
  ------------------
  198|  13.6k|  g->gc.threshold = 4*g->gc.total;
  199|  13.6k|#if LJ_HASFFI
  200|  13.6k|  lj_ctype_initfin(L);
  201|  13.6k|#endif
  202|  13.6k|  lj_trace_initstate(g);
  203|  13.6k|  lj_err_verify();
  204|  13.6k|  return NULL;
  205|  13.6k|}
lj_state.c:close_state:
  208|  13.6k|{
  209|  13.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  210|  13.6k|  lj_func_closeuv(L, tvref(L->stack));
  ------------------
  |  |  217|  13.6k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  211|  13.6k|  lj_gc_freeall(g);
  212|  13.6k|  lj_assertG(gcref(g->gc.root) == obj2gco(L),
  ------------------
  |  |  364|  13.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  213|  13.6k|	     "main thread is not first GC object");
  214|  13.6k|  lj_assertG(g->str.num == 0, "leaked %d strings", g->str.num);
  ------------------
  |  |  364|  13.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  215|  13.6k|  lj_trace_freestate(g);
  216|  13.6k|#if LJ_HASFFI
  217|  13.6k|  lj_ctype_freestate(g);
  218|  13.6k|#endif
  219|  13.6k|  lj_str_freetab(g);
  ------------------
  |  |   25|  13.6k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|  13.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  220|  13.6k|  lj_buf_free(g, &g->tmpbuf);
  221|  13.6k|  lj_mem_freevec(g, tvref(L->stack), L->stacksize, TValue);
  ------------------
  |  |  130|  13.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  222|  13.6k|#if LJ_64
  223|  13.6k|  if (mref(g->gc.lightudseg, uint32_t)) {
  ------------------
  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (36:20): [True: 0, False: 13.6k]
  |  |  ------------------
  ------------------
  224|      0|    MSize segnum = g->gc.lightudnum ? (2 << lj_fls(g->gc.lightudnum)) : 2;
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (224:20): [True: 0, False: 0]
  ------------------
  225|      0|    lj_mem_freevec(g, mref(g->gc.lightudseg, uint32_t), segnum, uint32_t);
  ------------------
  |  |  130|      0|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  226|      0|  }
  227|  13.6k|#endif
  228|  13.6k|  lj_assertG(g->gc.total == sizeof(GG_State),
  ------------------
  |  |  364|  13.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  13.6k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 13.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  13.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  229|  13.6k|	     "memory leak of %lld bytes",
  230|  13.6k|	     (long long)(g->gc.total - sizeof(GG_State)));
  231|  13.6k|#ifndef LUAJIT_USE_SYSMALLOC
  232|  13.6k|  if (g->allocf == lj_alloc_f)
  ------------------
  |  Branch (232:7): [True: 13.6k, False: 0]
  ------------------
  233|  13.6k|    lj_alloc_destroy(g->allocd);
  234|      0|  else
  235|      0|#endif
  236|      0|    g->allocf(g->allocd, G2GG(g), sizeof(GG_State), 0);
  ------------------
  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  ------------------
  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  ------------------
  ------------------
  237|  13.6k|}
lj_state.c:cpfinalize:
  311|  13.6k|{
  312|  13.6k|  UNUSED(dummy);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  313|  13.6k|  UNUSED(ud);
  ------------------
  |  |   91|  13.6k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  314|  13.6k|  lj_gc_finalize_cdata(L);
  315|  13.6k|  lj_gc_finalize_udata(L);
  316|       |  /* Frame pop omitted. */
  317|  13.6k|  return NULL;
  318|  13.6k|}
lj_state.c:stack_init:
  169|  13.7k|{
  170|  13.7k|  TValue *stend, *st = lj_mem_newvec(L, LJ_STACK_START+LJ_STACK_EXTRA, TValue);
  ------------------
  |  |  125|  13.7k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  13.7k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  171|  13.7k|  setmref(L1->stack, st);
  ------------------
  |  |   39|  13.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  172|  13.7k|  L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   38|  13.7k|#define LJ_STACK_START	(2*LJ_STACK_MIN)	/* Starting stack size. */
  |  |  ------------------
  |  |  |  |   36|  13.7k|#define LJ_STACK_MIN	LUA_MINSTACK	/* Min. stack size. */
  |  |  |  |  ------------------
  |  |  |  |  |  |   88|  13.7k|#define LUA_MINSTACK	20
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                L1->stacksize = LJ_STACK_START + LJ_STACK_EXTRA;
  ------------------
  |  |   72|  13.7k|#define LJ_STACK_EXTRA	(5+3*LJ_FR2)	/* Extra stack space (metamethods). */
  |  |  ------------------
  |  |  |  |  569|  13.7k|#define LJ_FR2			1
  |  |  ------------------
  ------------------
  173|  13.7k|  stend = st + L1->stacksize;
  174|  13.7k|  setmref(L1->maxstack, stend - LJ_STACK_EXTRA - 1);
  ------------------
  |  |   39|  13.7k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  175|  13.7k|  setthreadV(L1, st++, L1);  /* Needed for curr_funcisL() on empty stack. */
  176|  13.7k|  if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  569|  13.7k|#define LJ_FR2			1
  |  |  ------------------
  |  |  |  Branch (569:18): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (LJ_FR2) setnilV(st++);
  ------------------
  |  |  872|  13.7k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  177|  13.7k|  L1->base = L1->top = st;
  178|   645k|  while (st < stend)  /* Clear new slots. */
  ------------------
  |  Branch (178:10): [True: 632k, False: 13.7k]
  ------------------
  179|   632k|    setnilV(st++);
  ------------------
  |  |  872|   632k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  180|  13.7k|}

lj_dispatch.c:lj_state_checkstack:
   24|   418k|{
   25|   418k|  if ((mref(L->maxstack, char) - (char *)L->top) <=
  ------------------
  |  |   36|   418k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (25:7): [True: 112, False: 418k]
  ------------------
   26|   418k|      (ptrdiff_t)need*(ptrdiff_t)sizeof(TValue))
   27|    112|    lj_state_growstack(L, need);
   28|   418k|}
lj_err.c:lj_state_checkstack:
   24|     77|{
   25|     77|  if ((mref(L->maxstack, char) - (char *)L->top) <=
  ------------------
  |  |   36|     77|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (25:7): [True: 40, False: 37]
  ------------------
   26|     77|      (ptrdiff_t)need*(ptrdiff_t)sizeof(TValue))
   27|     40|    lj_state_growstack(L, need);
   28|     77|}

lj_str_cmp:
   29|  4.36k|{
   30|  4.36k|  MSize i, n = a->len > b->len ? b->len : a->len;
  ------------------
  |  Branch (30:16): [True: 147, False: 4.21k]
  ------------------
   31|  22.7k|  for (i = 0; i < n; i += 4) {
  ------------------
  |  Branch (31:15): [True: 21.2k, False: 1.47k]
  ------------------
   32|       |    /* Note: innocuous access up to end of string + 3. */
   33|  21.2k|    uint32_t va = *(const uint32_t *)(strdata(a)+i);
  ------------------
  |  |  316|  21.2k|#define strdata(s)	((const char *)((s)+1))
  ------------------
   34|  21.2k|    uint32_t vb = *(const uint32_t *)(strdata(b)+i);
  ------------------
  |  |  316|  21.2k|#define strdata(s)	((const char *)((s)+1))
  ------------------
   35|  21.2k|    if (va != vb) {
  ------------------
  |  Branch (35:9): [True: 2.89k, False: 18.3k]
  ------------------
   36|  2.89k|#if LJ_LE
   37|  2.89k|      va = lj_bswap(va); vb = lj_bswap(vb);
   38|  2.89k|#endif
   39|  2.89k|      i -= n;
   40|  2.89k|      if ((int32_t)i >= -3) {
  ------------------
  |  Branch (40:11): [True: 2.44k, False: 453]
  ------------------
   41|  2.44k|	va >>= 32+(i<<3); vb >>= 32+(i<<3);
   42|  2.44k|	if (va == vb) break;
  ------------------
  |  Branch (42:6): [True: 8, False: 2.43k]
  ------------------
   43|  2.44k|      }
   44|  2.88k|      return va < vb ? -1 : 1;
  ------------------
  |  Branch (44:14): [True: 1.66k, False: 1.21k]
  ------------------
   45|  2.89k|    }
   46|  21.2k|  }
   47|  1.48k|  return (int32_t)(a->len - b->len);
   48|  4.36k|}
lj_str_find:
   52|     75|{
   53|     75|  if (plen <= slen) {
  ------------------
  |  Branch (53:7): [True: 75, False: 0]
  ------------------
   54|     75|    if (plen == 0) {
  ------------------
  |  Branch (54:9): [True: 0, False: 75]
  ------------------
   55|      0|      return s;
   56|     75|    } else {
   57|     75|      int c = *(const uint8_t *)p++;
   58|     75|      plen--; slen -= plen;
   59|     92|      while (slen) {
  ------------------
  |  Branch (59:14): [True: 87, False: 5]
  ------------------
   60|     87|	const char *q = (const char *)memchr(s, c, slen);
   61|     87|	if (!q) break;
  ------------------
  |  Branch (61:6): [True: 5, False: 82]
  ------------------
   62|     82|	if (memcmp(q+1, p, plen) == 0) return q;
  ------------------
  |  Branch (62:6): [True: 65, False: 17]
  ------------------
   63|     17|	q++; slen -= (MSize)(q-s); s = q;
   64|     17|      }
   65|     75|    }
   66|     75|  }
   67|     10|  return NULL;
   68|     75|}
lj_str_haspattern:
   72|  1.26k|{
   73|  1.26k|  const char *p = strdata(s), *q = p + s->len;
  ------------------
  |  |  316|  1.26k|#define strdata(s)	((const char *)((s)+1))
  ------------------
   74|  1.94k|  while (p < q) {
  ------------------
  |  Branch (74:10): [True: 1.87k, False: 75]
  ------------------
   75|  1.87k|    int c = *(const uint8_t *)p++;
   76|  1.87k|    if (lj_char_ispunct(c) && strchr("^$*+?.([%-", c))
  ------------------
  |  |   27|  1.87k|#define lj_char_ispunct(c)	lj_char_isa((c), LJ_CHAR_PUNCT)
  |  |  ------------------
  |  |  |  |   24|  3.74k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1.32k, False: 551]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (76:31): [True: 1.19k, False: 126]
  ------------------
   77|  1.19k|      return 1;  /* Found a pattern matching char. */
   78|  1.87k|  }
   79|     75|  return 0;  /* No pattern matching chars found. */
   80|  1.26k|}
lj_str_resize:
  139|   833k|{
  140|   833k|  global_State *g = G(L);
  ------------------
  |  |  705|   833k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   833k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  141|   833k|  GCRef *newtab, *oldtab = g->str.tab;
  142|   833k|  MSize i;
  143|       |
  144|       |  /* No resizing during GC traversal or if already too big. */
  145|   833k|  if (g->gc.state == GCSsweepstring || newmask >= LJ_MAX_STRTAB-1)
  ------------------
  |  |   58|   471k|#define LJ_MAX_STRTAB	(1<<26)		/* Max. string table size. */
  ------------------
  |  Branch (145:7): [True: 361k, False: 471k]
  |  Branch (145:40): [True: 0, False: 471k]
  ------------------
  146|   361k|    return;
  147|       |
  148|   471k|  newtab = lj_mem_newvec(L, newmask+1, GCRef);
  ------------------
  |  |  125|   471k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|   471k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  149|   471k|  memset(newtab, 0, (newmask+1)*sizeof(GCRef));
  150|       |
  151|   471k|#if LUAJIT_SECURITY_STRHASH
  152|       |  /* Check which chains need secondary hashes. */
  153|   471k|  if (g->str.second) {
  ------------------
  |  Branch (153:7): [True: 365, False: 471k]
  ------------------
  154|    365|    int newsecond = 0;
  155|       |    /* Compute primary chain lengths. */
  156|  1.06M|    for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (156:27): [True: 1.06M, False: 365]
  ------------------
  157|  1.06M|      GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  1.06M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  158|  1.19M|      while (o) {
  ------------------
  |  Branch (158:14): [True: 129k, False: 1.06M]
  ------------------
  159|   129k|	GCstr *s = gco2str(o);
  ------------------
  |  |  765|   129k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   129k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   129k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   129k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 129k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   129k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  160|   129k|	MSize hash = s->hashalg ? hash_sparse(g->str.seed, strdata(s), s->len) :
  ------------------
  |  |  316|  10.4k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (160:15): [True: 10.4k, False: 118k]
  ------------------
  161|   129k|				  s->hash;
  162|   129k|	hash &= newmask;
  163|   129k|	setgcrefp(newtab[hash], gcrefu(newtab[hash]) + 1);
  ------------------
  |  |   75|   129k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  164|   129k|	o = gcnext(o);
  ------------------
  |  |   90|   129k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   129k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  165|   129k|      }
  166|  1.06M|    }
  167|       |    /* Mark secondary chains. */
  168|   555k|    for (i = newmask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (168:23): [True: 555k, False: 365]
  ------------------
  169|   555k|      int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |   69|   555k|#define gcrefu(r)	((r).gcptr64)
  ------------------
                    int secondary = gcrefu(newtab[i]) > LJ_STR_MAXCOLL;
  ------------------
  |  |  135|   555k|#define LJ_STR_MAXCOLL		32
  ------------------
  170|   555k|      newsecond |= secondary;
  171|   555k|      setgcrefp(newtab[i], secondary);
  ------------------
  |  |   75|   555k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  172|   555k|    }
  173|    365|    g->str.second = newsecond;
  174|    365|  }
  175|   471k|#endif
  176|       |
  177|       |  /* Reinsert all strings from the old table into the new table. */
  178|  1.59G|  for (i = g->str.mask; i != ~(MSize)0; i--) {
  ------------------
  |  Branch (178:25): [True: 1.59G, False: 471k]
  ------------------
  179|  1.59G|    GCobj *o = (GCobj *)(gcrefu(oldtab[i]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  1.59G|#define gcrefu(r)	((r).gcptr64)
  ------------------
  180|  2.49G|    while (o) {
  ------------------
  |  Branch (180:12): [True: 899M, False: 1.59G]
  ------------------
  181|   899M|      GCobj *next = gcnext(o);
  ------------------
  |  |   90|   899M|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   899M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  182|   899M|      GCstr *s = gco2str(o);
  ------------------
  |  |  765|   899M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   899M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   899M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   899M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 899M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   899M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  183|      0|      MSize hash = s->hash;
  184|   899M|#if LUAJIT_SECURITY_STRHASH
  185|   899M|      uintptr_t u;
  186|   899M|      if (LJ_LIKELY(!s->hashalg)) {  /* String hashed with primary hash. */
  ------------------
  |  |  145|   899M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 899M, False: 10.4k]
  |  |  ------------------
  ------------------
  187|   899M|	hash &= newmask;
  188|   899M|	u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|   899M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  189|   899M|	if (LJ_UNLIKELY(u & 1)) {  /* Switch string to secondary hash. */
  ------------------
  |  |  146|   899M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 11, False: 899M]
  |  |  ------------------
  ------------------
  190|     11|	  s->hash = hash = hash_dense(g->str.seed, s->hash, strdata(s), s->len);
  ------------------
  |  |  316|     11|#define strdata(s)	((const char *)((s)+1))
  ------------------
  191|     11|	  s->hashalg = 1;
  192|     11|	  hash &= newmask;
  193|     11|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|     11|#define gcrefu(r)	((r).gcptr64)
  ------------------
  194|     11|	}
  195|   899M|      } else {  /* String hashed with secondary hash. */
  196|  10.4k|	MSize shash = hash_sparse(g->str.seed, strdata(s), s->len);
  ------------------
  |  |  316|  10.4k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  197|  10.4k|	u = gcrefu(newtab[shash & newmask]);
  ------------------
  |  |   69|  10.4k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  198|  10.4k|	if (u & 1) {
  ------------------
  |  Branch (198:6): [True: 5.21k, False: 5.21k]
  ------------------
  199|  5.21k|	  hash &= newmask;
  200|  5.21k|	  u = gcrefu(newtab[hash]);
  ------------------
  |  |   69|  5.21k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  201|  5.21k|	} else {  /* Revert string back to primary hash. */
  202|  5.21k|	  s->hash = shash;
  203|  5.21k|	  s->hashalg = 0;
  204|  5.21k|	  hash = (shash & newmask);
  205|  5.21k|	}
  206|  10.4k|      }
  207|       |      /* NOBARRIER: The string table is a GC root. */
  208|   899M|      setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   899M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  209|   899M|      setgcrefp(newtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|   899M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  210|       |#else
  211|       |      hash &= newmask;
  212|       |      /* NOBARRIER: The string table is a GC root. */
  213|       |      setgcrefr(o->gch.nextgc, newtab[hash]);
  214|       |      setgcref(newtab[hash], o);
  215|       |#endif
  216|   899M|      o = next;
  217|   899M|    }
  218|  1.59G|  }
  219|       |
  220|       |  /* Free old table and replace with new table. */
  221|   471k|  lj_str_freetab(g);
  ------------------
  |  |   25|   471k|  (lj_mem_freevec(g, g->str.tab, g->str.mask+1, GCRef))
  |  |  ------------------
  |  |  |  |  130|   471k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  |  |  ------------------
  ------------------
  222|   471k|  g->str.tab = newtab;
  223|   471k|  g->str.mask = newmask;
  224|   471k|}
lj_str_new:
  324|   818M|{
  325|   818M|  global_State *g = G(L);
  ------------------
  |  |  705|   818M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   818M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  326|   818M|  if (lenx-1 < LJ_MAX_STR-1) {
  ------------------
  |  |   54|   818M|#define LJ_MAX_STR	LJ_MAX_MEM32	/* Max. string length. */
  |  |  ------------------
  |  |  |  |   49|   818M|#define LJ_MAX_MEM32	0x7fffff00	/* Max. 32 bit memory allocation. */
  |  |  ------------------
  ------------------
  |  Branch (326:7): [True: 817M, False: 163k]
  ------------------
  327|   817M|    MSize len = (MSize)lenx;
  328|   817M|    StrHash hash = hash_sparse(g->str.seed, str, len);
  329|   817M|    MSize coll = 0;
  330|   817M|    int hashalg = 0;
  331|       |    /* Check if the string has already been interned. */
  332|   817M|    GCobj *o = gcref(g->str.tab[hash & g->str.mask]);
  ------------------
  |  |   67|   817M|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  333|   817M|#if LUAJIT_SECURITY_STRHASH
  334|   817M|    if (LJ_UNLIKELY((uintptr_t)o & 1)) {  /* Secondary hash for this chain? */
  ------------------
  |  |  146|   817M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.80M, False: 816M]
  |  |  ------------------
  ------------------
  335|  1.80M|      hashalg = 1;
  336|  1.80M|      hash = hash_dense(g->str.seed, hash, str, len);
  337|  1.80M|      o = (GCobj *)(gcrefu(g->str.tab[hash & g->str.mask]) & ~(uintptr_t)1);
  ------------------
  |  |   69|  1.80M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  338|  1.80M|    }
  339|   817M|#endif
  340|  1.32G|    while (o != NULL) {
  ------------------
  |  Branch (340:12): [True: 547M, False: 772M]
  ------------------
  341|   547M|      GCstr *sx = gco2str(o);
  ------------------
  |  |  765|   547M|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|   547M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   547M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   547M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 547M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   547M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  342|   547M|      if (sx->hash == hash && sx->len == len) {
  ------------------
  |  Branch (342:11): [True: 46.7M, False: 501M]
  |  Branch (342:31): [True: 46.2M, False: 414k]
  ------------------
  343|  46.2M|	if (memcmp(str, strdata(sx), len) == 0) {
  ------------------
  |  |  316|  46.2M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  |  Branch (343:6): [True: 45.5M, False: 714k]
  ------------------
  344|  45.5M|	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   37|  45.5M|#define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   36|  45.5M|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  45.5M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  45.5M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  45.5M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define isdead(g, v)	((v)->gch.marked & otherwhite(g) & LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|  45.5M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|  45.5M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|  45.5M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (37:22): [True: 425k, False: 45.1M]
  |  |  ------------------
  ------------------
              	  if (isdead(g, o)) flipwhite(o);  /* Resurrect if dead. */
  ------------------
  |  |   43|   425k|#define flipwhite(x)	((x)->gch.marked ^= LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|   425k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|   425k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|   425k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  345|  45.5M|	  return sx;  /* Return existing string. */
  346|  45.5M|	}
  347|   714k|	coll++;
  348|   714k|      }
  349|   502M|      coll++;
  350|   502M|      o = gcnext(o);
  ------------------
  |  |   90|   502M|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|   502M|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  351|   502M|    }
  352|   772M|#if LUAJIT_SECURITY_STRHASH
  353|       |    /* Rehash chain if there are too many collisions. */
  354|   772M|    if (LJ_UNLIKELY(coll > LJ_STR_MAXCOLL) && !hashalg) {
  ------------------
  |  |  146|  1.54G|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 757, False: 772M]
  |  |  ------------------
  ------------------
  |  Branch (354:47): [True: 757, False: 0]
  ------------------
  355|    757|      return lj_str_rehash_chain(L, hash, str, len);
  356|    757|    }
  357|   772M|#endif
  358|       |    /* Otherwise allocate a new string. */
  359|   772M|    return lj_str_alloc(L, str, len, hash, hashalg);
  360|   772M|  } else {
  361|   163k|    if (lenx)
  ------------------
  |  Branch (361:9): [True: 0, False: 163k]
  ------------------
  362|      0|      lj_err_msg(L, LJ_ERR_STROV);
  363|   163k|    return &g->strempty;
  364|   163k|  }
  365|   818M|}
lj_str_free:
  368|   772M|{
  369|   772M|  g->str.num--;
  370|   772M|  lj_mem_free(g, s, lj_str_size(s->len));
  ------------------
  |  |   29|   772M|#define lj_str_size(len)	(sizeof(GCstr) + (((len)+4) & ~(MSize)3))
  ------------------
  371|   772M|}
lj_str_init:
  374|  13.6k|{
  375|  13.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  13.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  13.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  376|  13.6k|  g->str.seed = lj_prng_u64(&g->prng);
  377|  13.6k|  lj_str_resize(L, LJ_MIN_STRTAB-1);
  ------------------
  |  |   79|  13.6k|#define LJ_MIN_STRTAB	256		/* Min. string table size (pow2). */
  ------------------
  378|  13.6k|}
lj_str.c:hash_sparse:
   86|   817M|{
   87|       |  /* Constants taken from lookup3 hash by Bob Jenkins. */
   88|   817M|  StrHash a, b, h = len ^ (StrHash)seed;
   89|   817M|  if (len >= 4) {  /* Caveat: unaligned access! */
  ------------------
  |  Branch (89:7): [True: 802M, False: 15.4M]
  ------------------
   90|   802M|    a = lj_getu32(str);
   91|   802M|    h ^= lj_getu32(str+len-4);
   92|   802M|    b = lj_getu32(str+(len>>1)-2);
   93|   802M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|   802M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   94|   802M|    b += lj_getu32(str+(len>>2)-1);
   95|   802M|  } else {
   96|  15.4M|    a = *(const uint8_t *)str;
   97|  15.4M|    h ^= *(const uint8_t *)(str+len-1);
   98|  15.4M|    b = *(const uint8_t *)(str+(len>>1));
   99|  15.4M|    h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  15.4M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  100|  15.4M|  }
  101|   817M|  a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|   817M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  102|   817M|  b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|   817M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  103|   817M|  h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|   817M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  104|   817M|  return h;
  105|   817M|}
lj_str.c:hash_dense:
  111|  1.82M|{
  112|  1.82M|  StrHash b = lj_bswap(lj_rol(h ^ (StrHash)(seed >> 32), 4));
  ------------------
  |  |  113|  1.82M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  113|  1.82M|  if (len > 12) {
  ------------------
  |  Branch (113:7): [True: 1.78M, False: 36.4k]
  ------------------
  114|  1.78M|    StrHash a = (StrHash)seed;
  115|  1.78M|    const char *pe = str+len-12, *p = pe, *q = str;
  116|  5.38M|    do {
  117|  5.38M|      a += lj_getu32(p);
  118|  5.38M|      b += lj_getu32(p+4);
  119|  5.38M|      h += lj_getu32(p+8);
  120|  5.38M|      p = q; q += 12;
  121|  5.38M|      h ^= b; h -= lj_rol(b, 14);
  ------------------
  |  |  113|  5.38M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  122|  5.38M|      a ^= h; a -= lj_rol(h, 11);
  ------------------
  |  |  113|  5.38M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  123|  5.38M|      b ^= a; b -= lj_rol(a, 25);
  ------------------
  |  |  113|  5.38M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  124|  5.38M|    } while (p < pe);
  ------------------
  |  Branch (124:14): [True: 3.60M, False: 1.78M]
  ------------------
  125|  1.78M|    h ^= b; h -= lj_rol(b, 16);
  ------------------
  |  |  113|  1.78M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  126|  1.78M|    a ^= h; a -= lj_rol(h, 4);
  ------------------
  |  |  113|  1.78M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  127|  1.78M|    b ^= a; b -= lj_rol(a, 14);
  ------------------
  |  |  113|  1.78M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
  128|  1.78M|  }
  129|  1.82M|  return b;
  130|  1.82M|}
lj_str.c:lj_str_rehash_chain:
  230|    757|{
  231|    757|  global_State *g = G(L);
  ------------------
  |  |  705|    757|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|    757|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  232|    757|  int ow = g->gc.state == GCSsweepstring ? otherwhite(g) : 0;  /* Sweeping? */
  ------------------
  |  |   36|     53|#define otherwhite(g)	(g->gc.currentwhite ^ LJ_GC_WHITES)
  |  |  ------------------
  |  |  |  |   27|     53|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   17|     53|#define LJ_GC_WHITE0	0x01
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   18|     53|#define LJ_GC_WHITE1	0x02
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (232:12): [True: 53, False: 704]
  ------------------
  233|    757|  GCRef *strtab = g->str.tab;
  234|    757|  MSize strmask = g->str.mask;
  235|    757|  GCobj *o = gcref(strtab[hashc & strmask]);
  ------------------
  |  |   67|    757|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  236|    757|  setgcrefp(strtab[hashc & strmask], (void *)((uintptr_t)1));
  ------------------
  |  |   75|    757|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  237|    757|  g->str.second = 1;
  238|  15.0k|  while (o) {
  ------------------
  |  Branch (238:10): [True: 14.2k, False: 757]
  ------------------
  239|  14.2k|    uintptr_t u;
  240|  14.2k|    GCobj *next = gcnext(o);
  ------------------
  |  |   90|  14.2k|#define gcnext(gc)	(gcref((gc)->gch.nextgc))
  |  |  ------------------
  |  |  |  |   67|  14.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  |  |  ------------------
  ------------------
  241|  14.2k|    GCstr *s = gco2str(o);
  ------------------
  |  |  765|  14.2k|#define gco2str(o)	check_exp((o)->gch.gct == ~LJ_TSTR, &(o)->str)
  |  |  ------------------
  |  |  |  |  367|  14.2k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  14.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  14.2k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 14.2k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  14.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  242|      0|    StrHash hash;
  243|  14.2k|    if (ow) {  /* Must sweep while rechaining. */
  ------------------
  |  Branch (243:9): [True: 908, False: 13.3k]
  ------------------
  244|    908|      if (((o->gch.marked ^ LJ_GC_WHITES) & ow)) {  /* String alive? */
  ------------------
  |  |   27|    908|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   17|    908|#define LJ_GC_WHITE0	0x01
  |  |  ------------------
  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  ------------------
  |  |  |  |   18|    908|#define LJ_GC_WHITE1	0x02
  |  |  ------------------
  ------------------
  |  Branch (244:11): [True: 336, False: 572]
  ------------------
  245|    336|	lj_assertG(!isdead(g, o) || (o->gch.marked & LJ_GC_FIXED),
  ------------------
  |  |  364|    336|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    336|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 336, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    336|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  246|    336|		   "sweep of undead string");
  247|    336|	makewhite(g, o);
  ------------------
  |  |   42|    336|  ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   28|    336|#define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    336|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    336|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    336|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define LJ_GC_COLORS	(LJ_GC_WHITES | LJ_GC_BLACK)
  |  |  |  |  ------------------
  |  |  |  |  |  |   19|    336|#define LJ_GC_BLACK	0x04
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 ((x)->gch.marked = ((x)->gch.marked & (uint8_t)~LJ_GC_COLORS) | curwhite(g))
  |  |  ------------------
  |  |  |  |   39|    336|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|    336|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|    336|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|    336|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|    572|      } else {  /* Free dead string. */
  249|    572|	lj_assertG(isdead(g, o) || ow == LJ_GC_SFIXED,
  ------------------
  |  |  364|    572|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|    572|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 572, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|    572|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  250|    572|		   "sweep of unlive string");
  251|    572|	lj_str_free(g, s);
  252|    572|	o = next;
  253|    572|	continue;
  254|    572|      }
  255|    908|    }
  256|  13.7k|    hash = s->hash;
  257|  13.7k|    if (!s->hashalg) {  /* Rehash with secondary hash. */
  ------------------
  |  Branch (257:9): [True: 13.6k, False: 11]
  ------------------
  258|  13.6k|      hash = hash_dense(g->str.seed, hash, strdata(s), s->len);
  ------------------
  |  |  316|  13.6k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  259|  13.6k|      s->hash = hash;
  260|  13.6k|      s->hashalg = 1;
  261|  13.6k|    }
  262|       |    /* Rechain. */
  263|  13.7k|    hash &= strmask;
  264|  13.7k|    u = gcrefu(strtab[hash]);
  ------------------
  |  |   69|  13.7k|#define gcrefu(r)	((r).gcptr64)
  ------------------
  265|  13.7k|    setgcrefp(o->gch.nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|  13.7k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  266|  13.7k|    setgcrefp(strtab[hash], ((uintptr_t)o | (u & 1)));
  ------------------
  |  |   75|  13.7k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  267|  13.7k|    o = next;
  268|  13.7k|  }
  269|       |  /* Try to insert the pending string again. */
  270|    757|  return lj_str_new(L, str, len);
  271|    757|}
lj_str.c:lj_str_alloc:
  286|   772M|{
  287|   772M|  GCstr *s = lj_mem_newt(L, lj_str_size(len), GCstr);
  ------------------
  |  |  133|   772M|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|   772M|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  288|   772M|  global_State *g = G(L);
  ------------------
  |  |  705|   772M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   772M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|   772M|  uintptr_t u;
  290|   772M|  newwhite(g, s);
  ------------------
  |  |   40|   772M|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|   772M|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|   772M|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|   772M|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|   772M|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|   772M|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|   772M|  s->gct = ~LJ_TSTR;
  ------------------
  |  |  264|   772M|#define LJ_TSTR			(~4u)
  ------------------
  292|   772M|  s->len = len;
  293|   772M|  s->hash = hash;
  294|       |#ifndef STRID_RESEED_INTERVAL
  295|       |  s->sid = g->str.id++;
  296|       |#elif STRID_RESEED_INTERVAL
  297|   772M|  if (!g->str.idreseed--) {
  ------------------
  |  Branch (297:7): [True: 6.02M, False: 766M]
  ------------------
  298|  6.02M|    uint64_t r = lj_prng_u64(&g->prng);
  299|  6.02M|    g->str.id = (StrID)r;
  300|  6.02M|    g->str.idreseed = (uint8_t)(r >> (64 - STRID_RESEED_INTERVAL));
  ------------------
  |  |  276|  6.02M|#define STRID_RESEED_INTERVAL	8
  ------------------
  301|  6.02M|  }
  302|   772M|  s->sid = g->str.id++;
  303|       |#else
  304|       |  s->sid = (StrID)lj_prng_u64(&g->prng);
  305|       |#endif
  306|   772M|  s->reserved = 0;
  307|   772M|  s->hashalg = (uint8_t)hashalg;
  308|       |  /* Clear last 4 bytes of allocated memory. Implies zero-termination, too. */
  309|   772M|  *(uint32_t *)(strdatawr(s)+(len & ~(MSize)3)) = 0;
  ------------------
  |  |  317|   772M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  310|   772M|  memcpy(strdatawr(s), str, len);
  ------------------
  |  |  317|   772M|#define strdatawr(s)	((char *)((s)+1))
  ------------------
  311|       |  /* Add to string hash table. */
  312|   772M|  hash &= g->str.mask;
  313|   772M|  u = gcrefu(g->str.tab[hash]);
  ------------------
  |  |   69|   772M|#define gcrefu(r)	((r).gcptr64)
  ------------------
  314|   772M|  setgcrefp(s->nextgc, (u & ~(uintptr_t)1));
  ------------------
  |  |   75|   772M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  315|       |  /* NOBARRIER: The string table is a GC root. */
  316|   772M|  setgcrefp(g->str.tab[hash], ((uintptr_t)s | (u & 1)));
  ------------------
  |  |   75|   772M|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  317|   772M|  if (g->str.num++ > g->str.mask)  /* Allow a 100% load factor. */
  ------------------
  |  Branch (317:7): [True: 598k, False: 771M]
  ------------------
  318|   598k|    lj_str_resize(L, (g->str.mask<<1)+1);  /* Grow string table. */
  319|   772M|  return s;  /* Return newly interned string. */
  320|   772M|}

lj_strfmt_parse:
   35|  46.6M|{
   36|  46.6M|  const uint8_t *p = fs->p, *e = fs->e;
   37|  46.6M|  fs->str = (const char *)p;
   38|   147M|  for (; p < e; p++) {
  ------------------
  |  Branch (38:10): [True: 128M, False: 18.6M]
  ------------------
   39|   128M|    if (*p == '%') {  /* Escape char? */
  ------------------
  |  Branch (39:9): [True: 28.0M, False: 100M]
  ------------------
   40|  28.0M|      if (p[1] == '%') {  /* '%%'? */
  ------------------
  |  Branch (40:11): [True: 0, False: 28.0M]
  ------------------
   41|      0|	fs->p = ++p+1;
   42|      0|	goto retlit;
   43|  28.0M|      } else {
   44|  28.0M|	SFormat sf = 0;
   45|  28.0M|	uint32_t c;
   46|  28.0M|	if (p != (const uint8_t *)fs->str)
  ------------------
  |  Branch (46:6): [True: 10.1M, False: 17.8M]
  ------------------
   47|  10.1M|	  break;
   48|  17.9M|	for (p++; (uint32_t)*p - ' ' <= (uint32_t)('0' - ' '); p++) {
  ------------------
  |  Branch (48:12): [True: 99.2k, False: 17.8M]
  ------------------
   49|       |	  /* Parse flags. */
   50|  99.2k|	  if (*p == '-') sf |= STRFMT_F_LEFT;
  ------------------
  |  |   37|    283|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (50:8): [True: 283, False: 98.9k]
  ------------------
   51|  98.9k|	  else if (*p == '+') sf |= STRFMT_F_PLUS;
  ------------------
  |  |   38|    199|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (51:13): [True: 199, False: 98.7k]
  ------------------
   52|  98.7k|	  else if (*p == '0') sf |= STRFMT_F_ZERO;
  ------------------
  |  |   39|    190|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (52:13): [True: 190, False: 98.5k]
  ------------------
   53|  98.5k|	  else if (*p == ' ') sf |= STRFMT_F_SPACE;
  ------------------
  |  |   40|    169|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (53:13): [True: 169, False: 98.3k]
  ------------------
   54|  98.3k|	  else if (*p == '#') sf |= STRFMT_F_ALT;
  ------------------
  |  |   41|  47.1k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (54:13): [True: 47.1k, False: 51.1k]
  ------------------
   55|  51.1k|	  else break;
   56|  99.2k|	}
   57|  17.8M|	if ((uint32_t)*p - '0' < 10) {  /* Parse width. */
  ------------------
  |  Branch (57:6): [True: 3.27k, False: 17.8M]
  ------------------
   58|  3.27k|	  uint32_t width = (uint32_t)*p++ - '0';
   59|  3.27k|	  if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (59:8): [True: 667, False: 2.60k]
  ------------------
   60|    667|	    width = (uint32_t)*p++ - '0' + width*10;
   61|  3.27k|	  sf |= (width << STRFMT_SH_WIDTH);
  ------------------
  |  |   45|  3.27k|#define STRFMT_SH_WIDTH	16
  ------------------
   62|  3.27k|	}
   63|  17.8M|	if (*p == '.') {  /* Parse precision. */
  ------------------
  |  Branch (63:6): [True: 54.4k, False: 17.8M]
  ------------------
   64|  54.4k|	  uint32_t prec = 0;
   65|  54.4k|	  p++;
   66|  54.4k|	  if ((uint32_t)*p - '0' < 10) {
  ------------------
  |  Branch (66:8): [True: 54.4k, False: 0]
  ------------------
   67|  54.4k|	    prec = (uint32_t)*p++ - '0';
   68|  54.4k|	    if ((uint32_t)*p - '0' < 10)
  ------------------
  |  Branch (68:10): [True: 45.2k, False: 9.16k]
  ------------------
   69|  45.2k|	      prec = (uint32_t)*p++ - '0' + prec*10;
   70|  54.4k|	  }
   71|  54.4k|	  sf |= ((prec+1) << STRFMT_SH_PREC);
  ------------------
  |  |   46|  54.4k|#define STRFMT_SH_PREC	24
  ------------------
   72|  54.4k|	}
   73|       |	/* Parse conversion. */
   74|  17.8M|	c = (uint32_t)*p - 'A';
   75|  17.8M|	if (LJ_LIKELY(c <= (uint32_t)('x' - 'A'))) {
  ------------------
  |  |  145|  17.8M|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 17.8M, False: 5]
  |  |  ------------------
  ------------------
   76|  17.8M|	  uint32_t sx = strfmt_map[c];
   77|  17.8M|	  if (sx) {
  ------------------
  |  Branch (77:8): [True: 17.8M, False: 1]
  ------------------
   78|  17.8M|	    fs->p = p+1;
   79|  17.8M|	    return (sf | sx | ((c & 0x20) ? 0 : STRFMT_F_UPPER));
  ------------------
  |  |   42|  2.63k|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (79:25): [True: 17.8M, False: 2.63k]
  ------------------
   80|  17.8M|	  }
   81|  17.8M|	}
   82|       |	/* Return error location. */
   83|      6|	if (*p >= 32) p++;
  ------------------
  |  Branch (83:6): [True: 6, False: 0]
  ------------------
   84|      6|	fs->len = (MSize)(p - (const uint8_t *)fs->str);
   85|      6|	fs->p = fs->e;
   86|      6|	return STRFMT_ERR;
   87|  17.8M|      }
   88|  28.0M|    }
   89|   128M|  }
   90|  28.8M|  fs->p = p;
   91|  28.8M|retlit:
   92|  28.8M|  fs->len = (MSize)(p - (const uint8_t *)fs->str);
   93|  28.8M|  return fs->len ? STRFMT_LIT : STRFMT_EOF;
  ------------------
  |  Branch (93:10): [True: 16.2M, False: 12.5M]
  ------------------
   94|  28.8M|}
lj_strfmt_wint:
  108|   593M|{
  109|   593M|  uint32_t u = (uint32_t)k;
  110|   593M|  if (k < 0) { u = ~u+1u; *p++ = '-'; }
  ------------------
  |  Branch (110:7): [True: 59.8k, False: 593M]
  ------------------
  111|   593M|  if (u < 10000) {
  ------------------
  |  Branch (111:7): [True: 76.8M, False: 516M]
  ------------------
  112|  76.8M|    if (u < 10) goto dig1;
  ------------------
  |  Branch (112:9): [True: 339k, False: 76.5M]
  ------------------
  113|  76.5M|    if (u < 100) goto dig2;
  ------------------
  |  Branch (113:9): [True: 1.26M, False: 75.2M]
  ------------------
  114|  75.2M|    if (u < 1000) goto dig3;
  ------------------
  |  Branch (114:9): [True: 8.45M, False: 66.7M]
  ------------------
  115|   516M|  } else {
  116|   516M|    uint32_t v = u / 10000; u -= v * 10000;
  117|   516M|    if (v < 10000) {
  ------------------
  |  Branch (117:9): [True: 516M, False: 151k]
  ------------------
  118|   516M|      if (v < 10) goto dig5;
  ------------------
  |  Branch (118:11): [True: 261M, False: 255M]
  ------------------
  119|   255M|      if (v < 100) goto dig6;
  ------------------
  |  Branch (119:11): [True: 212M, False: 42.1M]
  ------------------
  120|  42.1M|      if (v < 1000) goto dig7;
  ------------------
  |  Branch (120:11): [True: 41.7M, False: 350k]
  ------------------
  121|  42.1M|    } else {
  122|   151k|      uint32_t w = v / 10000; v -= w * 10000;
  123|   151k|      if (w >= 10) WINT_R(w, 10, 10)
  ------------------
  |  |   99|      0|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  |  Branch (123:11): [True: 0, False: 151k]
  ------------------
  124|   151k|      *p++ = (char)('0'+w);
  125|   151k|    }
  126|   501k|    WINT_R(v, 23, 1000)
  ------------------
  |  |   99|   501k|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  127|  42.2M|    dig7: WINT_R(v, 12, 100)
  ------------------
  |  |   99|  42.2M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  128|   255M|    dig6: WINT_R(v, 10, 10)
  ------------------
  |  |   99|   255M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  129|   516M|    dig5: *p++ = (char)('0'+v);
  130|   516M|  }
  131|   583M|  WINT_R(u, 23, 1000)
  ------------------
  |  |   99|   583M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  132|   591M|  dig3: WINT_R(u, 12, 100)
  ------------------
  |  |   99|   591M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  133|   592M|  dig2: WINT_R(u, 10, 10)
  ------------------
  |  |   99|   592M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
  134|   593M|  dig1: *p++ = (char)('0'+u);
  135|   593M|  return p;
  136|   592M|}
lj_strfmt_wptr:
  141|      3|{
  142|      3|  ptrdiff_t x = (ptrdiff_t)v;
  143|      3|  MSize i, n = STRFMT_MAXBUF_PTR;
  ------------------
  |  |   73|      3|#define STRFMT_MAXBUF_PTR	(2+2*sizeof(ptrdiff_t))  /* "0x" + hex ptr. */
  ------------------
  144|      3|  if (x == 0) {
  ------------------
  |  Branch (144:7): [True: 0, False: 3]
  ------------------
  145|      0|    *p++ = 'N'; *p++ = 'U'; *p++ = 'L'; *p++ = 'L';
  146|      0|    return p;
  147|      0|  }
  148|      3|#if LJ_64
  149|       |  /* Shorten output for 64 bit pointers. */
  150|      3|  n = 2+2*4+((x >> 32) ? 2+2*(lj_fls((uint32_t)(x >> 32))>>3) : 0);
  ------------------
  |  |  149|      3|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (150:14): [True: 3, False: 0]
  ------------------
  151|      3|#endif
  152|      3|  p[0] = '0';
  153|      3|  p[1] = 'x';
  154|     39|  for (i = n-1; i >= 2; i--, x >>= 4)
  ------------------
  |  Branch (154:17): [True: 36, False: 3]
  ------------------
  155|     36|    p[i] = "0123456789abcdef"[(x & 15)];
  156|      3|  return p+n;
  157|      3|}
lj_strfmt_wuleb128:
  161|  2.04M|{
  162|  2.05M|  for (; v >= 0x80; v >>= 7)
  ------------------
  |  Branch (162:10): [True: 8.04k, False: 2.04M]
  ------------------
  163|  8.04k|    *p++ = (char)((v & 0x7f) | 0x80);
  164|  2.04M|  *p++ = (char)v;
  165|  2.04M|  return p;
  166|  2.04M|}
lj_strfmt_wstrnum:
  170|  2.00M|{
  171|  2.00M|  SBuf *sb;
  172|  2.00M|  if (tvisstr(o)) {
  ------------------
  |  |  795|  2.00M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  2.00M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.00M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.20M, False: 803k]
  |  |  ------------------
  ------------------
  173|  1.20M|    *lenp = strV(o)->len;
  ------------------
  |  |  859|  1.20M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.20M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.20M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.20M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.20M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.20M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  174|  1.20M|    return strVdata(o);
  ------------------
  |  |  318|  1.20M|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  2.40M|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 1.20M, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|  1.20M|  } else if (tvisbuf(o)) {
  ------------------
  |  |   65|   803k|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|  1.60M|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|  1.60M|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|   803k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|   803k|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 803k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  176|      0|    SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  177|      0|    *lenp = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  178|      0|    return sbx->r;
  179|   803k|  } else if (tvisint(o)) {
  ------------------
  |  |  803|   803k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.60M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  180|      0|    sb = lj_strfmt_putint(lj_buf_tmp_(L), intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  181|   803k|  } else if (tvisnum(o)) {
  ------------------
  |  |  804|   803k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   803k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   803k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   803k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 797k, False: 6.04k]
  |  |  ------------------
  ------------------
  182|   797k|    sb = lj_strfmt_putfnum(lj_buf_tmp_(L), STRFMT_G14, o->n);
  ------------------
  |  |   67|   797k|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|   797k|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|   797k|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|   797k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  183|   797k|  } else {
  184|  6.04k|    return NULL;
  185|  6.04k|  }
  186|   797k|  *lenp = sbuflen(sb);
  ------------------
  |  |   36|   797k|#define sbuflen(sb)		((MSize)((sb)->w - (sb)->b))
  ------------------
  187|   797k|  return sb->b;
  188|  2.00M|}
lj_strfmt_putint:
  194|  1.78M|{
  195|  1.78M|  sb->w = lj_strfmt_wint(lj_buf_more(sb, STRFMT_MAXBUF_INT), k);
  ------------------
  |  |   71|  1.78M|#define STRFMT_MAXBUF_INT	(1+10)  /* Sign + int32_t in decimal. */
  ------------------
  196|  1.78M|  return sb;
  197|  1.78M|}
lj_strfmt_putnum:
  202|   914k|{
  203|   914k|  return lj_strfmt_putfnum(sb, STRFMT_G14, o->n);
  ------------------
  |  |   67|   914k|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|   914k|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|   914k|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|   914k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  204|   914k|}
lj_strfmt_putfchar:
  252|      1|{
  253|      1|  MSize width = STRFMT_WIDTH(sf);
  ------------------
  |  |   49|      1|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|      1|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
  254|      1|  char *w = lj_buf_more(sb, width > 1 ? width : 1);
  ------------------
  |  Branch (254:29): [True: 0, False: 1]
  ------------------
  255|      1|  if ((sf & STRFMT_F_LEFT)) *w++ = (char)c;
  ------------------
  |  |   37|      1|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (255:7): [True: 0, False: 1]
  ------------------
  256|      1|  while (width-- > 1) *w++ = ' ';
  ------------------
  |  Branch (256:10): [True: 0, False: 1]
  ------------------
  257|      1|  if (!(sf & STRFMT_F_LEFT)) *w++ = (char)c;
  ------------------
  |  |   37|      1|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (257:7): [True: 1, False: 0]
  ------------------
  258|      1|  sb->w = w;
  259|      1|  return sb;
  260|      1|}
lj_strfmt_putfxint:
  285|  2.07M|{
  286|  2.07M|  char buf[STRFMT_MAXBUF_XINT], *q = buf + sizeof(buf), *w;
  287|  2.07M|#ifdef LUA_USE_ASSERT
  288|  2.07M|  char *ws;
  289|  2.07M|#endif
  290|  2.07M|  MSize prefix = 0, len, prec, pprec, width, need;
  291|       |
  292|       |  /* Figure out signed prefixes. */
  293|  2.07M|  if (STRFMT_TYPE(sf) == STRFMT_INT) {
  ------------------
  |  |   48|  2.07M|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  |  Branch (293:7): [True: 2.07M, False: 0]
  ------------------
  294|  2.07M|    if ((int64_t)k < 0) {
  ------------------
  |  Branch (294:9): [True: 0, False: 2.07M]
  ------------------
  295|      0|      k = ~k+1u;
  296|      0|      prefix = 256 + '-';
  297|  2.07M|    } else if ((sf & STRFMT_F_PLUS)) {
  ------------------
  |  |   38|  2.07M|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (297:16): [True: 0, False: 2.07M]
  ------------------
  298|      0|      prefix = 256 + '+';
  299|  2.07M|    } else if ((sf & STRFMT_F_SPACE)) {
  ------------------
  |  |   40|  2.07M|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:16): [True: 0, False: 2.07M]
  ------------------
  300|      0|      prefix = 256 + ' ';
  301|      0|    }
  302|  2.07M|  }
  303|       |
  304|       |  /* Convert number and store to fixed-size buffer in reverse order. */
  305|  2.07M|  prec = STRFMT_PREC(sf);
  ------------------
  |  |   50|  2.07M|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  2.07M|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  306|  2.07M|  if ((int32_t)prec >= 0) sf &= ~STRFMT_F_ZERO;
  ------------------
  |  |   39|      0|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (306:7): [True: 0, False: 2.07M]
  ------------------
  307|  2.07M|  if (k == 0) {  /* Special-case zero argument. */
  ------------------
  |  Branch (307:7): [True: 1, False: 2.07M]
  ------------------
  308|      1|    if (prec != 0 ||
  ------------------
  |  Branch (308:9): [True: 1, False: 0]
  ------------------
  309|      1|	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   29|      0|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
              	(sf & (STRFMT_T_OCT|STRFMT_F_ALT)) == (STRFMT_T_OCT|STRFMT_F_ALT))
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (309:2): [True: 0, False: 0]
  ------------------
  310|      1|      *--q = '0';
  311|  2.07M|  } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   28|  2.07M|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
                } else if (!(sf & (STRFMT_T_HEX|STRFMT_T_OCT))) {  /* Decimal. */
  ------------------
  |  |   29|  2.07M|#define STRFMT_T_OCT	0x0020	/* STRFMT_UINT */
  ------------------
  |  Branch (311:14): [True: 2.07M, False: 0]
  ------------------
  312|  2.07M|    uint32_t k2;
  313|  2.07M|    while ((k >> 32)) { *--q = (char)('0' + k % 10); k /= 10; }
  ------------------
  |  Branch (313:12): [True: 0, False: 2.07M]
  ------------------
  314|  2.07M|    k2 = (uint32_t)k;
  315|  2.08M|    do { *--q = (char)('0' + k2 % 10); k2 /= 10; } while (k2);
  ------------------
  |  Branch (315:59): [True: 5.12k, False: 2.07M]
  ------------------
  316|  2.07M|  } else if ((sf & STRFMT_T_HEX)) {  /* Hex. */
  ------------------
  |  |   28|      0|#define STRFMT_T_HEX	0x0010	/* STRFMT_UINT */
  ------------------
  |  Branch (316:14): [True: 0, False: 0]
  ------------------
  317|      0|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEF" :
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (317:26): [True: 0, False: 0]
  ------------------
  318|      0|						 "0123456789abcdef";
  319|      0|    do { *--q = hexdig[(k & 15)]; k >>= 4; } while (k);
  ------------------
  |  Branch (319:53): [True: 0, False: 0]
  ------------------
  320|      0|    if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
                  if ((sf & STRFMT_F_ALT)) prefix = 512 + ((sf & STRFMT_F_UPPER) ? 'X' : 'x');
  ------------------
  |  |   42|      0|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (320:9): [True: 0, False: 0]
  |  Branch (320:46): [True: 0, False: 0]
  ------------------
  321|      0|  } else {  /* Octal. */
  322|      0|    do { *--q = (char)('0' + (uint32_t)(k & 7)); k >>= 3; } while (k);
  ------------------
  |  Branch (322:68): [True: 0, False: 0]
  ------------------
  323|      0|    if ((sf & STRFMT_F_ALT)) *--q = '0';
  ------------------
  |  |   41|      0|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (323:9): [True: 0, False: 0]
  ------------------
  324|      0|  }
  325|       |
  326|       |  /* Calculate sizes. */
  327|  2.07M|  len = (MSize)(buf + sizeof(buf) - q);
  328|  2.07M|  if ((int32_t)len >= (int32_t)prec) prec = len;
  ------------------
  |  Branch (328:7): [True: 2.07M, False: 0]
  ------------------
  329|  2.07M|  width = STRFMT_WIDTH(sf);
  ------------------
  |  |   49|  2.07M|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|  2.07M|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
  330|  2.07M|  pprec = prec + (prefix >> 8);
  331|  2.07M|  need = width > pprec ? width : pprec;
  ------------------
  |  Branch (331:10): [True: 0, False: 2.07M]
  ------------------
  332|  2.07M|  w = lj_buf_more(sb, need);
  333|  2.07M|#ifdef LUA_USE_ASSERT
  334|  2.07M|  ws = w;
  335|  2.07M|#endif
  336|       |
  337|       |  /* Format number with leading/trailing whitespace and zeros. */
  338|  2.07M|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   37|  2.07M|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == 0)
  ------------------
  |  |   39|  2.07M|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (338:7): [True: 2.07M, False: 0]
  ------------------
  339|  2.07M|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (339:12): [True: 0, False: 2.07M]
  ------------------
  340|  2.07M|  if (prefix) {
  ------------------
  |  Branch (340:7): [True: 0, False: 2.07M]
  ------------------
  341|      0|    if ((char)prefix >= 'X') *w++ = '0';
  ------------------
  |  Branch (341:9): [True: 0, False: 0]
  ------------------
  342|      0|    *w++ = (char)prefix;
  343|      0|  }
  344|  2.07M|  if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   37|  2.07M|#define STRFMT_F_LEFT	0x0100
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  2.07M|#define STRFMT_F_ZERO	0x0400
  ------------------
                if ((sf & (STRFMT_F_LEFT|STRFMT_F_ZERO)) == STRFMT_F_ZERO)
  ------------------
  |  |   39|  2.07M|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (344:7): [True: 0, False: 2.07M]
  ------------------
  345|      0|    while (width-- > pprec) *w++ = '0';
  ------------------
  |  Branch (345:12): [True: 0, False: 0]
  ------------------
  346|  2.07M|  while (prec-- > len) *w++ = '0';
  ------------------
  |  Branch (346:10): [True: 0, False: 2.07M]
  ------------------
  347|  4.15M|  while (q < buf + sizeof(buf)) *w++ = *q++;  /* Add number itself. */
  ------------------
  |  Branch (347:10): [True: 2.08M, False: 2.07M]
  ------------------
  348|  2.07M|  if ((sf & STRFMT_F_LEFT))
  ------------------
  |  |   37|  2.07M|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (348:7): [True: 0, False: 2.07M]
  ------------------
  349|      0|    while (width-- > pprec) *w++ = ' ';
  ------------------
  |  Branch (349:12): [True: 0, False: 0]
  ------------------
  350|       |
  351|  2.07M|  lj_assertX(need == (MSize)(w - ws), "miscalculated format size");
  ------------------
  |  |  366|  2.07M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.07M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 2.07M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.07M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  352|  2.07M|  sb->w = w;
  353|  2.07M|  return sb;
  354|  2.07M|}
lj_strfmt_putfnum_int:
  358|  1.78M|{
  359|  1.78M|  int64_t k = (int64_t)n;
  360|  1.78M|  if (checki32(k) && sf == STRFMT_INT)
  ------------------
  |  |  105|  3.56M|#define checki32(x)	((x) == (int32_t)(x))
  |  |  ------------------
  |  |  |  Branch (105:21): [True: 1.78M, False: 0]
  |  |  ------------------
  ------------------
  |  Branch (360:22): [True: 1.78M, False: 0]
  ------------------
  361|  1.78M|    return lj_strfmt_putint(sb, (int32_t)k);  /* Shortcut for plain %d. */
  362|      0|  else
  363|      0|    return lj_strfmt_putfxint(sb, sf, (uint64_t)k);
  364|  1.78M|}
lj_strfmt_putarg:
  379|   951k|{
  380|   951k|  int narg = (int)(L->top - L->base);
  381|   951k|  GCstr *fmt = lj_lib_checkstr(L, arg);
  382|   951k|  FormatState fs;
  383|   951k|  SFormat sf;
  384|   951k|  lj_strfmt_init(&fs, strdata(fmt), fmt->len);
  ------------------
  |  |  316|   951k|#define strdata(s)	((const char *)((s)+1))
  ------------------
  385|  2.81M|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (385:10): [True: 1.86M, False: 951k]
  ------------------
  386|  1.86M|    if (sf == STRFMT_LIT) {
  ------------------
  |  Branch (386:9): [True: 912k, False: 951k]
  ------------------
  387|   912k|      lj_buf_putmem(sb, fs.str, fs.len);
  388|   951k|    } else if (sf == STRFMT_ERR) {
  ------------------
  |  Branch (388:16): [True: 6, False: 951k]
  ------------------
  389|      6|      lj_err_callerv(L, LJ_ERR_STRFMT,
  390|      6|		     strdata(lj_str_new(L, fs.str, fs.len)));
  ------------------
  |  |  316|      6|#define strdata(s)	((const char *)((s)+1))
  ------------------
  391|   951k|    } else {
  392|   951k|      TValue *o = &L->base[arg++];
  393|   951k|      if (arg > narg)
  ------------------
  |  Branch (393:11): [True: 0, False: 951k]
  ------------------
  394|      0|	lj_err_arg(L, arg, LJ_ERR_NOVAL);
  395|   951k|      switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|   951k|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  396|   900k|      case STRFMT_INT:
  ------------------
  |  Branch (396:7): [True: 900k, False: 51.1k]
  ------------------
  397|   900k|	if (tvisint(o)) {
  ------------------
  |  |  803|   900k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.80M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  398|      0|	  int32_t k = intV(o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  399|      0|	  if (sf == STRFMT_INT)
  ------------------
  |  Branch (399:8): [True: 0, False: 0]
  ------------------
  400|      0|	    lj_strfmt_putint(sb, k);  /* Shortcut for plain %d. */
  401|      0|	  else
  402|      0|	    lj_strfmt_putfxint(sb, sf, k);
  403|      0|	  break;
  404|      0|	}
  405|   900k|#if LJ_HASFFI
  406|   900k|	if (tviscdata(o)) {
  ------------------
  |  |  799|   900k|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|   900k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|   900k|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 900k]
  |  |  ------------------
  ------------------
  407|      0|	  GCcdata *cd = cdataV(o);
  ------------------
  |  |  863|      0|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  408|      0|	  if (cd->ctypeid == CTID_INT64 || cd->ctypeid == CTID_UINT64) {
  ------------------
  |  Branch (408:8): [True: 0, False: 0]
  |  Branch (408:37): [True: 0, False: 0]
  ------------------
  409|      0|	    lj_strfmt_putfxint(sb, sf, *(uint64_t *)cdataptr(cd));
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  410|      0|	    break;
  411|      0|	  }
  412|      0|	}
  413|   900k|#endif
  414|   900k|	lj_strfmt_putfnum_int(sb, sf, lj_lib_checknum(L, arg));
  415|   900k|	break;
  416|      0|      case STRFMT_UINT:
  ------------------
  |  Branch (416:7): [True: 0, False: 951k]
  ------------------
  417|      0|	if (tvisint(o)) {
  ------------------
  |  |  803|      0|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|      0|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  418|      0|	  lj_strfmt_putfxint(sb, sf, intV(o));
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  419|      0|	  break;
  420|      0|	}
  421|      0|#if LJ_HASFFI
  422|      0|	if (tviscdata(o)) {
  ------------------
  |  |  799|      0|#define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tviscdata(o)	(itype(o) == LJ_TCDATA)
  |  |  ------------------
  |  |  |  |  270|      0|#define LJ_TCDATA		(~10u)
  |  |  ------------------
  |  |  |  Branch (799:22): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  423|      0|	  GCcdata *cd = cdataV(o);
  ------------------
  |  |  863|      0|#define cdataV(o)	check_exp(tviscdata(o), &gcval(o)->cd)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  424|      0|	  if (cd->ctypeid == CTID_INT64 || cd->ctypeid == CTID_UINT64) {
  ------------------
  |  Branch (424:8): [True: 0, False: 0]
  |  Branch (424:37): [True: 0, False: 0]
  ------------------
  425|      0|	    lj_strfmt_putfxint(sb, sf, *(uint64_t *)cdataptr(cd));
  ------------------
  |  |  360|      0|#define cdataptr(cd)	((void *)((cd)+1))
  ------------------
  426|      0|	    break;
  427|      0|	  }
  428|      0|	}
  429|      0|#endif
  430|      0|	lj_strfmt_putfnum_uint(sb, sf, lj_lib_checknum(L, arg));
  431|      0|	break;
  432|  50.2k|      case STRFMT_NUM:
  ------------------
  |  Branch (432:7): [True: 50.2k, False: 901k]
  ------------------
  433|  50.2k|	lj_strfmt_putfnum(sb, sf, lj_lib_checknum(L, arg));
  434|  50.2k|	break;
  435|    847|      case STRFMT_STR: {
  ------------------
  |  Branch (435:7): [True: 847, False: 951k]
  ------------------
  436|    847|	MSize len;
  437|    847|	const char *s;
  438|    847|	cTValue *mo;
  439|    847|	if (LJ_UNLIKELY(!tvisstr(o) && !tvisbuf(o)) && retry >= 0 &&
  ------------------
  |  |  146|  1.69k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 42, False: 805]
  |  |  |  Branch (146:44): [Folded - Ignored]
  |  |  |  Branch (146:44): [True: 0, False: 42]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 0, False: 0]
  |  |  |  Branch (146:44): [True: 42, False: 805]
  |  |  ------------------
  ------------------
  |  Branch (439:49): [True: 42, False: 0]
  ------------------
  440|    847|	    !tvisnil(mo = lj_meta_lookup(L, o, MM_tostring))) {
  ------------------
  |  |  782|     42|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (440:6): [True: 0, False: 42]
  ------------------
  441|       |	  /* Call __tostring metamethod once. */
  442|      0|	  copyTV(L, L->top++, mo);
  443|      0|	  copyTV(L, L->top++, o);
  444|      0|	  lua_call(L, 1, 1);
  445|      0|	  o = &L->base[arg-1];  /* Stack may have been reallocated. */
  446|      0|	  copyTV(L, o, --L->top);  /* Replace inline for retry. */
  447|      0|	  if (retry < 2) {  /* Global buffer may have been overwritten. */
  ------------------
  |  Branch (447:8): [True: 0, False: 0]
  ------------------
  448|      0|	    retry = 1;
  449|      0|	    break;
  450|      0|	  }
  451|      0|	}
  452|    847|	if (LJ_LIKELY(tvisstr(o))) {
  ------------------
  |  |  145|    847|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 805, False: 42]
  |  |  ------------------
  ------------------
  453|    805|	  len = strV(o)->len;
  ------------------
  |  |  859|    805|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|    805|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    805|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    805|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 805, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    805|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  454|    805|	  s = strVdata(o);
  ------------------
  |  |  318|    805|#define strVdata(o)	strdata(strV(o))
  |  |  ------------------
  |  |  |  |  316|  1.61k|#define strdata(s)	((const char *)((s)+1))
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (316:37): [True: 805, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  455|    805|#if LJ_HASBUFFER
  456|    805|	} else if (tvisbuf(o)) {
  ------------------
  |  |   65|     42|  (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  592|     84|#define LJ_HASBUFFER		1
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (592:23): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  801|     84|#define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|     42|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisudata(o)	(itype(o) == LJ_TUDATA)
  |  |  |  |  ------------------
  |  |  |  |  |  |  272|     42|#define LJ_TUDATA		(~12u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (801:22): [True: 0, False: 42]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (LJ_HASBUFFER && tvisudata(o) && udataV(o)->udtype == UDTYPE_BUFFER)
  |  |  ------------------
  |  |  |  |  865|      0|#define udataV(o)	check_exp(tvisudata(o), &gcval(o)->ud)
  |  |  |  |  ------------------
  |  |  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (65:36): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  457|      0|	  SBufExt *sbx = bufV(o);
  ------------------
  |  |   66|      0|#define bufV(o)		check_exp(tvisbuf(o), ((SBufExt *)uddata(udataV(o))))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (367:49): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  458|      0|	  if (sbx == (SBufExt *)sb) lj_err_arg(L, arg+1, LJ_ERR_BUFFER_SELF);
  ------------------
  |  Branch (458:8): [True: 0, False: 0]
  ------------------
  459|      0|	  len = sbufxlen(sbx);
  ------------------
  |  |   38|      0|#define sbufxlen(sbx)		((MSize)((sbx)->w - (sbx)->r))
  ------------------
  460|      0|	  s = sbx->r;
  461|      0|#endif
  462|     42|	} else {
  463|     42|	  GCstr *str = lj_strfmt_obj(L, o);
  464|     42|	  len = str->len;
  465|     42|	  s = strdata(str);
  ------------------
  |  |  316|     42|#define strdata(s)	((const char *)((s)+1))
  ------------------
  466|     42|	}
  467|    847|	if ((sf & STRFMT_T_QUOTED))
  ------------------
  |  |   34|    847|#define STRFMT_T_QUOTED	0x0010	/* STRFMT_STR */
  ------------------
  |  Branch (467:6): [True: 847, False: 0]
  ------------------
  468|    847|	  strfmt_putquotedlen(sb, s, len);  /* No formatting. */
  469|      0|	else
  470|      0|	  strfmt_putfstrlen(sb, sf, s, len);
  471|    847|	break;
  472|    847|	}
  473|      1|      case STRFMT_CHAR:
  ------------------
  |  Branch (473:7): [True: 1, False: 951k]
  ------------------
  474|      1|	lj_strfmt_putfchar(sb, sf, lj_lib_checkint(L, arg));
  475|      1|	break;
  476|      0|      case STRFMT_PTR:  /* No formatting. */
  ------------------
  |  Branch (476:7): [True: 0, False: 951k]
  ------------------
  477|      0|	lj_strfmt_putptr(sb, lj_obj_ptr(G(L), o));
  ------------------
  |  |  705|      0|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  478|      0|	break;
  479|      0|      default:
  ------------------
  |  Branch (479:7): [True: 0, False: 951k]
  ------------------
  480|      0|	lj_assertL(0, "bad string format type");
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  481|      0|	break;
  482|   951k|      }
  483|   951k|    }
  484|  1.86M|  }
  485|   951k|  return retry;
  486|   951k|}
lj_strfmt_int:
  492|   294M|{
  493|   294M|  char buf[STRFMT_MAXBUF_INT];
  494|   294M|  MSize len = (MSize)(lj_strfmt_wint(buf, k) - buf);
  495|   294M|  return lj_str_new(L, buf, len);
  496|   294M|}
lj_strfmt_number:
  500|     42|{
  501|     42|  return tvisint(o) ? lj_strfmt_int(L, intV(o)) : lj_strfmt_num(L, o);
  ------------------
  |  |  803|     42|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|     84|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisint(o) ? lj_strfmt_int(L, intV(o)) : lj_strfmt_num(L, o);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  502|     42|}
lj_strfmt_obj:
  516|  6.08k|{
  517|  6.08k|  if (tvisstr(o)) {
  ------------------
  |  |  795|  6.08k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  6.08k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  6.08k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 6.08k]
  |  |  ------------------
  ------------------
  518|      0|    return strV(o);
  ------------------
  |  |  859|      0|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  519|  6.08k|  } else if (tvisnumber(o)) {
  ------------------
  |  |  802|  6.08k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  6.08k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  6.08k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  6.08k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 36, False: 6.04k]
  |  |  ------------------
  ------------------
  520|     36|    return lj_strfmt_number(L, o);
  521|  6.04k|  } else if (tvisnil(o)) {
  ------------------
  |  |  782|  6.04k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 6.04k, False: 5]
  |  |  ------------------
  ------------------
  522|  6.04k|    return lj_str_newlit(L, "nil");
  ------------------
  |  |   28|  6.04k|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  523|  6.04k|  } else if (tvisfalse(o)) {
  ------------------
  |  |  787|      5|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  ------------------
  |  |  |  |  781|      5|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  ------------------
  |  |  |  |  261|      5|#define LJ_TFALSE		(~1u)
  |  |  ------------------
  |  |  |  Branch (787:22): [True: 1, False: 4]
  |  |  ------------------
  ------------------
  524|      1|    return lj_str_newlit(L, "false");
  ------------------
  |  |   28|      1|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  525|      4|  } else if (tvistrue(o)) {
  ------------------
  |  |  788|      4|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  ------------------
  |  |  |  |  781|      4|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  ------------------
  |  |  |  |  262|      4|#define LJ_TTRUE		(~2u)
  |  |  ------------------
  |  |  |  Branch (788:21): [True: 1, False: 3]
  |  |  ------------------
  ------------------
  526|      1|    return lj_str_newlit(L, "true");
  ------------------
  |  |   28|      1|#define lj_str_newlit(L, s)	(lj_str_new(L, "" s, sizeof(s)-1))
  ------------------
  527|      3|  } else {
  528|      3|    char buf[8+2+2+16], *p = buf;
  529|      3|    p = lj_buf_wmem(p, lj_typename(o), (MSize)strlen(lj_typename(o)));
  ------------------
  |  | 1042|      3|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|      3|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      3|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|      3|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 3]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  p = lj_buf_wmem(p, lj_typename(o), (MSize)strlen(lj_typename(o)));
  ------------------
  |  | 1042|      3|#define lj_typename(o)	(lj_obj_itypename[itypemap(o)])
  |  |  ------------------
  |  |  |  |  828|      3|#define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  802|      3|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  280|      3|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  |  274|      3|#define LJ_TNUMX		(~13u)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (802:23): [True: 0, False: 3]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  |  |               #define itypemap(o)	(tvisnumber(o) ? ~LJ_TNUMX : ~itype(o))
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  530|      3|    *p++ = ':'; *p++ = ' ';
  531|      3|    if (tvisfunc(o) && isffunc(funcV(o))) {
  ------------------
  |  |  796|      6|#define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  781|      3|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisfunc(o)	(itype(o) == LJ_TFUNC)
  |  |  ------------------
  |  |  |  |  268|      3|#define LJ_TFUNC		(~8u)
  |  |  ------------------
  |  |  |  Branch (796:21): [True: 0, False: 3]
  |  |  ------------------
  ------------------
                  if (tvisfunc(o) && isffunc(funcV(o))) {
  ------------------
  |  |  478|      0|#define isffunc(fn)	((fn)->c.ffid > FF_C)
  |  |  ------------------
  |  |  |  |  475|      0|#define FF_C		1
  |  |  ------------------
  |  |  |  Branch (478:21): [True: 0, False: 0]
  |  |  |  Branch (478:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  532|      0|      p = lj_buf_wmem(p, "builtin#", 8);
  533|      0|      p = lj_strfmt_wint(p, funcV(o)->c.ffid);
  ------------------
  |  |  860|      0|#define funcV(o)	check_exp(tvisfunc(o), &gcval(o)->fn)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  534|      3|    } else {
  535|      3|      p = lj_strfmt_wptr(p, lj_obj_ptr(G(L), o));
  ------------------
  |  |  705|      3|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|      3|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  536|      3|    }
  537|      3|    return lj_str_new(L, buf, (size_t)(p - buf));
  538|      3|  }
  539|  6.08k|}
lj_strfmt_pushvf:
  556|  11.6M|{
  557|  11.6M|  SBuf *sb = lj_buf_tmp_(L);
  558|  11.6M|  FormatState fs;
  559|  11.6M|  SFormat sf;
  560|  11.6M|  GCstr *str;
  561|  11.6M|  lj_strfmt_init(&fs, fmt, (MSize)strlen(fmt));
  562|  43.8M|  while ((sf = lj_strfmt_parse(&fs)) != STRFMT_EOF) {
  ------------------
  |  Branch (562:10): [True: 32.2M, False: 11.6M]
  ------------------
  563|  32.2M|    switch (STRFMT_TYPE(sf)) {
  ------------------
  |  |   48|  32.2M|#define STRFMT_TYPE(sf)		((FormatType)((sf) & 15))
  ------------------
  564|  15.2M|    case STRFMT_LIT:
  ------------------
  |  Branch (564:5): [True: 15.2M, False: 16.9M]
  ------------------
  565|  15.2M|      lj_buf_putmem(sb, fs.str, fs.len);
  566|  15.2M|      break;
  567|  2.07M|    case STRFMT_INT:
  ------------------
  |  Branch (567:5): [True: 2.07M, False: 30.1M]
  ------------------
  568|  2.07M|      lj_strfmt_putfxint(sb, sf, va_arg(argp, int32_t));
  569|  2.07M|      break;
  570|      0|    case STRFMT_UINT:
  ------------------
  |  Branch (570:5): [True: 0, False: 32.2M]
  ------------------
  571|      0|      lj_strfmt_putfxint(sb, sf, va_arg(argp, uint32_t));
  572|      0|      break;
  573|      0|    case STRFMT_NUM:
  ------------------
  |  Branch (573:5): [True: 0, False: 32.2M]
  ------------------
  574|      0|      lj_strfmt_putfnum(sb, STRFMT_G14, va_arg(argp, lua_Number));
  ------------------
  |  |   67|      0|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|      0|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|      0|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|      0|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  575|      0|      break;
  576|  13.2M|    case STRFMT_STR: {
  ------------------
  |  Branch (576:5): [True: 13.2M, False: 18.9M]
  ------------------
  577|  13.2M|      const char *s = va_arg(argp, char *);
  578|  13.2M|      if (s == NULL) s = "(null)";
  ------------------
  |  Branch (578:11): [True: 0, False: 13.2M]
  ------------------
  579|  13.2M|      lj_buf_putmem(sb, s, (MSize)strlen(s));
  580|  13.2M|      break;
  581|      0|      }
  582|  1.60M|    case STRFMT_CHAR:
  ------------------
  |  Branch (582:5): [True: 1.60M, False: 30.5M]
  ------------------
  583|  1.60M|      lj_buf_putb(sb, va_arg(argp, int));
  584|  1.60M|      break;
  585|      0|    case STRFMT_PTR:
  ------------------
  |  Branch (585:5): [True: 0, False: 32.2M]
  ------------------
  586|      0|      lj_strfmt_putptr(sb, va_arg(argp, void *));
  587|      0|      break;
  588|      0|    case STRFMT_ERR:
  ------------------
  |  Branch (588:5): [True: 0, False: 32.2M]
  ------------------
  589|      0|    default:
  ------------------
  |  Branch (589:5): [True: 0, False: 32.2M]
  ------------------
  590|      0|      lj_buf_putb(sb, '?');
  591|      0|      lj_assertL(0, "bad string format near offset %d", fs.len);
  ------------------
  |  |  365|      0|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  592|      0|      break;
  593|  32.2M|    }
  594|  32.2M|  }
  595|  11.6M|  str = lj_buf_str(L, sb);
  596|  11.6M|  setstrV(L, L->top, str);
  597|  11.6M|  incr_top(L);
  ------------------
  |  |   12|  11.6M|  (++L->top >= tvref(L->maxstack) && (lj_state_growstack1(L), 0))
  |  |  ------------------
  |  |  |  |  217|  23.2M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  11.6M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (12:4): [True: 4, False: 11.6M]
  |  |  |  Branch (12:38): [True: 0, False: 4]
  |  |  ------------------
  ------------------
  598|  11.6M|  return strdata(str);
  ------------------
  |  |  316|  11.6M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  599|  11.6M|}
lj_strfmt_pushf:
  603|  7.61M|{
  604|  7.61M|  const char *msg;
  605|  7.61M|  va_list argp;
  606|  7.61M|  va_start(argp, fmt);
  607|  7.61M|  msg = lj_strfmt_pushvf(L, fmt, argp);
  608|  7.61M|  va_end(argp);
  609|  7.61M|  return msg;
  610|  7.61M|}
lj_strfmt.c:strfmt_putquotedlen:
  215|    847|{
  216|    847|  lj_buf_putb(sb, '"');
  217|  28.8k|  while (len--) {
  ------------------
  |  Branch (217:10): [True: 27.9k, False: 847]
  ------------------
  218|  27.9k|    uint32_t c = (uint32_t)(uint8_t)*s++;
  219|  27.9k|    char *w = lj_buf_more(sb, 4);
  220|  27.9k|    if (c == '"' || c == '\\' || c == '\n') {
  ------------------
  |  Branch (220:9): [True: 0, False: 27.9k]
  |  Branch (220:21): [True: 0, False: 27.9k]
  |  Branch (220:34): [True: 0, False: 27.9k]
  ------------------
  221|      0|      *w++ = '\\';
  222|  27.9k|    } else if (lj_char_iscntrl(c)) {  /* This can only be 0-31 or 127. */
  ------------------
  |  |   25|  27.9k|#define lj_char_iscntrl(c)	lj_char_isa((c), LJ_CHAR_CNTRL)
  |  |  ------------------
  |  |  |  |   24|  27.9k|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 4, False: 27.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  223|      4|      uint32_t d;
  224|      4|      *w++ = '\\';
  225|      4|      if (c >= 100 || lj_char_isdigit((uint8_t)*s)) {
  ------------------
  |  |   28|      4|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|      4|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (24:27): [True: 1, False: 3]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (225:11): [True: 0, False: 4]
  ------------------
  226|      1|	*w++ = (char)('0'+(c >= 100)); if (c >= 100) c -= 100;
  ------------------
  |  Branch (226:37): [True: 0, False: 1]
  ------------------
  227|      1|	goto tens;
  228|      3|      } else if (c >= 10) {
  ------------------
  |  Branch (228:18): [True: 0, False: 3]
  ------------------
  229|      1|      tens:
  230|      1|	d = (c * 205) >> 11; c -= d * 10; *w++ = (char)('0'+d);
  231|      1|      }
  232|      4|      c += '0';
  233|      4|    }
  234|  27.9k|    *w++ = (char)c;
  235|  27.9k|    sb->w = w;
  236|  27.9k|  }
  237|    847|  lj_buf_putb(sb, '"');
  238|    847|  return sb;
  239|    847|}

lj_strfmt.c:lj_strfmt_init:
   79|  12.5M|{
   80|  12.5M|  fs->p = (const uint8_t *)p;
   81|  12.5M|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|  12.5M|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|  12.5M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  12.5M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 12.5M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  12.5M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  12.5M|}
lj_ffrecord.c:lj_strfmt_init:
   79|  11.2k|{
   80|  11.2k|  fs->p = (const uint8_t *)p;
   81|  11.2k|  fs->e = (const uint8_t *)p + len;
   82|       |  /* Must be NUL-terminated. May have NULs inside, too. */
   83|  11.2k|  lj_assertX(*fs->e == 0, "format not NUL-terminated");
  ------------------
  |  |  366|  11.2k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  11.2k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 11.2k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  11.2k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   84|  11.2k|}

lj_strfmt_putfnum:
  579|  3.08M|{
  580|  3.08M|  sb->w = lj_strfmt_wfnum(sb, sf, n, NULL);
  581|  3.08M|  return sb;
  582|  3.08M|}
lj_strfmt_num:
  588|   292M|{
  589|   292M|  char buf[STRFMT_MAXBUF_NUM];
  590|   292M|  MSize len = (MSize)(lj_strfmt_wfnum(NULL, STRFMT_G14, o->n, buf) - buf);
  ------------------
  |  |   67|   292M|#define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   59|   292M|#define STRFMT_G	(STRFMT_NUM|STRFMT_T_FP_G)
  |  |  |  |  ------------------
  |  |  |  |  |  |   33|   292M|#define STRFMT_T_FP_G	0x0030	/* STRFMT_NUM */
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define STRFMT_G14	(STRFMT_G | ((14+1) << STRFMT_SH_PREC))
  |  |  ------------------
  |  |  |  |   46|   292M|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  591|   292M|  return lj_str_new(L, buf, len);
  592|   292M|}
lj_strfmt_num.c:lj_strfmt_wfnum:
  270|   295M|{
  271|   295M|  MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   49|   295M|#define STRFMT_WIDTH(sf)	(((sf) >> STRFMT_SH_WIDTH) & 255u)
  |  |  ------------------
  |  |  |  |   45|   295M|#define STRFMT_SH_WIDTH	16
  |  |  ------------------
  ------------------
                MSize width = STRFMT_WIDTH(sf), prec = STRFMT_PREC(sf), len;
  ------------------
  |  |   50|   295M|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|   295M|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  272|   295M|  TValue t;
  273|   295M|  t.n = n;
  274|   295M|  if (LJ_UNLIKELY((t.u32.hi << 1) >= 0xffe00000)) {
  ------------------
  |  |  146|   295M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 165, False: 295M]
  |  |  ------------------
  ------------------
  275|       |    /* Handle non-finite values uniformly for %a, %e, %f, %g. */
  276|    165|    int prefix = 0, ch = (sf & STRFMT_F_UPPER) ? 0x202020 : 0;
  ------------------
  |  |   42|    165|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (276:26): [True: 0, False: 165]
  ------------------
  277|    165|    if (((t.u32.hi & 0x000fffff) | t.u32.lo) != 0) {
  ------------------
  |  Branch (277:9): [True: 21, False: 144]
  ------------------
  278|     21|      ch ^= ('n' << 16) | ('a' << 8) | 'n';
  279|     21|      if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|     21|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (279:11): [True: 0, False: 21]
  ------------------
  280|    144|    } else {
  281|    144|      ch ^= ('i' << 16) | ('n' << 8) | 'f';
  282|    144|      if ((t.u32.hi & 0x80000000)) prefix = '-';
  ------------------
  |  Branch (282:11): [True: 74, False: 70]
  ------------------
  283|     70|      else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|     70|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (283:16): [True: 0, False: 70]
  ------------------
  284|     70|      else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|     70|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (284:16): [True: 0, False: 70]
  ------------------
  285|    144|    }
  286|    165|    len = 3 + (prefix != 0);
  287|    165|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (287:9): [True: 165, False: 0]
  |  Branch (287:33): [True: 0, False: 165]
  ------------------
  288|    165|    if (!(sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|    165|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (288:9): [True: 165, False: 0]
  |  Branch (288:39): [True: 0, False: 165]
  ------------------
  289|    165|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (289:9): [True: 74, False: 91]
  ------------------
  290|    165|    *p++ = (char)(ch >> 16); *p++ = (char)(ch >> 8); *p++ = (char)ch;
  291|   295M|  } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|   295M|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                } else if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_A)) {
  ------------------
  |  |   51|   295M|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (291:14): [True: 5.33k, False: 295M]
  ------------------
  292|       |    /* %a */
  293|  5.33k|    const char *hexdig = (sf & STRFMT_F_UPPER) ? "0123456789ABCDEFPX"
  ------------------
  |  |   42|  5.33k|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (293:26): [True: 2.63k, False: 2.70k]
  ------------------
  294|  5.33k|					       : "0123456789abcdefpx";
  295|  5.33k|    int32_t e = (t.u32.hi >> 20) & 0x7ff;
  296|  5.33k|    char prefix = 0, eprefix = '+';
  297|  5.33k|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (297:9): [True: 6, False: 5.32k]
  ------------------
  298|  5.32k|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|  5.32k|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (298:14): [True: 0, False: 5.32k]
  ------------------
  299|  5.32k|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|  5.32k|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (299:14): [True: 0, False: 5.32k]
  ------------------
  300|  5.33k|    t.u32.hi &= 0xfffff;
  301|  5.33k|    if (e) {
  ------------------
  |  Branch (301:9): [True: 5.32k, False: 9]
  ------------------
  302|  5.32k|      t.u32.hi |= 0x100000;
  303|  5.32k|      e -= 1023;
  304|  5.32k|    } else if (t.u32.lo | t.u32.hi) {
  ------------------
  |  Branch (304:16): [True: 0, False: 9]
  ------------------
  305|       |      /* Non-zero denormal - normalise it. */
  306|      0|      uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
                    uint32_t shift = t.u32.hi ? 20-lj_fls(t.u32.hi) : 52-lj_fls(t.u32.lo);
  ------------------
  |  |  149|      0|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (306:24): [True: 0, False: 0]
  ------------------
  307|      0|      e = -1022 - shift;
  308|      0|      t.u64 <<= shift;
  309|      0|    }
  310|       |    /* abs(n) == t.u64 * 2^(e - 52) */
  311|       |    /* If n != 0, bit 52 of t.u64 is set, and is the highest set bit. */
  312|  5.33k|    if ((int32_t)prec < 0) {
  ------------------
  |  Branch (312:9): [True: 29, False: 5.30k]
  ------------------
  313|       |      /* Default precision: use smallest precision giving exact result. */
  314|     29|      prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|     20|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
                    prec = t.u32.lo ? 13-lj_ffs(t.u32.lo)/4 : 5-lj_ffs(t.u32.hi|0x100000)/4;
  ------------------
  |  |  148|      9|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  |  Branch (314:14): [True: 20, False: 9]
  ------------------
  315|  5.30k|    } else if (prec < 13) {
  ------------------
  |  Branch (315:16): [True: 5.30k, False: 0]
  ------------------
  316|       |      /* Precision is sufficiently low as to maybe require rounding. */
  317|  5.30k|      t.u64 += (((uint64_t)1) << (51 - prec*4));
  318|  5.30k|    }
  319|  5.33k|    if (e < 0) {
  ------------------
  |  Branch (319:9): [True: 2, False: 5.32k]
  ------------------
  320|      2|      eprefix = '-';
  321|      2|      e = -e;
  322|      2|    }
  323|  5.33k|    len = 5 + ndigits_dec((uint32_t)e) + prec + (prefix != 0)
  324|  5.33k|	    + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|  5.33k|#define STRFMT_F_ALT	0x1000
  ------------------
  325|  5.33k|    if (!p) p = lj_buf_more(sb, width > len ? width : len);
  ------------------
  |  Branch (325:9): [True: 5.33k, False: 0]
  |  Branch (325:33): [True: 6, False: 5.32k]
  ------------------
  326|  5.33k|    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|  5.33k|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|  5.33k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (326:9): [True: 5.33k, False: 0]
  ------------------
  327|  5.33k|      while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (327:14): [True: 6, False: 5.33k]
  ------------------
  328|  5.33k|    }
  329|  5.33k|    if (prefix) *p++ = prefix;
  ------------------
  |  Branch (329:9): [True: 6, False: 5.32k]
  ------------------
  330|  5.33k|    *p++ = '0';
  331|  5.33k|    *p++ = hexdig[17]; /* x or X */
  332|  5.33k|    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|  5.33k|#define STRFMT_F_LEFT	0x0100
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  5.33k|#define STRFMT_F_ZERO	0x0400
  ------------------
                  if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  5.33k|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (332:9): [True: 0, False: 5.33k]
  ------------------
  333|      0|      while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (333:14): [True: 0, False: 0]
  ------------------
  334|      0|    }
  335|  5.33k|    *p++ = '0' + (t.u32.hi >> 20); /* Usually '1', sometimes '0' or '2'. */
  336|  5.33k|    if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|  5.33k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (336:9): [True: 5.31k, False: 19]
  ------------------
  337|       |      /* Emit fractional part. */
  338|  5.31k|      char *q = p + 1 + prec;
  339|  5.31k|      *p = '.';
  340|  5.31k|      if (prec < 13) t.u64 >>= (52 - prec*4);
  ------------------
  |  Branch (340:11): [True: 5.29k, False: 20]
  ------------------
  341|     20|      else while (prec > 13) p[prec--] = '0';
  ------------------
  |  Branch (341:19): [True: 0, False: 20]
  ------------------
  342|  10.9k|      while (prec) { p[prec--] = hexdig[t.u64 & 15]; t.u64 >>= 4; }
  ------------------
  |  Branch (342:14): [True: 5.62k, False: 5.31k]
  ------------------
  343|  5.31k|      p = q;
  344|  5.31k|    }
  345|  5.33k|    *p++ = hexdig[16]; /* p or P */
  346|  5.33k|    *p++ = eprefix; /* + or - */
  347|  5.33k|    p = lj_strfmt_wint(p, e);
  348|   295M|  } else {
  349|       |    /* %e or %f or %g - begin by converting n to "nd" format. */
  350|   295M|    uint32_t nd[64];
  351|   295M|    uint32_t ndhi = 0, ndlo, i;
  352|   295M|    int32_t e = (t.u32.hi >> 20) & 0x7ff, ndebias = 0;
  353|   295M|    char prefix = 0, *q;
  354|   295M|    if (t.u32.hi & 0x80000000) prefix = '-';
  ------------------
  |  Branch (354:9): [True: 695k, False: 295M]
  ------------------
  355|   295M|    else if ((sf & STRFMT_F_PLUS)) prefix = '+';
  ------------------
  |  |   38|   295M|#define STRFMT_F_PLUS	0x0200
  ------------------
  |  Branch (355:14): [True: 158, False: 295M]
  ------------------
  356|   295M|    else if ((sf & STRFMT_F_SPACE)) prefix = ' ';
  ------------------
  |  |   40|   295M|#define STRFMT_F_SPACE	0x0800
  ------------------
  |  Branch (356:14): [True: 167, False: 295M]
  ------------------
  357|   295M|    prec += ((int32_t)prec >> 31) & 7; /* Default precision is 6. */
  358|   295M|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|   295M|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_G)) {
  ------------------
  |  |   51|   295M|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (358:9): [True: 294M, False: 1.34M]
  ------------------
  359|       |      /* %g - decrement precision if non-zero (to make it like %e). */
  360|   294M|      prec--;
  361|   294M|      prec ^= (uint32_t)((int32_t)prec >> 31);
  362|   294M|    }
  363|   295M|    if ((sf & STRFMT_T_FP_E) && prec < 14 && n != 0) {
  ------------------
  |  |   31|   295M|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (363:9): [True: 295M, False: 5.23k]
  |  Branch (363:33): [True: 295M, False: 83.2k]
  |  Branch (363:46): [True: 295M, False: 1.67k]
  ------------------
  364|       |      /* Precision is sufficiently low that rescaling will probably work. */
  365|   295M|      if ((ndebias = rescale_e[e >> 6])) {
  ------------------
  |  Branch (365:11): [True: 1.13M, False: 294M]
  ------------------
  366|  1.13M|	t.n = n * rescale_n[e >> 6];
  367|  1.13M|	if (LJ_UNLIKELY(!e)) t.n *= 1e10, ndebias -= 10;
  ------------------
  |  |  146|  1.13M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.79k, False: 1.13M]
  |  |  ------------------
  ------------------
  368|  1.13M|	t.u64 -= 2; /* Convert 2ulp below (later we convert 2ulp above). */
  369|  1.13M|	nd[0] = 0x100000 | (t.u32.hi & 0xfffff);
  370|  1.13M|	e = ((t.u32.hi >> 20) & 0x7ff) - 1075 - (ND_MUL2K_MAX_SHIFT < 29);
  ------------------
  |  |  116|  1.13M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  371|  1.13M|	goto load_t_lo; rescale_failed:
  372|  1.13M|	t.n = n;
  373|  1.13M|	e = (t.u32.hi >> 20) & 0x7ff;
  374|  1.13M|	ndebias = ndhi = 0;
  375|  1.13M|      }
  376|   295M|    }
  377|   295M|    nd[0] = t.u32.hi & 0xfffff;
  378|   295M|    if (e == 0) e++; else nd[0] |= 0x100000;
  ------------------
  |  Branch (378:9): [True: 4.80k, False: 295M]
  ------------------
  379|   295M|    e -= 1043;
  380|   295M|    if (t.u32.lo) {
  ------------------
  |  Branch (380:9): [True: 9.75M, False: 286M]
  ------------------
  381|  10.8M|      e -= 32 + (ND_MUL2K_MAX_SHIFT < 29); load_t_lo:
  ------------------
  |  |  116|  9.75M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  382|  10.8M|#if ND_MUL2K_MAX_SHIFT >= 29
  383|  10.8M|      nd[0] = (nd[0] << 3) | (t.u32.lo >> 29);
  384|  10.8M|      ndhi = nd_mul2k(nd, ndhi, 29, t.u32.lo & 0x1fffffff, sf);
  385|       |#elif ND_MUL2K_MAX_SHIFT >= 11
  386|       |      ndhi = nd_mul2k(nd, ndhi, 11, t.u32.lo >> 21, sf);
  387|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo >> 10) & 0x7ff, sf);
  388|       |      ndhi = nd_mul2k(nd, ndhi, 11, (t.u32.lo <<  1) & 0x7ff, sf);
  389|       |#else
  390|       |#error "ND_MUL2K_MAX_SHIFT too small"
  391|       |#endif
  392|  10.8M|    }
  393|   296M|    if (e >= 0) {
  ------------------
  |  Branch (393:9): [True: 6.71M, False: 290M]
  ------------------
  394|  6.71M|      ndhi = nd_mul2k(nd, ndhi, (uint32_t)e, 0, sf);
  395|  6.71M|      ndlo = 0;
  396|   290M|    } else {
  397|   290M|      ndlo = nd_div2k(nd, ndhi, (uint32_t)-e, sf);
  398|   290M|      if (ndhi && !nd[ndhi]) ndhi--;
  ------------------
  |  Branch (398:11): [True: 10.0M, False: 280M]
  |  Branch (398:19): [True: 9.45M, False: 564k]
  ------------------
  399|   290M|    }
  400|       |    /* abs(n) == nd * 10^ndebias (for slightly loose interpretation of ==) */
  401|   296M|    if ((sf & STRFMT_T_FP_E)) {
  ------------------
  |  |   31|   296M|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
  |  Branch (401:9): [True: 296M, False: 5.23k]
  ------------------
  402|       |      /* %e or %g - assume %e and start by calculating nd's exponent (nde). */
  403|   296M|      char eprefix = '+';
  404|   296M|      int32_t nde = -1;
  405|   296M|      MSize hilen;
  406|   296M|      if (ndlo && !nd[ndhi]) {
  ------------------
  |  Branch (406:11): [True: 148M, False: 148M]
  |  Branch (406:19): [True: 693k, False: 147M]
  ------------------
  407|  11.8M|	ndhi = 64; do {} while (!nd[--ndhi]);
  ------------------
  |  Branch (407:26): [True: 11.1M, False: 693k]
  ------------------
  408|   693k|	nde -= 64 * 9;
  409|   693k|      }
  410|   296M|      hilen = ndigits_dec(nd[ndhi]);
  411|   296M|      nde += ndhi * 9 + hilen;
  412|   296M|      if (ndebias) {
  ------------------
  |  Branch (412:11): [True: 1.13M, False: 295M]
  ------------------
  413|       |	/*
  414|       |	** Rescaling was performed, but this introduced some error, and might
  415|       |	** have pushed us across a rounding boundary. We check whether this
  416|       |	** error affected the result by introducing even more error (2ulp in
  417|       |	** either direction), and seeing whether a rounding boundary was
  418|       |	** crossed. Having already converted the -2ulp case, we save off its
  419|       |	** most significant digits, convert the +2ulp case, and compare them.
  420|       |	*/
  421|  1.13M|	int32_t eidx = e + 70 + (ND_MUL2K_MAX_SHIFT < 29)
  ------------------
  |  |  116|  1.13M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  422|  1.13M|			 + (t.u32.lo >= 0xfffffffe && !(~t.u32.hi << 12));
  ------------------
  |  Branch (422:8): [True: 463k, False: 676k]
  |  Branch (422:34): [True: 16.2k, False: 447k]
  ------------------
  423|  1.13M|	const int8_t *m_e = four_ulp_m_e + eidx * 2;
  424|  1.13M|	lj_assertG_(G(sbufL(sb)), 0 <= eidx && eidx < 128, "bad eidx %d", eidx);
  ------------------
  |  |  363|  1.13M|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.27M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 1.13M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 1.13M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.13M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  425|  1.13M|	nd[33] = nd[ndhi];
  426|  1.13M|	nd[32] = nd[(ndhi - 1) & 0x3f];
  427|  1.13M|	nd[31] = nd[(ndhi - 2) & 0x3f];
  428|  1.13M|	nd_add_m10e(nd, ndhi, (uint8_t)*m_e, m_e[1]);
  429|  1.13M|	if (LJ_UNLIKELY(!nd_similar(nd, ndhi, nd + 33, hilen, prec + 1))) {
  ------------------
  |  |  146|  1.13M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.13M, False: 113]
  |  |  ------------------
  ------------------
  430|  1.13M|	  goto rescale_failed;
  431|  1.13M|	}
  432|  1.13M|      }
  433|   295M|      if ((int32_t)(prec - nde) < (0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (433:11): [True: 59.9M, False: 235M]
  ------------------
  434|       |	/* Precision is sufficiently low as to maybe require rounding. */
  435|  59.9M|	ndhi = nd_add_m10e(nd, ndhi, 5, nde - prec - 1);
  436|  59.9M|	nde += (hilen != ndigits_dec(nd[ndhi]));
  437|  59.9M|      }
  438|   295M|      nde += ndebias;
  439|   295M|      if ((sf & STRFMT_T_FP_F)) {
  ------------------
  |  |   32|   295M|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
  |  Branch (439:11): [True: 294M, False: 1.33M]
  ------------------
  440|       |	/* %g */
  441|   294M|	if ((int32_t)prec >= nde && nde >= -4) {
  ------------------
  |  Branch (441:6): [True: 294M, False: 2.91k]
  |  Branch (441:30): [True: 294M, False: 849]
  ------------------
  442|   294M|	  if (nde < 0) ndhi = 0;
  ------------------
  |  Branch (442:8): [True: 2.25k, False: 294M]
  ------------------
  443|   294M|	  prec -= nde;
  444|   294M|	  goto g_format_like_f;
  445|   294M|	} else if (!(sf & STRFMT_F_ALT) && prec && width > 5) {
  ------------------
  |  |   41|  3.76k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (445:13): [True: 3.69k, False: 69]
  |  Branch (445:37): [True: 3.53k, False: 166]
  |  Branch (445:45): [True: 496, False: 3.03k]
  ------------------
  446|       |	  /* Decrease precision in order to strip trailing zeroes. */
  447|    496|	  char tail[9];
  448|    496|	  uint32_t maxprec = hilen - 1 + ((ndhi - ndlo) & 0x3f) * 9;
  449|    496|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (449:8): [True: 0, False: 496]
  ------------------
  450|    496|	  else ndlo = (ndhi - (((int32_t)(prec - hilen) + 9) / 9)) & 0x3f;
  451|    496|	  i = prec - hilen - (((ndhi - ndlo) & 0x3f) * 9) + 10;
  452|    496|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  453|  2.14k|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (453:11): [True: 1.81k, False: 328]
  |  Branch (453:19): [True: 1.64k, False: 168]
  ------------------
  454|  1.64k|	    prec--;
  455|  1.64k|	    if (!i) {
  ------------------
  |  Branch (455:10): [True: 168, False: 1.48k]
  ------------------
  456|    168|	      if (ndlo == ndhi) { prec = 0; break; }
  ------------------
  |  Branch (456:12): [True: 0, False: 168]
  ------------------
  457|    168|	      ndlo = (ndlo + 1) & 0x3f;
  458|    168|	      lj_strfmt_wuint9(tail, nd[ndlo]);
  459|    168|	      i = 9;
  460|    168|	    }
  461|  1.64k|	  }
  462|    496|	}
  463|   294M|      }
  464|  1.34M|      if (nde < 0) {
  ------------------
  |  Branch (464:11): [True: 670k, False: 672k]
  ------------------
  465|       |	/* Make nde non-negative. */
  466|   670k|	eprefix = '-';
  467|   670k|	nde = -nde;
  468|   670k|      }
  469|  1.34M|      len = 3 + prec + (prefix != 0) + ndigits_dec((uint32_t)nde) + (nde < 10)
  470|  1.34M|	      + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|  1.34M|#define STRFMT_F_ALT	0x1000
  ------------------
  471|  1.34M|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 5);
  ------------------
  |  Branch (471:11): [True: 1.34M, False: 27]
  |  Branch (471:36): [True: 502, False: 1.34M]
  ------------------
  472|  1.34M|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|  1.34M|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|  1.34M|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (472:11): [True: 1.34M, False: 420]
  ------------------
  473|  1.34M|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (473:9): [True: 182, False: 1.34M]
  ------------------
  474|  1.34M|      }
  475|  1.34M|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (475:11): [True: 1.20k, False: 1.34M]
  ------------------
  476|  1.34M|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|  1.34M|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  1.34M|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|  1.34M|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (476:11): [True: 166, False: 1.34M]
  ------------------
  477|    996|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (477:9): [True: 830, False: 166]
  ------------------
  478|    166|      }
  479|  1.34M|      q = lj_strfmt_wint(p + 1, nd[ndhi]);
  480|  1.34M|      p[0] = p[1]; /* Put leading digit in the correct place. */
  481|  1.34M|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|  1.34M|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (481:11): [True: 1.34M, False: 508]
  ------------------
  482|       |	/* Emit fractional part. */
  483|  1.34M|	p[1] = '.'; p += 2;
  484|  1.34M|	prec -= (MSize)(q - p); p = q; /* Account for digits already emitted. */
  485|       |	/* Then emit chunks of 9 digits (this may emit 8 digits too many). */
  486|  2.34M|	for (i = ndhi; (int32_t)prec > 0 && i != ndlo; prec -= 9) {
  ------------------
  |  Branch (486:17): [True: 1.01M, False: 1.32M]
  |  Branch (486:38): [True: 1.00M, False: 13.5k]
  ------------------
  487|  1.00M|	  i = (i - 1) & 0x3f;
  488|  1.00M|	  p = lj_strfmt_wuint9(p, nd[i]);
  489|  1.00M|	}
  490|  1.34M|	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   32|  1.34M|#define STRFMT_T_FP_F	0x0020	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_F) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|  3.27k|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (490:6): [True: 3.27k, False: 1.33M]
  |  Branch (490:30): [True: 3.20k, False: 69]
  ------------------
  491|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  492|  3.20k|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  493|  18.0k|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (493:11): [True: 14.8k, False: 3.20k]
  ------------------
  494|  3.20k|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (494:8): [True: 631, False: 2.57k]
  ------------------
  495|  1.33M|	} else {
  496|       |	  /* %e (or %#g) - emit trailing zeroes. */
  497|  1.40M|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (497:11): [True: 66.9k, False: 1.33M]
  ------------------
  498|  1.33M|	  p += (int32_t)prec;
  499|  1.33M|	}
  500|  1.34M|      } else {
  501|    508|	p++;
  502|    508|      }
  503|  1.34M|      *p++ = (sf & STRFMT_F_UPPER) ? 'E' : 'e';
  ------------------
  |  |   42|  1.34M|#define STRFMT_F_UPPER	0x2000
  ------------------
  |  Branch (503:14): [True: 1, False: 1.34M]
  ------------------
  504|  1.34M|      *p++ = eprefix; /* + or - */
  505|  1.34M|      if (nde < 10) *p++ = '0'; /* Always at least two digits of exponent. */
  ------------------
  |  Branch (505:11): [True: 42.5k, False: 1.29M]
  ------------------
  506|  1.34M|      p = lj_strfmt_wint(p, nde);
  507|  1.34M|    } else {
  508|       |      /* %f (or, shortly, %g in %f style) */
  509|  5.23k|      if (prec < (MSize)(0x3f & -(int32_t)ndlo) * 9) {
  ------------------
  |  Branch (509:11): [True: 1.65k, False: 3.58k]
  ------------------
  510|       |	/* Precision is sufficiently low as to maybe require rounding. */
  511|  1.65k|	ndhi = nd_add_m10e(nd, ndhi, 5, 0 - prec - 1);
  512|  1.65k|      }
  513|   294M|      g_format_like_f:
  514|   294M|      if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   31|   294M|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
                    if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT) && prec && width) {
  ------------------
  |  |   41|   294M|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (514:11): [True: 294M, False: 5.23k]
  |  Branch (514:35): [True: 294M, False: 0]
  |  Branch (514:59): [True: 294M, False: 77]
  |  Branch (514:67): [True: 50, False: 294M]
  ------------------
  515|       |	/* Decrease precision in order to strip trailing zeroes. */
  516|     50|	if (ndlo) {
  ------------------
  |  Branch (516:6): [True: 1, False: 49]
  ------------------
  517|       |	  /* nd has a fractional part; we need to look at its digits. */
  518|      1|	  char tail[9];
  519|      1|	  uint32_t maxprec = (64 - ndlo) * 9;
  520|      1|	  if (prec >= maxprec) prec = maxprec;
  ------------------
  |  Branch (520:8): [True: 0, False: 1]
  ------------------
  521|      1|	  else ndlo = 64 - (prec + 8) / 9;
  522|      1|	  i = prec - ((63 - ndlo) * 9);
  523|      1|	  lj_strfmt_wuint9(tail, nd[ndlo]);
  524|      2|	  while (prec && tail[--i] == '0') {
  ------------------
  |  Branch (524:11): [True: 2, False: 0]
  |  Branch (524:19): [True: 2, False: 0]
  ------------------
  525|      2|	    prec--;
  526|      2|	    if (!i) {
  ------------------
  |  Branch (526:10): [True: 1, False: 1]
  ------------------
  527|      1|	      if (ndlo == 63) { prec = 0; break; }
  ------------------
  |  Branch (527:12): [True: 1, False: 0]
  ------------------
  528|      0|	      lj_strfmt_wuint9(tail, nd[++ndlo]);
  529|      0|	      i = 9;
  530|      0|	    }
  531|      2|	  }
  532|     49|	} else {
  533|       |	  /* nd has no fractional part, so precision goes straight to zero. */
  534|     49|	  prec = 0;
  535|     49|	}
  536|     50|      }
  537|   294M|      len = ndhi * 9 + ndigits_dec(nd[ndhi]) + prec + (prefix != 0)
  538|   294M|		     + ((prec | (sf & STRFMT_F_ALT)) != 0);
  ------------------
  |  |   41|   294M|#define STRFMT_F_ALT	0x1000
  ------------------
  539|   294M|      if (!p) p = lj_buf_more(sb, (width > len ? width : len) + 8);
  ------------------
  |  Branch (539:11): [True: 1.73M, False: 292M]
  |  Branch (539:36): [True: 50, False: 1.73M]
  ------------------
  540|   294M|      if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   37|   294M|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if (!(sf & (STRFMT_F_LEFT | STRFMT_F_ZERO))) {
  ------------------
  |  |   39|   294M|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (540:11): [True: 294M, False: 35]
  ------------------
  541|   294M|	while (width-- > len) *p++ = ' ';
  ------------------
  |  Branch (541:9): [True: 1.37k, False: 294M]
  ------------------
  542|   294M|      }
  543|   294M|      if (prefix) *p++ = prefix;
  ------------------
  |  Branch (543:11): [True: 694k, False: 293M]
  ------------------
  544|   294M|      if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   37|   294M|#define STRFMT_F_LEFT	0x0100
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|   294M|#define STRFMT_F_ZERO	0x0400
  ------------------
                    if ((sf & (STRFMT_F_LEFT | STRFMT_F_ZERO)) == STRFMT_F_ZERO) {
  ------------------
  |  |   39|   294M|#define STRFMT_F_ZERO	0x0400
  ------------------
  |  Branch (544:11): [True: 12, False: 294M]
  ------------------
  545|  1.18k|	while (width-- > len) *p++ = '0';
  ------------------
  |  Branch (545:9): [True: 1.17k, False: 12]
  ------------------
  546|     12|      }
  547|       |      /* Emit integer part. */
  548|   294M|      p = lj_strfmt_wint(p, nd[ndhi]);
  549|   294M|      i = ndhi;
  550|   294M|      while (i) p = lj_strfmt_wuint9(p, nd[--i]);
  ------------------
  |  Branch (550:14): [True: 197k, False: 294M]
  ------------------
  551|   294M|      if ((prec | (sf & STRFMT_F_ALT))) {
  ------------------
  |  |   41|   294M|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (551:11): [True: 294M, False: 387]
  ------------------
  552|       |	/* Emit fractional part. */
  553|   294M|	*p++ = '.';
  554|       |	/* Emit chunks of 9 digits (this may emit 8 digits too many). */
  555|   442M|	while ((int32_t)prec > 0 && i != ndlo) {
  ------------------
  |  Branch (555:9): [True: 319M, False: 123M]
  |  Branch (555:30): [True: 147M, False: 171M]
  ------------------
  556|   147M|	  i = (i - 1) & 0x3f;
  557|   147M|	  p = lj_strfmt_wuint9(p, nd[i]);
  558|   147M|	  prec -= 9;
  559|   147M|	}
  560|   294M|	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   31|   294M|#define STRFMT_T_FP_E	0x0010	/* STRFMT_NUM */
  ------------------
              	if ((sf & STRFMT_T_FP_E) && !(sf & STRFMT_F_ALT)) {
  ------------------
  |  |   41|   294M|#define STRFMT_F_ALT	0x1000
  ------------------
  |  Branch (560:6): [True: 294M, False: 4.97k]
  |  Branch (560:30): [True: 294M, False: 0]
  ------------------
  561|       |	  /* %g (and not %#g) - strip trailing zeroes. */
  562|   294M|	  p += (int32_t)prec & ((int32_t)prec >> 31);
  563|  1.39G|	  while (p[-1] == '0') p--;
  ------------------
  |  Branch (563:11): [True: 1.09G, False: 294M]
  ------------------
  564|   294M|	  if (p[-1] == '.') p--;
  ------------------
  |  Branch (564:8): [True: 147M, False: 146M]
  ------------------
  565|   294M|	} else {
  566|       |	  /* %f (or %#g) - emit trailing zeroes. */
  567|  14.9k|	  while ((int32_t)prec > 0) { *p++ = '0'; prec--; }
  ------------------
  |  Branch (567:11): [True: 9.94k, False: 4.97k]
  ------------------
  568|  4.97k|	  p += (int32_t)prec;
  569|  4.97k|	}
  570|   294M|      }
  571|   294M|    }
  572|   296M|  }
  573|   295M|  if ((sf & STRFMT_F_LEFT)) while (width-- > len) *p++ = ' ';
  ------------------
  |  |   37|   295M|#define STRFMT_F_LEFT	0x0100
  ------------------
  |  Branch (573:7): [True: 277, False: 295M]
  |  Branch (573:36): [True: 2.99k, False: 277]
  ------------------
  574|   295M|  return p;
  575|   295M|}
lj_strfmt_num.c:ndigits_dec:
   64|   652M|{
   65|   652M|  MSize t = ((lj_fls(x | 1) * 77) >> 8) + 1; /* 2^8/77 is roughly log2(10) */
  ------------------
  |  |  149|   652M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
   66|   652M|  return t + (x > ndigits_dec_threshold[t]);
   67|   652M|}
lj_strfmt_num.c:nd_mul2k:
  126|  17.6M|{
  127|  17.6M|  uint32_t i, ndlo = 0, start = 1;
  128|       |  /* Performance hacks. */
  129|  17.6M|  if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |  116|  17.6M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
                if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|   597k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                if (k > ND_MUL2K_MAX_SHIFT*2 && STRFMT_FP(sf) != STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|   597k|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (129:7): [True: 597k, False: 17.0M]
  |  Branch (129:35): [True: 597k, False: 209]
  ------------------
  130|   597k|    start = ndhi - (STRFMT_PREC(sf) + 17) / 8;
  ------------------
  |  |   50|   597k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|   597k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  131|   597k|  }
  132|       |  /* Real logic. */
  133|  38.8M|  while (k >= ND_MUL2K_MAX_SHIFT) {
  ------------------
  |  |  116|  38.8M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  |  Branch (133:10): [True: 21.2M, False: 17.6M]
  ------------------
  134|  67.1M|    for (i = ndlo; i <= ndhi; i++) {
  ------------------
  |  Branch (134:20): [True: 45.9M, False: 21.2M]
  ------------------
  135|  45.9M|      uint64_t val = ((uint64_t)nd[i] << ND_MUL2K_MAX_SHIFT) | carry_in;
  ------------------
  |  |  116|  45.9M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  136|  45.9M|      carry_in = ND_MUL2K_DIV1E9(val);
  ------------------
  |  |  117|  45.9M|#define ND_MUL2K_DIV1E9(val)	((uint32_t)((val) / 1000000000))
  ------------------
  137|  45.9M|      nd[i] = (uint32_t)val - carry_in * 1000000000;
  138|  45.9M|    }
  139|  21.2M|    if (carry_in) {
  ------------------
  |  Branch (139:9): [True: 21.0M, False: 147k]
  ------------------
  140|  21.0M|      nd[++ndhi] = carry_in; carry_in = 0;
  141|  21.0M|      if (start++ == ndlo) ++ndlo;
  ------------------
  |  Branch (141:11): [True: 9.23M, False: 11.8M]
  ------------------
  142|  21.0M|    }
  143|  21.2M|    k -= ND_MUL2K_MAX_SHIFT;
  ------------------
  |  |  116|  21.2M|#define ND_MUL2K_MAX_SHIFT	29
  ------------------
  144|  21.2M|  }
  145|  17.6M|  if (k) {
  ------------------
  |  Branch (145:7): [True: 1.26M, False: 16.3M]
  ------------------
  146|  4.27M|    for (i = ndlo; i <= ndhi; i++) {
  ------------------
  |  Branch (146:20): [True: 3.00M, False: 1.26M]
  ------------------
  147|  3.00M|      uint64_t val = ((uint64_t)nd[i] << k) | carry_in;
  148|  3.00M|      carry_in = ND_MUL2K_DIV1E9(val);
  ------------------
  |  |  117|  3.00M|#define ND_MUL2K_DIV1E9(val)	((uint32_t)((val) / 1000000000))
  ------------------
  149|  3.00M|      nd[i] = (uint32_t)val - carry_in * 1000000000;
  150|  3.00M|    }
  151|  1.26M|    if (carry_in) nd[++ndhi] = carry_in;
  ------------------
  |  Branch (151:9): [True: 364k, False: 899k]
  ------------------
  152|  1.26M|  }
  153|  17.6M|  return ndhi;
  154|  17.6M|}
lj_strfmt_num.c:nd_div2k:
  158|   290M|{
  159|   290M|  uint32_t ndlo = 0, stop1 = ~0, stop2 = ~0;
  160|       |  /* Performance hacks. */
  161|   290M|  if (!ndhi) {
  ------------------
  |  Branch (161:7): [True: 280M, False: 10.0M]
  ------------------
  162|   280M|    if (!nd[0]) {
  ------------------
  |  Branch (162:9): [True: 1.88k, False: 280M]
  ------------------
  163|  1.88k|      return 0;
  164|   280M|    } else {
  165|   280M|      uint32_t s = lj_ffs(nd[0]);
  ------------------
  |  |  148|   280M|#define lj_ffs(x)	((uint32_t)__builtin_ctz(x))
  ------------------
  166|   280M|      if (s >= k) { nd[0] >>= k; return 0; }
  ------------------
  |  Branch (166:11): [True: 141M, False: 138M]
  ------------------
  167|   138M|      nd[0] >>= s; k -= s;
  168|   138M|    }
  169|   280M|  }
  170|   148M|  if (k > 18) {
  ------------------
  |  Branch (170:7): [True: 9.52M, False: 139M]
  ------------------
  171|  9.52M|    if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|  9.52M|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
                  if (STRFMT_FP(sf) == STRFMT_FP(STRFMT_T_FP_F)) {
  ------------------
  |  |   51|  9.52M|#define STRFMT_FP(sf)		(((sf) >> 4) & 3)
  ------------------
  |  Branch (171:9): [True: 1.76k, False: 9.52M]
  ------------------
  172|  1.76k|      stop1 = 63 - (int32_t)STRFMT_PREC(sf) / 9;
  ------------------
  |  |   50|  1.76k|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  1.76k|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  173|  9.52M|    } else {
  174|  9.52M|      int32_t floorlog2 = ndhi * 29 + lj_fls(nd[ndhi]) - k;
  ------------------
  |  |  149|  9.52M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  175|  9.52M|      int32_t floorlog10 = (int32_t)(floorlog2 * 0.30102999566398114);
  176|  9.52M|      stop1 = 62 + (floorlog10 - (int32_t)STRFMT_PREC(sf)) / 9;
  ------------------
  |  |   50|  9.52M|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  9.52M|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  177|  9.52M|      stop2 = 61 + ndhi - (int32_t)STRFMT_PREC(sf) / 8;
  ------------------
  |  |   50|  9.52M|#define STRFMT_PREC(sf)		((((sf) >> STRFMT_SH_PREC) & 255u) - 1u)
  |  |  ------------------
  |  |  |  |   46|  9.52M|#define STRFMT_SH_PREC	24
  |  |  ------------------
  ------------------
  178|  9.52M|    }
  179|  9.52M|  }
  180|       |  /* Real logic. */
  181|   219M|  while (k >= 9) {
  ------------------
  |  Branch (181:10): [True: 70.4M, False: 148M]
  ------------------
  182|  70.4M|    uint32_t i = ndhi, carry = 0;
  183|   235M|    for (;;) {
  184|   235M|      uint32_t val = nd[i];
  185|   235M|      nd[i] = (val >> 9) + carry;
  186|   235M|      carry = (val & 0x1ff) * 1953125;
  187|   235M|      if (i == ndlo) break;
  ------------------
  |  Branch (187:11): [True: 70.4M, False: 165M]
  ------------------
  188|   165M|      i = (i - 1) & 0x3f;
  189|   165M|    }
  190|  70.4M|    if (ndlo != stop1 && ndlo != stop2) {
  ------------------
  |  Branch (190:9): [True: 64.6M, False: 5.78M]
  |  Branch (190:26): [True: 39.4M, False: 25.2M]
  ------------------
  191|  39.4M|      if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (191:11): [True: 18.7M, False: 20.6M]
  ------------------
  192|  39.4M|      if (!nd[ndhi]) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (192:11): [True: 8.60M, False: 30.8M]
  ------------------
  193|  39.4M|    } else if (!nd[ndhi]) {
  ------------------
  |  Branch (193:16): [True: 12.4M, False: 18.5M]
  ------------------
  194|  12.4M|      if (ndhi != ndlo) { ndhi = (ndhi - 1) & 0x3f; stop2--; }
  ------------------
  |  Branch (194:11): [True: 12.4M, False: 0]
  ------------------
  195|      0|      else return ndlo;
  196|  12.4M|    }
  197|  70.4M|    k -= 9;
  198|  70.4M|  }
  199|   148M|  if (k) {
  ------------------
  |  Branch (199:7): [True: 148M, False: 450k]
  ------------------
  200|   148M|    uint32_t mask = (1U << k) - 1, mul = 1000000000 >> k, i = ndhi, carry = 0;
  201|   155M|    for (;;) {
  202|   155M|      uint32_t val = nd[i];
  203|   155M|      nd[i] = (val >> k) + carry;
  204|   155M|      carry = (val & mask) * mul;
  205|   155M|      if (i == ndlo) break;
  ------------------
  |  Branch (205:11): [True: 148M, False: 7.12M]
  ------------------
  206|  7.12M|      i = (i - 1) & 0x3f;
  207|  7.12M|    }
  208|   148M|    if (carry) { ndlo = (ndlo - 1) & 0x3f; nd[ndlo] = carry; }
  ------------------
  |  Branch (208:9): [True: 147M, False: 766k]
  ------------------
  209|   148M|  }
  210|   148M|  return ndlo;
  211|   148M|}
lj_strfmt_num.c:nd_add_m10e:
  215|  61.0M|{
  216|  61.0M|  uint32_t i, carry;
  217|  61.0M|  if (e >= 0) {
  ------------------
  |  Branch (217:7): [True: 946k, False: 60.1M]
  ------------------
  218|   946k|    i = (uint32_t)e/9;
  219|   946k|    carry = m * (ndigits_dec_threshold[e - (int32_t)i*9] + 1);
  220|  60.1M|  } else {
  221|  60.1M|    int32_t f = (e-8)/9;
  222|  60.1M|    i = (uint32_t)(64 + f);
  223|  60.1M|    carry = m * (ndigits_dec_threshold[e - f*9] + 1);
  224|  60.1M|  }
  225|  63.5M|  for (;;) {
  226|  63.5M|    uint32_t val = nd[i] + carry;
  227|  63.5M|    if (LJ_UNLIKELY(val >= 1000000000)) {
  ------------------
  |  |  146|  63.5M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 2.64M, False: 60.8M]
  |  |  ------------------
  ------------------
  228|  2.64M|      val -= 1000000000;
  229|  2.64M|      nd[i] = val;
  230|  2.64M|      if (LJ_UNLIKELY(i == ndhi)) {
  ------------------
  |  |  146|  2.64M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 199k, False: 2.44M]
  |  |  ------------------
  ------------------
  231|   199k|	ndhi = (ndhi + 1) & 0x3f;
  232|   199k|	nd[ndhi] = 1;
  233|   199k|	break;
  234|   199k|      }
  235|  2.44M|      carry = 1;
  236|  2.44M|      i = (i + 1) & 0x3f;
  237|  60.8M|    } else {
  238|  60.8M|      nd[i] = val;
  239|  60.8M|      break;
  240|  60.8M|    }
  241|  63.5M|  }
  242|  61.0M|  return ndhi;
  243|  61.0M|}
lj_strfmt_num.c:nd_similar:
  248|  1.13M|{
  249|  1.13M|  char nd9[9], ref9[9];
  250|  1.13M|  if (hilen <= prec) {
  ------------------
  |  Branch (250:7): [True: 815k, False: 324k]
  ------------------
  251|   815k|    if (LJ_UNLIKELY(nd[ndhi] != *ref)) return 0;
  ------------------
  |  |  146|   815k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 814k, False: 1.36k]
  |  |  ------------------
  ------------------
  252|  1.36k|    prec -= hilen; ref--; ndhi = (ndhi - 1) & 0x3f;
  253|  1.36k|    if (prec >= 9) {
  ------------------
  |  Branch (253:9): [True: 658, False: 707]
  ------------------
  254|    658|      if (LJ_UNLIKELY(nd[ndhi] != *ref)) return 0;
  ------------------
  |  |  146|    658|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 277, False: 381]
  |  |  ------------------
  ------------------
  255|    381|      prec -= 9; ref--; ndhi = (ndhi - 1) & 0x3f;
  256|    381|    }
  257|   324k|  } else {
  258|   324k|    prec -= hilen - 9;
  259|   324k|  }
  260|   325k|  lj_assertX(prec < 9, "bad precision %d", prec);
  ------------------
  |  |  366|   325k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   325k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 325k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   325k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  261|   325k|  lj_strfmt_wuint9(nd9, nd[ndhi]);
  262|   325k|  lj_strfmt_wuint9(ref9, *ref);
  263|   325k|  return !memcmp(nd9, ref9, prec) && (nd9[prec] < '5') == (ref9[prec] < '5');
  ------------------
  |  Branch (263:10): [True: 729, False: 324k]
  |  Branch (263:38): [True: 113, False: 616]
  ------------------
  264|   325k|}
lj_strfmt_num.c:lj_strfmt_wuint9:
   74|   149M|{
   75|   149M|  uint32_t v = u / 10000, w;
   76|   149M|  u -= v * 10000;
   77|   149M|  w = v / 10000;
   78|   149M|  v -= w * 10000;
   79|   149M|  *p++ = (char)('0'+w);
   80|   149M|  WINT_R(v, 23, 1000)
  ------------------
  |  |   70|   149M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   81|   149M|  WINT_R(v, 12, 100)
  ------------------
  |  |   70|   149M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   82|   149M|  WINT_R(v, 10, 10)
  ------------------
  |  |   70|   149M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   83|   149M|  *p++ = (char)('0'+v);
   84|   149M|  WINT_R(u, 23, 1000)
  ------------------
  |  |   70|   149M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   85|   149M|  WINT_R(u, 12, 100)
  ------------------
  |  |   70|   149M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   86|   149M|  WINT_R(u, 10, 10)
  ------------------
  |  |   70|   149M|  { uint32_t d = (x*(((1<<sh)+sc-1)/sc))>>sh; x -= d*sc; *p++ = (char)('0'+d); }
  ------------------
   87|   149M|  *p++ = (char)('0'+u);
   88|   149M|  return p;
   89|   149M|}

lj_strscan_scan:
  377|   189M|{
  378|   189M|  int32_t neg = 0;
  379|   189M|  const uint8_t *pe = p + len;
  380|       |
  381|       |  /* Remove leading space, parse sign and non-numbers. */
  382|   189M|  if (LJ_UNLIKELY(!lj_char_isdigit(*p))) {
  ------------------
  |  |  146|   189M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 46.8k, False: 189M]
  |  |  ------------------
  ------------------
  383|  46.8k|    while (lj_char_isspace(*p)) p++;
  384|  46.8k|    if (*p == '+' || *p == '-') neg = (*p++ == '-');
  ------------------
  |  Branch (384:9): [True: 12, False: 46.8k]
  |  Branch (384:22): [True: 735, False: 46.1k]
  ------------------
  385|  46.8k|    if (LJ_UNLIKELY(*p >= 'A')) {  /* Parse "inf", "infinity" or "nan". */
  ------------------
  |  |  146|  46.8k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 4.95k, False: 41.9k]
  |  |  ------------------
  ------------------
  386|  4.95k|      TValue tmp;
  387|  4.95k|      setnanV(&tmp);
  ------------------
  |  |  946|  4.95k|#define setnanV(o)		((o)->u64 = U64x(fff80000,00000000))
  |  |  ------------------
  |  |  |  |   94|  4.95k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  388|  4.95k|      if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|  9.90k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 15, False: 4.93k]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|  4.96k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 5, False: 10]
  |  |  ------------------
  ------------------
                    if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'f')) {
  ------------------
  |  |   73|      5|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 5]
  |  |  ------------------
  ------------------
  389|      0|	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  948|      0|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
              	if (neg) setminfV(&tmp); else setpinfV(&tmp);
  ------------------
  |  |  947|      0|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (389:6): [True: 0, False: 0]
  ------------------
  390|      0|	p += 3;
  391|      0|	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	if (casecmp(p[0],'i') && casecmp(p[1],'n') && casecmp(p[2],'i') &&
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  392|      0|	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
              	    casecmp(p[3],'t') && casecmp(p[4],'y')) p += 5;
  ------------------
  |  |   73|      0|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  393|  4.95k|      } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|  9.90k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 19, False: 4.93k]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|  4.96k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2, False: 17]
  |  |  ------------------
  ------------------
                    } else if (casecmp(p[0],'n') && casecmp(p[1],'a') && casecmp(p[2],'n')) {
  ------------------
  |  |   73|      2|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 0, False: 2]
  |  |  ------------------
  ------------------
  394|      0|	p += 3;
  395|      0|      }
  396|  4.95k|      while (lj_char_isspace(*p)) p++;
  397|  4.95k|      if (*p || p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (397:11): [True: 4.95k, False: 0]
  |  Branch (397:17): [True: 0, False: 0]
  ------------------
  398|      0|      o->u64 = tmp.u64;
  399|      0|      return STRSCAN_NUM;
  400|  4.95k|    }
  401|  46.8k|  }
  402|       |
  403|       |  /* Parse regular number. */
  404|   189M|  {
  405|   189M|    StrScanFmt fmt = STRSCAN_INT;
  406|   189M|    int cmask = LJ_CHAR_DIGIT;
  ------------------
  |  |   14|   189M|#define LJ_CHAR_DIGIT	0x08
  ------------------
  407|   189M|    int base = (opt & STRSCAN_OPT_C) && *p == '0' ? 0 : 10;
  ------------------
  |  |   16|   189M|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (407:16): [True: 0, False: 189M]
  |  Branch (407:41): [True: 0, False: 0]
  ------------------
  408|   189M|    const uint8_t *sp, *dp = NULL;
  409|   189M|    uint32_t dig = 0, hasdig = 0, x = 0;
  410|   189M|    int32_t ex = 0;
  411|       |
  412|       |    /* Determine base and skip leading zeros. */
  413|   189M|    if (LJ_UNLIKELY(*p <= '0')) {
  ------------------
  |  |  146|   189M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1.14M, False: 188M]
  |  |  ------------------
  ------------------
  414|  1.14M|      if (*p == '0') {
  ------------------
  |  Branch (414:11): [True: 1.10M, False: 41.1k]
  ------------------
  415|  1.10M|	if (casecmp(p[1], 'x'))
  ------------------
  |  |   73|  1.10M|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 5.74k, False: 1.09M]
  |  |  ------------------
  ------------------
  416|  5.74k|	  base = 16, cmask = LJ_CHAR_XDIGIT, p += 2;
  ------------------
  |  |   15|  5.74k|#define LJ_CHAR_XDIGIT	0x10
  ------------------
  417|  1.09M|	else if (casecmp(p[1], 'b'))
  ------------------
  |  |   73|  1.09M|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 209, False: 1.09M]
  |  |  ------------------
  ------------------
  418|    209|	  base = 2, cmask = LJ_CHAR_DIGIT, p += 2;
  ------------------
  |  |   14|    209|#define LJ_CHAR_DIGIT	0x08
  ------------------
  419|  1.10M|      }
  420|  3.21M|      for ( ; ; p++) {
  421|  3.21M|	if (*p == '0') {
  ------------------
  |  Branch (421:6): [True: 1.22M, False: 1.99M]
  ------------------
  422|  1.22M|	  hasdig = 1;
  423|  1.99M|	} else if (*p == '.') {
  ------------------
  |  Branch (423:13): [True: 852k, False: 1.14M]
  ------------------
  424|   852k|	  if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (424:8): [True: 5, False: 852k]
  ------------------
  425|   852k|	  dp = p;
  426|  1.14M|	} else {
  427|  1.14M|	  break;
  428|  1.14M|	}
  429|  3.21M|      }
  430|  1.14M|    }
  431|       |
  432|       |    /* Preliminary digit and decimal point scan. */
  433|  1.38G|    for (sp = p; ; p++) {
  434|  1.38G|      if (LJ_LIKELY(lj_char_isa(*p, cmask))) {
  ------------------
  |  |  145|  1.38G|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 1.10G, False: 281M]
  |  |  ------------------
  ------------------
  435|  1.10G|	x = x * 10 + (*p & 15);  /* For fast path below. */
  436|  1.10G|	dig++;
  437|  1.10G|      } else if (*p == '.') {
  ------------------
  |  Branch (437:18): [True: 91.9M, False: 189M]
  ------------------
  438|  91.9M|	if (dp) return STRSCAN_ERROR;
  ------------------
  |  Branch (438:6): [True: 9, False: 91.9M]
  ------------------
  439|  91.9M|	dp = p;
  440|   189M|      } else {
  441|   189M|	break;
  442|   189M|      }
  443|  1.38G|    }
  444|   189M|    if (!(hasdig | dig)) return STRSCAN_ERROR;
  ------------------
  |  Branch (444:9): [True: 186, False: 189M]
  ------------------
  445|       |
  446|       |    /* Handle decimal point. */
  447|   189M|    if (dp) {
  ------------------
  |  Branch (447:9): [True: 92.7M, False: 96.4M]
  ------------------
  448|  92.7M|      if (base == 2) return STRSCAN_ERROR;
  ------------------
  |  Branch (448:11): [True: 1, False: 92.7M]
  ------------------
  449|  92.7M|      fmt = STRSCAN_NUM;
  450|  92.7M|      if (dig) {
  ------------------
  |  Branch (450:11): [True: 92.7M, False: 7.85k]
  ------------------
  451|  92.7M|	ex = (int32_t)(dp-(p-1)); dp = p-1;
  452|  92.7M|	while (ex < 0 && *dp-- == '0') ex++, dig--;  /* Skip trailing zeros. */
  ------------------
  |  Branch (452:9): [True: 92.7M, False: 215]
  |  Branch (452:19): [True: 4.09k, False: 92.7M]
  ------------------
  453|  92.7M|	if (ex <= -STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|  92.7M|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (453:6): [True: 0, False: 92.7M]
  ------------------
  454|  92.7M|	if (base == 16) ex *= 4;
  ------------------
  |  Branch (454:6): [True: 1.26k, False: 92.7M]
  ------------------
  455|  92.7M|      }
  456|  92.7M|    }
  457|       |
  458|       |    /* Parse exponent. */
  459|   189M|    if (base >= 10 && casecmp(*p, (uint32_t)(base == 16 ? 'p' : 'e'))) {
  ------------------
  |  |   73|   378M|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 2.66M, False: 186M]
  |  |  |  Branch (73:40): [True: 5.73k, False: 189M]
  |  |  ------------------
  ------------------
  |  Branch (459:9): [True: 189M, False: 207]
  ------------------
  460|  2.66M|      uint32_t xx;
  461|  2.66M|      int negx = 0;
  462|  2.66M|      fmt = STRSCAN_NUM; p++;
  463|  2.66M|      if (*p == '+' || *p == '-') negx = (*p++ == '-');
  ------------------
  |  Branch (463:11): [True: 942k, False: 1.72M]
  |  Branch (463:24): [True: 1.71M, False: 17.1k]
  ------------------
  464|  2.66M|      if (!lj_char_isdigit(*p)) return STRSCAN_ERROR;
  ------------------
  |  |   28|  2.66M|#define lj_char_isdigit(c)	lj_char_isa((c), LJ_CHAR_DIGIT)
  |  |  ------------------
  |  |  |  |   24|  2.66M|#define lj_char_isa(c, t)	((lj_char_bits+1)[(c)] & t)
  |  |  ------------------
  ------------------
  |  Branch (464:11): [True: 8.73k, False: 2.66M]
  ------------------
  465|  2.66M|      xx = (*p++ & 15);
  466|  4.00M|      while (lj_char_isdigit(*p)) {
  467|  4.00M|	xx = xx * 10 + (*p & 15);
  468|  4.00M|	if (xx >= STRSCAN_MAXEXP) return STRSCAN_ERROR;
  ------------------
  |  |   66|  4.00M|#define STRSCAN_MAXEXP	(1 << 20)
  ------------------
  |  Branch (468:6): [True: 11, False: 4.00M]
  ------------------
  469|  4.00M|	p++;
  470|  4.00M|      }
  471|  2.66M|      ex += negx ? (int32_t)(~xx+1u) : (int32_t)xx;
  ------------------
  |  Branch (471:13): [True: 1.70M, False: 955k]
  ------------------
  472|  2.66M|    }
  473|       |
  474|       |    /* Parse suffix. */
  475|   189M|    if (*p) {
  ------------------
  |  Branch (475:9): [True: 82.0k, False: 189M]
  ------------------
  476|       |      /* I (IMAG), U (U32), LL (I64), ULL/LLU (U64), L (long), UL/LU (ulong). */
  477|       |      /* NYI: f (float). Not needed until cp_number() handles non-integers. */
  478|  82.0k|      if (casecmp(*p, 'i')) {
  ------------------
  |  |   73|  82.0k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 7.27k, False: 74.7k]
  |  |  ------------------
  ------------------
  479|  7.27k|	if (!(opt & STRSCAN_OPT_IMAG)) return STRSCAN_ERROR;
  ------------------
  |  |   14|  7.27k|#define STRSCAN_OPT_IMAG	0x04
  ------------------
  |  Branch (479:6): [True: 3, False: 7.27k]
  ------------------
  480|  7.27k|	p++; fmt = STRSCAN_IMAG;
  481|  74.7k|      } else if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (481:18): [True: 69.7k, False: 5.03k]
  ------------------
  482|  69.7k|	if (casecmp(*p, 'u')) p++, fmt = STRSCAN_U32;
  ------------------
  |  |   73|  69.7k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 5.25k, False: 64.4k]
  |  |  ------------------
  ------------------
  483|  69.7k|	if (casecmp(*p, 'l')) {
  ------------------
  |  |   73|  69.7k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 63.5k, False: 6.22k]
  |  |  ------------------
  ------------------
  484|  63.5k|	  p++;
  485|  63.5k|	  if (casecmp(*p, 'l')) p++, fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  |   73|  63.5k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 63.0k, False: 502]
  |  |  ------------------
  ------------------
  486|    502|	  else if (!(opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|    502|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (486:13): [True: 502, False: 0]
  ------------------
  487|      0|	  else if (sizeof(long) == 8) fmt += STRSCAN_I64 - STRSCAN_INT;
  ------------------
  |  Branch (487:13): [Folded - Ignored]
  ------------------
  488|  63.5k|	}
  489|  69.2k|	if (casecmp(*p, 'u') && (fmt == STRSCAN_INT || fmt == STRSCAN_I64))
  ------------------
  |  |   73|   138k|#define casecmp(c, k)	(((c) | 0x20) == k)
  |  |  ------------------
  |  |  |  Branch (73:23): [True: 35.3k, False: 33.9k]
  |  |  ------------------
  ------------------
  |  Branch (489:27): [True: 0, False: 35.3k]
  |  Branch (489:49): [True: 35.3k, False: 7]
  ------------------
  490|  35.3k|	  p++, fmt += STRSCAN_U32 - STRSCAN_INT;
  491|  69.2k|	if ((fmt == STRSCAN_U32 && !(opt & STRSCAN_OPT_C)) ||
  ------------------
  |  |   16|     21|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (491:7): [True: 21, False: 69.2k]
  |  Branch (491:29): [True: 21, False: 0]
  ------------------
  492|  69.2k|	    (fmt >= STRSCAN_I64 && !(opt & STRSCAN_OPT_LL)))
  ------------------
  |  |   15|  63.0k|#define STRSCAN_OPT_LL		0x08
  ------------------
  |  Branch (492:7): [True: 63.0k, False: 6.20k]
  |  Branch (492:29): [True: 3, False: 63.0k]
  ------------------
  493|     24|	  return STRSCAN_ERROR;
  494|  69.2k|      }
  495|  81.5k|      while (lj_char_isspace(*p)) p++;
  496|  81.5k|      if (*p) return STRSCAN_ERROR;
  ------------------
  |  Branch (496:11): [True: 10.5k, False: 70.9k]
  ------------------
  497|  81.5k|    }
  498|   189M|    if (p < pe) return STRSCAN_ERROR;
  ------------------
  |  Branch (498:9): [True: 4, False: 189M]
  ------------------
  499|       |
  500|       |    /* Fast path for decimal 32 bit integers. */
  501|   189M|    if (fmt == STRSCAN_INT && base == 10 &&
  ------------------
  |  Branch (501:9): [True: 94.0M, False: 95.0M]
  |  Branch (501:31): [True: 94.0M, False: 3.13k]
  ------------------
  502|   189M|	(dig < 10 || (dig == 10 && *sp <= '2' && x < 0x80000000u+neg))) {
  ------------------
  |  Branch (502:3): [True: 94.0M, False: 69.9k]
  |  Branch (502:16): [True: 6.45k, False: 63.5k]
  |  Branch (502:29): [True: 2.25k, False: 4.20k]
  |  Branch (502:43): [True: 1.07k, False: 1.18k]
  ------------------
  503|  94.0M|      if ((opt & STRSCAN_OPT_TONUM)) {
  ------------------
  |  |   13|  94.0M|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (503:11): [True: 94.0M, False: 0]
  ------------------
  504|  94.0M|	o->n = neg ? -(double)x : (double)x;
  ------------------
  |  Branch (504:9): [True: 646, False: 94.0M]
  ------------------
  505|  94.0M|	return STRSCAN_NUM;
  506|  94.0M|      } else if (x == 0 && neg) {
  ------------------
  |  Branch (506:18): [True: 0, False: 0]
  |  Branch (506:28): [True: 0, False: 0]
  ------------------
  507|      0|	o->n = -0.0;
  508|      0|	return STRSCAN_NUM;
  509|      0|      } else {
  510|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (510:9): [True: 0, False: 0]
  ------------------
  511|      0|	return STRSCAN_INT;
  512|      0|      }
  513|  94.0M|    }
  514|       |
  515|       |    /* Dispatch to base-specific parser. */
  516|  95.1M|    if (base == 0 && !(fmt == STRSCAN_NUM || fmt == STRSCAN_IMAG))
  ------------------
  |  Branch (516:9): [True: 0, False: 95.1M]
  |  Branch (516:24): [True: 0, False: 0]
  |  Branch (516:46): [True: 0, False: 0]
  ------------------
  517|      0|      return strscan_oct(sp, o, fmt, neg, dig);
  518|  95.1M|    if (base == 16)
  ------------------
  |  Branch (518:9): [True: 5.71k, False: 95.1M]
  ------------------
  519|  5.71k|      fmt = strscan_hex(sp, o, fmt, opt, ex, neg, dig);
  520|  95.1M|    else if (base == 2)
  ------------------
  |  Branch (520:14): [True: 203, False: 95.1M]
  ------------------
  521|    203|      fmt = strscan_bin(sp, o, fmt, opt, ex, neg, dig);
  522|  95.1M|    else
  523|  95.1M|      fmt = strscan_dec(sp, o, fmt, opt, ex, neg, dig);
  524|       |
  525|       |    /* Try to convert number to integer, if requested. */
  526|  95.1M|    if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |   12|  95.0M|#define STRSCAN_OPT_TOINT	0x01  /* Convert to int32_t, if possible. */
  ------------------
                  if (fmt == STRSCAN_NUM && (opt & STRSCAN_OPT_TOINT) && !tvismzero(o)) {
  ------------------
  |  |  819|      0|#define tvismzero(o)	((o)->u64 == U64x(80000000,00000000))
  |  |  ------------------
  |  |  |  |   94|      0|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (526:9): [True: 95.0M, False: 70.2k]
  |  Branch (526:31): [True: 0, False: 95.0M]
  |  Branch (526:60): [True: 0, False: 0]
  ------------------
  527|      0|      double n = o->n;
  528|      0|      int32_t i = lj_num2int(n);
  ------------------
  |  | 1000|      0|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  529|      0|      if (n == (lua_Number)i) { o->i = i; return STRSCAN_INT; }
  ------------------
  |  Branch (529:11): [True: 0, False: 0]
  ------------------
  530|      0|    }
  531|  95.1M|    return fmt;
  532|  95.1M|  }
  533|  95.1M|}
lj_strscan_num:
  536|  2.24M|{
  537|  2.24M|  StrScanFmt fmt = lj_strscan_scan((const uint8_t *)strdata(str), str->len, o,
  ------------------
  |  |  316|  2.24M|#define strdata(s)	((const char *)((s)+1))
  ------------------
  538|  2.24M|				   STRSCAN_OPT_TONUM);
  ------------------
  |  |   13|  2.24M|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  539|  2.24M|  lj_assertX(fmt == STRSCAN_ERROR || fmt == STRSCAN_NUM, "bad scan format");
  ------------------
  |  |  366|  2.24M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  4.48M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 5.29k, False: 2.24M]
  |  |  |  |  |  Branch (355:5): [True: 2.24M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.24M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  540|  2.24M|  return (fmt != STRSCAN_ERROR);
  541|  2.24M|}
lj_strscan.c:strscan_hex:
  108|  5.71k|{
  109|  5.71k|  uint64_t x = 0;
  110|  5.71k|  uint32_t i;
  111|       |
  112|       |  /* Scan hex digits. */
  113|  57.8k|  for (i = dig > 16 ? 16 : dig ; i; i--, p++) {
  ------------------
  |  Branch (113:12): [True: 1.53k, False: 4.17k]
  |  Branch (113:34): [True: 52.1k, False: 5.71k]
  ------------------
  114|  52.1k|    uint32_t d = (*p != '.' ? *p : *++p); if (d > '9') d += 9;
  ------------------
  |  Branch (114:19): [True: 50.9k, False: 1.13k]
  |  Branch (114:47): [True: 20.8k, False: 31.2k]
  ------------------
  115|  52.1k|    x = (x << 4) + (d & 15);
  116|  52.1k|  }
  117|       |
  118|       |  /* Summarize rounding-effect of excess digits. */
  119|  17.1k|  for (i = 16; i < dig; i++, p++)
  ------------------
  |  Branch (119:16): [True: 11.4k, False: 5.71k]
  ------------------
  120|  11.4k|    x |= ((*p != '.' ? *p : *++p) != '0'), ex2 += 4;
  ------------------
  |  Branch (120:12): [True: 11.3k, False: 131]
  ------------------
  121|       |
  122|       |  /* Format-specific handling. */
  123|  5.71k|  switch (fmt) {
  124|  2.93k|  case STRSCAN_INT:
  ------------------
  |  Branch (124:3): [True: 2.93k, False: 2.77k]
  ------------------
  125|  2.93k|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg &&
  ------------------
  |  |   13|  2.93k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (125:9): [True: 0, False: 2.93k]
  |  Branch (125:39): [True: 0, False: 0]
  ------------------
  126|  2.93k|	!(x == 0 && neg)) {
  ------------------
  |  Branch (126:4): [True: 0, False: 0]
  |  Branch (126:14): [True: 0, False: 0]
  ------------------
  127|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (127:14): [True: 0, False: 0]
  ------------------
  128|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  129|      0|    }
  130|  2.93k|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|  2.93k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (130:9): [True: 2.93k, False: 0]
  ------------------
  131|       |    /* fallthrough */
  132|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (132:3): [True: 0, False: 5.71k]
  ------------------
  133|      0|    if (dig > 8) return STRSCAN_ERROR;
  ------------------
  |  Branch (133:9): [True: 0, False: 0]
  ------------------
  134|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (134:12): [True: 0, False: 0]
  ------------------
  135|      0|    return STRSCAN_U32;
  136|     13|  case STRSCAN_I64:
  ------------------
  |  Branch (136:3): [True: 13, False: 5.69k]
  ------------------
  137|     31|  case STRSCAN_U64:
  ------------------
  |  Branch (137:3): [True: 18, False: 5.69k]
  ------------------
  138|     31|    if (dig > 16) return STRSCAN_ERROR;
  ------------------
  |  Branch (138:9): [True: 8, False: 23]
  ------------------
  139|     23|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (139:14): [True: 0, False: 23]
  ------------------
  140|     23|    return fmt;
  141|  2.74k|  default:
  ------------------
  |  Branch (141:3): [True: 2.74k, False: 2.96k]
  ------------------
  142|  2.74k|    break;
  143|  5.71k|  }
  144|       |
  145|       |  /* Reduce range, then convert to double. */
  146|  5.68k|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|  5.68k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (146:7): [True: 1.60k, False: 4.07k]
  ------------------
  147|  5.68k|  strscan_double(x, o, ex2, neg);
  148|  5.68k|  return fmt;
  149|  5.71k|}
lj_strscan.c:strscan_double:
   77|  94.8M|{
   78|  94.8M|  double n;
   79|       |
   80|       |  /* Avoid double rounding for denormals. */
   81|  94.8M|  if (LJ_UNLIKELY(ex2 <= -1075 && x != 0)) {
  ------------------
  |  |  146|  94.8M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 13.9k, False: 94.8M]
  |  |  |  Branch (146:44): [True: 13.9k, False: 94.8M]
  |  |  |  Branch (146:44): [True: 13.9k, False: 0]
  |  |  ------------------
  ------------------
   82|       |    /* NYI: all of this generates way too much code on 32 bit CPUs. */
   83|  13.9k|#if (defined(__GNUC__) || defined(__clang__)) && LJ_64
   84|  13.9k|    int32_t b = (int32_t)(__builtin_clzll(x)^63);
   85|       |#else
   86|       |    int32_t b = (x>>32) ? 32+(int32_t)lj_fls((uint32_t)(x>>32)) :
   87|       |			  (int32_t)lj_fls((uint32_t)x);
   88|       |#endif
   89|  13.9k|    if ((int32_t)b + ex2 <= -1023 && (int32_t)b + ex2 >= -1075) {
  ------------------
  |  Branch (89:9): [True: 8.70k, False: 5.19k]
  |  Branch (89:38): [True: 8.21k, False: 488]
  ------------------
   90|  8.21k|      uint64_t rb = (uint64_t)1 << (-1075-ex2);
   91|  8.21k|      if ((x & rb) && ((x & (rb+rb+rb-1)))) x += rb+rb;
  ------------------
  |  Branch (91:11): [True: 1.93k, False: 6.28k]
  |  Branch (91:23): [True: 1.93k, False: 3]
  ------------------
   92|  8.21k|      x = (x & ~(rb+rb-1));
   93|  8.21k|    }
   94|  13.9k|  }
   95|       |
   96|       |  /* Convert to double using a signed int64_t conversion, then rescale. */
   97|  94.8M|  lj_assertX((int64_t)x >= 0, "bad double conversion");
  ------------------
  |  |  366|  94.8M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  94.8M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 94.8M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  94.8M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   98|  94.8M|  n = (double)(int64_t)x;
   99|  94.8M|  if (neg) n = -n;
  ------------------
  |  Branch (99:7): [True: 36, False: 94.8M]
  ------------------
  100|  94.8M|  if (ex2) n = ldexp(n, ex2);
  ------------------
  |  Branch (100:7): [True: 94.8M, False: 2.81k]
  ------------------
  101|  94.8M|  o->n = n;
  102|  94.8M|}
lj_strscan.c:strscan_bin:
  335|    203|{
  336|    203|  uint64_t x = 0;
  337|    203|  uint32_t i;
  338|       |
  339|    203|  if (ex2 || dig > 64) return STRSCAN_ERROR;
  ------------------
  |  Branch (339:7): [True: 0, False: 203]
  |  Branch (339:14): [True: 1, False: 202]
  ------------------
  340|       |
  341|       |  /* Scan binary digits. */
  342|  5.74k|  for (i = dig; i; i--, p++) {
  ------------------
  |  Branch (342:17): [True: 5.54k, False: 193]
  ------------------
  343|  5.54k|    if ((*p & ~1) != '0') return STRSCAN_ERROR;
  ------------------
  |  Branch (343:9): [True: 9, False: 5.53k]
  ------------------
  344|  5.53k|    x = (x << 1) | (*p & 1);
  345|  5.53k|  }
  346|       |
  347|       |  /* Format-specific handling. */
  348|    193|  switch (fmt) {
  349|    190|  case STRSCAN_INT:
  ------------------
  |  Branch (349:3): [True: 190, False: 3]
  ------------------
  350|    190|    if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|    190|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (350:9): [True: 0, False: 190]
  |  Branch (350:39): [True: 0, False: 0]
  ------------------
  351|      0|      o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (351:14): [True: 0, False: 0]
  ------------------
  352|      0|      return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  353|      0|    }
  354|    190|    if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; break; }
  ------------------
  |  |   16|    190|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (354:9): [True: 190, False: 0]
  ------------------
  355|       |    /* fallthrough */
  356|      0|  case STRSCAN_U32:
  ------------------
  |  Branch (356:3): [True: 0, False: 193]
  ------------------
  357|      0|    if (dig > 32) return STRSCAN_ERROR;
  ------------------
  |  Branch (357:9): [True: 0, False: 0]
  ------------------
  358|      0|    o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (358:12): [True: 0, False: 0]
  ------------------
  359|      0|    return STRSCAN_U32;
  360|      1|  case STRSCAN_I64:
  ------------------
  |  Branch (360:3): [True: 1, False: 192]
  ------------------
  361|      2|  case STRSCAN_U64:
  ------------------
  |  Branch (361:3): [True: 1, False: 192]
  ------------------
  362|      2|    o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (362:14): [True: 0, False: 2]
  ------------------
  363|      2|    return fmt;
  364|      1|  default:
  ------------------
  |  Branch (364:3): [True: 1, False: 192]
  ------------------
  365|      1|    break;
  366|    193|  }
  367|       |
  368|       |  /* Reduce range, then convert to double. */
  369|    191|  if ((x & U64x(c0000000,0000000))) { x = (x >> 2) | (x & 3); ex2 += 2; }
  ------------------
  |  |   94|    191|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  |  Branch (369:7): [True: 2, False: 189]
  ------------------
  370|    191|  strscan_double(x, o, ex2, neg);
  371|    191|  return fmt;
  372|    193|}
lj_strscan.c:strscan_dec:
  186|  95.1M|{
  187|  95.1M|  uint8_t xi[STRSCAN_DDIG], *xip = xi;
  188|       |
  189|  95.1M|  if (dig) {
  ------------------
  |  Branch (189:7): [True: 95.1M, False: 43.7k]
  ------------------
  190|  95.1M|    uint32_t i = dig;
  191|  95.1M|    if (i > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|  95.1M|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (191:9): [True: 54, False: 95.1M]
  ------------------
  192|     54|      ex10 += (int32_t)(i - STRSCAN_MAXDIG);
  ------------------
  |  |   63|     54|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  193|     54|      i = STRSCAN_MAXDIG;
  ------------------
  |  |   63|     54|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  194|     54|    }
  195|       |    /* Scan unaligned leading digit. */
  196|  95.1M|    if (((ex10^i) & 1))
  ------------------
  |  Branch (196:9): [True: 40.0M, False: 55.0M]
  ------------------
  197|  40.0M|      *xip++ = ((*p != '.' ? *p : *++p) & 15), i--, p++;
  ------------------
  |  Branch (197:18): [True: 40.0M, False: 0]
  ------------------
  198|       |    /* Scan aligned double-digits. */
  199|   327M|    for ( ; i > 1; i -= 2) {
  ------------------
  |  Branch (199:13): [True: 232M, False: 95.1M]
  ------------------
  200|   232M|      uint32_t d = 10 * ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (200:27): [True: 232M, False: 104k]
  ------------------
  201|   232M|      *xip++ = d + ((*p != '.' ? *p : *++p) & 15); p++;
  ------------------
  |  Branch (201:22): [True: 232M, False: 40]
  ------------------
  202|   232M|    }
  203|       |    /* Scan and realign trailing digit. */
  204|  95.1M|    if (i) *xip++ = 10 * ((*p != '.' ? *p : *++p) & 15), ex10--, dig++, p++;
  ------------------
  |  Branch (204:9): [True: 93.4M, False: 1.64M]
  |  Branch (204:28): [True: 1.66M, False: 91.8M]
  ------------------
  205|       |
  206|       |    /* Summarize rounding-effect of excess digits. */
  207|  95.1M|    if (dig > STRSCAN_MAXDIG) {
  ------------------
  |  |   63|  95.1M|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (207:9): [True: 54, False: 95.1M]
  ------------------
  208|  5.25k|      do {
  209|  5.25k|	if ((*p != '.' ? *p : *++p) != '0') { xip[-1] |= 1; break; }
  ------------------
  |  Branch (209:6): [True: 42, False: 5.21k]
  |  Branch (209:7): [True: 5.25k, False: 1]
  ------------------
  210|  5.21k|	p++;
  211|  5.21k|      } while (--dig > STRSCAN_MAXDIG);
  ------------------
  |  |   63|  5.21k|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  |  Branch (211:16): [True: 5.20k, False: 12]
  ------------------
  212|     54|      dig = STRSCAN_MAXDIG;
  ------------------
  |  |   63|     54|#define STRSCAN_MAXDIG	800		/* 772 + extra are sufficient. */
  ------------------
  213|  95.1M|    } else {  /* Simplify exponent. */
  214|   102M|      while (ex10 > 0 && dig <= 18) *xip++ = 0, ex10 -= 2, dig += 2;
  ------------------
  |  Branch (214:14): [True: 8.21M, False: 94.3M]
  |  Branch (214:26): [True: 7.44M, False: 769k]
  ------------------
  215|  95.1M|    }
  216|  95.1M|  } else {  /* Only got zeros. */
  217|  43.7k|    ex10 = 0;
  218|  43.7k|    xi[0] = 0;
  219|  43.7k|  }
  220|       |
  221|       |  /* Fast path for numbers in integer format (but handles e.g. 1e6, too). */
  222|  95.1M|  if (dig <= 20 && ex10 == 0) {
  ------------------
  |  Branch (222:7): [True: 95.1M, False: 15.4k]
  |  Branch (222:20): [True: 322k, False: 94.8M]
  ------------------
  223|   322k|    uint8_t *xis;
  224|   322k|    uint64_t x = xi[0];
  225|   322k|    double n;
  226|  1.21M|    for (xis = xi+1; xis < xip; xis++) x = x * 100 + *xis;
  ------------------
  |  Branch (226:22): [True: 892k, False: 322k]
  ------------------
  227|   322k|    if (!(dig == 20 && (xi[0] > 18 || (int64_t)x >= 0))) {  /* No overflow? */
  ------------------
  |  Branch (227:11): [True: 3.45k, False: 319k]
  |  Branch (227:25): [True: 962, False: 2.49k]
  |  Branch (227:39): [True: 28, False: 2.46k]
  ------------------
  228|       |      /* Format-specific handling. */
  229|   321k|      switch (fmt) {
  230|  58.4k|      case STRSCAN_INT:
  ------------------
  |  Branch (230:7): [True: 58.4k, False: 263k]
  ------------------
  231|  58.4k|	if (!(opt & STRSCAN_OPT_TONUM) && x < 0x80000000u+neg) {
  ------------------
  |  |   13|  58.4k|#define STRSCAN_OPT_TONUM	0x02  /* Always convert to double. */
  ------------------
  |  Branch (231:6): [True: 0, False: 58.4k]
  |  Branch (231:36): [True: 0, False: 0]
  ------------------
  232|      0|	  o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (232:11): [True: 0, False: 0]
  ------------------
  233|      0|	  return STRSCAN_INT;  /* Fast path for 32 bit integers. */
  234|      0|	}
  235|  58.4k|	if (!(opt & STRSCAN_OPT_C)) { fmt = STRSCAN_NUM; goto plainnumber; }
  ------------------
  |  |   16|  58.4k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (235:6): [True: 58.4k, False: 0]
  ------------------
  236|       |	/* fallthrough */
  237|      0|      case STRSCAN_U32:
  ------------------
  |  Branch (237:7): [True: 0, False: 321k]
  ------------------
  238|      0|	if ((x >> 32) != 0) return STRSCAN_ERROR;
  ------------------
  |  Branch (238:6): [True: 0, False: 0]
  ------------------
  239|      0|	o->i = neg ? (int32_t)(~x+1u) : (int32_t)x;
  ------------------
  |  Branch (239:9): [True: 0, False: 0]
  ------------------
  240|      0|	return STRSCAN_U32;
  241|  22.4k|      case STRSCAN_I64:
  ------------------
  |  Branch (241:7): [True: 22.4k, False: 299k]
  ------------------
  242|  62.9k|      case STRSCAN_U64:
  ------------------
  |  Branch (242:7): [True: 40.5k, False: 281k]
  ------------------
  243|  62.9k|	o->u64 = neg ? ~x+1u : x;
  ------------------
  |  Branch (243:11): [True: 0, False: 62.9k]
  ------------------
  244|  62.9k|	return fmt;
  245|   200k|      default:
  ------------------
  |  Branch (245:7): [True: 200k, False: 121k]
  ------------------
  246|   258k|      plainnumber:  /* Fast path for plain numbers < 2^63. */
  247|   258k|	if ((int64_t)x < 0) break;
  ------------------
  |  Branch (247:6): [True: 2.52k, False: 256k]
  ------------------
  248|   256k|	n = (double)(int64_t)x;
  249|   256k|	if (neg) n = -n;
  ------------------
  |  Branch (249:6): [True: 19, False: 256k]
  ------------------
  250|   256k|	o->n = n;
  251|   256k|	return fmt;
  252|   321k|      }
  253|   321k|    }
  254|   322k|  }
  255|       |
  256|       |  /* Slow non-integer path. */
  257|  94.8M|  if (fmt == STRSCAN_INT) {
  ------------------
  |  Branch (257:7): [True: 10.4k, False: 94.8M]
  ------------------
  258|  10.4k|    if ((opt & STRSCAN_OPT_C)) return STRSCAN_ERROR;
  ------------------
  |  |   16|  10.4k|#define STRSCAN_OPT_C		0x10
  ------------------
  |  Branch (258:9): [True: 0, False: 10.4k]
  ------------------
  259|  10.4k|    fmt = STRSCAN_NUM;
  260|  94.8M|  } else if (fmt > STRSCAN_INT) {
  ------------------
  |  Branch (260:14): [True: 1, False: 94.8M]
  ------------------
  261|      1|    return STRSCAN_ERROR;
  262|      1|  }
  263|  94.8M|  {
  264|  94.8M|    uint32_t hi = 0, lo = (uint32_t)(xip-xi);
  265|  94.8M|    int32_t ex2 = 0, idig = (int32_t)lo + (ex10 >> 1);
  266|       |
  267|  94.8M|    lj_assertX(lo > 0 && (ex10 & 1) == 0, "bad lo %d ex10 %d", lo, ex10);
  ------------------
  |  |  366|  94.8M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   189M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 94.8M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 94.8M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  94.8M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  268|       |
  269|       |    /* Handle simple overflow/underflow. */
  270|  94.8M|    if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  948|      4|#define setminfV(o)		((o)->u64 = U64x(fff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|      4|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
                  if (idig > 310/2) { if (neg) setminfV(o); else setpinfV(o); return fmt; }
  ------------------
  |  |  947|    308|#define setpinfV(o)		((o)->u64 = U64x(7ff00000,00000000))
  |  |  ------------------
  |  |  |  |   94|    308|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  |  |  ------------------
  ------------------
  |  Branch (270:9): [True: 312, False: 94.8M]
  |  Branch (270:29): [True: 4, False: 308]
  ------------------
  271|  94.8M|    else if (idig < -326/2) { o->n = neg ? -0.0 : 0.0; return fmt; }
  ------------------
  |  Branch (271:14): [True: 324, False: 94.8M]
  |  Branch (271:38): [True: 0, False: 324]
  ------------------
  272|       |
  273|       |    /* Scale up until we have at least 17 or 18 integer part digits. */
  274|   287M|    while (idig < 9 && idig < DLEN(lo, hi)) {
  ------------------
  |  |   71|   284M|#define DLEN(lo, hi)	((int32_t)(((lo)-(hi)) & STRSCAN_DMASK))
  |  |  ------------------
  |  |  |  |   65|   284M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   284M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   284M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (274:12): [True: 284M, False: 3.04M]
  |  Branch (274:24): [True: 192M, False: 91.7M]
  ------------------
  275|   192M|      uint32_t i, cy = 0;
  276|   192M|      ex2 -= 6;
  277|  4.66G|      for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|   192M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   192M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   192M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   192M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DPREV(lo); ; i = DPREV(i)) {
  ------------------
  |  |   70|  4.46G|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  4.46G|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  4.46G|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  4.46G|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  278|  4.66G|	uint32_t d = (xi[i] << 6) + cy;
  279|  4.66G|	cy = (((d >> 2) * 5243) >> 17); d = d - cy * 100;  /* Div/mod 100. */
  280|  4.66G|	xi[i] = (uint8_t)d;
  281|  4.66G|	if (i == hi) break;
  ------------------
  |  Branch (281:6): [True: 192M, False: 4.46G]
  ------------------
  282|  4.46G|	if (d == 0 && i == DPREV(lo)) lo = i;
  ------------------
  |  |   70|   136M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   136M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   136M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   136M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (282:6): [True: 136M, False: 4.33G]
  |  Branch (282:16): [True: 95.5M, False: 40.4M]
  ------------------
  283|  4.46G|      }
  284|   192M|      if (cy) {
  ------------------
  |  Branch (284:11): [True: 172M, False: 19.6M]
  ------------------
  285|   172M|	hi = DPREV(hi);
  ------------------
  |  |   70|   172M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   172M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   172M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   172M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  286|   172M|	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|   172M|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   172M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   172M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   172M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	if (xi[DPREV(lo)] == 0) lo = DPREV(lo);
  ------------------
  |  |   70|  21.6k|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  21.6k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  21.6k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  21.6k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (286:6): [True: 21.6k, False: 172M]
  ------------------
  287|   172M|	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|    155|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    155|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    155|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    155|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	else if (hi == lo) { lo = DPREV(lo); xi[DPREV(lo)] |= xi[lo]; }
  ------------------
  |  |   70|    155|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    155|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    155|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    155|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (287:11): [True: 155, False: 172M]
  ------------------
  288|   172M|	xi[hi] = (uint8_t)cy; idig++;
  289|   172M|      }
  290|   192M|    }
  291|       |
  292|       |    /* Scale down until no more than 17 or 18 integer part digits remain. */
  293|   152M|    while (idig > 9) {
  ------------------
  |  Branch (293:12): [True: 57.8M, False: 94.8M]
  ------------------
  294|  57.8M|      uint32_t i = hi, cy = 0;
  295|  57.8M|      ex2 += 6;
  296|  6.09G|      do {
  297|  6.09G|	cy += xi[i];
  298|  6.09G|	xi[i] = (cy >> 6);
  299|  6.09G|	cy = 100 * (cy & 0x3f);
  300|  6.09G|	if (xi[i] == 0 && i == hi) hi = DNEXT(hi), idig--;
  ------------------
  |  |   69|  52.4M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  52.4M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  52.4M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  52.4M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (300:6): [True: 124M, False: 5.97G]
  |  Branch (300:20): [True: 52.4M, False: 72.4M]
  ------------------
  301|  6.09G|	i = DNEXT(i);
  ------------------
  |  |   69|  6.09G|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  6.09G|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  6.09G|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  6.09G|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  302|  6.09G|      } while (i != lo);
  ------------------
  |  Branch (302:16): [True: 6.04G, False: 57.8M]
  ------------------
  303|   224M|      while (cy) {
  ------------------
  |  Branch (303:14): [True: 166M, False: 57.8M]
  ------------------
  304|   166M|	if (hi == lo) { xi[DPREV(lo)] |= 1; break; }
  ------------------
  |  |   70|    373|#define DPREV(a)	(((a)-1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|    373|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|    373|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|    373|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (304:6): [True: 373, False: 166M]
  ------------------
  305|   166M|	xi[lo] = (cy >> 6); lo = DNEXT(lo);
  ------------------
  |  |   69|   166M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   166M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   166M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   166M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  306|   166M|	cy = 100 * (cy & 0x3f);
  307|   166M|      }
  308|  57.8M|    }
  309|       |
  310|       |    /* Collect integer part digits and convert to rescaled double. */
  311|  94.8M|    {
  312|  94.8M|      uint64_t x = xi[hi];
  313|  94.8M|      uint32_t i;
  314|   374M|      for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|  94.8M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  94.8M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  94.8M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  94.8M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    for (i = DNEXT(hi); --idig > 0 && i != lo; i = DNEXT(i))
  ------------------
  |  |   69|   279M|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|   279M|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|   279M|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|   279M|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (314:27): [True: 283M, False: 91.1M]
  |  Branch (314:41): [True: 279M, False: 3.68M]
  ------------------
  315|   279M|	x = x * 100 + xi[i];
  316|  94.8M|      if (i == lo) {
  ------------------
  |  Branch (316:11): [True: 91.8M, False: 3.02M]
  ------------------
  317|  95.6M|	while (--idig >= 0) x = x * 100;
  ------------------
  |  Branch (317:9): [True: 3.83M, False: 91.8M]
  ------------------
  318|  91.8M|      } else {  /* Gather round bit from remaining digits. */
  319|  3.02M|	x <<= 1; ex2--;
  320|  3.03M|	do {
  321|  3.03M|	  if (xi[i]) { x |= 1; break; }
  ------------------
  |  Branch (321:8): [True: 3.02M, False: 9.02k]
  ------------------
  322|  9.02k|	  i = DNEXT(i);
  ------------------
  |  |   69|  9.02k|#define DNEXT(a)	(((a)+1) & STRSCAN_DMASK)
  |  |  ------------------
  |  |  |  |   65|  9.02k|#define STRSCAN_DMASK	(STRSCAN_DDIG-1)
  |  |  |  |  ------------------
  |  |  |  |  |  |   64|  9.02k|#define STRSCAN_DDIG	(STRSCAN_DIG/2)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   62|  9.02k|#define STRSCAN_DIG	1024
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  323|  9.02k|	} while (i != lo);
  ------------------
  |  Branch (323:11): [True: 9.02k, False: 1]
  ------------------
  324|  3.02M|      }
  325|      0|      strscan_double(x, o, ex2, neg);
  326|  94.8M|    }
  327|  94.8M|  }
  328|      0|  return fmt;
  329|  94.8M|}

lj_meta.c:lj_strscan_numberobj:
   36|  2.73k|{
   37|  2.73k|  return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  802|  5.46k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  2.73k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  2.73k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  2.73k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 2.72k, False: 12]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  795|     24|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|     12|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|     12|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 2, False: 10]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |   31|      4|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 2, False: 0]
  |  |  |  Branch (31:50): [True: 2, False: 0]
  |  |  ------------------
  ------------------
   38|  2.73k|}
lj_ffrecord.c:lj_strscan_numberobj:
   36|    332|{
   37|    332|  return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  802|    664|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|    332|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|    332|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|    332|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 332, False: 0]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  795|      0|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      0|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 0, False: 0]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |   31|      0|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 0, False: 0]
  |  |  |  Branch (31:50): [True: 0, False: 0]
  |  |  ------------------
  ------------------
   38|    332|}
lj_lib.c:lj_strscan_numberobj:
   36|   159k|{
   37|   159k|  return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  802|   318k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   159k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   159k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   159k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 159k, False: 6]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  795|     12|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|      6|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|      6|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4, False: 2]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |   31|      8|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 0, False: 4]
  |  |  |  Branch (31:50): [True: 4, False: 0]
  |  |  ------------------
  ------------------
   38|   159k|}
lib_base.c:lj_strscan_numberobj:
   36|  48.9k|{
   37|  48.9k|  return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  802|  97.8k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  48.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  48.9k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  48.9k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 0, False: 48.9k]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |  795|  97.8k|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  48.9k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  48.9k|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 48.8k, False: 66]
  |  |  ------------------
  ------------------
                return tvisnumber(o) || (tvisstr(o) && lj_strscan_number(strV(o), o));
  ------------------
  |  |   31|  97.7k|#define lj_strscan_number(s, o)		lj_strscan_num((s), (o))
  |  |  ------------------
  |  |  |  Branch (31:34): [True: 43.7k, False: 5.13k]
  |  |  |  Branch (31:50): [True: 48.8k, False: 0]
  |  |  ------------------
  ------------------
   38|  48.9k|}

lj_tab_new:
  140|  4.74M|{
  141|  4.74M|  GCtab *t = newtab(L, asize, hbits);
  142|  4.74M|  clearapart(t);
  143|  4.74M|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (143:7): [True: 311k, False: 4.43M]
  ------------------
  144|  4.74M|  return t;
  145|  4.74M|}
lj_tab_new_ah:
  149|   232k|{
  150|   232k|  return lj_tab_new(L, (uint32_t)(a > 0 ? a+1 : 0), hsize2hbits(h));
  ------------------
  |  |   53|   232k|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|   205k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 218k, False: 13.7k]
  |  |  |  Branch (53:32): [True: 13.6k, False: 205k]
  |  |  ------------------
  ------------------
  |  Branch (150:35): [True: 13.6k, False: 218k]
  ------------------
  151|   232k|}
lj_tab_new1:
  155|  2.01M|{
  156|  2.01M|  GCtab *t = newtab(L, ahsize & 0xffffff, ahsize >> 24);
  157|  2.01M|  clearapart(t);
  158|  2.01M|  if (t->hmask > 0) clearhpart(t);
  ------------------
  |  Branch (158:7): [True: 0, False: 2.01M]
  ------------------
  159|  2.01M|  return t;
  160|  2.01M|}
lj_tab_dup:
  165|   660k|{
  166|   660k|  GCtab *t;
  167|   660k|  uint32_t asize, hmask;
  168|   660k|  t = newtab(L, kt->asize, kt->hmask > 0 ? lj_fls(kt->hmask)+1 : 0);
  ------------------
  |  |  149|   653k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (168:28): [True: 653k, False: 6.80k]
  ------------------
  169|   660k|  lj_assertL(kt->asize == t->asize && kt->hmask == t->hmask,
  ------------------
  |  |  365|   660k|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.32M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 660k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 660k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   660k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  170|   660k|	     "mismatched size of table and template");
  171|   660k|  t->nomm = 0;  /* Keys with metamethod names may be present. */
  172|   660k|  asize = kt->asize;
  173|   660k|  if (asize > 0) {
  ------------------
  |  Branch (173:7): [True: 7.73k, False: 652k]
  ------------------
  174|  7.73k|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|  7.73k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.73k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  175|  7.73k|    TValue *karray = tvref(kt->array);
  ------------------
  |  |  217|  7.73k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  7.73k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  176|  7.73k|    if (asize < 64) {  /* An inlined loop beats memcpy for < 512 bytes. */
  ------------------
  |  Branch (176:9): [True: 7.66k, False: 66]
  ------------------
  177|  7.66k|      uint32_t i;
  178|  41.5k|      for (i = 0; i < asize; i++)
  ------------------
  |  Branch (178:19): [True: 33.8k, False: 7.66k]
  ------------------
  179|  33.8k|	copyTV(L, &array[i], &karray[i]);
  180|  7.66k|    } else {
  181|     66|      memcpy(array, karray, asize*sizeof(TValue));
  182|     66|    }
  183|  7.73k|  }
  184|   660k|  hmask = kt->hmask;
  185|   660k|  if (hmask > 0) {
  ------------------
  |  Branch (185:7): [True: 653k, False: 6.80k]
  ------------------
  186|   653k|    uint32_t i;
  187|   653k|    Node *node = noderef(t->node);
  ------------------
  |  |  515|   653k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   653k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  188|   653k|    Node *knode = noderef(kt->node);
  ------------------
  |  |  515|   653k|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   653k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  189|   653k|    ptrdiff_t d = (char *)node - (char *)knode;
  190|   653k|    setfreetop(t, node, (Node *)((char *)getfreetop(kt, knode) + d));
  ------------------
  |  |  519|   653k|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   653k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  191|  20.4M|    for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (191:17): [True: 19.7M, False: 653k]
  ------------------
  192|  19.7M|      Node *kn = &knode[i];
  193|  19.7M|      Node *n = &node[i];
  194|  19.7M|      Node *next = nextnode(kn);
  ------------------
  |  |  516|  19.7M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  19.7M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  195|       |      /* Don't use copyTV here, since it asserts on a copy of a dead key. */
  196|  19.7M|      n->val = kn->val; n->key = kn->key;
  197|  19.7M|      setmref(n->next, next == NULL? next : (Node *)((char *)next + d));
  ------------------
  |  |   39|  39.5M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  |  |  |  Branch (39:55): [True: 17.3M, False: 2.46M]
  |  |  ------------------
  ------------------
  198|  19.7M|    }
  199|   653k|  }
  200|   660k|  return t;
  201|   660k|}
lj_tab_free:
  216|  7.41M|{
  217|  7.41M|  if (t->hmask > 0)
  ------------------
  |  Branch (217:7): [True: 4.69M, False: 2.72M]
  ------------------
  218|  4.69M|    lj_mem_freevec(g, noderef(t->node), t->hmask+1, Node);
  ------------------
  |  |  130|  4.69M|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  219|  7.41M|  if (t->asize > 0 && LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|  2.07M|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (219:7): [True: 2.07M, False: 5.33M]
  |  Branch (219:23): [Folded - Ignored]
  |  Branch (219:47): [True: 29.5k, False: 2.04M]
  ------------------
  220|  29.5k|    lj_mem_freevec(g, tvref(t->array), t->asize, TValue);
  ------------------
  |  |  130|  29.5k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  221|  7.41M|  if (LJ_MAX_COLOSIZE != 0 && t->colo)
  ------------------
  |  |   62|  7.41M|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (221:7): [Folded - Ignored]
  |  Branch (221:31): [True: 2.06M, False: 5.35M]
  ------------------
  222|  2.06M|    lj_mem_free(g, t, sizetabcolo((uint32_t)t->colo & 0x7f));
  ------------------
  |  |  513|  2.06M|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
  223|  5.35M|  else
  224|  5.35M|    lj_mem_freet(g, t);
  ------------------
  |  |  134|  5.35M|#define lj_mem_freet(g, p)	lj_mem_free(g, (p), sizeof(*(p)))
  ------------------
  225|  7.41M|}
lj_tab_resize:
  231|  7.04M|{
  232|  7.04M|  Node *oldnode = noderef(t->node);
  ------------------
  |  |  515|  7.04M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  7.04M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  233|  7.04M|  uint32_t oldasize = t->asize;
  234|  7.04M|  uint32_t oldhmask = t->hmask;
  235|  7.04M|  if (asize > oldasize) {  /* Array part grows? */
  ------------------
  |  Branch (235:7): [True: 49.1k, False: 6.99M]
  ------------------
  236|  49.1k|    TValue *array;
  237|  49.1k|    uint32_t i;
  238|  49.1k|    if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|  49.1k|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|  49.1k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (238:9): [True: 0, False: 49.1k]
  ------------------
  239|      0|      lj_err_msg(L, LJ_ERR_TABOV);
  240|  49.1k|    if (LJ_MAX_COLOSIZE != 0 && t->colo > 0) {
  ------------------
  |  |   62|  49.1k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (240:9): [Folded - Ignored]
  |  Branch (240:33): [True: 15.3k, False: 33.8k]
  ------------------
  241|       |      /* A colocated array must be separated and copied. */
  242|  15.3k|      TValue *oarray = tvref(t->array);
  ------------------
  |  |  217|  15.3k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  15.3k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  243|  15.3k|      array = lj_mem_newvec(L, asize, TValue);
  ------------------
  |  |  125|  15.3k|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  15.3k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  244|  15.3k|      t->colo = (int8_t)(t->colo | 0x80);  /* Mark as separated (colo < 0). */
  245|  45.4k|      for (i = 0; i < oldasize; i++)
  ------------------
  |  Branch (245:19): [True: 30.1k, False: 15.3k]
  ------------------
  246|  30.1k|	copyTV(L, &array[i], &oarray[i]);
  247|  33.8k|    } else {
  248|  33.8k|      array = (TValue *)lj_mem_realloc(L, tvref(t->array),
  ------------------
  |  |  217|  33.8k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  33.8k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  249|  33.8k|			  oldasize*sizeof(TValue), asize*sizeof(TValue));
  250|  33.8k|    }
  251|  49.1k|    setmref(t->array, array);
  ------------------
  |  |   39|  49.1k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  252|  49.1k|    t->asize = asize;
  253|  24.4M|    for (i = oldasize; i < asize; i++)  /* Clear newly allocated slots. */
  ------------------
  |  Branch (253:24): [True: 24.4M, False: 49.1k]
  ------------------
  254|  24.4M|      setnilV(&array[i]);
  ------------------
  |  |  872|  24.4M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  255|  49.1k|  }
  256|       |  /* Create new (empty) hash part. */
  257|  7.04M|  if (hbits) {
  ------------------
  |  Branch (257:7): [True: 7.00M, False: 36.6k]
  ------------------
  258|  7.00M|    newhpart(L, t, hbits);
  259|  7.00M|    clearhpart(t);
  260|  7.00M|  } else {
  261|  36.6k|    global_State *g = G(L);
  ------------------
  |  |  705|  36.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  36.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  262|  36.6k|    setmref(t->node, &g->nilnode);
  ------------------
  |  |   39|  36.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  263|  36.6k|#if LJ_GC64
  264|  36.6k|    setmref(t->freetop, &g->nilnode);
  ------------------
  |  |   39|  36.6k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  265|  36.6k|#endif
  266|  36.6k|    t->hmask = 0;
  267|  36.6k|  }
  268|  7.04M|  if (asize < oldasize) {  /* Array part shrinks? */
  ------------------
  |  Branch (268:7): [True: 1.15k, False: 7.03M]
  ------------------
  269|  1.15k|    TValue *array = tvref(t->array);
  ------------------
  |  |  217|  1.15k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  1.15k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  270|  1.15k|    uint32_t i;
  271|  1.15k|    t->asize = asize;  /* Note: This 'shrinks' even colocated arrays. */
  272|  10.6k|    for (i = asize; i < oldasize; i++)  /* Reinsert old array values. */
  ------------------
  |  Branch (272:21): [True: 9.48k, False: 1.15k]
  ------------------
  273|  9.48k|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  9.48k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (273:11): [True: 1.06k, False: 8.42k]
  ------------------
  274|  1.06k|	copyTV(L, lj_tab_setinth(L, t, (int32_t)i), &array[i]);
  275|       |    /* Physically shrink only separated arrays. */
  276|  1.15k|    if (LJ_MAX_COLOSIZE != 0 && t->colo <= 0)
  ------------------
  |  |   62|  1.15k|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (276:9): [Folded - Ignored]
  |  Branch (276:33): [True: 105, False: 1.05k]
  ------------------
  277|    105|      setmref(t->array, lj_mem_realloc(L, array,
  ------------------
  |  |   39|    105|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  278|  1.15k|	      oldasize*sizeof(TValue), asize*sizeof(TValue)));
  279|  1.15k|  }
  280|  7.04M|  if (oldhmask > 0) {  /* Reinsert pairs from old hash part. */
  ------------------
  |  Branch (280:7): [True: 3.27M, False: 3.76M]
  ------------------
  281|  3.27M|    global_State *g;
  282|  3.27M|    uint32_t i;
  283|   488M|    for (i = 0; i <= oldhmask; i++) {
  ------------------
  |  Branch (283:17): [True: 485M, False: 3.27M]
  ------------------
  284|   485M|      Node *n = &oldnode[i];
  285|   485M|      if (!tvisnil(&n->val))
  ------------------
  |  |  782|   485M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (285:11): [True: 484M, False: 449k]
  ------------------
  286|   484M|	copyTV(L, lj_tab_set(L, t, &n->key), &n->val);
  287|   485M|    }
  288|  3.27M|    g = G(L);
  ------------------
  |  |  705|  3.27M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  3.27M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  289|  3.27M|    lj_mem_freevec(g, oldnode, oldhmask+1, Node);
  ------------------
  |  |  130|  3.27M|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  290|  3.27M|  }
  291|  7.04M|}
lj_tab_reasize:
  371|  2.08k|{
  372|  2.08k|  lj_tab_resize(L, t, nasize+1, t->hmask > 0 ? lj_fls(t->hmask)+1 : 0);
  ------------------
  |  |  149|  1.11k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (372:33): [True: 1.11k, False: 970]
  ------------------
  373|  2.08k|}
lj_tab_getinth:
  378|   441k|{
  379|   441k|  TValue k;
  380|   441k|  Node *n;
  381|   441k|  k.n = (lua_Number)key;
  382|   441k|  n = hashnum(t, &k);
  ------------------
  |  |   45|   441k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|   441k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  383|   442k|  do {
  384|   442k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|   884k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   442k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   442k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   442k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 1.09k, False: 441k]
  |  |  ------------------
  ------------------
  |  Branch (384:29): [True: 482, False: 614]
  ------------------
  385|    482|      return &n->val;
  386|   442k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   441k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   441k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (386:12): [True: 456, False: 441k]
  ------------------
  387|   441k|  return NULL;
  388|   441k|}
lj_tab_getstr:
  391|  4.76M|{
  392|  4.76M|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|  4.76M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  393|  5.24M|  do {
  394|  9.22M|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  10.4M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  5.24M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  5.24M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 4.61M, False: 637k]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|  4.61M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  4.61M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  4.61M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  4.61M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 4.61M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  4.61M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (394:29): [True: 3.63M, False: 981k]
  ------------------
  395|  3.63M|      return &n->val;
  396|  5.24M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  1.61M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  1.61M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (396:12): [True: 489k, False: 1.12M]
  ------------------
  397|  1.12M|  return NULL;
  398|  4.76M|}
lj_tab_get:
  401|  2.39M|{
  402|  2.39M|  if (tvisstr(key)) {
  ------------------
  |  |  795|  2.39M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  2.39M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  2.39M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.50M, False: 889k]
  |  |  ------------------
  ------------------
  403|  1.50M|    cTValue *tv = lj_tab_getstr(t, strV(key));
  ------------------
  |  |  859|  1.50M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|  1.50M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.50M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.50M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.50M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.50M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  404|  1.50M|    if (tv)
  ------------------
  |  Branch (404:9): [True: 385k, False: 1.11M]
  ------------------
  405|   385k|      return tv;
  406|  1.50M|  } else if (tvisint(key)) {
  ------------------
  |  |  803|   889k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  1.77M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  407|      0|    cTValue *tv = lj_tab_getint(t, intV(key));
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (82:71): [Folded - Ignored]
  |  |  |  Branch (82:71): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  408|      0|    if (tv)
  ------------------
  |  Branch (408:9): [True: 0, False: 0]
  ------------------
  409|      0|      return tv;
  410|   889k|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|   889k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   889k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   889k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   889k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 888k, False: 670]
  |  |  ------------------
  ------------------
  411|   888k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|   888k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   888k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   888k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   888k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 888k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   888k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  412|   888k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|   888k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  413|   888k|    if (nk == (lua_Number)k) {
  ------------------
  |  Branch (413:9): [True: 441k, False: 446k]
  ------------------
  414|   441k|      cTValue *tv = lj_tab_getint(t, k);
  ------------------
  |  |   82|   441k|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|   441k|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 1.80k, False: 439k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|  1.80k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  1.80k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  1.80k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  415|   441k|      if (tv)
  ------------------
  |  Branch (415:11): [True: 2.28k, False: 439k]
  ------------------
  416|  2.28k|	return tv;
  417|   446k|    } else {
  418|   446k|      goto genlookup;  /* Else use the generic lookup. */
  419|   446k|    }
  420|   888k|  } else if (!tvisnil(key)) {
  ------------------
  |  |  782|    670|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (420:14): [True: 655, False: 15]
  ------------------
  421|    655|    Node *n;
  422|   447k|  genlookup:
  423|   447k|    n = hashkey(t, key);
  424|   534k|    do {
  425|   534k|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (425:11): [True: 348k, False: 185k]
  ------------------
  426|   348k|	return &n->val;
  427|   534k|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|   185k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   185k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (427:14): [True: 86.6k, False: 98.5k]
  ------------------
  428|   447k|  }
  429|  1.65M|  return niltv(L);
  ------------------
  |  |  667|  1.65M|  check_exp(tvisnil(&G(L)->nilnode.val), &G(L)->nilnode.val)
  |  |  ------------------
  |  |  |  |  367|  1.65M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.65M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  1.65M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 1.65M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.65M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  430|  1.65M|}
lj_tab_newkey:
  436|   861M|{
  437|   861M|  Node *n = hashkey(t, key);
  438|   861M|  if (!tvisnil(&n->val) || t->hmask == 0) {
  ------------------
  |  |  782|  1.72G|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (438:7): [True: 392M, False: 468M]
  |  Branch (438:28): [True: 3.76M, False: 465M]
  ------------------
  439|   396M|    Node *nodebase = noderef(t->node);
  ------------------
  |  |  515|   396M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   396M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  440|   396M|    Node *collide, *freenode = getfreetop(t, nodebase);
  ------------------
  |  |  518|   396M|#define getfreetop(t, n)	(noderef((t)->freetop))
  |  |  ------------------
  |  |  |  |  515|   396M|#define noderef(r)	(mref((r), Node))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   396M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  441|   396M|    lj_assertL(freenode >= nodebase && freenode <= nodebase+t->hmask+1,
  ------------------
  |  |  365|   396M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   792M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 396M, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 396M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   396M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  442|   396M|	       "bad freenode");
  443|   742M|    do {
  444|   742M|      if (freenode == nodebase) {  /* No free node found? */
  ------------------
  |  Branch (444:11): [True: 7.03M, False: 735M]
  ------------------
  445|  7.03M|	rehashtab(L, t, key);  /* Rehash table. */
  446|  7.03M|	return lj_tab_set(L, t, key);  /* Retry key insertion. */
  447|  7.03M|      }
  448|   742M|    } while (!tvisnil(&(--freenode)->key));
  ------------------
  |  |  782|   735M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (448:14): [True: 345M, False: 389M]
  ------------------
  449|   389M|    setfreetop(t, nodebase, freenode);
  ------------------
  |  |  519|   389M|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|   389M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  450|   389M|    lj_assertL(freenode != &G(L)->nilnode, "store to fallback hash");
  ------------------
  |  |  365|   389M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   389M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 389M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   389M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  451|   389M|    collide = hashkey(t, &n->key);
  452|   389M|    if (collide != n) {  /* Colliding node not the main node? */
  ------------------
  |  Branch (452:9): [True: 101M, False: 288M]
  ------------------
  453|   125M|      while (noderef(collide->next) != n)  /* Find predecessor. */
  ------------------
  |  |  515|   125M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|   125M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (453:14): [True: 24.7M, False: 101M]
  ------------------
  454|  24.7M|	collide = nextnode(collide);
  ------------------
  |  |  516|  24.7M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  24.7M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  455|   101M|      setmref(collide->next, freenode);  /* Relink chain. */
  ------------------
  |  |   39|   101M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  456|       |      /* Copy colliding node into free node and free main node. */
  457|   101M|      freenode->val = n->val;
  458|   101M|      freenode->key = n->key;
  459|   101M|      freenode->next = n->next;
  460|   101M|      setmref(n->next, NULL);
  ------------------
  |  |   39|   101M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  461|   101M|      setnilV(&n->val);
  ------------------
  |  |  872|   101M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  462|       |      /* Rechain pseudo-resurrected string keys with colliding hashes. */
  463|   125M|      while (nextnode(freenode)) {
  ------------------
  |  |  516|   125M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   125M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  |  |  |  Branch (516:21): [True: 23.7M, False: 101M]
  |  |  ------------------
  ------------------
  464|  23.7M|	Node *nn = nextnode(freenode);
  ------------------
  |  |  516|  23.7M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  23.7M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  465|  23.7M|	if (!tvisnil(&nn->val) && hashkey(t, &nn->key) == n) {
  ------------------
  |  |  782|  47.5M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (465:6): [True: 23.7M, False: 0]
  |  Branch (465:28): [True: 0, False: 23.7M]
  ------------------
  466|      0|	  freenode->next = nn->next;
  467|      0|	  nn->next = n->next;
  468|      0|	  setmref(n->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  469|       |	  /*
  470|       |	  ** Rechaining a resurrected string key creates a new dilemma:
  471|       |	  ** Another string key may have originally been resurrected via
  472|       |	  ** _any_ of the previous nodes as a chain anchor. Including
  473|       |	  ** a node that had to be moved, which makes them unreachable.
  474|       |	  ** It's not feasible to check for all previous nodes, so rechain
  475|       |	  ** any string key that's currently in a non-main positions.
  476|       |	  */
  477|      0|	  while ((nn = nextnode(freenode))) {
  ------------------
  |  |  516|      0|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (477:11): [True: 0, False: 0]
  ------------------
  478|      0|	    if (!tvisnil(&nn->val)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (478:10): [True: 0, False: 0]
  ------------------
  479|      0|	      Node *mn = hashkey(t, &nn->key);
  480|      0|	      if (mn != freenode && mn != nn) {
  ------------------
  |  Branch (480:12): [True: 0, False: 0]
  |  Branch (480:30): [True: 0, False: 0]
  ------------------
  481|      0|		freenode->next = nn->next;
  482|      0|		nn->next = mn->next;
  483|      0|		setmref(mn->next, nn);
  ------------------
  |  |   39|      0|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  484|      0|	      } else {
  485|      0|		freenode = nn;
  486|      0|	      }
  487|      0|	    } else {
  488|      0|	      freenode = nn;
  489|      0|	    }
  490|      0|	  }
  491|      0|	  break;
  492|  23.7M|	} else {
  493|  23.7M|	  freenode = nn;
  494|  23.7M|	}
  495|  23.7M|      }
  496|   288M|    } else {  /* Otherwise use free node. */
  497|   288M|      setmrefr(freenode->next, n->next);  /* Insert into chain. */
  ------------------
  |  |   41|   288M|#define setmrefr(r, v)	((r).ptr64 = (v).ptr64)
  ------------------
  498|   288M|      setmref(n->next, freenode);
  ------------------
  |  |   39|   288M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  499|   288M|      n = freenode;
  500|   288M|    }
  501|   389M|  }
  502|   854M|  n->key.u64 = key->u64;
  503|   854M|  if (LJ_UNLIKELY(tvismzero(&n->key)))
  ------------------
  |  |  146|   854M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 1, False: 854M]
  |  |  ------------------
  ------------------
  504|      1|    n->key.u64 = 0;
  505|   854M|  lj_gc_anybarriert(L, t);
  ------------------
  |  |   95|   854M|  { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  146|   854M|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (146:24): [True: 61.1k, False: 854M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 { if (LJ_UNLIKELY(isblack(obj2gco(t)))) lj_gc_barrierback(G(L), (t)); }
  |  |  ------------------
  |  |  |  |  705|  61.1k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  61.1k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  506|   854M|  lj_assertL(tvisnil(&n->val), "new hash slot is not empty");
  ------------------
  |  |  365|   854M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   854M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 854M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   854M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  507|   854M|  return &n->val;
  508|   854M|}
lj_tab_setinth:
  511|   371k|{
  512|   371k|  TValue k;
  513|   371k|  Node *n;
  514|   371k|  k.n = (lua_Number)key;
  515|   371k|  n = hashnum(t, &k);
  ------------------
  |  |   45|   371k|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|   371k|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
  516|   451k|  do {
  517|   451k|    if (tvisnum(&n->key) && n->key.n == k.n)
  ------------------
  |  |  804|   902k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   451k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   451k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   451k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 90.5k, False: 360k]
  |  |  ------------------
  ------------------
  |  Branch (517:29): [True: 24.9k, False: 65.6k]
  ------------------
  518|  24.9k|      return &n->val;
  519|   451k|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   426k|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   426k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (519:12): [True: 79.4k, False: 346k]
  ------------------
  520|   346k|  return lj_tab_newkey(L, t, &k);
  521|   371k|}
lj_tab_setstr:
  524|   872M|{
  525|   872M|  TValue k;
  526|   872M|  Node *n = hashstr(t, key);
  ------------------
  |  |   42|   872M|#define hashstr(t, s)		hashmask(t, (s)->sid)
  ------------------
  527|   994M|  do {
  528|  1.05G|    if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  795|  1.98G|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   994M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   994M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 526M, False: 467M]
  |  |  ------------------
  ------------------
                  if (tvisstr(&n->key) && strV(&n->key) == key)
  ------------------
  |  |  859|   526M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   526M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   526M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   526M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 526M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   526M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (528:29): [True: 15.3M, False: 511M]
  ------------------
  529|  15.3M|      return &n->val;
  530|   994M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|   979M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|   979M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (530:12): [True: 122M, False: 856M]
  ------------------
  531|   856M|  setstrV(L, &k, key);
  532|   856M|  return lj_tab_newkey(L, t, &k);
  533|   872M|}
lj_tab_set:
  536|   692M|{
  537|   692M|  Node *n;
  538|   692M|  t->nomm = 0;  /* Invalidate negative metamethod cache. */
  539|   692M|  if (tvisstr(key)) {
  ------------------
  |  |  795|   692M|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|   692M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|   692M|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 672M, False: 20.5M]
  |  |  ------------------
  ------------------
  540|   672M|    return lj_tab_setstr(L, t, strV(key));
  ------------------
  |  |  859|   672M|#define strV(o)		check_exp(tvisstr(o), &gcval(o)->str)
  |  |  ------------------
  |  |  |  |  367|   672M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   672M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   672M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 672M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   672M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  541|   672M|  } else if (tvisint(key)) {
  ------------------
  |  |  803|  20.5M|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  41.0M|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  542|      0|    return lj_tab_setint(L, t, intV(key));
  ------------------
  |  |   84|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  |  Branch (79:35): [Folded - Ignored]
  |  |  |  |  |  Branch (79:35): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (80:47): [Folded - Ignored]
  |  |  |  |  |  Branch (80:47): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (84:74): [Folded - Ignored]
  |  |  |  Branch (84:74): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  543|  20.5M|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|  20.5M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  20.5M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  20.5M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  20.5M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 18.3M, False: 2.15M]
  |  |  ------------------
  ------------------
  544|  18.3M|    lua_Number nk = numV(key);
  ------------------
  |  |  866|  18.3M|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|  18.3M|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  18.3M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  18.3M|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 18.3M, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  18.3M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  545|  18.3M|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|  18.3M|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  546|  18.3M|    if (nk == (lua_Number)k)
  ------------------
  |  Branch (546:9): [True: 16.8M, False: 1.56M]
  ------------------
  547|  16.8M|      return lj_tab_setint(L, t, k);
  ------------------
  |  |   84|  16.8M|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   79|  16.8M|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 16.4M, False: 356k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_setinth(L, (t), (key)))
  |  |  ------------------
  |  |  |  |   80|  16.4M|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|  16.4M|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|  16.4M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  548|  1.56M|    if (tvisnan(key))
  ------------------
  |  |  812|  1.56M|#define tvisnan(o)	((o)->n != (o)->n)
  |  |  ------------------
  |  |  |  Branch (812:20): [True: 0, False: 1.56M]
  |  |  ------------------
  ------------------
  549|      0|      lj_err_msg(L, LJ_ERR_NANIDX);
  550|       |    /* Else use the generic lookup. */
  551|  2.15M|  } else if (tvisnil(key)) {
  ------------------
  |  |  782|  2.15M|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 0, False: 2.15M]
  |  |  ------------------
  ------------------
  552|      0|    lj_err_msg(L, LJ_ERR_NILIDX);
  553|      0|  }
  554|  3.72M|  n = hashkey(t, key);
  555|  4.75M|  do {
  556|  4.75M|    if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (556:9): [True: 97.8k, False: 4.65M]
  ------------------
  557|  97.8k|      return &n->val;
  558|  4.75M|  } while ((n = nextnode(n)));
  ------------------
  |  |  516|  4.65M|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|  4.65M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (558:12): [True: 1.03M, False: 3.62M]
  ------------------
  559|  3.62M|  return lj_tab_newkey(L, t, key);
  560|  3.72M|}
lj_tab_keyindex:
  573|  1.46k|{
  574|  1.46k|  TValue tmp;
  575|  1.46k|  if (tvisint(key)) {
  ------------------
  |  |  803|  1.46k|#define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  549|  2.93k|#define LJ_DUALNUM		0
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (549:21): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|      0|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisint(o)	(LJ_DUALNUM && itype(o) == LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|      0|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|      0|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (803:35): [True: 0, False: 0]
  |  |  ------------------
  ------------------
  576|      0|    int32_t k = intV(key);
  ------------------
  |  |  867|      0|#define intV(o)		check_exp(tvisint(o), (int32_t)(o)->i)
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  577|      0|    if ((uint32_t)k < t->asize)
  ------------------
  |  Branch (577:9): [True: 0, False: 0]
  ------------------
  578|      0|      return (uint32_t)k + 1;
  579|      0|    setnumV(&tmp, (lua_Number)k);
  ------------------
  |  |  945|      0|#define setnumV(o, x)		((o)->n = (x))
  ------------------
  580|      0|    key = &tmp;
  581|  1.46k|  } else if (tvisnum(key)) {
  ------------------
  |  |  804|  1.46k|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.46k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.46k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.46k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 313, False: 1.15k]
  |  |  ------------------
  ------------------
  582|    313|    lua_Number nk = numV(key);
  ------------------
  |  |  866|    313|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|    313|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    313|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    313|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 313, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    313|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  583|    313|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|    313|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  584|    313|    if ((uint32_t)k < t->asize && nk == (lua_Number)k)
  ------------------
  |  Branch (584:9): [True: 309, False: 4]
  |  Branch (584:35): [True: 309, False: 0]
  ------------------
  585|    309|      return (uint32_t)k + 1;
  586|    313|  }
  587|  1.15k|  if (!tvisnil(key)) {
  ------------------
  |  |  782|  1.15k|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (587:7): [True: 111, False: 1.04k]
  ------------------
  588|    111|    Node *n = hashkey(t, key);
  589|    139|    do {
  590|    139|      if (lj_obj_equal(&n->key, key))
  ------------------
  |  Branch (590:11): [True: 107, False: 32]
  ------------------
  591|    107|	return t->asize + (uint32_t)((n+1) - noderef(t->node));
  ------------------
  |  |  515|    107|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    107|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  592|    139|    } while ((n = nextnode(n)));
  ------------------
  |  |  516|     32|#define nextnode(n)	(mref((n)->next, Node))
  |  |  ------------------
  |  |  |  |   36|     32|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (592:14): [True: 28, False: 4]
  ------------------
  593|      4|    if (key->u32.hi == LJ_KEYINDEX)  /* Despecialized ITERN while running. */
  ------------------
  |  |  288|      4|#define LJ_KEYINDEX		0xfffe7fffu
  ------------------
  |  Branch (593:9): [True: 0, False: 4]
  ------------------
  594|      0|      return key->u32.lo;
  595|      4|    return ~0u;  /* Invalid key to next. */
  596|      4|  }
  597|  1.04k|  return 0;  /* A nil key starts the traversal. */
  598|  1.15k|}
lj_tab_next:
  602|  1.32k|{
  603|  1.32k|  uint32_t idx = lj_tab_keyindex(t, key);  /* Find successor index of key. */
  604|       |  /* First traverse the array part. */
  605|  6.78k|  for (; idx < t->asize; idx++) {
  ------------------
  |  Branch (605:10): [True: 5.88k, False: 899]
  ------------------
  606|  5.88k|    cTValue *a = arrayslot(t, idx);
  ------------------
  |  |   80|  5.88k|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  ------------------
  |  |  |  |  217|  5.88k|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  5.88k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  607|  5.88k|    if (LJ_LIKELY(!tvisnil(a))) {
  ------------------
  |  |  145|  5.88k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 430, False: 5.45k]
  |  |  ------------------
  ------------------
  608|    430|      setintV(o, idx);
  609|    430|      o[1] = *a;
  610|    430|      return 1;
  611|    430|    }
  612|  5.88k|  }
  613|    899|  idx -= t->asize;
  614|       |  /* Then traverse the hash part. */
  615|  1.64k|  for (; idx <= t->hmask; idx++) {
  ------------------
  |  Branch (615:10): [True: 935, False: 711]
  ------------------
  616|    935|    Node *n = &noderef(t->node)[idx];
  ------------------
  |  |  515|    935|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|    935|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  617|    935|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|    935|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (617:9): [True: 188, False: 747]
  ------------------
  618|    188|      o[0] = n->key;
  619|    188|      o[1] = n->val;
  620|    188|      return 1;
  621|    188|    }
  622|    935|  }
  623|    711|  return (int32_t)idx < 0 ? -1 : 0;  /* Invalid key or end of traversal. */
  ------------------
  |  Branch (623:10): [True: 4, False: 707]
  ------------------
  624|    899|}
lj_tab_len:
  655|  1.07k|{
  656|  1.07k|  size_t hi = (size_t)t->asize;
  657|  1.07k|  if (hi) hi--;
  ------------------
  |  Branch (657:7): [True: 1.06k, False: 5]
  ------------------
  658|       |  /* In a growing array the last array element is very likely nil. */
  659|  1.07k|  if (hi > 0 && LJ_LIKELY(tvisnil(arrayslot(t, hi)))) {
  ------------------
  |  |  145|  1.06k|#define LJ_LIKELY(x)	__builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (145:22): [True: 456, False: 610]
  |  |  ------------------
  ------------------
  |  Branch (659:7): [True: 1.06k, False: 5]
  ------------------
  660|       |    /* Binary search to find a non-nil to nil transition in the array. */
  661|    456|    size_t lo = 0;
  662|  2.83k|    while (hi - lo > 1) {
  ------------------
  |  Branch (662:12): [True: 2.37k, False: 456]
  ------------------
  663|  2.37k|      size_t mid = (lo+hi) >> 1;
  664|  2.37k|      if (tvisnil(arrayslot(t, mid))) hi = mid; else lo = mid;
  ------------------
  |  |  782|  2.37k|#define tvisnil(o)	((o)->it64 == -1)
  |  |  ------------------
  |  |  |  Branch (782:20): [True: 1.13k, False: 1.24k]
  |  |  ------------------
  ------------------
  665|  2.37k|    }
  666|    456|    return (MSize)lo;
  667|    456|  }
  668|       |  /* Without a hash part, there's an implicit nil after the last element. */
  669|    615|  return t->hmask ? tab_len_slow(t, hi) : (MSize)hi;
  ------------------
  |  Branch (669:10): [True: 5, False: 610]
  ------------------
  670|  1.07k|}
lj_tab.c:newtab:
   82|  7.41M|{
   83|  7.41M|  GCtab *t;
   84|       |  /* First try to colocate the array part. */
   85|  7.41M|  if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  7.41M|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
                if (LJ_MAX_COLOSIZE != 0 && asize > 0 && asize <= LJ_MAX_COLOSIZE) {
  ------------------
  |  |   62|  2.06M|#define LJ_MAX_COLOSIZE	16		/* Max. elems for colocated array. */
  ------------------
  |  Branch (85:7): [Folded - Ignored]
  |  Branch (85:31): [True: 2.06M, False: 5.35M]
  |  Branch (85:44): [True: 2.06M, False: 180]
  ------------------
   86|  2.06M|    Node *nilnode;
   87|  2.06M|    lj_assertL((sizeof(GCtab) & 7) == 0, "bad GCtab size");
  ------------------
  |  |  365|  2.06M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  2.06M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|  2.06M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   88|  2.06M|    t = (GCtab *)lj_mem_newgco(L, sizetabcolo(asize));
  ------------------
  |  |  513|  2.06M|#define sizetabcolo(n)	((n)*sizeof(TValue) + sizeof(GCtab))
  ------------------
   89|  2.06M|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  2.06M|#define LJ_TTAB			(~11u)
  ------------------
   90|  2.06M|    t->nomm = (uint8_t)~0;
   91|  2.06M|    t->colo = (int8_t)asize;
   92|  2.06M|    setmref(t->array, (TValue *)((char *)t + sizeof(GCtab)));
  ------------------
  |  |   39|  2.06M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   93|  2.06M|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  2.06M|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   94|  2.06M|    t->asize = asize;
   95|  2.06M|    t->hmask = 0;
   96|  2.06M|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|  2.06M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  2.06M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   97|  2.06M|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  2.06M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   98|  2.06M|#if LJ_GC64
   99|  2.06M|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  2.06M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  100|  2.06M|#endif
  101|  5.35M|  } else {  /* Otherwise separately allocate the array part. */
  102|  5.35M|    Node *nilnode;
  103|  5.35M|    t = lj_mem_newobj(L, GCtab);
  ------------------
  |  |  132|  5.35M|#define lj_mem_newobj(L, t)	((t *)lj_mem_newgco(L, sizeof(t)))
  ------------------
  104|  5.35M|    t->gct = ~LJ_TTAB;
  ------------------
  |  |  271|  5.35M|#define LJ_TTAB			(~11u)
  ------------------
  105|  5.35M|    t->nomm = (uint8_t)~0;
  106|  5.35M|    t->colo = 0;
  107|  5.35M|    setmref(t->array, NULL);
  ------------------
  |  |   39|  5.35M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  108|  5.35M|    setgcrefnull(t->metatable);
  ------------------
  |  |   76|  5.35M|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  109|  5.35M|    t->asize = 0;  /* In case the array allocation fails. */
  110|  5.35M|    t->hmask = 0;
  111|  5.35M|    nilnode = &G(L)->nilnode;
  ------------------
  |  |  705|  5.35M|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  5.35M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  112|  5.35M|    setmref(t->node, nilnode);
  ------------------
  |  |   39|  5.35M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  113|  5.35M|#if LJ_GC64
  114|  5.35M|    setmref(t->freetop, nilnode);
  ------------------
  |  |   39|  5.35M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  115|  5.35M|#endif
  116|  5.35M|    if (asize > 0) {
  ------------------
  |  Branch (116:9): [True: 180, False: 5.35M]
  ------------------
  117|    180|      if (asize > LJ_MAX_ASIZE)
  ------------------
  |  |   61|    180|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|    180|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (117:11): [True: 0, False: 180]
  ------------------
  118|      0|	lj_err_msg(L, LJ_ERR_TABOV);
  119|    180|      setmref(t->array, lj_mem_newvec(L, asize, TValue));
  ------------------
  |  |   39|    180|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  120|    180|      t->asize = asize;
  121|    180|    }
  122|  5.35M|  }
  123|  7.41M|  if (hbits)
  ------------------
  |  Branch (123:7): [True: 965k, False: 6.45M]
  ------------------
  124|   965k|    newhpart(L, t, hbits);
  125|  7.41M|  return t;
  126|  7.41M|}
lj_tab.c:clearapart:
   73|  6.75M|{
   74|  6.75M|  uint32_t i, asize = t->asize;
   75|  6.75M|  TValue *array = tvref(t->array);
  ------------------
  |  |  217|  6.75M|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  6.75M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   76|  12.9M|  for (i = 0; i < asize; i++)
  ------------------
  |  Branch (76:15): [True: 6.19M, False: 6.75M]
  ------------------
   77|  6.19M|    setnilV(&array[i]);
  ------------------
  |  |  872|  6.19M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   78|  6.75M|}
lj_tab.c:clearhpart:
   59|  7.31M|{
   60|  7.31M|  uint32_t i, hmask = t->hmask;
   61|  7.31M|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  7.31M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  7.31M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   62|  7.31M|  lj_assertX(t->hmask != 0, "empty hash part");
  ------------------
  |  |  366|  7.31M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.31M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.31M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.31M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   63|   985M|  for (i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (63:15): [True: 978M, False: 7.31M]
  ------------------
   64|   978M|    Node *n = &node[i];
   65|   978M|    setmref(n->next, NULL);
  ------------------
  |  |   39|   978M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   66|   978M|    setnilV(&n->key);
  ------------------
  |  |  872|   978M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   67|   978M|    setnilV(&n->val);
  ------------------
  |  |  872|   978M|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   68|   978M|  }
   69|  7.31M|}
lj_tab.c:newhpart:
   38|  7.96M|{
   39|  7.96M|  uint32_t hsize;
   40|  7.96M|  Node *node;
   41|  7.96M|  lj_assertL(hbits != 0, "zero hash size");
  ------------------
  |  |  365|  7.96M|#define lj_assertL(c, ...)	lj_assert_check(G(L), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  7.96M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 7.96M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  7.96M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   42|  7.96M|  if (hbits > LJ_MAX_HBITS)
  ------------------
  |  |   59|  7.96M|#define LJ_MAX_HBITS	26		/* Max. hash bits. */
  ------------------
  |  Branch (42:7): [True: 0, False: 7.96M]
  ------------------
   43|      0|    lj_err_msg(L, LJ_ERR_TABOV);
   44|  7.96M|  hsize = 1u << hbits;
   45|  7.96M|  node = lj_mem_newvec(L, hsize, Node);
  ------------------
  |  |  125|  7.96M|#define lj_mem_newvec(L, n, t)	((t *)lj_mem_new(L, (GCSize)((n)*sizeof(t))))
  |  |  ------------------
  |  |  |  |  117|  7.96M|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   46|  7.96M|  setmref(t->node, node);
  ------------------
  |  |   39|  7.96M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
   47|  7.96M|  setfreetop(t, node, &node[hsize]);
  ------------------
  |  |  519|  7.96M|#define setfreetop(t, n, v)	(setmref((t)->freetop, (v)))
  |  |  ------------------
  |  |  |  |   39|  7.96M|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
   48|  7.96M|  t->hmask = hsize-1;
   49|  7.96M|}
lj_tab.c:hashkey:
   21|  1.27G|{
   22|  1.27G|  lj_assertX(!tvisint(key), "attempt to hash integer");
  ------------------
  |  |  366|  1.27G|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.27G|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.27G|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   23|  1.27G|  if (tvisstr(key))
  ------------------
  |  |  795|  1.27G|#define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  781|  1.27G|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisstr(o)	(itype(o) == LJ_TSTR)
  |  |  ------------------
  |  |  |  |  264|  1.27G|#define LJ_TSTR			(~4u)
  |  |  ------------------
  |  |  |  Branch (795:20): [True: 1.27G, False: 8.73M]
  |  |  ------------------
  ------------------
   24|  1.27G|    return hashstr(t, strV(key));
  ------------------
  |  |   42|  2.54G|#define hashstr(t, s)		hashmask(t, (s)->sid)
  |  |  ------------------
  |  |  |  Branch (42:37): [True: 1.27G, False: 0]
  |  |  ------------------
  ------------------
   25|  8.73M|  else if (tvisnum(key))
  ------------------
  |  |  804|  8.73M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  8.73M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  8.73M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  8.73M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 4.26M, False: 4.46M]
  |  |  ------------------
  ------------------
   26|  4.26M|    return hashnum(t, key);
  ------------------
  |  |   45|  4.26M|#define hashnum(t, o)		hashlohi((t), (o)->u32.lo, ((o)->u32.hi << 1))
  |  |  ------------------
  |  |  |  |   44|  4.26M|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   27|  4.46M|  else if (tvisbool(key))
  ------------------
  |  |  789|  4.46M|#define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  787|  8.93M|#define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  4.46M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvisfalse(o)	(itype(o) == LJ_TFALSE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  261|  4.46M|#define LJ_TFALSE		(~1u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (787:22): [True: 2, False: 4.46M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |               #define tvisbool(o)	(tvisfalse(o) || tvistrue(o))
  |  |  ------------------
  |  |  |  |  788|  4.46M|#define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  781|  4.46M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  |  |  ------------------
  |  |  |  |               #define tvistrue(o)	(itype(o) == LJ_TTRUE)
  |  |  |  |  ------------------
  |  |  |  |  |  |  262|  4.46M|#define LJ_TTRUE		(~2u)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (788:21): [True: 6, False: 4.46M]
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   28|      8|    return hashmask(t, boolV(key));
  ------------------
  |  |  837|      8|#define boolV(o)	check_exp(tvisbool(o), (LJ_TFALSE - itype(o)))
  |  |  ------------------
  |  |  |  |  367|      8|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      8|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|     14|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 2, False: 6]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 6, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      8|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   29|  4.46M|  else
   30|  4.46M|    return hashgcref(t, key->gcr);
  ------------------
  |  |   48|  4.46M|  hashlohi((t), (uint32_t)gcrefu(r), (uint32_t)(gcrefu(r) >> 32))
  |  |  ------------------
  |  |  |  |   44|  4.46M|#define hashlohi(t, lo, hi)	hashmask((t), hashrot((lo), (hi)))
  |  |  ------------------
  ------------------
   31|       |  /* Only hash 32 bits of lightuserdata on a 64 bit CPU. Good enough? */
   32|  1.27G|}
lj_tab.c:rehashtab:
  357|  7.03M|{
  358|  7.03M|  uint32_t bins[LJ_MAX_ABITS];
  359|  7.03M|  uint32_t total, asize, na, i;
  360|   204M|  for (i = 0; i < LJ_MAX_ABITS; i++) bins[i] = 0;
  ------------------
  |  |   60|   204M|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (360:15): [True: 197M, False: 7.03M]
  ------------------
  361|  7.03M|  asize = countarray(t, bins);
  362|  7.03M|  total = 1 + asize;
  363|  7.03M|  total += counthash(t, bins, &asize);
  364|  7.03M|  asize += countint(ek, bins);
  365|  7.03M|  na = bestasize(bins, &asize);
  366|  7.03M|  total -= na;
  367|  7.03M|  lj_tab_resize(L, t, asize, hsize2hbits(total));
  ------------------
  |  |   53|  7.03M|#define hsize2hbits(s)	((s) ? ((s)==1 ? 1 : 1+lj_fls((uint32_t)((s)-1))) : 0)
  |  |  ------------------
  |  |  |  |  149|  3.27M|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  |  |  ------------------
  |  |  |  Branch (53:25): [True: 7.00M, False: 35.6k]
  |  |  |  Branch (53:32): [True: 3.72M, False: 3.27M]
  |  |  ------------------
  ------------------
  368|  7.03M|}
lj_tab.c:countarray:
  308|  7.03M|{
  309|  7.03M|  uint32_t na, b, i;
  310|  7.03M|  if (t->asize == 0) return 0;
  ------------------
  |  Branch (310:7): [True: 6.99M, False: 42.5k]
  ------------------
  311|   121k|  for (na = i = b = 0; b < LJ_MAX_ABITS; b++) {
  ------------------
  |  |   60|   121k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  ------------------
  |  Branch (311:24): [True: 121k, False: 0]
  ------------------
  312|   121k|    uint32_t n, top = 2u << b;
  313|   121k|    TValue *array;
  314|   121k|    if (top >= t->asize) {
  ------------------
  |  Branch (314:9): [True: 57.3k, False: 64.2k]
  ------------------
  315|  57.3k|      top = t->asize-1;
  316|  57.3k|      if (i > top)
  ------------------
  |  Branch (316:11): [True: 42.5k, False: 14.7k]
  ------------------
  317|  42.5k|	break;
  318|  57.3k|    }
  319|  78.9k|    array = tvref(t->array);
  ------------------
  |  |  217|  78.9k|#define tvref(r)	(mref(r, TValue))
  |  |  ------------------
  |  |  |  |   36|  78.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  320|  25.6M|    for (n = 0; i <= top; i++)
  ------------------
  |  Branch (320:17): [True: 25.5M, False: 78.9k]
  ------------------
  321|  25.5M|      if (!tvisnil(&array[i]))
  ------------------
  |  |  782|  25.5M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (321:11): [True: 24.8M, False: 657k]
  ------------------
  322|  24.8M|	n++;
  323|  78.9k|    bins[b] += n;
  324|  78.9k|    na += n;
  325|  78.9k|  }
  326|  42.5k|  return na;
  327|  7.03M|}
lj_tab.c:counthash:
  330|  7.03M|{
  331|  7.03M|  uint32_t total, na, i, hmask = t->hmask;
  332|  7.03M|  Node *node = noderef(t->node);
  ------------------
  |  |  515|  7.03M|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  7.03M|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  333|   494M|  for (total = na = 0, i = 0; i <= hmask; i++) {
  ------------------
  |  Branch (333:31): [True: 487M, False: 7.03M]
  ------------------
  334|   487M|    Node *n = &node[i];
  335|   487M|    if (!tvisnil(&n->val)) {
  ------------------
  |  |  782|   487M|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (335:9): [True: 483M, False: 3.76M]
  ------------------
  336|   483M|      na += countint(&n->key, bins);
  337|   483M|      total++;
  338|   483M|    }
  339|   487M|  }
  340|  7.03M|  *narray += na;
  341|  7.03M|  return total;
  342|  7.03M|}
lj_tab.c:countint:
  294|   490M|{
  295|   490M|  lj_assertX(!tvisint(key), "bad integer key");
  ------------------
  |  |  366|   490M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   490M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [Folded - Ignored]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   490M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  296|   490M|  if (tvisnum(key)) {
  ------------------
  |  |  804|   490M|#define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|   490M|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnum(o)	(itype(o) < LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|   490M|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|   490M|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (804:20): [True: 861k, False: 489M]
  |  |  ------------------
  ------------------
  297|   861k|    lua_Number nk = numV(key);
  ------------------
  |  |  866|   861k|#define numV(o)		check_exp(tvisnum(o), (o)->n)
  |  |  ------------------
  |  |  |  |  367|   861k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   861k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   861k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 861k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   861k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  298|   861k|    int32_t k = lj_num2int(nk);
  ------------------
  |  | 1000|   861k|#define lj_num2int(n)   ((int32_t)(n))
  ------------------
  299|   861k|    if ((uint32_t)k < LJ_MAX_ASIZE && nk == (lua_Number)k) {
  ------------------
  |  |   61|  1.72M|#define LJ_MAX_ASIZE	((1<<(LJ_MAX_ABITS-1))+1)  /* Max. array part size. */
  |  |  ------------------
  |  |  |  |   60|   861k|#define LJ_MAX_ABITS	28		/* Max. bits of array key. */
  |  |  ------------------
  ------------------
  |  Branch (299:9): [True: 838k, False: 22.6k]
  |  Branch (299:39): [True: 109k, False: 729k]
  ------------------
  300|   109k|      bins[(k > 2 ? lj_fls((uint32_t)(k-1)) : 0)]++;
  ------------------
  |  |  149|  82.2k|#define lj_fls(x)	((uint32_t)(__builtin_clz(x)^31))
  ------------------
  |  Branch (300:13): [True: 82.2k, False: 27.3k]
  ------------------
  301|   109k|      return 1;
  302|   109k|    }
  303|   861k|  }
  304|   490M|  return 0;
  305|   490M|}
lj_tab.c:bestasize:
  345|  7.03M|{
  346|  7.03M|  uint32_t b, sum, na = 0, sz = 0, nn = *narray;
  347|  7.20M|  for (b = 0, sum = 0; 2*nn > (1u<<b) && sum != nn; b++)
  ------------------
  |  Branch (347:24): [True: 195k, False: 7.00M]
  |  Branch (347:42): [True: 163k, False: 32.3k]
  ------------------
  348|   163k|    if (bins[b] > 0 && 2*(sum += bins[b]) > (1u<<b)) {
  ------------------
  |  Branch (348:9): [True: 115k, False: 47.9k]
  |  Branch (348:24): [True: 109k, False: 5.37k]
  ------------------
  349|   109k|      sz = (2u<<b)+1;
  350|   109k|      na = sum;
  351|   109k|    }
  352|  7.03M|  *narray = sz;
  353|  7.03M|  return na;
  354|  7.03M|}
lj_tab.c:tab_len_slow:
  630|      5|{
  631|      5|  cTValue *tv;
  632|      5|  size_t lo = hi;
  633|      5|  hi++;
  634|       |  /* Widening search for an upper bound. */
  635|      5|  while ((tv = lj_tab_getint(t, (int32_t)hi)) && !tvisnil(tv)) {
  ------------------
  |  |   82|      5|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      5|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 5]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                while ((tv = lj_tab_getint(t, (int32_t)hi)) && !tvisnil(tv)) {
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (635:10): [True: 0, False: 5]
  |  Branch (635:50): [True: 0, False: 0]
  ------------------
  636|      0|    lo = hi;
  637|      0|    hi += hi;
  638|      0|    if (hi > (size_t)(0x7fffffff - 2)) {  /* Punt and do a linear search. */
  ------------------
  |  Branch (638:9): [True: 0, False: 0]
  ------------------
  639|      0|      lo = 1;
  640|      0|      while ((tv = lj_tab_getint(t, (int32_t)lo)) && !tvisnil(tv)) lo++;
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    while ((tv = lj_tab_getint(t, (int32_t)lo)) && !tvisnil(tv)) lo++;
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (640:14): [True: 0, False: 0]
  |  Branch (640:54): [True: 0, False: 0]
  ------------------
  641|      0|      return (MSize)(lo - 1);
  642|      0|    }
  643|      0|  }
  644|       |  /* Binary search to find a non-nil to nil transition. */
  645|      5|  while (hi - lo > 1) {
  ------------------
  |  Branch (645:10): [True: 0, False: 5]
  ------------------
  646|      0|    size_t mid = (lo+hi) >> 1;
  647|      0|    cTValue *tvb = lj_tab_getint(t, (int32_t)mid);
  ------------------
  |  |   82|      0|  (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   79|      0|#define inarray(t, key)		((MSize)(key) < (MSize)(t)->asize)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (79:26): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 (inarray((t), (key)) ? arrayslot((t), (key)) : lj_tab_getinth((t), (key)))
  |  |  ------------------
  |  |  |  |   80|      0|#define arrayslot(t, i)		(&tvref((t)->array)[(i)])
  |  |  |  |  ------------------
  |  |  |  |  |  |  217|      0|#define tvref(r)	(mref(r, TValue))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   36|      0|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  648|      0|    if (tvb && !tvisnil(tvb)) lo = mid; else hi = mid;
  ------------------
  |  |  782|      0|#define tvisnil(o)	((o)->it64 == -1)
  ------------------
  |  Branch (648:9): [True: 0, False: 0]
  |  Branch (648:16): [True: 0, False: 0]
  ------------------
  649|      0|  }
  650|      5|  return (MSize)lo;
  651|      5|}

lj_ctype.c:hashrot:
   19|   318k|{
   20|   318k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|   318k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|   318k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|   318k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|   318k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|   318k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|   318k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|   318k|  return hi;
   32|   318k|}
lj_tab.c:hashmask:
   36|  2.15G|{
   37|  2.15G|  Node *n = noderef(t->node);
  ------------------
  |  |  515|  2.15G|#define noderef(r)	(mref((r), Node))
  |  |  ------------------
  |  |  |  |   36|  2.15G|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   38|  2.15G|  return &n[hash & t->hmask];
   39|  2.15G|}
lj_tab.c:hashrot:
   19|  9.54M|{
   20|  9.54M|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|  9.54M|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|  9.54M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|  9.54M|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|  9.54M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|  9.54M|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|  9.54M|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|  9.54M|  return hi;
   32|  9.54M|}
lj_record.c:hashrot:
   19|    344|{
   20|    344|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|    344|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|    344|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|    344|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|    344|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|    344|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|    344|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|    344|  return hi;
   32|    344|}
lj_asm.c:hashrot:
   19|   191k|{
   20|   191k|#if LJ_TARGET_X86ORX64
   21|       |  /* Prefer variant that compiles well for a 2-operand CPU. */
   22|   191k|  lo ^= hi; hi = lj_rol(hi, HASH_ROT1);
  ------------------
  |  |  113|   191k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   23|   191k|  lo -= hi; hi = lj_rol(hi, HASH_ROT2);
  ------------------
  |  |  113|   191k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   24|   191k|  hi ^= lo; hi -= lj_rol(lo, HASH_ROT3);
  ------------------
  |  |  113|   191k|#define lj_rol(x, n)	(((x)<<(n)) | ((x)>>(-(int)(n)&(8*sizeof(x)-1))))
  ------------------
   25|       |#else
   26|       |  lo ^= hi;
   27|       |  lo = lo - lj_rol(hi, HASH_ROT1);
   28|       |  hi = lo ^ lj_rol(hi, HASH_ROT1 + HASH_ROT2);
   29|       |  hi = hi - lj_rol(lo, HASH_ROT3);
   30|       |#endif
   31|   191k|  return hi;
   32|   191k|}

lj_asm.c:exitstub_addr_:
  153|   257k|{
  154|   257k|  lj_assertX(group[exitno / EXITSTUBS_PER_GROUP] != NULL,
  ------------------
  |  |  366|   257k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   257k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 257k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|   257k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  155|   257k|	     "exit stub group for exit %d uninitialized", exitno);
  156|   257k|  return (char *)group[exitno / EXITSTUBS_PER_GROUP] +
  ------------------
  |  |  165|   257k|#define EXITSTUBS_PER_GROUP	32
  ------------------
  157|   257k|	 EXITSTUB_SPACING*(exitno % EXITSTUBS_PER_GROUP);
  ------------------
  |  |  164|   257k|#define EXITSTUB_SPACING	(2+2)
  ------------------
              	 EXITSTUB_SPACING*(exitno % EXITSTUBS_PER_GROUP);
  ------------------
  |  |  165|   257k|#define EXITSTUBS_PER_GROUP	32
  ------------------
  158|   257k|}

lj_trace_err:
   39|  1.24k|{
   40|  1.24k|  setnilV(&J->errinfo);  /* No error info. */
  ------------------
  |  |  872|  1.24k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
   41|  1.24k|  setintV(J->L->top++, (int32_t)e);
   42|  1.24k|  lj_err_throw(J->L, LUA_ERRRUN);
  ------------------
  |  |   45|  1.24k|#define LUA_ERRRUN	2
  ------------------
   43|  1.24k|}
lj_trace_err_info:
   47|    190|{
   48|    190|  setintV(J->L->top++, (int32_t)e);
   49|    190|  lj_err_throw(J->L, LUA_ERRRUN);
  ------------------
  |  |   45|    190|#define LUA_ERRRUN	2
  ------------------
   50|    190|}
lj_trace_alloc:
  124|  24.6k|{
  125|  24.6k|  size_t sztr = ((sizeof(GCtrace)+7)&~7);
  126|  24.6k|  size_t szins = (T->nins-T->nk)*sizeof(IRIns);
  127|  24.6k|  size_t sz = sztr + szins +
  128|  24.6k|	      T->nsnap*sizeof(SnapShot) +
  129|  24.6k|	      T->nsnapmap*sizeof(SnapEntry);
  130|  24.6k|  GCtrace *T2 = lj_mem_newt(L, (MSize)sz, GCtrace);
  ------------------
  |  |  133|  24.6k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  24.6k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
  131|  24.6k|  char *p = (char *)T2 + sztr;
  132|  24.6k|  T2->gct = ~LJ_TTRACE;
  ------------------
  |  |  269|  24.6k|#define LJ_TTRACE		(~9u)
  ------------------
  133|  24.6k|  T2->marked = 0;
  134|  24.6k|  T2->traceno = 0;
  135|  24.6k|  T2->ir = (IRIns *)p - T->nk;
  136|  24.6k|  T2->nins = T->nins;
  137|  24.6k|  T2->nk = T->nk;
  138|  24.6k|  T2->nsnap = T->nsnap;
  139|  24.6k|  T2->nsnapmap = T->nsnapmap;
  140|  24.6k|  memcpy(p, T->ir + T->nk, szins);
  141|  24.6k|  return T2;
  142|  24.6k|}
lj_trace_free:
  173|  24.6k|{
  174|  24.6k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  24.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  24.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  24.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  175|  24.6k|  if (T->traceno) {
  ------------------
  |  Branch (175:7): [True: 19.5k, False: 5.02k]
  ------------------
  176|  19.5k|    lj_gdbjit_deltrace(J, T);
  ------------------
  |  |   19|  19.5k|#define lj_gdbjit_deltrace(J, T)	UNUSED(T)
  |  |  ------------------
  |  |  |  |   91|  19.5k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  177|  19.5k|    if (T->traceno < J->freetrace)
  ------------------
  |  Branch (177:9): [True: 17.9k, False: 1.59k]
  ------------------
  178|  17.9k|      J->freetrace = T->traceno;
  179|  19.5k|    setgcrefnull(J->trace[T->traceno]);
  ------------------
  |  |   76|  19.5k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  180|  19.5k|  }
  181|  24.6k|  lj_mem_free(g, T,
  182|  24.6k|    ((sizeof(GCtrace)+7)&~7) + (T->nins-T->nk)*sizeof(IRIns) +
  183|  24.6k|    T->nsnap*sizeof(SnapShot) + T->nsnapmap*sizeof(SnapEntry));
  184|  24.6k|}
lj_trace_flush:
  267|  1.39k|{
  268|  1.39k|  if (traceno > 0 && traceno < J->sizetrace) {
  ------------------
  |  Branch (268:7): [True: 1.39k, False: 5]
  |  Branch (268:22): [True: 1.39k, False: 0]
  ------------------
  269|  1.39k|    GCtrace *T = traceref(J, traceno);
  ------------------
  |  |  298|  1.39k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  1.39k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.39k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.78k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 1.39k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 1.39k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.39k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  270|  1.39k|    if (T && T->root == 0)
  ------------------
  |  Branch (270:9): [True: 1.16k, False: 227]
  |  Branch (270:14): [True: 1.15k, False: 9]
  ------------------
  271|  1.15k|      trace_flushroot(J, T);
  272|  1.39k|  }
  273|  1.39k|}
lj_trace_flushproto:
  277|     90|{
  278|     90|  while (pt->trace != 0)
  ------------------
  |  Branch (278:10): [True: 0, False: 90]
  ------------------
  279|      0|    trace_flushroot(G2J(g), traceref(G2J(g), pt->trace));
  ------------------
  |  |  116|      0|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|      0|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                  trace_flushroot(G2J(g), traceref(G2J(g), pt->trace));
  ------------------
  |  |  298|      0|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  280|     90|}
lj_trace_flushall:
  284|  1.38k|{
  285|  1.38k|  jit_State *J = L2J(L);
  ------------------
  |  |  117|  1.38k|#define L2J(L)		(&L2GG(L)->J)
  |  |  ------------------
  |  |  |  |  114|  1.38k|#define L2GG(L)		(G2GG(G(L)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  112|  1.38k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  111|  1.38k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  286|  1.38k|  ptrdiff_t i;
  287|  1.38k|  if ((J2G(J)->hookmask & HOOK_GC))
  ------------------
  |  |  115|  1.38k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  1.38k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.38k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if ((J2G(J)->hookmask & HOOK_GC))
  ------------------
  |  |  676|  1.38k|#define HOOK_GC			0x40
  ------------------
  |  Branch (287:7): [True: 0, False: 1.38k]
  ------------------
  288|      0|    return 1;
  289|  15.9k|  for (i = (ptrdiff_t)J->sizetrace-1; i > 0; i--) {
  ------------------
  |  Branch (289:39): [True: 14.5k, False: 1.38k]
  ------------------
  290|  14.5k|    GCtrace *T = traceref(J, i);
  ------------------
  |  |  298|  14.5k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  14.5k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  14.5k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  29.1k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 14.5k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 14.5k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  14.5k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  291|  14.5k|    if (T) {
  ------------------
  |  Branch (291:9): [True: 4.62k, False: 9.95k]
  ------------------
  292|  4.62k|      if (T->root == 0)
  ------------------
  |  Branch (292:11): [True: 2.44k, False: 2.17k]
  ------------------
  293|  2.44k|	trace_flushroot(J, T);
  294|  4.62k|      lj_gdbjit_deltrace(J, T);
  ------------------
  |  |   19|  4.62k|#define lj_gdbjit_deltrace(J, T)	UNUSED(T)
  |  |  ------------------
  |  |  |  |   91|  4.62k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  295|  4.62k|      T->traceno = T->link = 0;  /* Blacklist the link for cont_stitch. */
  296|  4.62k|      setgcrefnull(J->trace[i]);
  ------------------
  |  |   76|  4.62k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  297|  4.62k|    }
  298|  14.5k|  }
  299|  1.38k|  J->cur.traceno = 0;
  300|  1.38k|  J->freetrace = 0;
  301|       |  /* Clear penalty cache. */
  302|  1.38k|  memset(J->penalty, 0, sizeof(J->penalty));
  303|       |  /* Free the whole machine code and invalidate all exit stub groups. */
  304|  1.38k|  lj_mcode_free(J);
  305|  1.38k|  memset(J->exitstubgroup, 0, sizeof(J->exitstubgroup));
  306|  1.38k|  lj_vmevent_send(L, TRACE,
  ------------------
  |  |   39|  1.38k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  1.38k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.38k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  1.38k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 1.38k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  307|  1.38k|    setstrV(L, L->top++, lj_str_newlit(L, "flush"));
  308|  1.38k|  );
  309|  1.38k|  return 0;
  310|  1.38k|}
lj_trace_initstate:
  314|  13.6k|{
  315|  13.6k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  13.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  316|  13.6k|  TValue *tv;
  317|       |
  318|       |  /* Initialize aligned SIMD constants. */
  319|  13.6k|  tv = LJ_KSIMD(J, LJ_KSIMD_ABS);
  ------------------
  |  |  403|  13.6k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  320|  13.6k|  tv[0].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  321|  13.6k|  tv[1].u64 = U64x(7fffffff,ffffffff);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  322|  13.6k|  tv = LJ_KSIMD(J, LJ_KSIMD_NEG);
  ------------------
  |  |  403|  13.6k|  ((TValue *)(((intptr_t)&J->ksimd[2*(n)] + 15) & ~(intptr_t)15))
  ------------------
  323|  13.6k|  tv[0].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  324|  13.6k|  tv[1].u64 = U64x(80000000,00000000);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  325|       |
  326|       |  /* Initialize 32/64 bit constants. */
  327|  13.6k|#if LJ_TARGET_X86ORX64
  328|  13.6k|  J->k64[LJ_K64_TOBIT].u64 = U64x(43380000,00000000);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  329|       |#if LJ_32
  330|       |  J->k64[LJ_K64_M2P64_31].u64 = U64x(c1e00000,00000000);
  331|       |#endif
  332|  13.6k|  J->k64[LJ_K64_2P64].u64 = U64x(43f00000,00000000);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  333|  13.6k|  J->k32[LJ_K32_M2P64_31] = LJ_64 ? 0xdf800000 : 0xcf000000;
  ------------------
  |  |  640|  13.6k|#define LJ_64			1
  |  |  ------------------
  |  |  |  Branch (640:17): [Folded - Ignored]
  |  |  ------------------
  ------------------
  334|  13.6k|#endif
  335|  13.6k|#if LJ_TARGET_X86ORX64 || LJ_TARGET_MIPS64
  336|  13.6k|  J->k64[LJ_K64_M2P64].u64 = U64x(c3f00000,00000000);
  ------------------
  |  |   94|  13.6k|#define U64x(hi, lo)	(((uint64_t)0x##hi << 32) + (uint64_t)0x##lo)
  ------------------
  337|  13.6k|#endif
  338|       |#if LJ_TARGET_PPC
  339|       |  J->k32[LJ_K32_2P52_2P31] = 0x59800004;
  340|       |  J->k32[LJ_K32_2P52] = 0x59800000;
  341|       |#endif
  342|       |#if LJ_TARGET_PPC || LJ_TARGET_MIPS
  343|       |  J->k32[LJ_K32_2P31] = 0x4f000000;
  344|       |#endif
  345|       |#if LJ_TARGET_MIPS
  346|       |  J->k64[LJ_K64_2P31].u64 = U64x(41e00000,00000000);
  347|       |#if LJ_64
  348|       |  J->k64[LJ_K64_2P63].u64 = U64x(43e00000,00000000);
  349|       |  J->k32[LJ_K32_2P63] = 0x5f000000;
  350|       |  J->k32[LJ_K32_M2P64] = 0xdf800000;
  351|       |#endif
  352|       |#endif
  353|  13.6k|}
lj_trace_freestate:
  357|  13.6k|{
  358|  13.6k|  jit_State *J = G2J(g);
  ------------------
  |  |  116|  13.6k|#define G2J(gl)		(&G2GG(gl)->J)
  |  |  ------------------
  |  |  |  |  112|  13.6k|#define G2GG(gl)	((GG_State *)((char *)(gl) - GG_OFS(g)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  13.6k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  359|  13.6k|#ifdef LUA_USE_ASSERT
  360|  13.6k|  {  /* This assumes all traces have already been freed. */
  361|  13.6k|    ptrdiff_t i;
  362|  43.3k|    for (i = 1; i < (ptrdiff_t)J->sizetrace; i++)
  ------------------
  |  Branch (362:17): [True: 29.6k, False: 13.6k]
  ------------------
  363|  29.6k|      lj_assertG(i == (ptrdiff_t)J->cur.traceno || traceref(J, i) == NULL,
  ------------------
  |  |  364|  29.6k|#define lj_assertG(c, ...)	lj_assert_check(g, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|   207k|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:5): [True: 29.6k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 29.6k, False: 0]
  |  |  |  |  |  Branch (355:5): [True: 0, False: 29.6k]
  |  |  |  |  |  Branch (355:5): [True: 29.6k, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  29.6k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  364|  13.6k|		 "trace still allocated");
  365|  13.6k|  }
  366|  13.6k|#endif
  367|  13.6k|  lj_mcode_free(J);
  368|  13.6k|  lj_mem_freevec(g, J->snapmapbuf, J->sizesnapmap, SnapEntry);
  ------------------
  |  |  130|  13.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  369|  13.6k|  lj_mem_freevec(g, J->snapbuf, J->sizesnap, SnapShot);
  ------------------
  |  |  130|  13.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  370|  13.6k|  lj_mem_freevec(g, J->irbuf + J->irbotlim, J->irtoplim - J->irbotlim, IRIns);
  ------------------
  |  |  130|  13.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  371|  13.6k|  lj_mem_freevec(g, J->trace, J->sizetrace, GCRef);
  ------------------
  |  |  130|  13.6k|#define lj_mem_freevec(g, p, n, t)	lj_mem_free(g, (p), (n)*sizeof(t))
  ------------------
  372|  13.6k|}
lj_trace_ins:
  759|   512k|{
  760|       |  /* Note: J->L must already be set. pc is the true bytecode PC here. */
  761|   512k|  J->pc = pc;
  762|   512k|  J->fn = curr_func(J->L);
  ------------------
  |  |  710|   512k|#define curr_func(L)		(&gcval(L->base-2)->fn)
  |  |  ------------------
  |  |  |  |  833|   512k|#define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |   69|   512k|#define gcrefu(r)	((r).gcptr64)
  |  |  |  |  ------------------
  |  |  |  |               #define gcval(o)	((GCobj *)(gcrefu((o)->gcr) & LJ_GCVMASK))
  |  |  |  |  ------------------
  |  |  |  |  |  |  291|   512k|#define LJ_GCVMASK		(((uint64_t)1 << 47) - 1)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  763|   512k|  J->pt = isluafunc(J->fn) ? funcproto(J->fn) : NULL;
  ------------------
  |  |  476|   512k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   512k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 474k, False: 37.7k]
  |  |  ------------------
  ------------------
                J->pt = isluafunc(J->fn) ? funcproto(J->fn) : NULL;
  ------------------
  |  |  480|   474k|  check_exp(isluafunc(fn), (GCproto *)(mref((fn)->l.pc, char)-sizeof(GCproto)))
  |  |  ------------------
  |  |  |  |  367|   474k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   474k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   474k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:4): [True: 474k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   474k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  764|   513k|  while (lj_vm_cpcall(J->L, NULL, (void *)J, trace_state) != 0)
  ------------------
  |  Branch (764:10): [True: 1.35k, False: 512k]
  ------------------
  765|  1.35k|    J->state = LJ_TRACE_ERR;
  766|   512k|}
lj_trace_hot:
  770|  14.0k|{
  771|       |  /* Note: pc is the interpreter bytecode PC here. It's offset by 1. */
  772|  14.0k|  ERRNO_SAVE
  ------------------
  |  |  156|  14.0k|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  773|       |  /* Reset hotcount. */
  774|  14.0k|  hotcount_set(J2GG(J), pc, J->param[JIT_P_hotloop]*HOTCOUNT_LOOP);
  ------------------
  |  |  128|  14.0k|  (hotcount_get((gg), (pc)) = (HotCount)(val))
  |  |  ------------------
  |  |  |  |  126|  14.0k|  (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   96|  14.0k|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  |  |  ------------------
  |  |  |  |                 (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|  14.0k|#define HOTCOUNT_SIZE		64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  775|       |  /* Only start a new trace if not recording or inside __gc call or vmevent. */
  776|  14.0k|  if (J->state == LJ_TRACE_IDLE &&
  ------------------
  |  Branch (776:7): [True: 14.0k, False: 0]
  ------------------
  777|  14.0k|      !(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  115|  14.0k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  14.0k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  14.0k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    !(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  676|  14.0k|#define HOOK_GC			0x40
  ------------------
                    !(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  675|  14.0k|#define HOOK_VMEVENT		0x20
  ------------------
  |  Branch (777:7): [True: 14.0k, False: 0]
  ------------------
  778|  14.0k|    J->parent = 0;  /* Root trace. */
  779|  14.0k|    J->exitno = 0;
  780|  14.0k|    J->state = LJ_TRACE_START;
  781|  14.0k|    lj_trace_ins(J, pc-1);
  782|  14.0k|  }
  783|  14.0k|  ERRNO_RESTORE
  ------------------
  |  |  157|  14.0k|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  784|  14.0k|}
lj_trace_stitch:
  803|    591|{
  804|       |  /* Only start a new trace if not recording or inside __gc call or vmevent. */
  805|    591|  if (J->state == LJ_TRACE_IDLE &&
  ------------------
  |  Branch (805:7): [True: 591, False: 0]
  ------------------
  806|    591|      !(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  115|    591|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|    591|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|    591|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                    !(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  676|    591|#define HOOK_GC			0x40
  ------------------
                    !(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT))) {
  ------------------
  |  |  675|    591|#define HOOK_VMEVENT		0x20
  ------------------
  |  Branch (806:7): [True: 591, False: 0]
  ------------------
  807|    591|    J->parent = 0;  /* Have to treat it like a root trace. */
  808|       |    /* J->exitno is set to the invoking trace. */
  809|    591|    J->state = LJ_TRACE_START;
  810|    591|    lj_trace_ins(J, pc);
  811|    591|  }
  812|    591|}
lj_trace_exit:
  875|   371k|{
  876|   371k|  ERRNO_SAVE
  ------------------
  |  |  156|   371k|#define ERRNO_SAVE	int olderr = errno;
  ------------------
  877|   371k|  lua_State *L = J->L;
  878|   371k|  ExitState *ex = (ExitState *)exptr;
  879|   371k|  ExitDataCP exd;
  880|   371k|  int errcode, exitcode = J->exitcode;
  881|   371k|  TValue exiterr;
  882|   371k|  const BCIns *pc, *retpc;
  883|   371k|  void *cf;
  884|   371k|  GCtrace *T;
  885|       |
  886|   371k|  setnilV(&exiterr);
  ------------------
  |  |  872|   371k|#define setnilV(o)		((o)->it64 = -1)
  ------------------
  887|   371k|  if (exitcode) {  /* Trace unwound with error code. */
  ------------------
  |  Branch (887:7): [True: 0, False: 371k]
  ------------------
  888|      0|    J->exitcode = 0;
  889|      0|    copyTV(L, &exiterr, L->top-1);
  890|      0|  }
  891|       |
  892|       |#ifdef EXITSTATE_PCREG
  893|       |  J->parent = trace_exit_find(J, (MCode *)(intptr_t)ex->gpr[EXITSTATE_PCREG]);
  894|       |#endif
  895|   371k|  T = traceref(J, J->parent); UNUSED(T);
  ------------------
  |  |  298|   371k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|   371k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   371k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   743k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 371k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 371k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                T = traceref(J, J->parent); UNUSED(T);
  ------------------
  |  |   91|   371k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  896|       |#ifdef EXITSTATE_CHECKEXIT
  897|       |  if (J->exitno == T->nsnap) {  /* Treat stack check like a parent exit. */
  898|       |    lj_assertJ(T->root != 0, "stack check in root trace");
  899|       |    J->exitno = T->ir[REF_BASE].op2;
  900|       |    J->parent = T->ir[REF_BASE].op1;
  901|       |    T = traceref(J, J->parent);
  902|       |  }
  903|       |#endif
  904|   371k|  lj_assertJ(T != NULL && J->exitno < T->nsnap, "bad trace or exit number");
  ------------------
  |  |  527|   371k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|   371k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|   743k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 371k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 371k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|   371k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  905|   371k|  exd.J = J;
  906|   371k|  exd.exptr = exptr;
  907|   371k|  errcode = lj_vm_cpcall(L, NULL, &exd, trace_exit_cp);
  908|   371k|  if (errcode)
  ------------------
  |  Branch (908:7): [True: 167, False: 371k]
  ------------------
  909|    167|    return -errcode;  /* Return negated error code. */
  910|       |
  911|   371k|  if (exitcode) copyTV(L, L->top++, &exiterr);  /* Anchor the error object. */
  ------------------
  |  Branch (911:7): [True: 0, False: 371k]
  ------------------
  912|       |
  913|   371k|  if (!(LJ_HASPROFILE && (G(L)->hookmask & HOOK_PROFILE)))
  ------------------
  |  |  598|   742k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                if (!(LJ_HASPROFILE && (G(L)->hookmask & HOOK_PROFILE)))
  ------------------
  |  |  705|   371k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   371k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                if (!(LJ_HASPROFILE && (G(L)->hookmask & HOOK_PROFILE)))
  ------------------
  |  |  677|   371k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (913:26): [True: 0, False: 371k]
  ------------------
  914|   371k|    lj_vmevent_send(L, TEXIT,
  ------------------
  |  |   39|   371k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|   371k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   371k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|   371k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 371k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  915|   371k|      lj_state_checkstack(L, 4+RID_NUM_GPR+RID_NUM_FPR+LUA_MINSTACK);
  916|   371k|      setintV(L->top++, J->parent);
  917|   371k|      setintV(L->top++, J->exitno);
  918|   371k|      trace_exit_regs(L, ex);
  919|   371k|    );
  920|       |
  921|   371k|  pc = exd.pc;
  922|   371k|  cf = cframe_raw(L->cframe);
  ------------------
  |  |  294|   371k|#define cframe_raw(cf)		((void *)((intptr_t)(cf) & CFRAME_RAWMASK))
  |  |  ------------------
  |  |  |  |  277|   371k|#define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  275|   371k|#define CFRAME_RESUME		1
  |  |  |  |  ------------------
  |  |  |  |               #define CFRAME_RAWMASK		(~(intptr_t)(CFRAME_RESUME|CFRAME_UNWIND_FF))
  |  |  |  |  ------------------
  |  |  |  |  |  |  276|   371k|#define CFRAME_UNWIND_FF	2  /* Only used in unwinder. */
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  923|   371k|  setcframe_pc(cf, pc);
  ------------------
  |  |  291|   371k|  (setmref(*(MRef *)(((char *)(cf))+CFRAME_OFS_PC), (pc)))
  |  |  ------------------
  |  |  |  |   39|   371k|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  |  |  ------------------
  ------------------
  924|   371k|  if (exitcode) {
  ------------------
  |  Branch (924:7): [True: 0, False: 371k]
  ------------------
  925|      0|    return -exitcode;
  926|   371k|  } else if (LJ_HASPROFILE && (G(L)->hookmask & HOOK_PROFILE)) {
  ------------------
  |  |  598|   742k|#define LJ_HASPROFILE		1
  |  |  ------------------
  |  |  |  Branch (598:24): [Folded - Ignored]
  |  |  ------------------
  ------------------
                } else if (LJ_HASPROFILE && (G(L)->hookmask & HOOK_PROFILE)) {
  ------------------
  |  |  705|   371k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   371k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                } else if (LJ_HASPROFILE && (G(L)->hookmask & HOOK_PROFILE)) {
  ------------------
  |  |  677|   371k|#define HOOK_PROFILE		0x80
  ------------------
  |  Branch (926:31): [True: 0, False: 371k]
  ------------------
  927|       |    /* Just exit to interpreter. */
  928|   371k|  } else if (G(L)->gc.state == GCSatomic || G(L)->gc.state == GCSfinalize) {
  ------------------
  |  |  705|   371k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   371k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                } else if (G(L)->gc.state == GCSatomic || G(L)->gc.state == GCSfinalize) {
  ------------------
  |  |  705|   145k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   145k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  |  Branch (928:14): [True: 225k, False: 145k]
  |  Branch (928:45): [True: 0, False: 145k]
  ------------------
  929|   225k|    if (!(G(L)->hookmask & HOOK_GC))
  ------------------
  |  |  705|   225k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|   225k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
                  if (!(G(L)->hookmask & HOOK_GC))
  ------------------
  |  |  676|   225k|#define HOOK_GC			0x40
  ------------------
  |  Branch (929:9): [True: 225k, False: 0]
  ------------------
  930|   225k|      lj_gc_step(L);  /* Exited because of GC: drive GC forward. */
  931|   225k|  } else if ((J->flags & JIT_F_ON)) {
  ------------------
  |  |   16|   145k|#define JIT_F_ON		0x00000001
  ------------------
  |  Branch (931:14): [True: 145k, False: 0]
  ------------------
  932|   145k|    trace_hotside(J, pc);
  933|   145k|  }
  934|       |  /* Return MULTRES or 0 or -17. */
  935|   371k|  ERRNO_RESTORE
  ------------------
  |  |  157|   371k|#define ERRNO_RESTORE	errno = olderr;
  ------------------
  936|   371k|  switch (bc_op(*pc)) {
  ------------------
  |  |   34|   371k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  937|      0|  case BC_CALLM: case BC_CALLMT:
  ------------------
  |  Branch (937:3): [True: 0, False: 371k]
  |  Branch (937:18): [True: 0, False: 371k]
  ------------------
  938|      0|    return (int)((BCReg)(L->top - L->base) - bc_a(*pc) - bc_c(*pc) - LJ_FR2);
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  return (int)((BCReg)(L->top - L->base) - bc_a(*pc) - bc_c(*pc) - LJ_FR2);
  ------------------
  |  |   37|      0|#define bc_c(i)		((BCReg)(((i)>>16)&0xff))
  ------------------
                  return (int)((BCReg)(L->top - L->base) - bc_a(*pc) - bc_c(*pc) - LJ_FR2);
  ------------------
  |  |  569|      0|#define LJ_FR2			1
  ------------------
  939|      0|  case BC_RETM:
  ------------------
  |  Branch (939:3): [True: 0, False: 371k]
  ------------------
  940|      0|    return (int)((BCReg)(L->top - L->base) + 1 - bc_a(*pc) - bc_d(*pc));
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
                  return (int)((BCReg)(L->top - L->base) + 1 - bc_a(*pc) - bc_d(*pc));
  ------------------
  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  ------------------
  941|      0|  case BC_TSETM:
  ------------------
  |  Branch (941:3): [True: 0, False: 371k]
  ------------------
  942|      0|    return (int)((BCReg)(L->top - L->base) + 1 - bc_a(*pc));
  ------------------
  |  |   35|      0|#define bc_a(i)		((BCReg)(((i)>>8)&0xff))
  ------------------
  943|  1.21k|  case BC_JLOOP:
  ------------------
  |  Branch (943:3): [True: 1.21k, False: 370k]
  ------------------
  944|  1.21k|    retpc = &traceref(J, bc_d(*pc))->startins;
  ------------------
  |  |  298|  1.21k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  1.21k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  1.21k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  2.43k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 1.21k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 1.21k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  1.21k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  945|  1.21k|    if (bc_isret(bc_op(*retpc)) || bc_op(*retpc) == BC_ITERN) {
  ------------------
  |  |   34|  1.21k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
                  if (bc_isret(bc_op(*retpc)) || bc_op(*retpc) == BC_ITERN) {
  ------------------
  |  |   34|  1.21k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (945:9): [True: 0, False: 1.21k]
  |  Branch (945:36): [True: 1.21k, False: 0]
  ------------------
  946|       |      /* Dispatch to original ins to ensure forward progress. */
  947|  1.21k|      if (J->state != LJ_TRACE_RECORD) return -17;
  ------------------
  |  Branch (947:11): [True: 1.21k, False: 8]
  ------------------
  948|       |      /* Unpatch bytecode when recording. */
  949|      8|      J->patchins = *pc;
  950|      8|      J->patchpc = (BCIns *)pc;
  951|      8|      *J->patchpc = *retpc;
  952|      8|      J->bcskip = 1;
  953|      8|    }
  954|      8|    return 0;
  955|   370k|  default:
  ------------------
  |  Branch (955:3): [True: 370k, False: 1.21k]
  ------------------
  956|   370k|    if (bc_op(*pc) >= BC_FUNCF)
  ------------------
  |  |   34|   370k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (956:9): [True: 0, False: 370k]
  ------------------
  957|      0|      return (int)((BCReg)(L->top - L->base) + 1);
  958|   370k|    return 0;
  959|   371k|  }
  960|   371k|}
lj_trace.c:trace_flushroot:
  244|  3.60k|{
  245|  3.60k|  GCproto *pt = &gcref(T->startpt)->pt;
  ------------------
  |  |   67|  3.60k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  246|  3.60k|  lj_assertJ(T->root == 0, "not a root trace");
  ------------------
  |  |  527|  3.60k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.60k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.60k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  247|  3.60k|  lj_assertJ(pt != NULL, "trace has no prototype");
  ------------------
  |  |  527|  3.60k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  3.60k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.60k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 3.60k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  3.60k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  248|       |  /* First unpatch any modified bytecode. */
  249|  3.60k|  trace_unpatch(J, T);
  250|       |  /* Unlink root trace from chain anchored in prototype. */
  251|  3.60k|  if (pt->trace == T->traceno) {  /* Trace is first in chain. Easy. */
  ------------------
  |  Branch (251:7): [True: 2.26k, False: 1.33k]
  ------------------
  252|  2.26k|    pt->trace = T->nextroot;
  253|  2.26k|  } else if (pt->trace) {  /* Otherwise search in chain of root traces. */
  ------------------
  |  Branch (253:14): [True: 214, False: 1.12k]
  ------------------
  254|    214|    GCtrace *T2 = traceref(J, pt->trace);
  ------------------
  |  |  298|    214|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|    214|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    214|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    428|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 214, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 214, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    214|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  255|    214|    if (T2) {
  ------------------
  |  Branch (255:9): [True: 214, False: 0]
  ------------------
  256|    214|      for (; T2->nextroot; T2 = traceref(J, T2->nextroot))
  ------------------
  |  |  298|      0|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|      0|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (256:14): [True: 5, False: 209]
  ------------------
  257|      5|	if (T2->nextroot == T->traceno) {
  ------------------
  |  Branch (257:6): [True: 5, False: 0]
  ------------------
  258|      5|	  T2->nextroot = T->nextroot;  /* Unlink from chain. */
  259|      5|	  break;
  260|      5|	}
  261|    214|    }
  262|    214|  }
  263|  3.60k|}
lj_trace.c:trace_unpatch:
  205|  3.60k|{
  206|  3.60k|  BCOp op = bc_op(T->startins);
  ------------------
  |  |   34|  3.60k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  207|  3.60k|  BCIns *pc = mref(T->startpc, BCIns);
  ------------------
  |  |   36|  3.60k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  208|  3.60k|  UNUSED(J);
  ------------------
  |  |   91|  3.60k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  209|  3.60k|  if (op == BC_JMP)
  ------------------
  |  Branch (209:7): [True: 0, False: 3.60k]
  ------------------
  210|      0|    return;  /* No need to unpatch branches in parent traces (yet). */
  211|  3.60k|  switch (bc_op(*pc)) {
  ------------------
  |  |   34|  3.60k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  212|    846|  case BC_JFORL:
  ------------------
  |  Branch (212:3): [True: 846, False: 2.75k]
  ------------------
  213|    846|    lj_assertJ(traceref(J, bc_d(*pc)) == T, "JFORL references other trace");
  ------------------
  |  |  527|    846|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    846|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  3.38k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 846, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 846, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 846, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    846|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  214|    846|    *pc = T->startins;
  215|    846|    pc += bc_j(T->startins);
  ------------------
  |  |   39|    846|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|    846|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|    846|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  216|    846|    lj_assertJ(bc_op(*pc) == BC_JFORI, "FORL does not point to JFORI");
  ------------------
  |  |  527|    846|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    846|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    846|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 846, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    846|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  217|    846|    setbc_op(pc, BC_FORI);
  ------------------
  |  |   44|    846|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|    846|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|    846|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  218|    846|    break;
  219|    240|  case BC_JITERL:
  ------------------
  |  Branch (219:3): [True: 240, False: 3.36k]
  ------------------
  220|    290|  case BC_JLOOP:
  ------------------
  |  Branch (220:3): [True: 50, False: 3.55k]
  ------------------
  221|    290|    lj_assertJ(op == BC_ITERL || op == BC_ITERN || op == BC_LOOP ||
  ------------------
  |  |  527|    290|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|    290|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    920|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 240, False: 50]
  |  |  |  |  |  |  |  Branch (355:5): [True: 50, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|    290|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  222|    290|	       bc_isret(op), "bad original bytecode %d", op);
  223|    290|    *pc = T->startins;
  224|    290|    break;
  225|      0|  case BC_JMP:
  ------------------
  |  Branch (225:3): [True: 0, False: 3.60k]
  ------------------
  226|      0|    lj_assertJ(op == BC_ITERL, "bad original bytecode %d", op);
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  227|      0|    pc += bc_j(*pc)+2;
  ------------------
  |  |   39|      0|#define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   38|      0|#define bc_d(i)		((BCReg)((i)>>16))
  |  |  ------------------
  |  |               #define bc_j(i)		((ptrdiff_t)bc_d(i)-BCBIAS_J)
  |  |  ------------------
  |  |  |  |   29|      0|#define BCBIAS_J	0x8000
  |  |  ------------------
  ------------------
  228|      0|    if (bc_op(*pc) == BC_JITERL) {
  ------------------
  |  |   34|      0|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (228:9): [True: 0, False: 0]
  ------------------
  229|      0|      lj_assertJ(traceref(J, bc_d(*pc)) == T, "JITERL references other trace");
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  230|      0|      *pc = T->startins;
  231|      0|    }
  232|      0|    break;
  233|  1.13k|  case BC_JFUNCF:
  ------------------
  |  Branch (233:3): [True: 1.13k, False: 2.47k]
  ------------------
  234|  1.13k|    lj_assertJ(op == BC_FUNCF, "bad original bytecode %d", op);
  ------------------
  |  |  527|  1.13k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  1.13k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  1.13k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 1.13k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  1.13k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  235|  1.13k|    *pc = T->startins;
  236|  1.13k|    break;
  237|  1.33k|  default:  /* Already unpatched. */
  ------------------
  |  Branch (237:3): [True: 1.33k, False: 2.27k]
  ------------------
  238|  1.33k|    break;
  239|  3.60k|  }
  240|  3.60k|}
lj_trace.c:trace_state:
  669|   513k|{
  670|   513k|  jit_State *J = (jit_State *)ud;
  671|   513k|  UNUSED(dummy);
  ------------------
  |  |   91|   513k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  672|   562k|  do {
  673|   562k|  retry:
  674|   562k|    switch (J->state) {
  675|  25.9k|    case LJ_TRACE_START:
  ------------------
  |  Branch (675:5): [True: 25.9k, False: 536k]
  ------------------
  676|  25.9k|      J->state = LJ_TRACE_RECORD;  /* trace_start() may change state. */
  677|  25.9k|      trace_start(J);
  678|  25.9k|      lj_dispatch_update(J2G(J));
  ------------------
  |  |  115|  25.9k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  25.9k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  25.9k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  679|  25.9k|      if (J->state != LJ_TRACE_RECORD_1ST)
  ------------------
  |  Branch (679:11): [True: 25.7k, False: 292]
  ------------------
  680|  25.7k|	break;
  681|       |      /* fallthrough */
  682|       |
  683|    292|    case LJ_TRACE_RECORD_1ST:
  ------------------
  |  Branch (683:5): [True: 0, False: 562k]
  ------------------
  684|    292|      J->state = LJ_TRACE_RECORD;
  685|       |      /* fallthrough */
  686|   486k|    case LJ_TRACE_RECORD:
  ------------------
  |  Branch (686:5): [True: 486k, False: 76.2k]
  ------------------
  687|   486k|      trace_pendpatch(J, 0);
  688|   486k|      setvmstate(J2G(J), RECORD);
  ------------------
  |  |  539|   486k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  689|   486k|      lj_vmevent_send_(L, RECORD,
  ------------------
  |  |   47|   486k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|   486k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|   486k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|   486k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (47:7): [True: 0, False: 486k]
  |  |  ------------------
  |  |   48|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   49|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (49:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   50|      0|      args \
  |  |  ------------------
  |  |  |  Branch (50:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   51|      0|      lj_vmevent_call(L, argbase); \
  |  |   52|      0|      post \
  |  |   53|      0|    } \
  |  |   54|      0|  }
  ------------------
  690|       |	/* Save/restore state for trace recorder. */
  691|   486k|	TValue savetv = J2G(J)->tmptv;
  692|   486k|	TValue savetv2 = J2G(J)->tmptv2;
  693|   486k|	TraceNo parent = J->parent;
  694|   486k|	ExitNo exitno = J->exitno;
  695|   486k|	setintV(L->top++, J->cur.traceno);
  696|   486k|	setfuncV(L, L->top++, J->fn);
  697|   486k|	setintV(L->top++, J->pt ? (int32_t)proto_bcpos(J->pt, J->pc) : -1);
  698|   486k|	setintV(L->top++, J->framedepth);
  699|   486k|      ,
  700|   486k|	J2G(J)->tmptv = savetv;
  701|   486k|	J2G(J)->tmptv2 = savetv2;
  702|   486k|	J->parent = parent;
  703|   486k|	J->exitno = exitno;
  704|   486k|      );
  705|   486k|      lj_record_ins(J);
  706|   486k|      break;
  707|       |
  708|  24.2k|    case LJ_TRACE_END:
  ------------------
  |  Branch (708:5): [True: 24.2k, False: 537k]
  ------------------
  709|  24.2k|      trace_pendpatch(J, 1);
  710|  24.2k|      J->loopref = 0;
  711|  24.2k|      if ((J->flags & JIT_F_OPT_LOOP) &&
  ------------------
  |  |   86|  24.2k|#define JIT_F_OPT_LOOP		(JIT_F_OPT << 6)
  |  |  ------------------
  |  |  |  |   77|  24.2k|#define JIT_F_OPT		0x00010000
  |  |  ------------------
  ------------------
  |  Branch (711:11): [True: 24.2k, False: 0]
  ------------------
  712|  24.2k|	  J->cur.link == J->cur.traceno && J->framedepth + J->retdepth == 0) {
  ------------------
  |  Branch (712:4): [True: 10.2k, False: 13.9k]
  |  Branch (712:37): [True: 9.93k, False: 365]
  ------------------
  713|  9.93k|	setvmstate(J2G(J), OPT);
  ------------------
  |  |  539|  9.93k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  714|  9.93k|	lj_opt_dce(J);
  715|  9.93k|	if (lj_opt_loop(J)) {  /* Loop optimization failed? */
  ------------------
  |  Branch (715:6): [True: 81, False: 9.85k]
  ------------------
  716|     81|	  J->cur.link = 0;
  717|     81|	  J->cur.linktype = LJ_TRLINK_NONE;
  718|     81|	  J->loopref = J->cur.nins;
  719|     81|	  J->state = LJ_TRACE_RECORD;  /* Try to continue recording. */
  720|     81|	  break;
  721|     81|	}
  722|  9.85k|	J->loopref = J->chain[IR_LOOP];  /* Needed by assembler. */
  723|  9.85k|      }
  724|  24.2k|      lj_opt_split(J);
  ------------------
  |  |  162|  24.2k|#define lj_opt_split(J)		UNUSED(J)
  |  |  ------------------
  |  |  |  |   91|  24.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  725|  24.2k|      lj_opt_sink(J);
  726|  24.2k|      if (!J->loopref) J->cur.snap[J->cur.nsnap-1].count = SNAPCOUNT_DONE;
  ------------------
  |  |  198|  14.3k|#define SNAPCOUNT_DONE	255	/* Already compiled and linked a side trace. */
  ------------------
  |  Branch (726:11): [True: 14.3k, False: 9.85k]
  ------------------
  727|  24.2k|      J->state = LJ_TRACE_ASM;
  728|  24.2k|      break;
  729|       |
  730|  24.2k|    case LJ_TRACE_ASM:
  ------------------
  |  Branch (730:5): [True: 24.2k, False: 538k]
  ------------------
  731|  24.2k|      setvmstate(J2G(J), ASM);
  ------------------
  |  |  539|  24.2k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  732|  24.2k|      lj_asm_trace(J, &J->cur);
  733|  24.2k|      trace_stop(J);
  734|  24.2k|      setvmstate(J2G(J), INTERP);
  ------------------
  |  |  539|  24.2k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  735|  24.2k|      J->state = LJ_TRACE_IDLE;
  736|  24.2k|      lj_dispatch_update(J2G(J));
  ------------------
  |  |  115|  24.2k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  24.2k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  24.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  737|  24.2k|      return NULL;
  738|       |
  739|    368|    default:  /* Trace aborted asynchronously. */
  ------------------
  |  Branch (739:5): [True: 368, False: 561k]
  ------------------
  740|    368|      setintV(L->top++, (int32_t)LJ_TRERR_RECERR);
  741|       |      /* fallthrough */
  742|  1.72k|    case LJ_TRACE_ERR:
  ------------------
  |  Branch (742:5): [True: 1.35k, False: 560k]
  ------------------
  743|  1.72k|      trace_pendpatch(J, 1);
  744|  1.72k|      if (trace_abort(J))
  ------------------
  |  Branch (744:11): [True: 0, False: 1.72k]
  ------------------
  745|      0|	goto retry;
  746|  1.72k|      setvmstate(J2G(J), INTERP);
  ------------------
  |  |  539|  1.72k|#define setvmstate(g, st)	((g)->vmstate = ~LJ_VMST_##st)
  ------------------
  747|  1.72k|      J->state = LJ_TRACE_IDLE;
  748|  1.72k|      lj_dispatch_update(J2G(J));
  ------------------
  |  |  115|  1.72k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  1.72k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  1.72k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  749|  1.72k|      return NULL;
  750|   562k|    }
  751|   562k|  } while (J->state > LJ_TRACE_RECORD);
  ------------------
  |  Branch (751:12): [True: 48.4k, False: 486k]
  ------------------
  752|   486k|  return NULL;
  753|   513k|}
lj_trace.c:trace_start:
  417|  25.9k|{
  418|  25.9k|  lua_State *L;
  419|  25.9k|  TraceNo traceno;
  420|       |
  421|  25.9k|  if ((J->pt->flags & PROTO_NOJIT)) {  /* JIT disabled for this proto? */
  ------------------
  |  |  402|  25.9k|#define PROTO_NOJIT		0x08	/* JIT disabled for this function. */
  ------------------
  |  Branch (421:7): [True: 70, False: 25.9k]
  ------------------
  422|     70|    if (J->parent == 0 && J->exitno == 0 && bc_op(*J->pc) != BC_ITERN) {
  ------------------
  |  |   34|     70|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (422:9): [True: 70, False: 0]
  |  Branch (422:27): [True: 70, False: 0]
  |  Branch (422:45): [True: 70, False: 0]
  ------------------
  423|       |      /* Lazy bytecode patching to disable hotcount events. */
  424|     70|      lj_assertJ(bc_op(*J->pc) == BC_FORL || bc_op(*J->pc) == BC_ITERL ||
  ------------------
  |  |  527|     70|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|     70|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|    420|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 70]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 70]
  |  |  |  |  |  |  |  Branch (355:5): [True: 0, False: 70]
  |  |  |  |  |  |  |  Branch (355:5): [True: 70, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|     70|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  425|     70|		 bc_op(*J->pc) == BC_LOOP || bc_op(*J->pc) == BC_FUNCF,
  426|     70|		 "bad hot bytecode %d", bc_op(*J->pc));
  427|     70|      setbc_op(J->pc, (int)bc_op(*J->pc)+(int)BC_ILOOP-(int)BC_LOOP);
  ------------------
  |  |   44|     70|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|     70|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|     70|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  428|     70|      J->pt->flags |= PROTO_ILOOP;
  ------------------
  |  |  403|     70|#define PROTO_ILOOP		0x10	/* Patched bytecode with ILOOP etc. */
  ------------------
  429|     70|    }
  430|     70|    J->state = LJ_TRACE_IDLE;  /* Silently ignored. */
  431|     70|    return;
  432|     70|  }
  433|       |
  434|       |  /* Ensuring forward progress for BC_ITERN can trigger hotcount again. */
  435|  25.9k|  if (!J->parent && bc_op(*J->pc) == BC_JLOOP) {  /* Already compiled. */
  ------------------
  |  |   34|  14.5k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (435:7): [True: 14.5k, False: 11.4k]
  |  Branch (435:21): [True: 0, False: 14.5k]
  ------------------
  436|      0|    J->state = LJ_TRACE_IDLE;  /* Silently ignored. */
  437|      0|    return;
  438|      0|  }
  439|       |
  440|       |  /* Get a new trace number. */
  441|  25.9k|  traceno = trace_findfree(J);
  442|  25.9k|  if (LJ_UNLIKELY(traceno == 0)) {  /* No free trace? */
  ------------------
  |  |  146|  25.9k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 0, False: 25.9k]
  |  |  ------------------
  ------------------
  443|      0|    lj_assertJ((J2G(J)->hookmask & HOOK_GC) == 0,
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  444|      0|	       "recorder called from GC hook");
  445|      0|    lj_trace_flushall(J->L);
  446|      0|    J->state = LJ_TRACE_IDLE;  /* Silently ignored. */
  447|      0|    return;
  448|      0|  }
  449|  25.9k|  setgcrefp(J->trace[traceno], &J->cur);
  ------------------
  |  |   75|  25.9k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  450|       |
  451|       |  /* Setup enough of the current trace to be able to send the vmevent. */
  452|  25.9k|  memset(&J->cur, 0, sizeof(GCtrace));
  453|  25.9k|  J->cur.traceno = traceno;
  454|  25.9k|  J->cur.nins = J->cur.nk = REF_BASE;
  455|  25.9k|  J->cur.ir = J->irbuf;
  456|  25.9k|  J->cur.snap = J->snapbuf;
  457|  25.9k|  J->cur.snapmap = J->snapmapbuf;
  458|  25.9k|  J->mergesnap = 0;
  459|  25.9k|  J->needsnap = 0;
  460|  25.9k|  J->bcskip = 0;
  461|  25.9k|  J->guardemit.irt = 0;
  462|  25.9k|  J->postproc = LJ_POST_NONE;
  463|  25.9k|  lj_resetsplit(J);
  ------------------
  |  |  411|  25.9k|#define lj_resetsplit(J)	UNUSED(J)
  |  |  ------------------
  |  |  |  |   91|  25.9k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  464|  25.9k|  J->retryrec = 0;
  465|  25.9k|  J->ktrace = 0;
  466|  25.9k|  setgcref(J->cur.startpt, obj2gco(J->pt));
  ------------------
  |  |   72|  25.9k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
  467|       |
  468|  25.9k|  L = J->L;
  469|  25.9k|  lj_vmevent_send(L, TRACE,
  ------------------
  |  |   39|  25.9k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  25.9k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  25.9k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  25.9k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 25.9k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |  ------------------
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  470|  25.9k|    setstrV(L, L->top++, lj_str_newlit(L, "start"));
  471|  25.9k|    setintV(L->top++, traceno);
  472|  25.9k|    setfuncV(L, L->top++, J->fn);
  473|  25.9k|    setintV(L->top++, proto_bcpos(J->pt, J->pc));
  474|  25.9k|    if (J->parent) {
  475|  25.9k|      setintV(L->top++, J->parent);
  476|  25.9k|      setintV(L->top++, J->exitno);
  477|  25.9k|    } else {
  478|  25.9k|      BCOp op = bc_op(*J->pc);
  479|  25.9k|      if (op == BC_CALLM || op == BC_CALL || op == BC_ITERC) {
  480|  25.9k|	setintV(L->top++, J->exitno);  /* Parent of stitched trace. */
  481|  25.9k|	setintV(L->top++, -1);
  482|  25.9k|      }
  483|  25.9k|    }
  484|  25.9k|  );
  485|  25.9k|  lj_record_setup(J);
  486|  25.9k|}
lj_trace.c:trace_findfree:
   62|  25.9k|{
   63|  25.9k|  MSize osz, lim;
   64|  25.9k|  if (J->freetrace == 0)
  ------------------
  |  Branch (64:7): [True: 3.29k, False: 22.6k]
  ------------------
   65|  3.29k|    J->freetrace = 1;
   66|  28.7k|  for (; J->freetrace < J->sizetrace; J->freetrace++)
  ------------------
  |  Branch (66:10): [True: 25.4k, False: 3.31k]
  ------------------
   67|  50.9k|    if (traceref(J, J->freetrace) == NULL)
  ------------------
  |  |  298|  25.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  25.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  25.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  50.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 25.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 25.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  25.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  |  Branch (67:9): [True: 22.6k, False: 2.84k]
  ------------------
   68|  22.6k|      return J->freetrace++;
   69|       |  /* Need to grow trace array. */
   70|  3.31k|  lim = (MSize)J->param[JIT_P_maxtrace] + 1;
   71|  3.31k|  if (lim < 2) lim = 2; else if (lim > 65535) lim = 65535;
  ------------------
  |  Branch (71:7): [True: 0, False: 3.31k]
  |  Branch (71:34): [True: 0, False: 3.31k]
  ------------------
   72|  3.31k|  osz = J->sizetrace;
   73|  3.31k|  if (osz >= lim)
  ------------------
  |  Branch (73:7): [True: 0, False: 3.31k]
  ------------------
   74|      0|    return 0;  /* Too many traces. */
   75|  3.31k|  lj_mem_growvec(J->L, J->trace, J->sizetrace, lim, GCRef);
  ------------------
  |  |  129|  3.31k|  ((p) = (t *)lj_mem_grow(L, (p), &(n), (m), (MSize)sizeof(t)))
  ------------------
   76|  35.4k|  for (; osz < J->sizetrace; osz++)
  ------------------
  |  Branch (76:10): [True: 32.1k, False: 3.31k]
  ------------------
   77|  32.1k|    setgcrefnull(J->trace[osz]);
  ------------------
  |  |   76|  35.4k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   78|  3.31k|  return J->freetrace;
   79|  3.31k|}
lj_trace.c:trace_pendpatch:
  656|   512k|{
  657|   512k|  if (LJ_UNLIKELY(J->patchpc)) {
  ------------------
  |  |  146|   512k|#define LJ_UNLIKELY(x)	__builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (146:24): [True: 18.6k, False: 493k]
  |  |  ------------------
  ------------------
  658|  18.6k|    if (force || J->bcskip == 0) {
  ------------------
  |  Branch (658:9): [True: 0, False: 18.6k]
  |  Branch (658:18): [True: 18.6k, False: 8]
  ------------------
  659|  18.6k|      *J->patchpc = J->patchins;
  660|  18.6k|      J->patchpc = NULL;
  661|  18.6k|    } else {
  662|      8|      J->bcskip = 0;
  663|      8|    }
  664|  18.6k|  }
  665|   512k|}
lj_trace.c:trace_stop:
  490|  24.2k|{
  491|  24.2k|  BCIns *pc = mref(J->cur.startpc, BCIns);
  ------------------
  |  |   36|  24.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  492|  24.2k|  BCOp op = bc_op(J->cur.startins);
  ------------------
  |  |   34|  24.2k|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  493|  24.2k|  GCproto *pt = &gcref(J->cur.startpt)->pt;
  ------------------
  |  |   67|  24.2k|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  494|  24.2k|  TraceNo traceno = J->cur.traceno;
  495|  24.2k|  GCtrace *T = J->curfinal;
  496|  24.2k|  lua_State *L;
  497|       |
  498|  24.2k|  switch (op) {
  499|  5.36k|  case BC_FORL:
  ------------------
  |  Branch (499:3): [True: 5.36k, False: 18.8k]
  ------------------
  500|  5.36k|    setbc_op(pc+bc_j(J->cur.startins), BC_JFORI);  /* Patch FORI, too. */
  ------------------
  |  |   44|  5.36k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  5.36k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  5.36k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  501|       |    /* fallthrough */
  502|  5.94k|  case BC_LOOP:
  ------------------
  |  Branch (502:3): [True: 580, False: 23.6k]
  ------------------
  503|  6.22k|  case BC_ITERL:
  ------------------
  |  Branch (503:3): [True: 285, False: 23.9k]
  ------------------
  504|  13.1k|  case BC_FUNCF:
  ------------------
  |  Branch (504:3): [True: 6.90k, False: 17.3k]
  ------------------
  505|       |    /* Patch bytecode of starting instruction in root trace. */
  506|  13.1k|    setbc_op(pc, (int)op+(int)BC_JLOOP-(int)BC_LOOP);
  ------------------
  |  |   44|  13.1k|#define setbc_op(p, x)	setbc_byte(p, (x), 0)
  |  |  ------------------
  |  |  |  |   43|  13.1k|  ((uint8_t *)(p))[LJ_ENDIAN_SELECT(ofs, 3-ofs)] = (uint8_t)(x)
  |  |  |  |  ------------------
  |  |  |  |  |  |  631|  13.1k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  507|  13.1k|    setbc_d(pc, traceno);
  ------------------
  |  |   49|  13.1k|  ((uint16_t *)(p))[LJ_ENDIAN_SELECT(1, 0)] = (uint16_t)(x)
  |  |  ------------------
  |  |  |  |  631|  13.1k|#define LJ_ENDIAN_SELECT(le, be)	le
  |  |  ------------------
  ------------------
  508|  13.3k|  addroot:
  509|       |    /* Add to root trace chain in prototype. */
  510|  13.3k|    J->cur.nextroot = pt->trace;
  511|  13.3k|    pt->trace = (TraceNo1)traceno;
  512|  13.3k|    break;
  513|    227|  case BC_ITERN:
  ------------------
  |  Branch (513:3): [True: 227, False: 23.9k]
  ------------------
  514|    227|  case BC_RET:
  ------------------
  |  Branch (514:3): [True: 0, False: 24.2k]
  ------------------
  515|    227|  case BC_RET0:
  ------------------
  |  Branch (515:3): [True: 0, False: 24.2k]
  ------------------
  516|    227|  case BC_RET1:
  ------------------
  |  Branch (516:3): [True: 0, False: 24.2k]
  ------------------
  517|    227|    *pc = BCINS_AD(BC_JLOOP, J->cur.snap[0].nslots, traceno);
  ------------------
  |  |   56|    227|  (((BCIns)(o))|((BCIns)(a)<<8)|((BCIns)(d)<<16))
  ------------------
  518|    227|    goto addroot;
  519|  10.4k|  case BC_JMP:
  ------------------
  |  Branch (519:3): [True: 10.4k, False: 13.7k]
  ------------------
  520|       |    /* Patch exit branch in parent to side trace entry. */
  521|  10.4k|    lj_assertJ(J->parent != 0 && J->cur.root != 0, "not a side trace");
  ------------------
  |  |  527|  10.4k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  10.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  20.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  522|  10.4k|    lj_asm_patchexit(J, traceref(J, J->parent), J->exitno, J->cur.mcode);
  ------------------
  |  |  298|  10.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  10.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  10.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  523|       |    /* Avoid compiling a side trace twice (stack resizing uses parent exit). */
  524|      0|    {
  525|  10.4k|      SnapShot *snap = &traceref(J, J->parent)->snap[J->exitno];
  ------------------
  |  |  298|  10.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  10.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  10.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  526|  10.4k|      snap->count = SNAPCOUNT_DONE;
  ------------------
  |  |  198|  10.4k|#define SNAPCOUNT_DONE	255	/* Already compiled and linked a side trace. */
  ------------------
  527|  10.4k|      if (J->cur.topslot > snap->topslot) snap->topslot = J->cur.topslot;
  ------------------
  |  Branch (527:11): [True: 1.14k, False: 9.31k]
  ------------------
  528|  10.4k|    }
  529|       |    /* Add to side trace chain in root trace. */
  530|      0|    {
  531|  10.4k|      GCtrace *root = traceref(J, J->cur.root);
  ------------------
  |  |  298|  10.4k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|  10.4k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|  10.4k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|  20.9k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 10.4k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|  10.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  532|      0|      root->nchild++;
  533|  10.4k|      J->cur.nextside = root->nextside;
  534|  10.4k|      root->nextside = (TraceNo1)traceno;
  535|  10.4k|    }
  536|      0|    break;
  537|      0|  case BC_CALLM:
  ------------------
  |  Branch (537:3): [True: 0, False: 24.2k]
  ------------------
  538|    401|  case BC_CALL:
  ------------------
  |  Branch (538:3): [True: 401, False: 23.8k]
  ------------------
  539|    401|  case BC_ITERC:
  ------------------
  |  Branch (539:3): [True: 0, False: 24.2k]
  ------------------
  540|       |    /* Trace stitching: patch link of previous trace. */
  541|    401|    traceref(J, J->exitno)->link = traceno;
  ------------------
  |  |  298|    401|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|    401|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    401|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    802|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 401, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 401, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    401|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  542|      0|    break;
  543|      0|  default:
  ------------------
  |  Branch (543:3): [True: 0, False: 24.2k]
  ------------------
  544|      0|    lj_assertJ(0, "bad stop bytecode %d", op);
  ------------------
  |  |  527|      0|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|      0|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  545|      0|    break;
  546|  24.2k|  }
  547|       |
  548|       |  /* Commit new mcode only after all patching is done. */
  549|  24.2k|  lj_mcode_commit(J, J->cur.mcode);
  550|  24.2k|  J->postproc = LJ_POST_NONE;
  551|  24.2k|  trace_save(J, T);
  552|       |
  553|  24.2k|  L = J->L;
  554|  24.2k|  lj_vmevent_send(L, TRACE,
  ------------------
  |  |   39|  24.2k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  24.2k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  24.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  24.2k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 24.2k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  555|  24.2k|    setstrV(L, L->top++, lj_str_newlit(L, "stop"));
  556|  24.2k|    setintV(L->top++, traceno);
  557|  24.2k|    setfuncV(L, L->top++, J->fn);
  558|  24.2k|  );
  559|  24.2k|}
lj_trace.c:trace_save:
  146|  24.2k|{
  147|  24.2k|  size_t sztr = ((sizeof(GCtrace)+7)&~7);
  148|  24.2k|  size_t szins = (J->cur.nins-J->cur.nk)*sizeof(IRIns);
  149|  24.2k|  char *p = (char *)T + sztr;
  150|  24.2k|  memcpy(T, &J->cur, sizeof(GCtrace));
  151|  24.2k|  setgcrefr(T->nextgc, J2G(J)->gc.root);
  ------------------
  |  |   77|  24.2k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
  152|  24.2k|  setgcrefp(J2G(J)->gc.root, T);
  ------------------
  |  |   75|  24.2k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  153|  24.2k|  newwhite(J2G(J), T);
  ------------------
  |  |   40|  24.2k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  24.2k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  24.2k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  24.2k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  24.2k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  24.2k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  154|  24.2k|  T->gct = ~LJ_TTRACE;
  ------------------
  |  |  269|  24.2k|#define LJ_TTRACE		(~9u)
  ------------------
  155|  24.2k|  T->ir = (IRIns *)p - J->cur.nk;  /* The IR has already been copied above. */
  156|       |#if LJ_ABI_PAUTH
  157|       |  T->mcauth = lj_ptr_sign((ASMFunction)T->mcode, T);
  158|       |#endif
  159|  24.2k|  p += szins;
  160|  24.2k|  TRACE_APPENDVEC(snap, nsnap, SnapShot)
  ------------------
  |  |   82|  24.2k|  T->field = (tp *)p; \
  |  |   83|  24.2k|  memcpy(p, J->cur.field, J->cur.szfield*sizeof(tp)); \
  |  |   84|  24.2k|  p += J->cur.szfield*sizeof(tp);
  ------------------
  161|  24.2k|  TRACE_APPENDVEC(snapmap, nsnapmap, SnapEntry)
  ------------------
  |  |   82|  24.2k|  T->field = (tp *)p; \
  |  |   83|  24.2k|  memcpy(p, J->cur.field, J->cur.szfield*sizeof(tp)); \
  |  |   84|  24.2k|  p += J->cur.szfield*sizeof(tp);
  ------------------
  162|  24.2k|  J->cur.traceno = 0;
  163|  24.2k|  J->curfinal = NULL;
  164|  24.2k|  setgcrefp(J->trace[T->traceno], T);
  ------------------
  |  |   75|  24.2k|#define setgcrefp(r, p)	((r).gcptr64 = (uint64_t)(p))
  ------------------
  165|  24.2k|  lj_gc_barriertrace(J2G(J), T->traceno);
  ------------------
  |  |  115|  24.2k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|  24.2k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|  24.2k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  24.2k|  lj_gdbjit_addtrace(J, T);
  ------------------
  |  |   18|  24.2k|#define lj_gdbjit_addtrace(J, T)	UNUSED(T)
  |  |  ------------------
  |  |  |  |   91|  24.2k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  |  |  ------------------
  ------------------
  167|       |#ifdef LUAJIT_USE_PERFTOOLS
  168|       |  perftools_addtrace(T);
  169|       |#endif
  170|  24.2k|}
lj_trace.c:trace_abort:
  578|  1.72k|{
  579|  1.72k|  lua_State *L = J->L;
  580|  1.72k|  TraceError e = LJ_TRERR_RECERR;
  581|  1.72k|  TraceNo traceno;
  582|       |
  583|  1.72k|  J->postproc = LJ_POST_NONE;
  584|  1.72k|  lj_mcode_abort(J);
  585|  1.72k|  if (J->curfinal) {
  ------------------
  |  Branch (585:7): [True: 0, False: 1.72k]
  ------------------
  586|      0|    lj_trace_free(J2G(J), J->curfinal);
  ------------------
  |  |  115|      0|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|      0|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|      0|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  587|      0|    J->curfinal = NULL;
  588|      0|  }
  589|  1.72k|  if (tvisnumber(L->top-1))
  ------------------
  |  |  802|  1.72k|#define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  781|  1.72k|#define itype(o)	((uint32_t)((o)->it64 >> 47))
  |  |  ------------------
  |  |               #define tvisnumber(o)	(itype(o) <= LJ_TISNUM)
  |  |  ------------------
  |  |  |  |  280|  1.72k|#define LJ_TISNUM		LJ_TNUMX
  |  |  |  |  ------------------
  |  |  |  |  |  |  274|  1.72k|#define LJ_TNUMX		(~13u)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |  |  Branch (802:23): [True: 1.72k, False: 0]
  |  |  ------------------
  ------------------
  590|  1.72k|    e = (TraceError)numberVint(L->top-1);
  591|  1.72k|  if (e == LJ_TRERR_MCODELM) {
  ------------------
  |  Branch (591:7): [True: 0, False: 1.72k]
  ------------------
  592|      0|    L->top--;  /* Remove error object */
  593|      0|    J->state = LJ_TRACE_ASM;
  594|      0|    return 1;  /* Retry ASM with new MCode area. */
  595|      0|  }
  596|       |  /* Penalize or blacklist starting bytecode instruction. */
  597|  1.72k|  if (J->parent == 0 && !bc_isret(bc_op(J->cur.startins))) {
  ------------------
  |  |   34|    770|#define bc_op(i)	((BCOp)((i)&0xff))
  ------------------
  |  Branch (597:7): [True: 770, False: 951]
  |  Branch (597:25): [True: 770, False: 0]
  ------------------
  598|    770|    if (J->exitno == 0) {
  ------------------
  |  Branch (598:9): [True: 580, False: 190]
  ------------------
  599|    580|      BCIns *startpc = mref(J->cur.startpc, BCIns);
  ------------------
  |  |   36|    580|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  600|    580|      if (e == LJ_TRERR_RETRY)
  ------------------
  |  Branch (600:11): [True: 0, False: 580]
  ------------------
  601|      0|	hotcount_set(J2GG(J), startpc+1, 1);  /* Immediate retry. */
  ------------------
  |  |  128|      0|  (hotcount_get((gg), (pc)) = (HotCount)(val))
  |  |  ------------------
  |  |  |  |  126|      0|  (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   96|      0|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  |  |  ------------------
  |  |  |  |                 (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|      0|#define HOTCOUNT_SIZE		64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  602|    580|      else
  603|    580|	penalty_pc(J, &gcref(J->cur.startpt)->pt, startpc, e);
  ------------------
  |  |   67|    580|#define gcref(r)	((GCobj *)(r).gcptr64)
  ------------------
  604|    580|    } else {
  605|    190|      traceref(J, J->exitno)->link = J->exitno;  /* Self-link is blacklisted. */
  ------------------
  |  |  298|    190|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|    190|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|    190|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|    380|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 190, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 190, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|    190|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  606|    190|    }
  607|    770|  }
  608|       |
  609|       |  /* Is there anything to abort? */
  610|  1.72k|  traceno = J->cur.traceno;
  611|  1.72k|  if (traceno) {
  ------------------
  |  Branch (611:7): [True: 1.72k, False: 0]
  ------------------
  612|  1.72k|    ptrdiff_t errobj = savestack(L, L->top-1);  /* Stack may be resized. */
  ------------------
  |  |   14|  1.72k|#define savestack(L, p)		((char *)(p) - mref(L->stack, char))
  |  |  ------------------
  |  |  |  |   36|  1.72k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
  613|  1.72k|    J->cur.link = 0;
  614|  1.72k|    J->cur.linktype = LJ_TRLINK_NONE;
  615|  1.72k|    lj_vmevent_send(L, TRACE,
  ------------------
  |  |   39|  1.72k|  if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |  705|  1.72k|#define G(L)			(mref(L->glref, global_State))
  |  |  |  |  ------------------
  |  |  |  |  |  |   36|  1.72k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  |  |  ------------------
  |  |  ------------------
  |  |                 if (G(L)->vmevmask & VMEVENT_MASK(LJ_VMEVENT_##ev)) { \
  |  |  ------------------
  |  |  |  |   15|  1.72k|#define VMEVENT_MASK(ev)	((uint8_t)1 << ((int)(ev) & 7))
  |  |  ------------------
  |  |  |  Branch (39:7): [True: 0, False: 1.72k]
  |  |  ------------------
  |  |   40|      0|    ptrdiff_t argbase = lj_vmevent_prepare(L, LJ_VMEVENT_##ev); \
  |  |   41|      0|    if (argbase) { \
  |  |  ------------------
  |  |  |  Branch (41:9): [True: 0, False: 0]
  |  |  ------------------
  |  |   42|      0|      args \
  |  |  ------------------
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  |  Branch (42:7): [True: 0, False: 0]
  |  |  ------------------
  |  |   43|      0|      lj_vmevent_call(L, argbase); \
  |  |   44|      0|    } \
  |  |   45|      0|  }
  ------------------
  616|  1.72k|      cTValue *bot = tvref(L->stack)+LJ_FR2;
  617|  1.72k|      cTValue *frame;
  618|  1.72k|      const BCIns *pc;
  619|  1.72k|      BCPos pos = 0;
  620|  1.72k|      setstrV(L, L->top++, lj_str_newlit(L, "abort"));
  621|  1.72k|      setintV(L->top++, traceno);
  622|       |      /* Find original Lua function call to generate a better error message. */
  623|  1.72k|      for (frame = J->L->base-1, pc = J->pc; ; frame = frame_prev(frame)) {
  624|  1.72k|	if (isluafunc(frame_func(frame))) {
  625|  1.72k|	  pos = proto_bcpos(funcproto(frame_func(frame)), pc);
  626|  1.72k|	  break;
  627|  1.72k|	} else if (frame_prev(frame) <= bot) {
  628|  1.72k|	  break;
  629|  1.72k|	} else if (frame_iscont(frame)) {
  630|  1.72k|	  pc = frame_contpc(frame) - 1;
  631|  1.72k|	} else {
  632|  1.72k|	  pc = frame_pc(frame) - 1;
  633|  1.72k|	}
  634|  1.72k|      }
  635|  1.72k|      setfuncV(L, L->top++, frame_func(frame));
  636|  1.72k|      setintV(L->top++, pos);
  637|  1.72k|      copyTV(L, L->top++, restorestack(L, errobj));
  638|  1.72k|      copyTV(L, L->top++, &J->errinfo);
  639|  1.72k|    );
  640|       |    /* Drop aborted trace after the vmevent (which may still access it). */
  641|  1.72k|    setgcrefnull(J->trace[traceno]);
  ------------------
  |  |   76|  1.72k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
  642|  1.72k|    if (traceno < J->freetrace)
  ------------------
  |  Branch (642:9): [True: 1.51k, False: 206]
  ------------------
  643|  1.51k|      J->freetrace = traceno;
  644|  1.72k|    J->cur.traceno = 0;
  645|  1.72k|  }
  646|  1.72k|  L->top--;  /* Remove error object */
  647|  1.72k|  if (e == LJ_TRERR_DOWNREC)
  ------------------
  |  Branch (647:7): [True: 0, False: 1.72k]
  ------------------
  648|      0|    return trace_downrec(J);
  649|  1.72k|  else if (e == LJ_TRERR_MCODEAL)
  ------------------
  |  Branch (649:12): [True: 0, False: 1.72k]
  ------------------
  650|      0|    lj_trace_flushall(L);
  651|  1.72k|  return 0;
  652|  1.72k|}
lj_trace.c:penalty_pc:
  390|    580|{
  391|    580|  uint32_t i, val = PENALTY_MIN;
  ------------------
  |  |  318|    580|#define PENALTY_MIN	(36*2)	/* Minimum penalty value. */
  ------------------
  392|  11.4k|  for (i = 0; i < PENALTY_SLOTS; i++)
  ------------------
  |  |  317|  11.4k|#define PENALTY_SLOTS	64	/* Penalty cache slot. Must be a power of 2. */
  ------------------
  |  Branch (392:15): [True: 11.2k, False: 170]
  ------------------
  393|  11.2k|    if (mref(J->penalty[i].pc, const BCIns) == pc) {  /* Cache slot found? */
  ------------------
  |  |   36|  11.2k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  ------------------
  |  Branch (393:9): [True: 410, False: 10.8k]
  ------------------
  394|       |      /* First try to bump its hotcount several times. */
  395|    410|      val = ((uint32_t)J->penalty[i].val << 1) +
  396|    410|	    (lj_prng_u64(&J2G(J)->prng) & ((1u<<PENALTY_RNDBITS)-1));
  ------------------
  |  |  115|    410|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|    410|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|    410|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
              	    (lj_prng_u64(&J2G(J)->prng) & ((1u<<PENALTY_RNDBITS)-1));
  ------------------
  |  |  320|    410|#define PENALTY_RNDBITS	4	/* # of random bits to add to penalty value. */
  ------------------
  397|    410|      if (val > PENALTY_MAX) {
  ------------------
  |  |  319|    410|#define PENALTY_MAX	60000	/* Maximum penalty value. */
  ------------------
  |  Branch (397:11): [True: 0, False: 410]
  ------------------
  398|      0|	blacklist_pc(pt, pc);  /* Blacklist it, if that didn't help. */
  399|      0|	return;
  400|      0|      }
  401|    410|      goto setpenalty;
  402|    410|    }
  403|       |  /* Assign a new penalty cache slot. */
  404|    170|  i = J->penaltyslot;
  405|    170|  J->penaltyslot = (J->penaltyslot + 1) & (PENALTY_SLOTS-1);
  ------------------
  |  |  317|    170|#define PENALTY_SLOTS	64	/* Penalty cache slot. Must be a power of 2. */
  ------------------
  406|    170|  setmref(J->penalty[i].pc, pc);
  ------------------
  |  |   39|    170|#define setmref(r, p)	((r).ptr64 = (uint64_t)(void *)(p))
  ------------------
  407|    580|setpenalty:
  408|    580|  J->penalty[i].val = (uint16_t)val;
  409|    580|  J->penalty[i].reason = e;
  410|    580|  hotcount_set(J2GG(J), pc+1, val);
  ------------------
  |  |  128|    580|  (hotcount_get((gg), (pc)) = (HotCount)(val))
  |  |  ------------------
  |  |  |  |  126|    580|  (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   96|    580|#define u32ptr(p)	((uint32_t)(intptr_t)(void *)(p))
  |  |  |  |  ------------------
  |  |  |  |                 (gg)->hotcount[(u32ptr(pc)>>2) & (HOTCOUNT_SIZE-1)]
  |  |  |  |  ------------------
  |  |  |  |  |  |   74|    580|#define HOTCOUNT_SIZE		64
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  411|    580|}
lj_trace.c:trace_exit_cp:
  824|   371k|{
  825|   371k|  ExitDataCP *exd = (ExitDataCP *)ud;
  826|       |  /* Always catch error here and don't call error function. */
  827|   371k|  cframe_errfunc(L->cframe) = 0;
  ------------------
  |  |  279|   371k|#define cframe_errfunc(cf)	(*(int32_t *)(((char *)(cf))+CFRAME_OFS_ERRF))
  |  |  ------------------
  |  |  |  |  163|   371k|#define CFRAME_OFS_ERRF		(3*4)
  |  |  ------------------
  ------------------
  828|   371k|  cframe_nres(L->cframe) = -2*LUAI_MAXSTACK*(int)sizeof(TValue);
  ------------------
  |  |  280|   371k|#define cframe_nres(cf)		(*(int32_t *)(((char *)(cf))+CFRAME_OFS_NRES))
  |  |  ------------------
  |  |  |  |  164|   371k|#define CFRAME_OFS_NRES		(2*4)
  |  |  ------------------
  ------------------
                cframe_nres(L->cframe) = -2*LUAI_MAXSTACK*(int)sizeof(TValue);
  ------------------
  |  |   91|   371k|#define LUAI_MAXSTACK	65500	/* Max. # of stack slots for a thread (<64K). */
  ------------------
  829|   371k|  exd->pc = lj_snap_restore(exd->J, exd->exptr);
  830|   371k|  UNUSED(dummy);
  ------------------
  |  |   91|   371k|#define UNUSED(x)	((void)(x))	/* to avoid warnings */
  ------------------
  831|   371k|  return NULL;
  832|   371k|}
lj_trace.c:trace_hotside:
  788|   145k|{
  789|   145k|  SnapShot *snap = &traceref(J, J->parent)->snap[J->exitno];
  ------------------
  |  |  298|   145k|  check_exp((n)>0 && (MSize)(n)<J->sizetrace, (GCtrace *)gcref(J->trace[(n)]))
  |  |  ------------------
  |  |  |  |  367|   145k|#define check_exp(c, e)		(lj_assertX((c), #c), (e))
  |  |  |  |  ------------------
  |  |  |  |  |  |  366|   145k|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  355|   290k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 145k, False: 0]
  |  |  |  |  |  |  |  |  |  Branch (355:5): [True: 145k, False: 0]
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  356|   145k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  790|   145k|  if (!(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT)) &&
  ------------------
  |  |  115|   145k|#define J2G(J)		(&J2GG(J)->g)
  |  |  ------------------
  |  |  |  |  113|   145k|#define J2GG(j)		((GG_State *)((char *)(j) - GG_OFS(J)))
  |  |  |  |  ------------------
  |  |  |  |  |  |  111|   145k|#define GG_OFS(field)	((int)offsetof(GG_State, field))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
                if (!(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT)) &&
  ------------------
  |  |  676|   145k|#define HOOK_GC			0x40
  ------------------
                if (!(J2G(J)->hookmask & (HOOK_GC|HOOK_VMEVENT)) &&
  ------------------
  |  |  675|   145k|#define HOOK_VMEVENT		0x20
  ------------------
  |  Branch (790:7): [True: 145k, False: 0]
  ------------------
  791|   145k|      isluafunc(curr_func(J->L)) &&
  ------------------
  |  |  476|   290k|#define isluafunc(fn)	((fn)->c.ffid == FF_LUA)
  |  |  ------------------
  |  |  |  |  474|   145k|#define FF_LUA		0
  |  |  ------------------
  |  |  |  Branch (476:23): [True: 145k, False: 0]
  |  |  ------------------
  ------------------
  792|   145k|      snap->count != SNAPCOUNT_DONE &&
  ------------------
  |  |  198|   290k|#define SNAPCOUNT_DONE	255	/* Already compiled and linked a side trace. */
  ------------------
  |  Branch (792:7): [True: 144k, False: 1.13k]
  ------------------
  793|   145k|      ++snap->count >= J->param[JIT_P_hotexit]) {
  ------------------
  |  Branch (793:7): [True: 11.4k, False: 132k]
  ------------------
  794|  11.4k|    lj_assertJ(J->state == LJ_TRACE_IDLE, "hot side exit while recording");
  ------------------
  |  |  527|  11.4k|#define lj_assertJ(c, ...)	lj_assertG_(J2G(J), (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  363|  11.4k|#define lj_assertG_(g, c, ...)	lj_assert_check((g), (c), __VA_ARGS__)
  |  |  |  |  ------------------
  |  |  |  |  |  |  355|  11.4k|  ((c) ? (void)0 : \
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (355:4): [True: 11.4k, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  356|  11.4k|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  795|       |    /* J->parent is non-zero for a side trace. */
  796|  11.4k|    J->state = LJ_TRACE_START;
  797|  11.4k|    lj_trace_ins(J, pc);
  798|  11.4k|  }
  799|   145k|}

lj_udata_new:
   15|  59.6k|{
   16|  59.6k|  GCudata *ud = lj_mem_newt(L, sizeof(GCudata) + sz, GCudata);
  ------------------
  |  |  133|  59.6k|#define lj_mem_newt(L, s, t)	((t *)lj_mem_new(L, (s)))
  |  |  ------------------
  |  |  |  |  117|  59.6k|#define lj_mem_new(L, s)	lj_mem_realloc(L, NULL, 0, (s))
  |  |  ------------------
  ------------------
   17|  59.6k|  global_State *g = G(L);
  ------------------
  |  |  705|  59.6k|#define G(L)			(mref(L->glref, global_State))
  |  |  ------------------
  |  |  |  |   36|  59.6k|#define mref(r, t)	((t *)(void *)(r).ptr64)
  |  |  ------------------
  ------------------
   18|  59.6k|  newwhite(g, ud);  /* Not finalized. */
  ------------------
  |  |   40|  59.6k|#define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |  775|  59.6k|#define obj2gco(v)	((GCobj *)(v))
  |  |  ------------------
  |  |               #define newwhite(g, x)	(obj2gco(x)->gch.marked = (uint8_t)curwhite(g))
  |  |  ------------------
  |  |  |  |   39|  59.6k|#define curwhite(g)	((g)->gc.currentwhite & LJ_GC_WHITES)
  |  |  |  |  ------------------
  |  |  |  |  |  |   27|  59.6k|#define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   17|  59.6k|#define LJ_GC_WHITE0	0x01
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |               #define LJ_GC_WHITES	(LJ_GC_WHITE0 | LJ_GC_WHITE1)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |   18|  59.6k|#define LJ_GC_WHITE1	0x02
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
   19|  59.6k|  ud->gct = ~LJ_TUDATA;
  ------------------
  |  |  272|  59.6k|#define LJ_TUDATA		(~12u)
  ------------------
   20|  59.6k|  ud->udtype = UDTYPE_USERDATA;
   21|  59.6k|  ud->len = sz;
   22|       |  /* NOBARRIER: The GCudata is new (marked white). */
   23|  59.6k|  setgcrefnull(ud->metatable);
  ------------------
  |  |   76|  59.6k|#define setgcrefnull(r)	((r).gcptr64 = 0)
  ------------------
   24|  59.6k|  setgcref(ud->env, obj2gco(env));
  ------------------
  |  |   72|  59.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   25|       |  /* Chain to userdata list (after main thread). */
   26|  59.6k|  setgcrefr(ud->nextgc, mainthread(g)->nextgc);
  ------------------
  |  |   77|  59.6k|#define setgcrefr(r, v)	((r).gcptr64 = (v).gcptr64)
  ------------------
   27|  59.6k|  setgcref(mainthread(g)->nextgc, obj2gco(ud));
  ------------------
  |  |   72|  59.6k|#define setgcref(r, gc)	((r).gcptr64 = (uint64_t)&(gc)->gch)
  ------------------
   28|  59.6k|  return ud;
   29|  59.6k|}
lj_udata_free:
   32|  59.6k|{
   33|  59.6k|  lj_mem_free(g, ud, sizeudata(ud));
  ------------------
  |  |  343|  59.6k|#define sizeudata(u)	(sizeof(struct GCudata)+(u)->len)
  ------------------
   34|  59.6k|}

lj_vm_foldarith:
   51|  57.6k|{
   52|  57.6k|  switch (op) {
   53|  11.6k|  case IR_ADD - IR_ADD: return x+y; break;
  ------------------
  |  Branch (53:3): [True: 11.6k, False: 46.0k]
  ------------------
   54|  14.7k|  case IR_SUB - IR_ADD: return x-y; break;
  ------------------
  |  Branch (54:3): [True: 14.7k, False: 42.8k]
  ------------------
   55|  10.3k|  case IR_MUL - IR_ADD: return x*y; break;
  ------------------
  |  Branch (55:3): [True: 10.3k, False: 47.3k]
  ------------------
   56|  11.2k|  case IR_DIV - IR_ADD: return x/y; break;
  ------------------
  |  Branch (56:3): [True: 11.2k, False: 46.4k]
  ------------------
   57|  2.42k|  case IR_MOD - IR_ADD: return x-lj_vm_floormul(x, y); break;
  ------------------
  |  Branch (57:3): [True: 2.42k, False: 55.2k]
  ------------------
   58|  7.04k|  case IR_POW - IR_ADD: return pow(x, y); break;
  ------------------
  |  Branch (58:3): [True: 7.04k, False: 50.6k]
  ------------------
   59|     99|  case IR_NEG - IR_ADD: return -x; break;
  ------------------
  |  Branch (59:3): [True: 99, False: 57.5k]
  ------------------
   60|     56|  case IR_ABS - IR_ADD: return fabs(x); break;
  ------------------
  |  Branch (60:3): [True: 56, False: 57.5k]
  ------------------
   61|      0|#if LJ_HASJIT
   62|      9|  case IR_LDEXP - IR_ADD: return ldexp(x, (int)y); break;
  ------------------
  |  Branch (62:3): [True: 9, False: 57.6k]
  ------------------
   63|     17|  case IR_MIN - IR_ADD: return x < y ? x : y; break;
  ------------------
  |  Branch (63:3): [True: 17, False: 57.6k]
  |  Branch (63:32): [True: 9, False: 8]
  ------------------
   64|     16|  case IR_MAX - IR_ADD: return x > y ? x : y; break;
  ------------------
  |  Branch (64:3): [True: 16, False: 57.6k]
  |  Branch (64:32): [True: 8, False: 8]
  ------------------
   65|      0|#endif
   66|      0|  default: return x;
  ------------------
  |  Branch (66:3): [True: 0, False: 57.6k]
  ------------------
   67|  57.6k|  }
   68|  57.6k|}
lj_vm_modi:
   74|  1.03M|{
   75|  1.03M|  uint32_t y, ua, ub;
   76|       |  /* This must be checked before using this function. */
   77|  1.03M|  lj_assertX(b != 0, "modulo with zero divisor");
  ------------------
  |  |  366|  1.03M|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|  1.03M|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [True: 1.03M, False: 0]
  |  |  |  |  ------------------
  |  |  |  |  356|  1.03M|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
   78|  1.03M|  ua = a < 0 ? ~(uint32_t)a+1u : (uint32_t)a;
  ------------------
  |  Branch (78:8): [True: 0, False: 1.03M]
  ------------------
   79|  1.03M|  ub = b < 0 ? ~(uint32_t)b+1u : (uint32_t)b;
  ------------------
  |  Branch (79:8): [True: 0, False: 1.03M]
  ------------------
   80|  1.03M|  y = ua % ub;
   81|  1.03M|  if (y != 0 && (a^b) < 0) y = y - ub;
  ------------------
  |  Branch (81:7): [True: 927k, False: 110k]
  |  Branch (81:17): [True: 0, False: 927k]
  ------------------
   82|  1.03M|  if (((int32_t)y^b) < 0) y = ~y+1u;
  ------------------
  |  Branch (82:7): [True: 0, False: 1.03M]
  ------------------
   83|  1.03M|  return (int32_t)y;
   84|  1.03M|}
lj_vm_foldfpm:
   98|     49|{
   99|     49|  switch (fpm) {
  100|     32|  case IRFPM_FLOOR: return lj_vm_floor(x);
  ------------------
  |  Branch (100:3): [True: 32, False: 17]
  ------------------
  101|     11|  case IRFPM_CEIL: return lj_vm_ceil(x);
  ------------------
  |  Branch (101:3): [True: 11, False: 38]
  ------------------
  102|      0|  case IRFPM_TRUNC: return lj_vm_trunc(x);
  ------------------
  |  Branch (102:3): [True: 0, False: 49]
  ------------------
  103|      3|  case IRFPM_SQRT: return sqrt(x);
  ------------------
  |  Branch (103:3): [True: 3, False: 46]
  ------------------
  104|      3|  case IRFPM_LOG: return log(x);
  ------------------
  |  Branch (104:3): [True: 3, False: 46]
  ------------------
  105|      0|  case IRFPM_LOG2: return lj_vm_log2(x);
  ------------------
  |  |   75|      0|#define lj_vm_log2	log2
  ------------------
  |  Branch (105:3): [True: 0, False: 49]
  ------------------
  106|      0|  default: lj_assertX(0, "bad fpm %d", fpm);
  ------------------
  |  |  366|      0|#define lj_assertX(c, ...)	lj_assert_check(NULL, (c), __VA_ARGS__)
  |  |  ------------------
  |  |  |  |  355|      0|  ((c) ? (void)0 : \
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (355:4): [Folded - Ignored]
  |  |  |  |  ------------------
  |  |  |  |  356|      0|   (lj_assert_fail((g), __FILE__, __LINE__, __func__, __VA_ARGS__), 0))
  |  |  ------------------
  ------------------
  |  Branch (106:3): [True: 0, False: 49]
  ------------------
  107|     49|  }
  108|      0|  return 0;
  109|     49|}
lj_vmmath.c:lj_vm_floormul:
   46|  2.42k|{
   47|  2.42k|  return lj_vm_floor(x / y) * y;
   48|  2.42k|}

LLVMFuzzerTestOneInput:
   51|  13.6k|{
   52|  13.6k|	lua_State *L = luaL_newstate();
   53|  13.6k|	if (L == NULL)
  ------------------
  |  Branch (53:6): [True: 0, False: 13.6k]
  ------------------
   54|      0|		return 0;
   55|       |
   56|  13.6k|	luaL_openlibs(L);
   57|       |
   58|  13.6k|	FuzzedDataProvider fdp(data, size);
   59|  13.6k|	dt test_data;
   60|  13.6k|	test_data.fdp = &fdp;
   61|       |
   62|  13.6k|#if LUA_VERSION_NUM == 501
   63|  13.6k|	int res = lua_load(L, Reader, &test_data, "libFuzzer");
   64|       |#else /* Lua 5.3+ */
   65|       |	const char *mode = "t";
   66|       |	int res = lua_load(L, Reader, &test_data, "libFuzzer", mode);
   67|       |#endif /* LUA_VERSION_NUM */
   68|  13.6k|	if (res == LUA_OK) {
  ------------------
  |  |   43|  13.6k|#define LUA_OK		0
  ------------------
  |  Branch (68:6): [True: 6.93k, False: 6.75k]
  ------------------
   69|  6.93k|		lua_pcall(L, 0, 0, 0);
   70|  6.93k|	}
   71|       |
   72|  13.6k|	lua_settop(L, 0);
   73|  13.6k|	lua_close(L);
   74|       |
   75|  13.6k|	return 0;
   76|  13.6k|}
lua_load_test.cc:_ZL6ReaderP9lua_StatePvPm:
   30|   310k|{
   31|   310k|	dt *test_data = (dt *)data;
   32|   310k|	static char *buf = NULL;
   33|       |
   34|   310k|	FuzzedDataProvider *fdp = test_data->fdp;
   35|   310k|	uint8_t max_str_size = fdp->ConsumeIntegral<uint8_t>();
   36|   310k|	if (fdp->remaining_bytes() < max_str_size)
  ------------------
  |  Branch (36:6): [True: 7.87k, False: 302k]
  ------------------
   37|  7.87k|		return NULL;
   38|   302k|	auto str = fdp->ConsumeRandomLengthString(max_str_size);
   39|   302k|	*size = str.size();
   40|       |
   41|   302k|	free(buf);
   42|   302k|	buf = (char *)malloc(*size);
   43|   302k|	assert(buf);
   44|   302k|	memcpy(buf, str.c_str(), *size);
   45|       |
   46|   302k|	return buf;
   47|   302k|}

