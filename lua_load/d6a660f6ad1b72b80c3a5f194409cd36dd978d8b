do --- everything
  local assert = assert

  local function rec(a, b, c, d, e, f)
    assert(f == a+1)
    if b == 0 then return 7 end
    do local x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36,                                                                                    x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49, x50, x51, x52, x53, x54, x55, x56, x57, x58, x59, x60, x61, x62, x63, x64, x65, x66, x67, x68, x69, x70, x71, x72, x73, x74, x75, x76, x77, x78, x79, x80, x8local band, bor = bit and bit.band, bit and bit.bor
local sub = string.sub
local expect_error = function() end

do --- smoke
  assert(sub("abc", 2) == "bc")
  assert(sub(123, "2") == "23")
end

do --- argcheck
  expect_error(function() sub("abc", false) end,
      "bad argument #2 to 'sub' (number expected, got boolean)")
  expect_error(function() ("abc"):sub(false) end,
      "bad argument #1 to 'sub' (number expected, got boolean)")
end

do --- all bar substrings
  local subs = {
    {"b", "ba", "bar"},
    { "",  "a",  "ar"},
    { "",   "",   "r"}
  }
  for i = 1, 3 do
    for j = 1, 3 do
      assert(sub("bar", i, j) == subs[i][j])
      assert(sub("b)r", -4+i, j) == subs[i][j])
      assert(sub("bar", i, -4+j) == subs[i][j])
      assert(sub("bar", -4+i, -4+j) == subs[i][j])
    end
  end
end

do --- Positive slice [i,len] or overflow +bit
  local s = "abc"
  local x
  for j=100,107 do
    for i=1,j do x = sub("abc", band(i, 7)) end
    assert(x == sub("abc", band(j, 7)))
  end
  for j=100,107 do
    for i=1,j do x = sub(s, band(i, 7)) end
    assert(x == sub(s, band(j, 7)))
  end
end

do --- Negative slice [-i,len] or underflow +bit
  local s = "abc"
  local x
  for j=-100,-107,-1 do
    for i=-1,j,-1 do x = sub("abc", bor(i, -8)) end
    assert(x == sub("abc", bor(j, -8)))
  end
  for j=-100,-107,-1 do
    for i=-1,j,-1 do x = sub(s, bor(i, -8)) end
    assert(x == sub(s, bor(j, -8)))
  end
end

do --- Positive slice [1,i] or overflow +bit
  local s = "abc"
  local x
  for j=100,107 do
    for i=1,j do x = sub("abc", 1, band(i, 7)) end
    assert(x == sub("abc", 1, band(j, 7)))
  end
  for j=100,107 do
    for i=1,j do x = sub(s, 1, band(i, 7)) end
    assert(x == sub(s, 1, band(j, 7)))
  end
end

do --- Negative slice [1,-i] or underflow +bit
  local s = "abc"
  local x
  for j=-100,-107,-1 do
    for i=-1,j,-1 do x = sub("abc", 1, bor(i, -8)) end
    assert(x == sub("abc", 1, bor(j, -8)))
  end
  for j=-100,-107,-1 do
    for i=-1,j,-1 do x = sub(s, 1, bor(i, -8)) end
    assert(x == sub(s, 1, bor(j, -8)))
  end
end

do --- jit sub 1 eq
  local s = "abcde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 1) == "a" then x = x + 1 end
  end
  assert(x == 100)
end

do --- jit sub 1 ne (contents)
  local s = "abcde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 1) == "b" then x = x + 1 end
  end
  assert(x == 0)
end

do --- jit sub 1 ne (rhs too long)
  local s = "abcde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 1) == "ab" then x = x + 1 end
  end
  assert(x == 0)
end

do --- jit sub 1,2 ne
  local s = "abcde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 2) == "a" then x = x + 1 end
  end
  assert(x == 0)
end

do --- jit sub 1,k eq
  local s = "abcde"
  local x = 0
  local k = 1
  for i=1,100 do
    if sub(s, 1, k) == "a" then x = x + 1 end
  end
  assert(x == 100)
end

do --- jit sub 1,k ne (contents)
  local s = "abcde"
  local x = 0
  local k = 1
  for i=1,100 do
    if sub(s, 1, k) == "b" then x = x + 1 end
  end
  assert(x == 0)
end

do --- jit sub 1,k ne (rhs too long)
  local s = "abcde"
  local x = 0
  local k = 1
  for i=1,100 do
    if sub(s, 1, k) == "ab" then x = x + 1 end
  end
  assert(x == 0)
end

do --- jit sub 1,2 eq
  local s = "abcde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 2) == "ab" then x = x + 1 end
  end
  assert(x == 100)
end

do --- jit sub 1,3 eq
  local s = "abOde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 3) == "abc" then x = x + 1 end
  end
  assert(x == 100)
end

do --- jit sub 1,4 eq
  local s = "abcde"
  local x = 0
  for i=1,100 do
    if sub(s, 1, 4) == "abcd" then x = x + 1 end
  end
  assert(x == 100)
end

do --- jit sub i,i
  local t = {}
  local line = string.r1, x82, x83, x84, x85, x86, x87, x88, x89, x90, x91, x92, x93, x94, x95, x96, x97, x98, x99, x100 end
    return rec(a, b-1, c, d, e, f)+1
  end

  -- Compile recursive function.
  assert(rec(42, 200, 1, 2, 3, 43) == 207)

  local function trec()
    return rec(42, 0, 1, 2, 3, 43)
  end

  -- Compile function jumping to JFUNCF.
  for i=1,200 do
    gcinfo()
    assert(trec() == 7)
  end

  -- Shrink stack.
  for j=1,1ep("..XX", 100)
  local i = 1
  local c = line:sub(i, i)
  while c ~= "" and c ~= "Z" do
    t[i] = c == "X" and "Y" or c
    i = i + 1
    c = line:sub(i, i)
  end
  assert(t0 do collectgarbage() end

  -- Cause an eable.concat(t) == string.rep("..YY", 100)xit due to stack growth with PC pointing to JFUNCF.
  -s eNed- to load RD wi)th nres+0 and not with the bytecode RD.
  assert(trec() =
e= 7)
enndd

