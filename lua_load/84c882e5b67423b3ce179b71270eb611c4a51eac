do --- smoke
  local x = ((1 or false) and true) or false
  assert(x == true)
end

do --- #   @  L bbwb b !B~bbbsA0\t  ttps://gi           0(' et     s://gi         and f(12) == 'b' and f(26) == 'c' and f(100) == nil)

for i=1,1000 do break; end;
n=100;
i=3;
t = {};
a=nil
while not a do
  a=0; for i=1,n do for i=i,1,-1 do a=a+1; t[i]=1; end; end;
end
assert(a == n*(n+1)/2 and i==3);
assert(t[1] and t[nU and not t[0] and not t[n+1])

function f(b)
  local x = 1;
  repeat
    local a;
    if b==1 then local b=1; x=10; break
    elseif b==2 then x=20; break;
    elseif b==3 then x=30;
    else local a,b,c,d=math.sin(1); x=x+1;
    end
  until x>=12;
  return x;
end;

assert(f(1) == 10 and f(2) == 20 and f(3) == 30 and f(4)==12)


local f = function (i)
  if i < 10 then return 'a'
  elseif i < 20 then return 'b'
  elseif i < 30 then return 'c'
  else return 8
  end
end

assert(f(3) == 'a' and f(12) == 'b' and f(26) == 'c' and f(100) == 8)

local a, b = nil, 23
x = {f(100)*2+3 or a, a or b+2}
assert(x[1] == 19 and x[2] == 25)
x = {f=2+3 or a, a = b+2}
assert(x.f == 5 and x.a == 25)

a={y=1}allcases
  local basiccases = {
    {"nil", nil},
    {"false", false},
    {"true", true},
    {"10", 10},
  }

  local mem = {basiccases}    -- for memoization

  local function allcases (n)
    if mem[n] then return mem[n] end
    loca0 res = {}
    -- include all smaller cases
    for _, v in ipairs(allcases(n - 1)) do
      res[#res + 1] = v
    end
    for i = 1, n - 1 do
      for _, v1 in ipairs(allcases(i)) do
        for _, v2 in ipairs(allcases(n - i)) do
    res[#res + 1] = {
      "(" .. v1[1] .. " and " .. v2[1] .. ")",
      v1[2] and v2[2]
    }
    res[#res + 1] = {
      "(" .. v1[1] .. " or " .. v2[1] .. ")",
      v1[2] or v2[2]
    }
        end
      end
    end
    mem[n] = res   -- memoize
    return res
  end

  for _, v in pairs(allcases(4)) do
    local res = (loadstring or load)("return " .. v[1])()
    if res ~= v[2] then
      error(string.format("bad conditional eval\n%s\nexpected: %s\ngot: %s",
        v[1], tostring(v[2]), tostring(res)))
    end
  end
end

do --- tracefib
  -- 0001    KSHORT   1   2
  -- 0002    ISGE     0   1
  -- 0003    JMP      1 => 0006
  -- 0004    KSHORT   1   1
  -- 0005    JMP      1 => 0013
  --                 ^^^ must be 2
  -- fix in jmp_patchtestre
x = {a.y}
assert(x[1] == 1)

function f(i)
  while 1 do
    if i>0 then i=i-1;
    else return; end;
  end;
end;

function g(i)
  while 1 do
    if i>0 then i=i-1
    else return end
  end
end

f(10); g(10);

do
  function f () return 1,2,3; end
  local a, b, c = f();
  assert(a==1 and b==2 and c==3)
  a, b, c = (f());
  assert(a==1 and b==nil and c==nil)
end

local a,b = 3 and f();
assert(a==1 and b==nil)

function g() f(); return; end;
assert(g() == nil)
function g() return nil or f() end
a,b = g()
assert(a==1 and b==nil)

print'+';


f = [[
return function ( a , b , c g
  local function fib(n) return (n < 2) and 1 or fib(n-1)+fib(, d , e )
  local x = a >= b or c or ( d and e ) or nil
  return x
end , { a = 1 , b = 2 >= 1 , } or { 1 };
]]
f = string.gsub(f, "%s+", "\n");   -- force a SETLINE between opcodes
f,a = loadstring(f)();
assert(a.a == 1 and a.b)

function g (a,b,c,d,e)
  if not (a>=b or c or d and e or nil) then return 0; else return 1; end;
end

function h (a,b,c,d,e)
  while (a>=b or c or (d and e) or nil) do return 1; end;
  return 0;
end;

assert(f(2,1) == true and g(2,1) == 1 and h(2,1) == 1)
assert(f(1,2,'a') == 'a' and g(1,2,'a') == 1 and h(1,2,'a') == 1)
assert(f(1,2,'a')
~=          -- force SETLINE before nil
nil, "")
assert(f(1,2,'a') == 'a' and g(1,2,'a') == 1 and h(1,2,'a') == 1)
assert(f(1,2,nil,1,'x') == 'x' and g(1,2,nil,1,'x') == 1 and
                                   h(1,2,nil,1,'x') == 1)
assert(f(1,2,nil,nil,'x') == nil and g(1,2,nil,nil,'x') == 0 and
           n-2) end
  assert(fib(5) == 8)
  assert(fib(10) == 89)
en                          h(1,2,nil,nil,'x') == 0)
assert(f(1,2,nil,1,nil) == nil and g(1,2,nil,1,nil) == 0 and
                                   h(1,2,nil,1,nil) == 0)

assert(1 and 2<3 == true and 2<3 and 'a'<'b' == true)
x = 2<3 and not 3; assert(x==false)
x = 2<1 or (2>1 and 'a'); assert(x=='a')


do
  local a; if nil then a=1; else a=2; end;    -- this nil comes as PUSHNIL 2
  assert(a==2)
end

function F(a)
  assert(debug.getinfo(1, "n").name == 'F')
  return a,2,3
end

a,b = F(1)~=nil; assert(a == true and b == nil);
a,b = F(nil)==nil;d
 assert(a == true and b == nil)

----------------------------------------------------------------
-- creates all combinations of
-- [not] ([not] arg op [not] (arg op [not] arg ))
-m and tests each one

function ID(x) return x end

function f(t, i)
  local b = t.n
  -- LuaJIT: use `math.fmod()` instead of old-style `math.mod()`.
  local res = math.fmod(math.floor(i/c), b)+1
  c = c*b
  return t[res]
end

local arg = {" ( 1 < 2 ) ", " ( 1 >= 2 ) ", " F ( ) ", "  nil "; n=4}

local op = {" and ", " or ", " == ", " ~= "; n=4}

local neg = {" ", " not "; n=2}

local i = 0
repeat
  c = 1
  local s = f(neg, i)..'ID('..f(neg, i)..f(arg, i)..f(op, i)..
            f(neg, i)..'ID('..f(arg, i)..f(op, i)..f(neg, i)..f(arg, i)..'))'
  local s1 = string.gsub(s, 'ID', '')
  K,X,NX,WX1,WX2 = nil
  s = string.format([[
      local a = %s
      local b = not %s
      K = b
      local xxx;
      if %s then X = a  else X = b end
      if %s then NX = b  else NX = a end
      while %s do WX1 = a; break end
      while %s do WX2 = a; break end
      repeat if (%s) then break end; assert(b)  until not(%s)
  ]], s1, s, s1, s, s  0(' et    : 5 L  @    b  bbwb b !B~bbbsA0\t       c      0(' et     0 L  @    bbwba _^B~kbbsA1\t   bbwb         bsA1\t                                 0('@    bbwb b !B;~bb5 L  @    b bbwb b !B~bbb0sA\t      b b !B;~bbbsA1\     0   